

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Nov 03 11:49:00 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    94                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    95  0000                     
    96                           	psect	idataCOMRAM
    97  003E16                     __pidataCOMRAM:
    98                           	opt stack 0
    99                           
   100                           ;initializer for _wrap
   101  003E16  01                 	db	1
   102                           
   103                           ;initializer for _SW_EWLT_Txt
   104  003E17  30                 	db	48
   105  003E18  00                 	db	0
   106                           
   107                           ;initializer for _SW_EWPED_Txt
   108  003E19  30                 	db	48
   109  003E1A  00                 	db	0
   110                           
   111                           	psect	idataBANK0
   112  003C1E                     __pidataBANK0:
   113                           	opt stack 0
   114                           
   115                           ;initializer for _array
   116  003C1E  40                 	db	64
   117  003C1F  79                 	db	121
   118  003C20  24                 	db	36
   119  003C21  30                 	db	48
   120  003C22  19                 	db	25
   121  003C23  12                 	db	18
   122  003C24  02                 	db	2
   123  003C25  78                 	db	120
   124  003C26  00                 	db	0
   125  003C27  10                 	db	16
   126  003C28  FF                 	db	255
   127                           
   128                           ;initializer for _EWLT_Count
   129  003C29  30                 	db	48
   130  003C2A  30                 	db	48
   131  003C2B  00                 	db	0
   132                           
   133                           ;initializer for _EW_Count
   134  003C2C  30                 	db	48
   135  003C2D  30                 	db	48
   136  003C2E  00                 	db	0
   137                           
   138                           ;initializer for _NSLT_Count
   139  003C2F  30                 	db	48
   140  003C30  30                 	db	48
   141  003C31  00                 	db	0
   142                           
   143                           ;initializer for _NS_Count
   144  003C32  30                 	db	48
   145  003C33  30                 	db	48
   146  003C34  00                 	db	0
   147                           
   148                           ;initializer for _PED_EW_Count
   149  003C35  30                 	db	48
   150  003C36  30                 	db	48
   151  003C37  00                 	db	0
   152                           
   153                           ;initializer for _PED_NS_Count
   154  003C38  30                 	db	48
   155  003C39  30                 	db	48
   156  003C3A  00                 	db	0
   157                           
   158                           ;initializer for _Act_Mode_Txt
   159  003C3B  44                 	db	68
   160  003C3C  00                 	db	0
   161                           
   162                           ;initializer for _FlashingR_Txt
   163  003C3D  30                 	db	48
   164  003C3E  00                 	db	0
   165                           
   166                           ;initializer for _FlashingS_Txt
   167  003C3F  30                 	db	48
   168  003C40  00                 	db	0
   169                           
   170                           ;initializer for _SW_MODE_Txt
   171  003C41  44                 	db	68
   172  003C42  00                 	db	0
   173                           
   174                           ;initializer for _SW_NSLT_Txt
   175  003C43  30                 	db	48
   176  003C44  00                 	db	0
   177                           
   178                           ;initializer for _SW_NSPED_Txt
   179  003C45  30                 	db	48
   180  003C46  00                 	db	0
   181                           
   182                           	psect	mediumconst
   183  00FD14                     __pmediumconst:
   184                           	opt stack 0
   185  00FD14  00                 	db	0
   186  00FD15                     _font:
   187                           	opt stack 0
   188  00FD15  00                 	db	0
   189  00FD16  00                 	db	0
   190  00FD17  00                 	db	0
   191  00FD18  00                 	db	0
   192  00FD19  00                 	db	0
   193  00FD1A  00                 	db	0
   194  00FD1B  00                 	db	0
   195  00FD1C  5F                 	db	95
   196  00FD1D  00                 	db	0
   197  00FD1E  00                 	db	0
   198  00FD1F  00                 	db	0
   199  00FD20  07                 	db	7
   200  00FD21  00                 	db	0
   201  00FD22  07                 	db	7
   202  00FD23  00                 	db	0
   203  00FD24  14                 	db	20
   204  00FD25  7F                 	db	127
   205  00FD26  14                 	db	20
   206  00FD27  7F                 	db	127
   207  00FD28  14                 	db	20
   208  00FD29  24                 	db	36
   209  00FD2A  2A                 	db	42
   210  00FD2B  7F                 	db	127
   211  00FD2C  2A                 	db	42
   212  00FD2D  12                 	db	18
   213  00FD2E  23                 	db	35
   214  00FD2F  13                 	db	19
   215  00FD30  08                 	db	8
   216  00FD31  64                 	db	100
   217  00FD32  62                 	db	98
   218  00FD33  36                 	db	54
   219  00FD34  49                 	db	73
   220  00FD35  56                 	db	86
   221  00FD36  20                 	db	32
   222  00FD37  50                 	db	80
   223  00FD38  00                 	db	0
   224  00FD39  08                 	db	8
   225  00FD3A  07                 	db	7
   226  00FD3B  03                 	db	3
   227  00FD3C  00                 	db	0
   228  00FD3D  00                 	db	0
   229  00FD3E  1C                 	db	28
   230  00FD3F  22                 	db	34
   231  00FD40  41                 	db	65
   232  00FD41  00                 	db	0
   233  00FD42  00                 	db	0
   234  00FD43  41                 	db	65
   235  00FD44  22                 	db	34
   236  00FD45  1C                 	db	28
   237  00FD46  00                 	db	0
   238  00FD47  2A                 	db	42
   239  00FD48  1C                 	db	28
   240  00FD49  7F                 	db	127
   241  00FD4A  1C                 	db	28
   242  00FD4B  2A                 	db	42
   243  00FD4C  08                 	db	8
   244  00FD4D  08                 	db	8
   245  00FD4E  3E                 	db	62
   246  00FD4F  08                 	db	8
   247  00FD50  08                 	db	8
   248  00FD51  00                 	db	0
   249  00FD52  80                 	db	128
   250  00FD53  70                 	db	112
   251  00FD54  30                 	db	48
   252  00FD55  00                 	db	0
   253  00FD56  08                 	db	8
   254  00FD57  08                 	db	8
   255  00FD58  08                 	db	8
   256  00FD59  08                 	db	8
   257  00FD5A  08                 	db	8
   258  00FD5B  00                 	db	0
   259  00FD5C  00                 	db	0
   260  00FD5D  60                 	db	96
   261  00FD5E  60                 	db	96
   262  00FD5F  00                 	db	0
   263  00FD60  20                 	db	32
   264  00FD61  10                 	db	16
   265  00FD62  08                 	db	8
   266  00FD63  04                 	db	4
   267  00FD64  02                 	db	2
   268  00FD65  3E                 	db	62
   269  00FD66  51                 	db	81
   270  00FD67  49                 	db	73
   271  00FD68  45                 	db	69
   272  00FD69  3E                 	db	62
   273  00FD6A  00                 	db	0
   274  00FD6B  42                 	db	66
   275  00FD6C  7F                 	db	127
   276  00FD6D  40                 	db	64
   277  00FD6E  00                 	db	0
   278  00FD6F  72                 	db	114
   279  00FD70  49                 	db	73
   280  00FD71  49                 	db	73
   281  00FD72  49                 	db	73
   282  00FD73  46                 	db	70
   283  00FD74  21                 	db	33
   284  00FD75  41                 	db	65
   285  00FD76  49                 	db	73
   286  00FD77  4D                 	db	77
   287  00FD78  33                 	db	51
   288  00FD79  18                 	db	24
   289  00FD7A  14                 	db	20
   290  00FD7B  12                 	db	18
   291  00FD7C  7F                 	db	127
   292  00FD7D  10                 	db	16
   293  00FD7E  27                 	db	39
   294  00FD7F  45                 	db	69
   295  00FD80  45                 	db	69
   296  00FD81  45                 	db	69
   297  00FD82  39                 	db	57
   298  00FD83  3C                 	db	60
   299  00FD84  4A                 	db	74
   300  00FD85  49                 	db	73
   301  00FD86  49                 	db	73
   302  00FD87  31                 	db	49
   303  00FD88  41                 	db	65
   304  00FD89  21                 	db	33
   305  00FD8A  11                 	db	17
   306  00FD8B  09                 	db	9
   307  00FD8C  07                 	db	7
   308  00FD8D  36                 	db	54
   309  00FD8E  49                 	db	73
   310  00FD8F  49                 	db	73
   311  00FD90  49                 	db	73
   312  00FD91  36                 	db	54
   313  00FD92  46                 	db	70
   314  00FD93  49                 	db	73
   315  00FD94  49                 	db	73
   316  00FD95  29                 	db	41
   317  00FD96  1E                 	db	30
   318  00FD97  00                 	db	0
   319  00FD98  00                 	db	0
   320  00FD99  14                 	db	20
   321  00FD9A  00                 	db	0
   322  00FD9B  00                 	db	0
   323  00FD9C  00                 	db	0
   324  00FD9D  40                 	db	64
   325  00FD9E  34                 	db	52
   326  00FD9F  00                 	db	0
   327  00FDA0  00                 	db	0
   328  00FDA1  00                 	db	0
   329  00FDA2  08                 	db	8
   330  00FDA3  14                 	db	20
   331  00FDA4  22                 	db	34
   332  00FDA5  41                 	db	65
   333  00FDA6  14                 	db	20
   334  00FDA7  14                 	db	20
   335  00FDA8  14                 	db	20
   336  00FDA9  14                 	db	20
   337  00FDAA  14                 	db	20
   338  00FDAB  00                 	db	0
   339  00FDAC  41                 	db	65
   340  00FDAD  22                 	db	34
   341  00FDAE  14                 	db	20
   342  00FDAF  08                 	db	8
   343  00FDB0  02                 	db	2
   344  00FDB1  01                 	db	1
   345  00FDB2  59                 	db	89
   346  00FDB3  09                 	db	9
   347  00FDB4  06                 	db	6
   348  00FDB5  3E                 	db	62
   349  00FDB6  41                 	db	65
   350  00FDB7  5D                 	db	93
   351  00FDB8  59                 	db	89
   352  00FDB9  4E                 	db	78
   353  00FDBA  7C                 	db	124
   354  00FDBB  12                 	db	18
   355  00FDBC  11                 	db	17
   356  00FDBD  12                 	db	18
   357  00FDBE  7C                 	db	124
   358  00FDBF  7F                 	db	127
   359  00FDC0  49                 	db	73
   360  00FDC1  49                 	db	73
   361  00FDC2  49                 	db	73
   362  00FDC3  36                 	db	54
   363  00FDC4  3E                 	db	62
   364  00FDC5  41                 	db	65
   365  00FDC6  41                 	db	65
   366  00FDC7  41                 	db	65
   367  00FDC8  22                 	db	34
   368  00FDC9  7F                 	db	127
   369  00FDCA  41                 	db	65
   370  00FDCB  41                 	db	65
   371  00FDCC  41                 	db	65
   372  00FDCD  3E                 	db	62
   373  00FDCE  7F                 	db	127
   374  00FDCF  49                 	db	73
   375  00FDD0  49                 	db	73
   376  00FDD1  49                 	db	73
   377  00FDD2  41                 	db	65
   378  00FDD3  7F                 	db	127
   379  00FDD4  09                 	db	9
   380  00FDD5  09                 	db	9
   381  00FDD6  09                 	db	9
   382  00FDD7  01                 	db	1
   383  00FDD8  3E                 	db	62
   384  00FDD9  41                 	db	65
   385  00FDDA  41                 	db	65
   386  00FDDB  51                 	db	81
   387  00FDDC  73                 	db	115
   388  00FDDD  7F                 	db	127
   389  00FDDE  08                 	db	8
   390  00FDDF  08                 	db	8
   391  00FDE0  08                 	db	8
   392  00FDE1  7F                 	db	127
   393  00FDE2  00                 	db	0
   394  00FDE3  41                 	db	65
   395  00FDE4  7F                 	db	127
   396  00FDE5  41                 	db	65
   397  00FDE6  00                 	db	0
   398  00FDE7  20                 	db	32
   399  00FDE8  40                 	db	64
   400  00FDE9  41                 	db	65
   401  00FDEA  3F                 	db	63
   402  00FDEB  01                 	db	1
   403  00FDEC  7F                 	db	127
   404  00FDED  08                 	db	8
   405  00FDEE  14                 	db	20
   406  00FDEF  22                 	db	34
   407  00FDF0  41                 	db	65
   408  00FDF1  7F                 	db	127
   409  00FDF2  40                 	db	64
   410  00FDF3  40                 	db	64
   411  00FDF4  40                 	db	64
   412  00FDF5  40                 	db	64
   413  00FDF6  7F                 	db	127
   414  00FDF7  02                 	db	2
   415  00FDF8  1C                 	db	28
   416  00FDF9  02                 	db	2
   417  00FDFA  7F                 	db	127
   418  00FDFB  7F                 	db	127
   419  00FDFC  04                 	db	4
   420  00FDFD  08                 	db	8
   421  00FDFE  10                 	db	16
   422  00FDFF  7F                 	db	127
   423  00FE00  3E                 	db	62
   424  00FE01  41                 	db	65
   425  00FE02  41                 	db	65
   426  00FE03  41                 	db	65
   427  00FE04  3E                 	db	62
   428  00FE05  7F                 	db	127
   429  00FE06  09                 	db	9
   430  00FE07  09                 	db	9
   431  00FE08  09                 	db	9
   432  00FE09  06                 	db	6
   433  00FE0A  3E                 	db	62
   434  00FE0B  41                 	db	65
   435  00FE0C  51                 	db	81
   436  00FE0D  21                 	db	33
   437  00FE0E  5E                 	db	94
   438  00FE0F  7F                 	db	127
   439  00FE10  09                 	db	9
   440  00FE11  19                 	db	25
   441  00FE12  29                 	db	41
   442  00FE13  46                 	db	70
   443  00FE14                     __end_of_font:
   444                           	opt stack 0
   445  00FE14                     _font2:
   446                           	opt stack 0
   447  00FE14  26                 	db	38
   448  00FE15  49                 	db	73
   449  00FE16  49                 	db	73
   450  00FE17  49                 	db	73
   451  00FE18  32                 	db	50
   452  00FE19  03                 	db	3
   453  00FE1A  01                 	db	1
   454  00FE1B  7F                 	db	127
   455  00FE1C  01                 	db	1
   456  00FE1D  03                 	db	3
   457  00FE1E  3F                 	db	63
   458  00FE1F  40                 	db	64
   459  00FE20  40                 	db	64
   460  00FE21  40                 	db	64
   461  00FE22  3F                 	db	63
   462  00FE23  1F                 	db	31
   463  00FE24  20                 	db	32
   464  00FE25  40                 	db	64
   465  00FE26  20                 	db	32
   466  00FE27  1F                 	db	31
   467  00FE28  3F                 	db	63
   468  00FE29  40                 	db	64
   469  00FE2A  38                 	db	56
   470  00FE2B  40                 	db	64
   471  00FE2C  3F                 	db	63
   472  00FE2D  63                 	db	99
   473  00FE2E  14                 	db	20
   474  00FE2F  08                 	db	8
   475  00FE30  14                 	db	20
   476  00FE31  63                 	db	99
   477  00FE32  03                 	db	3
   478  00FE33  04                 	db	4
   479  00FE34  78                 	db	120
   480  00FE35  04                 	db	4
   481  00FE36  03                 	db	3
   482  00FE37  61                 	db	97
   483  00FE38  59                 	db	89
   484  00FE39  49                 	db	73
   485  00FE3A  4D                 	db	77
   486  00FE3B  43                 	db	67
   487  00FE3C  00                 	db	0
   488  00FE3D  7F                 	db	127
   489  00FE3E  41                 	db	65
   490  00FE3F  41                 	db	65
   491  00FE40  41                 	db	65
   492  00FE41  02                 	db	2
   493  00FE42  04                 	db	4
   494  00FE43  08                 	db	8
   495  00FE44  10                 	db	16
   496  00FE45  20                 	db	32
   497  00FE46  00                 	db	0
   498  00FE47  41                 	db	65
   499  00FE48  41                 	db	65
   500  00FE49  41                 	db	65
   501  00FE4A  7F                 	db	127
   502  00FE4B  04                 	db	4
   503  00FE4C  02                 	db	2
   504  00FE4D  01                 	db	1
   505  00FE4E  02                 	db	2
   506  00FE4F  04                 	db	4
   507  00FE50  40                 	db	64
   508  00FE51  40                 	db	64
   509  00FE52  40                 	db	64
   510  00FE53  40                 	db	64
   511  00FE54  40                 	db	64
   512  00FE55  00                 	db	0
   513  00FE56  03                 	db	3
   514  00FE57  07                 	db	7
   515  00FE58  08                 	db	8
   516  00FE59  00                 	db	0
   517  00FE5A  20                 	db	32
   518  00FE5B  54                 	db	84
   519  00FE5C  54                 	db	84
   520  00FE5D  78                 	db	120
   521  00FE5E  40                 	db	64
   522  00FE5F  7F                 	db	127
   523  00FE60  28                 	db	40
   524  00FE61  44                 	db	68
   525  00FE62  44                 	db	68
   526  00FE63  38                 	db	56
   527  00FE64  38                 	db	56
   528  00FE65  44                 	db	68
   529  00FE66  44                 	db	68
   530  00FE67  44                 	db	68
   531  00FE68  28                 	db	40
   532  00FE69  38                 	db	56
   533  00FE6A  44                 	db	68
   534  00FE6B  44                 	db	68
   535  00FE6C  28                 	db	40
   536  00FE6D  7F                 	db	127
   537  00FE6E  38                 	db	56
   538  00FE6F  54                 	db	84
   539  00FE70  54                 	db	84
   540  00FE71  54                 	db	84
   541  00FE72  18                 	db	24
   542  00FE73  00                 	db	0
   543  00FE74  08                 	db	8
   544  00FE75  7E                 	db	126
   545  00FE76  09                 	db	9
   546  00FE77  02                 	db	2
   547  00FE78  18                 	db	24
   548  00FE79  A4                 	db	164
   549  00FE7A  A4                 	db	164
   550  00FE7B  9C                 	db	156
   551  00FE7C  78                 	db	120
   552  00FE7D  7F                 	db	127
   553  00FE7E  08                 	db	8
   554  00FE7F  04                 	db	4
   555  00FE80  04                 	db	4
   556  00FE81  78                 	db	120
   557  00FE82  00                 	db	0
   558  00FE83  44                 	db	68
   559  00FE84  7D                 	db	125
   560  00FE85  40                 	db	64
   561  00FE86  00                 	db	0
   562  00FE87  20                 	db	32
   563  00FE88  40                 	db	64
   564  00FE89  40                 	db	64
   565  00FE8A  3D                 	db	61
   566  00FE8B  00                 	db	0
   567  00FE8C  7F                 	db	127
   568  00FE8D  10                 	db	16
   569  00FE8E  28                 	db	40
   570  00FE8F  44                 	db	68
   571  00FE90  00                 	db	0
   572  00FE91  00                 	db	0
   573  00FE92  41                 	db	65
   574  00FE93  7F                 	db	127
   575  00FE94  40                 	db	64
   576  00FE95  00                 	db	0
   577  00FE96  7C                 	db	124
   578  00FE97  04                 	db	4
   579  00FE98  78                 	db	120
   580  00FE99  04                 	db	4
   581  00FE9A  78                 	db	120
   582  00FE9B  7C                 	db	124
   583  00FE9C  08                 	db	8
   584  00FE9D  04                 	db	4
   585  00FE9E  04                 	db	4
   586  00FE9F  78                 	db	120
   587  00FEA0  38                 	db	56
   588  00FEA1  44                 	db	68
   589  00FEA2  44                 	db	68
   590  00FEA3  44                 	db	68
   591  00FEA4  38                 	db	56
   592  00FEA5  FC                 	db	252
   593  00FEA6  18                 	db	24
   594  00FEA7  24                 	db	36
   595  00FEA8  24                 	db	36
   596  00FEA9  18                 	db	24
   597  00FEAA  18                 	db	24
   598  00FEAB  24                 	db	36
   599  00FEAC  24                 	db	36
   600  00FEAD  18                 	db	24
   601  00FEAE  FC                 	db	252
   602  00FEAF  7C                 	db	124
   603  00FEB0  08                 	db	8
   604  00FEB1  04                 	db	4
   605  00FEB2  04                 	db	4
   606  00FEB3  08                 	db	8
   607  00FEB4  48                 	db	72
   608  00FEB5  54                 	db	84
   609  00FEB6  54                 	db	84
   610  00FEB7  54                 	db	84
   611  00FEB8  24                 	db	36
   612  00FEB9  04                 	db	4
   613  00FEBA  04                 	db	4
   614  00FEBB  3F                 	db	63
   615  00FEBC  44                 	db	68
   616  00FEBD  24                 	db	36
   617  00FEBE  3C                 	db	60
   618  00FEBF  40                 	db	64
   619  00FEC0  40                 	db	64
   620  00FEC1  20                 	db	32
   621  00FEC2  7C                 	db	124
   622  00FEC3  1C                 	db	28
   623  00FEC4  20                 	db	32
   624  00FEC5  40                 	db	64
   625  00FEC6  20                 	db	32
   626  00FEC7  1C                 	db	28
   627  00FEC8  3C                 	db	60
   628  00FEC9  40                 	db	64
   629  00FECA  30                 	db	48
   630  00FECB  40                 	db	64
   631  00FECC  3C                 	db	60
   632  00FECD  44                 	db	68
   633  00FECE  28                 	db	40
   634  00FECF  10                 	db	16
   635  00FED0  28                 	db	40
   636  00FED1  44                 	db	68
   637  00FED2  4C                 	db	76
   638  00FED3  90                 	db	144
   639  00FED4  90                 	db	144
   640  00FED5  90                 	db	144
   641  00FED6  7C                 	db	124
   642  00FED7  44                 	db	68
   643  00FED8  64                 	db	100
   644  00FED9  54                 	db	84
   645  00FEDA  4C                 	db	76
   646  00FEDB  44                 	db	68
   647  00FEDC  00                 	db	0
   648  00FEDD  08                 	db	8
   649  00FEDE  36                 	db	54
   650  00FEDF  41                 	db	65
   651  00FEE0  00                 	db	0
   652  00FEE1  00                 	db	0
   653  00FEE2  00                 	db	0
   654  00FEE3  77                 	db	119
   655  00FEE4  00                 	db	0
   656  00FEE5  00                 	db	0
   657  00FEE6  00                 	db	0
   658  00FEE7  41                 	db	65
   659  00FEE8  36                 	db	54
   660  00FEE9  08                 	db	8
   661  00FEEA  00                 	db	0
   662  00FEEB  02                 	db	2
   663  00FEEC  01                 	db	1
   664  00FEED  02                 	db	2
   665  00FEEE  04                 	db	4
   666  00FEEF  02                 	db	2
   667  00FEF0                     __end_of_font2:
   668                           	opt stack 0
   669  00FEF0                     _dpowers:
   670                           	opt stack 0
   671  00FEF0  0001               	dw	1
   672  00FEF2  0000               	dw	0
   673  00FEF4  000A               	dw	10
   674  00FEF6  0000               	dw	0
   675  00FEF8  0064               	dw	100
   676  00FEFA  0000               	dw	0
   677  00FEFC  03E8               	dw	1000
   678  00FEFE  0000               	dw	0
   679  00FF00  2710               	dw	10000
   680  00FF02  0000               	dw	0
   681  00FF04  86A0               	dw	34464
   682  00FF06  0001               	dw	1
   683  00FF08  4240               	dw	16960
   684  00FF0A  000F               	dw	15
   685  00FF0C  9680               	dw	38528
   686  00FF0E  0098               	dw	152
   687  00FF10  E100               	dw	57600
   688  00FF12  05F5               	dw	1525
   689  00FF14  CA00               	dw	51712
   690  00FF16  3B9A               	dw	15258
   691  00FF18                     __end_of_dpowers:
   692                           	opt stack 0
   693  00FF18                     __npowers_:
   694                           	opt stack 0
   695  00FF18  00                 	db	0
   696  00FF19  80                 	db	128
   697  00FF1A  3F                 	db	63
   698  00FF1B  CD                 	db	205
   699  00FF1C  CC                 	db	204
   700  00FF1D  3D                 	db	61
   701  00FF1E  D7                 	db	215
   702  00FF1F  23                 	db	35
   703  00FF20  3C                 	db	60
   704  00FF21  12                 	db	18
   705  00FF22  83                 	db	131
   706  00FF23  3A                 	db	58
   707  00FF24  B7                 	db	183
   708  00FF25  D1                 	db	209
   709  00FF26  38                 	db	56
   710  00FF27  C6                 	db	198
   711  00FF28  27                 	db	39
   712  00FF29  37                 	db	55
   713  00FF2A  38                 	db	56
   714  00FF2B  86                 	db	134
   715  00FF2C  35                 	db	53
   716  00FF2D  C0                 	db	192
   717  00FF2E  D6                 	db	214
   718  00FF2F  33                 	db	51
   719  00FF30  CC                 	db	204
   720  00FF31  2B                 	db	43
   721  00FF32  32                 	db	50
   722  00FF33  70                 	db	112
   723  00FF34  89                 	db	137
   724  00FF35  30                 	db	48
   725  00FF36  E7                 	db	231
   726  00FF37  DB                 	db	219
   727  00FF38  2E                 	db	46
   728  00FF39  E5                 	db	229
   729  00FF3A  3C                 	db	60
   730  00FF3B  1E                 	db	30
   731  00FF3C  42                 	db	66
   732  00FF3D  A2                 	db	162
   733  00FF3E  0D                 	db	13
   734  00FF3F                     __end_of__npowers_:
   735                           	opt stack 0
   736  00FF3F                     __powers_:
   737                           	opt stack 0
   738  00FF3F  00                 	db	0
   739  00FF40  80                 	db	128
   740  00FF41  3F                 	db	63
   741  00FF42  00                 	db	0
   742  00FF43  20                 	db	32
   743  00FF44  41                 	db	65
   744  00FF45  00                 	db	0
   745  00FF46  C8                 	db	200
   746  00FF47  42                 	db	66
   747  00FF48  00                 	db	0
   748  00FF49  7A                 	db	122
   749  00FF4A  44                 	db	68
   750  00FF4B  40                 	db	64
   751  00FF4C  1C                 	db	28
   752  00FF4D  46                 	db	70
   753  00FF4E  50                 	db	80
   754  00FF4F  C3                 	db	195
   755  00FF50  47                 	db	71
   756  00FF51  24                 	db	36
   757  00FF52  74                 	db	116
   758  00FF53  49                 	db	73
   759  00FF54  97                 	db	151
   760  00FF55  18                 	db	24
   761  00FF56  4B                 	db	75
   762  00FF57  BC                 	db	188
   763  00FF58  BE                 	db	190
   764  00FF59  4C                 	db	76
   765  00FF5A  6B                 	db	107
   766  00FF5B  6E                 	db	110
   767  00FF5C  4E                 	db	78
   768  00FF5D  03                 	db	3
   769  00FF5E  15                 	db	21
   770  00FF5F  50                 	db	80
   771  00FF60  79                 	db	121
   772  00FF61  AD                 	db	173
   773  00FF62  60                 	db	96
   774  00FF63  F3                 	db	243
   775  00FF64  49                 	db	73
   776  00FF65  71                 	db	113
   777  00FF66                     __end_of__powers_:
   778                           	opt stack 0
   779  0000                     _ADCON0	set	4034
   780  0000                     _ADCON0bits	set	4034
   781  0000                     _ADCON1	set	4033
   782  0000                     _ADCON2	set	4032
   783  0000                     _ADRESH	set	4036
   784  0000                     _ADRESL	set	4035
   785  0000                     _CCP2CON	set	4026
   786  0000                     _CCPR2L	set	4027
   787  0000                     _INTCON2bits	set	4081
   788  0000                     _INTCON3bits	set	4080
   789  0000                     _INTCONbits	set	4082
   790  0000                     _OSCCON	set	4051
   791  0000                     _PIE1bits	set	3997
   792  0000                     _PIR1bits	set	3998
   793  0000                     _PIR2bits	set	4001
   794  0000                     _PORTAbits	set	3968
   795  0000                     _PORTBbits	set	3969
   796  0000                     _PORTCbits	set	3970
   797  0000                     _PORTD	set	3971
   798  0000                     _PORTDbits	set	3971
   799  0000                     _PORTEbits	set	3972
   800  0000                     _PR2	set	4043
   801  0000                     _RCSTA	set	4011
   802  0000                     _RCSTAbits	set	4011
   803  0000                     _SPBRG	set	4015
   804  0000                     _SPBRGH	set	4016
   805  0000                     _SSPBUF	set	4041
   806  0000                     _SSPCON1	set	4038
   807  0000                     _SSPSTAT	set	4039
   808  0000                     _SSPSTATbits	set	4039
   809  0000                     _T0CON	set	4053
   810  0000                     _T0CONbits	set	4053
   811  0000                     _T2CON	set	4042
   812  0000                     _T3CON	set	4017
   813  0000                     _T3CONbits	set	4017
   814  0000                     _TMR0H	set	4055
   815  0000                     _TMR0L	set	4054
   816  0000                     _TRISA	set	3986
   817  0000                     _TRISB	set	3987
   818  0000                     _TRISC	set	3988
   819  0000                     _TRISCbits	set	3988
   820  0000                     _TRISD	set	3989
   821  0000                     _TRISE	set	3990
   822  0000                     _TXREG	set	4013
   823  0000                     _TXSTA	set	4012
   824  0000                     _TXSTAbits	set	4012
   825  0000                     _RBPU	set	32655
   826  0000                     _TRMT	set	32097
   827  00FF66                     STR_16:
   828                           
   829                           ; BSR set to: 0
   830  00FF66  49                 	db	73	;'I'
   831  00FF67  4E                 	db	78	;'N'
   832  00FF68  54                 	db	84	;'T'
   833  00FF69  30                 	db	48	;'0'
   834  00FF6A  20                 	db	32
   835  00FF6B  69                 	db	105	;'i'
   836  00FF6C  6E                 	db	110	;'n'
   837  00FF6D  74                 	db	116	;'t'
   838  00FF6E  65                 	db	101	;'e'
   839  00FF6F  72                 	db	114	;'r'
   840  00FF70  72                 	db	114	;'r'
   841  00FF71  75                 	db	117	;'u'
   842  00FF72  70                 	db	112	;'p'
   843  00FF73  74                 	db	116	;'t'
   844  00FF74  20                 	db	32
   845  00FF75  70                 	db	112	;'p'
   846  00FF76  69                 	db	105	;'i'
   847  00FF77  6E                 	db	110	;'n'
   848  00FF78  20                 	db	32
   849  00FF79  64                 	db	100	;'d'
   850  00FF7A  65                 	db	101	;'e'
   851  00FF7B  74                 	db	116	;'t'
   852  00FF7C  65                 	db	101	;'e'
   853  00FF7D  63                 	db	99	;'c'
   854  00FF7E  74                 	db	116	;'t'
   855  00FF7F  65                 	db	101	;'e'
   856  00FF80  64                 	db	100	;'d'
   857  00FF81  20                 	db	32
   858  00FF82  0D                 	db	13
   859  00FF83  0A                 	db	10
   860  00FF84  00                 	db	0
   861  00FF85                     STR_12:
   862                           
   863                           ; BSR set to: 0
   864  00FF85  45                 	db	69	;'E'
   865  00FF86  57                 	db	87	;'W'
   866  00FF87  50                 	db	80	;'P'
   867  00FF88  20                 	db	32
   868  00FF89  45                 	db	69	;'E'
   869  00FF8A  57                 	db	87	;'W'
   870  00FF8B  4C                 	db	76	;'L'
   871  00FF8C  54                 	db	84	;'T'
   872  00FF8D  20                 	db	32
   873  00FF8E  4E                 	db	78	;'N'
   874  00FF8F  53                 	db	83	;'S'
   875  00FF90  50                 	db	80	;'P'
   876  00FF91  20                 	db	32
   877  00FF92  4E                 	db	78	;'N'
   878  00FF93  53                 	db	83	;'S'
   879  00FF94  4C                 	db	76	;'L'
   880  00FF95  54                 	db	84	;'T'
   881  00FF96  20                 	db	32
   882  00FF97  4D                 	db	77	;'M'
   883  00FF98  44                 	db	68	;'D'
   884  00FF99  00                 	db	0
   885  00FF9A                     STR_1:
   886                           
   887                           ; BSR set to: 0
   888  00FF9A  45                 	db	69	;'E'
   889  00FF9B  43                 	db	67	;'C'
   890  00FF9C  45                 	db	69	;'E'
   891  00FF9D  33                 	db	51	;'3'
   892  00FF9E  33                 	db	51	;'3'
   893  00FF9F  30                 	db	48	;'0'
   894  00FFA0  31                 	db	49	;'1'
   895  00FFA1  4C                 	db	76	;'L'
   896  00FFA2  20                 	db	32
   897  00FFA3  46                 	db	70	;'F'
   898  00FFA4  61                 	db	97	;'a'
   899  00FFA5  6C                 	db	108	;'l'
   900  00FFA6  6C                 	db	108	;'l'
   901  00FFA7  20                 	db	32
   902  00FFA8  32                 	db	50	;'2'
   903  00FFA9  32                 	db	50	;'2'
   904  00FFAA  2D                 	db	45
   905  00FFAB  53                 	db	83	;'S'
   906  00FFAC  31                 	db	49	;'1'
   907  00FFAD  00                 	db	0
   908  00FFAE                     STR_15:
   909                           
   910                           ; BSR set to: 0
   911  00FFAE  76                 	db	118	;'v'
   912  00FFAF  6F                 	db	111	;'o'
   913  00FFB0  6C                 	db	108	;'l'
   914  00FFB1  74                 	db	116	;'t'
   915  00FFB2  73                 	db	115	;'s'
   916  00FFB3  20                 	db	32
   917  00FFB4  61                 	db	97	;'a'
   918  00FFB5  72                 	db	114	;'r'
   919  00FFB6  65                 	db	101	;'e'
   920  00FFB7  20                 	db	32
   921  00FFB8  25                 	db	37
   922  00FFB9  30                 	db	48	;'0'
   923  00FFBA  2E                 	db	46
   924  00FFBB  33                 	db	51	;'3'
   925  00FFBC  66                 	db	102	;'f'
   926  00FFBD  0D                 	db	13
   927  00FFBE  0A                 	db	10
   928  00FFBF  0A                 	db	10
   929  00FFC0  00                 	db	0
   930  00FFC1                     STR_8:
   931                           
   932                           ; BSR set to: 0
   933  00FFC1  4E                 	db	78	;'N'
   934  00FFC2  4F                 	db	79	;'O'
   935  00FFC3  52                 	db	82	;'R'
   936  00FFC4  54                 	db	84	;'T'
   937  00FFC5  48                 	db	72	;'H'
   938  00FFC6  2F                 	db	47
   939  00FFC7  53                 	db	83	;'S'
   940  00FFC8  4F                 	db	79	;'O'
   941  00FFC9  55                 	db	85	;'U'
   942  00FFCA  54                 	db	84	;'T'
   943  00FFCB  48                 	db	72	;'H'
   944  00FFCC  00                 	db	0
   945  00FFCD                     STR_6:
   946                           
   947                           ; BSR set to: 0
   948  00FFCD  45                 	db	69	;'E'
   949  00FFCE  41                 	db	65	;'A'
   950  00FFCF  53                 	db	83	;'S'
   951  00FFD0  54                 	db	84	;'T'
   952  00FFD1  2F                 	db	47
   953  00FFD2  57                 	db	87	;'W'
   954  00FFD3  45                 	db	69	;'E'
   955  00FFD4  53                 	db	83	;'S'
   956  00FFD5  54                 	db	84	;'T'
   957  00FFD6  00                 	db	0
   958  00FFD7                     STR_9:
   959                           
   960                           ; BSR set to: 0
   961  00FFD7  4E                 	db	78	;'N'
   962  00FFD8  2F                 	db	47
   963  00FFD9  53                 	db	83	;'S'
   964  00FFDA  20                 	db	32
   965  00FFDB  4C                 	db	76	;'L'
   966  00FFDC  54                 	db	84	;'T'
   967  00FFDD  00                 	db	0
   968  00FFDE                     STR_7:
   969                           
   970                           ; BSR set to: 0
   971  00FFDE  45                 	db	69	;'E'
   972  00FFDF  2F                 	db	47
   973  00FFE0  57                 	db	87	;'W'
   974  00FFE1  20                 	db	32
   975  00FFE2  4C                 	db	76	;'L'
   976  00FFE3  54                 	db	84	;'T'
   977  00FFE4  00                 	db	0
   978  00FFE5                     STR_2:
   979                           
   980                           ; BSR set to: 0
   981  00FFE5  4D                 	db	77	;'M'
   982  00FFE6  6F                 	db	111	;'o'
   983  00FFE7  64                 	db	100	;'d'
   984  00FFE8  65                 	db	101	;'e'
   985  00FFE9  3A                 	db	58	;':'
   986  00FFEA  00                 	db	0
   987  00FFEB                     STR_3:
   988                           
   989                           ; BSR set to: 0
   990  00FFEB  46                 	db	70	;'F'
   991  00FFEC  52                 	db	82	;'R'
   992  00FFED  3A                 	db	58	;':'
   993  00FFEE  00                 	db	0
   994  00FFEF                     STR_4:
   995                           
   996                           ; BSR set to: 0
   997  00FFEF  46                 	db	70	;'F'
   998  00FFF0  53                 	db	83	;'S'
   999  00FFF1  3A                 	db	58	;':'
  1000  00FFF2  00                 	db	0
  1001  00FFF3                     STR_11:
  1002                           
  1003                           ; BSR set to: 0
  1004  00FFF3  50                 	db	80	;'P'
  1005  00FFF4  4E                 	db	78	;'N'
  1006  00FFF5  53                 	db	83	;'S'
  1007  00FFF6  00                 	db	0
  1008  00FFF7                     STR_10:
  1009                           
  1010                           ; BSR set to: 0
  1011  00FFF7  50                 	db	80	;'P'
  1012  00FFF8  45                 	db	69	;'E'
  1013  00FFF9  57                 	db	87	;'W'
  1014  00FFFA  00                 	db	0
  1015  00FFFB                     STR_14:
  1016                           
  1017                           ; BSR set to: 0
  1018  00FFFB  20                 	db	32
  1019  00FFFC  00                 	db	0
  1020  00FFFD                     STR_5:
  1021                           
  1022                           ; BSR set to: 0
  1023  00FFFD  2A                 	db	42
  1024  00FFFE  00                 	db	0
  1025  0000                     
  1026                           ; #config settings
  1027  00FFFF  00                 	db	0	; dummy byte at the end
  1028  0000                     
  1029                           	psect	cinit
  1030  0036E8                     __pcinit:
  1031                           	opt stack 0
  1032  0036E8                     start_initialization:
  1033                           	opt stack 0
  1034  0036E8                     __initialization:
  1035                           	opt stack 0
  1036                           
  1037                           ; Clear objects allocated to BANK0 (52 bytes)
  1038  0036E8  EE00  F080         	lfsr	0,__pbssBANK0
  1039  0036EC  0E34               	movlw	52
  1040  0036EE                     clear_0:
  1041  0036EE  6AEE               	clrf	postinc0,c
  1042  0036F0  06E8               	decf	wreg,f,c
  1043  0036F2  E1FD               	bnz	clear_0
  1044                           
  1045                           ; Clear objects allocated to COMRAM (8 bytes)
  1046  0036F4  EE00  F064         	lfsr	0,__pbssCOMRAM
  1047  0036F8  0E08               	movlw	8
  1048  0036FA                     clear_1:
  1049  0036FA  6AEE               	clrf	postinc0,c
  1050  0036FC  06E8               	decf	wreg,f,c
  1051  0036FE  E1FD               	bnz	clear_1
  1052                           
  1053                           ; Initialize objects allocated to BANK0 (41 bytes)
  1054                           ; load TBLPTR registers with __pidataBANK0
  1055  003700  0E1E               	movlw	low __pidataBANK0
  1056  003702  6EF6               	movwf	tblptrl,c
  1057  003704  0E3C               	movlw	high __pidataBANK0
  1058  003706  6EF7               	movwf	tblptrh,c
  1059  003708  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1060  00370A  6EF8               	movwf	tblptru,c
  1061  00370C  EE00  F0B4         	lfsr	0,__pdataBANK0
  1062  003710  EE10 F029          	lfsr	1,41
  1063  003714                     copy_data0:
  1064  003714  0009               	tblrd		*+
  1065  003716  CFF5 FFEE          	movff	tablat,postinc0
  1066  00371A  50E5               	movf	postdec1,w,c
  1067  00371C  50E1               	movf	fsr1l,w,c
  1068  00371E  E1FA               	bnz	copy_data0
  1069                           
  1070                           ; Initialize objects allocated to COMRAM (5 bytes)
  1071                           ; load TBLPTR registers with __pidataCOMRAM
  1072  003720  0E16               	movlw	low __pidataCOMRAM
  1073  003722  6EF6               	movwf	tblptrl,c
  1074  003724  0E3E               	movlw	high __pidataCOMRAM
  1075  003726  6EF7               	movwf	tblptrh,c
  1076  003728  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1077  00372A  6EF8               	movwf	tblptru,c
  1078  00372C  EE00  F06C         	lfsr	0,__pdataCOMRAM
  1079  003730  EE10 F005          	lfsr	1,5
  1080  003734                     copy_data1:
  1081  003734  0009               	tblrd		*+
  1082  003736  CFF5 FFEE          	movff	tablat,postinc0
  1083  00373A  50E5               	movf	postdec1,w,c
  1084  00373C  50E1               	movf	fsr1l,w,c
  1085  00373E  E1FA               	bnz	copy_data1
  1086  003740                     end_of_initialization:
  1087                           	opt stack 0
  1088  003740                     __end_of__initialization:
  1089                           	opt stack 0
  1090  003740  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1091  003742  6EF8               	movwf	tblptru,c
  1092  003744  0100               	movlb	0
  1093  003746  EF01  F018         	goto	_main	;jump to C main() function
  1094                           tblptru	equ	0xFF8
  1095                           tblptrh	equ	0xFF7
  1096                           tblptrl	equ	0xFF6
  1097                           tablat	equ	0xFF5
  1098                           postinc0	equ	0xFEE
  1099                           wreg	equ	0xFE8
  1100                           postdec1	equ	0xFE5
  1101                           fsr1l	equ	0xFE1
  1102                           
  1103                           	psect	bssCOMRAM
  1104  000064                     __pbssCOMRAM:
  1105                           	opt stack 0
  1106  000064                     _txt:
  1107                           	opt stack 0
  1108  000064                     	ds	2
  1109  000066                     _Count:
  1110                           	opt stack 0
  1111  000066                     	ds	1
  1112  000067                     _PED_Count:
  1113                           	opt stack 0
  1114  000067                     	ds	1
  1115  000068                     __tft_type:
  1116                           	opt stack 0
  1117  000068                     	ds	1
  1118  000069                     _colstart:
  1119                           	opt stack 0
  1120  000069                     	ds	1
  1121  00006A                     _dir:
  1122                           	opt stack 0
  1123  00006A                     	ds	1
  1124  00006B                     _rowstart:
  1125                           	opt stack 0
  1126  00006B                     	ds	1
  1127                           tblptru	equ	0xFF8
  1128                           tblptrh	equ	0xFF7
  1129                           tblptrl	equ	0xFF6
  1130                           tablat	equ	0xFF5
  1131                           postinc0	equ	0xFEE
  1132                           wreg	equ	0xFE8
  1133                           postdec1	equ	0xFE5
  1134                           fsr1l	equ	0xFE1
  1135                           
  1136                           	psect	dataCOMRAM
  1137  00006C                     __pdataCOMRAM:
  1138                           	opt stack 0
  1139  00006C                     _wrap:
  1140                           	opt stack 0
  1141  00006C                     	ds	1
  1142  00006D                     _SW_EWLT_Txt:
  1143                           	opt stack 0
  1144  00006D                     	ds	2
  1145  00006F                     _SW_EWPED_Txt:
  1146                           	opt stack 0
  1147  00006F                     	ds	2
  1148                           tblptru	equ	0xFF8
  1149                           tblptrh	equ	0xFF7
  1150                           tblptrl	equ	0xFF6
  1151                           tablat	equ	0xFF5
  1152                           postinc0	equ	0xFEE
  1153                           wreg	equ	0xFE8
  1154                           postdec1	equ	0xFE5
  1155                           fsr1l	equ	0xFE1
  1156                           
  1157                           	psect	bssBANK0
  1158  000080                     __pbssBANK0:
  1159                           	opt stack 0
  1160  000080                     _volts:
  1161                           	opt stack 0
  1162  000080                     	ds	3
  1163  000083                     _INT0_flag:
  1164                           	opt stack 0
  1165  000083                     	ds	2
  1166  000085                     _INT1_flag:
  1167                           	opt stack 0
  1168  000085                     	ds	2
  1169  000087                     _INT2_flag:
  1170                           	opt stack 0
  1171  000087                     	ds	2
  1172  000089                     _MODE:
  1173                           	opt stack 0
  1174  000089                     	ds	2
  1175  00008B                     _nbr:
  1176                           	opt stack 0
  1177  00008B                     	ds	2
  1178  00008D                     _EWPED_SW:
  1179                           	opt stack 0
  1180  00008D                     	ds	1
  1181  00008E                     _NSPED_SW:
  1182                           	opt stack 0
  1183  00008E                     	ds	1
  1184  00008F                     _SW_EWLT:
  1185                           	opt stack 0
  1186  00008F                     	ds	1
  1187  000090                     _SW_EWPED:
  1188                           	opt stack 0
  1189  000090                     	ds	1
  1190  000091                     _SW_MODE:
  1191                           	opt stack 0
  1192  000091                     	ds	1
  1193  000092                     _SW_NSLT:
  1194                           	opt stack 0
  1195  000092                     	ds	1
  1196  000093                     _SW_NSPED:
  1197                           	opt stack 0
  1198  000093                     	ds	1
  1199  000094                     _direction:
  1200                           	opt stack 0
  1201  000094                     	ds	1
  1202  000095                     _buffer:
  1203                           	opt stack 0
  1204  000095                     	ds	31
  1205                           tblptru	equ	0xFF8
  1206                           tblptrh	equ	0xFF7
  1207                           tblptrl	equ	0xFF6
  1208                           tablat	equ	0xFF5
  1209                           postinc0	equ	0xFEE
  1210                           wreg	equ	0xFE8
  1211                           postdec1	equ	0xFE5
  1212                           fsr1l	equ	0xFE1
  1213                           
  1214                           	psect	dataBANK0
  1215  0000B4                     __pdataBANK0:
  1216                           	opt stack 0
  1217  0000B4                     _array:
  1218                           	opt stack 0
  1219  0000B4                     	ds	11
  1220  0000BF                     _EWLT_Count:
  1221                           	opt stack 0
  1222  0000BF                     	ds	3
  1223  0000C2                     _EW_Count:
  1224                           	opt stack 0
  1225  0000C2                     	ds	3
  1226  0000C5                     _NSLT_Count:
  1227                           	opt stack 0
  1228  0000C5                     	ds	3
  1229  0000C8                     _NS_Count:
  1230                           	opt stack 0
  1231  0000C8                     	ds	3
  1232  0000CB                     _PED_EW_Count:
  1233                           	opt stack 0
  1234  0000CB                     	ds	3
  1235  0000CE                     _PED_NS_Count:
  1236                           	opt stack 0
  1237  0000CE                     	ds	3
  1238  0000D1                     _Act_Mode_Txt:
  1239                           	opt stack 0
  1240  0000D1                     	ds	2
  1241  0000D3                     _FlashingR_Txt:
  1242                           	opt stack 0
  1243  0000D3                     	ds	2
  1244  0000D5                     _FlashingS_Txt:
  1245                           	opt stack 0
  1246  0000D5                     	ds	2
  1247  0000D7                     _SW_MODE_Txt:
  1248                           	opt stack 0
  1249  0000D7                     	ds	2
  1250  0000D9                     _SW_NSLT_Txt:
  1251                           	opt stack 0
  1252  0000D9                     	ds	2
  1253  0000DB                     _SW_NSPED_Txt:
  1254                           	opt stack 0
  1255  0000DB                     	ds	2
  1256                           tblptru	equ	0xFF8
  1257                           tblptrh	equ	0xFF7
  1258                           tblptrl	equ	0xFF6
  1259                           tablat	equ	0xFF5
  1260                           postinc0	equ	0xFEE
  1261                           wreg	equ	0xFE8
  1262                           postdec1	equ	0xFE5
  1263                           fsr1l	equ	0xFE1
  1264                           
  1265                           	psect	cstackBANK0
  1266  0000DD                     __pcstackBANK0:
  1267                           	opt stack 0
  1268  0000DD                     _printf$2521:
  1269                           	opt stack 0
  1270                           
  1271                           ; 3 bytes @ 0x0
  1272  0000DD                     	ds	3
  1273  0000E0                     printf@ap:
  1274                           	opt stack 0
  1275                           
  1276                           ; 2 bytes @ 0x3
  1277  0000E0                     	ds	2
  1278  0000E2                     printf@val:
  1279                           	opt stack 0
  1280                           
  1281                           ; 4 bytes @ 0x5
  1282  0000E2                     	ds	4
  1283  0000E6                     printf@tmpval:
  1284                           	opt stack 0
  1285                           
  1286                           ; 4 bytes @ 0x9
  1287  0000E6                     	ds	4
  1288  0000EA                     printf@exp:
  1289                           	opt stack 0
  1290                           
  1291                           ; 2 bytes @ 0xD
  1292  0000EA                     	ds	2
  1293  0000EC                     printf@flag:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0xF
  1297  0000EC                     	ds	2
  1298  0000EE                     printf@width:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x11
  1302  0000EE                     	ds	2
  1303  0000F0                     printf@fval:
  1304                           	opt stack 0
  1305                           
  1306                           ; 3 bytes @ 0x13
  1307  0000F0                     	ds	3
  1308  0000F3                     printf@prec:
  1309                           	opt stack 0
  1310                           
  1311                           ; 2 bytes @ 0x16
  1312  0000F3                     	ds	2
  1313  0000F5                     printf@c:
  1314                           	opt stack 0
  1315                           
  1316                           ; 1 bytes @ 0x18
  1317  0000F5                     	ds	1
  1318                           tblptru	equ	0xFF8
  1319                           tblptrh	equ	0xFF7
  1320                           tblptrl	equ	0xFF6
  1321                           tablat	equ	0xFF5
  1322                           postinc0	equ	0xFEE
  1323                           wreg	equ	0xFE8
  1324                           postdec1	equ	0xFE5
  1325                           fsr1l	equ	0xFE1
  1326                           
  1327                           	psect	cstackCOMRAM
  1328  000001                     __pcstackCOMRAM:
  1329                           	opt stack 0
  1330  000001                     ??_chkisr:
  1331  000001                     
  1332                           ; 1 bytes @ 0x0
  1333  000001                     	ds	14
  1334  00000F                     ??_isdigit:
  1335  00000F                     ?_strlen:
  1336                           	opt stack 0
  1337  00000F                     ?_get_full_ADC:
  1338                           	opt stack 0
  1339  00000F                     ?___awmod:
  1340                           	opt stack 0
  1341  00000F                     ?___ftpack:
  1342                           	opt stack 0
  1343  00000F                     ?___ftneg:
  1344                           	opt stack 0
  1345  00000F                     ?__tdiv_to_l_:
  1346                           	opt stack 0
  1347  00000F                     ?__div_to_l_:
  1348                           	opt stack 0
  1349  00000F                     ?___lldiv:
  1350                           	opt stack 0
  1351  00000F                     ?___llmod:
  1352                           	opt stack 0
  1353  00000F                     spiwrite@x:
  1354                           	opt stack 0
  1355  00000F                     putch@c:
  1356                           	opt stack 0
  1357  00000F                     Select_ADC_Channel@channel:
  1358                           	opt stack 0
  1359  00000F                     OpenUSART@spbrg:
  1360                           	opt stack 0
  1361  00000F                     ___awmod@dividend:
  1362                           	opt stack 0
  1363  00000F                     strcpy@to:
  1364                           	opt stack 0
  1365  00000F                     strlen@s:
  1366                           	opt stack 0
  1367  00000F                     __div_to_l_@f1:
  1368                           	opt stack 0
  1369  00000F                     ___ftpack@arg:
  1370                           	opt stack 0
  1371  00000F                     __tdiv_to_l_@f1:
  1372                           	opt stack 0
  1373  00000F                     ___ftge@ff1:
  1374                           	opt stack 0
  1375  00000F                     ___ftneg@f1:
  1376                           	opt stack 0
  1377  00000F                     ___lldiv@dividend:
  1378                           	opt stack 0
  1379  00000F                     ___llmod@dividend:
  1380                           	opt stack 0
  1381                           
  1382                           ; 4 bytes @ 0xE
  1383  00000F                     	ds	1
  1384  000010                     spiwrite@spidata:
  1385                           	opt stack 0
  1386  000010                     _isdigit$2212:
  1387                           	opt stack 0
  1388                           
  1389                           ; 1 bytes @ 0xF
  1390  000010                     	ds	1
  1391  000011                     ??_strlen:
  1392  000011                     ??_get_full_ADC:
  1393  000011                     write_command@cmd_:
  1394                           	opt stack 0
  1395  000011                     write_data@data_:
  1396                           	opt stack 0
  1397  000011                     OpenUSART@config:
  1398                           	opt stack 0
  1399  000011                     isdigit@c:
  1400                           	opt stack 0
  1401  000011                     ___awmod@divisor:
  1402                           	opt stack 0
  1403  000011                     strcpy@from:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x10
  1407  000011                     	ds	1
  1408  000012                     setAddrWindow@y0:
  1409                           	opt stack 0
  1410  000012                     ___ftpack@exp:
  1411                           	opt stack 0
  1412  000012                     __div_to_l_@f2:
  1413                           	opt stack 0
  1414  000012                     __tdiv_to_l_@f2:
  1415                           	opt stack 0
  1416  000012                     ___ftge@ff2:
  1417                           	opt stack 0
  1418                           
  1419                           ; 3 bytes @ 0x11
  1420  000012                     	ds	1
  1421  000013                     setAddrWindow@x1:
  1422                           	opt stack 0
  1423  000013                     ___awmod@counter:
  1424                           	opt stack 0
  1425  000013                     ___ftpack@sign:
  1426                           	opt stack 0
  1427  000013                     get_full_ADC@result:
  1428                           	opt stack 0
  1429  000013                     strcpy@cp:
  1430                           	opt stack 0
  1431  000013                     strlen@cp:
  1432                           	opt stack 0
  1433  000013                     ___lldiv@divisor:
  1434                           	opt stack 0
  1435  000013                     ___llmod@divisor:
  1436                           	opt stack 0
  1437                           
  1438                           ; 4 bytes @ 0x12
  1439  000013                     	ds	1
  1440  000014                     ??___ftpack:
  1441  000014                     setAddrWindow@y1:
  1442                           	opt stack 0
  1443  000014                     ___awmod@sign:
  1444                           	opt stack 0
  1445                           
  1446                           ; 1 bytes @ 0x13
  1447  000014                     	ds	1
  1448  000015                     ??__tdiv_to_l_:
  1449  000015                     ??___ftge:
  1450  000015                     ?___awdiv:
  1451                           	opt stack 0
  1452  000015                     setAddrWindow@x0:
  1453                           	opt stack 0
  1454  000015                     ___awdiv@dividend:
  1455                           	opt stack 0
  1456  000015                     __div_to_l_@quot:
  1457                           	opt stack 0
  1458                           
  1459                           ; 4 bytes @ 0x14
  1460  000015                     	ds	1
  1461  000016                     drawPixel@y:
  1462                           	opt stack 0
  1463  000016                     drawFastVLine@y:
  1464                           	opt stack 0
  1465  000016                     fillRectangle@y:
  1466                           	opt stack 0
  1467  000016                     drawFastHLine@y:
  1468                           	opt stack 0
  1469                           
  1470                           ; 1 bytes @ 0x15
  1471  000016                     	ds	1
  1472  000017                     ?___lltoft:
  1473                           	opt stack 0
  1474  000017                     drawFastVLine@h:
  1475                           	opt stack 0
  1476  000017                     fillRectangle@w:
  1477                           	opt stack 0
  1478  000017                     drawFastHLine@w:
  1479                           	opt stack 0
  1480  000017                     ___llmod@counter:
  1481                           	opt stack 0
  1482  000017                     drawPixel@color:
  1483                           	opt stack 0
  1484  000017                     ___awdiv@divisor:
  1485                           	opt stack 0
  1486  000017                     ___lldiv@quotient:
  1487                           	opt stack 0
  1488  000017                     ___lltoft@c:
  1489                           	opt stack 0
  1490                           
  1491                           ; 4 bytes @ 0x16
  1492  000017                     	ds	1
  1493  000018                     fillRectangle@h:
  1494                           	opt stack 0
  1495  000018                     drawFastVLine@color:
  1496                           	opt stack 0
  1497  000018                     drawFastHLine@color:
  1498                           	opt stack 0
  1499  000018                     __tdiv_to_l_@quot:
  1500                           	opt stack 0
  1501                           
  1502                           ; 4 bytes @ 0x17
  1503  000018                     	ds	1
  1504  000019                     drawPixel@x:
  1505                           	opt stack 0
  1506  000019                     ___awdiv@counter:
  1507                           	opt stack 0
  1508  000019                     __div_to_l_@cntr:
  1509                           	opt stack 0
  1510  000019                     fillRectangle@color:
  1511                           	opt stack 0
  1512                           
  1513                           ; 2 bytes @ 0x18
  1514  000019                     	ds	1
  1515  00001A                     ??_drawFastVLine:
  1516  00001A                     ??_drawFastHLine:
  1517  00001A                     ___awdiv@sign:
  1518                           	opt stack 0
  1519  00001A                     __div_to_l_@exp1:
  1520                           	opt stack 0
  1521  00001A                     drawCircle@x0:
  1522                           	opt stack 0
  1523                           
  1524                           ; 2 bytes @ 0x19
  1525  00001A                     	ds	1
  1526  00001B                     ??_fillRectangle:
  1527  00001B                     ??___lltoft:
  1528  00001B                     ___lldiv@counter:
  1529                           	opt stack 0
  1530  00001B                     ___awdiv@quotient:
  1531                           	opt stack 0
  1532                           
  1533                           ; 2 bytes @ 0x1A
  1534  00001B                     	ds	1
  1535  00001C                     __tdiv_to_l_@cntr:
  1536                           	opt stack 0
  1537  00001C                     drawCircle@y0:
  1538                           	opt stack 0
  1539                           
  1540                           ; 2 bytes @ 0x1B
  1541  00001C                     	ds	1
  1542  00001D                     ?___wmul:
  1543                           	opt stack 0
  1544  00001D                     __tdiv_to_l_@exp1:
  1545                           	opt stack 0
  1546  00001D                     ___wmul@multiplier:
  1547                           	opt stack 0
  1548                           
  1549                           ; 2 bytes @ 0x1C
  1550  00001D                     	ds	1
  1551  00001E                     drawFastVLine@hi:
  1552                           	opt stack 0
  1553  00001E                     drawFastHLine@hi:
  1554                           	opt stack 0
  1555  00001E                     drawCircle@r:
  1556                           	opt stack 0
  1557                           
  1558                           ; 2 bytes @ 0x1D
  1559  00001E                     	ds	1
  1560  00001F                     drawFastVLine@lo:
  1561                           	opt stack 0
  1562  00001F                     fillRectangle@hi:
  1563                           	opt stack 0
  1564  00001F                     drawFastHLine@lo:
  1565                           	opt stack 0
  1566  00001F                     ___lltoft@exp:
  1567                           	opt stack 0
  1568  00001F                     ___wmul@multiplicand:
  1569                           	opt stack 0
  1570                           
  1571                           ; 2 bytes @ 0x1E
  1572  00001F                     	ds	1
  1573  000020                     drawFastVLine@x:
  1574                           	opt stack 0
  1575  000020                     fillRectangle@lo:
  1576                           	opt stack 0
  1577  000020                     drawFastHLine@x:
  1578                           	opt stack 0
  1579  000020                     drawCircle@color:
  1580                           	opt stack 0
  1581                           
  1582                           ; 2 bytes @ 0x1F
  1583  000020                     	ds	1
  1584  000021                     fillRect@y:
  1585                           	opt stack 0
  1586  000021                     fillRectangle@x:
  1587                           	opt stack 0
  1588  000021                     fillCircleHelper@x0:
  1589                           	opt stack 0
  1590  000021                     drawRect@x:
  1591                           	opt stack 0
  1592  000021                     ___wmul@product:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x20
  1596  000021                     	ds	1
  1597  000022                     ??_drawCircle:
  1598  000022                     fillRect@w:
  1599                           	opt stack 0
  1600  000022                     fillScreen@color:
  1601                           	opt stack 0
  1602                           
  1603                           ; 2 bytes @ 0x21
  1604  000022                     	ds	1
  1605  000023                     ?___ftmul:
  1606                           	opt stack 0
  1607  000023                     ?___awtoft:
  1608                           	opt stack 0
  1609  000023                     fillRect@h:
  1610                           	opt stack 0
  1611  000023                     delay_ms@ms:
  1612                           	opt stack 0
  1613  000023                     fillCircleHelper@y0:
  1614                           	opt stack 0
  1615  000023                     drawRect@y:
  1616                           	opt stack 0
  1617  000023                     ___awtoft@c:
  1618                           	opt stack 0
  1619  000023                     ___ftmul@f1:
  1620                           	opt stack 0
  1621                           
  1622                           ; 3 bytes @ 0x22
  1623  000023                     	ds	1
  1624  000024                     fillRect@color:
  1625                           	opt stack 0
  1626  000024                     drawCircle@ddF_x:
  1627                           	opt stack 0
  1628                           
  1629                           ; 2 bytes @ 0x23
  1630  000024                     	ds	1
  1631  000025                     ??_delay_ms:
  1632  000025                     fillCircleHelper@r:
  1633                           	opt stack 0
  1634  000025                     drawRect@w:
  1635                           	opt stack 0
  1636                           
  1637                           ; 2 bytes @ 0x24
  1638  000025                     	ds	1
  1639  000026                     ??_fillRect:
  1640  000026                     ___awtoft@sign:
  1641                           	opt stack 0
  1642  000026                     drawCircle@ddF_y:
  1643                           	opt stack 0
  1644  000026                     ___ftmul@f2:
  1645                           	opt stack 0
  1646                           
  1647                           ; 3 bytes @ 0x25
  1648  000026                     	ds	1
  1649  000027                     ?___ftdiv:
  1650                           	opt stack 0
  1651  000027                     delay_ms@count:
  1652                           	opt stack 0
  1653  000027                     fillCircleHelper@cornername:
  1654                           	opt stack 0
  1655  000027                     drawRect@h:
  1656                           	opt stack 0
  1657  000027                     ___ftdiv@f1:
  1658                           	opt stack 0
  1659                           
  1660                           ; 3 bytes @ 0x26
  1661  000027                     	ds	1
  1662  000028                     drawCircle@f:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x27
  1666  000028                     	ds	1
  1667  000029                     ??___ftmul:
  1668  000029                     fillRect@x:
  1669                           	opt stack 0
  1670  000029                     fillCircleHelper@delta:
  1671                           	opt stack 0
  1672  000029                     drawRect@color:
  1673                           	opt stack 0
  1674                           
  1675                           ; 2 bytes @ 0x28
  1676  000029                     	ds	1
  1677  00002A                     fillRect@i:
  1678                           	opt stack 0
  1679  00002A                     drawCircle@x:
  1680                           	opt stack 0
  1681  00002A                     ___ftdiv@f2:
  1682                           	opt stack 0
  1683                           
  1684                           ; 3 bytes @ 0x29
  1685  00002A                     	ds	1
  1686  00002B                     ??_drawRect:
  1687  00002B                     fillCircleHelper@color:
  1688                           	opt stack 0
  1689                           
  1690                           ; 2 bytes @ 0x2A
  1691  00002B                     	ds	1
  1692  00002C                     drawChar@y:
  1693                           	opt stack 0
  1694  00002C                     ___ftmul@exp:
  1695                           	opt stack 0
  1696  00002C                     drawCircle@y:
  1697                           	opt stack 0
  1698                           
  1699                           ; 2 bytes @ 0x2B
  1700  00002C                     	ds	1
  1701  00002D                     ??___ftdiv:
  1702  00002D                     ??_fillCircleHelper:
  1703  00002D                     drawChar@c:
  1704                           	opt stack 0
  1705  00002D                     ___ftmul@f3_as_product:
  1706                           	opt stack 0
  1707                           
  1708                           ; 3 bytes @ 0x2C
  1709  00002D                     	ds	1
  1710  00002E                     drawChar@color:
  1711                           	opt stack 0
  1712                           
  1713                           ; 2 bytes @ 0x2D
  1714  00002E                     	ds	1
  1715  00002F                     fillCircleHelper@ddF_x:
  1716                           	opt stack 0
  1717                           
  1718                           ; 2 bytes @ 0x2E
  1719  00002F                     	ds	1
  1720  000030                     ___ftdiv@cntr:
  1721                           	opt stack 0
  1722  000030                     ___ftmul@cntr:
  1723                           	opt stack 0
  1724  000030                     drawChar@bg:
  1725                           	opt stack 0
  1726                           
  1727                           ; 2 bytes @ 0x2F
  1728  000030                     	ds	1
  1729  000031                     ___ftmul@sign:
  1730                           	opt stack 0
  1731  000031                     fillCircleHelper@ddF_y:
  1732                           	opt stack 0
  1733  000031                     ___ftdiv@f3:
  1734                           	opt stack 0
  1735                           
  1736                           ; 3 bytes @ 0x30
  1737  000031                     	ds	1
  1738  000032                     ?_fround:
  1739                           	opt stack 0
  1740  000032                     ?_scale:
  1741                           	opt stack 0
  1742  000032                     drawChar@size:
  1743                           	opt stack 0
  1744                           
  1745                           ; 1 bytes @ 0x31
  1746  000032                     	ds	1
  1747  000033                     drawChar@line:
  1748                           	opt stack 0
  1749  000033                     fillCircleHelper@f:
  1750                           	opt stack 0
  1751                           
  1752                           ; 2 bytes @ 0x32
  1753  000033                     	ds	1
  1754  000034                     drawChar@x:
  1755                           	opt stack 0
  1756  000034                     ___ftdiv@exp:
  1757                           	opt stack 0
  1758                           
  1759                           ; 1 bytes @ 0x33
  1760  000034                     	ds	1
  1761  000035                     drawChar@j:
  1762                           	opt stack 0
  1763  000035                     ___ftdiv@sign:
  1764                           	opt stack 0
  1765  000035                     fillCircleHelper@x:
  1766                           	opt stack 0
  1767  000035                     _fround$2519:
  1768                           	opt stack 0
  1769  000035                     _scale$2520:
  1770                           	opt stack 0
  1771                           
  1772                           ; 3 bytes @ 0x34
  1773  000035                     	ds	1
  1774  000036                     drawChar@i:
  1775                           	opt stack 0
  1776                           
  1777                           ; 1 bytes @ 0x35
  1778  000036                     	ds	1
  1779  000037                     drawtext@y:
  1780                           	opt stack 0
  1781  000037                     fillCircleHelper@y:
  1782                           	opt stack 0
  1783                           
  1784                           ; 2 bytes @ 0x36
  1785  000037                     	ds	1
  1786  000038                     scale@scl:
  1787                           	opt stack 0
  1788  000038                     drawtext@_text:
  1789                           	opt stack 0
  1790  000038                     _fround$2518:
  1791                           	opt stack 0
  1792                           
  1793                           ; 3 bytes @ 0x37
  1794  000038                     	ds	1
  1795  000039                     ?___fttol:
  1796                           	opt stack 0
  1797  000039                     fillCircle@x0:
  1798                           	opt stack 0
  1799  000039                     ___fttol@f1:
  1800                           	opt stack 0
  1801                           
  1802                           ; 3 bytes @ 0x38
  1803  000039                     	ds	1
  1804  00003A                     drawtext@color:
  1805                           	opt stack 0
  1806                           
  1807                           ; 2 bytes @ 0x39
  1808  00003A                     	ds	1
  1809  00003B                     fround@prec:
  1810                           	opt stack 0
  1811  00003B                     fillCircle@y0:
  1812                           	opt stack 0
  1813                           
  1814                           ; 2 bytes @ 0x3A
  1815  00003B                     	ds	1
  1816  00003C                     ?___ftadd:
  1817                           	opt stack 0
  1818  00003C                     drawtext@bg:
  1819                           	opt stack 0
  1820  00003C                     ___ftadd@f1:
  1821                           	opt stack 0
  1822                           
  1823                           ; 3 bytes @ 0x3B
  1824  00003C                     	ds	1
  1825  00003D                     ??___fttol:
  1826  00003D                     fillCircle@r:
  1827                           	opt stack 0
  1828                           
  1829                           ; 2 bytes @ 0x3C
  1830  00003D                     	ds	1
  1831  00003E                     drawtext@size:
  1832                           	opt stack 0
  1833                           
  1834                           ; 1 bytes @ 0x3D
  1835  00003E                     	ds	1
  1836  00003F                     ??_drawtext:
  1837  00003F                     fillCircle@color:
  1838                           	opt stack 0
  1839  00003F                     ___ftadd@f2:
  1840                           	opt stack 0
  1841                           
  1842                           ; 3 bytes @ 0x3E
  1843  00003F                     	ds	2
  1844  000041                     drawtext@x:
  1845                           	opt stack 0
  1846  000041                     update_LCD_color@color:
  1847                           	opt stack 0
  1848                           
  1849                           ; 1 bytes @ 0x40
  1850  000041                     	ds	1
  1851  000042                     ??___ftadd:
  1852  000042                     update_LCD_color@direction:
  1853                           	opt stack 0
  1854  000042                     ___fttol@sign1:
  1855                           	opt stack 0
  1856  000042                     drawtext@textsize:
  1857                           	opt stack 0
  1858                           
  1859                           ; 2 bytes @ 0x41
  1860  000042                     	ds	1
  1861  000043                     update_LCD_color@Circle_Y:
  1862                           	opt stack 0
  1863  000043                     ___fttol@lval:
  1864                           	opt stack 0
  1865                           
  1866                           ; 4 bytes @ 0x42
  1867  000043                     	ds	1
  1868  000044                     Set_NS@color:
  1869                           	opt stack 0
  1870  000044                     Set_NSLT@color:
  1871                           	opt stack 0
  1872  000044                     Set_EW@color:
  1873                           	opt stack 0
  1874  000044                     Set_EWLT@color:
  1875                           	opt stack 0
  1876  000044                     drawtext@i:
  1877                           	opt stack 0
  1878                           
  1879                           ; 2 bytes @ 0x43
  1880  000044                     	ds	1
  1881  000045                     ___ftadd@sign:
  1882                           	opt stack 0
  1883                           
  1884                           ; 1 bytes @ 0x44
  1885  000045                     	ds	1
  1886  000046                     drawtext@cursor_y:
  1887                           	opt stack 0
  1888  000046                     ___ftadd@exp2:
  1889                           	opt stack 0
  1890                           
  1891                           ; 1 bytes @ 0x45
  1892  000046                     	ds	1
  1893  000047                     drawtext@cursor_x:
  1894                           	opt stack 0
  1895  000047                     ___ftadd@exp1:
  1896                           	opt stack 0
  1897  000047                     ___fttol@exp1:
  1898                           	opt stack 0
  1899                           
  1900                           ; 1 bytes @ 0x46
  1901  000047                     	ds	1
  1902  000048                     ?___ftsub:
  1903                           	opt stack 0
  1904  000048                     update_LCD_count@count:
  1905                           	opt stack 0
  1906  000048                     update_LCD_PED_Count@count:
  1907                           	opt stack 0
  1908  000048                     ___ftsub@f1:
  1909                           	opt stack 0
  1910                           
  1911                           ; 3 bytes @ 0x47
  1912  000048                     	ds	1
  1913  000049                     ??_update_LCD_count:
  1914  000049                     ??_update_LCD_PED_Count:
  1915                           
  1916                           ; 0 bytes @ 0x48
  1917  000049                     	ds	1
  1918  00004A                     update_LCD_count@direction:
  1919                           	opt stack 0
  1920  00004A                     update_LCD_PED_Count@direction:
  1921                           	opt stack 0
  1922                           
  1923                           ; 1 bytes @ 0x49
  1924  00004A                     	ds	1
  1925  00004B                     PED_Control@Num_Sec:
  1926                           	opt stack 0
  1927  00004B                     ___ftsub@f2:
  1928                           	opt stack 0
  1929                           
  1930                           ; 3 bytes @ 0x4A
  1931  00004B                     	ds	1
  1932  00004C                     PED_Control@i:
  1933                           	opt stack 0
  1934                           
  1935                           ; 1 bytes @ 0x4B
  1936  00004C                     	ds	2
  1937  00004E                     ?_printf:
  1938                           	opt stack 0
  1939  00004E                     printf@f:
  1940                           	opt stack 0
  1941                           
  1942                           ; 2 bytes @ 0x4D
  1943  00004E                     	ds	5
  1944  000053                     ??_printf:
  1945                           
  1946                           ; 0 bytes @ 0x52
  1947  000053                     	ds	6
  1948  000059                     update_LCD_misc@nStep:
  1949                           	opt stack 0
  1950                           
  1951                           ; 2 bytes @ 0x58
  1952  000059                     	ds	2
  1953  00005B                     update_LCD_misc@volts:
  1954                           	opt stack 0
  1955                           
  1956                           ; 3 bytes @ 0x5A
  1957  00005B                     	ds	3
  1958  00005E                     WAIT_N_SEC@seconds:
  1959                           	opt stack 0
  1960                           
  1961                           ; 1 bytes @ 0x5D
  1962  00005E                     	ds	1
  1963  00005F                     WAIT_N_SEC@i:
  1964                           	opt stack 0
  1965                           
  1966                           ; 1 bytes @ 0x5E
  1967  00005F                     	ds	1
  1968  000060                     ??_main:
  1969                           
  1970                           ; 0 bytes @ 0x5F
  1971  000060                     	ds	2
  1972  000062                     main@nStep:
  1973                           	opt stack 0
  1974                           
  1975                           ; 2 bytes @ 0x61
  1976  000062                     	ds	2
  1977                           tblptru	equ	0xFF8
  1978                           tblptrh	equ	0xFF7
  1979                           tblptrl	equ	0xFF6
  1980                           tablat	equ	0xFF5
  1981                           postinc0	equ	0xFEE
  1982                           wreg	equ	0xFE8
  1983                           postdec1	equ	0xFE5
  1984                           fsr1l	equ	0xFE1
  1985                           
  1986 ;;
  1987 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1988 ;;
  1989 ;; *************** function _main *****************
  1990 ;; Defined at:
  1991 ;;		line 303 in file "Lab9p1.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;		None
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;  nStep           2   97[COMRAM] int 
  1996 ;; Return value:  Size  Location     Type
  1997 ;;		None               void
  1998 ;; Registers used:
  1999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2006 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2007 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2008 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2009 ;;Total ram usage:        4 bytes
  2010 ;; Hardware stack levels required when called:   13
  2011 ;; This function calls:
  2012 ;;		_Day_Mode
  2013 ;;		_Do_Init
  2014 ;;		_Init_ADC
  2015 ;;		_Init_TRIS
  2016 ;;		_Initialize_Screen
  2017 ;;		_Night_Mode
  2018 ;;		_Select_ADC_Channel
  2019 ;;		___awtoft
  2020 ;;		___ftdiv
  2021 ;;		___ftge
  2022 ;;		_get_full_ADC
  2023 ;;		_init_UART
  2024 ;; This function is called by:
  2025 ;;		Startup code after reset
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           	psect	text0
  2030  003002                     __ptext0:
  2031                           	opt stack 0
  2032  003002                     _main:
  2033                           	opt stack 18
  2034                           
  2035                           ;Lab9p1.c: 305: Init_ADC();
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;incstack = 0
  2039  003002  ECE0  F01E         	call	_Init_ADC	;wreg free
  2040                           
  2041                           ;Lab9p1.c: 306: Init_TRIS();
  2042  003006  EC89  F01E         	call	_Init_TRIS	;wreg free
  2043                           
  2044                           ;Lab9p1.c: 307: init_UART ();
  2045  00300A  ECAA  F01E         	call	_init_UART	;wreg free
  2046                           
  2047                           ;Lab9p1.c: 308: Select_ADC_Channel(0);
  2048  00300E  0E00               	movlw	0
  2049  003010  ECFC  F01E         	call	_Select_ADC_Channel
  2050                           
  2051                           ;Lab9p1.c: 310: OSCCON = 0x70;
  2052  003014  0E70               	movlw	112
  2053  003016  6ED3               	movwf	4051,c	;volatile
  2054                           
  2055                           ;Lab9p1.c: 311: RBPU = 0;
  2056  003018  9EF1               	bcf	intcon2,7,c	;volatile
  2057                           
  2058                           ;Lab9p1.c: 312: Initialize_Screen();
  2059  00301A  EC5C  F005         	call	_Initialize_Screen	;wreg free
  2060                           
  2061                           ;Lab9p1.c: 313: Do_Init();
  2062  00301E  EC94  F01E         	call	_Do_Init	;wreg free
  2063  003022  D000               	goto	l7690
  2064  003024                     l7690:
  2065                           
  2066                           ;Lab9p1.c: 316: {
  2067                           ;Lab9p1.c: 317: int nStep = get_full_ADC ();
  2068  003024  EC38  F01E         	call	_get_full_ADC	;wreg free
  2069  003028  C00F  F062         	movff	?_get_full_ADC,main@nStep
  2070  00302C  C010  F063         	movff	?_get_full_ADC+1,main@nStep+1
  2071                           
  2072                           ;Lab9p1.c: 318: volts = nStep*4/1024.0;
  2073  003030  C062  F060         	movff	main@nStep,??_main
  2074  003034  C063  F061         	movff	main@nStep+1,??_main+1
  2075  003038  90D8               	bcf	status,0,c
  2076  00303A  3660               	rlcf	??_main,f,c
  2077  00303C  3661               	rlcf	??_main+1,f,c
  2078  00303E  90D8               	bcf	status,0,c
  2079  003040  3660               	rlcf	??_main,f,c
  2080  003042  3661               	rlcf	??_main+1,f,c
  2081  003044  C060  F023         	movff	??_main,___awtoft@c
  2082  003048  C061  F024         	movff	??_main+1,___awtoft@c+1
  2083  00304C  EC63  F01D         	call	___awtoft	;wreg free
  2084  003050  C023  F027         	movff	?___awtoft,___ftdiv@f1
  2085  003054  C024  F028         	movff	?___awtoft+1,___ftdiv@f1+1
  2086  003058  C025  F029         	movff	?___awtoft+2,___ftdiv@f1+2
  2087  00305C  0E00               	movlw	0
  2088  00305E  6E2A               	movwf	___ftdiv@f2,c
  2089  003060  0E80               	movlw	128
  2090  003062  6E2B               	movwf	___ftdiv@f2+1,c
  2091  003064  0E44               	movlw	68
  2092  003066  6E2C               	movwf	___ftdiv@f2+2,c
  2093  003068  ECEC  F015         	call	___ftdiv	;wreg free
  2094  00306C  C027  F080         	movff	?___ftdiv,_volts
  2095  003070  C028  F081         	movff	?___ftdiv+1,_volts+1
  2096  003074  C029  F082         	movff	?___ftdiv+2,_volts+2
  2097                           
  2098                           ;Lab9p1.c: 320: if (volts < 2.3)
  2099  003078  C080  F00F         	movff	_volts,___ftge@ff1
  2100  00307C  C081  F010         	movff	_volts+1,___ftge@ff1+1
  2101  003080  C082  F011         	movff	_volts+2,___ftge@ff1+2
  2102  003084  0E33               	movlw	51
  2103  003086  6E12               	movwf	___ftge@ff2,c
  2104  003088  0E13               	movlw	19
  2105  00308A  6E13               	movwf	___ftge@ff2+1,c
  2106  00308C  0E40               	movlw	64
  2107  00308E  6E14               	movwf	___ftge@ff2+2,c
  2108  003090  ECA6  F018         	call	___ftge	;wreg free
  2109  003094  B0D8               	btfsc	status,0,c
  2110  003096  D003               	goto	l7698
  2111                           
  2112                           ;Lab9p1.c: 321: {
  2113                           ;Lab9p1.c: 322: Day_Mode();
  2114  003098  EC3A  F017         	call	_Day_Mode	;wreg free
  2115                           
  2116                           ;Lab9p1.c: 323: }
  2117  00309C  D7C3               	goto	l7690
  2118  00309E                     l7698:
  2119                           
  2120                           ;Lab9p1.c: 324: else
  2121                           ;Lab9p1.c: 325: {
  2122                           ;Lab9p1.c: 326: Night_Mode();
  2123  00309E  EC54  F018         	call	_Night_Mode	;wreg free
  2124  0030A2  D7C0               	goto	l7690
  2125  0030A4  EF0C  F000         	goto	start
  2126  0030A8                     __end_of_main:
  2127                           	opt stack 0
  2128                           tblptru	equ	0xFF8
  2129                           tblptrh	equ	0xFF7
  2130                           tblptrl	equ	0xFF6
  2131                           tablat	equ	0xFF5
  2132                           intcon2	equ	0xFF1
  2133                           postinc0	equ	0xFEE
  2134                           wreg	equ	0xFE8
  2135                           postdec1	equ	0xFE5
  2136                           fsr1l	equ	0xFE1
  2137                           status	equ	0xFD8
  2138                           
  2139 ;; *************** function _init_UART *****************
  2140 ;; Defined at:
  2141 ;;		line 288 in file "Lab9p1.c"
  2142 ;; Parameters:    Size  Location     Type
  2143 ;;		None
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;		None
  2146 ;; Return value:  Size  Location     Type
  2147 ;;		None               void
  2148 ;; Registers used:
  2149 ;;		wreg, status,2, cstack
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2159 ;;Total ram usage:        0 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; Hardware stack levels required when called:    3
  2162 ;; This function calls:
  2163 ;;		_OpenUSART
  2164 ;; This function is called by:
  2165 ;;		_main
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text1
  2170  003D54                     __ptext1:
  2171                           	opt stack 0
  2172  003D54                     _init_UART:
  2173                           	opt stack 27
  2174                           
  2175                           ;Lab9p1.c: 290: OpenUSART(0b01111111 & 0b10111111 & 0b11111110 & 0b11111101
  2176                           ;Lab9p1.c: 291: & 0b11111111 & 0b11111111, 25);
  2177                           
  2178                           ;incstack = 0
  2179  003D54  0E00               	movlw	0
  2180  003D56  6E10               	movwf	OpenUSART@spbrg+1,c
  2181  003D58  0E19               	movlw	25
  2182  003D5A  6E0F               	movwf	OpenUSART@spbrg,c
  2183  003D5C  0E3C               	movlw	60
  2184  003D5E  ECD1  F01A         	call	_OpenUSART
  2185                           
  2186                           ;Lab9p1.c: 292: OSCCON = 0x60;
  2187  003D62  0E60               	movlw	96
  2188  003D64  6ED3               	movwf	4051,c	;volatile
  2189  003D66  0012               	return		;funcret
  2190  003D68                     __end_of_init_UART:
  2191                           	opt stack 0
  2192                           tblptru	equ	0xFF8
  2193                           tblptrh	equ	0xFF7
  2194                           tblptrl	equ	0xFF6
  2195                           tablat	equ	0xFF5
  2196                           intcon2	equ	0xFF1
  2197                           postinc0	equ	0xFEE
  2198                           wreg	equ	0xFE8
  2199                           postdec1	equ	0xFE5
  2200                           fsr1l	equ	0xFE1
  2201                           status	equ	0xFD8
  2202                           
  2203 ;; *************** function _OpenUSART *****************
  2204 ;; Defined at:
  2205 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;  config          1    wreg     unsigned char 
  2208 ;;  spbrg           2   14[COMRAM] unsigned int 
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;  config          1   16[COMRAM] unsigned char 
  2211 ;; Return value:  Size  Location     Type
  2212 ;;		None               void
  2213 ;; Registers used:
  2214 ;;		wreg, status,2
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2220 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;Total ram usage:        3 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    2
  2227 ;; This function calls:
  2228 ;;		Nothing
  2229 ;; This function is called by:
  2230 ;;		_init_UART
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           	psect	text2
  2235  0035A2                     __ptext2:
  2236                           	opt stack 0
  2237  0035A2                     _OpenUSART:
  2238                           	opt stack 27
  2239                           
  2240                           ;incstack = 0
  2241                           ;OpenUSART@config stored from wreg
  2242  0035A2  6E11               	movwf	OpenUSART@config,c
  2243  0035A4  0E00               	movlw	0
  2244  0035A6  6EAC               	movwf	4012,c	;volatile
  2245  0035A8  0E00               	movlw	0
  2246  0035AA  6EAB               	movwf	4011,c	;volatile
  2247  0035AC  A011               	btfss	OpenUSART@config,0,c
  2248  0035AE  D002               	goto	l7112
  2249  0035B0  88AC               	bsf	4012,4,c	;volatile
  2250  0035B2  D000               	goto	l7112
  2251  0035B4                     l7112:
  2252  0035B4  A211               	btfss	OpenUSART@config,1,c
  2253  0035B6  D003               	goto	l7116
  2254  0035B8  8CAC               	bsf	4012,6,c	;volatile
  2255  0035BA  8CAB               	bsf	4011,6,c	;volatile
  2256  0035BC  D000               	goto	l7116
  2257  0035BE                     l7116:
  2258  0035BE  A411               	btfss	OpenUSART@config,2,c
  2259  0035C0  D002               	goto	l7120
  2260  0035C2  8EAC               	bsf	4012,7,c	;volatile
  2261  0035C4  D000               	goto	l7120
  2262  0035C6                     l7120:
  2263  0035C6  A611               	btfss	OpenUSART@config,3,c
  2264  0035C8  D002               	goto	l720
  2265  0035CA  88AB               	bsf	4011,4,c	;volatile
  2266  0035CC  D002               	goto	l7124
  2267  0035CE                     l720:
  2268  0035CE  8AAB               	bsf	4011,5,c	;volatile
  2269  0035D0  D000               	goto	l7124
  2270  0035D2                     l7124:
  2271  0035D2  B811               	btfsc	OpenUSART@config,4,c
  2272  0035D4  84AC               	bsf	4012,2,c	;volatile
  2273  0035D6  989E               	bcf	3998,4,c	;volatile
  2274  0035D8  AA11               	btfss	OpenUSART@config,5,c
  2275  0035DA  D002               	goto	l7132
  2276  0035DC  86AB               	bsf	4011,3,c	;volatile
  2277  0035DE  D000               	goto	l7132
  2278  0035E0                     l7132:
  2279  0035E0  AC11               	btfss	OpenUSART@config,6,c
  2280  0035E2  D002               	goto	l724
  2281  0035E4  8A9D               	bsf	3997,5,c	;volatile
  2282  0035E6  D001               	goto	l725
  2283  0035E8                     l724:
  2284  0035E8  9A9D               	bcf	3997,5,c	;volatile
  2285  0035EA                     l725:
  2286  0035EA  9A9E               	bcf	3998,5,c	;volatile
  2287  0035EC  AE11               	btfss	OpenUSART@config,7,c
  2288  0035EE  D002               	goto	l726
  2289  0035F0  889D               	bsf	3997,4,c	;volatile
  2290  0035F2  D001               	goto	l727
  2291  0035F4                     l726:
  2292  0035F4  989D               	bcf	3997,4,c	;volatile
  2293  0035F6                     l727:
  2294  0035F6  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  2295  0035FA  5010               	movf	OpenUSART@spbrg+1,w,c
  2296  0035FC  6EB0               	movwf	4016,c	;volatile
  2297  0035FE  8AAC               	bsf	4012,5,c	;volatile
  2298  003600  8EAB               	bsf	4011,7,c	;volatile
  2299  003602  9C94               	bcf	3988,6,c	;volatile
  2300  003604  8E94               	bsf	3988,7,c	;volatile
  2301  003606  B8AC               	btfsc	4012,4,c	;volatile
  2302  003608  BEAC               	btfsc	4012,7,c	;volatile
  2303  00360A  D002               	goto	l729
  2304  00360C  8C94               	bsf	3988,6,c	;volatile
  2305  00360E  D000               	goto	l729
  2306  003610                     l729:
  2307  003610  0012               	return		;funcret
  2308  003612                     __end_of_OpenUSART:
  2309                           	opt stack 0
  2310                           tblptru	equ	0xFF8
  2311                           tblptrh	equ	0xFF7
  2312                           tblptrl	equ	0xFF6
  2313                           tablat	equ	0xFF5
  2314                           intcon2	equ	0xFF1
  2315                           postinc0	equ	0xFEE
  2316                           wreg	equ	0xFE8
  2317                           postdec1	equ	0xFE5
  2318                           fsr1l	equ	0xFE1
  2319                           status	equ	0xFD8
  2320                           
  2321 ;; *************** function _Select_ADC_Channel *****************
  2322 ;; Defined at:
  2323 ;;		line 457 in file "Lab9p1.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;  channel         1    wreg     unsigned char 
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;  channel         1   14[COMRAM] unsigned char 
  2328 ;; Return value:  Size  Location     Type
  2329 ;;		None               void
  2330 ;; Registers used:
  2331 ;;		wreg, status,2, status,0, prodl, prodh
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2338 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2340 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2341 ;;Total ram usage:        1 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    2
  2344 ;; This function calls:
  2345 ;;		Nothing
  2346 ;; This function is called by:
  2347 ;;		_main
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           	psect	text3
  2352  003DF8                     __ptext3:
  2353                           	opt stack 0
  2354  003DF8                     _Select_ADC_Channel:
  2355                           	opt stack 28
  2356                           
  2357                           ;incstack = 0
  2358                           ;Select_ADC_Channel@channel stored from wreg
  2359  003DF8  6E0F               	movwf	Select_ADC_Channel@channel,c
  2360                           
  2361                           ;Lab9p1.c: 459: ADCON0 = channel * 4 + 1;
  2362  003DFA  500F               	movf	Select_ADC_Channel@channel,w,c
  2363  003DFC  0D04               	mullw	4
  2364  003DFE  28F3               	incf	prodl,w,c
  2365  003E00  6EC2               	movwf	4034,c	;volatile
  2366  003E02  0012               	return		;funcret
  2367  003E04                     __end_of_Select_ADC_Channel:
  2368                           	opt stack 0
  2369                           tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           prodl	equ	0xFF3
  2374                           intcon2	equ	0xFF1
  2375                           postinc0	equ	0xFEE
  2376                           wreg	equ	0xFE8
  2377                           postdec1	equ	0xFE5
  2378                           fsr1l	equ	0xFE1
  2379                           status	equ	0xFD8
  2380                           
  2381 ;; *************** function _Night_Mode *****************
  2382 ;; Defined at:
  2383 ;;		line 391 in file "Lab9p1.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;		None
  2386 ;; Auto vars:     Size  Location     Type
  2387 ;;		None
  2388 ;; Return value:  Size  Location     Type
  2389 ;;		None               void
  2390 ;; Registers used:
  2391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2392 ;; Tracked objects:
  2393 ;;		On entry : 0/0
  2394 ;;		On exit  : 0/0
  2395 ;;		Unchanged: 0/0
  2396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;Total ram usage:        0 bytes
  2402 ;; Hardware stack levels used:    1
  2403 ;; Hardware stack levels required when called:   12
  2404 ;; This function calls:
  2405 ;;		_Set_EW
  2406 ;;		_Set_EWLT
  2407 ;;		_Set_NS
  2408 ;;		_Set_NSLT
  2409 ;;		_WAIT_N_SEC
  2410 ;; This function is called by:
  2411 ;;		_main
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text4
  2416  0030A8                     __ptext4:
  2417                           	opt stack 0
  2418  0030A8                     _Night_Mode:
  2419                           	opt stack 18
  2420                           
  2421                           ;Lab9p1.c: 393: PORTBbits.RB7 = 1;
  2422                           
  2423                           ;incstack = 0
  2424  0030A8  8E81               	bsf	3969,7,c	;volatile
  2425                           
  2426                           ;Lab9p1.c: 394: Act_Mode_Txt[0] = 'N';
  2427  0030AA  0E4E               	movlw	78
  2428  0030AC  0100               	movlb	0	; () banked
  2429  0030AE  6FD1               	movwf	_Act_Mode_Txt& (0+255),b
  2430  0030B0  D000               	goto	l7400
  2431  0030B2                     l7400:
  2432                           
  2433                           ;Lab9p1.c: 397: {
  2434                           ;Lab9p1.c: 398: Set_NSLT (1);
  2435  0030B2  0E01               	movlw	1
  2436  0030B4  EC73  F01C         	call	_Set_NSLT
  2437                           
  2438                           ;Lab9p1.c: 399: Set_EW (1);
  2439  0030B8  0E01               	movlw	1
  2440  0030BA  ECDF  F01C         	call	_Set_EW
  2441                           
  2442                           ;Lab9p1.c: 400: Set_EWLT (1);
  2443  0030BE  0E01               	movlw	1
  2444  0030C0  ECBB  F01C         	call	_Set_EWLT
  2445                           
  2446                           ;Lab9p1.c: 401: Set_NS (2);
  2447  0030C4  0E02               	movlw	2
  2448  0030C6  EC97  F01C         	call	_Set_NS
  2449                           
  2450                           ;Lab9p1.c: 403: WAIT_N_SEC (8);
  2451  0030CA  0E08               	movlw	8
  2452  0030CC  EC9B  F01D         	call	_WAIT_N_SEC
  2453                           
  2454                           ;Lab9p1.c: 404: Set_NS (3);
  2455  0030D0  0E03               	movlw	3
  2456  0030D2  EC97  F01C         	call	_Set_NS
  2457                           
  2458                           ;Lab9p1.c: 406: WAIT_N_SEC (2);
  2459  0030D6  0E02               	movlw	2
  2460  0030D8  EC9B  F01D         	call	_WAIT_N_SEC
  2461                           
  2462                           ;Lab9p1.c: 407: Set_NS (1);
  2463  0030DC  0E01               	movlw	1
  2464  0030DE  EC97  F01C         	call	_Set_NS
  2465                           
  2466                           ;Lab9p1.c: 409: if (PORTAbits.RA4 == 1)
  2467  0030E2  A880               	btfss	3968,4,c	;volatile
  2468  0030E4  D010               	goto	l7426
  2469                           
  2470                           ;Lab9p1.c: 410: {
  2471                           ;Lab9p1.c: 411: Set_EWLT (2);
  2472  0030E6  0E02               	movlw	2
  2473  0030E8  ECBB  F01C         	call	_Set_EWLT
  2474                           
  2475                           ;Lab9p1.c: 412: WAIT_N_SEC (6);
  2476  0030EC  0E06               	movlw	6
  2477  0030EE  EC9B  F01D         	call	_WAIT_N_SEC
  2478                           
  2479                           ;Lab9p1.c: 413: Set_EWLT (3);
  2480  0030F2  0E03               	movlw	3
  2481  0030F4  ECBB  F01C         	call	_Set_EWLT
  2482                           
  2483                           ;Lab9p1.c: 414: WAIT_N_SEC (2);
  2484  0030F8  0E02               	movlw	2
  2485  0030FA  EC9B  F01D         	call	_WAIT_N_SEC
  2486                           
  2487                           ;Lab9p1.c: 415: Set_EWLT (1);
  2488  0030FE  0E01               	movlw	1
  2489  003100  ECBB  F01C         	call	_Set_EWLT
  2490  003104  D000               	goto	l7426
  2491  003106                     l7426:
  2492                           
  2493                           ;Lab9p1.c: 416: }
  2494                           ;Lab9p1.c: 418: Set_EW (2);
  2495  003106  0E02               	movlw	2
  2496  003108  ECDF  F01C         	call	_Set_EW
  2497                           
  2498                           ;Lab9p1.c: 419: WAIT_N_SEC (9);
  2499  00310C  0E09               	movlw	9
  2500  00310E  EC9B  F01D         	call	_WAIT_N_SEC
  2501                           
  2502                           ;Lab9p1.c: 421: Set_EW (3);
  2503  003112  0E03               	movlw	3
  2504  003114  ECDF  F01C         	call	_Set_EW
  2505                           
  2506                           ;Lab9p1.c: 422: WAIT_N_SEC (2);
  2507  003118  0E02               	movlw	2
  2508  00311A  EC9B  F01D         	call	_WAIT_N_SEC
  2509                           
  2510                           ;Lab9p1.c: 424: Set_EW (1);
  2511  00311E  0E01               	movlw	1
  2512  003120  ECDF  F01C         	call	_Set_EW
  2513                           
  2514                           ;Lab9p1.c: 426: if (PORTAbits.RA3 == 1)
  2515  003124  A680               	btfss	3968,3,c	;volatile
  2516  003126  D011               	goto	l427
  2517                           
  2518                           ;Lab9p1.c: 427: {
  2519                           ;Lab9p1.c: 428: Set_NSLT (2);
  2520  003128  0E02               	movlw	2
  2521  00312A  EC73  F01C         	call	_Set_NSLT
  2522                           
  2523                           ;Lab9p1.c: 429: WAIT_N_SEC (7);
  2524  00312E  0E07               	movlw	7
  2525  003130  EC9B  F01D         	call	_WAIT_N_SEC
  2526                           
  2527                           ;Lab9p1.c: 431: Set_NSLT (3);
  2528  003134  0E03               	movlw	3
  2529  003136  EC73  F01C         	call	_Set_NSLT
  2530                           
  2531                           ;Lab9p1.c: 432: WAIT_N_SEC (2);
  2532  00313A  0E02               	movlw	2
  2533  00313C  EC9B  F01D         	call	_WAIT_N_SEC
  2534                           
  2535                           ;Lab9p1.c: 434: Set_NSLT (1);
  2536  003140  0E01               	movlw	1
  2537  003142  EC73  F01C         	call	_Set_NSLT
  2538                           
  2539                           ;Lab9p1.c: 435: }
  2540                           ;Lab9p1.c: 436: break;
  2541  003146  D001               	goto	l427
  2542  003148  D7B4               	goto	l7400
  2543  00314A                     l427:
  2544  00314A  0012               	return		;funcret
  2545  00314C                     __end_of_Night_Mode:
  2546                           	opt stack 0
  2547                           tblptru	equ	0xFF8
  2548                           tblptrh	equ	0xFF7
  2549                           tblptrl	equ	0xFF6
  2550                           tablat	equ	0xFF5
  2551                           prodl	equ	0xFF3
  2552                           intcon2	equ	0xFF1
  2553                           postinc0	equ	0xFEE
  2554                           wreg	equ	0xFE8
  2555                           postdec1	equ	0xFE5
  2556                           fsr1l	equ	0xFE1
  2557                           status	equ	0xFD8
  2558                           
  2559 ;; *************** function _Initialize_Screen *****************
  2560 ;; Defined at:
  2561 ;;		line 200 in file "Lab9p1.c"
  2562 ;; Parameters:    Size  Location     Type
  2563 ;;		None
  2564 ;; Auto vars:     Size  Location     Type
  2565 ;;		None
  2566 ;; Return value:  Size  Location     Type
  2567 ;;		None               void
  2568 ;; Registers used:
  2569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2570 ;; Tracked objects:
  2571 ;;		On entry : 0/0
  2572 ;;		On exit  : 0/0
  2573 ;;		Unchanged: 0/0
  2574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2579 ;;Total ram usage:        0 bytes
  2580 ;; Hardware stack levels used:    1
  2581 ;; Hardware stack levels required when called:    9
  2582 ;; This function calls:
  2583 ;;		_LCD_Reset
  2584 ;;		_TFT_GreenTab_Initialize
  2585 ;;		_drawCircle
  2586 ;;		_drawRect
  2587 ;;		_drawtext
  2588 ;;		_fillCircle
  2589 ;;		_fillScreen
  2590 ;;		_strcpy
  2591 ;; This function is called by:
  2592 ;;		_main
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           	psect	text5
  2597  000AB8                     __ptext5:
  2598                           	opt stack 0
  2599  000AB8                     _Initialize_Screen:
  2600                           	opt stack 21
  2601                           
  2602                           ;Lab9p1.c: 202: LCD_Reset();
  2603                           
  2604                           ;incstack = 0
  2605  000AB8  ECBE  F01E         	call	_LCD_Reset	;wreg free
  2606                           
  2607                           ;Lab9p1.c: 203: TFT_GreenTab_Initialize();
  2608  000ABC  ECE5  F01D         	call	_TFT_GreenTab_Initialize	;wreg free
  2609                           
  2610                           ;Lab9p1.c: 204: fillScreen(0x0000);
  2611  000AC0  0E00               	movlw	0
  2612  000AC2  6E23               	movwf	fillScreen@color+1,c
  2613  000AC4  0E00               	movlw	0
  2614  000AC6  6E22               	movwf	fillScreen@color,c
  2615  000AC8  EC6E  F01E         	call	_fillScreen	;wreg free
  2616                           
  2617                           ;Lab9p1.c: 207: txt = buffer;
  2618  000ACC  0E95               	movlw	low _buffer
  2619  000ACE  6E64               	movwf	_txt,c
  2620  000AD0  0E00               	movlw	high _buffer
  2621  000AD2  6E65               	movwf	_txt+1,c
  2622                           
  2623                           ;Lab9p1.c: 208: strcpy(txt, "ECE3301L Fall 22-S1");
  2624  000AD4  C064  F00F         	movff	_txt,strcpy@to
  2625  000AD8  C065  F010         	movff	_txt+1,strcpy@to+1
  2626  000ADC  0E9A               	movlw	low STR_1
  2627  000ADE  6E11               	movwf	strcpy@from,c
  2628  000AE0  0EFF               	movlw	high STR_1
  2629  000AE2  6E12               	movwf	strcpy@from+1,c
  2630  000AE4  ECB4  F01D         	call	_strcpy	;wreg free
  2631                           
  2632                           ;Lab9p1.c: 209: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2633  000AE8  0E02               	movlw	2
  2634  000AEA  6E37               	movwf	drawtext@y,c
  2635  000AEC  C064  F038         	movff	_txt,drawtext@_text
  2636  000AF0  C065  F039         	movff	_txt+1,drawtext@_text+1
  2637  000AF4  0EFF               	movlw	255
  2638  000AF6  6E3B               	movwf	drawtext@color+1,c
  2639  000AF8  683A               	setf	drawtext@color,c
  2640  000AFA  0E00               	movlw	0
  2641  000AFC  6E3D               	movwf	drawtext@bg+1,c
  2642  000AFE  0E00               	movlw	0
  2643  000B00  6E3C               	movwf	drawtext@bg,c
  2644  000B02  0E01               	movlw	1
  2645  000B04  6E3E               	movwf	drawtext@size,c
  2646  000B06  0E02               	movlw	2
  2647  000B08  EC5D  F016         	call	_drawtext
  2648                           
  2649                           ;Lab9p1.c: 212: strcpy(txt, "Mode:");
  2650  000B0C  C064  F00F         	movff	_txt,strcpy@to
  2651  000B10  C065  F010         	movff	_txt+1,strcpy@to+1
  2652  000B14  0EE5               	movlw	low STR_2
  2653  000B16  6E11               	movwf	strcpy@from,c
  2654  000B18  0EFF               	movlw	high STR_2
  2655  000B1A  6E12               	movwf	strcpy@from+1,c
  2656  000B1C  ECB4  F01D         	call	_strcpy	;wreg free
  2657                           
  2658                           ;Lab9p1.c: 213: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  2659  000B20  0E0A               	movlw	10
  2660  000B22  6E37               	movwf	drawtext@y,c
  2661  000B24  C064  F038         	movff	_txt,drawtext@_text
  2662  000B28  C065  F039         	movff	_txt+1,drawtext@_text+1
  2663  000B2C  0EFF               	movlw	255
  2664  000B2E  6E3B               	movwf	drawtext@color+1,c
  2665  000B30  683A               	setf	drawtext@color,c
  2666  000B32  0E00               	movlw	0
  2667  000B34  6E3D               	movwf	drawtext@bg+1,c
  2668  000B36  0E00               	movlw	0
  2669  000B38  6E3C               	movwf	drawtext@bg,c
  2670  000B3A  0E01               	movlw	1
  2671  000B3C  6E3E               	movwf	drawtext@size,c
  2672  000B3E  0E02               	movlw	2
  2673  000B40  EC5D  F016         	call	_drawtext
  2674                           
  2675                           ;Lab9p1.c: 214: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2676  000B44  0E0A               	movlw	10
  2677  000B46  6E37               	movwf	drawtext@y,c
  2678  000B48  0ED1               	movlw	low _Act_Mode_Txt
  2679  000B4A  6E38               	movwf	drawtext@_text,c
  2680  000B4C  0E00               	movlw	high _Act_Mode_Txt
  2681  000B4E  6E39               	movwf	drawtext@_text+1,c
  2682  000B50  0EFF               	movlw	255
  2683  000B52  6E3B               	movwf	drawtext@color+1,c
  2684  000B54  683A               	setf	drawtext@color,c
  2685  000B56  0E00               	movlw	0
  2686  000B58  6E3D               	movwf	drawtext@bg+1,c
  2687  000B5A  0E00               	movlw	0
  2688  000B5C  6E3C               	movwf	drawtext@bg,c
  2689  000B5E  0E01               	movlw	1
  2690  000B60  6E3E               	movwf	drawtext@size,c
  2691  000B62  0E23               	movlw	35
  2692  000B64  EC5D  F016         	call	_drawtext
  2693                           
  2694                           ;Lab9p1.c: 217: strcpy(txt, "FR:");
  2695  000B68  C064  F00F         	movff	_txt,strcpy@to
  2696  000B6C  C065  F010         	movff	_txt+1,strcpy@to+1
  2697  000B70  0EEB               	movlw	low STR_3
  2698  000B72  6E11               	movwf	strcpy@from,c
  2699  000B74  0EFF               	movlw	high STR_3
  2700  000B76  6E12               	movwf	strcpy@from+1,c
  2701  000B78  ECB4  F01D         	call	_strcpy	;wreg free
  2702                           
  2703                           ;Lab9p1.c: 218: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2704  000B7C  0E0A               	movlw	10
  2705  000B7E  6E37               	movwf	drawtext@y,c
  2706  000B80  C064  F038         	movff	_txt,drawtext@_text
  2707  000B84  C065  F039         	movff	_txt+1,drawtext@_text+1
  2708  000B88  0EFF               	movlw	255
  2709  000B8A  6E3B               	movwf	drawtext@color+1,c
  2710  000B8C  683A               	setf	drawtext@color,c
  2711  000B8E  0E00               	movlw	0
  2712  000B90  6E3D               	movwf	drawtext@bg+1,c
  2713  000B92  0E00               	movlw	0
  2714  000B94  6E3C               	movwf	drawtext@bg,c
  2715  000B96  0E01               	movlw	1
  2716  000B98  6E3E               	movwf	drawtext@size,c
  2717  000B9A  0E32               	movlw	50
  2718  000B9C  EC5D  F016         	call	_drawtext
  2719                           
  2720                           ;Lab9p1.c: 219: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2721  000BA0  0E0A               	movlw	10
  2722  000BA2  6E37               	movwf	drawtext@y,c
  2723  000BA4  0ED3               	movlw	low _FlashingR_Txt
  2724  000BA6  6E38               	movwf	drawtext@_text,c
  2725  000BA8  0E00               	movlw	high _FlashingR_Txt
  2726  000BAA  6E39               	movwf	drawtext@_text+1,c
  2727  000BAC  0EFF               	movlw	255
  2728  000BAE  6E3B               	movwf	drawtext@color+1,c
  2729  000BB0  683A               	setf	drawtext@color,c
  2730  000BB2  0E00               	movlw	0
  2731  000BB4  6E3D               	movwf	drawtext@bg+1,c
  2732  000BB6  0E00               	movlw	0
  2733  000BB8  6E3C               	movwf	drawtext@bg,c
  2734  000BBA  0E01               	movlw	1
  2735  000BBC  6E3E               	movwf	drawtext@size,c
  2736  000BBE  0E46               	movlw	70
  2737  000BC0  EC5D  F016         	call	_drawtext
  2738                           
  2739                           ;Lab9p1.c: 222: strcpy(txt, "FS:");
  2740  000BC4  C064  F00F         	movff	_txt,strcpy@to
  2741  000BC8  C065  F010         	movff	_txt+1,strcpy@to+1
  2742  000BCC  0EEF               	movlw	low STR_4
  2743  000BCE  6E11               	movwf	strcpy@from,c
  2744  000BD0  0EFF               	movlw	high STR_4
  2745  000BD2  6E12               	movwf	strcpy@from+1,c
  2746  000BD4  ECB4  F01D         	call	_strcpy	;wreg free
  2747                           
  2748                           ;Lab9p1.c: 223: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2749  000BD8  0E0A               	movlw	10
  2750  000BDA  6E37               	movwf	drawtext@y,c
  2751  000BDC  C064  F038         	movff	_txt,drawtext@_text
  2752  000BE0  C065  F039         	movff	_txt+1,drawtext@_text+1
  2753  000BE4  0EFF               	movlw	255
  2754  000BE6  6E3B               	movwf	drawtext@color+1,c
  2755  000BE8  683A               	setf	drawtext@color,c
  2756  000BEA  0E00               	movlw	0
  2757  000BEC  6E3D               	movwf	drawtext@bg+1,c
  2758  000BEE  0E00               	movlw	0
  2759  000BF0  6E3C               	movwf	drawtext@bg,c
  2760  000BF2  0E01               	movlw	1
  2761  000BF4  6E3E               	movwf	drawtext@size,c
  2762  000BF6  0E50               	movlw	80
  2763  000BF8  EC5D  F016         	call	_drawtext
  2764                           
  2765                           ;Lab9p1.c: 224: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2766  000BFC  0E0A               	movlw	10
  2767  000BFE  6E37               	movwf	drawtext@y,c
  2768  000C00  0ED5               	movlw	low _FlashingS_Txt
  2769  000C02  6E38               	movwf	drawtext@_text,c
  2770  000C04  0E00               	movlw	high _FlashingS_Txt
  2771  000C06  6E39               	movwf	drawtext@_text+1,c
  2772  000C08  0EFF               	movlw	255
  2773  000C0A  6E3B               	movwf	drawtext@color+1,c
  2774  000C0C  683A               	setf	drawtext@color,c
  2775  000C0E  0E00               	movlw	0
  2776  000C10  6E3D               	movwf	drawtext@bg+1,c
  2777  000C12  0E00               	movlw	0
  2778  000C14  6E3C               	movwf	drawtext@bg,c
  2779  000C16  0E01               	movlw	1
  2780  000C18  6E3E               	movwf	drawtext@size,c
  2781  000C1A  0E64               	movlw	100
  2782  000C1C  EC5D  F016         	call	_drawtext
  2783                           
  2784                           ;Lab9p1.c: 227: strcpy(txt, "*");
  2785  000C20  C064  F00F         	movff	_txt,strcpy@to
  2786  000C24  C065  F010         	movff	_txt+1,strcpy@to+1
  2787  000C28  0EFD               	movlw	low STR_5
  2788  000C2A  6E11               	movwf	strcpy@from,c
  2789  000C2C  0EFF               	movlw	high STR_5
  2790  000C2E  6E12               	movwf	strcpy@from+1,c
  2791  000C30  ECB4  F01D         	call	_strcpy	;wreg free
  2792                           
  2793                           ;Lab9p1.c: 228: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2794  000C34  0E0A               	movlw	10
  2795  000C36  6E37               	movwf	drawtext@y,c
  2796  000C38  C064  F038         	movff	_txt,drawtext@_text
  2797  000C3C  C065  F039         	movff	_txt+1,drawtext@_text+1
  2798  000C40  0EFF               	movlw	255
  2799  000C42  6E3B               	movwf	drawtext@color+1,c
  2800  000C44  683A               	setf	drawtext@color,c
  2801  000C46  0E00               	movlw	0
  2802  000C48  6E3D               	movwf	drawtext@bg+1,c
  2803  000C4A  0E00               	movlw	0
  2804  000C4C  6E3C               	movwf	drawtext@bg,c
  2805  000C4E  0E01               	movlw	1
  2806  000C50  6E3E               	movwf	drawtext@size,c
  2807  000C52  0E78               	movlw	120
  2808  000C54  EC5D  F016         	call	_drawtext
  2809                           
  2810                           ;Lab9p1.c: 231: strcpy(txt, "EAST/WEST");
  2811  000C58  C064  F00F         	movff	_txt,strcpy@to
  2812  000C5C  C065  F010         	movff	_txt+1,strcpy@to+1
  2813  000C60  0ECD               	movlw	low STR_6
  2814  000C62  6E11               	movwf	strcpy@from,c
  2815  000C64  0EFF               	movlw	high STR_6
  2816  000C66  6E12               	movwf	strcpy@from+1,c
  2817  000C68  ECB4  F01D         	call	_strcpy	;wreg free
  2818                           
  2819                           ;Lab9p1.c: 232: drawtext (30, 20, txt, 0x07FF, 0x0000, 1);
  2820  000C6C  0E14               	movlw	20
  2821  000C6E  6E37               	movwf	drawtext@y,c
  2822  000C70  C064  F038         	movff	_txt,drawtext@_text
  2823  000C74  C065  F039         	movff	_txt+1,drawtext@_text+1
  2824  000C78  0E07               	movlw	7
  2825  000C7A  6E3B               	movwf	drawtext@color+1,c
  2826  000C7C  683A               	setf	drawtext@color,c
  2827  000C7E  0E00               	movlw	0
  2828  000C80  6E3D               	movwf	drawtext@bg+1,c
  2829  000C82  0E00               	movlw	0
  2830  000C84  6E3C               	movwf	drawtext@bg,c
  2831  000C86  0E01               	movlw	1
  2832  000C88  6E3E               	movwf	drawtext@size,c
  2833  000C8A  0E1E               	movlw	30
  2834  000C8C  EC5D  F016         	call	_drawtext
  2835                           
  2836                           ;Lab9p1.c: 233: drawRect (30, 20 + 15-8, 60, 18, 0x07FF);
  2837  000C90  0E00               	movlw	0
  2838  000C92  6E22               	movwf	drawRect@x+1,c
  2839  000C94  0E1E               	movlw	30
  2840  000C96  6E21               	movwf	drawRect@x,c
  2841  000C98  0E00               	movlw	0
  2842  000C9A  6E24               	movwf	drawRect@y+1,c
  2843  000C9C  0E1B               	movlw	27
  2844  000C9E  6E23               	movwf	drawRect@y,c
  2845  000CA0  0E00               	movlw	0
  2846  000CA2  6E26               	movwf	drawRect@w+1,c
  2847  000CA4  0E3C               	movlw	60
  2848  000CA6  6E25               	movwf	drawRect@w,c
  2849  000CA8  0E00               	movlw	0
  2850  000CAA  6E28               	movwf	drawRect@h+1,c
  2851  000CAC  0E12               	movlw	18
  2852  000CAE  6E27               	movwf	drawRect@h,c
  2853  000CB0  0E07               	movlw	7
  2854  000CB2  6E2A               	movwf	drawRect@color+1,c
  2855  000CB4  6829               	setf	drawRect@color,c
  2856  000CB6  EC41  F01B         	call	_drawRect	;wreg free
  2857                           
  2858                           ;Lab9p1.c: 234: fillCircle(40, 20 + 15, 7, 0xF800);
  2859  000CBA  0E00               	movlw	0
  2860  000CBC  6E3A               	movwf	fillCircle@x0+1,c
  2861  000CBE  0E28               	movlw	40
  2862  000CC0  6E39               	movwf	fillCircle@x0,c
  2863  000CC2  0E00               	movlw	0
  2864  000CC4  6E3C               	movwf	fillCircle@y0+1,c
  2865  000CC6  0E23               	movlw	35
  2866  000CC8  6E3B               	movwf	fillCircle@y0,c
  2867  000CCA  0E00               	movlw	0
  2868  000CCC  6E3E               	movwf	fillCircle@r+1,c
  2869  000CCE  0E07               	movlw	7
  2870  000CD0  6E3D               	movwf	fillCircle@r,c
  2871  000CD2  0EF8               	movlw	248
  2872  000CD4  6E40               	movwf	fillCircle@color+1,c
  2873  000CD6  0E00               	movlw	0
  2874  000CD8  6E3F               	movwf	fillCircle@color,c
  2875  000CDA  ECFE  F01B         	call	_fillCircle	;wreg free
  2876                           
  2877                           ;Lab9p1.c: 235: drawCircle(60, 20 + 15, 7, 0xFFE0);
  2878  000CDE  0E00               	movlw	0
  2879  000CE0  6E1B               	movwf	drawCircle@x0+1,c
  2880  000CE2  0E3C               	movlw	60
  2881  000CE4  6E1A               	movwf	drawCircle@x0,c
  2882  000CE6  0E00               	movlw	0
  2883  000CE8  6E1D               	movwf	drawCircle@y0+1,c
  2884  000CEA  0E23               	movlw	35
  2885  000CEC  6E1C               	movwf	drawCircle@y0,c
  2886  000CEE  0E00               	movlw	0
  2887  000CF0  6E1F               	movwf	drawCircle@r+1,c
  2888  000CF2  0E07               	movlw	7
  2889  000CF4  6E1E               	movwf	drawCircle@r,c
  2890  000CF6  0EFF               	movlw	255
  2891  000CF8  6E21               	movwf	drawCircle@color+1,c
  2892  000CFA  0EE0               	movlw	224
  2893  000CFC  6E20               	movwf	drawCircle@color,c
  2894  000CFE  EC88  F00F         	call	_drawCircle	;wreg free
  2895                           
  2896                           ;Lab9p1.c: 236: drawCircle(80, 20 + 15, 7, 0x07E0);
  2897  000D02  0E00               	movlw	0
  2898  000D04  6E1B               	movwf	drawCircle@x0+1,c
  2899  000D06  0E50               	movlw	80
  2900  000D08  6E1A               	movwf	drawCircle@x0,c
  2901  000D0A  0E00               	movlw	0
  2902  000D0C  6E1D               	movwf	drawCircle@y0+1,c
  2903  000D0E  0E23               	movlw	35
  2904  000D10  6E1C               	movwf	drawCircle@y0,c
  2905  000D12  0E00               	movlw	0
  2906  000D14  6E1F               	movwf	drawCircle@r+1,c
  2907  000D16  0E07               	movlw	7
  2908  000D18  6E1E               	movwf	drawCircle@r,c
  2909  000D1A  0E07               	movlw	7
  2910  000D1C  6E21               	movwf	drawCircle@color+1,c
  2911  000D1E  0EE0               	movlw	224
  2912  000D20  6E20               	movwf	drawCircle@color,c
  2913  000D22  EC88  F00F         	call	_drawCircle	;wreg free
  2914                           
  2915                           ;Lab9p1.c: 237: drawtext (100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2916  000D26  0E1E               	movlw	30
  2917  000D28  6E37               	movwf	drawtext@y,c
  2918  000D2A  0EC2               	movlw	low _EW_Count
  2919  000D2C  6E38               	movwf	drawtext@_text,c
  2920  000D2E  0E00               	movlw	high _EW_Count
  2921  000D30  6E39               	movwf	drawtext@_text+1,c
  2922  000D32  0E07               	movlw	7
  2923  000D34  6E3B               	movwf	drawtext@color+1,c
  2924  000D36  683A               	setf	drawtext@color,c
  2925  000D38  0E00               	movlw	0
  2926  000D3A  6E3D               	movwf	drawtext@bg+1,c
  2927  000D3C  0E00               	movlw	0
  2928  000D3E  6E3C               	movwf	drawtext@bg,c
  2929  000D40  0E02               	movlw	2
  2930  000D42  6E3E               	movwf	drawtext@size,c
  2931  000D44  0E64               	movlw	100
  2932  000D46  EC5D  F016         	call	_drawtext
  2933                           
  2934                           ;Lab9p1.c: 240: strcpy(txt, "E/W LT");
  2935  000D4A  C064  F00F         	movff	_txt,strcpy@to
  2936  000D4E  C065  F010         	movff	_txt+1,strcpy@to+1
  2937  000D52  0EDE               	movlw	low STR_7
  2938  000D54  6E11               	movwf	strcpy@from,c
  2939  000D56  0EFF               	movlw	high STR_7
  2940  000D58  6E12               	movwf	strcpy@from+1,c
  2941  000D5A  ECB4  F01D         	call	_strcpy	;wreg free
  2942                           
  2943                           ;Lab9p1.c: 241: drawtext (30, 50, txt, 0xFFFF, 0x0000, 1);
  2944  000D5E  0E32               	movlw	50
  2945  000D60  6E37               	movwf	drawtext@y,c
  2946  000D62  C064  F038         	movff	_txt,drawtext@_text
  2947  000D66  C065  F039         	movff	_txt+1,drawtext@_text+1
  2948  000D6A  0EFF               	movlw	255
  2949  000D6C  6E3B               	movwf	drawtext@color+1,c
  2950  000D6E  683A               	setf	drawtext@color,c
  2951  000D70  0E00               	movlw	0
  2952  000D72  6E3D               	movwf	drawtext@bg+1,c
  2953  000D74  0E00               	movlw	0
  2954  000D76  6E3C               	movwf	drawtext@bg,c
  2955  000D78  0E01               	movlw	1
  2956  000D7A  6E3E               	movwf	drawtext@size,c
  2957  000D7C  0E1E               	movlw	30
  2958  000D7E  EC5D  F016         	call	_drawtext
  2959                           
  2960                           ;Lab9p1.c: 242: drawRect (30, 50 + 15-8, 60, 18, 0xFFFF);
  2961  000D82  0E00               	movlw	0
  2962  000D84  6E22               	movwf	drawRect@x+1,c
  2963  000D86  0E1E               	movlw	30
  2964  000D88  6E21               	movwf	drawRect@x,c
  2965  000D8A  0E00               	movlw	0
  2966  000D8C  6E24               	movwf	drawRect@y+1,c
  2967  000D8E  0E39               	movlw	57
  2968  000D90  6E23               	movwf	drawRect@y,c
  2969  000D92  0E00               	movlw	0
  2970  000D94  6E26               	movwf	drawRect@w+1,c
  2971  000D96  0E3C               	movlw	60
  2972  000D98  6E25               	movwf	drawRect@w,c
  2973  000D9A  0E00               	movlw	0
  2974  000D9C  6E28               	movwf	drawRect@h+1,c
  2975  000D9E  0E12               	movlw	18
  2976  000DA0  6E27               	movwf	drawRect@h,c
  2977  000DA2  0EFF               	movlw	255
  2978  000DA4  6E2A               	movwf	drawRect@color+1,c
  2979  000DA6  6829               	setf	drawRect@color,c
  2980  000DA8  EC41  F01B         	call	_drawRect	;wreg free
  2981                           
  2982                           ;Lab9p1.c: 243: fillCircle(40, 50 + 15, 7, 0xF800);
  2983  000DAC  0E00               	movlw	0
  2984  000DAE  6E3A               	movwf	fillCircle@x0+1,c
  2985  000DB0  0E28               	movlw	40
  2986  000DB2  6E39               	movwf	fillCircle@x0,c
  2987  000DB4  0E00               	movlw	0
  2988  000DB6  6E3C               	movwf	fillCircle@y0+1,c
  2989  000DB8  0E41               	movlw	65
  2990  000DBA  6E3B               	movwf	fillCircle@y0,c
  2991  000DBC  0E00               	movlw	0
  2992  000DBE  6E3E               	movwf	fillCircle@r+1,c
  2993  000DC0  0E07               	movlw	7
  2994  000DC2  6E3D               	movwf	fillCircle@r,c
  2995  000DC4  0EF8               	movlw	248
  2996  000DC6  6E40               	movwf	fillCircle@color+1,c
  2997  000DC8  0E00               	movlw	0
  2998  000DCA  6E3F               	movwf	fillCircle@color,c
  2999  000DCC  ECFE  F01B         	call	_fillCircle	;wreg free
  3000                           
  3001                           ;Lab9p1.c: 244: drawCircle(60, 50 + 15, 7, 0xFFE0);
  3002  000DD0  0E00               	movlw	0
  3003  000DD2  6E1B               	movwf	drawCircle@x0+1,c
  3004  000DD4  0E3C               	movlw	60
  3005  000DD6  6E1A               	movwf	drawCircle@x0,c
  3006  000DD8  0E00               	movlw	0
  3007  000DDA  6E1D               	movwf	drawCircle@y0+1,c
  3008  000DDC  0E41               	movlw	65
  3009  000DDE  6E1C               	movwf	drawCircle@y0,c
  3010  000DE0  0E00               	movlw	0
  3011  000DE2  6E1F               	movwf	drawCircle@r+1,c
  3012  000DE4  0E07               	movlw	7
  3013  000DE6  6E1E               	movwf	drawCircle@r,c
  3014  000DE8  0EFF               	movlw	255
  3015  000DEA  6E21               	movwf	drawCircle@color+1,c
  3016  000DEC  0EE0               	movlw	224
  3017  000DEE  6E20               	movwf	drawCircle@color,c
  3018  000DF0  EC88  F00F         	call	_drawCircle	;wreg free
  3019                           
  3020                           ;Lab9p1.c: 245: drawCircle(80, 50 + 15, 7, 0x07E0);
  3021  000DF4  0E00               	movlw	0
  3022  000DF6  6E1B               	movwf	drawCircle@x0+1,c
  3023  000DF8  0E50               	movlw	80
  3024  000DFA  6E1A               	movwf	drawCircle@x0,c
  3025  000DFC  0E00               	movlw	0
  3026  000DFE  6E1D               	movwf	drawCircle@y0+1,c
  3027  000E00  0E41               	movlw	65
  3028  000E02  6E1C               	movwf	drawCircle@y0,c
  3029  000E04  0E00               	movlw	0
  3030  000E06  6E1F               	movwf	drawCircle@r+1,c
  3031  000E08  0E07               	movlw	7
  3032  000E0A  6E1E               	movwf	drawCircle@r,c
  3033  000E0C  0E07               	movlw	7
  3034  000E0E  6E21               	movwf	drawCircle@color+1,c
  3035  000E10  0EE0               	movlw	224
  3036  000E12  6E20               	movwf	drawCircle@color,c
  3037  000E14  EC88  F00F         	call	_drawCircle	;wreg free
  3038                           
  3039                           ;Lab9p1.c: 246: drawtext (100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  3040  000E18  0E3C               	movlw	60
  3041  000E1A  6E37               	movwf	drawtext@y,c
  3042  000E1C  0EBF               	movlw	low _EWLT_Count
  3043  000E1E  6E38               	movwf	drawtext@_text,c
  3044  000E20  0E00               	movlw	high _EWLT_Count
  3045  000E22  6E39               	movwf	drawtext@_text+1,c
  3046  000E24  0EFF               	movlw	255
  3047  000E26  6E3B               	movwf	drawtext@color+1,c
  3048  000E28  683A               	setf	drawtext@color,c
  3049  000E2A  0E00               	movlw	0
  3050  000E2C  6E3D               	movwf	drawtext@bg+1,c
  3051  000E2E  0E00               	movlw	0
  3052  000E30  6E3C               	movwf	drawtext@bg,c
  3053  000E32  0E02               	movlw	2
  3054  000E34  6E3E               	movwf	drawtext@size,c
  3055  000E36  0E64               	movlw	100
  3056  000E38  EC5D  F016         	call	_drawtext
  3057                           
  3058                           ;Lab9p1.c: 249: strcpy(txt, "NORTH/SOUTH");
  3059  000E3C  C064  F00F         	movff	_txt,strcpy@to
  3060  000E40  C065  F010         	movff	_txt+1,strcpy@to+1
  3061  000E44  0EC1               	movlw	low STR_8
  3062  000E46  6E11               	movwf	strcpy@from,c
  3063  000E48  0EFF               	movlw	high STR_8
  3064  000E4A  6E12               	movwf	strcpy@from+1,c
  3065  000E4C  ECB4  F01D         	call	_strcpy	;wreg free
  3066                           
  3067                           ;Lab9p1.c: 250: drawtext (30, 80 , txt, 0x001F, 0x0000, 1);
  3068  000E50  0E50               	movlw	80
  3069  000E52  6E37               	movwf	drawtext@y,c
  3070  000E54  C064  F038         	movff	_txt,drawtext@_text
  3071  000E58  C065  F039         	movff	_txt+1,drawtext@_text+1
  3072  000E5C  0E00               	movlw	0
  3073  000E5E  6E3B               	movwf	drawtext@color+1,c
  3074  000E60  0E1F               	movlw	31
  3075  000E62  6E3A               	movwf	drawtext@color,c
  3076  000E64  0E00               	movlw	0
  3077  000E66  6E3D               	movwf	drawtext@bg+1,c
  3078  000E68  0E00               	movlw	0
  3079  000E6A  6E3C               	movwf	drawtext@bg,c
  3080  000E6C  0E01               	movlw	1
  3081  000E6E  6E3E               	movwf	drawtext@size,c
  3082  000E70  0E1E               	movlw	30
  3083  000E72  EC5D  F016         	call	_drawtext
  3084                           
  3085                           ;Lab9p1.c: 251: drawRect (30, 80 + 15-8, 60, 18, 0x001F);
  3086  000E76  0E00               	movlw	0
  3087  000E78  6E22               	movwf	drawRect@x+1,c
  3088  000E7A  0E1E               	movlw	30
  3089  000E7C  6E21               	movwf	drawRect@x,c
  3090  000E7E  0E00               	movlw	0
  3091  000E80  6E24               	movwf	drawRect@y+1,c
  3092  000E82  0E57               	movlw	87
  3093  000E84  6E23               	movwf	drawRect@y,c
  3094  000E86  0E00               	movlw	0
  3095  000E88  6E26               	movwf	drawRect@w+1,c
  3096  000E8A  0E3C               	movlw	60
  3097  000E8C  6E25               	movwf	drawRect@w,c
  3098  000E8E  0E00               	movlw	0
  3099  000E90  6E28               	movwf	drawRect@h+1,c
  3100  000E92  0E12               	movlw	18
  3101  000E94  6E27               	movwf	drawRect@h,c
  3102  000E96  0E00               	movlw	0
  3103  000E98  6E2A               	movwf	drawRect@color+1,c
  3104  000E9A  0E1F               	movlw	31
  3105  000E9C  6E29               	movwf	drawRect@color,c
  3106  000E9E  EC41  F01B         	call	_drawRect	;wreg free
  3107                           
  3108                           ;Lab9p1.c: 252: drawCircle(40, 80 + 15 , 7, 0xF800);
  3109  000EA2  0E00               	movlw	0
  3110  000EA4  6E1B               	movwf	drawCircle@x0+1,c
  3111  000EA6  0E28               	movlw	40
  3112  000EA8  6E1A               	movwf	drawCircle@x0,c
  3113  000EAA  0E00               	movlw	0
  3114  000EAC  6E1D               	movwf	drawCircle@y0+1,c
  3115  000EAE  0E5F               	movlw	95
  3116  000EB0  6E1C               	movwf	drawCircle@y0,c
  3117  000EB2  0E00               	movlw	0
  3118  000EB4  6E1F               	movwf	drawCircle@r+1,c
  3119  000EB6  0E07               	movlw	7
  3120  000EB8  6E1E               	movwf	drawCircle@r,c
  3121  000EBA  0EF8               	movlw	248
  3122  000EBC  6E21               	movwf	drawCircle@color+1,c
  3123  000EBE  0E00               	movlw	0
  3124  000EC0  6E20               	movwf	drawCircle@color,c
  3125  000EC2  EC88  F00F         	call	_drawCircle	;wreg free
  3126                           
  3127                           ;Lab9p1.c: 253: drawCircle(60, 80 + 15 , 7, 0xFFE0);
  3128  000EC6  0E00               	movlw	0
  3129  000EC8  6E1B               	movwf	drawCircle@x0+1,c
  3130  000ECA  0E3C               	movlw	60
  3131  000ECC  6E1A               	movwf	drawCircle@x0,c
  3132  000ECE  0E00               	movlw	0
  3133  000ED0  6E1D               	movwf	drawCircle@y0+1,c
  3134  000ED2  0E5F               	movlw	95
  3135  000ED4  6E1C               	movwf	drawCircle@y0,c
  3136  000ED6  0E00               	movlw	0
  3137  000ED8  6E1F               	movwf	drawCircle@r+1,c
  3138  000EDA  0E07               	movlw	7
  3139  000EDC  6E1E               	movwf	drawCircle@r,c
  3140  000EDE  0EFF               	movlw	255
  3141  000EE0  6E21               	movwf	drawCircle@color+1,c
  3142  000EE2  0EE0               	movlw	224
  3143  000EE4  6E20               	movwf	drawCircle@color,c
  3144  000EE6  EC88  F00F         	call	_drawCircle	;wreg free
  3145                           
  3146                           ;Lab9p1.c: 254: fillCircle(80, 80 + 15 , 7, 0x07E0);
  3147  000EEA  0E00               	movlw	0
  3148  000EEC  6E3A               	movwf	fillCircle@x0+1,c
  3149  000EEE  0E50               	movlw	80
  3150  000EF0  6E39               	movwf	fillCircle@x0,c
  3151  000EF2  0E00               	movlw	0
  3152  000EF4  6E3C               	movwf	fillCircle@y0+1,c
  3153  000EF6  0E5F               	movlw	95
  3154  000EF8  6E3B               	movwf	fillCircle@y0,c
  3155  000EFA  0E00               	movlw	0
  3156  000EFC  6E3E               	movwf	fillCircle@r+1,c
  3157  000EFE  0E07               	movlw	7
  3158  000F00  6E3D               	movwf	fillCircle@r,c
  3159  000F02  0E07               	movlw	7
  3160  000F04  6E40               	movwf	fillCircle@color+1,c
  3161  000F06  0EE0               	movlw	224
  3162  000F08  6E3F               	movwf	fillCircle@color,c
  3163  000F0A  ECFE  F01B         	call	_fillCircle	;wreg free
  3164                           
  3165                           ;Lab9p1.c: 255: drawtext (100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  3166  000F0E  0E5A               	movlw	90
  3167  000F10  6E37               	movwf	drawtext@y,c
  3168  000F12  0EC8               	movlw	low _NS_Count
  3169  000F14  6E38               	movwf	drawtext@_text,c
  3170  000F16  0E00               	movlw	high _NS_Count
  3171  000F18  6E39               	movwf	drawtext@_text+1,c
  3172  000F1A  0E00               	movlw	0
  3173  000F1C  6E3B               	movwf	drawtext@color+1,c
  3174  000F1E  0E1F               	movlw	31
  3175  000F20  6E3A               	movwf	drawtext@color,c
  3176  000F22  0E00               	movlw	0
  3177  000F24  6E3D               	movwf	drawtext@bg+1,c
  3178  000F26  0E00               	movlw	0
  3179  000F28  6E3C               	movwf	drawtext@bg,c
  3180  000F2A  0E02               	movlw	2
  3181  000F2C  6E3E               	movwf	drawtext@size,c
  3182  000F2E  0E64               	movlw	100
  3183  000F30  EC5D  F016         	call	_drawtext
  3184                           
  3185                           ;Lab9p1.c: 258: strcpy(txt, "N/S LT");
  3186  000F34  C064  F00F         	movff	_txt,strcpy@to
  3187  000F38  C065  F010         	movff	_txt+1,strcpy@to+1
  3188  000F3C  0ED7               	movlw	low STR_9
  3189  000F3E  6E11               	movwf	strcpy@from,c
  3190  000F40  0EFF               	movlw	high STR_9
  3191  000F42  6E12               	movwf	strcpy@from+1,c
  3192  000F44  ECB4  F01D         	call	_strcpy	;wreg free
  3193                           
  3194                           ;Lab9p1.c: 259: drawtext (30, 110, txt, 0xF81F, 0x0000, 1);
  3195  000F48  0E6E               	movlw	110
  3196  000F4A  6E37               	movwf	drawtext@y,c
  3197  000F4C  C064  F038         	movff	_txt,drawtext@_text
  3198  000F50  C065  F039         	movff	_txt+1,drawtext@_text+1
  3199  000F54  0EF8               	movlw	248
  3200  000F56  6E3B               	movwf	drawtext@color+1,c
  3201  000F58  0E1F               	movlw	31
  3202  000F5A  6E3A               	movwf	drawtext@color,c
  3203  000F5C  0E00               	movlw	0
  3204  000F5E  6E3D               	movwf	drawtext@bg+1,c
  3205  000F60  0E00               	movlw	0
  3206  000F62  6E3C               	movwf	drawtext@bg,c
  3207  000F64  0E01               	movlw	1
  3208  000F66  6E3E               	movwf	drawtext@size,c
  3209  000F68  0E1E               	movlw	30
  3210  000F6A  EC5D  F016         	call	_drawtext
  3211                           
  3212                           ;Lab9p1.c: 260: drawRect (30, 110 + 15-8, 60, 18, 0xF81F);
  3213  000F6E  0E00               	movlw	0
  3214  000F70  6E22               	movwf	drawRect@x+1,c
  3215  000F72  0E1E               	movlw	30
  3216  000F74  6E21               	movwf	drawRect@x,c
  3217  000F76  0E00               	movlw	0
  3218  000F78  6E24               	movwf	drawRect@y+1,c
  3219  000F7A  0E75               	movlw	117
  3220  000F7C  6E23               	movwf	drawRect@y,c
  3221  000F7E  0E00               	movlw	0
  3222  000F80  6E26               	movwf	drawRect@w+1,c
  3223  000F82  0E3C               	movlw	60
  3224  000F84  6E25               	movwf	drawRect@w,c
  3225  000F86  0E00               	movlw	0
  3226  000F88  6E28               	movwf	drawRect@h+1,c
  3227  000F8A  0E12               	movlw	18
  3228  000F8C  6E27               	movwf	drawRect@h,c
  3229  000F8E  0EF8               	movlw	248
  3230  000F90  6E2A               	movwf	drawRect@color+1,c
  3231  000F92  0E1F               	movlw	31
  3232  000F94  6E29               	movwf	drawRect@color,c
  3233  000F96  EC41  F01B         	call	_drawRect	;wreg free
  3234                           
  3235                           ;Lab9p1.c: 261: fillCircle(40, 110 + 15, 7, 0xF800);
  3236  000F9A  0E00               	movlw	0
  3237  000F9C  6E3A               	movwf	fillCircle@x0+1,c
  3238  000F9E  0E28               	movlw	40
  3239  000FA0  6E39               	movwf	fillCircle@x0,c
  3240  000FA2  0E00               	movlw	0
  3241  000FA4  6E3C               	movwf	fillCircle@y0+1,c
  3242  000FA6  0E7D               	movlw	125
  3243  000FA8  6E3B               	movwf	fillCircle@y0,c
  3244  000FAA  0E00               	movlw	0
  3245  000FAC  6E3E               	movwf	fillCircle@r+1,c
  3246  000FAE  0E07               	movlw	7
  3247  000FB0  6E3D               	movwf	fillCircle@r,c
  3248  000FB2  0EF8               	movlw	248
  3249  000FB4  6E40               	movwf	fillCircle@color+1,c
  3250  000FB6  0E00               	movlw	0
  3251  000FB8  6E3F               	movwf	fillCircle@color,c
  3252  000FBA  ECFE  F01B         	call	_fillCircle	;wreg free
  3253                           
  3254                           ;Lab9p1.c: 262: drawCircle(60, 110 + 15, 7, 0xFFE0);
  3255  000FBE  0E00               	movlw	0
  3256  000FC0  6E1B               	movwf	drawCircle@x0+1,c
  3257  000FC2  0E3C               	movlw	60
  3258  000FC4  6E1A               	movwf	drawCircle@x0,c
  3259  000FC6  0E00               	movlw	0
  3260  000FC8  6E1D               	movwf	drawCircle@y0+1,c
  3261  000FCA  0E7D               	movlw	125
  3262  000FCC  6E1C               	movwf	drawCircle@y0,c
  3263  000FCE  0E00               	movlw	0
  3264  000FD0  6E1F               	movwf	drawCircle@r+1,c
  3265  000FD2  0E07               	movlw	7
  3266  000FD4  6E1E               	movwf	drawCircle@r,c
  3267  000FD6  0EFF               	movlw	255
  3268  000FD8  6E21               	movwf	drawCircle@color+1,c
  3269  000FDA  0EE0               	movlw	224
  3270  000FDC  6E20               	movwf	drawCircle@color,c
  3271  000FDE  EC88  F00F         	call	_drawCircle	;wreg free
  3272                           
  3273                           ;Lab9p1.c: 263: drawCircle(80, 110 + 15, 7, 0x07E0);
  3274  000FE2  0E00               	movlw	0
  3275  000FE4  6E1B               	movwf	drawCircle@x0+1,c
  3276  000FE6  0E50               	movlw	80
  3277  000FE8  6E1A               	movwf	drawCircle@x0,c
  3278  000FEA  0E00               	movlw	0
  3279  000FEC  6E1D               	movwf	drawCircle@y0+1,c
  3280  000FEE  0E7D               	movlw	125
  3281  000FF0  6E1C               	movwf	drawCircle@y0,c
  3282  000FF2  0E00               	movlw	0
  3283  000FF4  6E1F               	movwf	drawCircle@r+1,c
  3284  000FF6  0E07               	movlw	7
  3285  000FF8  6E1E               	movwf	drawCircle@r,c
  3286  000FFA  0E07               	movlw	7
  3287  000FFC  6E21               	movwf	drawCircle@color+1,c
  3288  000FFE  0EE0               	movlw	224
  3289  001000  6E20               	movwf	drawCircle@color,c
  3290  001002  EC88  F00F         	call	_drawCircle	;wreg free
  3291                           
  3292                           ;Lab9p1.c: 264: drawtext (100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  3293  001006  0E78               	movlw	120
  3294  001008  6E37               	movwf	drawtext@y,c
  3295  00100A  0EC5               	movlw	low _NSLT_Count
  3296  00100C  6E38               	movwf	drawtext@_text,c
  3297  00100E  0E00               	movlw	high _NSLT_Count
  3298  001010  6E39               	movwf	drawtext@_text+1,c
  3299  001012  0EF8               	movlw	248
  3300  001014  6E3B               	movwf	drawtext@color+1,c
  3301  001016  0E1F               	movlw	31
  3302  001018  6E3A               	movwf	drawtext@color,c
  3303  00101A  0E00               	movlw	0
  3304  00101C  6E3D               	movwf	drawtext@bg+1,c
  3305  00101E  0E00               	movlw	0
  3306  001020  6E3C               	movwf	drawtext@bg,c
  3307  001022  0E02               	movlw	2
  3308  001024  6E3E               	movwf	drawtext@size,c
  3309  001026  0E64               	movlw	100
  3310  001028  EC5D  F016         	call	_drawtext
  3311                           
  3312                           ;Lab9p1.c: 268: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  3313  00102C  0E1E               	movlw	30
  3314  00102E  6E37               	movwf	drawtext@y,c
  3315  001030  0ECB               	movlw	low _PED_EW_Count
  3316  001032  6E38               	movwf	drawtext@_text,c
  3317  001034  0E00               	movlw	high _PED_EW_Count
  3318  001036  6E39               	movwf	drawtext@_text+1,c
  3319  001038  0E07               	movlw	7
  3320  00103A  6E3B               	movwf	drawtext@color+1,c
  3321  00103C  683A               	setf	drawtext@color,c
  3322  00103E  0E00               	movlw	0
  3323  001040  6E3D               	movwf	drawtext@bg+1,c
  3324  001042  0E00               	movlw	0
  3325  001044  6E3C               	movwf	drawtext@bg,c
  3326  001046  0E02               	movlw	2
  3327  001048  6E3E               	movwf	drawtext@size,c
  3328  00104A  0E02               	movlw	2
  3329  00104C  EC5D  F016         	call	_drawtext
  3330                           
  3331                           ;Lab9p1.c: 269: strcpy(txt, "PEW");
  3332  001050  C064  F00F         	movff	_txt,strcpy@to
  3333  001054  C065  F010         	movff	_txt+1,strcpy@to+1
  3334  001058  0EF7               	movlw	low STR_10
  3335  00105A  6E11               	movwf	strcpy@from,c
  3336  00105C  0EFF               	movlw	high STR_10
  3337  00105E  6E12               	movwf	strcpy@from+1,c
  3338  001060  ECB4  F01D         	call	_strcpy	;wreg free
  3339                           
  3340                           ;Lab9p1.c: 270: drawtext(3, 20, txt, 0x07FF, 0x0000, 1);
  3341  001064  0E14               	movlw	20
  3342  001066  6E37               	movwf	drawtext@y,c
  3343  001068  C064  F038         	movff	_txt,drawtext@_text
  3344  00106C  C065  F039         	movff	_txt+1,drawtext@_text+1
  3345  001070  0E07               	movlw	7
  3346  001072  6E3B               	movwf	drawtext@color+1,c
  3347  001074  683A               	setf	drawtext@color,c
  3348  001076  0E00               	movlw	0
  3349  001078  6E3D               	movwf	drawtext@bg+1,c
  3350  00107A  0E00               	movlw	0
  3351  00107C  6E3C               	movwf	drawtext@bg,c
  3352  00107E  0E01               	movlw	1
  3353  001080  6E3E               	movwf	drawtext@size,c
  3354  001082  0E03               	movlw	3
  3355  001084  EC5D  F016         	call	_drawtext
  3356                           
  3357                           ;Lab9p1.c: 273: strcpy(txt, "PNS");
  3358  001088  C064  F00F         	movff	_txt,strcpy@to
  3359  00108C  C065  F010         	movff	_txt+1,strcpy@to+1
  3360  001090  0EF3               	movlw	low STR_11
  3361  001092  6E11               	movwf	strcpy@from,c
  3362  001094  0EFF               	movlw	high STR_11
  3363  001096  6E12               	movwf	strcpy@from+1,c
  3364  001098  ECB4  F01D         	call	_strcpy	;wreg free
  3365                           
  3366                           ;Lab9p1.c: 274: drawtext(3, 80, txt, 0x001F, 0x0000, 1);
  3367  00109C  0E50               	movlw	80
  3368  00109E  6E37               	movwf	drawtext@y,c
  3369  0010A0  C064  F038         	movff	_txt,drawtext@_text
  3370  0010A4  C065  F039         	movff	_txt+1,drawtext@_text+1
  3371  0010A8  0E00               	movlw	0
  3372  0010AA  6E3B               	movwf	drawtext@color+1,c
  3373  0010AC  0E1F               	movlw	31
  3374  0010AE  6E3A               	movwf	drawtext@color,c
  3375  0010B0  0E00               	movlw	0
  3376  0010B2  6E3D               	movwf	drawtext@bg+1,c
  3377  0010B4  0E00               	movlw	0
  3378  0010B6  6E3C               	movwf	drawtext@bg,c
  3379  0010B8  0E01               	movlw	1
  3380  0010BA  6E3E               	movwf	drawtext@size,c
  3381  0010BC  0E03               	movlw	3
  3382  0010BE  EC5D  F016         	call	_drawtext
  3383                           
  3384                           ;Lab9p1.c: 275: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  3385  0010C2  0E5A               	movlw	90
  3386  0010C4  6E37               	movwf	drawtext@y,c
  3387  0010C6  0ECE               	movlw	low _PED_NS_Count
  3388  0010C8  6E38               	movwf	drawtext@_text,c
  3389  0010CA  0E00               	movlw	high _PED_NS_Count
  3390  0010CC  6E39               	movwf	drawtext@_text+1,c
  3391  0010CE  0E00               	movlw	0
  3392  0010D0  6E3B               	movwf	drawtext@color+1,c
  3393  0010D2  0E1F               	movlw	31
  3394  0010D4  6E3A               	movwf	drawtext@color,c
  3395  0010D6  0E00               	movlw	0
  3396  0010D8  6E3D               	movwf	drawtext@bg+1,c
  3397  0010DA  0E00               	movlw	0
  3398  0010DC  6E3C               	movwf	drawtext@bg,c
  3399  0010DE  0E02               	movlw	2
  3400  0010E0  6E3E               	movwf	drawtext@size,c
  3401  0010E2  0E02               	movlw	2
  3402  0010E4  EC5D  F016         	call	_drawtext
  3403                           
  3404                           ;Lab9p1.c: 278: strcpy(txt, "EWP EWLT NSP NSLT MD");
  3405  0010E8  C064  F00F         	movff	_txt,strcpy@to
  3406  0010EC  C065  F010         	movff	_txt+1,strcpy@to+1
  3407  0010F0  0E85               	movlw	low STR_12
  3408  0010F2  6E11               	movwf	strcpy@from,c
  3409  0010F4  0EFF               	movlw	high STR_12
  3410  0010F6  6E12               	movwf	strcpy@from+1,c
  3411  0010F8  ECB4  F01D         	call	_strcpy	;wreg free
  3412                           
  3413                           ;Lab9p1.c: 279: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  3414  0010FC  0E8C               	movlw	140
  3415  0010FE  6E37               	movwf	drawtext@y,c
  3416  001100  C064  F038         	movff	_txt,drawtext@_text
  3417  001104  C065  F039         	movff	_txt+1,drawtext@_text+1
  3418  001108  0EFF               	movlw	255
  3419  00110A  6E3B               	movwf	drawtext@color+1,c
  3420  00110C  683A               	setf	drawtext@color,c
  3421  00110E  0E00               	movlw	0
  3422  001110  6E3D               	movwf	drawtext@bg+1,c
  3423  001112  0E00               	movlw	0
  3424  001114  6E3C               	movwf	drawtext@bg,c
  3425  001116  0E01               	movlw	1
  3426  001118  6E3E               	movwf	drawtext@size,c
  3427  00111A  0E01               	movlw	1
  3428  00111C  EC5D  F016         	call	_drawtext
  3429                           
  3430                           ;Lab9p1.c: 280: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  3431  001120  0E95               	movlw	149
  3432  001122  6E37               	movwf	drawtext@y,c
  3433  001124  0E6F               	movlw	low _SW_EWPED_Txt
  3434  001126  6E38               	movwf	drawtext@_text,c
  3435  001128  0E00               	movlw	high _SW_EWPED_Txt
  3436  00112A  6E39               	movwf	drawtext@_text+1,c
  3437  00112C  0EFF               	movlw	255
  3438  00112E  6E3B               	movwf	drawtext@color+1,c
  3439  001130  683A               	setf	drawtext@color,c
  3440  001132  0E00               	movlw	0
  3441  001134  6E3D               	movwf	drawtext@bg+1,c
  3442  001136  0E00               	movlw	0
  3443  001138  6E3C               	movwf	drawtext@bg,c
  3444  00113A  0E01               	movlw	1
  3445  00113C  6E3E               	movwf	drawtext@size,c
  3446  00113E  0E06               	movlw	6
  3447  001140  EC5D  F016         	call	_drawtext
  3448                           
  3449                           ;Lab9p1.c: 281: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  3450  001144  0E95               	movlw	149
  3451  001146  6E37               	movwf	drawtext@y,c
  3452  001148  0E6D               	movlw	low _SW_EWLT_Txt
  3453  00114A  6E38               	movwf	drawtext@_text,c
  3454  00114C  0E00               	movlw	high _SW_EWLT_Txt
  3455  00114E  6E39               	movwf	drawtext@_text+1,c
  3456  001150  0EFF               	movlw	255
  3457  001152  6E3B               	movwf	drawtext@color+1,c
  3458  001154  683A               	setf	drawtext@color,c
  3459  001156  0E00               	movlw	0
  3460  001158  6E3D               	movwf	drawtext@bg+1,c
  3461  00115A  0E00               	movlw	0
  3462  00115C  6E3C               	movwf	drawtext@bg,c
  3463  00115E  0E01               	movlw	1
  3464  001160  6E3E               	movwf	drawtext@size,c
  3465  001162  0E20               	movlw	32
  3466  001164  EC5D  F016         	call	_drawtext
  3467                           
  3468                           ;Lab9p1.c: 282: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  3469  001168  0E95               	movlw	149
  3470  00116A  6E37               	movwf	drawtext@y,c
  3471  00116C  0EDB               	movlw	low _SW_NSPED_Txt
  3472  00116E  6E38               	movwf	drawtext@_text,c
  3473  001170  0E00               	movlw	high _SW_NSPED_Txt
  3474  001172  6E39               	movwf	drawtext@_text+1,c
  3475  001174  0EFF               	movlw	255
  3476  001176  6E3B               	movwf	drawtext@color+1,c
  3477  001178  683A               	setf	drawtext@color,c
  3478  00117A  0E00               	movlw	0
  3479  00117C  6E3D               	movwf	drawtext@bg+1,c
  3480  00117E  0E00               	movlw	0
  3481  001180  6E3C               	movwf	drawtext@bg,c
  3482  001182  0E01               	movlw	1
  3483  001184  6E3E               	movwf	drawtext@size,c
  3484  001186  0E3A               	movlw	58
  3485  001188  EC5D  F016         	call	_drawtext
  3486                           
  3487                           ;Lab9p1.c: 283: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  3488  00118C  0E95               	movlw	149
  3489  00118E  6E37               	movwf	drawtext@y,c
  3490  001190  0ED9               	movlw	low _SW_NSLT_Txt
  3491  001192  6E38               	movwf	drawtext@_text,c
  3492  001194  0E00               	movlw	high _SW_NSLT_Txt
  3493  001196  6E39               	movwf	drawtext@_text+1,c
  3494  001198  0EFF               	movlw	255
  3495  00119A  6E3B               	movwf	drawtext@color+1,c
  3496  00119C  683A               	setf	drawtext@color,c
  3497  00119E  0E00               	movlw	0
  3498  0011A0  6E3D               	movwf	drawtext@bg+1,c
  3499  0011A2  0E00               	movlw	0
  3500  0011A4  6E3C               	movwf	drawtext@bg,c
  3501  0011A6  0E01               	movlw	1
  3502  0011A8  6E3E               	movwf	drawtext@size,c
  3503  0011AA  0E57               	movlw	87
  3504  0011AC  EC5D  F016         	call	_drawtext
  3505                           
  3506                           ;Lab9p1.c: 285: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  3507  0011B0  0E95               	movlw	149
  3508  0011B2  6E37               	movwf	drawtext@y,c
  3509  0011B4  0ED7               	movlw	low _SW_MODE_Txt
  3510  0011B6  6E38               	movwf	drawtext@_text,c
  3511  0011B8  0E00               	movlw	high _SW_MODE_Txt
  3512  0011BA  6E39               	movwf	drawtext@_text+1,c
  3513  0011BC  0EFF               	movlw	255
  3514  0011BE  6E3B               	movwf	drawtext@color+1,c
  3515  0011C0  683A               	setf	drawtext@color,c
  3516  0011C2  0E00               	movlw	0
  3517  0011C4  6E3D               	movwf	drawtext@bg+1,c
  3518  0011C6  0E00               	movlw	0
  3519  0011C8  6E3C               	movwf	drawtext@bg,c
  3520  0011CA  0E01               	movlw	1
  3521  0011CC  6E3E               	movwf	drawtext@size,c
  3522  0011CE  0E70               	movlw	112
  3523  0011D0  EC5D  F016         	call	_drawtext
  3524  0011D4  0012               	return		;funcret
  3525  0011D6                     __end_of_Initialize_Screen:
  3526                           	opt stack 0
  3527                           tblptru	equ	0xFF8
  3528                           tblptrh	equ	0xFF7
  3529                           tblptrl	equ	0xFF6
  3530                           tablat	equ	0xFF5
  3531                           prodl	equ	0xFF3
  3532                           intcon2	equ	0xFF1
  3533                           postinc0	equ	0xFEE
  3534                           wreg	equ	0xFE8
  3535                           postdec1	equ	0xFE5
  3536                           fsr1l	equ	0xFE1
  3537                           status	equ	0xFD8
  3538                           
  3539 ;; *************** function _fillScreen *****************
  3540 ;; Defined at:
  3541 ;;		line 652 in file "ST7735_TFT.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;  color           2   33[COMRAM] unsigned int 
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;		None
  3546 ;; Return value:  Size  Location     Type
  3547 ;;		None               void
  3548 ;; Registers used:
  3549 ;;		wreg, status,2, status,0, cstack
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3555 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3558 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3559 ;;Total ram usage:        2 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; Hardware stack levels required when called:    6
  3562 ;; This function calls:
  3563 ;;		_fillRectangle
  3564 ;; This function is called by:
  3565 ;;		_Initialize_Screen
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           	psect	text6
  3570  003CDC                     __ptext6:
  3571                           	opt stack 0
  3572  003CDC                     _fillScreen:
  3573                           	opt stack 23
  3574                           
  3575                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  3576                           
  3577                           ;incstack = 0
  3578  003CDC  0E00               	movlw	0
  3579  003CDE  6E16               	movwf	fillRectangle@y,c
  3580  003CE0  0E80               	movlw	128
  3581  003CE2  6E17               	movwf	fillRectangle@w,c
  3582  003CE4  0EA0               	movlw	160
  3583  003CE6  6E18               	movwf	fillRectangle@h,c
  3584  003CE8  C022  F019         	movff	fillScreen@color,fillRectangle@color
  3585  003CEC  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  3586  003CF0  0E00               	movlw	0
  3587  003CF2  ECCC  F016         	call	_fillRectangle
  3588  003CF6  0012               	return		;funcret
  3589  003CF8                     __end_of_fillScreen:
  3590                           	opt stack 0
  3591                           tblptru	equ	0xFF8
  3592                           tblptrh	equ	0xFF7
  3593                           tblptrl	equ	0xFF6
  3594                           tablat	equ	0xFF5
  3595                           prodl	equ	0xFF3
  3596                           intcon2	equ	0xFF1
  3597                           postinc0	equ	0xFEE
  3598                           wreg	equ	0xFE8
  3599                           postdec1	equ	0xFE5
  3600                           fsr1l	equ	0xFE1
  3601                           status	equ	0xFD8
  3602                           
  3603 ;; *************** function _fillRectangle *****************
  3604 ;; Defined at:
  3605 ;;		line 536 in file "ST7735_TFT.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;  x               1    wreg     unsigned char 
  3608 ;;  y               1   21[COMRAM] unsigned char 
  3609 ;;  w               1   22[COMRAM] unsigned char 
  3610 ;;  h               1   23[COMRAM] unsigned char 
  3611 ;;  color           2   24[COMRAM] unsigned int 
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;  x               1   32[COMRAM] unsigned char 
  3614 ;;  lo              1   31[COMRAM] unsigned char 
  3615 ;;  hi              1   30[COMRAM] unsigned char 
  3616 ;; Return value:  Size  Location     Type
  3617 ;;		None               void
  3618 ;; Registers used:
  3619 ;;		wreg, status,2, status,0, cstack
  3620 ;; Tracked objects:
  3621 ;;		On entry : 0/0
  3622 ;;		On exit  : 0/0
  3623 ;;		Unchanged: 0/0
  3624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3625 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3626 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3627 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3628 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3629 ;;Total ram usage:       12 bytes
  3630 ;; Hardware stack levels used:    1
  3631 ;; Hardware stack levels required when called:    5
  3632 ;; This function calls:
  3633 ;;		_setAddrWindow
  3634 ;;		_spiwrite
  3635 ;; This function is called by:
  3636 ;;		_fillScreen
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           	psect	text7
  3641  002D98                     __ptext7:
  3642                           	opt stack 0
  3643  002D98                     _fillRectangle:
  3644                           	opt stack 23
  3645                           
  3646                           ;incstack = 0
  3647                           ;fillRectangle@x stored from wreg
  3648  002D98  6E21               	movwf	fillRectangle@x,c
  3649                           
  3650                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  3651                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  3652  002D9A  0E80               	movlw	128
  3653  002D9C  6021               	cpfslt	fillRectangle@x,c
  3654  002D9E  D069               	goto	l264
  3655  002DA0  0E9F               	movlw	159
  3656  002DA2  6416               	cpfsgt	fillRectangle@y,c
  3657  002DA4  D001               	goto	l6944
  3658                           
  3659                           ;ST7735_TFT.c: 540: return;
  3660  002DA6  D065               	goto	l264
  3661  002DA8                     l6944:
  3662                           
  3663                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  3664  002DA8  0EFF               	movlw	255
  3665  002DAA  6E1B               	movwf	??_fillRectangle& (0+255),c
  3666  002DAC  0EFF               	movlw	255
  3667  002DAE  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3668  002DB0  5017               	movf	fillRectangle@w,w,c
  3669  002DB2  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  3670  002DB6  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3671  002DB8  261D               	addwf	??_fillRectangle+2,f,c
  3672  002DBA  0E00               	movlw	0
  3673  002DBC  221E               	addwfc	??_fillRectangle+3,f,c
  3674  002DBE  501B               	movf	??_fillRectangle,w,c
  3675  002DC0  261D               	addwf	??_fillRectangle+2,f,c
  3676  002DC2  501C               	movf	??_fillRectangle+1,w,c
  3677  002DC4  221E               	addwfc	??_fillRectangle+3,f,c
  3678  002DC6  BE1E               	btfsc	??_fillRectangle+3,7,c
  3679  002DC8  D00A               	goto	l265
  3680  002DCA  501E               	movf	??_fillRectangle+3,w,c
  3681  002DCC  E104               	bnz	u7000
  3682  002DCE  0E80               	movlw	128
  3683  002DD0  5C1D               	subwf	??_fillRectangle+2,w,c
  3684  002DD2  A0D8               	btfss	status,0,c
  3685  002DD4  D004               	goto	l265
  3686  002DD6                     u7000:
  3687                           
  3688                           ;ST7735_TFT.c: 542: w = 128 - x;
  3689  002DD6  5021               	movf	fillRectangle@x,w,c
  3690  002DD8  0800               	sublw	0
  3691  002DDA  0F80               	addlw	128
  3692  002DDC  6E17               	movwf	fillRectangle@w,c
  3693  002DDE                     l265:
  3694                           
  3695                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  3696  002DDE  0EFF               	movlw	255
  3697  002DE0  6E1B               	movwf	??_fillRectangle& (0+255),c
  3698  002DE2  0EFF               	movlw	255
  3699  002DE4  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3700  002DE6  5018               	movf	fillRectangle@h,w,c
  3701  002DE8  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  3702  002DEC  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3703  002DEE  261D               	addwf	??_fillRectangle+2,f,c
  3704  002DF0  0E00               	movlw	0
  3705  002DF2  221E               	addwfc	??_fillRectangle+3,f,c
  3706  002DF4  501B               	movf	??_fillRectangle,w,c
  3707  002DF6  261D               	addwf	??_fillRectangle+2,f,c
  3708  002DF8  501C               	movf	??_fillRectangle+1,w,c
  3709  002DFA  221E               	addwfc	??_fillRectangle+3,f,c
  3710  002DFC  BE1E               	btfsc	??_fillRectangle+3,7,c
  3711  002DFE  D00B               	goto	l6950
  3712  002E00  501E               	movf	??_fillRectangle+3,w,c
  3713  002E02  E104               	bnz	u7010
  3714  002E04  0EA0               	movlw	160
  3715  002E06  5C1D               	subwf	??_fillRectangle+2,w,c
  3716  002E08  A0D8               	btfss	status,0,c
  3717  002E0A  D005               	goto	l6950
  3718  002E0C                     u7010:
  3719                           
  3720                           ;ST7735_TFT.c: 544: h = 160 - y;
  3721  002E0C  5016               	movf	fillRectangle@y,w,c
  3722  002E0E  0800               	sublw	0
  3723  002E10  0FA0               	addlw	160
  3724  002E12  6E18               	movwf	fillRectangle@h,c
  3725  002E14  D000               	goto	l6950
  3726  002E16                     l6950:
  3727                           
  3728                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  3729  002E16  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  3730  002E1A  5021               	movf	fillRectangle@x,w,c
  3731  002E1C  2417               	addwf	fillRectangle@w,w,c
  3732  002E1E  6E1B               	movwf	??_fillRectangle& (0+255),c
  3733  002E20  041B               	decf	??_fillRectangle,w,c
  3734  002E22  6E13               	movwf	setAddrWindow@x1,c
  3735  002E24  5016               	movf	fillRectangle@y,w,c
  3736  002E26  2418               	addwf	fillRectangle@h,w,c
  3737  002E28  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3738  002E2A  041C               	decf	??_fillRectangle+1,w,c
  3739  002E2C  6E14               	movwf	setAddrWindow@y1,c
  3740  002E2E  5021               	movf	fillRectangle@x,w,c
  3741  002E30  EC27  F01C         	call	_setAddrWindow
  3742                           
  3743                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  3744  002E34  501A               	movf	fillRectangle@color+1,w,c
  3745  002E36  6E1F               	movwf	fillRectangle@hi,c
  3746  002E38  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  3747                           
  3748                           ;ST7735_TFT.c: 547: PORTCbits.RC2 = 1;
  3749  002E3C  8482               	bsf	3970,2,c	;volatile
  3750                           
  3751                           ;ST7735_TFT.c: 548: PORTCbits.RC4 = 0;
  3752  002E3E  9882               	bcf	3970,4,c	;volatile
  3753                           
  3754                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  3755  002E40  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  3756  002E44                     l6962:
  3757  002E44  5016               	movf	fillRectangle@y,w,c
  3758  002E46  B4D8               	btfsc	status,2,c
  3759  002E48  D013               	goto	l268
  3760  002E4A  D001               	goto	l267
  3761  002E4C  D011               	goto	l268
  3762  002E4E                     l267:
  3763                           
  3764                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  3765  002E4E  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  3766  002E52                     l6966:
  3767  002E52  5021               	movf	fillRectangle@x,w,c
  3768  002E54  B4D8               	btfsc	status,2,c
  3769  002E56  D00A               	goto	l6976
  3770  002E58  D001               	goto	l6970
  3771  002E5A  D008               	goto	l6976
  3772  002E5C                     l6970:
  3773                           
  3774                           ;ST7735_TFT.c: 552: spiwrite(hi);
  3775  002E5C  501F               	movf	fillRectangle@hi,w,c
  3776  002E5E  ECB4  F01E         	call	_spiwrite
  3777                           
  3778                           ;ST7735_TFT.c: 553: spiwrite(lo);
  3779  002E62  5020               	movf	fillRectangle@lo,w,c
  3780  002E64  ECB4  F01E         	call	_spiwrite
  3781  002E68  0621               	decf	fillRectangle@x,f,c
  3782  002E6A  D7F3               	goto	l6966
  3783  002E6C                     l6976:
  3784  002E6C  0616               	decf	fillRectangle@y,f,c
  3785  002E6E  D7EA               	goto	l6962
  3786  002E70                     l268:
  3787                           
  3788                           ;ST7735_TFT.c: 554: }
  3789                           ;ST7735_TFT.c: 555: }
  3790                           ;ST7735_TFT.c: 556: PORTCbits.RC4 = 1;
  3791  002E70  8882               	bsf	3970,4,c	;volatile
  3792  002E72                     l264:
  3793  002E72  0012               	return		;funcret
  3794  002E74                     __end_of_fillRectangle:
  3795                           	opt stack 0
  3796                           tblptru	equ	0xFF8
  3797                           tblptrh	equ	0xFF7
  3798                           tblptrl	equ	0xFF6
  3799                           tablat	equ	0xFF5
  3800                           prodl	equ	0xFF3
  3801                           intcon2	equ	0xFF1
  3802                           postinc0	equ	0xFEE
  3803                           wreg	equ	0xFE8
  3804                           postdec1	equ	0xFE5
  3805                           fsr1l	equ	0xFE1
  3806                           status	equ	0xFD8
  3807                           
  3808 ;; *************** function _drawRect *****************
  3809 ;; Defined at:
  3810 ;;		line 718 in file "ST7735_TFT.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;  x               2   32[COMRAM] unsigned int 
  3813 ;;  y               2   34[COMRAM] unsigned int 
  3814 ;;  w               2   36[COMRAM] unsigned int 
  3815 ;;  h               2   38[COMRAM] unsigned int 
  3816 ;;  color           2   40[COMRAM] unsigned int 
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;		None
  3819 ;; Return value:  Size  Location     Type
  3820 ;;		None               void
  3821 ;; Registers used:
  3822 ;;		wreg, status,2, status,0, cstack
  3823 ;; Tracked objects:
  3824 ;;		On entry : 0/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3828 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3830 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3831 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3832 ;;Total ram usage:       11 bytes
  3833 ;; Hardware stack levels used:    1
  3834 ;; Hardware stack levels required when called:    6
  3835 ;; This function calls:
  3836 ;;		_drawFastHLine
  3837 ;;		_drawFastVLine
  3838 ;; This function is called by:
  3839 ;;		_Initialize_Screen
  3840 ;; This function uses a non-reentrant model
  3841 ;;
  3842                           
  3843                           	psect	text8
  3844  003682                     __ptext8:
  3845                           	opt stack 0
  3846  003682                     _drawRect:
  3847                           	opt stack 23
  3848                           
  3849                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  3850                           
  3851                           ;incstack = 0
  3852  003682  C023  F016         	movff	drawRect@y,drawFastHLine@y
  3853  003686  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3854  00368A  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3855  00368E  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3856  003692  5021               	movf	drawRect@x,w,c
  3857  003694  EC82  F019         	call	_drawFastHLine
  3858                           
  3859                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  3860  003698  5023               	movf	drawRect@y,w,c
  3861  00369A  2427               	addwf	drawRect@h,w,c
  3862  00369C  6E2B               	movwf	??_drawRect& (0+255),c
  3863  00369E  042B               	decf	??_drawRect,w,c
  3864  0036A0  6E16               	movwf	drawFastHLine@y,c
  3865  0036A2  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3866  0036A6  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3867  0036AA  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3868  0036AE  5021               	movf	drawRect@x,w,c
  3869  0036B0  EC82  F019         	call	_drawFastHLine
  3870                           
  3871                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  3872  0036B4  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3873  0036B8  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3874  0036BC  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3875  0036C0  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3876  0036C4  5021               	movf	drawRect@x,w,c
  3877  0036C6  ECC6  F019         	call	_drawFastVLine
  3878                           
  3879                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  3880  0036CA  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3881  0036CE  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3882  0036D2  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3883  0036D6  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3884  0036DA  5021               	movf	drawRect@x,w,c
  3885  0036DC  2425               	addwf	drawRect@w,w,c
  3886  0036DE  6E2B               	movwf	??_drawRect& (0+255),c
  3887  0036E0  042B               	decf	??_drawRect,w,c
  3888  0036E2  ECC6  F019         	call	_drawFastVLine
  3889  0036E6  0012               	return		;funcret
  3890  0036E8                     __end_of_drawRect:
  3891                           	opt stack 0
  3892                           tblptru	equ	0xFF8
  3893                           tblptrh	equ	0xFF7
  3894                           tblptrl	equ	0xFF6
  3895                           tablat	equ	0xFF5
  3896                           prodl	equ	0xFF3
  3897                           intcon2	equ	0xFF1
  3898                           postinc0	equ	0xFEE
  3899                           wreg	equ	0xFE8
  3900                           postdec1	equ	0xFE5
  3901                           fsr1l	equ	0xFE1
  3902                           status	equ	0xFD8
  3903                           
  3904 ;; *************** function _drawFastHLine *****************
  3905 ;; Defined at:
  3906 ;;		line 657 in file "ST7735_TFT.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;  x               1    wreg     unsigned char 
  3909 ;;  y               1   21[COMRAM] unsigned char 
  3910 ;;  w               1   22[COMRAM] unsigned char 
  3911 ;;  color           2   23[COMRAM] unsigned int 
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;  x               1   31[COMRAM] unsigned char 
  3914 ;;  lo              1   30[COMRAM] unsigned char 
  3915 ;;  hi              1   29[COMRAM] unsigned char 
  3916 ;; Return value:  Size  Location     Type
  3917 ;;		None               void
  3918 ;; Registers used:
  3919 ;;		wreg, status,2, status,0, cstack
  3920 ;; Tracked objects:
  3921 ;;		On entry : 0/0
  3922 ;;		On exit  : 0/0
  3923 ;;		Unchanged: 0/0
  3924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3925 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3926 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3927 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3928 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3929 ;;Total ram usage:       11 bytes
  3930 ;; Hardware stack levels used:    1
  3931 ;; Hardware stack levels required when called:    5
  3932 ;; This function calls:
  3933 ;;		_setAddrWindow
  3934 ;;		_spiwrite
  3935 ;; This function is called by:
  3936 ;;		_drawRect
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           	psect	text9
  3941  003304                     __ptext9:
  3942                           	opt stack 0
  3943  003304                     _drawFastHLine:
  3944                           	opt stack 23
  3945                           
  3946                           ;incstack = 0
  3947                           ;drawFastHLine@x stored from wreg
  3948  003304  6E20               	movwf	drawFastHLine@x,c
  3949                           
  3950                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  3951                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  3952  003306  0E80               	movlw	128
  3953  003308  6020               	cpfslt	drawFastHLine@x,c
  3954  00330A  D03F               	goto	l309
  3955  00330C  0E9F               	movlw	159
  3956  00330E  6416               	cpfsgt	drawFastHLine@y,c
  3957  003310  D001               	goto	l6984
  3958                           
  3959                           ;ST7735_TFT.c: 661: return;
  3960  003312  D03B               	goto	l309
  3961  003314                     l6984:
  3962                           
  3963                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  3964  003314  0EFF               	movlw	255
  3965  003316  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3966  003318  0EFF               	movlw	255
  3967  00331A  6E1B               	movwf	(??_drawFastHLine+1)& (0+255),c
  3968  00331C  5017               	movf	drawFastHLine@w,w,c
  3969  00331E  C020  F01C         	movff	drawFastHLine@x,??_drawFastHLine+2
  3970  003322  6A1D               	clrf	(??_drawFastHLine+3)& (0+255),c
  3971  003324  261C               	addwf	??_drawFastHLine+2,f,c
  3972  003326  0E00               	movlw	0
  3973  003328  221D               	addwfc	??_drawFastHLine+3,f,c
  3974  00332A  501A               	movf	??_drawFastHLine,w,c
  3975  00332C  261C               	addwf	??_drawFastHLine+2,f,c
  3976  00332E  501B               	movf	??_drawFastHLine+1,w,c
  3977  003330  221D               	addwfc	??_drawFastHLine+3,f,c
  3978  003332  BE1D               	btfsc	??_drawFastHLine+3,7,c
  3979  003334  D00B               	goto	l6988
  3980  003336  501D               	movf	??_drawFastHLine+3,w,c
  3981  003338  E104               	bnz	u7080
  3982  00333A  0E80               	movlw	128
  3983  00333C  5C1C               	subwf	??_drawFastHLine+2,w,c
  3984  00333E  A0D8               	btfss	status,0,c
  3985  003340  D005               	goto	l6988
  3986  003342                     u7080:
  3987                           
  3988                           ;ST7735_TFT.c: 663: w = 128 - x;
  3989  003342  5020               	movf	drawFastHLine@x,w,c
  3990  003344  0800               	sublw	0
  3991  003346  0F80               	addlw	128
  3992  003348  6E17               	movwf	drawFastHLine@w,c
  3993  00334A  D000               	goto	l6988
  3994  00334C                     l6988:
  3995                           
  3996                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  3997  00334C  5019               	movf	drawFastHLine@color+1,w,c
  3998  00334E  6E1E               	movwf	drawFastHLine@hi,c
  3999  003350  C018  F01F         	movff	drawFastHLine@color,drawFastHLine@lo
  4000                           
  4001                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  4002  003354  C016  F012         	movff	drawFastHLine@y,setAddrWindow@y0
  4003  003358  5020               	movf	drawFastHLine@x,w,c
  4004  00335A  2417               	addwf	drawFastHLine@w,w,c
  4005  00335C  6E1A               	movwf	??_drawFastHLine& (0+255),c
  4006  00335E  041A               	decf	??_drawFastHLine,w,c
  4007  003360  6E13               	movwf	setAddrWindow@x1,c
  4008  003362  C016  F014         	movff	drawFastHLine@y,setAddrWindow@y1
  4009  003366  5020               	movf	drawFastHLine@x,w,c
  4010  003368  EC27  F01C         	call	_setAddrWindow
  4011                           
  4012                           ;ST7735_TFT.c: 666: PORTCbits.RC2 = 1;
  4013  00336C  8482               	bsf	3970,2,c	;volatile
  4014                           
  4015                           ;ST7735_TFT.c: 667: PORTCbits.RC4 = 0;
  4016  00336E  9882               	bcf	3970,4,c	;volatile
  4017                           
  4018                           ;ST7735_TFT.c: 669: while (w--) {
  4019  003370  D007               	goto	l7000
  4020  003372                     l6998:
  4021                           
  4022                           ;ST7735_TFT.c: 670: spiwrite(hi);
  4023  003372  501E               	movf	drawFastHLine@hi,w,c
  4024  003374  ECB4  F01E         	call	_spiwrite
  4025                           
  4026                           ;ST7735_TFT.c: 671: spiwrite(lo);
  4027  003378  501F               	movf	drawFastHLine@lo,w,c
  4028  00337A  ECB4  F01E         	call	_spiwrite
  4029  00337E  D000               	goto	l7000
  4030  003380                     l7000:
  4031  003380  0617               	decf	drawFastHLine@w,f,c
  4032  003382  2817               	incf	drawFastHLine@w,w,c
  4033  003384  A4D8               	btfss	status,2,c
  4034  003386  D7F5               	goto	l6998
  4035                           
  4036                           ;ST7735_TFT.c: 672: }
  4037                           ;ST7735_TFT.c: 673: PORTCbits.RC4 = 1;
  4038  003388  8882               	bsf	3970,4,c	;volatile
  4039  00338A                     l309:
  4040  00338A  0012               	return		;funcret
  4041  00338C                     __end_of_drawFastHLine:
  4042                           	opt stack 0
  4043                           tblptru	equ	0xFF8
  4044                           tblptrh	equ	0xFF7
  4045                           tblptrl	equ	0xFF6
  4046                           tablat	equ	0xFF5
  4047                           prodl	equ	0xFF3
  4048                           intcon2	equ	0xFF1
  4049                           postinc0	equ	0xFEE
  4050                           wreg	equ	0xFE8
  4051                           postdec1	equ	0xFE5
  4052                           fsr1l	equ	0xFE1
  4053                           status	equ	0xFD8
  4054                           
  4055 ;; *************** function _TFT_GreenTab_Initialize *****************
  4056 ;; Defined at:
  4057 ;;		line 677 in file "ST7735_TFT.c"
  4058 ;; Parameters:    Size  Location     Type
  4059 ;;		None
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;		None
  4062 ;; Return value:  Size  Location     Type
  4063 ;;		None               void
  4064 ;; Registers used:
  4065 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;Total ram usage:        0 bytes
  4076 ;; Hardware stack levels used:    1
  4077 ;; Hardware stack levels required when called:    5
  4078 ;; This function calls:
  4079 ;;		_Rcmd1
  4080 ;;		_Rcmd2red
  4081 ;;		_Rcmd3
  4082 ;;		_write_command
  4083 ;;		_write_data
  4084 ;; This function is called by:
  4085 ;;		_Initialize_Screen
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           	psect	text10
  4090  003BCA                     __ptext10:
  4091                           	opt stack 0
  4092  003BCA                     _TFT_GreenTab_Initialize:
  4093                           	opt stack 24
  4094                           
  4095                           ;ST7735_TFT.c: 679: PORTCbits.RC4 = 1;
  4096                           
  4097                           ;incstack = 0
  4098  003BCA  8882               	bsf	3970,4,c	;volatile
  4099                           
  4100                           ;ST7735_TFT.c: 680: PORTCbits.RC2 = 0;
  4101  003BCC  9482               	bcf	3970,2,c	;volatile
  4102                           
  4103                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  4104  003BCE  0E80               	movlw	128
  4105  003BD0  6EC7               	movwf	4039,c	;volatile
  4106                           
  4107                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  4108  003BD2  0E30               	movlw	48
  4109  003BD4  6EC6               	movwf	4038,c	;volatile
  4110                           
  4111                           ;ST7735_TFT.c: 686: Rcmd1();
  4112  003BD6  EC7B  F012         	call	_Rcmd1	;wreg free
  4113                           
  4114                           ;ST7735_TFT.c: 687: Rcmd2red();
  4115  003BDA  EC25  F01D         	call	_Rcmd2red	;wreg free
  4116                           
  4117                           ;ST7735_TFT.c: 688: Rcmd3();
  4118  003BDE  EC8C  F014         	call	_Rcmd3	;wreg free
  4119                           
  4120                           ;ST7735_TFT.c: 689: write_command(0x36);
  4121  003BE2  0E36               	movlw	54
  4122  003BE4  ECD8  F01E         	call	_write_command
  4123                           
  4124                           ;ST7735_TFT.c: 690: write_data(0xC0);
  4125  003BE8  0EC0               	movlw	192
  4126  003BEA  ECD0  F01E         	call	_write_data
  4127                           
  4128                           ;ST7735_TFT.c: 691: _tft_type = 1;
  4129  003BEE  0E01               	movlw	1
  4130  003BF0  6E68               	movwf	__tft_type,c
  4131  003BF2  0012               	return		;funcret
  4132  003BF4                     __end_of_TFT_GreenTab_Initialize:
  4133                           	opt stack 0
  4134                           tblptru	equ	0xFF8
  4135                           tblptrh	equ	0xFF7
  4136                           tblptrl	equ	0xFF6
  4137                           tablat	equ	0xFF5
  4138                           prodl	equ	0xFF3
  4139                           intcon2	equ	0xFF1
  4140                           postinc0	equ	0xFEE
  4141                           wreg	equ	0xFE8
  4142                           postdec1	equ	0xFE5
  4143                           fsr1l	equ	0xFE1
  4144                           status	equ	0xFD8
  4145                           
  4146 ;; *************** function _Rcmd3 *****************
  4147 ;; Defined at:
  4148 ;;		line 371 in file "ST7735_TFT.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;		None
  4151 ;; Auto vars:     Size  Location     Type
  4152 ;;		None
  4153 ;; Return value:  Size  Location     Type
  4154 ;;		None               void
  4155 ;; Registers used:
  4156 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4166 ;;Total ram usage:        0 bytes
  4167 ;; Hardware stack levels used:    1
  4168 ;; Hardware stack levels required when called:    4
  4169 ;; This function calls:
  4170 ;;		_delay_ms
  4171 ;;		_write_command
  4172 ;;		_write_data
  4173 ;; This function is called by:
  4174 ;;		_TFT_GreenTab_Initialize
  4175 ;;		_TFT_BlackTab_Initialize
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           	psect	text11
  4180  002918                     __ptext11:
  4181                           	opt stack 0
  4182  002918                     _Rcmd3:
  4183                           	opt stack 24
  4184                           
  4185                           ;ST7735_TFT.c: 373: write_command(0xE0);
  4186                           
  4187                           ;incstack = 0
  4188  002918  0EE0               	movlw	224
  4189  00291A  ECD8  F01E         	call	_write_command
  4190                           
  4191                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  4192  00291E  0E02               	movlw	2
  4193  002920  ECD0  F01E         	call	_write_data
  4194  002924  0E1C               	movlw	28
  4195  002926  ECD0  F01E         	call	_write_data
  4196  00292A  0E07               	movlw	7
  4197  00292C  ECD0  F01E         	call	_write_data
  4198  002930  0E12               	movlw	18
  4199  002932  ECD0  F01E         	call	_write_data
  4200                           
  4201                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  4202  002936  0E37               	movlw	55
  4203  002938  ECD0  F01E         	call	_write_data
  4204  00293C  0E32               	movlw	50
  4205  00293E  ECD0  F01E         	call	_write_data
  4206  002942  0E29               	movlw	41
  4207  002944  ECD0  F01E         	call	_write_data
  4208  002948  0E2D               	movlw	45
  4209  00294A  ECD0  F01E         	call	_write_data
  4210                           
  4211                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  4212  00294E  0E29               	movlw	41
  4213  002950  ECD0  F01E         	call	_write_data
  4214  002954  0E25               	movlw	37
  4215  002956  ECD0  F01E         	call	_write_data
  4216  00295A  0E2B               	movlw	43
  4217  00295C  ECD0  F01E         	call	_write_data
  4218  002960  0E39               	movlw	57
  4219  002962  ECD0  F01E         	call	_write_data
  4220                           
  4221                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  4222  002966  0E00               	movlw	0
  4223  002968  ECD0  F01E         	call	_write_data
  4224  00296C  0E01               	movlw	1
  4225  00296E  ECD0  F01E         	call	_write_data
  4226  002972  0E03               	movlw	3
  4227  002974  ECD0  F01E         	call	_write_data
  4228  002978  0E10               	movlw	16
  4229  00297A  ECD0  F01E         	call	_write_data
  4230                           
  4231                           ;ST7735_TFT.c: 378: write_command(0xE1);
  4232  00297E  0EE1               	movlw	225
  4233  002980  ECD8  F01E         	call	_write_command
  4234                           
  4235                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  4236  002984  0E03               	movlw	3
  4237  002986  ECD0  F01E         	call	_write_data
  4238  00298A  0E1D               	movlw	29
  4239  00298C  ECD0  F01E         	call	_write_data
  4240  002990  0E07               	movlw	7
  4241  002992  ECD0  F01E         	call	_write_data
  4242  002996  0E06               	movlw	6
  4243  002998  ECD0  F01E         	call	_write_data
  4244                           
  4245                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  4246  00299C  0E2E               	movlw	46
  4247  00299E  ECD0  F01E         	call	_write_data
  4248  0029A2  0E2C               	movlw	44
  4249  0029A4  ECD0  F01E         	call	_write_data
  4250  0029A8  0E29               	movlw	41
  4251  0029AA  ECD0  F01E         	call	_write_data
  4252  0029AE  0E2D               	movlw	45
  4253  0029B0  ECD0  F01E         	call	_write_data
  4254                           
  4255                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  4256  0029B4  0E2E               	movlw	46
  4257  0029B6  ECD0  F01E         	call	_write_data
  4258  0029BA  0E2E               	movlw	46
  4259  0029BC  ECD0  F01E         	call	_write_data
  4260  0029C0  0E37               	movlw	55
  4261  0029C2  ECD0  F01E         	call	_write_data
  4262  0029C6  0E3F               	movlw	63
  4263  0029C8  ECD0  F01E         	call	_write_data
  4264                           
  4265                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  4266  0029CC  0E00               	movlw	0
  4267  0029CE  ECD0  F01E         	call	_write_data
  4268  0029D2  0E00               	movlw	0
  4269  0029D4  ECD0  F01E         	call	_write_data
  4270  0029D8  0E02               	movlw	2
  4271  0029DA  ECD0  F01E         	call	_write_data
  4272  0029DE  0E10               	movlw	16
  4273  0029E0  ECD0  F01E         	call	_write_data
  4274                           
  4275                           ;ST7735_TFT.c: 383: write_command(0x13);
  4276  0029E4  0E13               	movlw	19
  4277  0029E6  ECD8  F01E         	call	_write_command
  4278                           
  4279                           ;ST7735_TFT.c: 384: delay_ms(10);
  4280  0029EA  0E00               	movlw	0
  4281  0029EC  6E24               	movwf	delay_ms@ms+1,c
  4282  0029EE  0E0A               	movlw	10
  4283  0029F0  6E23               	movwf	delay_ms@ms,c
  4284  0029F2  ECD5  F01B         	call	_delay_ms	;wreg free
  4285                           
  4286                           ;ST7735_TFT.c: 385: write_command(0x29);
  4287  0029F6  0E29               	movlw	41
  4288  0029F8  ECD8  F01E         	call	_write_command
  4289                           
  4290                           ;ST7735_TFT.c: 386: delay_ms(100);
  4291  0029FC  0E00               	movlw	0
  4292  0029FE  6E24               	movwf	delay_ms@ms+1,c
  4293  002A00  0E64               	movlw	100
  4294  002A02  6E23               	movwf	delay_ms@ms,c
  4295  002A04  ECD5  F01B         	call	_delay_ms	;wreg free
  4296  002A08  0012               	return		;funcret
  4297  002A0A                     __end_of_Rcmd3:
  4298                           	opt stack 0
  4299                           tblptru	equ	0xFF8
  4300                           tblptrh	equ	0xFF7
  4301                           tblptrl	equ	0xFF6
  4302                           tablat	equ	0xFF5
  4303                           prodl	equ	0xFF3
  4304                           intcon2	equ	0xFF1
  4305                           postinc0	equ	0xFEE
  4306                           wreg	equ	0xFE8
  4307                           postdec1	equ	0xFE5
  4308                           fsr1l	equ	0xFE1
  4309                           status	equ	0xFD8
  4310                           
  4311 ;; *************** function _Rcmd2red *****************
  4312 ;; Defined at:
  4313 ;;		line 361 in file "ST7735_TFT.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;		None
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;		None
  4318 ;; Return value:  Size  Location     Type
  4319 ;;		None               void
  4320 ;; Registers used:
  4321 ;;		wreg, status,2, cstack
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4331 ;;Total ram usage:        0 bytes
  4332 ;; Hardware stack levels used:    1
  4333 ;; Hardware stack levels required when called:    4
  4334 ;; This function calls:
  4335 ;;		_write_command
  4336 ;;		_write_data
  4337 ;; This function is called by:
  4338 ;;		_TFT_GreenTab_Initialize
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           	psect	text12
  4343  003A4A                     __ptext12:
  4344                           	opt stack 0
  4345  003A4A                     _Rcmd2red:
  4346                           	opt stack 24
  4347                           
  4348                           ;ST7735_TFT.c: 363: write_command(0x2A);
  4349                           
  4350                           ;incstack = 0
  4351  003A4A  0E2A               	movlw	42
  4352  003A4C  ECD8  F01E         	call	_write_command
  4353                           
  4354                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  4355  003A50  0E00               	movlw	0
  4356  003A52  ECD0  F01E         	call	_write_data
  4357  003A56  0E00               	movlw	0
  4358  003A58  ECD0  F01E         	call	_write_data
  4359                           
  4360                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  4361  003A5C  0E00               	movlw	0
  4362  003A5E  ECD0  F01E         	call	_write_data
  4363  003A62  0E7F               	movlw	127
  4364  003A64  ECD0  F01E         	call	_write_data
  4365                           
  4366                           ;ST7735_TFT.c: 366: write_command(0x2B);
  4367  003A68  0E2B               	movlw	43
  4368  003A6A  ECD8  F01E         	call	_write_command
  4369                           
  4370                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  4371  003A6E  0E00               	movlw	0
  4372  003A70  ECD0  F01E         	call	_write_data
  4373  003A74  0E00               	movlw	0
  4374  003A76  ECD0  F01E         	call	_write_data
  4375                           
  4376                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  4377  003A7A  0E00               	movlw	0
  4378  003A7C  ECD0  F01E         	call	_write_data
  4379  003A80  0E9F               	movlw	159
  4380  003A82  ECD0  F01E         	call	_write_data
  4381  003A86  0012               	return		;funcret
  4382  003A88                     __end_of_Rcmd2red:
  4383                           	opt stack 0
  4384                           tblptru	equ	0xFF8
  4385                           tblptrh	equ	0xFF7
  4386                           tblptrl	equ	0xFF6
  4387                           tablat	equ	0xFF5
  4388                           prodl	equ	0xFF3
  4389                           intcon2	equ	0xFF1
  4390                           postinc0	equ	0xFEE
  4391                           wreg	equ	0xFE8
  4392                           postdec1	equ	0xFE5
  4393                           fsr1l	equ	0xFE1
  4394                           status	equ	0xFD8
  4395                           
  4396 ;; *************** function _Rcmd1 *****************
  4397 ;; Defined at:
  4398 ;;		line 314 in file "ST7735_TFT.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;		None
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;		None
  4403 ;; Return value:  Size  Location     Type
  4404 ;;		None               void
  4405 ;; Registers used:
  4406 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4416 ;;Total ram usage:        0 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    4
  4419 ;; This function calls:
  4420 ;;		_delay_ms
  4421 ;;		_write_command
  4422 ;;		_write_data
  4423 ;; This function is called by:
  4424 ;;		_TFT_GreenTab_Initialize
  4425 ;;		_TFT_BlackTab_Initialize
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           	psect	text13
  4430  0024F6                     __ptext13:
  4431                           	opt stack 0
  4432  0024F6                     _Rcmd1:
  4433                           	opt stack 24
  4434                           
  4435                           ;ST7735_TFT.c: 316: write_command(0x01);
  4436                           
  4437                           ;incstack = 0
  4438  0024F6  0E01               	movlw	1
  4439  0024F8  ECD8  F01E         	call	_write_command
  4440                           
  4441                           ;ST7735_TFT.c: 317: delay_ms(150);
  4442  0024FC  0E00               	movlw	0
  4443  0024FE  6E24               	movwf	delay_ms@ms+1,c
  4444  002500  0E96               	movlw	150
  4445  002502  6E23               	movwf	delay_ms@ms,c
  4446  002504  ECD5  F01B         	call	_delay_ms	;wreg free
  4447                           
  4448                           ;ST7735_TFT.c: 318: write_command(0x11);
  4449  002508  0E11               	movlw	17
  4450  00250A  ECD8  F01E         	call	_write_command
  4451                           
  4452                           ;ST7735_TFT.c: 319: delay_ms(500);
  4453  00250E  0E01               	movlw	1
  4454  002510  6E24               	movwf	delay_ms@ms+1,c
  4455  002512  0EF4               	movlw	244
  4456  002514  6E23               	movwf	delay_ms@ms,c
  4457  002516  ECD5  F01B         	call	_delay_ms	;wreg free
  4458                           
  4459                           ;ST7735_TFT.c: 320: write_command(0xB1);
  4460  00251A  0EB1               	movlw	177
  4461  00251C  ECD8  F01E         	call	_write_command
  4462                           
  4463                           ;ST7735_TFT.c: 321: write_data(0x01);
  4464  002520  0E01               	movlw	1
  4465  002522  ECD0  F01E         	call	_write_data
  4466                           
  4467                           ;ST7735_TFT.c: 322: write_data(0x2C);
  4468  002526  0E2C               	movlw	44
  4469  002528  ECD0  F01E         	call	_write_data
  4470                           
  4471                           ;ST7735_TFT.c: 323: write_data(0x2D);
  4472  00252C  0E2D               	movlw	45
  4473  00252E  ECD0  F01E         	call	_write_data
  4474                           
  4475                           ;ST7735_TFT.c: 324: write_command(0xB2);
  4476  002532  0EB2               	movlw	178
  4477  002534  ECD8  F01E         	call	_write_command
  4478                           
  4479                           ;ST7735_TFT.c: 325: write_data(0x01);
  4480  002538  0E01               	movlw	1
  4481  00253A  ECD0  F01E         	call	_write_data
  4482                           
  4483                           ;ST7735_TFT.c: 326: write_data(0x2C);
  4484  00253E  0E2C               	movlw	44
  4485  002540  ECD0  F01E         	call	_write_data
  4486                           
  4487                           ;ST7735_TFT.c: 327: write_data(0x2D);
  4488  002544  0E2D               	movlw	45
  4489  002546  ECD0  F01E         	call	_write_data
  4490                           
  4491                           ;ST7735_TFT.c: 328: write_command(0xB3);
  4492  00254A  0EB3               	movlw	179
  4493  00254C  ECD8  F01E         	call	_write_command
  4494                           
  4495                           ;ST7735_TFT.c: 329: write_data(0x01);
  4496  002550  0E01               	movlw	1
  4497  002552  ECD0  F01E         	call	_write_data
  4498                           
  4499                           ;ST7735_TFT.c: 330: write_data(0x2C);
  4500  002556  0E2C               	movlw	44
  4501  002558  ECD0  F01E         	call	_write_data
  4502                           
  4503                           ;ST7735_TFT.c: 331: write_data(0x2D);
  4504  00255C  0E2D               	movlw	45
  4505  00255E  ECD0  F01E         	call	_write_data
  4506                           
  4507                           ;ST7735_TFT.c: 332: write_data(0x01);
  4508  002562  0E01               	movlw	1
  4509  002564  ECD0  F01E         	call	_write_data
  4510                           
  4511                           ;ST7735_TFT.c: 333: write_data(0x2C);
  4512  002568  0E2C               	movlw	44
  4513  00256A  ECD0  F01E         	call	_write_data
  4514                           
  4515                           ;ST7735_TFT.c: 334: write_data(0x2D);
  4516  00256E  0E2D               	movlw	45
  4517  002570  ECD0  F01E         	call	_write_data
  4518                           
  4519                           ;ST7735_TFT.c: 335: write_command(0xB4);
  4520  002574  0EB4               	movlw	180
  4521  002576  ECD8  F01E         	call	_write_command
  4522                           
  4523                           ;ST7735_TFT.c: 336: write_data(0x07);
  4524  00257A  0E07               	movlw	7
  4525  00257C  ECD0  F01E         	call	_write_data
  4526                           
  4527                           ;ST7735_TFT.c: 337: write_command(0xC0);
  4528  002580  0EC0               	movlw	192
  4529  002582  ECD8  F01E         	call	_write_command
  4530                           
  4531                           ;ST7735_TFT.c: 338: write_data(0xA2);
  4532  002586  0EA2               	movlw	162
  4533  002588  ECD0  F01E         	call	_write_data
  4534                           
  4535                           ;ST7735_TFT.c: 339: write_data(0x02);
  4536  00258C  0E02               	movlw	2
  4537  00258E  ECD0  F01E         	call	_write_data
  4538                           
  4539                           ;ST7735_TFT.c: 340: write_data(0x84);
  4540  002592  0E84               	movlw	132
  4541  002594  ECD0  F01E         	call	_write_data
  4542                           
  4543                           ;ST7735_TFT.c: 341: write_command(0xC1);
  4544  002598  0EC1               	movlw	193
  4545  00259A  ECD8  F01E         	call	_write_command
  4546                           
  4547                           ;ST7735_TFT.c: 342: write_data(0xC5);
  4548  00259E  0EC5               	movlw	197
  4549  0025A0  ECD0  F01E         	call	_write_data
  4550                           
  4551                           ;ST7735_TFT.c: 343: write_command(0xC2);
  4552  0025A4  0EC2               	movlw	194
  4553  0025A6  ECD8  F01E         	call	_write_command
  4554                           
  4555                           ;ST7735_TFT.c: 344: write_data(0x0A);
  4556  0025AA  0E0A               	movlw	10
  4557  0025AC  ECD0  F01E         	call	_write_data
  4558                           
  4559                           ;ST7735_TFT.c: 345: write_data(0x00);
  4560  0025B0  0E00               	movlw	0
  4561  0025B2  ECD0  F01E         	call	_write_data
  4562                           
  4563                           ;ST7735_TFT.c: 346: write_command(0xC3);
  4564  0025B6  0EC3               	movlw	195
  4565  0025B8  ECD8  F01E         	call	_write_command
  4566                           
  4567                           ;ST7735_TFT.c: 347: write_data(0x8A);
  4568  0025BC  0E8A               	movlw	138
  4569  0025BE  ECD0  F01E         	call	_write_data
  4570                           
  4571                           ;ST7735_TFT.c: 348: write_data(0x2A);
  4572  0025C2  0E2A               	movlw	42
  4573  0025C4  ECD0  F01E         	call	_write_data
  4574                           
  4575                           ;ST7735_TFT.c: 349: write_command(0xC4);
  4576  0025C8  0EC4               	movlw	196
  4577  0025CA  ECD8  F01E         	call	_write_command
  4578                           
  4579                           ;ST7735_TFT.c: 350: write_data(0x8A);
  4580  0025CE  0E8A               	movlw	138
  4581  0025D0  ECD0  F01E         	call	_write_data
  4582                           
  4583                           ;ST7735_TFT.c: 351: write_data(0xEE);
  4584  0025D4  0EEE               	movlw	238
  4585  0025D6  ECD0  F01E         	call	_write_data
  4586                           
  4587                           ;ST7735_TFT.c: 352: write_command(0xC5);
  4588  0025DA  0EC5               	movlw	197
  4589  0025DC  ECD8  F01E         	call	_write_command
  4590                           
  4591                           ;ST7735_TFT.c: 353: write_data(0x0E);
  4592  0025E0  0E0E               	movlw	14
  4593  0025E2  ECD0  F01E         	call	_write_data
  4594                           
  4595                           ;ST7735_TFT.c: 354: write_command(0x20);
  4596  0025E6  0E20               	movlw	32
  4597  0025E8  ECD8  F01E         	call	_write_command
  4598                           
  4599                           ;ST7735_TFT.c: 355: write_command(0x36);
  4600  0025EC  0E36               	movlw	54
  4601  0025EE  ECD8  F01E         	call	_write_command
  4602                           
  4603                           ;ST7735_TFT.c: 356: write_data(0xC8);
  4604  0025F2  0EC8               	movlw	200
  4605  0025F4  ECD0  F01E         	call	_write_data
  4606                           
  4607                           ;ST7735_TFT.c: 357: write_command(0x3A);
  4608  0025F8  0E3A               	movlw	58
  4609  0025FA  ECD8  F01E         	call	_write_command
  4610                           
  4611                           ;ST7735_TFT.c: 358: write_data(0x05);
  4612  0025FE  0E05               	movlw	5
  4613  002600  ECD0  F01E         	call	_write_data
  4614  002604  0012               	return		;funcret
  4615  002606                     __end_of_Rcmd1:
  4616                           	opt stack 0
  4617                           tblptru	equ	0xFF8
  4618                           tblptrh	equ	0xFF7
  4619                           tblptrl	equ	0xFF6
  4620                           tablat	equ	0xFF5
  4621                           prodl	equ	0xFF3
  4622                           intcon2	equ	0xFF1
  4623                           postinc0	equ	0xFEE
  4624                           wreg	equ	0xFE8
  4625                           postdec1	equ	0xFE5
  4626                           fsr1l	equ	0xFE1
  4627                           status	equ	0xFD8
  4628                           
  4629 ;; *************** function _LCD_Reset *****************
  4630 ;; Defined at:
  4631 ;;		line 250 in file "ST7735_TFT.c"
  4632 ;; Parameters:    Size  Location     Type
  4633 ;;		None
  4634 ;; Auto vars:     Size  Location     Type
  4635 ;;		None
  4636 ;; Return value:  Size  Location     Type
  4637 ;;		None               void
  4638 ;; Registers used:
  4639 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4640 ;; Tracked objects:
  4641 ;;		On entry : 0/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4649 ;;Total ram usage:        0 bytes
  4650 ;; Hardware stack levels used:    1
  4651 ;; Hardware stack levels required when called:    4
  4652 ;; This function calls:
  4653 ;;		_delay_ms
  4654 ;; This function is called by:
  4655 ;;		_Initialize_Screen
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           	psect	text14
  4660  003D7C                     __ptext14:
  4661                           	opt stack 0
  4662  003D7C                     _LCD_Reset:
  4663                           	opt stack 25
  4664                           
  4665                           ;ST7735_TFT.c: 252: PORTCbits.RC1 = 0;
  4666                           
  4667                           ;incstack = 0
  4668  003D7C  9282               	bcf	3970,1,c	;volatile
  4669                           
  4670                           ;ST7735_TFT.c: 253: delay_ms(100);
  4671  003D7E  0E00               	movlw	0
  4672  003D80  6E24               	movwf	delay_ms@ms+1,c
  4673  003D82  0E64               	movlw	100
  4674  003D84  6E23               	movwf	delay_ms@ms,c
  4675  003D86  ECD5  F01B         	call	_delay_ms	;wreg free
  4676                           
  4677                           ;ST7735_TFT.c: 254: PORTCbits.RC1 = 1;
  4678  003D8A  8282               	bsf	3970,1,c	;volatile
  4679  003D8C  0012               	return		;funcret
  4680  003D8E                     __end_of_LCD_Reset:
  4681                           	opt stack 0
  4682                           tblptru	equ	0xFF8
  4683                           tblptrh	equ	0xFF7
  4684                           tblptrl	equ	0xFF6
  4685                           tablat	equ	0xFF5
  4686                           prodl	equ	0xFF3
  4687                           intcon2	equ	0xFF1
  4688                           postinc0	equ	0xFEE
  4689                           wreg	equ	0xFE8
  4690                           postdec1	equ	0xFE5
  4691                           fsr1l	equ	0xFE1
  4692                           status	equ	0xFD8
  4693                           
  4694 ;; *************** function _delay_ms *****************
  4695 ;; Defined at:
  4696 ;;		line 97 in file "ST7735_TFT.c"
  4697 ;; Parameters:    Size  Location     Type
  4698 ;;  ms              2   34[COMRAM] int 
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;  count           2   38[COMRAM] int 
  4701 ;; Return value:  Size  Location     Type
  4702 ;;		None               void
  4703 ;; Registers used:
  4704 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4705 ;; Tracked objects:
  4706 ;;		On entry : 0/0
  4707 ;;		On exit  : 0/0
  4708 ;;		Unchanged: 0/0
  4709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4710 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4711 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4712 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4714 ;;Total ram usage:        6 bytes
  4715 ;; Hardware stack levels used:    1
  4716 ;; Hardware stack levels required when called:    3
  4717 ;; This function calls:
  4718 ;;		___wmul
  4719 ;; This function is called by:
  4720 ;;		_LCD_Reset
  4721 ;;		_Rcmd1
  4722 ;;		_Rcmd3
  4723 ;;		_Bcmd
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           	psect	text15
  4728  0037AA                     __ptext15:
  4729                           	opt stack 0
  4730  0037AA                     _delay_ms:
  4731                           	opt stack 24
  4732                           
  4733                           ;ST7735_TFT.c: 103: int count;
  4734                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  4735                           
  4736                           ;incstack = 0
  4737  0037AA  C023  F01D         	movff	delay_ms@ms,___wmul@multiplier
  4738  0037AE  C024  F01E         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4739  0037B2  0E00               	movlw	0
  4740  0037B4  6E20               	movwf	___wmul@multiplicand+1,c
  4741  0037B6  0EFA               	movlw	250
  4742  0037B8  6E1F               	movwf	___wmul@multiplicand,c
  4743  0037BA  EC24  F01E         	call	___wmul	;wreg free
  4744  0037BE  C01D  F027         	movff	?___wmul,delay_ms@count
  4745  0037C2  C01E  F028         	movff	?___wmul+1,delay_ms@count+1
  4746                           
  4747                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  4748  0037C6  C027  F025         	movff	delay_ms@count,??_delay_ms
  4749  0037CA  C028  F026         	movff	delay_ms@count+1,??_delay_ms+1
  4750  0037CE  1E25               	comf	??_delay_ms,f,c
  4751  0037D0  1E26               	comf	??_delay_ms+1,f,c
  4752  0037D2  4A25               	infsnz	??_delay_ms,f,c
  4753  0037D4  2A26               	incf	??_delay_ms+1,f,c
  4754  0037D6  0EFF               	movlw	255
  4755  0037D8  2425               	addwf	??_delay_ms,w,c
  4756  0037DA  6E27               	movwf	delay_ms@count,c
  4757  0037DC  0EFF               	movlw	255
  4758  0037DE  2026               	addwfc	??_delay_ms+1,w,c
  4759  0037E0  6E28               	movwf	delay_ms@count+1,c
  4760                           
  4761                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  4762  0037E2  0EB8               	movlw	184
  4763  0037E4  6EB1               	movwf	4017,c	;volatile
  4764                           
  4765                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  4766  0037E6  C027  FFD6         	movff	delay_ms@count,4054	;volatile
  4767                           
  4768                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  4769  0037EA  5028               	movf	delay_ms@count+1,w,c
  4770  0037EC  6ED7               	movwf	4055,c	;volatile
  4771                           
  4772                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  4773  0037EE  92A1               	bcf	4001,1,c	;volatile
  4774                           
  4775                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  4776  0037F0  80B1               	bsf	4017,0,c	;volatile
  4777                           
  4778                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  4779  0037F2  D000               	goto	l151
  4780  0037F4                     l151:
  4781  0037F4  A2A1               	btfss	4001,1,c	;volatile
  4782  0037F6  D7FE               	goto	l151
  4783                           
  4784                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  4785  0037F8  90B1               	bcf	4017,0,c	;volatile
  4786  0037FA  0012               	return		;funcret
  4787  0037FC                     __end_of_delay_ms:
  4788                           	opt stack 0
  4789                           tblptru	equ	0xFF8
  4790                           tblptrh	equ	0xFF7
  4791                           tblptrl	equ	0xFF6
  4792                           tablat	equ	0xFF5
  4793                           prodl	equ	0xFF3
  4794                           intcon2	equ	0xFF1
  4795                           postinc0	equ	0xFEE
  4796                           wreg	equ	0xFE8
  4797                           postdec1	equ	0xFE5
  4798                           fsr1l	equ	0xFE1
  4799                           status	equ	0xFD8
  4800                           
  4801 ;; *************** function _Init_TRIS *****************
  4802 ;; Defined at:
  4803 ;;		line 448 in file "Lab9p1.c"
  4804 ;; Parameters:    Size  Location     Type
  4805 ;;		None
  4806 ;; Auto vars:     Size  Location     Type
  4807 ;;		None
  4808 ;; Return value:  Size  Location     Type
  4809 ;;		None               void
  4810 ;; Registers used:
  4811 ;;		wreg, status,2
  4812 ;; Tracked objects:
  4813 ;;		On entry : 0/0
  4814 ;;		On exit  : 0/0
  4815 ;;		Unchanged: 0/0
  4816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4821 ;;Total ram usage:        0 bytes
  4822 ;; Hardware stack levels used:    1
  4823 ;; Hardware stack levels required when called:    2
  4824 ;; This function calls:
  4825 ;;		Nothing
  4826 ;; This function is called by:
  4827 ;;		_main
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           	psect	text16
  4832  003D12                     __ptext16:
  4833                           	opt stack 0
  4834  003D12                     _Init_TRIS:
  4835                           	opt stack 28
  4836                           
  4837                           ;Lab9p1.c: 450: TRISA = 0b00011001;
  4838                           
  4839                           ;incstack = 0
  4840  003D12  0E19               	movlw	25
  4841  003D14  6E92               	movwf	3986,c	;volatile
  4842                           
  4843                           ;Lab9p1.c: 451: TRISB = 0b00000111;
  4844  003D16  0E07               	movlw	7
  4845  003D18  6E93               	movwf	3987,c	;volatile
  4846                           
  4847                           ;Lab9p1.c: 452: TRISC = 0x00;
  4848  003D1A  0E00               	movlw	0
  4849  003D1C  6E94               	movwf	3988,c	;volatile
  4850                           
  4851                           ;Lab9p1.c: 453: TRISD = 0x00;
  4852  003D1E  0E00               	movlw	0
  4853  003D20  6E95               	movwf	3989,c	;volatile
  4854                           
  4855                           ;Lab9p1.c: 454: TRISE = 0x00;
  4856  003D22  0E00               	movlw	0
  4857  003D24  6E96               	movwf	3990,c	;volatile
  4858  003D26  0012               	return		;funcret
  4859  003D28                     __end_of_Init_TRIS:
  4860                           	opt stack 0
  4861                           tblptru	equ	0xFF8
  4862                           tblptrh	equ	0xFF7
  4863                           tblptrl	equ	0xFF6
  4864                           tablat	equ	0xFF5
  4865                           prodl	equ	0xFF3
  4866                           intcon2	equ	0xFF1
  4867                           postinc0	equ	0xFEE
  4868                           wreg	equ	0xFE8
  4869                           postdec1	equ	0xFE5
  4870                           fsr1l	equ	0xFE1
  4871                           status	equ	0xFD8
  4872                           
  4873 ;; *************** function _Init_ADC *****************
  4874 ;; Defined at:
  4875 ;;		line 441 in file "Lab9p1.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;		None
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;		None
  4880 ;; Return value:  Size  Location     Type
  4881 ;;		None               void
  4882 ;; Registers used:
  4883 ;;		wreg, status,2
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4893 ;;Total ram usage:        0 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    2
  4896 ;; This function calls:
  4897 ;;		Nothing
  4898 ;; This function is called by:
  4899 ;;		_main
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           	psect	text17
  4904  003DC0                     __ptext17:
  4905                           	opt stack 0
  4906  003DC0                     _Init_ADC:
  4907                           	opt stack 28
  4908                           
  4909                           ;Lab9p1.c: 443: ADCON0 = 0b00000001;
  4910                           
  4911                           ;incstack = 0
  4912  003DC0  0E01               	movlw	1
  4913  003DC2  6EC2               	movwf	4034,c	;volatile
  4914                           
  4915                           ;Lab9p1.c: 444: ADCON1 = 0b00001110;
  4916  003DC4  0E0E               	movlw	14
  4917  003DC6  6EC1               	movwf	4033,c	;volatile
  4918                           
  4919                           ;Lab9p1.c: 445: ADCON2 = 0xA9;
  4920  003DC8  0EA9               	movlw	169
  4921  003DCA  6EC0               	movwf	4032,c	;volatile
  4922  003DCC  0012               	return		;funcret
  4923  003DCE                     __end_of_Init_ADC:
  4924                           	opt stack 0
  4925                           tblptru	equ	0xFF8
  4926                           tblptrh	equ	0xFF7
  4927                           tblptrl	equ	0xFF6
  4928                           tablat	equ	0xFF5
  4929                           prodl	equ	0xFF3
  4930                           intcon2	equ	0xFF1
  4931                           postinc0	equ	0xFEE
  4932                           wreg	equ	0xFE8
  4933                           postdec1	equ	0xFE5
  4934                           fsr1l	equ	0xFE1
  4935                           status	equ	0xFD8
  4936                           
  4937 ;; *************** function _Day_Mode *****************
  4938 ;; Defined at:
  4939 ;;		line 332 in file "Lab9p1.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;		None
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;		None
  4944 ;; Return value:  Size  Location     Type
  4945 ;;		None               void
  4946 ;; Registers used:
  4947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4957 ;;Total ram usage:        0 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:   12
  4960 ;; This function calls:
  4961 ;;		_PED_Control
  4962 ;;		_Set_EW
  4963 ;;		_Set_EWLT
  4964 ;;		_Set_NS
  4965 ;;		_Set_NSLT
  4966 ;;		_WAIT_N_SEC
  4967 ;; This function is called by:
  4968 ;;		_main
  4969 ;; This function uses a non-reentrant model
  4970 ;;
  4971                           
  4972                           	psect	text18
  4973  002E74                     __ptext18:
  4974                           	opt stack 0
  4975  002E74                     _Day_Mode:
  4976                           	opt stack 18
  4977                           
  4978                           ;Lab9p1.c: 334: PORTBbits.RB7 = 0;
  4979                           
  4980                           ;incstack = 0
  4981  002E74  9E81               	bcf	3969,7,c	;volatile
  4982                           
  4983                           ;Lab9p1.c: 335: Act_Mode_Txt[0] = 'D';
  4984  002E76  0E44               	movlw	68
  4985  002E78  0100               	movlb	0	; () banked
  4986  002E7A  6FD1               	movwf	_Act_Mode_Txt& (0+255),b
  4987  002E7C  D000               	goto	l7350
  4988  002E7E                     l7350:
  4989                           
  4990                           ;Lab9p1.c: 338: {
  4991                           ;Lab9p1.c: 339: Set_NSLT (1);
  4992  002E7E  0E01               	movlw	1
  4993  002E80  EC73  F01C         	call	_Set_NSLT
  4994                           
  4995                           ;Lab9p1.c: 340: Set_EW (1);
  4996  002E84  0E01               	movlw	1
  4997  002E86  ECDF  F01C         	call	_Set_EW
  4998                           
  4999                           ;Lab9p1.c: 341: Set_EWLT (1);
  5000  002E8A  0E01               	movlw	1
  5001  002E8C  ECBB  F01C         	call	_Set_EWLT
  5002                           
  5003                           ;Lab9p1.c: 342: Set_NS (2);
  5004  002E90  0E02               	movlw	2
  5005  002E92  EC97  F01C         	call	_Set_NS
  5006                           
  5007                           ;Lab9p1.c: 344: if (NSPED_SW == 1)
  5008  002E96  0100               	movlb	0	; () banked
  5009  002E98  058E               	decf	_NSPED_SW& (0+255),w,b
  5010  002E9A  A4D8               	btfss	status,2,c
  5011  002E9C  D005               	goto	l413
  5012                           
  5013                           ; BSR set to: 0
  5014                           ;Lab9p1.c: 345: {
  5015                           ;Lab9p1.c: 346: PED_Control(0, 9);
  5016  002E9E  0E09               	movlw	9
  5017  002EA0  6E4B               	movwf	PED_Control@Num_Sec,c
  5018  002EA2  0E00               	movlw	0
  5019  002EA4  EC81  F01D         	call	_PED_Control
  5020  002EA8                     l413:
  5021                           
  5022                           ;Lab9p1.c: 347: }
  5023                           ;Lab9p1.c: 348: WAIT_N_SEC (8);
  5024  002EA8  0E08               	movlw	8
  5025  002EAA  EC9B  F01D         	call	_WAIT_N_SEC
  5026                           
  5027                           ;Lab9p1.c: 350: Set_NS (3);
  5028  002EAE  0E03               	movlw	3
  5029  002EB0  EC97  F01C         	call	_Set_NS
  5030                           
  5031                           ;Lab9p1.c: 351: WAIT_N_SEC (3);
  5032  002EB4  0E03               	movlw	3
  5033  002EB6  EC9B  F01D         	call	_WAIT_N_SEC
  5034                           
  5035                           ;Lab9p1.c: 353: Set_NS (1);
  5036  002EBA  0E01               	movlw	1
  5037  002EBC  EC97  F01C         	call	_Set_NS
  5038                           
  5039                           ;Lab9p1.c: 355: if (PORTAbits.RA4 == 1)
  5040  002EC0  A880               	btfss	3968,4,c	;volatile
  5041  002EC2  D010               	goto	l7376
  5042                           
  5043                           ;Lab9p1.c: 356: {
  5044                           ;Lab9p1.c: 357: Set_EWLT (2);
  5045  002EC4  0E02               	movlw	2
  5046  002EC6  ECBB  F01C         	call	_Set_EWLT
  5047                           
  5048                           ;Lab9p1.c: 358: WAIT_N_SEC (7);
  5049  002ECA  0E07               	movlw	7
  5050  002ECC  EC9B  F01D         	call	_WAIT_N_SEC
  5051                           
  5052                           ;Lab9p1.c: 359: Set_EWLT (3);
  5053  002ED0  0E03               	movlw	3
  5054  002ED2  ECBB  F01C         	call	_Set_EWLT
  5055                           
  5056                           ;Lab9p1.c: 360: WAIT_N_SEC (3);
  5057  002ED6  0E03               	movlw	3
  5058  002ED8  EC9B  F01D         	call	_WAIT_N_SEC
  5059                           
  5060                           ;Lab9p1.c: 361: Set_EWLT (1);
  5061  002EDC  0E01               	movlw	1
  5062  002EDE  ECBB  F01C         	call	_Set_EWLT
  5063  002EE2  D000               	goto	l7376
  5064  002EE4                     l7376:
  5065                           
  5066                           ;Lab9p1.c: 362: }
  5067                           ;Lab9p1.c: 364: Set_EW (2);
  5068  002EE4  0E02               	movlw	2
  5069  002EE6  ECDF  F01C         	call	_Set_EW
  5070                           
  5071                           ;Lab9p1.c: 366: if (EWPED_SW == 1)
  5072  002EEA  0100               	movlb	0	; () banked
  5073  002EEC  058D               	decf	_EWPED_SW& (0+255),w,b
  5074  002EEE  A4D8               	btfss	status,2,c
  5075  002EF0  D005               	goto	l415
  5076                           
  5077                           ; BSR set to: 0
  5078                           ;Lab9p1.c: 367: {
  5079                           ;Lab9p1.c: 368: PED_Control(1, 8);
  5080  002EF2  0E08               	movlw	8
  5081  002EF4  6E4B               	movwf	PED_Control@Num_Sec,c
  5082  002EF6  0E01               	movlw	1
  5083  002EF8  EC81  F01D         	call	_PED_Control
  5084  002EFC                     l415:
  5085                           
  5086                           ;Lab9p1.c: 369: }
  5087                           ;Lab9p1.c: 370: WAIT_N_SEC (6);
  5088  002EFC  0E06               	movlw	6
  5089  002EFE  EC9B  F01D         	call	_WAIT_N_SEC
  5090                           
  5091                           ;Lab9p1.c: 372: Set_EW (3);
  5092  002F02  0E03               	movlw	3
  5093  002F04  ECDF  F01C         	call	_Set_EW
  5094                           
  5095                           ;Lab9p1.c: 373: WAIT_N_SEC (3);
  5096  002F08  0E03               	movlw	3
  5097  002F0A  EC9B  F01D         	call	_WAIT_N_SEC
  5098                           
  5099                           ;Lab9p1.c: 375: Set_EW (1);
  5100  002F0E  0E01               	movlw	1
  5101  002F10  ECDF  F01C         	call	_Set_EW
  5102                           
  5103                           ;Lab9p1.c: 377: if (PORTAbits.RA3 == 1)
  5104  002F14  A680               	btfss	3968,3,c	;volatile
  5105  002F16  D011               	goto	l419
  5106                           
  5107                           ;Lab9p1.c: 378: {
  5108                           ;Lab9p1.c: 379: Set_NSLT (2);
  5109  002F18  0E02               	movlw	2
  5110  002F1A  EC73  F01C         	call	_Set_NSLT
  5111                           
  5112                           ;Lab9p1.c: 380: WAIT_N_SEC (6);
  5113  002F1E  0E06               	movlw	6
  5114  002F20  EC9B  F01D         	call	_WAIT_N_SEC
  5115                           
  5116                           ;Lab9p1.c: 382: Set_NSLT (3);
  5117  002F24  0E03               	movlw	3
  5118  002F26  EC73  F01C         	call	_Set_NSLT
  5119                           
  5120                           ;Lab9p1.c: 383: WAIT_N_SEC (3);
  5121  002F2A  0E03               	movlw	3
  5122  002F2C  EC9B  F01D         	call	_WAIT_N_SEC
  5123                           
  5124                           ;Lab9p1.c: 385: Set_NSLT (1);
  5125  002F30  0E01               	movlw	1
  5126  002F32  EC73  F01C         	call	_Set_NSLT
  5127                           
  5128                           ;Lab9p1.c: 386: }
  5129                           ;Lab9p1.c: 387: break;
  5130  002F36  D001               	goto	l419
  5131  002F38  D7A2               	goto	l7350
  5132  002F3A                     l419:
  5133  002F3A  0012               	return		;funcret
  5134  002F3C                     __end_of_Day_Mode:
  5135                           	opt stack 0
  5136                           tblptru	equ	0xFF8
  5137                           tblptrh	equ	0xFF7
  5138                           tblptrl	equ	0xFF6
  5139                           tablat	equ	0xFF5
  5140                           prodl	equ	0xFF3
  5141                           intcon2	equ	0xFF1
  5142                           postinc0	equ	0xFEE
  5143                           wreg	equ	0xFE8
  5144                           postdec1	equ	0xFE5
  5145                           fsr1l	equ	0xFE1
  5146                           status	equ	0xFD8
  5147                           
  5148 ;; *************** function _WAIT_N_SEC *****************
  5149 ;; Defined at:
  5150 ;;		line 500 in file "Lab9p1.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;  seconds         1    wreg     unsigned char 
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;  seconds         1   93[COMRAM] unsigned char 
  5155 ;;  i               1   94[COMRAM] unsigned char 
  5156 ;; Return value:  Size  Location     Type
  5157 ;;		None               void
  5158 ;; Registers used:
  5159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5160 ;; Tracked objects:
  5161 ;;		On entry : 0/0
  5162 ;;		On exit  : 0/0
  5163 ;;		Unchanged: 0/0
  5164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5166 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5168 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5169 ;;Total ram usage:        2 bytes
  5170 ;; Hardware stack levels used:    1
  5171 ;; Hardware stack levels required when called:   11
  5172 ;; This function calls:
  5173 ;;		_WAIT_1_SEC
  5174 ;;		_update_LCD_count
  5175 ;; This function is called by:
  5176 ;;		_Day_Mode
  5177 ;;		_Night_Mode
  5178 ;; This function uses a non-reentrant model
  5179 ;;
  5180                           
  5181                           	psect	text19
  5182  003B36                     __ptext19:
  5183                           	opt stack 0
  5184  003B36                     _WAIT_N_SEC:
  5185                           	opt stack 18
  5186                           
  5187                           ;incstack = 0
  5188                           ;WAIT_N_SEC@seconds stored from wreg
  5189  003B36  6E5E               	movwf	WAIT_N_SEC@seconds,c
  5190                           
  5191                           ;Lab9p1.c: 502: char i;
  5192                           ;Lab9p1.c: 503: for (i = seconds; i > 0; i--)
  5193  003B38  C05E  F05F         	movff	WAIT_N_SEC@seconds,WAIT_N_SEC@i
  5194  003B3C                     l7208:
  5195  003B3C  505F               	movf	WAIT_N_SEC@i,w,c
  5196  003B3E  B4D8               	btfsc	status,2,c
  5197  003B40  D00C               	goto	l7218
  5198  003B42  D001               	goto	l7212
  5199  003B44  D00A               	goto	l7218
  5200  003B46                     l7212:
  5201                           
  5202                           ;Lab9p1.c: 504: {
  5203                           ;Lab9p1.c: 505: update_LCD_count(direction, i);
  5204  003B46  C05F  F048         	movff	WAIT_N_SEC@i,update_LCD_count@count
  5205  003B4A  0100               	movlb	0	; () banked
  5206  003B4C  5194               	movf	_direction& (0+255),w,b
  5207  003B4E  EC5F  F010         	call	_update_LCD_count
  5208                           
  5209                           ;Lab9p1.c: 506: WAIT_1_SEC();
  5210  003B52  EC0A  F01A         	call	_WAIT_1_SEC	;wreg free
  5211  003B56  065F               	decf	WAIT_N_SEC@i,f,c
  5212  003B58  D7F1               	goto	l7208
  5213  003B5A                     l7218:
  5214                           
  5215                           ;Lab9p1.c: 507: }
  5216                           ;Lab9p1.c: 508: update_LCD_count(direction, 0);
  5217  003B5A  0E00               	movlw	0
  5218  003B5C  6E48               	movwf	update_LCD_count@count,c
  5219  003B5E  0100               	movlb	0	; () banked
  5220  003B60  5194               	movf	_direction& (0+255),w,b
  5221  003B62  EC5F  F010         	call	_update_LCD_count
  5222  003B66  0012               	return		;funcret
  5223  003B68                     __end_of_WAIT_N_SEC:
  5224                           	opt stack 0
  5225                           tblptru	equ	0xFF8
  5226                           tblptrh	equ	0xFF7
  5227                           tblptrl	equ	0xFF6
  5228                           tablat	equ	0xFF5
  5229                           prodl	equ	0xFF3
  5230                           intcon2	equ	0xFF1
  5231                           postinc0	equ	0xFEE
  5232                           wreg	equ	0xFE8
  5233                           postdec1	equ	0xFE5
  5234                           fsr1l	equ	0xFE1
  5235                           status	equ	0xFD8
  5236                           
  5237 ;; *************** function _update_LCD_count *****************
  5238 ;; Defined at:
  5239 ;;		line 648 in file "Lab9p1.c"
  5240 ;; Parameters:    Size  Location     Type
  5241 ;;  direction       1    wreg     unsigned char 
  5242 ;;  count           1   71[COMRAM] unsigned char 
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;  direction       1   73[COMRAM] unsigned char 
  5245 ;; Return value:  Size  Location     Type
  5246 ;;		None               void
  5247 ;; Registers used:
  5248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5249 ;; Tracked objects:
  5250 ;;		On entry : 0/0
  5251 ;;		On exit  : 0/0
  5252 ;;		Unchanged: 0/0
  5253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5254 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5255 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5256 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;Total ram usage:        3 bytes
  5259 ;; Hardware stack levels used:    1
  5260 ;; Hardware stack levels required when called:    9
  5261 ;; This function calls:
  5262 ;;		___awdiv
  5263 ;;		___awmod
  5264 ;;		_drawtext
  5265 ;; This function is called by:
  5266 ;;		_WAIT_N_SEC
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           	psect	text20
  5271  0020BE                     __ptext20:
  5272                           	opt stack 0
  5273  0020BE                     _update_LCD_count:
  5274                           	opt stack 19
  5275                           
  5276                           ;incstack = 0
  5277                           ;update_LCD_count@direction stored from wreg
  5278  0020BE  6E4A               	movwf	update_LCD_count@direction,c
  5279                           
  5280                           ;Lab9p1.c: 650: PORTD = (PORTD & 0x80) | array[count];
  5281  0020C0  5048               	movf	update_LCD_count@count,w,c
  5282  0020C2  0D01               	mullw	1
  5283  0020C4  0EB4               	movlw	low _array
  5284  0020C6  24F3               	addwf	prodl,w,c
  5285  0020C8  6ED9               	movwf	fsr2l,c
  5286  0020CA  0E00               	movlw	high _array
  5287  0020CC  20F4               	addwfc	prodh,w,c
  5288  0020CE  6EDA               	movwf	fsr2h,c
  5289  0020D0  50DF               	movf	indf2,w,c
  5290  0020D2  6E49               	movwf	??_update_LCD_count& (0+255),c
  5291  0020D4  5083               	movf	3971,w,c	;volatile
  5292  0020D6  0B80               	andlw	128
  5293  0020D8  1049               	iorwf	??_update_LCD_count,w,c
  5294  0020DA  6E83               	movwf	3971,c	;volatile
  5295                           
  5296                           ;Lab9p1.c: 651: switch (direction)
  5297  0020DC  D0B6               	goto	l7040
  5298  0020DE                     l7022:
  5299                           
  5300                           ;Lab9p1.c: 654: EW_Count[0] = count/10 + '0';
  5301  0020DE  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  5302  0020E2  6A16               	clrf	___awdiv@dividend+1,c
  5303  0020E4  0E00               	movlw	0
  5304  0020E6  6E18               	movwf	___awdiv@divisor+1,c
  5305  0020E8  0E0A               	movlw	10
  5306  0020EA  6E17               	movwf	___awdiv@divisor,c
  5307  0020EC  ECF1  F018         	call	___awdiv	;wreg free
  5308  0020F0  5015               	movf	?___awdiv,w,c
  5309  0020F2  0F30               	addlw	48
  5310  0020F4  0100               	movlb	0	; () banked
  5311  0020F6  6FC2               	movwf	_EW_Count& (0+255),b
  5312                           
  5313                           ;Lab9p1.c: 655: EW_Count[1] = count%10 + '0';
  5314  0020F8  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5315  0020FC  6A10               	clrf	___awmod@dividend+1,c
  5316  0020FE  0E00               	movlw	0
  5317  002100  6E12               	movwf	___awmod@divisor+1,c
  5318  002102  0E0A               	movlw	10
  5319  002104  6E11               	movwf	___awmod@divisor,c
  5320  002106  EC90  F01A         	call	___awmod	;wreg free
  5321  00210A  500F               	movf	?___awmod,w,c
  5322  00210C  0F30               	addlw	48
  5323  00210E  0100               	movlb	0	; () banked
  5324  002110  6FC3               	movwf	(_EW_Count+1)& (0+255),b
  5325                           
  5326                           ; BSR set to: 0
  5327                           ;Lab9p1.c: 656: drawtext(100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  5328  002112  0E1E               	movlw	30
  5329  002114  6E37               	movwf	drawtext@y,c
  5330  002116  0EC2               	movlw	low _EW_Count
  5331  002118  6E38               	movwf	drawtext@_text,c
  5332  00211A  0E00               	movlw	high _EW_Count
  5333  00211C  6E39               	movwf	drawtext@_text+1,c
  5334  00211E  0E07               	movlw	7
  5335  002120  6E3B               	movwf	drawtext@color+1,c
  5336  002122  683A               	setf	drawtext@color,c
  5337  002124  0E00               	movlw	0
  5338  002126  6E3D               	movwf	drawtext@bg+1,c
  5339  002128  0E00               	movlw	0
  5340  00212A  6E3C               	movwf	drawtext@bg,c
  5341  00212C  0E02               	movlw	2
  5342  00212E  6E3E               	movwf	drawtext@size,c
  5343  002130  0E64               	movlw	100
  5344  002132  EC5D  F016         	call	_drawtext
  5345                           
  5346                           ;Lab9p1.c: 657: break;
  5347  002136  D097               	goto	l522
  5348  002138                     l7026:
  5349                           
  5350                           ;Lab9p1.c: 660: NS_Count[0] = count/10 + '0';
  5351  002138  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  5352  00213C  6A16               	clrf	___awdiv@dividend+1,c
  5353  00213E  0E00               	movlw	0
  5354  002140  6E18               	movwf	___awdiv@divisor+1,c
  5355  002142  0E0A               	movlw	10
  5356  002144  6E17               	movwf	___awdiv@divisor,c
  5357  002146  ECF1  F018         	call	___awdiv	;wreg free
  5358  00214A  5015               	movf	?___awdiv,w,c
  5359  00214C  0F30               	addlw	48
  5360  00214E  0100               	movlb	0	; () banked
  5361  002150  6FC8               	movwf	_NS_Count& (0+255),b
  5362                           
  5363                           ;Lab9p1.c: 661: NS_Count[1] = count%10 + '0';
  5364  002152  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5365  002156  6A10               	clrf	___awmod@dividend+1,c
  5366  002158  0E00               	movlw	0
  5367  00215A  6E12               	movwf	___awmod@divisor+1,c
  5368  00215C  0E0A               	movlw	10
  5369  00215E  6E11               	movwf	___awmod@divisor,c
  5370  002160  EC90  F01A         	call	___awmod	;wreg free
  5371  002164  500F               	movf	?___awmod,w,c
  5372  002166  0F30               	addlw	48
  5373  002168  0100               	movlb	0	; () banked
  5374  00216A  6FC9               	movwf	(_NS_Count+1)& (0+255),b
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;Lab9p1.c: 662: drawtext(100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  5378  00216C  0E5A               	movlw	90
  5379  00216E  6E37               	movwf	drawtext@y,c
  5380  002170  0EC8               	movlw	low _NS_Count
  5381  002172  6E38               	movwf	drawtext@_text,c
  5382  002174  0E00               	movlw	high _NS_Count
  5383  002176  6E39               	movwf	drawtext@_text+1,c
  5384  002178  0E00               	movlw	0
  5385  00217A  6E3B               	movwf	drawtext@color+1,c
  5386  00217C  0E1F               	movlw	31
  5387  00217E  6E3A               	movwf	drawtext@color,c
  5388  002180  0E00               	movlw	0
  5389  002182  6E3D               	movwf	drawtext@bg+1,c
  5390  002184  0E00               	movlw	0
  5391  002186  6E3C               	movwf	drawtext@bg,c
  5392  002188  0E02               	movlw	2
  5393  00218A  6E3E               	movwf	drawtext@size,c
  5394  00218C  0E64               	movlw	100
  5395  00218E  EC5D  F016         	call	_drawtext
  5396                           
  5397                           ;Lab9p1.c: 663: break;
  5398  002192  D069               	goto	l522
  5399  002194                     l7030:
  5400                           
  5401                           ;Lab9p1.c: 666: EWLT_Count[0] = count/10 + '0';
  5402  002194  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  5403  002198  6A16               	clrf	___awdiv@dividend+1,c
  5404  00219A  0E00               	movlw	0
  5405  00219C  6E18               	movwf	___awdiv@divisor+1,c
  5406  00219E  0E0A               	movlw	10
  5407  0021A0  6E17               	movwf	___awdiv@divisor,c
  5408  0021A2  ECF1  F018         	call	___awdiv	;wreg free
  5409  0021A6  5015               	movf	?___awdiv,w,c
  5410  0021A8  0F30               	addlw	48
  5411  0021AA  0100               	movlb	0	; () banked
  5412  0021AC  6FBF               	movwf	_EWLT_Count& (0+255),b
  5413                           
  5414                           ;Lab9p1.c: 667: EWLT_Count[1] = count%10 + '0';
  5415  0021AE  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5416  0021B2  6A10               	clrf	___awmod@dividend+1,c
  5417  0021B4  0E00               	movlw	0
  5418  0021B6  6E12               	movwf	___awmod@divisor+1,c
  5419  0021B8  0E0A               	movlw	10
  5420  0021BA  6E11               	movwf	___awmod@divisor,c
  5421  0021BC  EC90  F01A         	call	___awmod	;wreg free
  5422  0021C0  500F               	movf	?___awmod,w,c
  5423  0021C2  0F30               	addlw	48
  5424  0021C4  0100               	movlb	0	; () banked
  5425  0021C6  6FC0               	movwf	(_EWLT_Count+1)& (0+255),b
  5426                           
  5427                           ; BSR set to: 0
  5428                           ;Lab9p1.c: 668: drawtext(100, 50 + 10, EWLT_Count,
  5429                           ;Lab9p1.c: 669: 0xFFFF, 0x0000, 2);
  5430  0021C8  0E3C               	movlw	60
  5431  0021CA  6E37               	movwf	drawtext@y,c
  5432  0021CC  0EBF               	movlw	low _EWLT_Count
  5433  0021CE  6E38               	movwf	drawtext@_text,c
  5434  0021D0  0E00               	movlw	high _EWLT_Count
  5435  0021D2  6E39               	movwf	drawtext@_text+1,c
  5436  0021D4  0EFF               	movlw	255
  5437  0021D6  6E3B               	movwf	drawtext@color+1,c
  5438  0021D8  683A               	setf	drawtext@color,c
  5439  0021DA  0E00               	movlw	0
  5440  0021DC  6E3D               	movwf	drawtext@bg+1,c
  5441  0021DE  0E00               	movlw	0
  5442  0021E0  6E3C               	movwf	drawtext@bg,c
  5443  0021E2  0E02               	movlw	2
  5444  0021E4  6E3E               	movwf	drawtext@size,c
  5445  0021E6  0E64               	movlw	100
  5446  0021E8  EC5D  F016         	call	_drawtext
  5447                           
  5448                           ;Lab9p1.c: 670: break;
  5449  0021EC  D03C               	goto	l522
  5450  0021EE                     l7034:
  5451                           
  5452                           ;Lab9p1.c: 673: NSLT_Count[0] = count/10 + '0';
  5453  0021EE  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  5454  0021F2  6A16               	clrf	___awdiv@dividend+1,c
  5455  0021F4  0E00               	movlw	0
  5456  0021F6  6E18               	movwf	___awdiv@divisor+1,c
  5457  0021F8  0E0A               	movlw	10
  5458  0021FA  6E17               	movwf	___awdiv@divisor,c
  5459  0021FC  ECF1  F018         	call	___awdiv	;wreg free
  5460  002200  5015               	movf	?___awdiv,w,c
  5461  002202  0F30               	addlw	48
  5462  002204  0100               	movlb	0	; () banked
  5463  002206  6FC5               	movwf	_NSLT_Count& (0+255),b
  5464                           
  5465                           ;Lab9p1.c: 674: NSLT_Count[1] = count%10 + '0';
  5466  002208  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5467  00220C  6A10               	clrf	___awmod@dividend+1,c
  5468  00220E  0E00               	movlw	0
  5469  002210  6E12               	movwf	___awmod@divisor+1,c
  5470  002212  0E0A               	movlw	10
  5471  002214  6E11               	movwf	___awmod@divisor,c
  5472  002216  EC90  F01A         	call	___awmod	;wreg free
  5473  00221A  500F               	movf	?___awmod,w,c
  5474  00221C  0F30               	addlw	48
  5475  00221E  0100               	movlb	0	; () banked
  5476  002220  6FC6               	movwf	(_NSLT_Count+1)& (0+255),b
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;Lab9p1.c: 675: drawtext(100, 110 + 10, NSLT_Count,
  5480                           ;Lab9p1.c: 676: 0xF81F, 0x0000, 2);
  5481  002222  0E78               	movlw	120
  5482  002224  6E37               	movwf	drawtext@y,c
  5483  002226  0EC5               	movlw	low _NSLT_Count
  5484  002228  6E38               	movwf	drawtext@_text,c
  5485  00222A  0E00               	movlw	high _NSLT_Count
  5486  00222C  6E39               	movwf	drawtext@_text+1,c
  5487  00222E  0EF8               	movlw	248
  5488  002230  6E3B               	movwf	drawtext@color+1,c
  5489  002232  0E1F               	movlw	31
  5490  002234  6E3A               	movwf	drawtext@color,c
  5491  002236  0E00               	movlw	0
  5492  002238  6E3D               	movwf	drawtext@bg+1,c
  5493  00223A  0E00               	movlw	0
  5494  00223C  6E3C               	movwf	drawtext@bg,c
  5495  00223E  0E02               	movlw	2
  5496  002240  6E3E               	movwf	drawtext@size,c
  5497  002242  0E64               	movlw	100
  5498  002244  EC5D  F016         	call	_drawtext
  5499                           
  5500                           ;Lab9p1.c: 678: }
  5501                           
  5502                           ;Lab9p1.c: 677: break;
  5503  002248  D00E               	goto	l522
  5504  00224A                     l7040:
  5505  00224A  504A               	movf	update_LCD_count@direction,w,c
  5506                           
  5507                           ; Switch size 1, requested type "space"
  5508                           ; Number of cases is 4, Range of values is 0 to 3
  5509                           ; switch strategies available:
  5510                           ; Name         Instructions Cycles
  5511                           ; simple_byte           13     7 (average)
  5512                           ;	Chosen strategy is simple_byte
  5513  00224C  0A00               	xorlw	0	; case 0
  5514  00224E  B4D8               	btfsc	status,2,c
  5515  002250  D746               	goto	l7022
  5516  002252  0A01               	xorlw	1	; case 1
  5517  002254  B4D8               	btfsc	status,2,c
  5518  002256  D79E               	goto	l7030
  5519  002258  0A03               	xorlw	3	; case 2
  5520  00225A  B4D8               	btfsc	status,2,c
  5521  00225C  D76D               	goto	l7026
  5522  00225E  0A01               	xorlw	1	; case 3
  5523  002260  B4D8               	btfsc	status,2,c
  5524  002262  D7C5               	goto	l7034
  5525  002264  D000               	goto	l522
  5526  002266                     l522:
  5527  002266  0012               	return		;funcret
  5528  002268                     __end_of_update_LCD_count:
  5529                           	opt stack 0
  5530                           tblptru	equ	0xFF8
  5531                           tblptrh	equ	0xFF7
  5532                           tblptrl	equ	0xFF6
  5533                           tablat	equ	0xFF5
  5534                           prodh	equ	0xFF4
  5535                           prodl	equ	0xFF3
  5536                           intcon2	equ	0xFF1
  5537                           postinc0	equ	0xFEE
  5538                           wreg	equ	0xFE8
  5539                           postdec1	equ	0xFE5
  5540                           fsr1l	equ	0xFE1
  5541                           indf2	equ	0xFDF
  5542                           fsr2h	equ	0xFDA
  5543                           fsr2l	equ	0xFD9
  5544                           status	equ	0xFD8
  5545                           
  5546 ;; *************** function _WAIT_1_SEC *****************
  5547 ;; Defined at:
  5548 ;;		line 472 in file "Lab9p1.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;		None
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;		None
  5553 ;; Return value:  Size  Location     Type
  5554 ;;		None               void
  5555 ;; Registers used:
  5556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5557 ;; Tracked objects:
  5558 ;;		On entry : 0/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5566 ;;Total ram usage:        0 bytes
  5567 ;; Hardware stack levels used:    1
  5568 ;; Hardware stack levels required when called:   10
  5569 ;; This function calls:
  5570 ;;		_WAIT_HALF_SEC
  5571 ;;		_checker
  5572 ;;		_drawtext
  5573 ;;		_strcpy
  5574 ;;		_update_LCD_misc
  5575 ;; This function is called by:
  5576 ;;		_WAIT_N_SEC
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           	psect	text21
  5581  003414                     __ptext21:
  5582                           	opt stack 0
  5583  003414                     _WAIT_1_SEC:
  5584                           	opt stack 18
  5585                           
  5586                           ;Lab9p1.c: 474: PORTDbits.RD7 = 1;
  5587                           
  5588                           ;incstack = 0
  5589  003414  8E83               	bsf	3971,7,c	;volatile
  5590                           
  5591                           ;Lab9p1.c: 475: strcpy(txt,"*");
  5592  003416  C064  F00F         	movff	_txt,strcpy@to
  5593  00341A  C065  F010         	movff	_txt+1,strcpy@to+1
  5594  00341E  0EFD               	movlw	low STR_5
  5595  003420  6E11               	movwf	strcpy@from,c
  5596  003422  0EFF               	movlw	high STR_5
  5597  003424  6E12               	movwf	strcpy@from+1,c
  5598  003426  ECB4  F01D         	call	_strcpy	;wreg free
  5599                           
  5600                           ;Lab9p1.c: 476: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5601  00342A  0E0A               	movlw	10
  5602  00342C  6E37               	movwf	drawtext@y,c
  5603  00342E  C064  F038         	movff	_txt,drawtext@_text
  5604  003432  C065  F039         	movff	_txt+1,drawtext@_text+1
  5605  003436  0EFF               	movlw	255
  5606  003438  6E3B               	movwf	drawtext@color+1,c
  5607  00343A  683A               	setf	drawtext@color,c
  5608  00343C  0E00               	movlw	0
  5609  00343E  6E3D               	movwf	drawtext@bg+1,c
  5610  003440  0E00               	movlw	0
  5611  003442  6E3C               	movwf	drawtext@bg,c
  5612  003444  0E01               	movlw	1
  5613  003446  6E3E               	movwf	drawtext@size,c
  5614  003448  0E78               	movlw	120
  5615  00344A  EC5D  F016         	call	_drawtext
  5616                           
  5617                           ;Lab9p1.c: 478: WAIT_HALF_SEC();
  5618  00344E  EC7C  F01E         	call	_WAIT_HALF_SEC	;wreg free
  5619                           
  5620                           ;Lab9p1.c: 480: PORTDbits.RD7 = 0;
  5621  003452  9E83               	bcf	3971,7,c	;volatile
  5622                           
  5623                           ;Lab9p1.c: 481: strcpy(txt," ");
  5624  003454  C064  F00F         	movff	_txt,strcpy@to
  5625  003458  C065  F010         	movff	_txt+1,strcpy@to+1
  5626  00345C  0EFB               	movlw	low STR_14
  5627  00345E  6E11               	movwf	strcpy@from,c
  5628  003460  0EFF               	movlw	high STR_14
  5629  003462  6E12               	movwf	strcpy@from+1,c
  5630  003464  ECB4  F01D         	call	_strcpy	;wreg free
  5631                           
  5632                           ;Lab9p1.c: 482: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5633  003468  0E0A               	movlw	10
  5634  00346A  6E37               	movwf	drawtext@y,c
  5635  00346C  C064  F038         	movff	_txt,drawtext@_text
  5636  003470  C065  F039         	movff	_txt+1,drawtext@_text+1
  5637  003474  0EFF               	movlw	255
  5638  003476  6E3B               	movwf	drawtext@color+1,c
  5639  003478  683A               	setf	drawtext@color,c
  5640  00347A  0E00               	movlw	0
  5641  00347C  6E3D               	movwf	drawtext@bg+1,c
  5642  00347E  0E00               	movlw	0
  5643  003480  6E3C               	movwf	drawtext@bg,c
  5644  003482  0E01               	movlw	1
  5645  003484  6E3E               	movwf	drawtext@size,c
  5646  003486  0E78               	movlw	120
  5647  003488  EC5D  F016         	call	_drawtext
  5648                           
  5649                           ;Lab9p1.c: 484: WAIT_HALF_SEC();
  5650  00348C  EC7C  F01E         	call	_WAIT_HALF_SEC	;wreg free
  5651                           
  5652                           ;Lab9p1.c: 485: update_LCD_misc();
  5653  003490  ECAE  F00D         	call	_update_LCD_misc	;wreg free
  5654                           
  5655                           ;Lab9p1.c: 486: checker();
  5656  003494  ECFA  F01D         	call	_checker	;wreg free
  5657  003498  0012               	return		;funcret
  5658  00349A                     __end_of_WAIT_1_SEC:
  5659                           	opt stack 0
  5660                           tblptru	equ	0xFF8
  5661                           tblptrh	equ	0xFF7
  5662                           tblptrl	equ	0xFF6
  5663                           tablat	equ	0xFF5
  5664                           prodh	equ	0xFF4
  5665                           prodl	equ	0xFF3
  5666                           intcon2	equ	0xFF1
  5667                           postinc0	equ	0xFEE
  5668                           wreg	equ	0xFE8
  5669                           postdec1	equ	0xFE5
  5670                           fsr1l	equ	0xFE1
  5671                           indf2	equ	0xFDF
  5672                           fsr2h	equ	0xFDA
  5673                           fsr2l	equ	0xFD9
  5674                           status	equ	0xFD8
  5675                           
  5676 ;; *************** function _update_LCD_misc *****************
  5677 ;; Defined at:
  5678 ;;		line 701 in file "Lab9p1.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;		None
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;  volts           3   90[COMRAM] float 
  5683 ;;  nStep           2   88[COMRAM] int 
  5684 ;; Return value:  Size  Location     Type
  5685 ;;		None               void
  5686 ;; Registers used:
  5687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5688 ;; Tracked objects:
  5689 ;;		On entry : 0/0
  5690 ;;		On exit  : 0/0
  5691 ;;		Unchanged: 0/0
  5692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5694 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5696 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5697 ;;Total ram usage:        5 bytes
  5698 ;; Hardware stack levels used:    1
  5699 ;; Hardware stack levels required when called:    9
  5700 ;; This function calls:
  5701 ;;		___awtoft
  5702 ;;		___ftdiv
  5703 ;;		___ftge
  5704 ;;		___wmul
  5705 ;;		_drawtext
  5706 ;;		_get_full_ADC
  5707 ;;		_printf
  5708 ;; This function is called by:
  5709 ;;		_WAIT_1_SEC
  5710 ;; This function uses a non-reentrant model
  5711 ;;
  5712                           
  5713                           	psect	text22
  5714  001B5C                     __ptext22:
  5715                           	opt stack 0
  5716  001B5C                     _update_LCD_misc:
  5717                           	opt stack 18
  5718                           
  5719                           ;Lab9p1.c: 703: int nStep = get_full_ADC ();
  5720                           
  5721                           ;incstack = 0
  5722  001B5C  EC38  F01E         	call	_get_full_ADC	;wreg free
  5723  001B60  C00F  F059         	movff	?_get_full_ADC,update_LCD_misc@nStep
  5724  001B64  C010  F05A         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  5725                           
  5726                           ;Lab9p1.c: 704: float volts = nStep*5/1024.0;
  5727  001B68  C059  F01D         	movff	update_LCD_misc@nStep,___wmul@multiplier
  5728  001B6C  C05A  F01E         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  5729  001B70  0E00               	movlw	0
  5730  001B72  6E20               	movwf	___wmul@multiplicand+1,c
  5731  001B74  0E05               	movlw	5
  5732  001B76  6E1F               	movwf	___wmul@multiplicand,c
  5733  001B78  EC24  F01E         	call	___wmul	;wreg free
  5734  001B7C  C01D  F023         	movff	?___wmul,___awtoft@c
  5735  001B80  C01E  F024         	movff	?___wmul+1,___awtoft@c+1
  5736  001B84  EC63  F01D         	call	___awtoft	;wreg free
  5737  001B88  C023  F027         	movff	?___awtoft,___ftdiv@f1
  5738  001B8C  C024  F028         	movff	?___awtoft+1,___ftdiv@f1+1
  5739  001B90  C025  F029         	movff	?___awtoft+2,___ftdiv@f1+2
  5740  001B94  0E00               	movlw	0
  5741  001B96  6E2A               	movwf	___ftdiv@f2,c
  5742  001B98  0E80               	movlw	128
  5743  001B9A  6E2B               	movwf	___ftdiv@f2+1,c
  5744  001B9C  0E44               	movlw	68
  5745  001B9E  6E2C               	movwf	___ftdiv@f2+2,c
  5746  001BA0  ECEC  F015         	call	___ftdiv	;wreg free
  5747  001BA4  C027  F05B         	movff	?___ftdiv,update_LCD_misc@volts
  5748  001BA8  C028  F05C         	movff	?___ftdiv+1,update_LCD_misc@volts+1
  5749  001BAC  C029  F05D         	movff	?___ftdiv+2,update_LCD_misc@volts+2
  5750                           
  5751                           ;Lab9p1.c: 706: printf ("volts are %0.3f\r\n\n", volts);
  5752  001BB0  0EAE               	movlw	low STR_15
  5753  001BB2  6E4E               	movwf	printf@f,c
  5754  001BB4  0EFF               	movlw	high STR_15
  5755  001BB6  6E4F               	movwf	printf@f+1,c
  5756  001BB8  C05B  F050         	movff	update_LCD_misc@volts,?_printf+2
  5757  001BBC  C05C  F051         	movff	update_LCD_misc@volts+1,?_printf+3
  5758  001BC0  C05D  F052         	movff	update_LCD_misc@volts+2,?_printf+4
  5759  001BC4  EC0E  F000         	call	_printf	;wreg free
  5760                           
  5761                           ;Lab9p1.c: 709: if (volts < 2.570)
  5762  001BC8  C05B  F00F         	movff	update_LCD_misc@volts,___ftge@ff1
  5763  001BCC  C05C  F010         	movff	update_LCD_misc@volts+1,___ftge@ff1+1
  5764  001BD0  C05D  F011         	movff	update_LCD_misc@volts+2,___ftge@ff1+2
  5765  001BD4  0E7B               	movlw	123
  5766  001BD6  6E12               	movwf	___ftge@ff2,c
  5767  001BD8  0E24               	movlw	36
  5768  001BDA  6E13               	movwf	___ftge@ff2+1,c
  5769  001BDC  0E40               	movlw	64
  5770  001BDE  6E14               	movwf	___ftge@ff2+2,c
  5771  001BE0  ECA6  F018         	call	___ftge	;wreg free
  5772  001BE4  B0D8               	btfsc	status,0,c
  5773  001BE6  D002               	goto	l6792
  5774                           
  5775                           ;Lab9p1.c: 710: {
  5776                           ;Lab9p1.c: 711: SW_MODE = 1;
  5777  001BE8  0E01               	movlw	1
  5778  001BEA  D001               	goto	L1
  5779  001BEC                     l6792:
  5780                           
  5781                           ;Lab9p1.c: 713: else
  5782                           ;Lab9p1.c: 714: {
  5783                           ;Lab9p1.c: 715: SW_MODE = 0;
  5784  001BEC  0E00               	movlw	0
  5785  001BEE                     L1:
  5786  001BEE  0100               	movlb	0	; () banked
  5787  001BF0  6F91               	movwf	_SW_MODE& (0+255),b
  5788  001BF2  D000               	goto	l6794
  5789  001BF4                     l6794:
  5790                           
  5791                           ; BSR set to: 0
  5792                           ;Lab9p1.c: 716: }
  5793                           ;Lab9p1.c: 719: SW_EWPED = EWPED_SW;
  5794  001BF4  C08D  F090         	movff	_EWPED_SW,_SW_EWPED
  5795                           
  5796                           ; BSR set to: 0
  5797                           ;Lab9p1.c: 720: SW_EWLT = PORTAbits.RA4;
  5798  001BF8  0E00               	movlw	0
  5799  001BFA  B880               	btfsc	3968,4,c	;volatile
  5800  001BFC  0E01               	movlw	1
  5801  001BFE  0100               	movlb	0	; () banked
  5802  001C00  6F8F               	movwf	_SW_EWLT& (0+255),b
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;Lab9p1.c: 721: SW_NSPED = NSPED_SW;
  5806  001C02  C08E  F093         	movff	_NSPED_SW,_SW_NSPED
  5807                           
  5808                           ; BSR set to: 0
  5809                           ;Lab9p1.c: 722: SW_NSLT = PORTAbits.RA3;
  5810  001C06  0E00               	movlw	0
  5811  001C08  B680               	btfsc	3968,3,c	;volatile
  5812  001C0A  0E01               	movlw	1
  5813  001C0C  0100               	movlb	0	; () banked
  5814  001C0E  6F92               	movwf	_SW_NSLT& (0+255),b
  5815                           
  5816                           ;Lab9p1.c: 724: if (SW_MODE == 0) SW_MODE_Txt[0] = 'N'; else SW_MODE_Txt[0] = 'D';
  5817  001C10  0100               	movlb	0	; () banked
  5818  001C12  5191               	movf	_SW_MODE& (0+255),w,b
  5819  001C14  0100               	movlb	0	; () banked
  5820  001C16  A4D8               	btfss	status,2,c
  5821  001C18  D002               	goto	l6804
  5822                           
  5823                           ; BSR set to: 0
  5824  001C1A  0E4E               	movlw	78
  5825  001C1C  D001               	goto	L2
  5826  001C1E                     l6804:
  5827                           
  5828                           ; BSR set to: 0
  5829  001C1E  0E44               	movlw	68
  5830  001C20                     L2:
  5831  001C20  0100               	movlb	0	; () banked
  5832  001C22  6FD7               	movwf	_SW_MODE_Txt& (0+255),b
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;Lab9p1.c: 725: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  5836  001C24  0100               	movlb	0	; () banked
  5837  001C26  5193               	movf	_SW_NSPED& (0+255),w,b
  5838  001C28  0100               	movlb	0	; () banked
  5839  001C2A  A4D8               	btfss	status,2,c
  5840  001C2C  D002               	goto	l6808
  5841                           
  5842                           ; BSR set to: 0
  5843  001C2E  0E30               	movlw	48
  5844  001C30  D001               	goto	L3
  5845  001C32                     l6808:
  5846                           
  5847                           ; BSR set to: 0
  5848  001C32  0E31               	movlw	49
  5849  001C34                     L3:
  5850  001C34  0100               	movlb	0	; () banked
  5851  001C36  6FDB               	movwf	_SW_NSPED_Txt& (0+255),b
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;Lab9p1.c: 726: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  5855  001C38  0100               	movlb	0	; () banked
  5856  001C3A  5192               	movf	_SW_NSLT& (0+255),w,b
  5857  001C3C  0100               	movlb	0	; () banked
  5858  001C3E  A4D8               	btfss	status,2,c
  5859  001C40  D002               	goto	l6812
  5860                           
  5861                           ; BSR set to: 0
  5862  001C42  0E30               	movlw	48
  5863  001C44  D001               	goto	L4
  5864  001C46                     l6812:
  5865                           
  5866                           ; BSR set to: 0
  5867  001C46  0E31               	movlw	49
  5868  001C48                     L4:
  5869  001C48  0100               	movlb	0	; () banked
  5870  001C4A  6FD9               	movwf	_SW_NSLT_Txt& (0+255),b
  5871                           
  5872                           ; BSR set to: 0
  5873                           ;Lab9p1.c: 727: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  5874  001C4C  0100               	movlb	0	; () banked
  5875  001C4E  5190               	movf	_SW_EWPED& (0+255),w,b
  5876  001C50  0100               	movlb	0	; () banked
  5877  001C52  A4D8               	btfss	status,2,c
  5878  001C54  D002               	goto	l6816
  5879                           
  5880                           ; BSR set to: 0
  5881  001C56  0E30               	movlw	48
  5882  001C58  D001               	goto	L5
  5883  001C5A                     l6816:
  5884                           
  5885                           ; BSR set to: 0
  5886  001C5A  0E31               	movlw	49
  5887  001C5C                     L5:
  5888  001C5C  6E6F               	movwf	_SW_EWPED_Txt,c
  5889                           
  5890                           ; BSR set to: 0
  5891                           ;Lab9p1.c: 728: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  5892  001C5E  0100               	movlb	0	; () banked
  5893  001C60  518F               	movf	_SW_EWLT& (0+255),w,b
  5894  001C62  0100               	movlb	0	; () banked
  5895  001C64  A4D8               	btfss	status,2,c
  5896  001C66  D002               	goto	l6820
  5897                           
  5898                           ; BSR set to: 0
  5899  001C68  0E30               	movlw	48
  5900  001C6A  D001               	goto	L6
  5901  001C6C                     l6820:
  5902                           
  5903                           ; BSR set to: 0
  5904  001C6C  0E31               	movlw	49
  5905  001C6E                     L6:
  5906  001C6E  6E6D               	movwf	_SW_EWLT_Txt,c
  5907  001C70  D000               	goto	l6822
  5908  001C72                     l6822:
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;Lab9p1.c: 730: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  5912  001C72  0E0A               	movlw	10
  5913  001C74  6E37               	movwf	drawtext@y,c
  5914  001C76  0ED1               	movlw	low _Act_Mode_Txt
  5915  001C78  6E38               	movwf	drawtext@_text,c
  5916  001C7A  0E00               	movlw	high _Act_Mode_Txt
  5917  001C7C  6E39               	movwf	drawtext@_text+1,c
  5918  001C7E  0EFF               	movlw	255
  5919  001C80  6E3B               	movwf	drawtext@color+1,c
  5920  001C82  683A               	setf	drawtext@color,c
  5921  001C84  0E00               	movlw	0
  5922  001C86  6E3D               	movwf	drawtext@bg+1,c
  5923  001C88  0E00               	movlw	0
  5924  001C8A  6E3C               	movwf	drawtext@bg,c
  5925  001C8C  0E01               	movlw	1
  5926  001C8E  6E3E               	movwf	drawtext@size,c
  5927  001C90  0E23               	movlw	35
  5928  001C92  EC5D  F016         	call	_drawtext
  5929                           
  5930                           ;Lab9p1.c: 731: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  5931  001C96  0E95               	movlw	149
  5932  001C98  6E37               	movwf	drawtext@y,c
  5933  001C9A  0E6F               	movlw	low _SW_EWPED_Txt
  5934  001C9C  6E38               	movwf	drawtext@_text,c
  5935  001C9E  0E00               	movlw	high _SW_EWPED_Txt
  5936  001CA0  6E39               	movwf	drawtext@_text+1,c
  5937  001CA2  0EFF               	movlw	255
  5938  001CA4  6E3B               	movwf	drawtext@color+1,c
  5939  001CA6  683A               	setf	drawtext@color,c
  5940  001CA8  0E00               	movlw	0
  5941  001CAA  6E3D               	movwf	drawtext@bg+1,c
  5942  001CAC  0E00               	movlw	0
  5943  001CAE  6E3C               	movwf	drawtext@bg,c
  5944  001CB0  0E01               	movlw	1
  5945  001CB2  6E3E               	movwf	drawtext@size,c
  5946  001CB4  0E06               	movlw	6
  5947  001CB6  EC5D  F016         	call	_drawtext
  5948                           
  5949                           ;Lab9p1.c: 732: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  5950  001CBA  0E95               	movlw	149
  5951  001CBC  6E37               	movwf	drawtext@y,c
  5952  001CBE  0E6D               	movlw	low _SW_EWLT_Txt
  5953  001CC0  6E38               	movwf	drawtext@_text,c
  5954  001CC2  0E00               	movlw	high _SW_EWLT_Txt
  5955  001CC4  6E39               	movwf	drawtext@_text+1,c
  5956  001CC6  0EFF               	movlw	255
  5957  001CC8  6E3B               	movwf	drawtext@color+1,c
  5958  001CCA  683A               	setf	drawtext@color,c
  5959  001CCC  0E00               	movlw	0
  5960  001CCE  6E3D               	movwf	drawtext@bg+1,c
  5961  001CD0  0E00               	movlw	0
  5962  001CD2  6E3C               	movwf	drawtext@bg,c
  5963  001CD4  0E01               	movlw	1
  5964  001CD6  6E3E               	movwf	drawtext@size,c
  5965  001CD8  0E20               	movlw	32
  5966  001CDA  EC5D  F016         	call	_drawtext
  5967                           
  5968                           ;Lab9p1.c: 733: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  5969  001CDE  0E95               	movlw	149
  5970  001CE0  6E37               	movwf	drawtext@y,c
  5971  001CE2  0EDB               	movlw	low _SW_NSPED_Txt
  5972  001CE4  6E38               	movwf	drawtext@_text,c
  5973  001CE6  0E00               	movlw	high _SW_NSPED_Txt
  5974  001CE8  6E39               	movwf	drawtext@_text+1,c
  5975  001CEA  0EFF               	movlw	255
  5976  001CEC  6E3B               	movwf	drawtext@color+1,c
  5977  001CEE  683A               	setf	drawtext@color,c
  5978  001CF0  0E00               	movlw	0
  5979  001CF2  6E3D               	movwf	drawtext@bg+1,c
  5980  001CF4  0E00               	movlw	0
  5981  001CF6  6E3C               	movwf	drawtext@bg,c
  5982  001CF8  0E01               	movlw	1
  5983  001CFA  6E3E               	movwf	drawtext@size,c
  5984  001CFC  0E3A               	movlw	58
  5985  001CFE  EC5D  F016         	call	_drawtext
  5986                           
  5987                           ;Lab9p1.c: 734: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  5988  001D02  0E95               	movlw	149
  5989  001D04  6E37               	movwf	drawtext@y,c
  5990  001D06  0ED9               	movlw	low _SW_NSLT_Txt
  5991  001D08  6E38               	movwf	drawtext@_text,c
  5992  001D0A  0E00               	movlw	high _SW_NSLT_Txt
  5993  001D0C  6E39               	movwf	drawtext@_text+1,c
  5994  001D0E  0EFF               	movlw	255
  5995  001D10  6E3B               	movwf	drawtext@color+1,c
  5996  001D12  683A               	setf	drawtext@color,c
  5997  001D14  0E00               	movlw	0
  5998  001D16  6E3D               	movwf	drawtext@bg+1,c
  5999  001D18  0E00               	movlw	0
  6000  001D1A  6E3C               	movwf	drawtext@bg,c
  6001  001D1C  0E01               	movlw	1
  6002  001D1E  6E3E               	movwf	drawtext@size,c
  6003  001D20  0E57               	movlw	87
  6004  001D22  EC5D  F016         	call	_drawtext
  6005                           
  6006                           ;Lab9p1.c: 736: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  6007  001D26  0E95               	movlw	149
  6008  001D28  6E37               	movwf	drawtext@y,c
  6009  001D2A  0ED7               	movlw	low _SW_MODE_Txt
  6010  001D2C  6E38               	movwf	drawtext@_text,c
  6011  001D2E  0E00               	movlw	high _SW_MODE_Txt
  6012  001D30  6E39               	movwf	drawtext@_text+1,c
  6013  001D32  0EFF               	movlw	255
  6014  001D34  6E3B               	movwf	drawtext@color+1,c
  6015  001D36  683A               	setf	drawtext@color,c
  6016  001D38  0E00               	movlw	0
  6017  001D3A  6E3D               	movwf	drawtext@bg+1,c
  6018  001D3C  0E00               	movlw	0
  6019  001D3E  6E3C               	movwf	drawtext@bg,c
  6020  001D40  0E01               	movlw	1
  6021  001D42  6E3E               	movwf	drawtext@size,c
  6022  001D44  0E70               	movlw	112
  6023  001D46  EC5D  F016         	call	_drawtext
  6024  001D4A  0012               	return		;funcret
  6025  001D4C                     __end_of_update_LCD_misc:
  6026                           	opt stack 0
  6027                           tblptru	equ	0xFF8
  6028                           tblptrh	equ	0xFF7
  6029                           tblptrl	equ	0xFF6
  6030                           tablat	equ	0xFF5
  6031                           prodh	equ	0xFF4
  6032                           prodl	equ	0xFF3
  6033                           intcon2	equ	0xFF1
  6034                           postinc0	equ	0xFEE
  6035                           wreg	equ	0xFE8
  6036                           postdec1	equ	0xFE5
  6037                           fsr1l	equ	0xFE1
  6038                           indf2	equ	0xFDF
  6039                           fsr2h	equ	0xFDA
  6040                           fsr2l	equ	0xFD9
  6041                           status	equ	0xFD8
  6042                           
  6043 ;; *************** function _get_full_ADC *****************
  6044 ;; Defined at:
  6045 ;;		line 462 in file "Lab9p1.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;		None
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;  result          2   18[COMRAM] int 
  6050 ;; Return value:  Size  Location     Type
  6051 ;;                  2   14[COMRAM] unsigned int 
  6052 ;; Registers used:
  6053 ;;		wreg, status,2, status,0
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6059 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6060 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6061 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6062 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6063 ;;Total ram usage:        6 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:    2
  6066 ;; This function calls:
  6067 ;;		Nothing
  6068 ;; This function is called by:
  6069 ;;		_main
  6070 ;;		_update_LCD_misc
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           	psect	text23
  6075  003C70                     __ptext23:
  6076                           	opt stack 0
  6077  003C70                     _get_full_ADC:
  6078                           	opt stack 28
  6079                           
  6080                           ;Lab9p1.c: 464: int result;
  6081                           ;Lab9p1.c: 465: ADCON0bits.GO=1;
  6082                           
  6083                           ;incstack = 0
  6084  003C70  82C2               	bsf	4034,1,c	;volatile
  6085                           
  6086                           ;Lab9p1.c: 466: while(ADCON0bits.DONE==1);
  6087  003C72  D000               	goto	l439
  6088  003C74                     l439:
  6089  003C74  B2C2               	btfsc	4034,1,c	;volatile
  6090  003C76  D7FE               	goto	l439
  6091                           
  6092                           ;Lab9p1.c: 467: result = (ADRESH * 0x100) + ADRESL;
  6093  003C78  50C4               	movf	4036,w,c	;volatile
  6094  003C7A  6E12               	movwf	(??_get_full_ADC+1)& (0+255),c
  6095  003C7C  6A11               	clrf	??_get_full_ADC& (0+255),c
  6096  003C7E  50C3               	movf	4035,w,c	;volatile
  6097  003C80  2411               	addwf	??_get_full_ADC,w,c
  6098  003C82  6E13               	movwf	get_full_ADC@result,c
  6099  003C84  0E00               	movlw	0
  6100  003C86  2012               	addwfc	??_get_full_ADC+1,w,c
  6101  003C88  6E14               	movwf	get_full_ADC@result+1,c
  6102                           
  6103                           ;Lab9p1.c: 469: return result;
  6104  003C8A  C013  F00F         	movff	get_full_ADC@result,?_get_full_ADC
  6105  003C8E  C014  F010         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  6106  003C92  D000               	goto	l442
  6107  003C94                     l442:
  6108  003C94  0012               	return		;funcret
  6109  003C96                     __end_of_get_full_ADC:
  6110                           	opt stack 0
  6111                           tblptru	equ	0xFF8
  6112                           tblptrh	equ	0xFF7
  6113                           tblptrl	equ	0xFF6
  6114                           tablat	equ	0xFF5
  6115                           prodh	equ	0xFF4
  6116                           prodl	equ	0xFF3
  6117                           intcon2	equ	0xFF1
  6118                           postinc0	equ	0xFEE
  6119                           wreg	equ	0xFE8
  6120                           postdec1	equ	0xFE5
  6121                           fsr1l	equ	0xFE1
  6122                           indf2	equ	0xFDF
  6123                           fsr2h	equ	0xFDA
  6124                           fsr2l	equ	0xFD9
  6125                           status	equ	0xFD8
  6126                           
  6127 ;; *************** function ___ftdiv *****************
  6128 ;; Defined at:
  6129 ;;		line 54 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  6130 ;; Parameters:    Size  Location     Type
  6131 ;;  f1              3   38[COMRAM] float 
  6132 ;;  f2              3   41[COMRAM] float 
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;  f3              3   48[COMRAM] float 
  6135 ;;  sign            1   52[COMRAM] unsigned char 
  6136 ;;  exp             1   51[COMRAM] unsigned char 
  6137 ;;  cntr            1   47[COMRAM] unsigned char 
  6138 ;; Return value:  Size  Location     Type
  6139 ;;                  3   38[COMRAM] float 
  6140 ;; Registers used:
  6141 ;;		wreg, status,2, status,0, cstack
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6147 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6148 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6149 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6150 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6151 ;;Total ram usage:       15 bytes
  6152 ;; Hardware stack levels used:    1
  6153 ;; Hardware stack levels required when called:    3
  6154 ;; This function calls:
  6155 ;;		___ftpack
  6156 ;; This function is called by:
  6157 ;;		_main
  6158 ;;		_update_LCD_misc
  6159 ;; This function uses a non-reentrant model
  6160 ;;
  6161                           
  6162                           	psect	text24
  6163  002BD8                     __ptext24:
  6164                           	opt stack 0
  6165  002BD8                     ___ftdiv:
  6166                           	opt stack 27
  6167                           
  6168                           ;incstack = 0
  6169  002BD8  C029  F02D         	movff	___ftdiv@f1+2,??___ftdiv
  6170  002BDC  6A2E               	clrf	(??___ftdiv+1)& (0+255),c
  6171  002BDE  6A2F               	clrf	(??___ftdiv+2)& (0+255),c
  6172  002BE0  3428               	rlcf	___ftdiv@f1+1,w,c
  6173  002BE2  362D               	rlcf	??___ftdiv& (0+255),f,c
  6174  002BE4  E301               	bnc	u6801
  6175  002BE6  802E               	bsf	(??___ftdiv+1)& (0+255),0,c
  6176  002BE8                     u6801:
  6177  002BE8  502D               	movf	??___ftdiv,w,c
  6178  002BEA  6E34               	movwf	___ftdiv@exp,c
  6179  002BEC  5034               	movf	___ftdiv@exp,w,c
  6180  002BEE  A4D8               	btfss	status,2,c
  6181  002BF0  D002               	goto	l6654
  6182  002BF2  D00E               	goto	l6656
  6183  002BF4  D061               	goto	l1129
  6184  002BF6                     l6654:
  6185  002BF6  C02C  F02D         	movff	___ftdiv@f2+2,??___ftdiv
  6186  002BFA  6A2E               	clrf	(??___ftdiv+1)& (0+255),c
  6187  002BFC  6A2F               	clrf	(??___ftdiv+2)& (0+255),c
  6188  002BFE  342B               	rlcf	___ftdiv@f2+1,w,c
  6189  002C00  362D               	rlcf	??___ftdiv& (0+255),f,c
  6190  002C02  E301               	bnc	u6821
  6191  002C04  802E               	bsf	(??___ftdiv+1)& (0+255),0,c
  6192  002C06                     u6821:
  6193  002C06  502D               	movf	??___ftdiv,w,c
  6194  002C08  6E35               	movwf	___ftdiv@sign,c
  6195  002C0A  5035               	movf	___ftdiv@sign,w,c
  6196  002C0C  A4D8               	btfss	status,2,c
  6197  002C0E  D007               	goto	l6660
  6198  002C10                     l6656:
  6199  002C10  0E00               	movlw	0
  6200  002C12  6E27               	movwf	?___ftdiv,c
  6201  002C14  0E00               	movlw	0
  6202  002C16  6E28               	movwf	?___ftdiv+1,c
  6203  002C18  0E00               	movlw	0
  6204  002C1A  6E29               	movwf	?___ftdiv+2,c
  6205  002C1C  D04D               	goto	l1129
  6206  002C1E                     l6660:
  6207  002C1E  0E00               	movlw	0
  6208  002C20  6E31               	movwf	___ftdiv@f3,c
  6209  002C22  0E00               	movlw	0
  6210  002C24  6E32               	movwf	___ftdiv@f3+1,c
  6211  002C26  0E00               	movlw	0
  6212  002C28  6E33               	movwf	___ftdiv@f3+2,c
  6213  002C2A  5035               	movf	___ftdiv@sign,w,c
  6214  002C2C  0F89               	addlw	137
  6215  002C2E  5E34               	subwf	___ftdiv@exp,f,c
  6216  002C30  C029  F035         	movff	___ftdiv@f1+2,___ftdiv@sign
  6217  002C34  502C               	movf	___ftdiv@f2+2,w,c
  6218  002C36  1A35               	xorwf	___ftdiv@sign,f,c
  6219  002C38  0E80               	movlw	128
  6220  002C3A  1635               	andwf	___ftdiv@sign,f,c
  6221  002C3C  8E28               	bsf	___ftdiv@f1+1,7,c
  6222  002C3E  0EFF               	movlw	255
  6223  002C40  1627               	andwf	___ftdiv@f1,f,c
  6224  002C42  0EFF               	movlw	255
  6225  002C44  1628               	andwf	___ftdiv@f1+1,f,c
  6226  002C46  0E00               	movlw	0
  6227  002C48  1629               	andwf	___ftdiv@f1+2,f,c
  6228  002C4A  8E2B               	bsf	___ftdiv@f2+1,7,c
  6229  002C4C  0EFF               	movlw	255
  6230  002C4E  162A               	andwf	___ftdiv@f2,f,c
  6231  002C50  0EFF               	movlw	255
  6232  002C52  162B               	andwf	___ftdiv@f2+1,f,c
  6233  002C54  0E00               	movlw	0
  6234  002C56  162C               	andwf	___ftdiv@f2+2,f,c
  6235  002C58  0E18               	movlw	24
  6236  002C5A  6E30               	movwf	___ftdiv@cntr,c
  6237  002C5C  D000               	goto	l6680
  6238  002C5E                     l6680:
  6239  002C5E  90D8               	bcf	status,0,c
  6240  002C60  3631               	rlcf	___ftdiv@f3,f,c
  6241  002C62  3632               	rlcf	___ftdiv@f3+1,f,c
  6242  002C64  3633               	rlcf	___ftdiv@f3+2,f,c
  6243  002C66  502A               	movf	___ftdiv@f2,w,c
  6244  002C68  5C27               	subwf	___ftdiv@f1,w,c
  6245  002C6A  502B               	movf	___ftdiv@f2+1,w,c
  6246  002C6C  5828               	subwfb	___ftdiv@f1+1,w,c
  6247  002C6E  502C               	movf	___ftdiv@f2+2,w,c
  6248  002C70  5829               	subwfb	___ftdiv@f1+2,w,c
  6249  002C72  A0D8               	btfss	status,0,c
  6250  002C74  D007               	goto	l1132
  6251  002C76  502A               	movf	___ftdiv@f2,w,c
  6252  002C78  5E27               	subwf	___ftdiv@f1,f,c
  6253  002C7A  502B               	movf	___ftdiv@f2+1,w,c
  6254  002C7C  5A28               	subwfb	___ftdiv@f1+1,f,c
  6255  002C7E  502C               	movf	___ftdiv@f2+2,w,c
  6256  002C80  5A29               	subwfb	___ftdiv@f1+2,f,c
  6257  002C82  8031               	bsf	___ftdiv@f3,0,c
  6258  002C84                     l1132:
  6259  002C84  90D8               	bcf	status,0,c
  6260  002C86  3627               	rlcf	___ftdiv@f1,f,c
  6261  002C88  3628               	rlcf	___ftdiv@f1+1,f,c
  6262  002C8A  3629               	rlcf	___ftdiv@f1+2,f,c
  6263  002C8C  2E30               	decfsz	___ftdiv@cntr,f,c
  6264  002C8E  D7E7               	goto	l6680
  6265  002C90  D000               	goto	l6690
  6266  002C92                     l6690:
  6267  002C92  C031  F00F         	movff	___ftdiv@f3,___ftpack@arg
  6268  002C96  C032  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6269  002C9A  C033  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6270  002C9E  C034  F012         	movff	___ftdiv@exp,___ftpack@exp
  6271  002CA2  C035  F013         	movff	___ftdiv@sign,___ftpack@sign
  6272  002CA6  EC9E  F017         	call	___ftpack	;wreg free
  6273  002CAA  C00F  F027         	movff	?___ftpack,?___ftdiv
  6274  002CAE  C010  F028         	movff	?___ftpack+1,?___ftdiv+1
  6275  002CB2  C011  F029         	movff	?___ftpack+2,?___ftdiv+2
  6276  002CB6  D000               	goto	l1129
  6277  002CB8                     l1129:
  6278  002CB8  0012               	return		;funcret
  6279  002CBA                     __end_of___ftdiv:
  6280                           	opt stack 0
  6281                           tblptru	equ	0xFF8
  6282                           tblptrh	equ	0xFF7
  6283                           tblptrl	equ	0xFF6
  6284                           tablat	equ	0xFF5
  6285                           prodh	equ	0xFF4
  6286                           prodl	equ	0xFF3
  6287                           intcon2	equ	0xFF1
  6288                           postinc0	equ	0xFEE
  6289                           wreg	equ	0xFE8
  6290                           postdec1	equ	0xFE5
  6291                           fsr1l	equ	0xFE1
  6292                           indf2	equ	0xFDF
  6293                           fsr2h	equ	0xFDA
  6294                           fsr2l	equ	0xFD9
  6295                           status	equ	0xFD8
  6296                           
  6297 ;; *************** function ___awtoft *****************
  6298 ;; Defined at:
  6299 ;;		line 32 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awtoft.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;  c               2   34[COMRAM] int 
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;  sign            1   37[COMRAM] unsigned char 
  6304 ;; Return value:  Size  Location     Type
  6305 ;;                  3   34[COMRAM] float 
  6306 ;; Registers used:
  6307 ;;		wreg, status,2, status,0, cstack
  6308 ;; Tracked objects:
  6309 ;;		On entry : 0/0
  6310 ;;		On exit  : 0/0
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6313 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6314 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6316 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;Total ram usage:        4 bytes
  6318 ;; Hardware stack levels used:    1
  6319 ;; Hardware stack levels required when called:    3
  6320 ;; This function calls:
  6321 ;;		___ftpack
  6322 ;; This function is called by:
  6323 ;;		_main
  6324 ;;		_update_LCD_misc
  6325 ;; This function uses a non-reentrant model
  6326 ;;
  6327                           
  6328                           	psect	text25
  6329  003AC6                     __ptext25:
  6330                           	opt stack 0
  6331  003AC6                     ___awtoft:
  6332                           	opt stack 27
  6333                           
  6334                           ;incstack = 0
  6335  003AC6  0E00               	movlw	0
  6336  003AC8  6E26               	movwf	___awtoft@sign,c
  6337  003ACA  AE24               	btfss	___awtoft@c+1,7,c
  6338  003ACC  D007               	goto	l6702
  6339  003ACE  6C23               	negf	___awtoft@c,c
  6340  003AD0  1E24               	comf	___awtoft@c+1,f,c
  6341  003AD2  B0D8               	btfsc	status,0,c
  6342  003AD4  2A24               	incf	___awtoft@c+1,f,c
  6343  003AD6  0E01               	movlw	1
  6344  003AD8  6E26               	movwf	___awtoft@sign,c
  6345  003ADA  D000               	goto	l6702
  6346  003ADC                     l6702:
  6347  003ADC  C023  F00F         	movff	___awtoft@c,___ftpack@arg
  6348  003AE0  C024  F010         	movff	___awtoft@c+1,___ftpack@arg+1
  6349  003AE4  6A11               	clrf	___ftpack@arg+2,c
  6350  003AE6  0E8E               	movlw	142
  6351  003AE8  6E12               	movwf	___ftpack@exp,c
  6352  003AEA  C026  F013         	movff	___awtoft@sign,___ftpack@sign
  6353  003AEE  EC9E  F017         	call	___ftpack	;wreg free
  6354  003AF2  C00F  F023         	movff	?___ftpack,?___awtoft
  6355  003AF6  C010  F024         	movff	?___ftpack+1,?___awtoft+1
  6356  003AFA  C011  F025         	movff	?___ftpack+2,?___awtoft+2
  6357  003AFE  D000               	goto	l950
  6358  003B00                     l950:
  6359  003B00  0012               	return		;funcret
  6360  003B02                     __end_of___awtoft:
  6361                           	opt stack 0
  6362                           tblptru	equ	0xFF8
  6363                           tblptrh	equ	0xFF7
  6364                           tblptrl	equ	0xFF6
  6365                           tablat	equ	0xFF5
  6366                           prodh	equ	0xFF4
  6367                           prodl	equ	0xFF3
  6368                           intcon2	equ	0xFF1
  6369                           postinc0	equ	0xFEE
  6370                           wreg	equ	0xFE8
  6371                           postdec1	equ	0xFE5
  6372                           fsr1l	equ	0xFE1
  6373                           indf2	equ	0xFDF
  6374                           fsr2h	equ	0xFDA
  6375                           fsr2l	equ	0xFD9
  6376                           status	equ	0xFD8
  6377                           
  6378 ;; *************** function _strcpy *****************
  6379 ;; Defined at:
  6380 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strcpy.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;  to              2   14[COMRAM] PTR unsigned char 
  6383 ;;		 -> NULL(0), buffer(31), 
  6384 ;;  from            2   16[COMRAM] PTR const unsigned char 
  6385 ;;		 -> STR_14(2), STR_13(2), STR_12(21), STR_11(4), 
  6386 ;;		 -> STR_10(4), STR_9(7), STR_8(12), STR_7(7), 
  6387 ;;		 -> STR_6(10), STR_5(2), STR_4(4), STR_3(4), 
  6388 ;;		 -> STR_2(6), STR_1(20), 
  6389 ;; Auto vars:     Size  Location     Type
  6390 ;;  cp              2   18[COMRAM] PTR unsigned char 
  6391 ;;		 -> NULL(0), buffer(31), 
  6392 ;; Return value:  Size  Location     Type
  6393 ;;                  2   14[COMRAM] PTR unsigned char 
  6394 ;; Registers used:
  6395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6396 ;; Tracked objects:
  6397 ;;		On entry : 0/0
  6398 ;;		On exit  : 0/0
  6399 ;;		Unchanged: 0/0
  6400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6401 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6402 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6404 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6405 ;;Total ram usage:        6 bytes
  6406 ;; Hardware stack levels used:    1
  6407 ;; Hardware stack levels required when called:    2
  6408 ;; This function calls:
  6409 ;;		Nothing
  6410 ;; This function is called by:
  6411 ;;		_Initialize_Screen
  6412 ;;		_WAIT_1_SEC
  6413 ;; This function uses a non-reentrant model
  6414 ;;
  6415                           
  6416                           	psect	text26
  6417  003B68                     __ptext26:
  6418                           	opt stack 0
  6419  003B68                     _strcpy:
  6420                           	opt stack 25
  6421                           
  6422                           ;incstack = 0
  6423  003B68  C00F  F013         	movff	strcpy@to,strcpy@cp
  6424  003B6C  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
  6425  003B70  D005               	goto	l6774
  6426  003B72                     l6772:
  6427  003B72  4A13               	infsnz	strcpy@cp,f,c
  6428  003B74  2A14               	incf	strcpy@cp+1,f,c
  6429  003B76  4A11               	infsnz	strcpy@from,f,c
  6430  003B78  2A12               	incf	strcpy@from+1,f,c
  6431  003B7A  D000               	goto	l6774
  6432  003B7C                     l6774:
  6433  003B7C  C011  FFF6         	movff	strcpy@from,tblptrl
  6434  003B80  C012  FFF7         	movff	strcpy@from+1,tblptrh
  6435  003B84                     	if	0	;tblptru may be non-zero
  6436  003B84                     	endif
  6437  003B84                     	if	0	;tblptru may be non-zero
  6438  003B84                     	endif
  6439  003B84  C013  FFD9         	movff	strcpy@cp,fsr2l
  6440  003B88  C014  FFDA         	movff	strcpy@cp+1,fsr2h
  6441  003B8C  0008               	tblrd		*
  6442  003B8E  CFF5 FFDF          	movff	tablat,indf2
  6443  003B92  50DF               	movf	indf2,w,c
  6444  003B94  A4D8               	btfss	status,2,c
  6445  003B96  D7ED               	goto	l6772
  6446                           
  6447                           ;	Return value of _strcpy is never used
  6448  003B98  0012               	return		;funcret
  6449  003B9A                     __end_of_strcpy:
  6450                           	opt stack 0
  6451                           tblptru	equ	0xFF8
  6452                           tblptrh	equ	0xFF7
  6453                           tblptrl	equ	0xFF6
  6454                           tablat	equ	0xFF5
  6455                           prodh	equ	0xFF4
  6456                           prodl	equ	0xFF3
  6457                           intcon2	equ	0xFF1
  6458                           postinc0	equ	0xFEE
  6459                           wreg	equ	0xFE8
  6460                           postdec1	equ	0xFE5
  6461                           fsr1l	equ	0xFE1
  6462                           indf2	equ	0xFDF
  6463                           fsr2h	equ	0xFDA
  6464                           fsr2l	equ	0xFD9
  6465                           status	equ	0xFD8
  6466                           
  6467 ;; *************** function _checker *****************
  6468 ;; Defined at:
  6469 ;;		line 787 in file "Lab9p1.c"
  6470 ;; Parameters:    Size  Location     Type
  6471 ;;		None
  6472 ;; Auto vars:     Size  Location     Type
  6473 ;;		None
  6474 ;; Return value:  Size  Location     Type
  6475 ;;		None               void
  6476 ;; Registers used:
  6477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6478 ;; Tracked objects:
  6479 ;;		On entry : 0/0
  6480 ;;		On exit  : 0/0
  6481 ;;		Unchanged: 0/0
  6482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6487 ;;Total ram usage:        0 bytes
  6488 ;; Hardware stack levels used:    1
  6489 ;; Hardware stack levels required when called:    6
  6490 ;; This function calls:
  6491 ;;		_Do_Init
  6492 ;;		_printf
  6493 ;; This function is called by:
  6494 ;;		_WAIT_1_SEC
  6495 ;; This function uses a non-reentrant model
  6496 ;;
  6497                           
  6498                           	psect	text27
  6499  003BF4                     __ptext27:
  6500                           	opt stack 0
  6501  003BF4                     _checker:
  6502                           	opt stack 21
  6503                           
  6504                           ;Lab9p1.c: 789: Do_Init();
  6505                           
  6506                           ;incstack = 0
  6507  003BF4  EC94  F01E         	call	_Do_Init	;wreg free
  6508                           
  6509                           ;Lab9p1.c: 791: if (INT0_flag == 1)
  6510  003BF8  0100               	movlb	0	; () banked
  6511  003BFA  0583               	decf	_INT0_flag& (0+255),w,b
  6512  003BFC  0100               	movlb	0	; () banked
  6513  003BFE  1184               	iorwf	(_INT0_flag+1)& (0+255),w,b
  6514  003C00  A4D8               	btfss	status,2,c
  6515  003C02  D00C               	goto	l566
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;Lab9p1.c: 792: {
  6519                           ;Lab9p1.c: 793: INT0_flag = 0;
  6520  003C04  0E00               	movlw	0
  6521  003C06  0100               	movlb	0	; () banked
  6522  003C08  6F84               	movwf	(_INT0_flag+1)& (0+255),b
  6523  003C0A  0E00               	movlw	0
  6524  003C0C  6F83               	movwf	_INT0_flag& (0+255),b
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;Lab9p1.c: 794: printf ("INT0 interrupt pin detected \r\n");
  6528  003C0E  0E66               	movlw	low STR_16
  6529  003C10  6E4E               	movwf	printf@f,c
  6530  003C12  0EFF               	movlw	high STR_16
  6531  003C14  6E4F               	movwf	printf@f+1,c
  6532  003C16  EC0E  F000         	call	_printf	;wreg free
  6533  003C1A  D000               	goto	l566
  6534  003C1C                     l566:
  6535  003C1C  0012               	return		;funcret
  6536  003C1E                     __end_of_checker:
  6537                           	opt stack 0
  6538                           tblptru	equ	0xFF8
  6539                           tblptrh	equ	0xFF7
  6540                           tblptrl	equ	0xFF6
  6541                           tablat	equ	0xFF5
  6542                           prodh	equ	0xFF4
  6543                           prodl	equ	0xFF3
  6544                           intcon2	equ	0xFF1
  6545                           postinc0	equ	0xFEE
  6546                           wreg	equ	0xFE8
  6547                           postdec1	equ	0xFE5
  6548                           fsr1l	equ	0xFE1
  6549                           indf2	equ	0xFDF
  6550                           fsr2h	equ	0xFDA
  6551                           fsr2l	equ	0xFD9
  6552                           status	equ	0xFD8
  6553                           
  6554 ;; *************** function _printf *****************
  6555 ;; Defined at:
  6556 ;;		line 464 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  6557 ;; Parameters:    Size  Location     Type
  6558 ;;  f               2   77[COMRAM] PTR const unsigned char 
  6559 ;;		 -> STR_16(31), STR_15(19), 
  6560 ;; Auto vars:     Size  Location     Type
  6561 ;;  tmpval          4    9[BANK0 ] struct .
  6562 ;;  val             4    5[BANK0 ] unsigned long 
  6563 ;;  fval            3   19[BANK0 ] unsigned long 
  6564 ;;  cp              3    0        PTR const unsigned char 
  6565 ;;  prec            2   22[BANK0 ] int 
  6566 ;;  width           2   17[BANK0 ] int 
  6567 ;;  flag            2   15[BANK0 ] unsigned short 
  6568 ;;  exp             2   13[BANK0 ] int 
  6569 ;;  ap              2    3[BANK0 ] PTR void [1]
  6570 ;;		 -> ?_printf(2), 
  6571 ;;  len             2    0        unsigned int 
  6572 ;;  c               1   24[BANK0 ] char 
  6573 ;;  d               1    0        unsigned char 
  6574 ;; Return value:  Size  Location     Type
  6575 ;;                  2   77[COMRAM] int 
  6576 ;; Registers used:
  6577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6578 ;; Tracked objects:
  6579 ;;		On entry : 0/0
  6580 ;;		On exit  : 0/0
  6581 ;;		Unchanged: 0/0
  6582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6583 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6584 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6585 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6586 ;;      Totals:        11      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6587 ;;Total ram usage:       36 bytes
  6588 ;; Hardware stack levels used:    1
  6589 ;; Hardware stack levels required when called:    5
  6590 ;; This function calls:
  6591 ;;		___awdiv
  6592 ;;		___ftadd
  6593 ;;		___ftge
  6594 ;;		___ftmul
  6595 ;;		___ftneg
  6596 ;;		___ftsub
  6597 ;;		___fttol
  6598 ;;		___lldiv
  6599 ;;		___llmod
  6600 ;;		___lltoft
  6601 ;;		___wmul
  6602 ;;		__div_to_l_
  6603 ;;		__tdiv_to_l_
  6604 ;;		_fround
  6605 ;;		_isdigit
  6606 ;;		_putch
  6607 ;;		_scale
  6608 ;; This function is called by:
  6609 ;;		_update_LCD_misc
  6610 ;;		_checker
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613                           
  6614                           	psect	text28
  6615  00001C                     __ptext28:
  6616                           	opt stack 0
  6617  00001C                     _printf:
  6618                           	opt stack 21
  6619                           
  6620                           ;doprnt.c: 466: va_list ap;
  6621                           ;doprnt.c: 499: signed char c;
  6622                           ;doprnt.c: 501: int width;
  6623                           ;doprnt.c: 504: int prec;
  6624                           ;doprnt.c: 508: unsigned short flag;
  6625                           ;doprnt.c: 515: char d;
  6626                           ;doprnt.c: 516: double fval;
  6627                           ;doprnt.c: 517: int exp;
  6628                           ;doprnt.c: 523: union {
  6629                           ;doprnt.c: 524: unsigned long vd;
  6630                           ;doprnt.c: 525: double integ;
  6631                           ;doprnt.c: 526: } tmpval;
  6632                           ;doprnt.c: 528: unsigned long val;
  6633                           ;doprnt.c: 529: unsigned len;
  6634                           ;doprnt.c: 530: const char * cp;
  6635                           ;doprnt.c: 533: *ap = __va_start();
  6636                           
  6637                           ;incstack = 0
  6638  00001C  0E50               	movlw	low (?_printf+2)
  6639  00001E  0100               	movlb	0	; () banked
  6640  000020  6FE0               	movwf	printf@ap& (0+255),b
  6641  000022  0E00               	movlw	high (?_printf+2)
  6642  000024  0100               	movlb	0	; () banked
  6643  000026  6FE1               	movwf	(printf@ap+1)& (0+255),b
  6644                           
  6645                           ;doprnt.c: 536: while(c = *f++) {
  6646  000028  EF4B  F005         	goto	l6646
  6647  00002C                     l6384:
  6648                           
  6649                           ; BSR set to: 0
  6650                           ;doprnt.c: 538: if(c != '%')
  6651  00002C  0E25               	movlw	37
  6652  00002E  0100               	movlb	0	; () banked
  6653  000030  19F5               	xorwf	printf@c& (0+255),w,b
  6654  000032  B4D8               	btfsc	status,2,c
  6655  000034  D006               	goto	l6388
  6656                           
  6657                           ; BSR set to: 0
  6658                           ;doprnt.c: 540: {
  6659                           ;doprnt.c: 541: (putch(c) );
  6660  000036  0100               	movlb	0	; () banked
  6661  000038  51F5               	movf	printf@c& (0+255),w,b
  6662  00003A  ECE7  F01E         	call	_putch
  6663                           
  6664                           ;doprnt.c: 542: continue;
  6665  00003E  EF4B  F005         	goto	l6646
  6666  000042                     l6388:
  6667                           
  6668                           ;doprnt.c: 543: }
  6669                           ;doprnt.c: 546: width = 0;
  6670  000042  0E00               	movlw	0
  6671  000044  0100               	movlb	0	; () banked
  6672  000046  6FEF               	movwf	(printf@width+1)& (0+255),b
  6673  000048  0E00               	movlw	0
  6674  00004A  6FEE               	movwf	printf@width& (0+255),b
  6675                           
  6676                           ;doprnt.c: 548: flag = 0;
  6677  00004C  0E00               	movlw	0
  6678  00004E  0100               	movlb	0	; () banked
  6679  000050  6FED               	movwf	(printf@flag+1)& (0+255),b
  6680  000052  0E00               	movlw	0
  6681  000054  6FEC               	movwf	printf@flag& (0+255),b
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;doprnt.c: 551: switch(*f) {
  6685                           
  6686                           ;doprnt.c: 550: for(;;) {
  6687  000056  D006               	goto	l6394
  6688  000058                     l6390:
  6689                           
  6690                           ;doprnt.c: 580: flag |= 0x04;
  6691  000058  0100               	movlb	0	; () banked
  6692  00005A  85EC               	bsf	printf@flag& (0+255),2,b
  6693                           
  6694                           ;doprnt.c: 581: f++;
  6695  00005C  4A4E               	infsnz	printf@f,f,c
  6696  00005E  2A4F               	incf	printf@f+1,f,c
  6697                           
  6698                           ;doprnt.c: 582: continue;
  6699  000060  D001               	goto	l6394
  6700                           
  6701                           ; BSR set to: 0
  6702                           ;doprnt.c: 584: }
  6703  000062  D00B               	goto	l6396
  6704  000064                     l6394:
  6705  000064  C04E  FFF6         	movff	printf@f,tblptrl
  6706  000068  C04F  FFF7         	movff	printf@f+1,tblptrh
  6707  00006C                     	if	0	;tblptru may be non-zero
  6708  00006C                     	endif
  6709  00006C                     	if	0	;tblptru may be non-zero
  6710  00006C                     	endif
  6711  00006C  0008               	tblrd		*
  6712  00006E  50F5               	movf	tablat,w,c
  6713                           
  6714                           ; Switch size 1, requested type "space"
  6715                           ; Number of cases is 1, Range of values is 48 to 48
  6716                           ; switch strategies available:
  6717                           ; Name         Instructions Cycles
  6718                           ; simple_byte            4     3 (average)
  6719                           ;	Chosen strategy is simple_byte
  6720  000070  0A30               	xorlw	48	; case 48
  6721  000072  B4D8               	btfsc	status,2,c
  6722  000074  D7F1               	goto	l6390
  6723                           
  6724                           ;doprnt.c: 585: break;
  6725  000076  D001               	goto	l6396
  6726                           
  6727                           ;doprnt.c: 586: }
  6728  000078  D7F5               	goto	l6394
  6729  00007A                     l6396:
  6730                           
  6731                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6732  00007A  C04E  FFF6         	movff	printf@f,tblptrl
  6733  00007E  C04F  FFF7         	movff	printf@f+1,tblptrh
  6734  000082                     	if	0	;tblptru may be non-zero
  6735  000082                     	endif
  6736  000082                     	if	0	;tblptru may be non-zero
  6737  000082                     	endif
  6738  000082  0008               	tblrd		*
  6739  000084  50F5               	movf	tablat,w,c
  6740  000086  EC5D  F01E         	call	_isdigit
  6741  00008A  A0D8               	btfss	status,0,c
  6742  00008C  D038               	goto	l6408
  6743                           
  6744                           ;doprnt.c: 598: width = 0;
  6745  00008E  0E00               	movlw	0
  6746  000090  0100               	movlb	0	; () banked
  6747  000092  6FEF               	movwf	(printf@width+1)& (0+255),b
  6748  000094  0E00               	movlw	0
  6749  000096  6FEE               	movwf	printf@width& (0+255),b
  6750  000098  D000               	goto	l6400
  6751  00009A                     l6400:
  6752                           
  6753                           ;doprnt.c: 600: width *= 10;
  6754  00009A  C0EE  F01D         	movff	printf@width,___wmul@multiplier
  6755  00009E  C0EF  F01E         	movff	printf@width+1,___wmul@multiplier+1
  6756  0000A2  0E00               	movlw	0
  6757  0000A4  6E20               	movwf	___wmul@multiplicand+1,c
  6758  0000A6  0E0A               	movlw	10
  6759  0000A8  6E1F               	movwf	___wmul@multiplicand,c
  6760  0000AA  EC24  F01E         	call	___wmul	;wreg free
  6761  0000AE  C01D  F0EE         	movff	?___wmul,printf@width
  6762  0000B2  C01E  F0EF         	movff	?___wmul+1,printf@width+1
  6763                           
  6764                           ;doprnt.c: 601: width += *f++ - '0';
  6765  0000B6  0ED0               	movlw	208
  6766  0000B8  6E53               	movwf	??_printf& (0+255),c
  6767  0000BA  0EFF               	movlw	255
  6768  0000BC  6E54               	movwf	(??_printf+1)& (0+255),c
  6769  0000BE  C04E  FFF6         	movff	printf@f,tblptrl
  6770  0000C2  C04F  FFF7         	movff	printf@f+1,tblptrh
  6771  0000C6                     	if	0	;tblptru may be non-zero
  6772  0000C6                     	endif
  6773  0000C6                     	if	0	;tblptru may be non-zero
  6774  0000C6                     	endif
  6775  0000C6  0008               	tblrd		*
  6776  0000C8  50F5               	movf	tablat,w,c
  6777  0000CA  6E55               	movwf	(??_printf+2)& (0+255),c
  6778  0000CC  6A56               	clrf	(??_printf+3)& (0+255),c
  6779  0000CE  5053               	movf	??_printf,w,c
  6780  0000D0  2655               	addwf	??_printf+2,f,c
  6781  0000D2  5054               	movf	??_printf+1,w,c
  6782  0000D4  2256               	addwfc	??_printf+3,f,c
  6783  0000D6  5055               	movf	??_printf+2,w,c
  6784  0000D8  0100               	movlb	0	; () banked
  6785  0000DA  27EE               	addwf	printf@width& (0+255),f,b
  6786  0000DC  5056               	movf	??_printf+3,w,c
  6787  0000DE  0100               	movlb	0	; () banked
  6788  0000E0  23EF               	addwfc	(printf@width+1)& (0+255),f,b
  6789                           
  6790                           ; BSR set to: 0
  6791  0000E2  4A4E               	infsnz	printf@f,f,c
  6792  0000E4  2A4F               	incf	printf@f+1,f,c
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6796  0000E6  C04E  FFF6         	movff	printf@f,tblptrl
  6797  0000EA  C04F  FFF7         	movff	printf@f+1,tblptrh
  6798  0000EE                     	if	0	;tblptru may be non-zero
  6799  0000EE                     	endif
  6800  0000EE                     	if	0	;tblptru may be non-zero
  6801  0000EE                     	endif
  6802  0000EE  0008               	tblrd		*
  6803  0000F0  50F5               	movf	tablat,w,c
  6804  0000F2  EC5D  F01E         	call	_isdigit
  6805  0000F6  A0D8               	btfss	status,0,c
  6806  0000F8  D002               	goto	l6408
  6807  0000FA  D7CF               	goto	l6400
  6808  0000FC  D000               	goto	l6408
  6809  0000FE                     l6408:
  6810                           
  6811                           ;doprnt.c: 608: }
  6812                           ;doprnt.c: 611: if(*f == '.') {
  6813  0000FE  C04E  FFF6         	movff	printf@f,tblptrl
  6814  000102  C04F  FFF7         	movff	printf@f+1,tblptrh
  6815  000106                     	if	0	;tblptru may be non-zero
  6816  000106                     	endif
  6817  000106                     	if	0	;tblptru may be non-zero
  6818  000106                     	endif
  6819  000106  0008               	tblrd		*
  6820  000108  50F5               	movf	tablat,w,c
  6821  00010A  0A2E               	xorlw	46
  6822  00010C  A4D8               	btfss	status,2,c
  6823  00010E  D034               	goto	l6420
  6824                           
  6825                           ;doprnt.c: 612: flag |= 0x4000;
  6826  000110  0100               	movlb	0	; () banked
  6827  000112  8DED               	bsf	(printf@flag+1)& (0+255),6,b
  6828                           
  6829                           ;doprnt.c: 613: f++;
  6830  000114  4A4E               	infsnz	printf@f,f,c
  6831  000116  2A4F               	incf	printf@f+1,f,c
  6832                           
  6833                           ; BSR set to: 0
  6834                           ;doprnt.c: 620: {
  6835                           ;doprnt.c: 621: prec = 0;
  6836  000118  0E00               	movlw	0
  6837  00011A  0100               	movlb	0	; () banked
  6838  00011C  6FF4               	movwf	(printf@prec+1)& (0+255),b
  6839  00011E  0E00               	movlw	0
  6840  000120  6FF3               	movwf	printf@prec& (0+255),b
  6841                           
  6842                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  6843  000122  D01E               	goto	l6418
  6844  000124                     l6414:
  6845                           
  6846                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  6847  000124  C0F3  F01D         	movff	printf@prec,___wmul@multiplier
  6848  000128  C0F4  F01E         	movff	printf@prec+1,___wmul@multiplier+1
  6849  00012C  0E00               	movlw	0
  6850  00012E  6E20               	movwf	___wmul@multiplicand+1,c
  6851  000130  0E0A               	movlw	10
  6852  000132  6E1F               	movwf	___wmul@multiplicand,c
  6853  000134  EC24  F01E         	call	___wmul	;wreg free
  6854  000138  C04E  FFF6         	movff	printf@f,tblptrl
  6855  00013C  C04F  FFF7         	movff	printf@f+1,tblptrh
  6856  000140                     	if	0	;tblptru may be non-zero
  6857  000140                     	endif
  6858  000140                     	if	0	;tblptru may be non-zero
  6859  000140                     	endif
  6860  000140  0008               	tblrd		*
  6861  000142  50F5               	movf	tablat,w,c
  6862  000144  261D               	addwf	?___wmul,f,c
  6863  000146  0E00               	movlw	0
  6864  000148  221E               	addwfc	?___wmul+1,f,c
  6865  00014A  0ED0               	movlw	208
  6866  00014C  241D               	addwf	?___wmul,w,c
  6867  00014E  0100               	movlb	0	; () banked
  6868  000150  6FF3               	movwf	printf@prec& (0+255),b
  6869  000152  0EFF               	movlw	255
  6870  000154  201E               	addwfc	?___wmul+1,w,c
  6871  000156  0100               	movlb	0	; () banked
  6872  000158  6FF4               	movwf	(printf@prec+1)& (0+255),b
  6873                           
  6874                           ; BSR set to: 0
  6875  00015A  4A4E               	infsnz	printf@f,f,c
  6876  00015C  2A4F               	incf	printf@f+1,f,c
  6877  00015E  D000               	goto	l6418
  6878  000160                     l6418:
  6879                           
  6880                           ; BSR set to: 0
  6881  000160  C04E  FFF6         	movff	printf@f,tblptrl
  6882  000164  C04F  FFF7         	movff	printf@f+1,tblptrh
  6883  000168                     	if	0	;tblptru may be non-zero
  6884  000168                     	endif
  6885  000168                     	if	0	;tblptru may be non-zero
  6886  000168                     	endif
  6887  000168  0008               	tblrd		*
  6888  00016A  50F5               	movf	tablat,w,c
  6889  00016C  EC5D  F01E         	call	_isdigit
  6890  000170  A0D8               	btfss	status,0,c
  6891  000172  D012               	goto	l6428
  6892  000174  D7D7               	goto	l6414
  6893                           
  6894                           ;doprnt.c: 624: }
  6895                           ;doprnt.c: 625: } else {
  6896  000176  D010               	goto	l6428
  6897  000178                     l6420:
  6898                           
  6899                           ;doprnt.c: 626: prec = 0;
  6900  000178  0E00               	movlw	0
  6901  00017A  0100               	movlb	0	; () banked
  6902  00017C  6FF4               	movwf	(printf@prec+1)& (0+255),b
  6903  00017E  0E00               	movlw	0
  6904  000180  6FF3               	movwf	printf@prec& (0+255),b
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;doprnt.c: 628: flag |= 0x1000;
  6908  000182  0100               	movlb	0	; () banked
  6909  000184  89ED               	bsf	(printf@flag+1)& (0+255),4,b
  6910                           
  6911                           ; BSR set to: 0
  6912                           ;doprnt.c: 630: }
  6913                           ;doprnt.c: 635: switch(c = *f++) {
  6914  000186  D008               	goto	l6428
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;doprnt.c: 638: goto alldone;
  6918                           
  6919                           ;doprnt.c: 637: case 0:
  6920  000188  EF5B  F005         	goto	l696
  6921  00018C                     l6424:
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;doprnt.c: 663: flag |= 0x400;
  6925  00018C  0100               	movlb	0	; () banked
  6926  00018E  85ED               	bsf	(printf@flag+1)& (0+255),2,b
  6927                           
  6928                           ;doprnt.c: 664: break;
  6929  000190  D017               	goto	l6430
  6930                           
  6931                           ; BSR set to: 0
  6932                           ;doprnt.c: 813: continue;
  6933                           
  6934                           ;doprnt.c: 802: default:
  6935  000192  EF4B  F005         	goto	l6646
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;doprnt.c: 822: }
  6939  000196  D014               	goto	l6430
  6940  000198                     l6428:
  6941  000198  C04E  FFF6         	movff	printf@f,tblptrl
  6942  00019C  C04F  FFF7         	movff	printf@f+1,tblptrh
  6943  0001A0  4A4E               	infsnz	printf@f,f,c
  6944  0001A2  2A4F               	incf	printf@f+1,f,c
  6945  0001A4                     	if	0	;tblptru may be non-zero
  6946  0001A4                     	endif
  6947  0001A4                     	if	0	;tblptru may be non-zero
  6948  0001A4                     	endif
  6949  0001A4  0008               	tblrd		*
  6950  0001A6  CFF5 F0F5          	movff	tablat,printf@c
  6951  0001AA  0100               	movlb	0	; () banked
  6952  0001AC  51F5               	movf	printf@c& (0+255),w,b
  6953                           
  6954                           ; Switch size 1, requested type "space"
  6955                           ; Number of cases is 2, Range of values is 0 to 102
  6956                           ; switch strategies available:
  6957                           ; Name         Instructions Cycles
  6958                           ; simple_byte            7     4 (average)
  6959                           ;	Chosen strategy is simple_byte
  6960  0001AE  0A00               	xorlw	0	; case 0
  6961  0001B0  B4D8               	btfsc	status,2,c
  6962  0001B2  EF5B  F005         	goto	l696
  6963  0001B6  0A66               	xorlw	102	; case 102
  6964  0001B8  B4D8               	btfsc	status,2,c
  6965  0001BA  D7E8               	goto	l6424
  6966  0001BC  EF4B  F005         	goto	l6646
  6967  0001C0                     l6430:
  6968                           
  6969                           ; BSR set to: 0
  6970                           ;doprnt.c: 825: if(flag & (0x700)) {
  6971  0001C0  0E07               	movlw	7
  6972  0001C2  0100               	movlb	0	; () banked
  6973  0001C4  15ED               	andwf	(printf@flag+1)& (0+255),w,b
  6974  0001C6  B4D8               	btfsc	status,2,c
  6975  0001C8  D385               	goto	l6590
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;doprnt.c: 827: if(flag & 0x1000)
  6979  0001CA  0100               	movlb	0	; () banked
  6980  0001CC  A9ED               	btfss	(printf@flag+1)& (0+255),4,b
  6981  0001CE  D006               	goto	l6436
  6982                           
  6983                           ; BSR set to: 0
  6984                           ;doprnt.c: 829: prec = 6;
  6985  0001D0  0E00               	movlw	0
  6986  0001D2  0100               	movlb	0	; () banked
  6987  0001D4  6FF4               	movwf	(printf@prec+1)& (0+255),b
  6988  0001D6  0E06               	movlw	6
  6989  0001D8  6FF3               	movwf	printf@prec& (0+255),b
  6990  0001DA  D000               	goto	l6436
  6991  0001DC                     l6436:
  6992                           
  6993                           ; BSR set to: 0
  6994                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6995  0001DC  C0E0  FFD9         	movff	printf@ap,fsr2l
  6996  0001E0  C0E1  FFDA         	movff	printf@ap+1,fsr2h
  6997  0001E4  CFDE F0F0          	movff	postinc2,printf@fval
  6998  0001E8  CFDE F0F1          	movff	postinc2,printf@fval+1
  6999  0001EC  CFDD F0F2          	movff	postdec2,printf@fval+2
  7000                           
  7001                           ; BSR set to: 0
  7002  0001F0  0E03               	movlw	3
  7003  0001F2  0100               	movlb	0	; () banked
  7004  0001F4  27E0               	addwf	printf@ap& (0+255),f,b
  7005  0001F6  0E00               	movlw	0
  7006  0001F8  23E1               	addwfc	(printf@ap+1)& (0+255),f,b
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;doprnt.c: 831: if(fval < 0.0) {
  7010  0001FA  0100               	movlb	0	; () banked
  7011  0001FC  AFF2               	btfss	(printf@fval+2)& (0+255),7,b
  7012  0001FE  D012               	goto	l6446
  7013                           
  7014                           ; BSR set to: 0
  7015                           ;doprnt.c: 832: fval = -fval;
  7016  000200  C0F0  F00F         	movff	printf@fval,___ftneg@f1
  7017  000204  C0F1  F010         	movff	printf@fval+1,___ftneg@f1+1
  7018  000208  C0F2  F011         	movff	printf@fval+2,___ftneg@f1+2
  7019  00020C  EC4B  F01E         	call	___ftneg	;wreg free
  7020  000210  C00F  F0F0         	movff	?___ftneg,printf@fval
  7021  000214  C010  F0F1         	movff	?___ftneg+1,printf@fval+1
  7022  000218  C011  F0F2         	movff	?___ftneg+2,printf@fval+2
  7023                           
  7024                           ;doprnt.c: 833: flag |= 0x03;
  7025  00021C  0E03               	movlw	3
  7026  00021E  0100               	movlb	0	; () banked
  7027  000220  13EC               	iorwf	printf@flag& (0+255),f,b
  7028  000222  D000               	goto	l6446
  7029  000224                     l6446:
  7030                           
  7031                           ; BSR set to: 0
  7032                           ;doprnt.c: 834: }
  7033                           ;doprnt.c: 835: exp = 0;
  7034  000224  0E00               	movlw	0
  7035  000226  0100               	movlb	0	; () banked
  7036  000228  6FEB               	movwf	(printf@exp+1)& (0+255),b
  7037  00022A  0E00               	movlw	0
  7038  00022C  6FEA               	movwf	printf@exp& (0+255),b
  7039                           
  7040                           ; BSR set to: 0
  7041                           ;doprnt.c: 836: if( fval!=0) {
  7042  00022E  0100               	movlb	0	; () banked
  7043  000230  51F0               	movf	printf@fval& (0+255),w,b
  7044  000232  0100               	movlb	0	; () banked
  7045  000234  11F1               	iorwf	(printf@fval+1)& (0+255),w,b
  7046  000236  0100               	movlb	0	; () banked
  7047  000238  11F2               	iorwf	(printf@fval+2)& (0+255),w,b
  7048  00023A  B4D8               	btfsc	status,2,c
  7049  00023C  D08D               	goto	l6474
  7050                           
  7051                           ; BSR set to: 0
  7052                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  7053  00023E  0E82               	movlw	130
  7054  000240  6E53               	movwf	??_printf& (0+255),c
  7055  000242  0EFF               	movlw	255
  7056  000244  6E54               	movwf	(??_printf+1)& (0+255),c
  7057  000246  C0F0  F055         	movff	printf@fval,??_printf+2
  7058  00024A  C0F1  F056         	movff	printf@fval+1,??_printf+3
  7059  00024E  C0F2  F057         	movff	printf@fval+2,??_printf+4
  7060  000252  C0F3  F058         	movff	printf@fval+3,??_printf+5
  7061  000256  0E10               	movlw	16
  7062  000258  D005               	goto	u6370
  7063  00025A                     u6375:
  7064  00025A  90D8               	bcf	status,0,c
  7065  00025C  3258               	rrcf	??_printf+5,f,c
  7066  00025E  3257               	rrcf	??_printf+4,f,c
  7067  000260  3256               	rrcf	??_printf+3,f,c
  7068  000262  3255               	rrcf	??_printf+2,f,c
  7069  000264                     u6370:
  7070  000264  2EE8               	decfsz	wreg,f,c
  7071  000266  D7F9               	goto	u6375
  7072  000268  5055               	movf	??_printf+2,w,c
  7073  00026A  2453               	addwf	??_printf,w,c
  7074  00026C  0100               	movlb	0	; () banked
  7075  00026E  6FEA               	movwf	printf@exp& (0+255),b
  7076  000270  0E00               	movlw	0
  7077  000272  2054               	addwfc	??_printf+1,w,c
  7078  000274  0100               	movlb	0	; () banked
  7079  000276  6FEB               	movwf	(printf@exp+1)& (0+255),b
  7080                           
  7081                           ; BSR set to: 0
  7082                           ;doprnt.c: 838: exp--;
  7083  000278  0100               	movlb	0	; () banked
  7084  00027A  07EA               	decf	printf@exp& (0+255),f,b
  7085  00027C  A0D8               	btfss	status,0,c
  7086  00027E  07EB               	decf	(printf@exp+1)& (0+255),f,b
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;doprnt.c: 839: exp *= 3;
  7090  000280  C0EA  F01D         	movff	printf@exp,___wmul@multiplier
  7091  000284  C0EB  F01E         	movff	printf@exp+1,___wmul@multiplier+1
  7092  000288  0E00               	movlw	0
  7093  00028A  6E20               	movwf	___wmul@multiplicand+1,c
  7094  00028C  0E03               	movlw	3
  7095  00028E  6E1F               	movwf	___wmul@multiplicand,c
  7096  000290  EC24  F01E         	call	___wmul	;wreg free
  7097  000294  C01D  F0EA         	movff	?___wmul,printf@exp
  7098  000298  C01E  F0EB         	movff	?___wmul+1,printf@exp+1
  7099                           
  7100                           ;doprnt.c: 840: exp /= 10;
  7101  00029C  C0EA  F015         	movff	printf@exp,___awdiv@dividend
  7102  0002A0  C0EB  F016         	movff	printf@exp+1,___awdiv@dividend+1
  7103  0002A4  0E00               	movlw	0
  7104  0002A6  6E18               	movwf	___awdiv@divisor+1,c
  7105  0002A8  0E0A               	movlw	10
  7106  0002AA  6E17               	movwf	___awdiv@divisor,c
  7107  0002AC  ECF1  F018         	call	___awdiv	;wreg free
  7108  0002B0  C015  F0EA         	movff	?___awdiv,printf@exp
  7109  0002B4  C016  F0EB         	movff	?___awdiv+1,printf@exp+1
  7110                           
  7111                           ;doprnt.c: 841: if(exp < 0)
  7112  0002B8  0100               	movlb	0	; () banked
  7113  0002BA  AFEB               	btfss	(printf@exp+1)& (0+255),7,b
  7114  0002BC  D005               	goto	l6462
  7115                           
  7116                           ; BSR set to: 0
  7117                           ;doprnt.c: 842: exp--;
  7118  0002BE  0100               	movlb	0	; () banked
  7119  0002C0  07EA               	decf	printf@exp& (0+255),f,b
  7120  0002C2  A0D8               	btfss	status,0,c
  7121  0002C4  07EB               	decf	(printf@exp+1)& (0+255),f,b
  7122  0002C6  D000               	goto	l6462
  7123  0002C8                     l6462:
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  7127  0002C8  0100               	movlb	0	; () banked
  7128  0002CA  51EA               	movf	printf@exp& (0+255),w,b
  7129  0002CC  0800               	sublw	0
  7130  0002CE  ECEB  F008         	call	_scale
  7131  0002D2  C032  F0E6         	movff	?_scale,printf@tmpval
  7132  0002D6  C033  F0E7         	movff	?_scale+1,printf@tmpval+1
  7133  0002DA  C034  F0E8         	movff	?_scale+2,printf@tmpval+2
  7134                           
  7135                           ;doprnt.c: 847: tmpval.integ *= fval;
  7136  0002DE  C0E6  F023         	movff	printf@tmpval,___ftmul@f1
  7137  0002E2  C0E7  F024         	movff	printf@tmpval+1,___ftmul@f1+1
  7138  0002E6  C0E8  F025         	movff	printf@tmpval+2,___ftmul@f1+2
  7139  0002EA  C0F0  F026         	movff	printf@fval,___ftmul@f2
  7140  0002EE  C0F1  F027         	movff	printf@fval+1,___ftmul@f2+1
  7141  0002F2  C0F2  F028         	movff	printf@fval+2,___ftmul@f2+2
  7142  0002F6  EC10  F014         	call	___ftmul	;wreg free
  7143  0002FA  C023  F0E6         	movff	?___ftmul,printf@tmpval
  7144  0002FE  C024  F0E7         	movff	?___ftmul+1,printf@tmpval+1
  7145  000302  C025  F0E8         	movff	?___ftmul+2,printf@tmpval+2
  7146                           
  7147                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  7148  000306  C0E6  F00F         	movff	printf@tmpval,___ftge@ff1
  7149  00030A  C0E7  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  7150  00030E  C0E8  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  7151  000312  0E00               	movlw	0
  7152  000314  6E12               	movwf	___ftge@ff2,c
  7153  000316  0E80               	movlw	128
  7154  000318  6E13               	movwf	___ftge@ff2+1,c
  7155  00031A  0E3F               	movlw	63
  7156  00031C  6E14               	movwf	___ftge@ff2+2,c
  7157  00031E  ECA6  F018         	call	___ftge	;wreg free
  7158  000322  B0D8               	btfsc	status,0,c
  7159  000324  D005               	goto	l6470
  7160                           
  7161                           ;doprnt.c: 849: exp--;
  7162  000326  0100               	movlb	0	; () banked
  7163  000328  07EA               	decf	printf@exp& (0+255),f,b
  7164  00032A  A0D8               	btfss	status,0,c
  7165  00032C  07EB               	decf	(printf@exp+1)& (0+255),f,b
  7166  00032E  D014               	goto	l6474
  7167  000330                     l6470:
  7168                           
  7169                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  7170  000330  C0E6  F00F         	movff	printf@tmpval,___ftge@ff1
  7171  000334  C0E7  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  7172  000338  C0E8  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  7173  00033C  0E00               	movlw	0
  7174  00033E  6E12               	movwf	___ftge@ff2,c
  7175  000340  0E20               	movlw	32
  7176  000342  6E13               	movwf	___ftge@ff2+1,c
  7177  000344  0E41               	movlw	65
  7178  000346  6E14               	movwf	___ftge@ff2+2,c
  7179  000348  ECA6  F018         	call	___ftge	;wreg free
  7180  00034C  A0D8               	btfss	status,0,c
  7181  00034E  D004               	goto	l6474
  7182                           
  7183                           ;doprnt.c: 851: exp++;
  7184  000350  0100               	movlb	0	; () banked
  7185  000352  4BEA               	infsnz	printf@exp& (0+255),f,b
  7186  000354  2BEB               	incf	(printf@exp+1)& (0+255),f,b
  7187                           
  7188                           ; BSR set to: 0
  7189                           
  7190                           ; BSR set to: 0
  7191  000356  D000               	goto	l6474
  7192  000358                     l6474:
  7193                           
  7194                           ;doprnt.c: 852: }
  7195                           ;doprnt.c: 1112: if(prec <= 12)
  7196  000358  0100               	movlb	0	; () banked
  7197  00035A  BFF4               	btfsc	(printf@prec+1)& (0+255),7,b
  7198  00035C  D008               	goto	l6476
  7199  00035E  0100               	movlb	0	; () banked
  7200  000360  51F4               	movf	(printf@prec+1)& (0+255),w,b
  7201  000362  E11E               	bnz	l6478
  7202  000364  0E0D               	movlw	13
  7203  000366  0100               	movlb	0	; () banked
  7204  000368  5DF3               	subwf	printf@prec& (0+255),w,b
  7205  00036A  B0D8               	btfsc	status,0,c
  7206  00036C  D019               	goto	l6478
  7207  00036E                     l6476:
  7208                           
  7209                           ; BSR set to: 0
  7210                           ;doprnt.c: 1113: fval += fround(prec);
  7211  00036E  C0F0  F03C         	movff	printf@fval,___ftadd@f1
  7212  000372  C0F1  F03D         	movff	printf@fval+1,___ftadd@f1+1
  7213  000376  C0F2  F03E         	movff	printf@fval+2,___ftadd@f1+2
  7214  00037A  0100               	movlb	0	; () banked
  7215  00037C  51F3               	movf	printf@prec& (0+255),w,b
  7216  00037E  EC8C  F00C         	call	_fround
  7217  000382  C032  F03F         	movff	?_fround,___ftadd@f2
  7218  000386  C033  F040         	movff	?_fround+1,___ftadd@f2+1
  7219  00038A  C034  F041         	movff	?_fround+2,___ftadd@f2+2
  7220  00038E  ECA6  F00E         	call	___ftadd	;wreg free
  7221  000392  C03C  F0F0         	movff	?___ftadd,printf@fval
  7222  000396  C03D  F0F1         	movff	?___ftadd+1,printf@fval+1
  7223  00039A  C03E  F0F2         	movff	?___ftadd+2,printf@fval+2
  7224  00039E  D000               	goto	l6478
  7225  0003A0                     l6478:
  7226                           
  7227                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  7228  0003A0  0100               	movlb	0	; () banked
  7229  0003A2  BFEB               	btfsc	(printf@exp+1)& (0+255),7,b
  7230  0003A4  D008               	goto	l6480
  7231  0003A6  0100               	movlb	0	; () banked
  7232  0003A8  51EB               	movf	(printf@exp+1)& (0+255),w,b
  7233  0003AA  E128               	bnz	l6486
  7234  0003AC  0E0A               	movlw	10
  7235  0003AE  0100               	movlb	0	; () banked
  7236  0003B0  5DEA               	subwf	printf@exp& (0+255),w,b
  7237  0003B2  B0D8               	btfsc	status,0,c
  7238  0003B4  D023               	goto	l6486
  7239  0003B6                     l6480:
  7240                           
  7241                           ; BSR set to: 0
  7242  0003B6  0100               	movlb	0	; () banked
  7243  0003B8  51F0               	movf	printf@fval& (0+255),w,b
  7244  0003BA  0100               	movlb	0	; () banked
  7245  0003BC  11F1               	iorwf	(printf@fval+1)& (0+255),w,b
  7246  0003BE  0100               	movlb	0	; () banked
  7247  0003C0  11F2               	iorwf	(printf@fval+2)& (0+255),w,b
  7248  0003C2  B4D8               	btfsc	status,2,c
  7249  0003C4  D077               	goto	l6500
  7250                           
  7251                           ; BSR set to: 0
  7252  0003C6  C0F0  F039         	movff	printf@fval,___fttol@f1
  7253  0003CA  C0F1  F03A         	movff	printf@fval+1,___fttol@f1+1
  7254  0003CE  C0F2  F03B         	movff	printf@fval+2,___fttol@f1+2
  7255  0003D2  EC79  F015         	call	___fttol	;wreg free
  7256  0003D6  5039               	movf	?___fttol,w,c
  7257  0003D8  103A               	iorwf	?___fttol+1,w,c
  7258  0003DA  103B               	iorwf	?___fttol+2,w,c
  7259  0003DC  103C               	iorwf	?___fttol+3,w,c
  7260  0003DE  A4D8               	btfss	status,2,c
  7261  0003E0  D069               	goto	l6500
  7262  0003E2  0100               	movlb	0	; () banked
  7263  0003E4  BFEB               	btfsc	(printf@exp+1)& (0+255),7,b
  7264  0003E6  D066               	goto	l6500
  7265  0003E8  0100               	movlb	0	; () banked
  7266  0003EA  51EB               	movf	(printf@exp+1)& (0+255),w,b
  7267  0003EC  E107               	bnz	l6486
  7268  0003EE  0E02               	movlw	2
  7269  0003F0  0100               	movlb	0	; () banked
  7270  0003F2  5DEA               	subwf	printf@exp& (0+255),w,b
  7271  0003F4  B0D8               	btfsc	status,0,c
  7272  0003F6  D002               	goto	l6486
  7273  0003F8  D05D               	goto	l6500
  7274  0003FA  D000               	goto	l6486
  7275  0003FC                     l6486:
  7276                           
  7277                           ; BSR set to: 0
  7278                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  7279  0003FC  C0E6  F00F         	movff	printf@tmpval,___ftge@ff1
  7280  000400  C0E7  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  7281  000404  C0E8  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  7282  000408  0E70               	movlw	112
  7283  00040A  6E12               	movwf	___ftge@ff2,c
  7284  00040C  0E89               	movlw	137
  7285  00040E  6E13               	movwf	___ftge@ff2+1,c
  7286  000410  0E40               	movlw	64
  7287  000412  6E14               	movwf	___ftge@ff2+2,c
  7288  000414  ECA6  F018         	call	___ftge	;wreg free
  7289  000418  B0D8               	btfsc	status,0,c
  7290  00041A  D003               	goto	l6490
  7291                           
  7292                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  7293  00041C  0100               	movlb	0	; () banked
  7294  00041E  0EF7               	movlw	247
  7295  000420  D002               	goto	L7
  7296  000422                     l6490:
  7297                           
  7298                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  7299  000422  0100               	movlb	0	; () banked
  7300  000424  0EF8               	movlw	248
  7301  000426                     L7:
  7302  000426  27EA               	addwf	printf@exp& (0+255),f,b
  7303  000428  0EFF               	movlw	255
  7304  00042A  23EB               	addwfc	(printf@exp+1)& (0+255),f,b
  7305  00042C  D000               	goto	l6492
  7306  00042E                     l6492:
  7307                           
  7308                           ; BSR set to: 0
  7309                           ;doprnt.c: 1124: }
  7310                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  7311  00042E  0100               	movlb	0	; () banked
  7312  000430  51EA               	movf	printf@exp& (0+255),w,b
  7313  000432  ECEB  F008         	call	_scale
  7314  000436  C032  F0E6         	movff	?_scale,printf@tmpval
  7315  00043A  C033  F0E7         	movff	?_scale+1,printf@tmpval+1
  7316  00043E  C034  F0E8         	movff	?_scale+2,printf@tmpval+2
  7317                           
  7318                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  7319  000442  D017               	goto	l6496
  7320  000444  C0F0  F00F         	movff	printf@fval,__div_to_l_@f1
  7321  000448  C0F1  F010         	movff	printf@fval+1,__div_to_l_@f1+1
  7322  00044C  C0F2  F011         	movff	printf@fval+2,__div_to_l_@f1+2
  7323  000450  C0E6  F012         	movff	printf@tmpval,__div_to_l_@f2
  7324  000454  C0E7  F013         	movff	printf@tmpval+1,__div_to_l_@f2+1
  7325  000458  C0E8  F014         	movff	printf@tmpval+2,__div_to_l_@f2+2
  7326  00045C  EC8B  F013         	call	__div_to_l_	;wreg free
  7327  000460  C00F  F0E2         	movff	?__div_to_l_,printf@val
  7328  000464  C010  F0E3         	movff	?__div_to_l_+1,printf@val+1
  7329  000468  C011  F0E4         	movff	?__div_to_l_+2,printf@val+2
  7330  00046C  C012  F0E5         	movff	?__div_to_l_+3,printf@val+3
  7331  000470  D017               	goto	l6498
  7332  000472                     l6496:
  7333  000472  C0F0  F00F         	movff	printf@fval,__tdiv_to_l_@f1
  7334  000476  C0F1  F010         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  7335  00047A  C0F2  F011         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  7336  00047E  C0E6  F012         	movff	printf@tmpval,__tdiv_to_l_@f2
  7337  000482  C0E7  F013         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  7338  000486  C0E8  F014         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  7339  00048A  EC03  F013         	call	__tdiv_to_l_	;wreg free
  7340  00048E  C00F  F0E2         	movff	?__tdiv_to_l_,printf@val
  7341  000492  C010  F0E3         	movff	?__tdiv_to_l_+1,printf@val+1
  7342  000496  C011  F0E4         	movff	?__tdiv_to_l_+2,printf@val+2
  7343  00049A  C012  F0E5         	movff	?__tdiv_to_l_+3,printf@val+3
  7344  00049E  D000               	goto	l6498
  7345  0004A0                     l6498:
  7346                           
  7347                           ;doprnt.c: 1129: fval = 0.0;
  7348  0004A0  0E00               	movlw	0
  7349  0004A2  0100               	movlb	0	; () banked
  7350  0004A4  6FF0               	movwf	printf@fval& (0+255),b
  7351  0004A6  0E00               	movlw	0
  7352  0004A8  0100               	movlb	0	; () banked
  7353  0004AA  6FF1               	movwf	(printf@fval+1)& (0+255),b
  7354  0004AC  0E00               	movlw	0
  7355  0004AE  0100               	movlb	0	; () banked
  7356  0004B0  6FF2               	movwf	(printf@fval+2)& (0+255),b
  7357                           
  7358                           ;doprnt.c: 1130: } else {
  7359  0004B2  D034               	goto	l6504
  7360  0004B4                     l6500:
  7361                           
  7362                           ;doprnt.c: 1131: val = (unsigned long)fval;
  7363  0004B4  C0F0  F039         	movff	printf@fval,___fttol@f1
  7364  0004B8  C0F1  F03A         	movff	printf@fval+1,___fttol@f1+1
  7365  0004BC  C0F2  F03B         	movff	printf@fval+2,___fttol@f1+2
  7366  0004C0  EC79  F015         	call	___fttol	;wreg free
  7367  0004C4  C039  F0E2         	movff	?___fttol,printf@val
  7368  0004C8  C03A  F0E3         	movff	?___fttol+1,printf@val+1
  7369  0004CC  C03B  F0E4         	movff	?___fttol+2,printf@val+2
  7370  0004D0  C03C  F0E5         	movff	?___fttol+3,printf@val+3
  7371                           
  7372                           ;doprnt.c: 1132: fval -= (double)val;
  7373  0004D4  C0F0  F048         	movff	printf@fval,___ftsub@f1
  7374  0004D8  C0F1  F049         	movff	printf@fval+1,___ftsub@f1+1
  7375  0004DC  C0F2  F04A         	movff	printf@fval+2,___ftsub@f1+2
  7376  0004E0  C0E2  F017         	movff	printf@val,___lltoft@c
  7377  0004E4  C0E3  F018         	movff	printf@val+1,___lltoft@c+1
  7378  0004E8  C0E4  F019         	movff	printf@val+2,___lltoft@c+2
  7379  0004EC  C0E5  F01A         	movff	printf@val+3,___lltoft@c+3
  7380  0004F0  ECA5  F01B         	call	___lltoft	;wreg free
  7381  0004F4  C017  F04B         	movff	?___lltoft,___ftsub@f2
  7382  0004F8  C018  F04C         	movff	?___lltoft+1,___ftsub@f2+1
  7383  0004FC  C019  F04D         	movff	?___lltoft+2,___ftsub@f2+2
  7384  000500  EC03  F01D         	call	___ftsub	;wreg free
  7385  000504  C048  F0F0         	movff	?___ftsub,printf@fval
  7386  000508  C049  F0F1         	movff	?___ftsub+1,printf@fval+1
  7387  00050C  C04A  F0F2         	movff	?___ftsub+2,printf@fval+2
  7388                           
  7389                           ;doprnt.c: 1133: exp = 0;
  7390  000510  0E00               	movlw	0
  7391  000512  0100               	movlb	0	; () banked
  7392  000514  6FEB               	movwf	(printf@exp+1)& (0+255),b
  7393  000516  0E00               	movlw	0
  7394  000518  6FEA               	movwf	printf@exp& (0+255),b
  7395  00051A  D000               	goto	l6504
  7396  00051C                     l6504:
  7397                           
  7398                           ; BSR set to: 0
  7399                           ;doprnt.c: 1134: }
  7400                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  7401  00051C  0E01               	movlw	1
  7402  00051E  0100               	movlb	0	; () banked
  7403  000520  6FF5               	movwf	printf@c& (0+255),b
  7404  000522                     l6506:
  7405                           
  7406                           ; BSR set to: 0
  7407  000522  0E0A               	movlw	10
  7408  000524  0100               	movlb	0	; () banked
  7409  000526  19F5               	xorwf	printf@c& (0+255),w,b
  7410  000528  B4D8               	btfsc	status,2,c
  7411  00052A  D022               	goto	l6518
  7412  00052C  D001               	goto	l6510
  7413                           
  7414                           ; BSR set to: 0
  7415  00052E  D020               	goto	l6518
  7416  000530                     l6510:
  7417                           
  7418                           ; BSR set to: 0
  7419                           ;doprnt.c: 1137: if(val < dpowers[c])
  7420  000530  0100               	movlb	0	; () banked
  7421  000532  51F5               	movf	printf@c& (0+255),w,b
  7422  000534  0D04               	mullw	4
  7423  000536  0EF0               	movlw	low _dpowers
  7424  000538  24F3               	addwf	prodl,w,c
  7425  00053A  6EF6               	movwf	tblptrl,c
  7426  00053C  0EFE               	movlw	high _dpowers
  7427  00053E  20F4               	addwfc	prodh,w,c
  7428  000540  6EF7               	movwf	tblptrh,c
  7429  000542                     	if	0	;There are less than 3 active tblptr bytes
  7430  000542                     	endif
  7431  000542  0009               	tblrd		*+
  7432  000544  50F5               	movf	tablat,w,c
  7433  000546  0100               	movlb	0	; () banked
  7434  000548  5DE2               	subwf	printf@val& (0+255),w,b
  7435  00054A  0009               	tblrd		*+
  7436  00054C  50F5               	movf	tablat,w,c
  7437  00054E  0100               	movlb	0	; () banked
  7438  000550  59E3               	subwfb	(printf@val+1)& (0+255),w,b
  7439  000552  0009               	tblrd		*+
  7440  000554  50F5               	movf	tablat,w,c
  7441  000556  0100               	movlb	0	; () banked
  7442  000558  59E4               	subwfb	(printf@val+2)& (0+255),w,b
  7443  00055A  0009               	tblrd		*+
  7444  00055C  50F5               	movf	tablat,w,c
  7445  00055E  0100               	movlb	0	; () banked
  7446  000560  59E5               	subwfb	(printf@val+3)& (0+255),w,b
  7447  000562  A0D8               	btfss	status,0,c
  7448  000564  D005               	goto	l6518
  7449  000566  D001               	goto	l6514
  7450                           
  7451                           ; BSR set to: 0
  7452                           ;doprnt.c: 1138: break;
  7453  000568  D003               	goto	l6518
  7454  00056A                     l6514:
  7455                           
  7456                           ; BSR set to: 0
  7457  00056A  0100               	movlb	0	; () banked
  7458  00056C  2BF5               	incf	printf@c& (0+255),f,b
  7459  00056E  D7D9               	goto	l6506
  7460  000570                     l6518:
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;doprnt.c: 1142: width -= prec + c + exp;
  7464  000570  C0F5  F053         	movff	printf@c,??_printf
  7465  000574  6A54               	clrf	(??_printf+1)& (0+255),c
  7466  000576  BE53               	btfsc	??_printf& (0+255),7,c
  7467  000578  0654               	decf	(??_printf+1)& (0+255),f,c
  7468  00057A  0100               	movlb	0	; () banked
  7469  00057C  51F3               	movf	printf@prec& (0+255),w,b
  7470  00057E  2653               	addwf	??_printf,f,c
  7471  000580  0100               	movlb	0	; () banked
  7472  000582  51F4               	movf	(printf@prec+1)& (0+255),w,b
  7473  000584  2254               	addwfc	??_printf+1,f,c
  7474  000586  0100               	movlb	0	; () banked
  7475  000588  51EA               	movf	printf@exp& (0+255),w,b
  7476  00058A  2653               	addwf	??_printf,f,c
  7477  00058C  0100               	movlb	0	; () banked
  7478  00058E  51EB               	movf	(printf@exp+1)& (0+255),w,b
  7479  000590  2254               	addwfc	??_printf+1,f,c
  7480  000592  5053               	movf	??_printf,w,c
  7481  000594  0100               	movlb	0	; () banked
  7482  000596  5FEE               	subwf	printf@width& (0+255),f,b
  7483  000598  5054               	movf	??_printf+1,w,c
  7484  00059A  0100               	movlb	0	; () banked
  7485  00059C  5BEF               	subwfb	(printf@width+1)& (0+255),f,b
  7486                           
  7487                           ;doprnt.c: 1143: if(
  7488                           ;doprnt.c: 1147: prec)
  7489  00059E  0100               	movlb	0	; () banked
  7490  0005A0  51F3               	movf	printf@prec& (0+255),w,b
  7491  0005A2  0100               	movlb	0	; () banked
  7492  0005A4  11F4               	iorwf	(printf@prec+1)& (0+255),w,b
  7493  0005A6  B4D8               	btfsc	status,2,c
  7494  0005A8  D005               	goto	l6522
  7495                           
  7496                           ; BSR set to: 0
  7497                           ;doprnt.c: 1148: width--;
  7498  0005AA  0100               	movlb	0	; () banked
  7499  0005AC  07EE               	decf	printf@width& (0+255),f,b
  7500  0005AE  A0D8               	btfss	status,0,c
  7501  0005B0  07EF               	decf	(printf@width+1)& (0+255),f,b
  7502  0005B2  D000               	goto	l6522
  7503  0005B4                     l6522:
  7504                           
  7505                           ; BSR set to: 0
  7506                           ;doprnt.c: 1149: if(flag & 0x03)
  7507  0005B4  0E03               	movlw	3
  7508  0005B6  0100               	movlb	0	; () banked
  7509  0005B8  15EC               	andwf	printf@flag& (0+255),w,b
  7510  0005BA  6E53               	movwf	??_printf& (0+255),c
  7511  0005BC  0E00               	movlw	0
  7512  0005BE  0100               	movlb	0	; () banked
  7513  0005C0  15ED               	andwf	(printf@flag+1)& (0+255),w,b
  7514  0005C2  6E54               	movwf	(??_printf+1)& (0+255),c
  7515  0005C4  5053               	movf	??_printf,w,c
  7516  0005C6  1054               	iorwf	??_printf+1,w,c
  7517  0005C8  B4D8               	btfsc	status,2,c
  7518  0005CA  D005               	goto	l6526
  7519                           
  7520                           ; BSR set to: 0
  7521                           ;doprnt.c: 1150: width--;
  7522  0005CC  0100               	movlb	0	; () banked
  7523  0005CE  07EE               	decf	printf@width& (0+255),f,b
  7524  0005D0  A0D8               	btfss	status,0,c
  7525  0005D2  07EF               	decf	(printf@width+1)& (0+255),f,b
  7526  0005D4  D000               	goto	l6526
  7527  0005D6                     l6526:
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;doprnt.c: 1153: if(flag & 0x04) {
  7531  0005D6  0100               	movlb	0	; () banked
  7532  0005D8  A5EC               	btfss	printf@flag& (0+255),2,b
  7533  0005DA  D02D               	goto	l6542
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;doprnt.c: 1157: if(flag & 0x03)
  7537  0005DC  0E03               	movlw	3
  7538  0005DE  0100               	movlb	0	; () banked
  7539  0005E0  15EC               	andwf	printf@flag& (0+255),w,b
  7540  0005E2  6E53               	movwf	??_printf& (0+255),c
  7541  0005E4  0E00               	movlw	0
  7542  0005E6  0100               	movlb	0	; () banked
  7543  0005E8  15ED               	andwf	(printf@flag+1)& (0+255),w,b
  7544  0005EA  6E54               	movwf	(??_printf+1)& (0+255),c
  7545  0005EC  5053               	movf	??_printf,w,c
  7546  0005EE  1054               	iorwf	??_printf+1,w,c
  7547  0005F0  B4D8               	btfsc	status,2,c
  7548  0005F2  D00C               	goto	l6536
  7549                           
  7550                           ; BSR set to: 0
  7551                           ;doprnt.c: 1159: (putch('-') );
  7552  0005F4  0E2D               	movlw	45
  7553  0005F6  ECE7  F01E         	call	_putch
  7554                           
  7555                           ;doprnt.c: 1168: while(width > 0) {
  7556  0005FA  D008               	goto	l6536
  7557  0005FC                     l6532:
  7558                           
  7559                           ;doprnt.c: 1169: (putch('0') );
  7560  0005FC  0E30               	movlw	48
  7561  0005FE  ECE7  F01E         	call	_putch
  7562                           
  7563                           ;doprnt.c: 1170: width--;
  7564  000602  0100               	movlb	0	; () banked
  7565  000604  07EE               	decf	printf@width& (0+255),f,b
  7566  000606  A0D8               	btfss	status,0,c
  7567  000608  07EF               	decf	(printf@width+1)& (0+255),f,b
  7568  00060A  D000               	goto	l6536
  7569  00060C                     l6536:
  7570  00060C  0100               	movlb	0	; () banked
  7571  00060E  BFEF               	btfsc	(printf@width+1)& (0+255),7,b
  7572  000610  D073               	goto	l6554
  7573  000612  0100               	movlb	0	; () banked
  7574  000614  51EF               	movf	(printf@width+1)& (0+255),w,b
  7575  000616  E1F2               	bnz	l6532
  7576  000618  0100               	movlb	0	; () banked
  7577  00061A  05EE               	decf	printf@width& (0+255),w,b
  7578  00061C  A0D8               	btfss	status,0,c
  7579  00061E  D06C               	goto	l6554
  7580  000620  D7ED               	goto	l6532
  7581                           
  7582                           ; BSR set to: 0
  7583                           ;doprnt.c: 1171: }
  7584                           ;doprnt.c: 1173: } else
  7585  000622  D06A               	goto	l6554
  7586                           
  7587                           ; BSR set to: 0
  7588                           ;doprnt.c: 1175: {
  7589                           ;doprnt.c: 1180: while(width > 0) {
  7590  000624  D008               	goto	l6542
  7591  000626                     l6538:
  7592                           
  7593                           ; BSR set to: 0
  7594                           ;doprnt.c: 1181: (putch(' ') );
  7595  000626  0E20               	movlw	32
  7596  000628  ECE7  F01E         	call	_putch
  7597                           
  7598                           ;doprnt.c: 1182: width--;
  7599  00062C  0100               	movlb	0	; () banked
  7600  00062E  07EE               	decf	printf@width& (0+255),f,b
  7601  000630  A0D8               	btfss	status,0,c
  7602  000632  07EF               	decf	(printf@width+1)& (0+255),f,b
  7603  000634  D000               	goto	l6542
  7604  000636                     l6542:
  7605                           
  7606                           ; BSR set to: 0
  7607  000636  0100               	movlb	0	; () banked
  7608  000638  BFEF               	btfsc	(printf@width+1)& (0+255),7,b
  7609  00063A  D007               	goto	l6544
  7610  00063C  0100               	movlb	0	; () banked
  7611  00063E  51EF               	movf	(printf@width+1)& (0+255),w,b
  7612  000640  E1F2               	bnz	l6538
  7613  000642  0100               	movlb	0	; () banked
  7614  000644  05EE               	decf	printf@width& (0+255),w,b
  7615  000646  B0D8               	btfsc	status,0,c
  7616  000648  D7EE               	goto	l6538
  7617  00064A                     l6544:
  7618                           
  7619                           ; BSR set to: 0
  7620                           ;doprnt.c: 1183: }
  7621                           ;doprnt.c: 1188: if(flag & 0x03)
  7622  00064A  0E03               	movlw	3
  7623  00064C  0100               	movlb	0	; () banked
  7624  00064E  15EC               	andwf	printf@flag& (0+255),w,b
  7625  000650  6E53               	movwf	??_printf& (0+255),c
  7626  000652  0E00               	movlw	0
  7627  000654  0100               	movlb	0	; () banked
  7628  000656  15ED               	andwf	(printf@flag+1)& (0+255),w,b
  7629  000658  6E54               	movwf	(??_printf+1)& (0+255),c
  7630  00065A  5053               	movf	??_printf,w,c
  7631  00065C  1054               	iorwf	??_printf+1,w,c
  7632  00065E  B4D8               	btfsc	status,2,c
  7633  000660  D04B               	goto	l6554
  7634                           
  7635                           ; BSR set to: 0
  7636                           ;doprnt.c: 1190: (putch('-') );
  7637  000662  0E2D               	movlw	45
  7638  000664  ECE7  F01E         	call	_putch
  7639                           
  7640                           ;doprnt.c: 1195: }
  7641                           ;doprnt.c: 1196: while(c--) {
  7642  000668  D047               	goto	l6554
  7643  00066A                     l6548:
  7644                           
  7645                           ;doprnt.c: 1200: {
  7646                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  7647  00066A  C0E2  F00F         	movff	printf@val,___lldiv@dividend
  7648  00066E  C0E3  F010         	movff	printf@val+1,___lldiv@dividend+1
  7649  000672  C0E4  F011         	movff	printf@val+2,___lldiv@dividend+2
  7650  000676  C0E5  F012         	movff	printf@val+3,___lldiv@dividend+3
  7651  00067A  0100               	movlb	0	; () banked
  7652  00067C  51F5               	movf	printf@c& (0+255),w,b
  7653  00067E  0D04               	mullw	4
  7654  000680  0EF0               	movlw	low _dpowers
  7655  000682  24F3               	addwf	prodl,w,c
  7656  000684  6EF6               	movwf	tblptrl,c
  7657  000686  0EFE               	movlw	high _dpowers
  7658  000688  20F4               	addwfc	prodh,w,c
  7659  00068A  6EF7               	movwf	tblptrh,c
  7660  00068C                     	if	0	;There are less than 3 active tblptr bytes
  7661  00068C                     	endif
  7662  00068C  0009               	tblrd		*+
  7663  00068E  CFF5 F013          	movff	tablat,___lldiv@divisor
  7664  000692  0009               	tblrd		*+
  7665  000694  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  7666  000698  0009               	tblrd		*+
  7667  00069A  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  7668  00069E  000A               	tblrd		*-
  7669  0006A0  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  7670  0006A4  EC3C  F019         	call	___lldiv	;wreg free
  7671  0006A8  C00F  F0E6         	movff	?___lldiv,printf@tmpval
  7672  0006AC  C010  F0E7         	movff	?___lldiv+1,printf@tmpval+1
  7673  0006B0  C011  F0E8         	movff	?___lldiv+2,printf@tmpval+2
  7674  0006B4  C012  F0E9         	movff	?___lldiv+3,printf@tmpval+3
  7675                           
  7676                           ;doprnt.c: 1202: tmpval.vd %= 10;
  7677  0006B8  C0E6  F00F         	movff	printf@tmpval,___llmod@dividend
  7678  0006BC  C0E7  F010         	movff	printf@tmpval+1,___llmod@dividend+1
  7679  0006C0  C0E8  F011         	movff	printf@tmpval+2,___llmod@dividend+2
  7680  0006C4  C0E9  F012         	movff	printf@tmpval+3,___llmod@dividend+3
  7681  0006C8  0E0A               	movlw	10
  7682  0006CA  6E13               	movwf	___llmod@divisor,c
  7683  0006CC  0E00               	movlw	0
  7684  0006CE  6E14               	movwf	___llmod@divisor+1,c
  7685  0006D0  0E00               	movlw	0
  7686  0006D2  6E15               	movwf	___llmod@divisor+2,c
  7687  0006D4  0E00               	movlw	0
  7688  0006D6  6E16               	movwf	___llmod@divisor+3,c
  7689  0006D8  EC09  F01B         	call	___llmod	;wreg free
  7690  0006DC  C00F  F0E6         	movff	?___llmod,printf@tmpval
  7691  0006E0  C010  F0E7         	movff	?___llmod+1,printf@tmpval+1
  7692  0006E4  C011  F0E8         	movff	?___llmod+2,printf@tmpval+2
  7693  0006E8  C012  F0E9         	movff	?___llmod+3,printf@tmpval+3
  7694                           
  7695                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  7696  0006EC  0100               	movlb	0	; () banked
  7697  0006EE  51E6               	movf	printf@tmpval& (0+255),w,b
  7698  0006F0  0F30               	addlw	48
  7699  0006F2  ECE7  F01E         	call	_putch
  7700  0006F6  D000               	goto	l6554
  7701  0006F8                     l6554:
  7702  0006F8  0100               	movlb	0	; () banked
  7703  0006FA  07F5               	decf	printf@c& (0+255),f,b
  7704  0006FC  0100               	movlb	0	; () banked
  7705  0006FE  29F5               	incf	printf@c& (0+255),w,b
  7706  000700  B4D8               	btfsc	status,2,c
  7707  000702  D00A               	goto	l6560
  7708  000704  D7B2               	goto	l6548
  7709                           
  7710                           ; BSR set to: 0
  7711                           ;doprnt.c: 1204: }
  7712                           ;doprnt.c: 1206: }
  7713                           ;doprnt.c: 1207: while(exp > 0) {
  7714  000706  D008               	goto	l6560
  7715  000708                     l6556:
  7716                           
  7717                           ; BSR set to: 0
  7718                           ;doprnt.c: 1208: (putch('0') );
  7719  000708  0E30               	movlw	48
  7720  00070A  ECE7  F01E         	call	_putch
  7721                           
  7722                           ;doprnt.c: 1209: exp--;
  7723  00070E  0100               	movlb	0	; () banked
  7724  000710  07EA               	decf	printf@exp& (0+255),f,b
  7725  000712  A0D8               	btfss	status,0,c
  7726  000714  07EB               	decf	(printf@exp+1)& (0+255),f,b
  7727  000716  D000               	goto	l6560
  7728  000718                     l6560:
  7729                           
  7730                           ; BSR set to: 0
  7731  000718  0100               	movlb	0	; () banked
  7732  00071A  BFEB               	btfsc	(printf@exp+1)& (0+255),7,b
  7733  00071C  D007               	goto	l6562
  7734  00071E  0100               	movlb	0	; () banked
  7735  000720  51EB               	movf	(printf@exp+1)& (0+255),w,b
  7736  000722  E1F2               	bnz	l6556
  7737  000724  0100               	movlb	0	; () banked
  7738  000726  05EA               	decf	printf@exp& (0+255),w,b
  7739  000728  B0D8               	btfsc	status,0,c
  7740  00072A  D7EE               	goto	l6556
  7741  00072C                     l6562:
  7742                           
  7743                           ; BSR set to: 0
  7744                           ;doprnt.c: 1210: }
  7745                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7746  00072C  0100               	movlb	0	; () banked
  7747  00072E  BFF4               	btfsc	(printf@prec+1)& (0+255),7,b
  7748  000730  D00C               	goto	l666
  7749  000732  0100               	movlb	0	; () banked
  7750  000734  51F4               	movf	(printf@prec+1)& (0+255),w,b
  7751  000736  E105               	bnz	u6590
  7752  000738  0E09               	movlw	9
  7753  00073A  0100               	movlb	0	; () banked
  7754  00073C  5DF3               	subwf	printf@prec& (0+255),w,b
  7755  00073E  A0D8               	btfss	status,0,c
  7756  000740  D004               	goto	l666
  7757  000742                     u6590:
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7761  000742  0E08               	movlw	8
  7762  000744  0100               	movlb	0	; () banked
  7763  000746  6FF5               	movwf	printf@c& (0+255),b
  7764  000748  D003               	goto	l6566
  7765  00074A                     l666:
  7766                           
  7767                           ; BSR set to: 0
  7768                           ;doprnt.c: 1213: else
  7769                           ;doprnt.c: 1214: c = prec;
  7770  00074A  C0F3  F0F5         	movff	printf@prec,printf@c
  7771  00074E  D000               	goto	l6566
  7772  000750                     l6566:
  7773                           
  7774                           ; BSR set to: 0
  7775                           ;doprnt.c: 1215: prec -= c;
  7776  000750  0100               	movlb	0	; () banked
  7777  000752  51F5               	movf	printf@c& (0+255),w,b
  7778  000754  0100               	movlb	0	; () banked
  7779  000756  5FF3               	subwf	printf@prec& (0+255),f,b
  7780  000758  0E00               	movlw	0
  7781  00075A  0100               	movlb	0	; () banked
  7782  00075C  BFF5               	btfsc	printf@c& (0+255),7,b
  7783  00075E  0EFF               	movlw	255
  7784  000760  0100               	movlb	0	; () banked
  7785  000762  5BF4               	subwfb	(printf@prec+1)& (0+255),f,b
  7786                           
  7787                           ; BSR set to: 0
  7788                           ;doprnt.c: 1219: if(c)
  7789  000764  0100               	movlb	0	; () banked
  7790  000766  51F5               	movf	printf@c& (0+255),w,b
  7791  000768  0100               	movlb	0	; () banked
  7792  00076A  B4D8               	btfsc	status,2,c
  7793  00076C  D004               	goto	l6572
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;doprnt.c: 1221: (putch('.') );
  7797  00076E  0E2E               	movlw	46
  7798  000770  ECE7  F01E         	call	_putch
  7799  000774  D000               	goto	l6572
  7800  000776                     l6572:
  7801                           
  7802                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7803  000776  0100               	movlb	0	; () banked
  7804  000778  51F5               	movf	printf@c& (0+255),w,b
  7805  00077A  ECEB  F008         	call	_scale
  7806  00077E  C032  F0DD         	movff	?_scale,_printf$2521
  7807  000782  C033  F0DE         	movff	?_scale+1,_printf$2521+1
  7808  000786  C034  F0DF         	movff	?_scale+2,_printf$2521+2
  7809                           
  7810                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7811  00078A  C0F0  F026         	movff	printf@fval,___ftmul@f2
  7812  00078E  C0F1  F027         	movff	printf@fval+1,___ftmul@f2+1
  7813  000792  C0F2  F028         	movff	printf@fval+2,___ftmul@f2+2
  7814  000796  C0DD  F023         	movff	_printf$2521,___ftmul@f1
  7815  00079A  C0DE  F024         	movff	_printf$2521+1,___ftmul@f1+1
  7816  00079E  C0DF  F025         	movff	_printf$2521+2,___ftmul@f1+2
  7817  0007A2  EC10  F014         	call	___ftmul	;wreg free
  7818  0007A6  C023  F039         	movff	?___ftmul,___fttol@f1
  7819  0007AA  C024  F03A         	movff	?___ftmul+1,___fttol@f1+1
  7820  0007AE  C025  F03B         	movff	?___ftmul+2,___fttol@f1+2
  7821  0007B2  EC79  F015         	call	___fttol	;wreg free
  7822  0007B6  C039  F0E2         	movff	?___fttol,printf@val
  7823  0007BA  C03A  F0E3         	movff	?___fttol+1,printf@val+1
  7824  0007BE  C03B  F0E4         	movff	?___fttol+2,printf@val+2
  7825  0007C2  C03C  F0E5         	movff	?___fttol+3,printf@val+3
  7826                           
  7827                           ;doprnt.c: 1228: while(c--) {
  7828  0007C6  D06E               	goto	l6582
  7829  0007C8                     l6576:
  7830                           
  7831                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  7832  0007C8  C0E2  F00F         	movff	printf@val,___lldiv@dividend
  7833  0007CC  C0E3  F010         	movff	printf@val+1,___lldiv@dividend+1
  7834  0007D0  C0E4  F011         	movff	printf@val+2,___lldiv@dividend+2
  7835  0007D4  C0E5  F012         	movff	printf@val+3,___lldiv@dividend+3
  7836  0007D8  0100               	movlb	0	; () banked
  7837  0007DA  51F5               	movf	printf@c& (0+255),w,b
  7838  0007DC  0D04               	mullw	4
  7839  0007DE  0EF0               	movlw	low _dpowers
  7840  0007E0  24F3               	addwf	prodl,w,c
  7841  0007E2  6EF6               	movwf	tblptrl,c
  7842  0007E4  0EFE               	movlw	high _dpowers
  7843  0007E6  20F4               	addwfc	prodh,w,c
  7844  0007E8  6EF7               	movwf	tblptrh,c
  7845  0007EA                     	if	0	;There are less than 3 active tblptr bytes
  7846  0007EA                     	endif
  7847  0007EA  0009               	tblrd		*+
  7848  0007EC  CFF5 F013          	movff	tablat,___lldiv@divisor
  7849  0007F0  0009               	tblrd		*+
  7850  0007F2  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  7851  0007F6  0009               	tblrd		*+
  7852  0007F8  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  7853  0007FC  000A               	tblrd		*-
  7854  0007FE  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  7855  000802  EC3C  F019         	call	___lldiv	;wreg free
  7856  000806  C00F  F0E6         	movff	?___lldiv,printf@tmpval
  7857  00080A  C010  F0E7         	movff	?___lldiv+1,printf@tmpval+1
  7858  00080E  C011  F0E8         	movff	?___lldiv+2,printf@tmpval+2
  7859  000812  C012  F0E9         	movff	?___lldiv+3,printf@tmpval+3
  7860                           
  7861                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7862  000816  C0E6  F00F         	movff	printf@tmpval,___llmod@dividend
  7863  00081A  C0E7  F010         	movff	printf@tmpval+1,___llmod@dividend+1
  7864  00081E  C0E8  F011         	movff	printf@tmpval+2,___llmod@dividend+2
  7865  000822  C0E9  F012         	movff	printf@tmpval+3,___llmod@dividend+3
  7866  000826  0E0A               	movlw	10
  7867  000828  6E13               	movwf	___llmod@divisor,c
  7868  00082A  0E00               	movlw	0
  7869  00082C  6E14               	movwf	___llmod@divisor+1,c
  7870  00082E  0E00               	movlw	0
  7871  000830  6E15               	movwf	___llmod@divisor+2,c
  7872  000832  0E00               	movlw	0
  7873  000834  6E16               	movwf	___llmod@divisor+3,c
  7874  000836  EC09  F01B         	call	___llmod	;wreg free
  7875  00083A  C00F  F0E6         	movff	?___llmod,printf@tmpval
  7876  00083E  C010  F0E7         	movff	?___llmod+1,printf@tmpval+1
  7877  000842  C011  F0E8         	movff	?___llmod+2,printf@tmpval+2
  7878  000846  C012  F0E9         	movff	?___llmod+3,printf@tmpval+3
  7879                           
  7880                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  7881  00084A  0100               	movlb	0	; () banked
  7882  00084C  51E6               	movf	printf@tmpval& (0+255),w,b
  7883  00084E  0F30               	addlw	48
  7884  000850  ECE7  F01E         	call	_putch
  7885                           
  7886                           ;doprnt.c: 1232: val %= dpowers[c];
  7887  000854  C0E2  F00F         	movff	printf@val,___llmod@dividend
  7888  000858  C0E3  F010         	movff	printf@val+1,___llmod@dividend+1
  7889  00085C  C0E4  F011         	movff	printf@val+2,___llmod@dividend+2
  7890  000860  C0E5  F012         	movff	printf@val+3,___llmod@dividend+3
  7891  000864  0100               	movlb	0	; () banked
  7892  000866  51F5               	movf	printf@c& (0+255),w,b
  7893  000868  0D04               	mullw	4
  7894  00086A  0EF0               	movlw	low _dpowers
  7895  00086C  24F3               	addwf	prodl,w,c
  7896  00086E  6EF6               	movwf	tblptrl,c
  7897  000870  0EFE               	movlw	high _dpowers
  7898  000872  20F4               	addwfc	prodh,w,c
  7899  000874  6EF7               	movwf	tblptrh,c
  7900  000876                     	if	0	;There are less than 3 active tblptr bytes
  7901  000876                     	endif
  7902  000876  0009               	tblrd		*+
  7903  000878  CFF5 F013          	movff	tablat,___llmod@divisor
  7904  00087C  0009               	tblrd		*+
  7905  00087E  CFF5 F014          	movff	tablat,___llmod@divisor+1
  7906  000882  0009               	tblrd		*+
  7907  000884  CFF5 F015          	movff	tablat,___llmod@divisor+2
  7908  000888  000A               	tblrd		*-
  7909  00088A  CFF5 F016          	movff	tablat,___llmod@divisor+3
  7910  00088E  EC09  F01B         	call	___llmod	;wreg free
  7911  000892  C00F  F0E2         	movff	?___llmod,printf@val
  7912  000896  C010  F0E3         	movff	?___llmod+1,printf@val+1
  7913  00089A  C011  F0E4         	movff	?___llmod+2,printf@val+2
  7914  00089E  C012  F0E5         	movff	?___llmod+3,printf@val+3
  7915  0008A2  D000               	goto	l6582
  7916  0008A4                     l6582:
  7917  0008A4  0100               	movlb	0	; () banked
  7918  0008A6  07F5               	decf	printf@c& (0+255),f,b
  7919  0008A8  0100               	movlb	0	; () banked
  7920  0008AA  29F5               	incf	printf@c& (0+255),w,b
  7921  0008AC  B4D8               	btfsc	status,2,c
  7922  0008AE  D00A               	goto	l6588
  7923  0008B0  D78B               	goto	l6576
  7924                           
  7925                           ; BSR set to: 0
  7926                           ;doprnt.c: 1233: }
  7927                           ;doprnt.c: 1235: while(prec) {
  7928  0008B2  D008               	goto	l6588
  7929  0008B4                     l6584:
  7930                           
  7931                           ; BSR set to: 0
  7932                           ;doprnt.c: 1236: (putch('0') );
  7933  0008B4  0E30               	movlw	48
  7934  0008B6  ECE7  F01E         	call	_putch
  7935                           
  7936                           ;doprnt.c: 1237: prec--;
  7937  0008BA  0100               	movlb	0	; () banked
  7938  0008BC  07F3               	decf	printf@prec& (0+255),f,b
  7939  0008BE  A0D8               	btfss	status,0,c
  7940  0008C0  07F4               	decf	(printf@prec+1)& (0+255),f,b
  7941  0008C2  D000               	goto	l6588
  7942  0008C4                     l6588:
  7943                           
  7944                           ; BSR set to: 0
  7945  0008C4  0100               	movlb	0	; () banked
  7946  0008C6  51F3               	movf	printf@prec& (0+255),w,b
  7947  0008C8  0100               	movlb	0	; () banked
  7948  0008CA  11F4               	iorwf	(printf@prec+1)& (0+255),w,b
  7949  0008CC  B4D8               	btfsc	status,2,c
  7950  0008CE  D0E3               	goto	l6646
  7951  0008D0  D7F1               	goto	l6584
  7952                           
  7953                           ; BSR set to: 0
  7954                           ;doprnt.c: 1238: }
  7955                           ;doprnt.c: 1245: continue;
  7956  0008D2  D0E1               	goto	l6646
  7957  0008D4                     l6590:
  7958                           
  7959                           ; BSR set to: 0
  7960                           ;doprnt.c: 1246: }
  7961                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7962  0008D4  0100               	movlb	0	; () banked
  7963  0008D6  51F3               	movf	printf@prec& (0+255),w,b
  7964  0008D8  0100               	movlb	0	; () banked
  7965  0008DA  11F4               	iorwf	(printf@prec+1)& (0+255),w,b
  7966  0008DC  A4D8               	btfss	status,2,c
  7967  0008DE  D00E               	goto	l6596
  7968                           
  7969                           ; BSR set to: 0
  7970  0008E0  0100               	movlb	0	; () banked
  7971  0008E2  51E2               	movf	printf@val& (0+255),w,b
  7972  0008E4  0100               	movlb	0	; () banked
  7973  0008E6  11E3               	iorwf	(printf@val+1)& (0+255),w,b
  7974  0008E8  0100               	movlb	0	; () banked
  7975  0008EA  11E4               	iorwf	(printf@val+2)& (0+255),w,b
  7976  0008EC  0100               	movlb	0	; () banked
  7977  0008EE  11E5               	iorwf	(printf@val+3)& (0+255),w,b
  7978  0008F0  A4D8               	btfss	status,2,c
  7979  0008F2  D004               	goto	l6596
  7980                           
  7981                           ; BSR set to: 0
  7982                           ;doprnt.c: 1291: prec++;
  7983  0008F4  0100               	movlb	0	; () banked
  7984  0008F6  4BF3               	infsnz	printf@prec& (0+255),f,b
  7985  0008F8  2BF4               	incf	(printf@prec+1)& (0+255),f,b
  7986  0008FA  D000               	goto	l6596
  7987  0008FC                     l6596:
  7988                           
  7989                           ; BSR set to: 0
  7990                           ;doprnt.c: 1339: if(c < prec)
  7991  0008FC  0E80               	movlw	128
  7992  0008FE  0100               	movlb	0	; () banked
  7993  000900  BFF5               	btfsc	printf@c& (0+255),7,b
  7994  000902  0E7F               	movlw	127
  7995  000904  6E53               	movwf	??_printf& (0+255),c
  7996  000906  0100               	movlb	0	; () banked
  7997  000908  51F3               	movf	printf@prec& (0+255),w,b
  7998  00090A  0100               	movlb	0	; () banked
  7999  00090C  5DF5               	subwf	printf@c& (0+255),w,b
  8000  00090E  0100               	movlb	0	; () banked
  8001  000910  51F4               	movf	(printf@prec+1)& (0+255),w,b
  8002  000912  0A80               	xorlw	128
  8003  000914  5853               	subwfb	??_printf& (0+255),w,c
  8004  000916  B0D8               	btfsc	status,0,c
  8005  000918  D003               	goto	l6600
  8006                           
  8007                           ; BSR set to: 0
  8008                           ;doprnt.c: 1340: c = prec;
  8009  00091A  C0F3  F0F5         	movff	printf@prec,printf@c
  8010  00091E  D017               	goto	l6604
  8011  000920                     l6600:
  8012                           
  8013                           ; BSR set to: 0
  8014                           ;doprnt.c: 1341: else if(prec < c)
  8015  000920  0100               	movlb	0	; () banked
  8016  000922  51F4               	movf	(printf@prec+1)& (0+255),w,b
  8017  000924  0A80               	xorlw	128
  8018  000926  6E53               	movwf	??_printf& (0+255),c
  8019  000928  0100               	movlb	0	; () banked
  8020  00092A  51F5               	movf	printf@c& (0+255),w,b
  8021  00092C  0100               	movlb	0	; () banked
  8022  00092E  5DF3               	subwf	printf@prec& (0+255),w,b
  8023  000930  0E80               	movlw	128
  8024  000932  0100               	movlb	0	; () banked
  8025  000934  BFF5               	btfsc	printf@c& (0+255),7,b
  8026  000936  0E7F               	movlw	127
  8027  000938  5853               	subwfb	??_printf& (0+255),w,c
  8028  00093A  B0D8               	btfsc	status,0,c
  8029  00093C  D008               	goto	l6604
  8030                           
  8031                           ; BSR set to: 0
  8032                           ;doprnt.c: 1342: prec = c;
  8033  00093E  0100               	movlb	0	; () banked
  8034  000940  51F5               	movf	printf@c& (0+255),w,b
  8035  000942  0100               	movlb	0	; () banked
  8036  000944  6FF3               	movwf	printf@prec& (0+255),b
  8037  000946  6BF4               	clrf	(printf@prec+1)& (0+255),b
  8038  000948  BFF3               	btfsc	printf@prec& (0+255),7,b
  8039  00094A  07F4               	decf	(printf@prec+1)& (0+255),f,b
  8040                           
  8041                           ; BSR set to: 0
  8042  00094C  D000               	goto	l6604
  8043  00094E                     l6604:
  8044                           
  8045                           ; BSR set to: 0
  8046                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8047  00094E  0100               	movlb	0	; () banked
  8048  000950  51EE               	movf	printf@width& (0+255),w,b
  8049  000952  0100               	movlb	0	; () banked
  8050  000954  11EF               	iorwf	(printf@width+1)& (0+255),w,b
  8051  000956  B4D8               	btfsc	status,2,c
  8052  000958  D011               	goto	l6610
  8053                           
  8054                           ; BSR set to: 0
  8055  00095A  0E03               	movlw	3
  8056  00095C  0100               	movlb	0	; () banked
  8057  00095E  15EC               	andwf	printf@flag& (0+255),w,b
  8058  000960  6E53               	movwf	??_printf& (0+255),c
  8059  000962  0E00               	movlw	0
  8060  000964  0100               	movlb	0	; () banked
  8061  000966  15ED               	andwf	(printf@flag+1)& (0+255),w,b
  8062  000968  6E54               	movwf	(??_printf+1)& (0+255),c
  8063  00096A  5053               	movf	??_printf,w,c
  8064  00096C  1054               	iorwf	??_printf+1,w,c
  8065  00096E  B4D8               	btfsc	status,2,c
  8066  000970  D005               	goto	l6610
  8067                           
  8068                           ; BSR set to: 0
  8069                           ;doprnt.c: 1346: width--;
  8070  000972  0100               	movlb	0	; () banked
  8071  000974  07EE               	decf	printf@width& (0+255),f,b
  8072  000976  A0D8               	btfss	status,0,c
  8073  000978  07EF               	decf	(printf@width+1)& (0+255),f,b
  8074  00097A  D000               	goto	l6610
  8075  00097C                     l6610:
  8076                           
  8077                           ; BSR set to: 0
  8078                           ;doprnt.c: 1348: if(flag & 0x4000) {
  8079  00097C  0100               	movlb	0	; () banked
  8080  00097E  ADED               	btfss	(printf@flag+1)& (0+255),6,b
  8081  000980  D01D               	goto	l6618
  8082                           
  8083                           ; BSR set to: 0
  8084                           ;doprnt.c: 1349: if(width > prec)
  8085  000982  0100               	movlb	0	; () banked
  8086  000984  51EE               	movf	printf@width& (0+255),w,b
  8087  000986  0100               	movlb	0	; () banked
  8088  000988  5DF3               	subwf	printf@prec& (0+255),w,b
  8089  00098A  0100               	movlb	0	; () banked
  8090  00098C  51F4               	movf	(printf@prec+1)& (0+255),w,b
  8091  00098E  0A80               	xorlw	128
  8092  000990  6E53               	movwf	??_printf& (0+255),c
  8093  000992  0100               	movlb	0	; () banked
  8094  000994  51EF               	movf	(printf@width+1)& (0+255),w,b
  8095  000996  0A80               	xorlw	128
  8096  000998  5853               	subwfb	??_printf& (0+255),w,c
  8097  00099A  B0D8               	btfsc	status,0,c
  8098  00099C  D009               	goto	l6616
  8099                           
  8100                           ; BSR set to: 0
  8101                           ;doprnt.c: 1350: width -= prec;
  8102  00099E  0100               	movlb	0	; () banked
  8103  0009A0  51F3               	movf	printf@prec& (0+255),w,b
  8104  0009A2  0100               	movlb	0	; () banked
  8105  0009A4  5FEE               	subwf	printf@width& (0+255),f,b
  8106  0009A6  0100               	movlb	0	; () banked
  8107  0009A8  51F4               	movf	(printf@prec+1)& (0+255),w,b
  8108  0009AA  0100               	movlb	0	; () banked
  8109  0009AC  5BEF               	subwfb	(printf@width+1)& (0+255),f,b
  8110  0009AE  D006               	goto	l6618
  8111  0009B0                     l6616:
  8112                           
  8113                           ; BSR set to: 0
  8114                           ;doprnt.c: 1351: else
  8115                           ;doprnt.c: 1352: width = 0;
  8116  0009B0  0E00               	movlw	0
  8117  0009B2  0100               	movlb	0	; () banked
  8118  0009B4  6FEF               	movwf	(printf@width+1)& (0+255),b
  8119  0009B6  0E00               	movlw	0
  8120  0009B8  6FEE               	movwf	printf@width& (0+255),b
  8121                           
  8122                           ; BSR set to: 0
  8123  0009BA  D000               	goto	l6618
  8124  0009BC                     l6618:
  8125                           
  8126                           ; BSR set to: 0
  8127                           ;doprnt.c: 1353: }
  8128                           ;doprnt.c: 1381: if(width > c)
  8129  0009BC  0E80               	movlw	128
  8130  0009BE  0100               	movlb	0	; () banked
  8131  0009C0  BFF5               	btfsc	printf@c& (0+255),7,b
  8132  0009C2  0E7F               	movlw	127
  8133  0009C4  6E53               	movwf	??_printf& (0+255),c
  8134  0009C6  0100               	movlb	0	; () banked
  8135  0009C8  51EE               	movf	printf@width& (0+255),w,b
  8136  0009CA  0100               	movlb	0	; () banked
  8137  0009CC  5DF5               	subwf	printf@c& (0+255),w,b
  8138  0009CE  0100               	movlb	0	; () banked
  8139  0009D0  51EF               	movf	(printf@width+1)& (0+255),w,b
  8140  0009D2  0A80               	xorlw	128
  8141  0009D4  5853               	subwfb	??_printf& (0+255),w,c
  8142  0009D6  B0D8               	btfsc	status,0,c
  8143  0009D8  D00B               	goto	l6622
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;doprnt.c: 1382: width -= c;
  8147  0009DA  0100               	movlb	0	; () banked
  8148  0009DC  51F5               	movf	printf@c& (0+255),w,b
  8149  0009DE  0100               	movlb	0	; () banked
  8150  0009E0  5FEE               	subwf	printf@width& (0+255),f,b
  8151  0009E2  0E00               	movlw	0
  8152  0009E4  0100               	movlb	0	; () banked
  8153  0009E6  BFF5               	btfsc	printf@c& (0+255),7,b
  8154  0009E8  0EFF               	movlw	255
  8155  0009EA  0100               	movlb	0	; () banked
  8156  0009EC  5BEF               	subwfb	(printf@width+1)& (0+255),f,b
  8157  0009EE  D006               	goto	l6624
  8158  0009F0                     l6622:
  8159                           
  8160                           ; BSR set to: 0
  8161                           ;doprnt.c: 1383: else
  8162                           ;doprnt.c: 1384: width = 0;
  8163  0009F0  0E00               	movlw	0
  8164  0009F2  0100               	movlb	0	; () banked
  8165  0009F4  6FEF               	movwf	(printf@width+1)& (0+255),b
  8166  0009F6  0E00               	movlw	0
  8167  0009F8  6FEE               	movwf	printf@width& (0+255),b
  8168  0009FA  D000               	goto	l6624
  8169  0009FC                     l6624:
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;doprnt.c: 1387: if(flag & 0x04) {
  8173  0009FC  0100               	movlb	0	; () banked
  8174  0009FE  A5EC               	btfss	printf@flag& (0+255),2,b
  8175  000A00  D025               	goto	l6636
  8176                           
  8177                           ; BSR set to: 0
  8178                           ;doprnt.c: 1392: if(flag & 0x03)
  8179  000A02  0E03               	movlw	3
  8180  000A04  0100               	movlb	0	; () banked
  8181  000A06  15EC               	andwf	printf@flag& (0+255),w,b
  8182  000A08  6E53               	movwf	??_printf& (0+255),c
  8183  000A0A  0E00               	movlw	0
  8184  000A0C  0100               	movlb	0	; () banked
  8185  000A0E  15ED               	andwf	(printf@flag+1)& (0+255),w,b
  8186  000A10  6E54               	movwf	(??_printf+1)& (0+255),c
  8187  000A12  5053               	movf	??_printf,w,c
  8188  000A14  1054               	iorwf	??_printf+1,w,c
  8189  000A16  B4D8               	btfsc	status,2,c
  8190  000A18  D004               	goto	l6630
  8191                           
  8192                           ; BSR set to: 0
  8193                           ;doprnt.c: 1393: (putch('-') );
  8194  000A1A  0E2D               	movlw	45
  8195  000A1C  ECE7  F01E         	call	_putch
  8196  000A20  D000               	goto	l6630
  8197  000A22                     l6630:
  8198                           
  8199                           ;doprnt.c: 1415: if(width)
  8200  000A22  0100               	movlb	0	; () banked
  8201  000A24  51EE               	movf	printf@width& (0+255),w,b
  8202  000A26  0100               	movlb	0	; () banked
  8203  000A28  11EF               	iorwf	(printf@width+1)& (0+255),w,b
  8204  000A2A  B4D8               	btfsc	status,2,c
  8205  000A2C  D034               	goto	l6646
  8206  000A2E                     l6632:
  8207                           
  8208                           ; BSR set to: 0
  8209                           ;doprnt.c: 1417: (putch('0') );
  8210  000A2E  0E30               	movlw	48
  8211  000A30  ECE7  F01E         	call	_putch
  8212                           
  8213                           ;doprnt.c: 1418: while(--width);
  8214  000A34  0100               	movlb	0	; () banked
  8215  000A36  07EE               	decf	printf@width& (0+255),f,b
  8216  000A38  A0D8               	btfss	status,0,c
  8217  000A3A  07EF               	decf	(printf@width+1)& (0+255),f,b
  8218  000A3C  0100               	movlb	0	; () banked
  8219  000A3E  51EE               	movf	printf@width& (0+255),w,b
  8220  000A40  0100               	movlb	0	; () banked
  8221  000A42  11EF               	iorwf	(printf@width+1)& (0+255),w,b
  8222  000A44  B4D8               	btfsc	status,2,c
  8223  000A46  D027               	goto	l6646
  8224  000A48  D7F2               	goto	l6632
  8225                           
  8226                           ; BSR set to: 0
  8227                           ;doprnt.c: 1420: } else
  8228                           
  8229                           ; BSR set to: 0
  8230  000A4A  D025               	goto	l6646
  8231  000A4C                     l6636:
  8232                           
  8233                           ; BSR set to: 0
  8234                           ;doprnt.c: 1422: {
  8235                           ;doprnt.c: 1424: if(width
  8236                           ;doprnt.c: 1428: )
  8237  000A4C  0100               	movlb	0	; () banked
  8238  000A4E  51EE               	movf	printf@width& (0+255),w,b
  8239  000A50  0100               	movlb	0	; () banked
  8240  000A52  11EF               	iorwf	(printf@width+1)& (0+255),w,b
  8241  000A54  B4D8               	btfsc	status,2,c
  8242  000A56  D00F               	goto	l6642
  8243  000A58                     l6638:
  8244                           
  8245                           ; BSR set to: 0
  8246                           ;doprnt.c: 1430: (putch(' ') );
  8247  000A58  0E20               	movlw	32
  8248  000A5A  ECE7  F01E         	call	_putch
  8249                           
  8250                           ;doprnt.c: 1431: while(--width);
  8251  000A5E  0100               	movlb	0	; () banked
  8252  000A60  07EE               	decf	printf@width& (0+255),f,b
  8253  000A62  A0D8               	btfss	status,0,c
  8254  000A64  07EF               	decf	(printf@width+1)& (0+255),f,b
  8255  000A66  0100               	movlb	0	; () banked
  8256  000A68  51EE               	movf	printf@width& (0+255),w,b
  8257  000A6A  0100               	movlb	0	; () banked
  8258  000A6C  11EF               	iorwf	(printf@width+1)& (0+255),w,b
  8259  000A6E  B4D8               	btfsc	status,2,c
  8260  000A70  D002               	goto	l6642
  8261  000A72  D7F2               	goto	l6638
  8262                           
  8263                           ; BSR set to: 0
  8264  000A74  D000               	goto	l6642
  8265  000A76                     l6642:
  8266                           
  8267                           ; BSR set to: 0
  8268                           ;doprnt.c: 1438: if(flag & 0x03)
  8269  000A76  0E03               	movlw	3
  8270  000A78  0100               	movlb	0	; () banked
  8271  000A7A  15EC               	andwf	printf@flag& (0+255),w,b
  8272  000A7C  6E53               	movwf	??_printf& (0+255),c
  8273  000A7E  0E00               	movlw	0
  8274  000A80  0100               	movlb	0	; () banked
  8275  000A82  15ED               	andwf	(printf@flag+1)& (0+255),w,b
  8276  000A84  6E54               	movwf	(??_printf+1)& (0+255),c
  8277  000A86  5053               	movf	??_printf,w,c
  8278  000A88  1054               	iorwf	??_printf+1,w,c
  8279  000A8A  B4D8               	btfsc	status,2,c
  8280  000A8C  D004               	goto	l6646
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;doprnt.c: 1439: (putch('-') );
  8284  000A8E  0E2D               	movlw	45
  8285  000A90  ECE7  F01E         	call	_putch
  8286  000A94  D000               	goto	l6646
  8287  000A96                     l6646:
  8288  000A96  C04E  FFF6         	movff	printf@f,tblptrl
  8289  000A9A  C04F  FFF7         	movff	printf@f+1,tblptrh
  8290  000A9E  4A4E               	infsnz	printf@f,f,c
  8291  000AA0  2A4F               	incf	printf@f+1,f,c
  8292  000AA2                     	if	0	;tblptru may be non-zero
  8293  000AA2                     	endif
  8294  000AA2                     	if	0	;tblptru may be non-zero
  8295  000AA2                     	endif
  8296  000AA2  0008               	tblrd		*
  8297  000AA4  CFF5 F0F5          	movff	tablat,printf@c
  8298  000AA8  0100               	movlb	0	; () banked
  8299  000AAA  51F5               	movf	printf@c& (0+255),w,b
  8300  000AAC  B4D8               	btfsc	status,2,c
  8301  000AAE  D003               	goto	l696
  8302  000AB0  EF16  F000         	goto	l6384
  8303                           
  8304                           ; BSR set to: 0
  8305  000AB4  D000               	goto	l696
  8306  000AB6                     l696:
  8307                           
  8308                           ; BSR set to: 0
  8309  000AB6  0012               	return		;funcret
  8310  000AB8                     __end_of_printf:
  8311                           	opt stack 0
  8312                           tblptru	equ	0xFF8
  8313                           tblptrh	equ	0xFF7
  8314                           tblptrl	equ	0xFF6
  8315                           tablat	equ	0xFF5
  8316                           prodh	equ	0xFF4
  8317                           prodl	equ	0xFF3
  8318                           intcon2	equ	0xFF1
  8319                           postinc0	equ	0xFEE
  8320                           wreg	equ	0xFE8
  8321                           postdec1	equ	0xFE5
  8322                           fsr1l	equ	0xFE1
  8323                           indf2	equ	0xFDF
  8324                           postinc2	equ	0xFDE
  8325                           postdec2	equ	0xFDD
  8326                           fsr2h	equ	0xFDA
  8327                           fsr2l	equ	0xFD9
  8328                           status	equ	0xFD8
  8329                           
  8330 ;; *************** function _scale *****************
  8331 ;; Defined at:
  8332 ;;		line 425 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8333 ;; Parameters:    Size  Location     Type
  8334 ;;  scl             1    wreg     char 
  8335 ;; Auto vars:     Size  Location     Type
  8336 ;;  scl             1   55[COMRAM] char 
  8337 ;; Return value:  Size  Location     Type
  8338 ;;                  3   49[COMRAM] char 
  8339 ;; Registers used:
  8340 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8341 ;; Tracked objects:
  8342 ;;		On entry : 0/0
  8343 ;;		On exit  : 0/0
  8344 ;;		Unchanged: 0/0
  8345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8346 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8347 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8349 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;Total ram usage:        7 bytes
  8351 ;; Hardware stack levels used:    1
  8352 ;; Hardware stack levels required when called:    4
  8353 ;; This function calls:
  8354 ;;		___awdiv
  8355 ;;		___awmod
  8356 ;;		___ftmul
  8357 ;;		___wmul
  8358 ;; This function is called by:
  8359 ;;		_printf
  8360 ;; This function uses a non-reentrant model
  8361 ;;
  8362                           
  8363                           	psect	text29
  8364  0011D6                     __ptext29:
  8365                           	opt stack 0
  8366  0011D6                     _scale:
  8367                           	opt stack 21
  8368                           
  8369                           ; BSR set to: 0
  8370                           ;incstack = 0
  8371                           ;scale@scl stored from wreg
  8372  0011D6  6E38               	movwf	scale@scl,c
  8373                           
  8374                           ;doprnt.c: 428: if(scl < 0) {
  8375  0011D8  AE38               	btfss	scale@scl,7,c
  8376  0011DA  D0EF               	goto	l6034
  8377                           
  8378                           ;doprnt.c: 429: scl = -scl;
  8379  0011DC  6C38               	negf	scale@scl,c
  8380                           
  8381                           ;doprnt.c: 430: if(scl>=110)
  8382  0011DE  5038               	movf	scale@scl,w,c
  8383  0011E0  0A80               	xorlw	128
  8384  0011E2  0F12               	addlw	-238
  8385  0011E4  A0D8               	btfss	status,0,c
  8386  0011E6  D08D               	goto	l6024
  8387                           
  8388                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8389  0011E8  0E00               	movlw	0
  8390  0011EA  6E20               	movwf	___wmul@multiplicand+1,c
  8391  0011EC  0E03               	movlw	3
  8392  0011EE  6E1F               	movwf	___wmul@multiplicand,c
  8393  0011F0  0E00               	movlw	0
  8394  0011F2  6E18               	movwf	___awdiv@divisor+1,c
  8395  0011F4  0E0A               	movlw	10
  8396  0011F6  6E17               	movwf	___awdiv@divisor,c
  8397  0011F8  0E00               	movlw	0
  8398  0011FA  6E12               	movwf	___awmod@divisor+1,c
  8399  0011FC  0E64               	movlw	100
  8400  0011FE  6E11               	movwf	___awmod@divisor,c
  8401  001200  5038               	movf	scale@scl,w,c
  8402  001202  6E0F               	movwf	___awmod@dividend,c
  8403  001204  6A10               	clrf	___awmod@dividend+1,c
  8404  001206  BE0F               	btfsc	___awmod@dividend,7,c
  8405  001208  0610               	decf	___awmod@dividend+1,f,c
  8406  00120A  EC90  F01A         	call	___awmod	;wreg free
  8407  00120E  C00F  F015         	movff	?___awmod,___awdiv@dividend
  8408  001212  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  8409  001216  ECF1  F018         	call	___awdiv	;wreg free
  8410  00121A  0E09               	movlw	9
  8411  00121C  2415               	addwf	?___awdiv,w,c
  8412  00121E  6E1D               	movwf	___wmul@multiplier,c
  8413  001220  0E00               	movlw	0
  8414  001222  2016               	addwfc	?___awdiv+1,w,c
  8415  001224  6E1E               	movwf	___wmul@multiplier+1,c
  8416  001226  EC24  F01E         	call	___wmul	;wreg free
  8417  00122A  0E18               	movlw	low __npowers_
  8418  00122C  241D               	addwf	?___wmul,w,c
  8419  00122E  6EF6               	movwf	tblptrl,c
  8420  001230  0EFF               	movlw	high __npowers_
  8421  001232  201E               	addwfc	?___wmul+1,w,c
  8422  001234  6EF7               	movwf	tblptrh,c
  8423  001236                     	if	0	;There are less than 3 active tblptr bytes
  8424  001236                     	endif
  8425  001236  0009               	tblrd		*+
  8426  001238  CFF5 F026          	movff	tablat,___ftmul@f2
  8427  00123C  0009               	tblrd		*+
  8428  00123E  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8429  001242  000A               	tblrd		*-
  8430  001244  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8431  001248  0E00               	movlw	0
  8432  00124A  6E18               	movwf	___awdiv@divisor+1,c
  8433  00124C  0E64               	movlw	100
  8434  00124E  6E17               	movwf	___awdiv@divisor,c
  8435  001250  5038               	movf	scale@scl,w,c
  8436  001252  6E15               	movwf	___awdiv@dividend,c
  8437  001254  6A16               	clrf	___awdiv@dividend+1,c
  8438  001256  BE15               	btfsc	___awdiv@dividend,7,c
  8439  001258  0616               	decf	___awdiv@dividend+1,f,c
  8440  00125A  ECF1  F018         	call	___awdiv	;wreg free
  8441  00125E  0E12               	movlw	18
  8442  001260  2415               	addwf	?___awdiv,w,c
  8443  001262  6E1D               	movwf	___wmul@multiplier,c
  8444  001264  0E00               	movlw	0
  8445  001266  2016               	addwfc	?___awdiv+1,w,c
  8446  001268  6E1E               	movwf	___wmul@multiplier+1,c
  8447  00126A  0E00               	movlw	0
  8448  00126C  6E20               	movwf	___wmul@multiplicand+1,c
  8449  00126E  0E03               	movlw	3
  8450  001270  6E1F               	movwf	___wmul@multiplicand,c
  8451  001272  EC24  F01E         	call	___wmul	;wreg free
  8452  001276  0E18               	movlw	low __npowers_
  8453  001278  241D               	addwf	?___wmul,w,c
  8454  00127A  6EF6               	movwf	tblptrl,c
  8455  00127C  0EFF               	movlw	high __npowers_
  8456  00127E  201E               	addwfc	?___wmul+1,w,c
  8457  001280  6EF7               	movwf	tblptrh,c
  8458  001282                     	if	0	;There are less than 3 active tblptr bytes
  8459  001282                     	endif
  8460  001282  0009               	tblrd		*+
  8461  001284  CFF5 F023          	movff	tablat,___ftmul@f1
  8462  001288  0009               	tblrd		*+
  8463  00128A  CFF5 F024          	movff	tablat,___ftmul@f1+1
  8464  00128E  000A               	tblrd		*-
  8465  001290  CFF5 F025          	movff	tablat,___ftmul@f1+2
  8466  001294  EC10  F014         	call	___ftmul	;wreg free
  8467  001298  C023  F035         	movff	?___ftmul,_scale$2520
  8468  00129C  C024  F036         	movff	?___ftmul+1,_scale$2520+1
  8469  0012A0  C025  F037         	movff	?___ftmul+2,_scale$2520+2
  8470                           
  8471                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8472  0012A4  C035  F023         	movff	_scale$2520,___ftmul@f1
  8473  0012A8  C036  F024         	movff	_scale$2520+1,___ftmul@f1+1
  8474  0012AC  C037  F025         	movff	_scale$2520+2,___ftmul@f1+2
  8475  0012B0  0E00               	movlw	0
  8476  0012B2  6E20               	movwf	___wmul@multiplicand+1,c
  8477  0012B4  0E03               	movlw	3
  8478  0012B6  6E1F               	movwf	___wmul@multiplicand,c
  8479  0012B8  0E00               	movlw	0
  8480  0012BA  6E12               	movwf	___awmod@divisor+1,c
  8481  0012BC  0E0A               	movlw	10
  8482  0012BE  6E11               	movwf	___awmod@divisor,c
  8483  0012C0  5038               	movf	scale@scl,w,c
  8484  0012C2  6E0F               	movwf	___awmod@dividend,c
  8485  0012C4  6A10               	clrf	___awmod@dividend+1,c
  8486  0012C6  BE0F               	btfsc	___awmod@dividend,7,c
  8487  0012C8  0610               	decf	___awmod@dividend+1,f,c
  8488  0012CA  EC90  F01A         	call	___awmod	;wreg free
  8489  0012CE  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  8490  0012D2  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  8491  0012D6  EC24  F01E         	call	___wmul	;wreg free
  8492  0012DA  0E18               	movlw	low __npowers_
  8493  0012DC  241D               	addwf	?___wmul,w,c
  8494  0012DE  6EF6               	movwf	tblptrl,c
  8495  0012E0  0EFF               	movlw	high __npowers_
  8496  0012E2  201E               	addwfc	?___wmul+1,w,c
  8497  0012E4  6EF7               	movwf	tblptrh,c
  8498  0012E6                     	if	0	;There are less than 3 active tblptr bytes
  8499  0012E6                     	endif
  8500  0012E6  0009               	tblrd		*+
  8501  0012E8  CFF5 F026          	movff	tablat,___ftmul@f2
  8502  0012EC  0009               	tblrd		*+
  8503  0012EE  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8504  0012F2  000A               	tblrd		*-
  8505  0012F4  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8506  0012F8  EC10  F014         	call	___ftmul	;wreg free
  8507  0012FC  D141               	goto	L11
  8508  0012FE  D15A               	goto	l595
  8509  001300  D054               	goto	l6030
  8510  001302                     l6024:
  8511                           
  8512                           ;doprnt.c: 432: else if(scl > 10)
  8513  001302  5038               	movf	scale@scl,w,c
  8514  001304  0A80               	xorlw	128
  8515  001306  0F75               	addlw	-139
  8516  001308  A0D8               	btfss	status,0,c
  8517  00130A  D04F               	goto	l6030
  8518                           
  8519                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8520  00130C  0E00               	movlw	0
  8521  00130E  6E18               	movwf	___awdiv@divisor+1,c
  8522  001310  0E0A               	movlw	10
  8523  001312  6E17               	movwf	___awdiv@divisor,c
  8524  001314  5038               	movf	scale@scl,w,c
  8525  001316  6E15               	movwf	___awdiv@dividend,c
  8526  001318  6A16               	clrf	___awdiv@dividend+1,c
  8527  00131A  BE15               	btfsc	___awdiv@dividend,7,c
  8528  00131C  0616               	decf	___awdiv@dividend+1,f,c
  8529  00131E  ECF1  F018         	call	___awdiv	;wreg free
  8530  001322  0E09               	movlw	9
  8531  001324  2415               	addwf	?___awdiv,w,c
  8532  001326  6E1D               	movwf	___wmul@multiplier,c
  8533  001328  0E00               	movlw	0
  8534  00132A  2016               	addwfc	?___awdiv+1,w,c
  8535  00132C  6E1E               	movwf	___wmul@multiplier+1,c
  8536  00132E  0E00               	movlw	0
  8537  001330  6E20               	movwf	___wmul@multiplicand+1,c
  8538  001332  0E03               	movlw	3
  8539  001334  6E1F               	movwf	___wmul@multiplicand,c
  8540  001336  EC24  F01E         	call	___wmul	;wreg free
  8541  00133A  0E18               	movlw	low __npowers_
  8542  00133C  241D               	addwf	?___wmul,w,c
  8543  00133E  6EF6               	movwf	tblptrl,c
  8544  001340  0EFF               	movlw	high __npowers_
  8545  001342  201E               	addwfc	?___wmul+1,w,c
  8546  001344  6EF7               	movwf	tblptrh,c
  8547  001346                     	if	0	;There are less than 3 active tblptr bytes
  8548  001346                     	endif
  8549  001346  0009               	tblrd		*+
  8550  001348  CFF5 F023          	movff	tablat,___ftmul@f1
  8551  00134C  0009               	tblrd		*+
  8552  00134E  CFF5 F024          	movff	tablat,___ftmul@f1+1
  8553  001352  000A               	tblrd		*-
  8554  001354  CFF5 F025          	movff	tablat,___ftmul@f1+2
  8555  001358  0E00               	movlw	0
  8556  00135A  6E20               	movwf	___wmul@multiplicand+1,c
  8557  00135C  0E03               	movlw	3
  8558  00135E  6E1F               	movwf	___wmul@multiplicand,c
  8559  001360  0E00               	movlw	0
  8560  001362  6E12               	movwf	___awmod@divisor+1,c
  8561  001364  0E0A               	movlw	10
  8562  001366  6E11               	movwf	___awmod@divisor,c
  8563  001368  5038               	movf	scale@scl,w,c
  8564  00136A  6E0F               	movwf	___awmod@dividend,c
  8565  00136C  6A10               	clrf	___awmod@dividend+1,c
  8566  00136E  BE0F               	btfsc	___awmod@dividend,7,c
  8567  001370  0610               	decf	___awmod@dividend+1,f,c
  8568  001372  EC90  F01A         	call	___awmod	;wreg free
  8569  001376  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  8570  00137A  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  8571  00137E  EC24  F01E         	call	___wmul	;wreg free
  8572  001382  0E18               	movlw	low __npowers_
  8573  001384  241D               	addwf	?___wmul,w,c
  8574  001386  6EF6               	movwf	tblptrl,c
  8575  001388  0EFF               	movlw	high __npowers_
  8576  00138A  201E               	addwfc	?___wmul+1,w,c
  8577  00138C  6EF7               	movwf	tblptrh,c
  8578  00138E                     	if	0	;There are less than 3 active tblptr bytes
  8579  00138E                     	endif
  8580  00138E  0009               	tblrd		*+
  8581  001390  CFF5 F026          	movff	tablat,___ftmul@f2
  8582  001394  0009               	tblrd		*+
  8583  001396  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8584  00139A  000A               	tblrd		*-
  8585  00139C  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8586  0013A0  EC10  F014         	call	___ftmul	;wreg free
  8587  0013A4  D0ED               	goto	L11
  8588  0013A6  D106               	goto	l595
  8589  0013A8  D000               	goto	l6030
  8590  0013AA                     l6030:
  8591                           
  8592                           ;doprnt.c: 434: return _npowers_[scl];
  8593  0013AA  5038               	movf	scale@scl,w,c
  8594  0013AC  0D03               	mullw	3
  8595  0013AE  0E18               	movlw	low __npowers_
  8596  0013B0  24F3               	addwf	prodl,w,c
  8597  0013B2  6EF6               	movwf	tblptrl,c
  8598  0013B4  0EFF               	movlw	high __npowers_
  8599  0013B6  D0F2               	goto	L10
  8600  0013B8  D0FD               	goto	l595
  8601  0013BA                     l6034:
  8602                           
  8603                           ;doprnt.c: 435: }
  8604                           ;doprnt.c: 436: if(scl>=110)
  8605  0013BA  5038               	movf	scale@scl,w,c
  8606  0013BC  0A80               	xorlw	128
  8607  0013BE  0F12               	addlw	-238
  8608  0013C0  A0D8               	btfss	status,0,c
  8609  0013C2  D08D               	goto	l6042
  8610                           
  8611                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8612  0013C4  0E00               	movlw	0
  8613  0013C6  6E20               	movwf	___wmul@multiplicand+1,c
  8614  0013C8  0E03               	movlw	3
  8615  0013CA  6E1F               	movwf	___wmul@multiplicand,c
  8616  0013CC  0E00               	movlw	0
  8617  0013CE  6E18               	movwf	___awdiv@divisor+1,c
  8618  0013D0  0E0A               	movlw	10
  8619  0013D2  6E17               	movwf	___awdiv@divisor,c
  8620  0013D4  0E00               	movlw	0
  8621  0013D6  6E12               	movwf	___awmod@divisor+1,c
  8622  0013D8  0E64               	movlw	100
  8623  0013DA  6E11               	movwf	___awmod@divisor,c
  8624  0013DC  5038               	movf	scale@scl,w,c
  8625  0013DE  6E0F               	movwf	___awmod@dividend,c
  8626  0013E0  6A10               	clrf	___awmod@dividend+1,c
  8627  0013E2  BE0F               	btfsc	___awmod@dividend,7,c
  8628  0013E4  0610               	decf	___awmod@dividend+1,f,c
  8629  0013E6  EC90  F01A         	call	___awmod	;wreg free
  8630  0013EA  C00F  F015         	movff	?___awmod,___awdiv@dividend
  8631  0013EE  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  8632  0013F2  ECF1  F018         	call	___awdiv	;wreg free
  8633  0013F6  0E09               	movlw	9
  8634  0013F8  2415               	addwf	?___awdiv,w,c
  8635  0013FA  6E1D               	movwf	___wmul@multiplier,c
  8636  0013FC  0E00               	movlw	0
  8637  0013FE  2016               	addwfc	?___awdiv+1,w,c
  8638  001400  6E1E               	movwf	___wmul@multiplier+1,c
  8639  001402  EC24  F01E         	call	___wmul	;wreg free
  8640  001406  0E3F               	movlw	low __powers_
  8641  001408  241D               	addwf	?___wmul,w,c
  8642  00140A  6EF6               	movwf	tblptrl,c
  8643  00140C  0EFF               	movlw	high __powers_
  8644  00140E  201E               	addwfc	?___wmul+1,w,c
  8645  001410  6EF7               	movwf	tblptrh,c
  8646  001412                     	if	0	;There are less than 3 active tblptr bytes
  8647  001412                     	endif
  8648  001412  0009               	tblrd		*+
  8649  001414  CFF5 F026          	movff	tablat,___ftmul@f2
  8650  001418  0009               	tblrd		*+
  8651  00141A  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8652  00141E  000A               	tblrd		*-
  8653  001420  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8654  001424  0E00               	movlw	0
  8655  001426  6E18               	movwf	___awdiv@divisor+1,c
  8656  001428  0E64               	movlw	100
  8657  00142A  6E17               	movwf	___awdiv@divisor,c
  8658  00142C  5038               	movf	scale@scl,w,c
  8659  00142E  6E15               	movwf	___awdiv@dividend,c
  8660  001430  6A16               	clrf	___awdiv@dividend+1,c
  8661  001432  BE15               	btfsc	___awdiv@dividend,7,c
  8662  001434  0616               	decf	___awdiv@dividend+1,f,c
  8663  001436  ECF1  F018         	call	___awdiv	;wreg free
  8664  00143A  0E12               	movlw	18
  8665  00143C  2415               	addwf	?___awdiv,w,c
  8666  00143E  6E1D               	movwf	___wmul@multiplier,c
  8667  001440  0E00               	movlw	0
  8668  001442  2016               	addwfc	?___awdiv+1,w,c
  8669  001444  6E1E               	movwf	___wmul@multiplier+1,c
  8670  001446  0E00               	movlw	0
  8671  001448  6E20               	movwf	___wmul@multiplicand+1,c
  8672  00144A  0E03               	movlw	3
  8673  00144C  6E1F               	movwf	___wmul@multiplicand,c
  8674  00144E  EC24  F01E         	call	___wmul	;wreg free
  8675  001452  0E3F               	movlw	low __powers_
  8676  001454  241D               	addwf	?___wmul,w,c
  8677  001456  6EF6               	movwf	tblptrl,c
  8678  001458  0EFF               	movlw	high __powers_
  8679  00145A  201E               	addwfc	?___wmul+1,w,c
  8680  00145C  6EF7               	movwf	tblptrh,c
  8681  00145E                     	if	0	;There are less than 3 active tblptr bytes
  8682  00145E                     	endif
  8683  00145E  0009               	tblrd		*+
  8684  001460  CFF5 F023          	movff	tablat,___ftmul@f1
  8685  001464  0009               	tblrd		*+
  8686  001466  CFF5 F024          	movff	tablat,___ftmul@f1+1
  8687  00146A  000A               	tblrd		*-
  8688  00146C  CFF5 F025          	movff	tablat,___ftmul@f1+2
  8689  001470  EC10  F014         	call	___ftmul	;wreg free
  8690  001474  C023  F035         	movff	?___ftmul,_scale$2520
  8691  001478  C024  F036         	movff	?___ftmul+1,_scale$2520+1
  8692  00147C  C025  F037         	movff	?___ftmul+2,_scale$2520+2
  8693                           
  8694                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8695  001480  C035  F023         	movff	_scale$2520,___ftmul@f1
  8696  001484  C036  F024         	movff	_scale$2520+1,___ftmul@f1+1
  8697  001488  C037  F025         	movff	_scale$2520+2,___ftmul@f1+2
  8698  00148C  0E00               	movlw	0
  8699  00148E  6E20               	movwf	___wmul@multiplicand+1,c
  8700  001490  0E03               	movlw	3
  8701  001492  6E1F               	movwf	___wmul@multiplicand,c
  8702  001494  0E00               	movlw	0
  8703  001496  6E12               	movwf	___awmod@divisor+1,c
  8704  001498  0E0A               	movlw	10
  8705  00149A  6E11               	movwf	___awmod@divisor,c
  8706  00149C  5038               	movf	scale@scl,w,c
  8707  00149E  6E0F               	movwf	___awmod@dividend,c
  8708  0014A0  6A10               	clrf	___awmod@dividend+1,c
  8709  0014A2  BE0F               	btfsc	___awmod@dividend,7,c
  8710  0014A4  0610               	decf	___awmod@dividend+1,f,c
  8711  0014A6  EC90  F01A         	call	___awmod	;wreg free
  8712  0014AA  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  8713  0014AE  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  8714  0014B2  EC24  F01E         	call	___wmul	;wreg free
  8715  0014B6  0E3F               	movlw	low __powers_
  8716  0014B8  241D               	addwf	?___wmul,w,c
  8717  0014BA  6EF6               	movwf	tblptrl,c
  8718  0014BC  0EFF               	movlw	high __powers_
  8719  0014BE  201E               	addwfc	?___wmul+1,w,c
  8720  0014C0  6EF7               	movwf	tblptrh,c
  8721  0014C2                     	if	0	;There are less than 3 active tblptr bytes
  8722  0014C2                     	endif
  8723  0014C2  0009               	tblrd		*+
  8724  0014C4  CFF5 F026          	movff	tablat,___ftmul@f2
  8725  0014C8  0009               	tblrd		*+
  8726  0014CA  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8727  0014CE  000A               	tblrd		*-
  8728  0014D0  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8729  0014D4  EC10  F014         	call	___ftmul	;wreg free
  8730  0014D8  D053               	goto	L11
  8731  0014DA  D06C               	goto	l595
  8732  0014DC  D059               	goto	l6048
  8733  0014DE                     l6042:
  8734                           
  8735                           ;doprnt.c: 438: else if(scl > 10)
  8736  0014DE  5038               	movf	scale@scl,w,c
  8737  0014E0  0A80               	xorlw	128
  8738  0014E2  0F75               	addlw	-139
  8739  0014E4  A0D8               	btfss	status,0,c
  8740  0014E6  D054               	goto	l6048
  8741                           
  8742                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8743  0014E8  0E00               	movlw	0
  8744  0014EA  6E18               	movwf	___awdiv@divisor+1,c
  8745  0014EC  0E0A               	movlw	10
  8746  0014EE  6E17               	movwf	___awdiv@divisor,c
  8747  0014F0  5038               	movf	scale@scl,w,c
  8748  0014F2  6E15               	movwf	___awdiv@dividend,c
  8749  0014F4  6A16               	clrf	___awdiv@dividend+1,c
  8750  0014F6  BE15               	btfsc	___awdiv@dividend,7,c
  8751  0014F8  0616               	decf	___awdiv@dividend+1,f,c
  8752  0014FA  ECF1  F018         	call	___awdiv	;wreg free
  8753  0014FE  0E09               	movlw	9
  8754  001500  2415               	addwf	?___awdiv,w,c
  8755  001502  6E1D               	movwf	___wmul@multiplier,c
  8756  001504  0E00               	movlw	0
  8757  001506  2016               	addwfc	?___awdiv+1,w,c
  8758  001508  6E1E               	movwf	___wmul@multiplier+1,c
  8759  00150A  0E00               	movlw	0
  8760  00150C  6E20               	movwf	___wmul@multiplicand+1,c
  8761  00150E  0E03               	movlw	3
  8762  001510  6E1F               	movwf	___wmul@multiplicand,c
  8763  001512  EC24  F01E         	call	___wmul	;wreg free
  8764  001516  0E3F               	movlw	low __powers_
  8765  001518  241D               	addwf	?___wmul,w,c
  8766  00151A  6EF6               	movwf	tblptrl,c
  8767  00151C  0EFF               	movlw	high __powers_
  8768  00151E  201E               	addwfc	?___wmul+1,w,c
  8769  001520  6EF7               	movwf	tblptrh,c
  8770  001522                     	if	0	;There are less than 3 active tblptr bytes
  8771  001522                     	endif
  8772  001522  0009               	tblrd		*+
  8773  001524  CFF5 F023          	movff	tablat,___ftmul@f1
  8774  001528  0009               	tblrd		*+
  8775  00152A  CFF5 F024          	movff	tablat,___ftmul@f1+1
  8776  00152E  000A               	tblrd		*-
  8777  001530  CFF5 F025          	movff	tablat,___ftmul@f1+2
  8778  001534  0E00               	movlw	0
  8779  001536  6E20               	movwf	___wmul@multiplicand+1,c
  8780  001538  0E03               	movlw	3
  8781  00153A  6E1F               	movwf	___wmul@multiplicand,c
  8782  00153C  0E00               	movlw	0
  8783  00153E  6E12               	movwf	___awmod@divisor+1,c
  8784  001540  0E0A               	movlw	10
  8785  001542  6E11               	movwf	___awmod@divisor,c
  8786  001544  5038               	movf	scale@scl,w,c
  8787  001546  6E0F               	movwf	___awmod@dividend,c
  8788  001548  6A10               	clrf	___awmod@dividend+1,c
  8789  00154A  BE0F               	btfsc	___awmod@dividend,7,c
  8790  00154C  0610               	decf	___awmod@dividend+1,f,c
  8791  00154E  EC90  F01A         	call	___awmod	;wreg free
  8792  001552  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  8793  001556  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  8794  00155A  EC24  F01E         	call	___wmul	;wreg free
  8795  00155E  0E3F               	movlw	low __powers_
  8796  001560  241D               	addwf	?___wmul,w,c
  8797  001562  6EF6               	movwf	tblptrl,c
  8798  001564  0EFF               	movlw	high __powers_
  8799  001566  201E               	addwfc	?___wmul+1,w,c
  8800  001568  6EF7               	movwf	tblptrh,c
  8801  00156A                     	if	0	;There are less than 3 active tblptr bytes
  8802  00156A                     	endif
  8803  00156A  0009               	tblrd		*+
  8804  00156C  CFF5 F026          	movff	tablat,___ftmul@f2
  8805  001570  0009               	tblrd		*+
  8806  001572  CFF5 F027          	movff	tablat,___ftmul@f2+1
  8807  001576  000A               	tblrd		*-
  8808  001578  CFF5 F028          	movff	tablat,___ftmul@f2+2
  8809  00157C  EC10  F014         	call	___ftmul	;wreg free
  8810  001580                     L11:
  8811  001580  C023  F032         	movff	?___ftmul,?_scale
  8812  001584  C024  F033         	movff	?___ftmul+1,?_scale+1
  8813  001588  C025  F034         	movff	?___ftmul+2,?_scale+2
  8814  00158C  D013               	goto	l595
  8815  00158E  D000               	goto	l6048
  8816  001590                     l6048:
  8817                           
  8818                           ;doprnt.c: 440: return _powers_[scl];
  8819  001590  5038               	movf	scale@scl,w,c
  8820  001592  0D03               	mullw	3
  8821  001594  0E3F               	movlw	low __powers_
  8822  001596  24F3               	addwf	prodl,w,c
  8823  001598  6EF6               	movwf	tblptrl,c
  8824  00159A  0EFF               	movlw	high __powers_
  8825  00159C                     L10:
  8826  00159C  20F4               	addwfc	prodh,w,c
  8827  00159E  6EF7               	movwf	tblptrh,c
  8828  0015A0                     	if	0	;There are less than 3 active tblptr bytes
  8829  0015A0                     	endif
  8830  0015A0  0009               	tblrd		*+
  8831  0015A2  CFF5 F032          	movff	tablat,?_scale
  8832  0015A6  0009               	tblrd		*+
  8833  0015A8  CFF5 F033          	movff	tablat,?_scale+1
  8834  0015AC  000A               	tblrd		*-
  8835  0015AE  CFF5 F034          	movff	tablat,?_scale+2
  8836  0015B2  D000               	goto	l595
  8837  0015B4                     l595:
  8838  0015B4  0012               	return		;funcret
  8839  0015B6                     __end_of_scale:
  8840                           	opt stack 0
  8841                           tblptru	equ	0xFF8
  8842                           tblptrh	equ	0xFF7
  8843                           tblptrl	equ	0xFF6
  8844                           tablat	equ	0xFF5
  8845                           prodh	equ	0xFF4
  8846                           prodl	equ	0xFF3
  8847                           intcon2	equ	0xFF1
  8848                           postinc0	equ	0xFEE
  8849                           wreg	equ	0xFE8
  8850                           postdec1	equ	0xFE5
  8851                           fsr1l	equ	0xFE1
  8852                           indf2	equ	0xFDF
  8853                           postinc2	equ	0xFDE
  8854                           postdec2	equ	0xFDD
  8855                           fsr2h	equ	0xFDA
  8856                           fsr2l	equ	0xFD9
  8857                           status	equ	0xFD8
  8858                           
  8859 ;; *************** function _putch *****************
  8860 ;; Defined at:
  8861 ;;		line 295 in file "Lab9p1.c"
  8862 ;; Parameters:    Size  Location     Type
  8863 ;;  c               1    wreg     unsigned char 
  8864 ;; Auto vars:     Size  Location     Type
  8865 ;;  c               1   14[COMRAM] unsigned char 
  8866 ;; Return value:  Size  Location     Type
  8867 ;;		None               void
  8868 ;; Registers used:
  8869 ;;		wreg
  8870 ;; Tracked objects:
  8871 ;;		On entry : 0/0
  8872 ;;		On exit  : 0/0
  8873 ;;		Unchanged: 0/0
  8874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8876 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8878 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8879 ;;Total ram usage:        1 bytes
  8880 ;; Hardware stack levels used:    1
  8881 ;; Hardware stack levels required when called:    2
  8882 ;; This function calls:
  8883 ;;		Nothing
  8884 ;; This function is called by:
  8885 ;;		_printf
  8886 ;; This function uses a non-reentrant model
  8887 ;;
  8888                           
  8889                           	psect	text30
  8890  003DCE                     __ptext30:
  8891                           	opt stack 0
  8892  003DCE                     _putch:
  8893                           	opt stack 23
  8894                           
  8895                           ;incstack = 0
  8896                           ;putch@c stored from wreg
  8897  003DCE  6E0F               	movwf	putch@c,c
  8898                           
  8899                           ;Lab9p1.c: 297: while (!TRMT);
  8900  003DD0  D000               	goto	l398
  8901  003DD2                     l398:
  8902  003DD2  A2AC               	btfss	4012,1,c	;volatile
  8903  003DD4  D7FE               	goto	l398
  8904                           
  8905                           ;Lab9p1.c: 298: TXREG = c;
  8906  003DD6  C00F  FFAD         	movff	putch@c,4013	;volatile
  8907  003DDA  0012               	return		;funcret
  8908  003DDC                     __end_of_putch:
  8909                           	opt stack 0
  8910                           tblptru	equ	0xFF8
  8911                           tblptrh	equ	0xFF7
  8912                           tblptrl	equ	0xFF6
  8913                           tablat	equ	0xFF5
  8914                           prodh	equ	0xFF4
  8915                           prodl	equ	0xFF3
  8916                           intcon2	equ	0xFF1
  8917                           postinc0	equ	0xFEE
  8918                           wreg	equ	0xFE8
  8919                           postdec1	equ	0xFE5
  8920                           fsr1l	equ	0xFE1
  8921                           indf2	equ	0xFDF
  8922                           postinc2	equ	0xFDE
  8923                           postdec2	equ	0xFDD
  8924                           fsr2h	equ	0xFDA
  8925                           fsr2l	equ	0xFD9
  8926                           status	equ	0xFD8
  8927                           
  8928 ;; *************** function _isdigit *****************
  8929 ;; Defined at:
  8930 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\isdigit.c"
  8931 ;; Parameters:    Size  Location     Type
  8932 ;;  c               1    wreg     unsigned char 
  8933 ;; Auto vars:     Size  Location     Type
  8934 ;;  c               1   16[COMRAM] unsigned char 
  8935 ;; Return value:  Size  Location     Type
  8936 ;;		None               void
  8937 ;; Registers used:
  8938 ;;		wreg, status,2, status,0
  8939 ;; Tracked objects:
  8940 ;;		On entry : 0/0
  8941 ;;		On exit  : 0/0
  8942 ;;		Unchanged: 0/0
  8943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8945 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8946 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8947 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8948 ;;Total ram usage:        3 bytes
  8949 ;; Hardware stack levels used:    1
  8950 ;; Hardware stack levels required when called:    2
  8951 ;; This function calls:
  8952 ;;		Nothing
  8953 ;; This function is called by:
  8954 ;;		_printf
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           	psect	text31
  8959  003CBA                     __ptext31:
  8960                           	opt stack 0
  8961  003CBA                     _isdigit:
  8962                           	opt stack 23
  8963                           
  8964                           ;incstack = 0
  8965                           ;isdigit@c stored from wreg
  8966  003CBA  6E11               	movwf	isdigit@c,c
  8967  003CBC  0E00               	movlw	0
  8968  003CBE  6E10               	movwf	_isdigit$2212,c
  8969  003CC0  0E3A               	movlw	58
  8970  003CC2  6011               	cpfslt	isdigit@c,c
  8971  003CC4  D006               	goto	l6060
  8972  003CC6  0E2F               	movlw	47
  8973  003CC8  6411               	cpfsgt	isdigit@c,c
  8974  003CCA  D003               	goto	l6060
  8975  003CCC  0E01               	movlw	1
  8976  003CCE  6E10               	movwf	_isdigit$2212,c
  8977  003CD0  D000               	goto	l6060
  8978  003CD2                     l6060:
  8979  003CD2  C010  F00F         	movff	_isdigit$2212,??_isdigit
  8980  003CD6  300F               	rrcf	??_isdigit,w,c
  8981  003CD8  D000               	goto	l1197
  8982  003CDA                     l1197:
  8983  003CDA  0012               	return		;funcret
  8984  003CDC                     __end_of_isdigit:
  8985                           	opt stack 0
  8986                           tblptru	equ	0xFF8
  8987                           tblptrh	equ	0xFF7
  8988                           tblptrl	equ	0xFF6
  8989                           tablat	equ	0xFF5
  8990                           prodh	equ	0xFF4
  8991                           prodl	equ	0xFF3
  8992                           intcon2	equ	0xFF1
  8993                           postinc0	equ	0xFEE
  8994                           wreg	equ	0xFE8
  8995                           postdec1	equ	0xFE5
  8996                           fsr1l	equ	0xFE1
  8997                           indf2	equ	0xFDF
  8998                           postinc2	equ	0xFDE
  8999                           postdec2	equ	0xFDD
  9000                           fsr2h	equ	0xFDA
  9001                           fsr2l	equ	0xFD9
  9002                           status	equ	0xFD8
  9003                           
  9004 ;; *************** function _fround *****************
  9005 ;; Defined at:
  9006 ;;		line 409 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  9007 ;; Parameters:    Size  Location     Type
  9008 ;;  prec            1    wreg     unsigned char 
  9009 ;; Auto vars:     Size  Location     Type
  9010 ;;  prec            1   58[COMRAM] unsigned char 
  9011 ;; Return value:  Size  Location     Type
  9012 ;;                  3   49[COMRAM] unsigned char 
  9013 ;; Registers used:
  9014 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9015 ;; Tracked objects:
  9016 ;;		On entry : 0/0
  9017 ;;		On exit  : 0/0
  9018 ;;		Unchanged: 0/0
  9019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9020 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9021 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;Total ram usage:       10 bytes
  9025 ;; Hardware stack levels used:    1
  9026 ;; Hardware stack levels required when called:    4
  9027 ;; This function calls:
  9028 ;;		___awdiv
  9029 ;;		___awmod
  9030 ;;		___ftmul
  9031 ;;		___wmul
  9032 ;; This function is called by:
  9033 ;;		_printf
  9034 ;; This function uses a non-reentrant model
  9035 ;;
  9036                           
  9037                           	psect	text32
  9038  001918                     __ptext32:
  9039                           	opt stack 0
  9040  001918                     _fround:
  9041                           	opt stack 21
  9042                           
  9043                           ;incstack = 0
  9044                           ;fround@prec stored from wreg
  9045  001918  6E3B               	movwf	fround@prec,c
  9046                           
  9047                           ;doprnt.c: 413: if(prec>=110)
  9048  00191A  0E6D               	movlw	109
  9049  00191C  643B               	cpfsgt	fround@prec,c
  9050  00191E  D09B               	goto	l6002
  9051                           
  9052                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9053  001920  0E00               	movlw	0
  9054  001922  6E20               	movwf	___wmul@multiplicand+1,c
  9055  001924  0E03               	movlw	3
  9056  001926  6E1F               	movwf	___wmul@multiplicand,c
  9057  001928  0E00               	movlw	0
  9058  00192A  6E18               	movwf	___awdiv@divisor+1,c
  9059  00192C  0E0A               	movlw	10
  9060  00192E  6E17               	movwf	___awdiv@divisor,c
  9061  001930  0E00               	movlw	0
  9062  001932  6E12               	movwf	___awmod@divisor+1,c
  9063  001934  0E64               	movlw	100
  9064  001936  6E11               	movwf	___awmod@divisor,c
  9065  001938  C03B  F00F         	movff	fround@prec,___awmod@dividend
  9066  00193C  6A10               	clrf	___awmod@dividend+1,c
  9067  00193E  EC90  F01A         	call	___awmod	;wreg free
  9068  001942  C00F  F015         	movff	?___awmod,___awdiv@dividend
  9069  001946  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  9070  00194A  ECF1  F018         	call	___awdiv	;wreg free
  9071  00194E  0E09               	movlw	9
  9072  001950  2415               	addwf	?___awdiv,w,c
  9073  001952  6E1D               	movwf	___wmul@multiplier,c
  9074  001954  0E00               	movlw	0
  9075  001956  2016               	addwfc	?___awdiv+1,w,c
  9076  001958  6E1E               	movwf	___wmul@multiplier+1,c
  9077  00195A  EC24  F01E         	call	___wmul	;wreg free
  9078  00195E  0E18               	movlw	low __npowers_
  9079  001960  241D               	addwf	?___wmul,w,c
  9080  001962  6EF6               	movwf	tblptrl,c
  9081  001964  0EFF               	movlw	high __npowers_
  9082  001966  201E               	addwfc	?___wmul+1,w,c
  9083  001968  6EF7               	movwf	tblptrh,c
  9084  00196A                     	if	0	;There are less than 3 active tblptr bytes
  9085  00196A                     	endif
  9086  00196A  0009               	tblrd		*+
  9087  00196C  CFF5 F026          	movff	tablat,___ftmul@f2
  9088  001970  0009               	tblrd		*+
  9089  001972  CFF5 F027          	movff	tablat,___ftmul@f2+1
  9090  001976  000A               	tblrd		*-
  9091  001978  CFF5 F028          	movff	tablat,___ftmul@f2+2
  9092  00197C  0E00               	movlw	0
  9093  00197E  6E18               	movwf	___awdiv@divisor+1,c
  9094  001980  0E64               	movlw	100
  9095  001982  6E17               	movwf	___awdiv@divisor,c
  9096  001984  C03B  F015         	movff	fround@prec,___awdiv@dividend
  9097  001988  6A16               	clrf	___awdiv@dividend+1,c
  9098  00198A  ECF1  F018         	call	___awdiv	;wreg free
  9099  00198E  0E12               	movlw	18
  9100  001990  2415               	addwf	?___awdiv,w,c
  9101  001992  6E1D               	movwf	___wmul@multiplier,c
  9102  001994  0E00               	movlw	0
  9103  001996  2016               	addwfc	?___awdiv+1,w,c
  9104  001998  6E1E               	movwf	___wmul@multiplier+1,c
  9105  00199A  0E00               	movlw	0
  9106  00199C  6E20               	movwf	___wmul@multiplicand+1,c
  9107  00199E  0E03               	movlw	3
  9108  0019A0  6E1F               	movwf	___wmul@multiplicand,c
  9109  0019A2  EC24  F01E         	call	___wmul	;wreg free
  9110  0019A6  0E18               	movlw	low __npowers_
  9111  0019A8  241D               	addwf	?___wmul,w,c
  9112  0019AA  6EF6               	movwf	tblptrl,c
  9113  0019AC  0EFF               	movlw	high __npowers_
  9114  0019AE  201E               	addwfc	?___wmul+1,w,c
  9115  0019B0  6EF7               	movwf	tblptrh,c
  9116  0019B2                     	if	0	;There are less than 3 active tblptr bytes
  9117  0019B2                     	endif
  9118  0019B2  0009               	tblrd		*+
  9119  0019B4  CFF5 F023          	movff	tablat,___ftmul@f1
  9120  0019B8  0009               	tblrd		*+
  9121  0019BA  CFF5 F024          	movff	tablat,___ftmul@f1+1
  9122  0019BE  000A               	tblrd		*-
  9123  0019C0  CFF5 F025          	movff	tablat,___ftmul@f1+2
  9124  0019C4  EC10  F014         	call	___ftmul	;wreg free
  9125  0019C8  C023  F038         	movff	?___ftmul,_fround$2518
  9126  0019CC  C024  F039         	movff	?___ftmul+1,_fround$2518+1
  9127  0019D0  C025  F03A         	movff	?___ftmul+2,_fround$2518+2
  9128                           
  9129                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9130  0019D4  0E00               	movlw	0
  9131  0019D6  6E20               	movwf	___wmul@multiplicand+1,c
  9132  0019D8  0E03               	movlw	3
  9133  0019DA  6E1F               	movwf	___wmul@multiplicand,c
  9134  0019DC  0E00               	movlw	0
  9135  0019DE  6E12               	movwf	___awmod@divisor+1,c
  9136  0019E0  0E0A               	movlw	10
  9137  0019E2  6E11               	movwf	___awmod@divisor,c
  9138  0019E4  C03B  F00F         	movff	fround@prec,___awmod@dividend
  9139  0019E8  6A10               	clrf	___awmod@dividend+1,c
  9140  0019EA  EC90  F01A         	call	___awmod	;wreg free
  9141  0019EE  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  9142  0019F2  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  9143  0019F6  EC24  F01E         	call	___wmul	;wreg free
  9144  0019FA  0E18               	movlw	low __npowers_
  9145  0019FC  241D               	addwf	?___wmul,w,c
  9146  0019FE  6EF6               	movwf	tblptrl,c
  9147  001A00  0EFF               	movlw	high __npowers_
  9148  001A02  201E               	addwfc	?___wmul+1,w,c
  9149  001A04  6EF7               	movwf	tblptrh,c
  9150  001A06                     	if	0	;There are less than 3 active tblptr bytes
  9151  001A06                     	endif
  9152  001A06  0009               	tblrd		*+
  9153  001A08  CFF5 F026          	movff	tablat,___ftmul@f2
  9154  001A0C  0009               	tblrd		*+
  9155  001A0E  CFF5 F027          	movff	tablat,___ftmul@f2+1
  9156  001A12  000A               	tblrd		*-
  9157  001A14  CFF5 F028          	movff	tablat,___ftmul@f2+2
  9158  001A18  C038  F023         	movff	_fround$2518,___ftmul@f1
  9159  001A1C  C039  F024         	movff	_fround$2518+1,___ftmul@f1+1
  9160  001A20  C03A  F025         	movff	_fround$2518+2,___ftmul@f1+2
  9161  001A24  EC10  F014         	call	___ftmul	;wreg free
  9162  001A28  C023  F035         	movff	?___ftmul,_fround$2519
  9163  001A2C  C024  F036         	movff	?___ftmul+1,_fround$2519+1
  9164  001A30  C025  F037         	movff	?___ftmul+2,_fround$2519+2
  9165                           
  9166                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9167  001A34  C035  F023         	movff	_fround$2519,___ftmul@f1
  9168  001A38  C036  F024         	movff	_fround$2519+1,___ftmul@f1+1
  9169  001A3C  C037  F025         	movff	_fround$2519+2,___ftmul@f1+2
  9170  001A40  0E00               	movlw	0
  9171  001A42  6E26               	movwf	___ftmul@f2,c
  9172  001A44  0E00               	movlw	0
  9173  001A46  6E27               	movwf	___ftmul@f2+1,c
  9174  001A48  0E3F               	movlw	63
  9175  001A4A  6E28               	movwf	___ftmul@f2+2,c
  9176  001A4C  EC10  F014         	call	___ftmul	;wreg free
  9177  001A50  D07D               	goto	L13
  9178  001A52  D083               	goto	l588
  9179  001A54  D062               	goto	l6010
  9180  001A56                     l6002:
  9181                           
  9182                           ;doprnt.c: 415: else if(prec > 10)
  9183  001A56  0E0A               	movlw	10
  9184  001A58  643B               	cpfsgt	fround@prec,c
  9185  001A5A  D05F               	goto	l6010
  9186                           
  9187                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9188  001A5C  0E00               	movlw	0
  9189  001A5E  6E20               	movwf	___wmul@multiplicand+1,c
  9190  001A60  0E03               	movlw	3
  9191  001A62  6E1F               	movwf	___wmul@multiplicand,c
  9192  001A64  0E00               	movlw	0
  9193  001A66  6E12               	movwf	___awmod@divisor+1,c
  9194  001A68  0E0A               	movlw	10
  9195  001A6A  6E11               	movwf	___awmod@divisor,c
  9196  001A6C  C03B  F00F         	movff	fround@prec,___awmod@dividend
  9197  001A70  6A10               	clrf	___awmod@dividend+1,c
  9198  001A72  EC90  F01A         	call	___awmod	;wreg free
  9199  001A76  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  9200  001A7A  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  9201  001A7E  EC24  F01E         	call	___wmul	;wreg free
  9202  001A82  0E18               	movlw	low __npowers_
  9203  001A84  241D               	addwf	?___wmul,w,c
  9204  001A86  6EF6               	movwf	tblptrl,c
  9205  001A88  0EFF               	movlw	high __npowers_
  9206  001A8A  201E               	addwfc	?___wmul+1,w,c
  9207  001A8C  6EF7               	movwf	tblptrh,c
  9208  001A8E                     	if	0	;There are less than 3 active tblptr bytes
  9209  001A8E                     	endif
  9210  001A8E  0009               	tblrd		*+
  9211  001A90  CFF5 F026          	movff	tablat,___ftmul@f2
  9212  001A94  0009               	tblrd		*+
  9213  001A96  CFF5 F027          	movff	tablat,___ftmul@f2+1
  9214  001A9A  000A               	tblrd		*-
  9215  001A9C  CFF5 F028          	movff	tablat,___ftmul@f2+2
  9216  001AA0  0E00               	movlw	0
  9217  001AA2  6E18               	movwf	___awdiv@divisor+1,c
  9218  001AA4  0E0A               	movlw	10
  9219  001AA6  6E17               	movwf	___awdiv@divisor,c
  9220  001AA8  C03B  F015         	movff	fround@prec,___awdiv@dividend
  9221  001AAC  6A16               	clrf	___awdiv@dividend+1,c
  9222  001AAE  ECF1  F018         	call	___awdiv	;wreg free
  9223  001AB2  0E09               	movlw	9
  9224  001AB4  2415               	addwf	?___awdiv,w,c
  9225  001AB6  6E1D               	movwf	___wmul@multiplier,c
  9226  001AB8  0E00               	movlw	0
  9227  001ABA  2016               	addwfc	?___awdiv+1,w,c
  9228  001ABC  6E1E               	movwf	___wmul@multiplier+1,c
  9229  001ABE  0E00               	movlw	0
  9230  001AC0  6E20               	movwf	___wmul@multiplicand+1,c
  9231  001AC2  0E03               	movlw	3
  9232  001AC4  6E1F               	movwf	___wmul@multiplicand,c
  9233  001AC6  EC24  F01E         	call	___wmul	;wreg free
  9234  001ACA  0E18               	movlw	low __npowers_
  9235  001ACC  241D               	addwf	?___wmul,w,c
  9236  001ACE  6EF6               	movwf	tblptrl,c
  9237  001AD0  0EFF               	movlw	high __npowers_
  9238  001AD2  201E               	addwfc	?___wmul+1,w,c
  9239  001AD4  6EF7               	movwf	tblptrh,c
  9240  001AD6                     	if	0	;There are less than 3 active tblptr bytes
  9241  001AD6                     	endif
  9242  001AD6  0009               	tblrd		*+
  9243  001AD8  CFF5 F023          	movff	tablat,___ftmul@f1
  9244  001ADC  0009               	tblrd		*+
  9245  001ADE  CFF5 F024          	movff	tablat,___ftmul@f1+1
  9246  001AE2  000A               	tblrd		*-
  9247  001AE4  CFF5 F025          	movff	tablat,___ftmul@f1+2
  9248  001AE8  EC10  F014         	call	___ftmul	;wreg free
  9249  001AEC  C023  F038         	movff	?___ftmul,_fround$2518
  9250  001AF0  C024  F039         	movff	?___ftmul+1,_fround$2518+1
  9251  001AF4  C025  F03A         	movff	?___ftmul+2,_fround$2518+2
  9252                           
  9253                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9254  001AF8  C038  F023         	movff	_fround$2518,___ftmul@f1
  9255  001AFC  C039  F024         	movff	_fround$2518+1,___ftmul@f1+1
  9256  001B00  C03A  F025         	movff	_fround$2518+2,___ftmul@f1+2
  9257  001B04  0E00               	movlw	0
  9258  001B06  6E26               	movwf	___ftmul@f2,c
  9259  001B08  0E00               	movlw	0
  9260  001B0A  6E27               	movwf	___ftmul@f2+1,c
  9261  001B0C  0E3F               	movlw	63
  9262  001B0E  6E28               	movwf	___ftmul@f2+2,c
  9263  001B10  EC10  F014         	call	___ftmul	;wreg free
  9264  001B14  D01B               	goto	L13
  9265  001B16  D021               	goto	l588
  9266  001B18  D000               	goto	l6010
  9267  001B1A                     l6010:
  9268                           
  9269                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9270  001B1A  503B               	movf	fround@prec,w,c
  9271  001B1C  0D03               	mullw	3
  9272  001B1E  0E18               	movlw	low __npowers_
  9273  001B20  24F3               	addwf	prodl,w,c
  9274  001B22  6EF6               	movwf	tblptrl,c
  9275  001B24  0EFF               	movlw	high __npowers_
  9276  001B26  20F4               	addwfc	prodh,w,c
  9277  001B28  6EF7               	movwf	tblptrh,c
  9278  001B2A                     	if	0	;There are less than 3 active tblptr bytes
  9279  001B2A                     	endif
  9280  001B2A  0009               	tblrd		*+
  9281  001B2C  CFF5 F023          	movff	tablat,___ftmul@f1
  9282  001B30  0009               	tblrd		*+
  9283  001B32  CFF5 F024          	movff	tablat,___ftmul@f1+1
  9284  001B36  000A               	tblrd		*-
  9285  001B38  CFF5 F025          	movff	tablat,___ftmul@f1+2
  9286  001B3C  0E00               	movlw	0
  9287  001B3E  6E26               	movwf	___ftmul@f2,c
  9288  001B40  0E00               	movlw	0
  9289  001B42  6E27               	movwf	___ftmul@f2+1,c
  9290  001B44  0E3F               	movlw	63
  9291  001B46  6E28               	movwf	___ftmul@f2+2,c
  9292  001B48  EC10  F014         	call	___ftmul	;wreg free
  9293  001B4C                     L13:
  9294  001B4C  C023  F032         	movff	?___ftmul,?_fround
  9295  001B50  C024  F033         	movff	?___ftmul+1,?_fround+1
  9296  001B54  C025  F034         	movff	?___ftmul+2,?_fround+2
  9297  001B58  D000               	goto	l588
  9298  001B5A                     l588:
  9299  001B5A  0012               	return		;funcret
  9300  001B5C                     __end_of_fround:
  9301                           	opt stack 0
  9302                           tblptru	equ	0xFF8
  9303                           tblptrh	equ	0xFF7
  9304                           tblptrl	equ	0xFF6
  9305                           tablat	equ	0xFF5
  9306                           prodh	equ	0xFF4
  9307                           prodl	equ	0xFF3
  9308                           intcon2	equ	0xFF1
  9309                           postinc0	equ	0xFEE
  9310                           wreg	equ	0xFE8
  9311                           postdec1	equ	0xFE5
  9312                           fsr1l	equ	0xFE1
  9313                           indf2	equ	0xFDF
  9314                           postinc2	equ	0xFDE
  9315                           postdec2	equ	0xFDD
  9316                           fsr2h	equ	0xFDA
  9317                           fsr2l	equ	0xFD9
  9318                           status	equ	0xFD8
  9319                           
  9320 ;; *************** function ___ftmul *****************
  9321 ;; Defined at:
  9322 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftmul.c"
  9323 ;; Parameters:    Size  Location     Type
  9324 ;;  f1              3   34[COMRAM] float 
  9325 ;;  f2              3   37[COMRAM] float 
  9326 ;; Auto vars:     Size  Location     Type
  9327 ;;  f3_as_produc    3   44[COMRAM] unsigned um
  9328 ;;  sign            1   48[COMRAM] unsigned char 
  9329 ;;  cntr            1   47[COMRAM] unsigned char 
  9330 ;;  exp             1   43[COMRAM] unsigned char 
  9331 ;; Return value:  Size  Location     Type
  9332 ;;                  3   34[COMRAM] float 
  9333 ;; Registers used:
  9334 ;;		wreg, status,2, status,0, cstack
  9335 ;; Tracked objects:
  9336 ;;		On entry : 0/0
  9337 ;;		On exit  : 0/0
  9338 ;;		Unchanged: 0/0
  9339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9340 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9341 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9342 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9343 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9344 ;;Total ram usage:       15 bytes
  9345 ;; Hardware stack levels used:    1
  9346 ;; Hardware stack levels required when called:    3
  9347 ;; This function calls:
  9348 ;;		___ftpack
  9349 ;; This function is called by:
  9350 ;;		_fround
  9351 ;;		_scale
  9352 ;;		_printf
  9353 ;; This function uses a non-reentrant model
  9354 ;;
  9355                           
  9356                           	psect	text33
  9357  002820                     __ptext33:
  9358                           	opt stack 0
  9359  002820                     ___ftmul:
  9360                           	opt stack 21
  9361                           
  9362                           ;incstack = 0
  9363  002820  C025  F029         	movff	___ftmul@f1+2,??___ftmul
  9364  002824  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  9365  002826  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  9366  002828  3424               	rlcf	___ftmul@f1+1,w,c
  9367  00282A  3629               	rlcf	??___ftmul& (0+255),f,c
  9368  00282C  E301               	bnc	u5381
  9369  00282E  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  9370  002830                     u5381:
  9371  002830  5029               	movf	??___ftmul,w,c
  9372  002832  6E2C               	movwf	___ftmul@exp,c
  9373  002834  502C               	movf	___ftmul@exp,w,c
  9374  002836  A4D8               	btfss	status,2,c
  9375  002838  D002               	goto	l5802
  9376  00283A  D00E               	goto	l5804
  9377  00283C  D06C               	goto	l1161
  9378  00283E                     l5802:
  9379  00283E  C028  F029         	movff	___ftmul@f2+2,??___ftmul
  9380  002842  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  9381  002844  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  9382  002846  3427               	rlcf	___ftmul@f2+1,w,c
  9383  002848  3629               	rlcf	??___ftmul& (0+255),f,c
  9384  00284A  E301               	bnc	u5401
  9385  00284C  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  9386  00284E                     u5401:
  9387  00284E  5029               	movf	??___ftmul,w,c
  9388  002850  6E31               	movwf	___ftmul@sign,c
  9389  002852  5031               	movf	___ftmul@sign,w,c
  9390  002854  A4D8               	btfss	status,2,c
  9391  002856  D007               	goto	l5808
  9392  002858                     l5804:
  9393  002858  0E00               	movlw	0
  9394  00285A  6E23               	movwf	?___ftmul,c
  9395  00285C  0E00               	movlw	0
  9396  00285E  6E24               	movwf	?___ftmul+1,c
  9397  002860  0E00               	movlw	0
  9398  002862  6E25               	movwf	?___ftmul+2,c
  9399  002864  D058               	goto	l1161
  9400  002866                     l5808:
  9401  002866  5031               	movf	___ftmul@sign,w,c
  9402  002868  0F7B               	addlw	123
  9403  00286A  262C               	addwf	___ftmul@exp,f,c
  9404  00286C  C025  F031         	movff	___ftmul@f1+2,___ftmul@sign
  9405  002870  5028               	movf	___ftmul@f2+2,w,c
  9406  002872  1A31               	xorwf	___ftmul@sign,f,c
  9407  002874  0E80               	movlw	128
  9408  002876  1631               	andwf	___ftmul@sign,f,c
  9409  002878  8E24               	bsf	___ftmul@f1+1,7,c
  9410  00287A  8E27               	bsf	___ftmul@f2+1,7,c
  9411  00287C  0EFF               	movlw	255
  9412  00287E  1626               	andwf	___ftmul@f2,f,c
  9413  002880  0EFF               	movlw	255
  9414  002882  1627               	andwf	___ftmul@f2+1,f,c
  9415  002884  0E00               	movlw	0
  9416  002886  1628               	andwf	___ftmul@f2+2,f,c
  9417  002888  0E00               	movlw	0
  9418  00288A  6E2D               	movwf	___ftmul@f3_as_product,c
  9419  00288C  0E00               	movlw	0
  9420  00288E  6E2E               	movwf	___ftmul@f3_as_product+1,c
  9421  002890  0E00               	movlw	0
  9422  002892  6E2F               	movwf	___ftmul@f3_as_product+2,c
  9423  002894  0E07               	movlw	7
  9424  002896  6E30               	movwf	___ftmul@cntr,c
  9425  002898  D000               	goto	l5822
  9426  00289A                     l5822:
  9427  00289A  A023               	btfss	___ftmul@f1,0,c
  9428  00289C  D007               	goto	l5826
  9429  00289E  5026               	movf	___ftmul@f2,w,c
  9430  0028A0  262D               	addwf	___ftmul@f3_as_product,f,c
  9431  0028A2  5027               	movf	___ftmul@f2+1,w,c
  9432  0028A4  222E               	addwfc	___ftmul@f3_as_product+1,f,c
  9433  0028A6  5028               	movf	___ftmul@f2+2,w,c
  9434  0028A8  222F               	addwfc	___ftmul@f3_as_product+2,f,c
  9435  0028AA  D000               	goto	l5826
  9436  0028AC                     l5826:
  9437  0028AC  90D8               	bcf	status,0,c
  9438  0028AE  3225               	rrcf	___ftmul@f1+2,f,c
  9439  0028B0  3224               	rrcf	___ftmul@f1+1,f,c
  9440  0028B2  3223               	rrcf	___ftmul@f1,f,c
  9441  0028B4  90D8               	bcf	status,0,c
  9442  0028B6  3626               	rlcf	___ftmul@f2,f,c
  9443  0028B8  3627               	rlcf	___ftmul@f2+1,f,c
  9444  0028BA  3628               	rlcf	___ftmul@f2+2,f,c
  9445  0028BC  2E30               	decfsz	___ftmul@cntr,f,c
  9446  0028BE  D7ED               	goto	l5822
  9447  0028C0  D000               	goto	l5830
  9448  0028C2                     l5830:
  9449  0028C2  0E09               	movlw	9
  9450  0028C4  6E30               	movwf	___ftmul@cntr,c
  9451  0028C6  D000               	goto	l5832
  9452  0028C8                     l5832:
  9453  0028C8  A023               	btfss	___ftmul@f1,0,c
  9454  0028CA  D007               	goto	l5836
  9455  0028CC  5026               	movf	___ftmul@f2,w,c
  9456  0028CE  262D               	addwf	___ftmul@f3_as_product,f,c
  9457  0028D0  5027               	movf	___ftmul@f2+1,w,c
  9458  0028D2  222E               	addwfc	___ftmul@f3_as_product+1,f,c
  9459  0028D4  5028               	movf	___ftmul@f2+2,w,c
  9460  0028D6  222F               	addwfc	___ftmul@f3_as_product+2,f,c
  9461  0028D8  D000               	goto	l5836
  9462  0028DA                     l5836:
  9463  0028DA  90D8               	bcf	status,0,c
  9464  0028DC  3225               	rrcf	___ftmul@f1+2,f,c
  9465  0028DE  3224               	rrcf	___ftmul@f1+1,f,c
  9466  0028E0  3223               	rrcf	___ftmul@f1,f,c
  9467  0028E2  90D8               	bcf	status,0,c
  9468  0028E4  322F               	rrcf	___ftmul@f3_as_product+2,f,c
  9469  0028E6  322E               	rrcf	___ftmul@f3_as_product+1,f,c
  9470  0028E8  322D               	rrcf	___ftmul@f3_as_product,f,c
  9471  0028EA  2E30               	decfsz	___ftmul@cntr,f,c
  9472  0028EC  D7ED               	goto	l5832
  9473  0028EE  D000               	goto	l5840
  9474  0028F0                     l5840:
  9475  0028F0  C02D  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  9476  0028F4  C02E  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9477  0028F8  C02F  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9478  0028FC  C02C  F012         	movff	___ftmul@exp,___ftpack@exp
  9479  002900  C031  F013         	movff	___ftmul@sign,___ftpack@sign
  9480  002904  EC9E  F017         	call	___ftpack	;wreg free
  9481  002908  C00F  F023         	movff	?___ftpack,?___ftmul
  9482  00290C  C010  F024         	movff	?___ftpack+1,?___ftmul+1
  9483  002910  C011  F025         	movff	?___ftpack+2,?___ftmul+2
  9484  002914  D000               	goto	l1161
  9485  002916                     l1161:
  9486  002916  0012               	return		;funcret
  9487  002918                     __end_of___ftmul:
  9488                           	opt stack 0
  9489                           tblptru	equ	0xFF8
  9490                           tblptrh	equ	0xFF7
  9491                           tblptrl	equ	0xFF6
  9492                           tablat	equ	0xFF5
  9493                           prodh	equ	0xFF4
  9494                           prodl	equ	0xFF3
  9495                           intcon2	equ	0xFF1
  9496                           postinc0	equ	0xFEE
  9497                           wreg	equ	0xFE8
  9498                           postdec1	equ	0xFE5
  9499                           fsr1l	equ	0xFE1
  9500                           indf2	equ	0xFDF
  9501                           postinc2	equ	0xFDE
  9502                           postdec2	equ	0xFDD
  9503                           fsr2h	equ	0xFDA
  9504                           fsr2l	equ	0xFD9
  9505                           status	equ	0xFD8
  9506                           
  9507 ;; *************** function __tdiv_to_l_ *****************
  9508 ;; Defined at:
  9509 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  9510 ;; Parameters:    Size  Location     Type
  9511 ;;  f1              3   14[COMRAM] float 
  9512 ;;  f2              3   17[COMRAM] float 
  9513 ;; Auto vars:     Size  Location     Type
  9514 ;;  quot            4   23[COMRAM] unsigned long 
  9515 ;;  exp1            1   28[COMRAM] unsigned char 
  9516 ;;  cntr            1   27[COMRAM] unsigned char 
  9517 ;; Return value:  Size  Location     Type
  9518 ;;                  4   14[COMRAM] unsigned long 
  9519 ;; Registers used:
  9520 ;;		wreg, status,2, status,0
  9521 ;; Tracked objects:
  9522 ;;		On entry : 0/0
  9523 ;;		On exit  : 0/0
  9524 ;;		Unchanged: 0/0
  9525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9526 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9527 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9528 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9529 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9530 ;;Total ram usage:       15 bytes
  9531 ;; Hardware stack levels used:    1
  9532 ;; Hardware stack levels required when called:    2
  9533 ;; This function calls:
  9534 ;;		Nothing
  9535 ;; This function is called by:
  9536 ;;		_printf
  9537 ;; This function uses a non-reentrant model
  9538 ;;
  9539                           
  9540                           	psect	text34
  9541  002606                     __ptext34:
  9542                           	opt stack 0
  9543  002606                     __tdiv_to_l_:
  9544                           	opt stack 23
  9545                           
  9546                           ;incstack = 0
  9547  002606  C011  F015         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  9548  00260A  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9549  00260C  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9550  00260E  3410               	rlcf	__tdiv_to_l_@f1+1,w,c
  9551  002610  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9552  002612  E301               	bnc	u5811
  9553  002614  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9554  002616                     u5811:
  9555  002616  5015               	movf	??__tdiv_to_l_,w,c
  9556  002618  6E1D               	movwf	__tdiv_to_l_@exp1,c
  9557  00261A  501D               	movf	__tdiv_to_l_@exp1,w,c
  9558  00261C  A4D8               	btfss	status,2,c
  9559  00261E  D002               	goto	l6070
  9560  002620  D05D               	goto	l6112
  9561  002622  D078               	goto	l1137
  9562  002624                     l6070:
  9563  002624  C014  F015         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  9564  002628  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9565  00262A  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9566  00262C  3413               	rlcf	__tdiv_to_l_@f2+1,w,c
  9567  00262E  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9568  002630  E301               	bnc	u5831
  9569  002632  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9570  002634                     u5831:
  9571  002634  5015               	movf	??__tdiv_to_l_,w,c
  9572  002636  6E1C               	movwf	__tdiv_to_l_@cntr,c
  9573  002638  501C               	movf	__tdiv_to_l_@cntr,w,c
  9574  00263A  A4D8               	btfss	status,2,c
  9575  00263C  D002               	goto	l6076
  9576  00263E  D04E               	goto	l6112
  9577  002640  D069               	goto	l1137
  9578  002642                     l6076:
  9579  002642  8E10               	bsf	__tdiv_to_l_@f1+1,7,c
  9580  002644  0EFF               	movlw	255
  9581  002646  160F               	andwf	__tdiv_to_l_@f1,f,c
  9582  002648  0EFF               	movlw	255
  9583  00264A  1610               	andwf	__tdiv_to_l_@f1+1,f,c
  9584  00264C  0E00               	movlw	0
  9585  00264E  1611               	andwf	__tdiv_to_l_@f1+2,f,c
  9586  002650  8E13               	bsf	__tdiv_to_l_@f2+1,7,c
  9587  002652  0EFF               	movlw	255
  9588  002654  1612               	andwf	__tdiv_to_l_@f2,f,c
  9589  002656  0EFF               	movlw	255
  9590  002658  1613               	andwf	__tdiv_to_l_@f2+1,f,c
  9591  00265A  0E00               	movlw	0
  9592  00265C  1614               	andwf	__tdiv_to_l_@f2+2,f,c
  9593  00265E  0E00               	movlw	0
  9594  002660  6E18               	movwf	__tdiv_to_l_@quot,c
  9595  002662  0E00               	movlw	0
  9596  002664  6E19               	movwf	__tdiv_to_l_@quot+1,c
  9597  002666  0E00               	movlw	0
  9598  002668  6E1A               	movwf	__tdiv_to_l_@quot+2,c
  9599  00266A  0E00               	movlw	0
  9600  00266C  6E1B               	movwf	__tdiv_to_l_@quot+3,c
  9601  00266E  0E7F               	movlw	127
  9602  002670  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  9603  002672  501C               	movf	__tdiv_to_l_@cntr,w,c
  9604  002674  0F98               	addlw	152
  9605  002676  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  9606  002678  0E18               	movlw	24
  9607  00267A  6E1C               	movwf	__tdiv_to_l_@cntr,c
  9608  00267C                     l1139:
  9609  00267C  90D8               	bcf	status,0,c
  9610  00267E  3618               	rlcf	__tdiv_to_l_@quot,f,c
  9611  002680  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  9612  002682  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  9613  002684  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  9614  002686  5012               	movf	__tdiv_to_l_@f2,w,c
  9615  002688  5C0F               	subwf	__tdiv_to_l_@f1,w,c
  9616  00268A  5013               	movf	__tdiv_to_l_@f2+1,w,c
  9617  00268C  5810               	subwfb	__tdiv_to_l_@f1+1,w,c
  9618  00268E  5014               	movf	__tdiv_to_l_@f2+2,w,c
  9619  002690  5811               	subwfb	__tdiv_to_l_@f1+2,w,c
  9620  002692  A0D8               	btfss	status,0,c
  9621  002694  D007               	goto	l1140
  9622  002696  5012               	movf	__tdiv_to_l_@f2,w,c
  9623  002698  5E0F               	subwf	__tdiv_to_l_@f1,f,c
  9624  00269A  5013               	movf	__tdiv_to_l_@f2+1,w,c
  9625  00269C  5A10               	subwfb	__tdiv_to_l_@f1+1,f,c
  9626  00269E  5014               	movf	__tdiv_to_l_@f2+2,w,c
  9627  0026A0  5A11               	subwfb	__tdiv_to_l_@f1+2,f,c
  9628  0026A2  8018               	bsf	__tdiv_to_l_@quot,0,c
  9629  0026A4                     l1140:
  9630  0026A4  90D8               	bcf	status,0,c
  9631  0026A6  360F               	rlcf	__tdiv_to_l_@f1,f,c
  9632  0026A8  3610               	rlcf	__tdiv_to_l_@f1+1,f,c
  9633  0026AA  3611               	rlcf	__tdiv_to_l_@f1+2,f,c
  9634  0026AC  2E1C               	decfsz	__tdiv_to_l_@cntr,f,c
  9635  0026AE  D7E6               	goto	l1139
  9636  0026B0  D000               	goto	l6098
  9637  0026B2                     l6098:
  9638  0026B2  AE1D               	btfss	__tdiv_to_l_@exp1,7,c
  9639  0026B4  D010               	goto	l6110
  9640  0026B6  501D               	movf	__tdiv_to_l_@exp1,w,c
  9641  0026B8  0A80               	xorlw	128
  9642  0026BA  0F97               	addlw	151
  9643  0026BC  B0D8               	btfsc	status,0,c
  9644  0026BE  D003               	goto	l6106
  9645  0026C0  D00D               	goto	l6112
  9646  0026C2  D028               	goto	l1137
  9647  0026C4  D000               	goto	l6106
  9648  0026C6                     l6106:
  9649  0026C6  90D8               	bcf	status,0,c
  9650  0026C8  321B               	rrcf	__tdiv_to_l_@quot+3,f,c
  9651  0026CA  321A               	rrcf	__tdiv_to_l_@quot+2,f,c
  9652  0026CC  3219               	rrcf	__tdiv_to_l_@quot+1,f,c
  9653  0026CE  3218               	rrcf	__tdiv_to_l_@quot,f,c
  9654  0026D0  3E1D               	incfsz	__tdiv_to_l_@exp1,f,c
  9655  0026D2  D7F9               	goto	l6106
  9656  0026D4  D017               	goto	l1146
  9657  0026D6                     l6110:
  9658  0026D6  0E17               	movlw	23
  9659  0026D8  641D               	cpfsgt	__tdiv_to_l_@exp1,c
  9660  0026DA  D011               	goto	l6118
  9661  0026DC                     l6112:
  9662  0026DC  0E00               	movlw	0
  9663  0026DE  6E0F               	movwf	?__tdiv_to_l_,c
  9664  0026E0  0E00               	movlw	0
  9665  0026E2  6E10               	movwf	?__tdiv_to_l_+1,c
  9666  0026E4  0E00               	movlw	0
  9667  0026E6  6E11               	movwf	?__tdiv_to_l_+2,c
  9668  0026E8  0E00               	movlw	0
  9669  0026EA  6E12               	movwf	?__tdiv_to_l_+3,c
  9670  0026EC  D013               	goto	l1137
  9671  0026EE  D007               	goto	l6118
  9672  0026F0                     l6116:
  9673  0026F0  90D8               	bcf	status,0,c
  9674  0026F2  3618               	rlcf	__tdiv_to_l_@quot,f,c
  9675  0026F4  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  9676  0026F6  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  9677  0026F8  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  9678  0026FA  061D               	decf	__tdiv_to_l_@exp1,f,c
  9679  0026FC  D000               	goto	l6118
  9680  0026FE                     l6118:
  9681  0026FE  501D               	movf	__tdiv_to_l_@exp1,w,c
  9682  002700  A4D8               	btfss	status,2,c
  9683  002702  D7F6               	goto	l6116
  9684  002704                     l1146:
  9685  002704  C018  F00F         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  9686  002708  C019  F010         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  9687  00270C  C01A  F011         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  9688  002710  C01B  F012         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  9689  002714                     l1137:
  9690  002714  0012               	return		;funcret
  9691  002716                     __end_of__tdiv_to_l_:
  9692                           	opt stack 0
  9693                           tblptru	equ	0xFF8
  9694                           tblptrh	equ	0xFF7
  9695                           tblptrl	equ	0xFF6
  9696                           tablat	equ	0xFF5
  9697                           prodh	equ	0xFF4
  9698                           prodl	equ	0xFF3
  9699                           intcon2	equ	0xFF1
  9700                           postinc0	equ	0xFEE
  9701                           wreg	equ	0xFE8
  9702                           postdec1	equ	0xFE5
  9703                           fsr1l	equ	0xFE1
  9704                           indf2	equ	0xFDF
  9705                           postinc2	equ	0xFDE
  9706                           postdec2	equ	0xFDD
  9707                           fsr2h	equ	0xFDA
  9708                           fsr2l	equ	0xFD9
  9709                           status	equ	0xFD8
  9710                           
  9711 ;; *************** function __div_to_l_ *****************
  9712 ;; Defined at:
  9713 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fldivl.c"
  9714 ;; Parameters:    Size  Location     Type
  9715 ;;  f1              3   14[COMRAM] unsigned long 
  9716 ;;  f2              3   17[COMRAM] unsigned long 
  9717 ;; Auto vars:     Size  Location     Type
  9718 ;;  quot            4   20[COMRAM] unsigned long 
  9719 ;;  exp1            1   25[COMRAM] unsigned char 
  9720 ;;  cntr            1   24[COMRAM] unsigned char 
  9721 ;; Return value:  Size  Location     Type
  9722 ;;                  4   14[COMRAM] unsigned long 
  9723 ;; Registers used:
  9724 ;;		wreg, status,2, status,0
  9725 ;; Tracked objects:
  9726 ;;		On entry : 0/0
  9727 ;;		On exit  : 0/0
  9728 ;;		Unchanged: 0/0
  9729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9730 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9731 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9733 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9734 ;;Total ram usage:       12 bytes
  9735 ;; Hardware stack levels used:    1
  9736 ;; Hardware stack levels required when called:    2
  9737 ;; This function calls:
  9738 ;;		Nothing
  9739 ;; This function is called by:
  9740 ;;		_printf
  9741 ;; This function uses a non-reentrant model
  9742 ;;
  9743                           
  9744                           	psect	text35
  9745  002716                     __ptext35:
  9746                           	opt stack 0
  9747  002716                     __div_to_l_:
  9748                           	opt stack 23
  9749                           
  9750                           ;incstack = 0
  9751  002716  3411               	rlcf	__div_to_l_@f1+2,w,c
  9752  002718  3412               	rlcf	__div_to_l_@f1+3,w,c
  9753  00271A  6E1A               	movwf	__div_to_l_@exp1,c
  9754  00271C  501A               	movf	__div_to_l_@exp1,w,c
  9755  00271E  A4D8               	btfss	status,2,c
  9756  002720  D002               	goto	l6126
  9757  002722  D061               	goto	l6172
  9758  002724  D07C               	goto	l1016
  9759  002726                     l6126:
  9760  002726  3414               	rlcf	__div_to_l_@f2+2,w,c
  9761  002728  3415               	rlcf	__div_to_l_@f2+3,w,c
  9762  00272A  6E19               	movwf	__div_to_l_@cntr,c
  9763  00272C  5019               	movf	__div_to_l_@cntr,w,c
  9764  00272E  A4D8               	btfss	status,2,c
  9765  002730  D002               	goto	l6132
  9766  002732  D059               	goto	l6172
  9767  002734  D074               	goto	l1016
  9768  002736                     l6132:
  9769  002736  8E11               	bsf	__div_to_l_@f1+2,7,c
  9770  002738  0EFF               	movlw	255
  9771  00273A  160F               	andwf	__div_to_l_@f1,f,c
  9772  00273C  0EFF               	movlw	255
  9773  00273E  1610               	andwf	__div_to_l_@f1+1,f,c
  9774  002740  0EFF               	movlw	255
  9775  002742  1611               	andwf	__div_to_l_@f1+2,f,c
  9776  002744  0E00               	movlw	0
  9777  002746  1612               	andwf	__div_to_l_@f1+3,f,c
  9778  002748  8E14               	bsf	__div_to_l_@f2+2,7,c
  9779  00274A  0EFF               	movlw	255
  9780  00274C  1612               	andwf	__div_to_l_@f2,f,c
  9781  00274E  0EFF               	movlw	255
  9782  002750  1613               	andwf	__div_to_l_@f2+1,f,c
  9783  002752  0EFF               	movlw	255
  9784  002754  1614               	andwf	__div_to_l_@f2+2,f,c
  9785  002756  0E00               	movlw	0
  9786  002758  1615               	andwf	__div_to_l_@f2+3,f,c
  9787  00275A  0E00               	movlw	0
  9788  00275C  6E15               	movwf	__div_to_l_@quot,c
  9789  00275E  0E00               	movlw	0
  9790  002760  6E16               	movwf	__div_to_l_@quot+1,c
  9791  002762  0E00               	movlw	0
  9792  002764  6E17               	movwf	__div_to_l_@quot+2,c
  9793  002766  0E00               	movlw	0
  9794  002768  6E18               	movwf	__div_to_l_@quot+3,c
  9795  00276A  0E7F               	movlw	127
  9796  00276C  5E1A               	subwf	__div_to_l_@exp1,f,c
  9797  00276E  5019               	movf	__div_to_l_@cntr,w,c
  9798  002770  0FA0               	addlw	160
  9799  002772  5E1A               	subwf	__div_to_l_@exp1,f,c
  9800  002774  0E20               	movlw	32
  9801  002776  6E19               	movwf	__div_to_l_@cntr,c
  9802  002778  D000               	goto	l6146
  9803  00277A                     l6146:
  9804  00277A  90D8               	bcf	status,0,c
  9805  00277C  3615               	rlcf	__div_to_l_@quot,f,c
  9806  00277E  3616               	rlcf	__div_to_l_@quot+1,f,c
  9807  002780  3617               	rlcf	__div_to_l_@quot+2,f,c
  9808  002782  3618               	rlcf	__div_to_l_@quot+3,f,c
  9809  002784  5012               	movf	__div_to_l_@f2,w,c
  9810  002786  5C0F               	subwf	__div_to_l_@f1,w,c
  9811  002788  5013               	movf	__div_to_l_@f2+1,w,c
  9812  00278A  5810               	subwfb	__div_to_l_@f1+1,w,c
  9813  00278C  5014               	movf	__div_to_l_@f2+2,w,c
  9814  00278E  5811               	subwfb	__div_to_l_@f1+2,w,c
  9815  002790  5015               	movf	__div_to_l_@f2+3,w,c
  9816  002792  5812               	subwfb	__div_to_l_@f1+3,w,c
  9817  002794  A0D8               	btfss	status,0,c
  9818  002796  D00A               	goto	l6154
  9819  002798  5012               	movf	__div_to_l_@f2,w,c
  9820  00279A  5E0F               	subwf	__div_to_l_@f1,f,c
  9821  00279C  5013               	movf	__div_to_l_@f2+1,w,c
  9822  00279E  5A10               	subwfb	__div_to_l_@f1+1,f,c
  9823  0027A0  5014               	movf	__div_to_l_@f2+2,w,c
  9824  0027A2  5A11               	subwfb	__div_to_l_@f1+2,f,c
  9825  0027A4  5015               	movf	__div_to_l_@f2+3,w,c
  9826  0027A6  5A12               	subwfb	__div_to_l_@f1+3,f,c
  9827  0027A8  8015               	bsf	__div_to_l_@quot,0,c
  9828  0027AA  D000               	goto	l6154
  9829  0027AC                     l6154:
  9830  0027AC  90D8               	bcf	status,0,c
  9831  0027AE  360F               	rlcf	__div_to_l_@f1,f,c
  9832  0027B0  3610               	rlcf	__div_to_l_@f1+1,f,c
  9833  0027B2  3611               	rlcf	__div_to_l_@f1+2,f,c
  9834  0027B4  3612               	rlcf	__div_to_l_@f1+3,f,c
  9835  0027B6  2E19               	decfsz	__div_to_l_@cntr,f,c
  9836  0027B8  D7E0               	goto	l6146
  9837  0027BA  D000               	goto	l6158
  9838  0027BC                     l6158:
  9839  0027BC  AE1A               	btfss	__div_to_l_@exp1,7,c
  9840  0027BE  D010               	goto	l6170
  9841  0027C0  501A               	movf	__div_to_l_@exp1,w,c
  9842  0027C2  0A80               	xorlw	128
  9843  0027C4  0F9F               	addlw	159
  9844  0027C6  B0D8               	btfsc	status,0,c
  9845  0027C8  D003               	goto	l6166
  9846  0027CA  D00D               	goto	l6172
  9847  0027CC  D028               	goto	l1016
  9848  0027CE  D000               	goto	l6166
  9849  0027D0                     l6166:
  9850  0027D0  90D8               	bcf	status,0,c
  9851  0027D2  3218               	rrcf	__div_to_l_@quot+3,f,c
  9852  0027D4  3217               	rrcf	__div_to_l_@quot+2,f,c
  9853  0027D6  3216               	rrcf	__div_to_l_@quot+1,f,c
  9854  0027D8  3215               	rrcf	__div_to_l_@quot,f,c
  9855  0027DA  3E1A               	incfsz	__div_to_l_@exp1,f,c
  9856  0027DC  D7F9               	goto	l6166
  9857  0027DE  D017               	goto	l1025
  9858  0027E0                     l6170:
  9859  0027E0  0E1F               	movlw	31
  9860  0027E2  641A               	cpfsgt	__div_to_l_@exp1,c
  9861  0027E4  D011               	goto	l6178
  9862  0027E6                     l6172:
  9863  0027E6  0E00               	movlw	0
  9864  0027E8  6E0F               	movwf	?__div_to_l_,c
  9865  0027EA  0E00               	movlw	0
  9866  0027EC  6E10               	movwf	?__div_to_l_+1,c
  9867  0027EE  0E00               	movlw	0
  9868  0027F0  6E11               	movwf	?__div_to_l_+2,c
  9869  0027F2  0E00               	movlw	0
  9870  0027F4  6E12               	movwf	?__div_to_l_+3,c
  9871  0027F6  D013               	goto	l1016
  9872  0027F8  D007               	goto	l6178
  9873  0027FA                     l6176:
  9874  0027FA  90D8               	bcf	status,0,c
  9875  0027FC  3615               	rlcf	__div_to_l_@quot,f,c
  9876  0027FE  3616               	rlcf	__div_to_l_@quot+1,f,c
  9877  002800  3617               	rlcf	__div_to_l_@quot+2,f,c
  9878  002802  3618               	rlcf	__div_to_l_@quot+3,f,c
  9879  002804  061A               	decf	__div_to_l_@exp1,f,c
  9880  002806  D000               	goto	l6178
  9881  002808                     l6178:
  9882  002808  501A               	movf	__div_to_l_@exp1,w,c
  9883  00280A  A4D8               	btfss	status,2,c
  9884  00280C  D7F6               	goto	l6176
  9885  00280E                     l1025:
  9886  00280E  C015  F00F         	movff	__div_to_l_@quot,?__div_to_l_
  9887  002812  C016  F010         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9888  002816  C017  F011         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9889  00281A  C018  F012         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9890  00281E                     l1016:
  9891  00281E  0012               	return		;funcret
  9892  002820                     __end_of__div_to_l_:
  9893                           	opt stack 0
  9894                           tblptru	equ	0xFF8
  9895                           tblptrh	equ	0xFF7
  9896                           tblptrl	equ	0xFF6
  9897                           tablat	equ	0xFF5
  9898                           prodh	equ	0xFF4
  9899                           prodl	equ	0xFF3
  9900                           intcon2	equ	0xFF1
  9901                           postinc0	equ	0xFEE
  9902                           wreg	equ	0xFE8
  9903                           postdec1	equ	0xFE5
  9904                           fsr1l	equ	0xFE1
  9905                           indf2	equ	0xFDF
  9906                           postinc2	equ	0xFDE
  9907                           postdec2	equ	0xFDD
  9908                           fsr2h	equ	0xFDA
  9909                           fsr2l	equ	0xFD9
  9910                           status	equ	0xFD8
  9911                           
  9912 ;; *************** function ___lltoft *****************
  9913 ;; Defined at:
  9914 ;;		line 35 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lltoft.c"
  9915 ;; Parameters:    Size  Location     Type
  9916 ;;  c               4   22[COMRAM] unsigned long 
  9917 ;; Auto vars:     Size  Location     Type
  9918 ;;  exp             1   30[COMRAM] unsigned char 
  9919 ;; Return value:  Size  Location     Type
  9920 ;;                  3   22[COMRAM] float 
  9921 ;; Registers used:
  9922 ;;		wreg, status,2, status,0, cstack
  9923 ;; Tracked objects:
  9924 ;;		On entry : 0/0
  9925 ;;		On exit  : 0/0
  9926 ;;		Unchanged: 0/0
  9927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9928 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9929 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9930 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9931 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9932 ;;Total ram usage:        9 bytes
  9933 ;; Hardware stack levels used:    1
  9934 ;; Hardware stack levels required when called:    3
  9935 ;; This function calls:
  9936 ;;		___ftpack
  9937 ;; This function is called by:
  9938 ;;		_printf
  9939 ;; This function uses a non-reentrant model
  9940 ;;
  9941                           
  9942                           	psect	text36
  9943  00374A                     __ptext36:
  9944                           	opt stack 0
  9945  00374A                     ___lltoft:
  9946                           	opt stack 22
  9947                           
  9948                           ;incstack = 0
  9949  00374A  0E8E               	movlw	142
  9950  00374C  6E1F               	movwf	___lltoft@exp,c
  9951  00374E  D007               	goto	l6298
  9952  003750                     l6296:
  9953  003750  90D8               	bcf	status,0,c
  9954  003752  321A               	rrcf	___lltoft@c+3,f,c
  9955  003754  3219               	rrcf	___lltoft@c+2,f,c
  9956  003756  3218               	rrcf	___lltoft@c+1,f,c
  9957  003758  3217               	rrcf	___lltoft@c,f,c
  9958  00375A  2A1F               	incf	___lltoft@exp,f,c
  9959  00375C  D000               	goto	l6298
  9960  00375E                     l6298:
  9961  00375E  0E00               	movlw	0
  9962  003760  1417               	andwf	___lltoft@c,w,c
  9963  003762  6E1B               	movwf	??___lltoft& (0+255),c
  9964  003764  0E00               	movlw	0
  9965  003766  1418               	andwf	___lltoft@c+1,w,c
  9966  003768  6E1C               	movwf	(??___lltoft+1)& (0+255),c
  9967  00376A  0E00               	movlw	0
  9968  00376C  1419               	andwf	___lltoft@c+2,w,c
  9969  00376E  6E1D               	movwf	(??___lltoft+2)& (0+255),c
  9970  003770  0EFF               	movlw	255
  9971  003772  141A               	andwf	___lltoft@c+3,w,c
  9972  003774  6E1E               	movwf	(??___lltoft+3)& (0+255),c
  9973  003776  501B               	movf	??___lltoft,w,c
  9974  003778  101C               	iorwf	??___lltoft+1,w,c
  9975  00377A  101D               	iorwf	??___lltoft+2,w,c
  9976  00377C  101E               	iorwf	??___lltoft+3,w,c
  9977  00377E  A4D8               	btfss	status,2,c
  9978  003780  D7E7               	goto	l6296
  9979  003782  C017  F00F         	movff	___lltoft@c,___ftpack@arg
  9980  003786  C018  F010         	movff	___lltoft@c+1,___ftpack@arg+1
  9981  00378A  C019  F011         	movff	___lltoft@c+2,___ftpack@arg+2
  9982  00378E  C01F  F012         	movff	___lltoft@exp,___ftpack@exp
  9983  003792  0E00               	movlw	0
  9984  003794  6E13               	movwf	___ftpack@sign,c
  9985  003796  EC9E  F017         	call	___ftpack	;wreg free
  9986  00379A  C00F  F017         	movff	?___ftpack,?___lltoft
  9987  00379E  C010  F018         	movff	?___ftpack+1,?___lltoft+1
  9988  0037A2  C011  F019         	movff	?___ftpack+2,?___lltoft+2
  9989  0037A6  D000               	goto	l1256
  9990  0037A8                     l1256:
  9991  0037A8  0012               	return		;funcret
  9992  0037AA                     __end_of___lltoft:
  9993                           	opt stack 0
  9994                           tblptru	equ	0xFF8
  9995                           tblptrh	equ	0xFF7
  9996                           tblptrl	equ	0xFF6
  9997                           tablat	equ	0xFF5
  9998                           prodh	equ	0xFF4
  9999                           prodl	equ	0xFF3
 10000                           intcon2	equ	0xFF1
 10001                           postinc0	equ	0xFEE
 10002                           wreg	equ	0xFE8
 10003                           postdec1	equ	0xFE5
 10004                           fsr1l	equ	0xFE1
 10005                           indf2	equ	0xFDF
 10006                           postinc2	equ	0xFDE
 10007                           postdec2	equ	0xFDD
 10008                           fsr2h	equ	0xFDA
 10009                           fsr2l	equ	0xFD9
 10010                           status	equ	0xFD8
 10011                           
 10012 ;; *************** function ___llmod *****************
 10013 ;; Defined at:
 10014 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\llmod.c"
 10015 ;; Parameters:    Size  Location     Type
 10016 ;;  dividend        4   14[COMRAM] unsigned long 
 10017 ;;  divisor         4   18[COMRAM] unsigned long 
 10018 ;; Auto vars:     Size  Location     Type
 10019 ;;  counter         1   22[COMRAM] unsigned char 
 10020 ;; Return value:  Size  Location     Type
 10021 ;;                  4   14[COMRAM] unsigned long 
 10022 ;; Registers used:
 10023 ;;		wreg, status,2, status,0
 10024 ;; Tracked objects:
 10025 ;;		On entry : 0/0
 10026 ;;		On exit  : 0/0
 10027 ;;		Unchanged: 0/0
 10028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10029 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10030 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10032 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10033 ;;Total ram usage:        9 bytes
 10034 ;; Hardware stack levels used:    1
 10035 ;; Hardware stack levels required when called:    2
 10036 ;; This function calls:
 10037 ;;		Nothing
 10038 ;; This function is called by:
 10039 ;;		_printf
 10040 ;; This function uses a non-reentrant model
 10041 ;;
 10042                           
 10043                           	psect	text37
 10044  003612                     __ptext37:
 10045                           	opt stack 0
 10046  003612                     ___llmod:
 10047                           	opt stack 23
 10048                           
 10049                           ;incstack = 0
 10050  003612  5013               	movf	___llmod@divisor,w,c
 10051  003614  1014               	iorwf	___llmod@divisor+1,w,c
 10052  003616  1015               	iorwf	___llmod@divisor+2,w,c
 10053  003618  1016               	iorwf	___llmod@divisor+3,w,c
 10054  00361A  B4D8               	btfsc	status,2,c
 10055  00361C  D029               	goto	l1236
 10056  00361E  0E01               	movlw	1
 10057  003620  6E17               	movwf	___llmod@counter,c
 10058  003622  D007               	goto	l6284
 10059  003624                     l6282:
 10060  003624  90D8               	bcf	status,0,c
 10061  003626  3613               	rlcf	___llmod@divisor,f,c
 10062  003628  3614               	rlcf	___llmod@divisor+1,f,c
 10063  00362A  3615               	rlcf	___llmod@divisor+2,f,c
 10064  00362C  3616               	rlcf	___llmod@divisor+3,f,c
 10065  00362E  2A17               	incf	___llmod@counter,f,c
 10066  003630  D000               	goto	l6284
 10067  003632                     l6284:
 10068  003632  BE16               	btfsc	___llmod@divisor+3,7,c
 10069  003634  D002               	goto	l6286
 10070  003636  D7F6               	goto	l6282
 10071  003638  D000               	goto	l6286
 10072  00363A                     l6286:
 10073  00363A  5013               	movf	___llmod@divisor,w,c
 10074  00363C  5C0F               	subwf	___llmod@dividend,w,c
 10075  00363E  5014               	movf	___llmod@divisor+1,w,c
 10076  003640  5810               	subwfb	___llmod@dividend+1,w,c
 10077  003642  5015               	movf	___llmod@divisor+2,w,c
 10078  003644  5811               	subwfb	___llmod@dividend+2,w,c
 10079  003646  5016               	movf	___llmod@divisor+3,w,c
 10080  003648  5812               	subwfb	___llmod@dividend+3,w,c
 10081  00364A  A0D8               	btfss	status,0,c
 10082  00364C  D009               	goto	l6290
 10083  00364E  5013               	movf	___llmod@divisor,w,c
 10084  003650  5E0F               	subwf	___llmod@dividend,f,c
 10085  003652  5014               	movf	___llmod@divisor+1,w,c
 10086  003654  5A10               	subwfb	___llmod@dividend+1,f,c
 10087  003656  5015               	movf	___llmod@divisor+2,w,c
 10088  003658  5A11               	subwfb	___llmod@dividend+2,f,c
 10089  00365A  5016               	movf	___llmod@divisor+3,w,c
 10090  00365C  5A12               	subwfb	___llmod@dividend+3,f,c
 10091  00365E  D000               	goto	l6290
 10092  003660                     l6290:
 10093  003660  90D8               	bcf	status,0,c
 10094  003662  3216               	rrcf	___llmod@divisor+3,f,c
 10095  003664  3215               	rrcf	___llmod@divisor+2,f,c
 10096  003666  3214               	rrcf	___llmod@divisor+1,f,c
 10097  003668  3213               	rrcf	___llmod@divisor,f,c
 10098  00366A  2E17               	decfsz	___llmod@counter,f,c
 10099  00366C  D7E6               	goto	l6286
 10100  00366E  D000               	goto	l1236
 10101  003670                     l1236:
 10102  003670  C00F  F00F         	movff	___llmod@dividend,?___llmod
 10103  003674  C010  F010         	movff	___llmod@dividend+1,?___llmod+1
 10104  003678  C011  F011         	movff	___llmod@dividend+2,?___llmod+2
 10105  00367C  C012  F012         	movff	___llmod@dividend+3,?___llmod+3
 10106  003680  0012               	return		;funcret
 10107  003682                     __end_of___llmod:
 10108                           	opt stack 0
 10109                           tblptru	equ	0xFF8
 10110                           tblptrh	equ	0xFF7
 10111                           tblptrl	equ	0xFF6
 10112                           tablat	equ	0xFF5
 10113                           prodh	equ	0xFF4
 10114                           prodl	equ	0xFF3
 10115                           intcon2	equ	0xFF1
 10116                           postinc0	equ	0xFEE
 10117                           wreg	equ	0xFE8
 10118                           postdec1	equ	0xFE5
 10119                           fsr1l	equ	0xFE1
 10120                           indf2	equ	0xFDF
 10121                           postinc2	equ	0xFDE
 10122                           postdec2	equ	0xFDD
 10123                           fsr2h	equ	0xFDA
 10124                           fsr2l	equ	0xFD9
 10125                           status	equ	0xFD8
 10126                           
 10127 ;; *************** function ___lldiv *****************
 10128 ;; Defined at:
 10129 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lldiv.c"
 10130 ;; Parameters:    Size  Location     Type
 10131 ;;  dividend        4   14[COMRAM] unsigned long 
 10132 ;;  divisor         4   18[COMRAM] unsigned long 
 10133 ;; Auto vars:     Size  Location     Type
 10134 ;;  quotient        4   22[COMRAM] unsigned long 
 10135 ;;  counter         1   26[COMRAM] unsigned char 
 10136 ;; Return value:  Size  Location     Type
 10137 ;;                  4   14[COMRAM] unsigned long 
 10138 ;; Registers used:
 10139 ;;		wreg, status,2, status,0
 10140 ;; Tracked objects:
 10141 ;;		On entry : 0/0
 10142 ;;		On exit  : 0/0
 10143 ;;		Unchanged: 0/0
 10144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10145 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10146 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10148 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10149 ;;Total ram usage:       13 bytes
 10150 ;; Hardware stack levels used:    1
 10151 ;; Hardware stack levels required when called:    2
 10152 ;; This function calls:
 10153 ;;		Nothing
 10154 ;; This function is called by:
 10155 ;;		_printf
 10156 ;; This function uses a non-reentrant model
 10157 ;;
 10158                           
 10159                           	psect	text38
 10160  003278                     __ptext38:
 10161                           	opt stack 0
 10162  003278                     ___lldiv:
 10163                           	opt stack 23
 10164                           
 10165                           ;incstack = 0
 10166  003278  0E00               	movlw	0
 10167  00327A  6E17               	movwf	___lldiv@quotient,c
 10168  00327C  0E00               	movlw	0
 10169  00327E  6E18               	movwf	___lldiv@quotient+1,c
 10170  003280  0E00               	movlw	0
 10171  003282  6E19               	movwf	___lldiv@quotient+2,c
 10172  003284  0E00               	movlw	0
 10173  003286  6E1A               	movwf	___lldiv@quotient+3,c
 10174  003288  5013               	movf	___lldiv@divisor,w,c
 10175  00328A  1014               	iorwf	___lldiv@divisor+1,w,c
 10176  00328C  1015               	iorwf	___lldiv@divisor+2,w,c
 10177  00328E  1016               	iorwf	___lldiv@divisor+3,w,c
 10178  003290  B4D8               	btfsc	status,2,c
 10179  003292  D02F               	goto	l1226
 10180  003294  0E01               	movlw	1
 10181  003296  6E1B               	movwf	___lldiv@counter,c
 10182  003298  D007               	goto	l6264
 10183  00329A                     l6262:
 10184  00329A  90D8               	bcf	status,0,c
 10185  00329C  3613               	rlcf	___lldiv@divisor,f,c
 10186  00329E  3614               	rlcf	___lldiv@divisor+1,f,c
 10187  0032A0  3615               	rlcf	___lldiv@divisor+2,f,c
 10188  0032A2  3616               	rlcf	___lldiv@divisor+3,f,c
 10189  0032A4  2A1B               	incf	___lldiv@counter,f,c
 10190  0032A6  D000               	goto	l6264
 10191  0032A8                     l6264:
 10192  0032A8  BE16               	btfsc	___lldiv@divisor+3,7,c
 10193  0032AA  D002               	goto	l6266
 10194  0032AC  D7F6               	goto	l6262
 10195  0032AE  D000               	goto	l6266
 10196  0032B0                     l6266:
 10197  0032B0  90D8               	bcf	status,0,c
 10198  0032B2  3617               	rlcf	___lldiv@quotient,f,c
 10199  0032B4  3618               	rlcf	___lldiv@quotient+1,f,c
 10200  0032B6  3619               	rlcf	___lldiv@quotient+2,f,c
 10201  0032B8  361A               	rlcf	___lldiv@quotient+3,f,c
 10202  0032BA  5013               	movf	___lldiv@divisor,w,c
 10203  0032BC  5C0F               	subwf	___lldiv@dividend,w,c
 10204  0032BE  5014               	movf	___lldiv@divisor+1,w,c
 10205  0032C0  5810               	subwfb	___lldiv@dividend+1,w,c
 10206  0032C2  5015               	movf	___lldiv@divisor+2,w,c
 10207  0032C4  5811               	subwfb	___lldiv@dividend+2,w,c
 10208  0032C6  5016               	movf	___lldiv@divisor+3,w,c
 10209  0032C8  5812               	subwfb	___lldiv@dividend+3,w,c
 10210  0032CA  A0D8               	btfss	status,0,c
 10211  0032CC  D00A               	goto	l6274
 10212  0032CE  5013               	movf	___lldiv@divisor,w,c
 10213  0032D0  5E0F               	subwf	___lldiv@dividend,f,c
 10214  0032D2  5014               	movf	___lldiv@divisor+1,w,c
 10215  0032D4  5A10               	subwfb	___lldiv@dividend+1,f,c
 10216  0032D6  5015               	movf	___lldiv@divisor+2,w,c
 10217  0032D8  5A11               	subwfb	___lldiv@dividend+2,f,c
 10218  0032DA  5016               	movf	___lldiv@divisor+3,w,c
 10219  0032DC  5A12               	subwfb	___lldiv@dividend+3,f,c
 10220  0032DE  8017               	bsf	___lldiv@quotient,0,c
 10221  0032E0  D000               	goto	l6274
 10222  0032E2                     l6274:
 10223  0032E2  90D8               	bcf	status,0,c
 10224  0032E4  3216               	rrcf	___lldiv@divisor+3,f,c
 10225  0032E6  3215               	rrcf	___lldiv@divisor+2,f,c
 10226  0032E8  3214               	rrcf	___lldiv@divisor+1,f,c
 10227  0032EA  3213               	rrcf	___lldiv@divisor,f,c
 10228  0032EC  2E1B               	decfsz	___lldiv@counter,f,c
 10229  0032EE  D7E0               	goto	l6266
 10230  0032F0  D000               	goto	l1226
 10231  0032F2                     l1226:
 10232  0032F2  C017  F00F         	movff	___lldiv@quotient,?___lldiv
 10233  0032F6  C018  F010         	movff	___lldiv@quotient+1,?___lldiv+1
 10234  0032FA  C019  F011         	movff	___lldiv@quotient+2,?___lldiv+2
 10235  0032FE  C01A  F012         	movff	___lldiv@quotient+3,?___lldiv+3
 10236  003302  0012               	return		;funcret
 10237  003304                     __end_of___lldiv:
 10238                           	opt stack 0
 10239                           tblptru	equ	0xFF8
 10240                           tblptrh	equ	0xFF7
 10241                           tblptrl	equ	0xFF6
 10242                           tablat	equ	0xFF5
 10243                           prodh	equ	0xFF4
 10244                           prodl	equ	0xFF3
 10245                           intcon2	equ	0xFF1
 10246                           postinc0	equ	0xFEE
 10247                           wreg	equ	0xFE8
 10248                           postdec1	equ	0xFE5
 10249                           fsr1l	equ	0xFE1
 10250                           indf2	equ	0xFDF
 10251                           postinc2	equ	0xFDE
 10252                           postdec2	equ	0xFDD
 10253                           fsr2h	equ	0xFDA
 10254                           fsr2l	equ	0xFD9
 10255                           status	equ	0xFD8
 10256                           
 10257 ;; *************** function ___fttol *****************
 10258 ;; Defined at:
 10259 ;;		line 44 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fttol.c"
 10260 ;; Parameters:    Size  Location     Type
 10261 ;;  f1              3   56[COMRAM] float 
 10262 ;; Auto vars:     Size  Location     Type
 10263 ;;  lval            4   66[COMRAM] unsigned long 
 10264 ;;  exp1            1   70[COMRAM] unsigned char 
 10265 ;;  sign1           1   65[COMRAM] unsigned char 
 10266 ;; Return value:  Size  Location     Type
 10267 ;;                  4   56[COMRAM] long 
 10268 ;; Registers used:
 10269 ;;		wreg, status,2, status,0
 10270 ;; Tracked objects:
 10271 ;;		On entry : 0/0
 10272 ;;		On exit  : 0/0
 10273 ;;		Unchanged: 0/0
 10274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10275 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10276 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10277 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10278 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10279 ;;Total ram usage:       15 bytes
 10280 ;; Hardware stack levels used:    1
 10281 ;; Hardware stack levels required when called:    2
 10282 ;; This function calls:
 10283 ;;		Nothing
 10284 ;; This function is called by:
 10285 ;;		_printf
 10286 ;; This function uses a non-reentrant model
 10287 ;;
 10288                           
 10289                           	psect	text39
 10290  002AF2                     __ptext39:
 10291                           	opt stack 0
 10292  002AF2                     ___fttol:
 10293                           	opt stack 23
 10294                           
 10295                           ;incstack = 0
 10296  002AF2  C03B  F03D         	movff	___fttol@f1+2,??___fttol
 10297  002AF6  6A3E               	clrf	(??___fttol+1)& (0+255),c
 10298  002AF8  6A3F               	clrf	(??___fttol+2)& (0+255),c
 10299  002AFA  343A               	rlcf	___fttol@f1+1,w,c
 10300  002AFC  363D               	rlcf	??___fttol& (0+255),f,c
 10301  002AFE  E301               	bnc	u6021
 10302  002B00  803E               	bsf	(??___fttol+1)& (0+255),0,c
 10303  002B02                     u6021:
 10304  002B02  503D               	movf	??___fttol,w,c
 10305  002B04  6E47               	movwf	___fttol@exp1,c
 10306  002B06  5047               	movf	___fttol@exp1,w,c
 10307  002B08  A4D8               	btfss	status,2,c
 10308  002B0A  D002               	goto	l6216
 10309  002B0C  D039               	goto	l6240
 10310  002B0E  D063               	goto	l1182
 10311  002B10                     l6216:
 10312  002B10  0E17               	movlw	23
 10313  002B12  6E3D               	movwf	??___fttol& (0+255),c
 10314  002B14  C039  F03E         	movff	___fttol@f1,??___fttol+1
 10315  002B18  C03A  F03F         	movff	___fttol@f1+1,??___fttol+2
 10316  002B1C  C03B  F040         	movff	___fttol@f1+2,??___fttol+3
 10317  002B20  283D               	incf	??___fttol,w,c
 10318  002B22  6E41               	movwf	(??___fttol+4)& (0+255),c
 10319  002B24  D004               	goto	u6040
 10320  002B26                     u6045:
 10321  002B26  90D8               	bcf	status,0,c
 10322  002B28  3240               	rrcf	??___fttol+3,f,c
 10323  002B2A  323F               	rrcf	??___fttol+2,f,c
 10324  002B2C  323E               	rrcf	??___fttol+1,f,c
 10325  002B2E                     u6040:
 10326  002B2E  2E41               	decfsz	(??___fttol+4)& (0+255),f,c
 10327  002B30  D7FA               	goto	u6045
 10328  002B32  503E               	movf	??___fttol+1,w,c
 10329  002B34  6E42               	movwf	___fttol@sign1,c
 10330  002B36  8E3A               	bsf	___fttol@f1+1,7,c
 10331  002B38  0EFF               	movlw	255
 10332  002B3A  1639               	andwf	___fttol@f1,f,c
 10333  002B3C  0EFF               	movlw	255
 10334  002B3E  163A               	andwf	___fttol@f1+1,f,c
 10335  002B40  0E00               	movlw	0
 10336  002B42  163B               	andwf	___fttol@f1+2,f,c
 10337  002B44  5039               	movf	___fttol@f1,w,c
 10338  002B46  6E43               	movwf	___fttol@lval,c
 10339  002B48  503A               	movf	___fttol@f1+1,w,c
 10340  002B4A  6E44               	movwf	___fttol@lval+1,c
 10341  002B4C  503B               	movf	___fttol@f1+2,w,c
 10342  002B4E  6E45               	movwf	___fttol@lval+2,c
 10343  002B50  6A46               	clrf	___fttol@lval+3,c
 10344  002B52  0E8E               	movlw	142
 10345  002B54  5E47               	subwf	___fttol@exp1,f,c
 10346  002B56  AE47               	btfss	___fttol@exp1,7,c
 10347  002B58  D010               	goto	l6238
 10348  002B5A  5047               	movf	___fttol@exp1,w,c
 10349  002B5C  0A80               	xorlw	128
 10350  002B5E  0F8F               	addlw	143
 10351  002B60  B0D8               	btfsc	status,0,c
 10352  002B62  D003               	goto	l6234
 10353  002B64  D00D               	goto	l6240
 10354  002B66  D037               	goto	l1182
 10355  002B68  D000               	goto	l6234
 10356  002B6A                     l6234:
 10357  002B6A  90D8               	bcf	status,0,c
 10358  002B6C  3246               	rrcf	___fttol@lval+3,f,c
 10359  002B6E  3245               	rrcf	___fttol@lval+2,f,c
 10360  002B70  3244               	rrcf	___fttol@lval+1,f,c
 10361  002B72  3243               	rrcf	___fttol@lval,f,c
 10362  002B74  3E47               	incfsz	___fttol@exp1,f,c
 10363  002B76  D7F9               	goto	l6234
 10364  002B78  D019               	goto	l6248
 10365  002B7A                     l6238:
 10366  002B7A  0E17               	movlw	23
 10367  002B7C  6447               	cpfsgt	___fttol@exp1,c
 10368  002B7E  D011               	goto	l6246
 10369  002B80                     l6240:
 10370  002B80  0E00               	movlw	0
 10371  002B82  6E39               	movwf	?___fttol,c
 10372  002B84  0E00               	movlw	0
 10373  002B86  6E3A               	movwf	?___fttol+1,c
 10374  002B88  0E00               	movlw	0
 10375  002B8A  6E3B               	movwf	?___fttol+2,c
 10376  002B8C  0E00               	movlw	0
 10377  002B8E  6E3C               	movwf	?___fttol+3,c
 10378  002B90  D022               	goto	l1182
 10379  002B92  D007               	goto	l6246
 10380  002B94                     l6244:
 10381  002B94  90D8               	bcf	status,0,c
 10382  002B96  3643               	rlcf	___fttol@lval,f,c
 10383  002B98  3644               	rlcf	___fttol@lval+1,f,c
 10384  002B9A  3645               	rlcf	___fttol@lval+2,f,c
 10385  002B9C  3646               	rlcf	___fttol@lval+3,f,c
 10386  002B9E  0647               	decf	___fttol@exp1,f,c
 10387  002BA0  D000               	goto	l6246
 10388  002BA2                     l6246:
 10389  002BA2  5047               	movf	___fttol@exp1,w,c
 10390  002BA4  B4D8               	btfsc	status,2,c
 10391  002BA6  D002               	goto	l6248
 10392  002BA8  D7F5               	goto	l6244
 10393  002BAA  D000               	goto	l6248
 10394  002BAC                     l6248:
 10395  002BAC  5042               	movf	___fttol@sign1,w,c
 10396  002BAE  B4D8               	btfsc	status,2,c
 10397  002BB0  D009               	goto	l6252
 10398  002BB2  1E46               	comf	___fttol@lval+3,f,c
 10399  002BB4  1E45               	comf	___fttol@lval+2,f,c
 10400  002BB6  1E44               	comf	___fttol@lval+1,f,c
 10401  002BB8  6C43               	negf	___fttol@lval,c
 10402  002BBA  0E00               	movlw	0
 10403  002BBC  2244               	addwfc	___fttol@lval+1,f,c
 10404  002BBE  2245               	addwfc	___fttol@lval+2,f,c
 10405  002BC0  2246               	addwfc	___fttol@lval+3,f,c
 10406  002BC2  D000               	goto	l6252
 10407  002BC4                     l6252:
 10408  002BC4  C043  F039         	movff	___fttol@lval,?___fttol
 10409  002BC8  C044  F03A         	movff	___fttol@lval+1,?___fttol+1
 10410  002BCC  C045  F03B         	movff	___fttol@lval+2,?___fttol+2
 10411  002BD0  C046  F03C         	movff	___fttol@lval+3,?___fttol+3
 10412  002BD4  D000               	goto	l1182
 10413  002BD6                     l1182:
 10414  002BD6  0012               	return		;funcret
 10415  002BD8                     __end_of___fttol:
 10416                           	opt stack 0
 10417                           tblptru	equ	0xFF8
 10418                           tblptrh	equ	0xFF7
 10419                           tblptrl	equ	0xFF6
 10420                           tablat	equ	0xFF5
 10421                           prodh	equ	0xFF4
 10422                           prodl	equ	0xFF3
 10423                           intcon2	equ	0xFF1
 10424                           postinc0	equ	0xFEE
 10425                           wreg	equ	0xFE8
 10426                           postdec1	equ	0xFE5
 10427                           fsr1l	equ	0xFE1
 10428                           indf2	equ	0xFDF
 10429                           postinc2	equ	0xFDE
 10430                           postdec2	equ	0xFDD
 10431                           fsr2h	equ	0xFDA
 10432                           fsr2l	equ	0xFD9
 10433                           status	equ	0xFD8
 10434                           
 10435 ;; *************** function ___ftsub *****************
 10436 ;; Defined at:
 10437 ;;		line 20 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftsub.c"
 10438 ;; Parameters:    Size  Location     Type
 10439 ;;  f1              3   71[COMRAM] float 
 10440 ;;  f2              3   74[COMRAM] float 
 10441 ;; Auto vars:     Size  Location     Type
 10442 ;;		None
 10443 ;; Return value:  Size  Location     Type
 10444 ;;                  3   71[COMRAM] float 
 10445 ;; Registers used:
 10446 ;;		wreg, status,2, status,0, cstack
 10447 ;; Tracked objects:
 10448 ;;		On entry : 0/0
 10449 ;;		On exit  : 0/0
 10450 ;;		Unchanged: 0/0
 10451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10452 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10455 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10456 ;;Total ram usage:        6 bytes
 10457 ;; Hardware stack levels used:    1
 10458 ;; Hardware stack levels required when called:    4
 10459 ;; This function calls:
 10460 ;;		___ftadd
 10461 ;; This function is called by:
 10462 ;;		_printf
 10463 ;; This function uses a non-reentrant model
 10464 ;;
 10465                           
 10466                           	psect	text40
 10467  003A06                     __ptext40:
 10468                           	opt stack 0
 10469  003A06                     ___ftsub:
 10470                           	opt stack 21
 10471                           
 10472                           ;incstack = 0
 10473  003A06  504B               	movf	___ftsub@f2,w,c
 10474  003A08  104C               	iorwf	___ftsub@f2+1,w,c
 10475  003A0A  104D               	iorwf	___ftsub@f2+2,w,c
 10476  003A0C  B4D8               	btfsc	status,2,c
 10477  003A0E  D007               	goto	l6184
 10478  003A10  0E00               	movlw	0
 10479  003A12  1A4B               	xorwf	___ftsub@f2,f,c
 10480  003A14  0E00               	movlw	0
 10481  003A16  1A4C               	xorwf	___ftsub@f2+1,f,c
 10482  003A18  0E80               	movlw	128
 10483  003A1A  1A4D               	xorwf	___ftsub@f2+2,f,c
 10484  003A1C  D000               	goto	l6184
 10485  003A1E                     l6184:
 10486  003A1E  C048  F03C         	movff	___ftsub@f1,___ftadd@f1
 10487  003A22  C049  F03D         	movff	___ftsub@f1+1,___ftadd@f1+1
 10488  003A26  C04A  F03E         	movff	___ftsub@f1+2,___ftadd@f1+2
 10489  003A2A  C04B  F03F         	movff	___ftsub@f2,___ftadd@f2
 10490  003A2E  C04C  F040         	movff	___ftsub@f2+1,___ftadd@f2+1
 10491  003A32  C04D  F041         	movff	___ftsub@f2+2,___ftadd@f2+2
 10492  003A36  ECA6  F00E         	call	___ftadd	;wreg free
 10493  003A3A  C03C  F048         	movff	?___ftadd,?___ftsub
 10494  003A3E  C03D  F049         	movff	?___ftadd+1,?___ftsub+1
 10495  003A42  C03E  F04A         	movff	?___ftadd+2,?___ftsub+2
 10496  003A46  D000               	goto	l1178
 10497  003A48                     l1178:
 10498  003A48  0012               	return		;funcret
 10499  003A4A                     __end_of___ftsub:
 10500                           	opt stack 0
 10501                           tblptru	equ	0xFF8
 10502                           tblptrh	equ	0xFF7
 10503                           tblptrl	equ	0xFF6
 10504                           tablat	equ	0xFF5
 10505                           prodh	equ	0xFF4
 10506                           prodl	equ	0xFF3
 10507                           intcon2	equ	0xFF1
 10508                           postinc0	equ	0xFEE
 10509                           wreg	equ	0xFE8
 10510                           postdec1	equ	0xFE5
 10511                           fsr1l	equ	0xFE1
 10512                           indf2	equ	0xFDF
 10513                           postinc2	equ	0xFDE
 10514                           postdec2	equ	0xFDD
 10515                           fsr2h	equ	0xFDA
 10516                           fsr2l	equ	0xFD9
 10517                           status	equ	0xFD8
 10518                           
 10519 ;; *************** function ___ftadd *****************
 10520 ;; Defined at:
 10521 ;;		line 86 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftadd.c"
 10522 ;; Parameters:    Size  Location     Type
 10523 ;;  f1              3   59[COMRAM] float 
 10524 ;;  f2              3   62[COMRAM] float 
 10525 ;; Auto vars:     Size  Location     Type
 10526 ;;  exp1            1   70[COMRAM] unsigned char 
 10527 ;;  exp2            1   69[COMRAM] unsigned char 
 10528 ;;  sign            1   68[COMRAM] unsigned char 
 10529 ;; Return value:  Size  Location     Type
 10530 ;;                  3   59[COMRAM] float 
 10531 ;; Registers used:
 10532 ;;		wreg, status,2, status,0, cstack
 10533 ;; Tracked objects:
 10534 ;;		On entry : 0/0
 10535 ;;		On exit  : 0/0
 10536 ;;		Unchanged: 0/0
 10537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10538 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10539 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10540 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10541 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10542 ;;Total ram usage:       12 bytes
 10543 ;; Hardware stack levels used:    1
 10544 ;; Hardware stack levels required when called:    3
 10545 ;; This function calls:
 10546 ;;		___ftpack
 10547 ;; This function is called by:
 10548 ;;		_printf
 10549 ;;		___ftsub
 10550 ;; This function uses a non-reentrant model
 10551 ;;
 10552                           
 10553                           	psect	text41
 10554  001D4C                     __ptext41:
 10555                           	opt stack 0
 10556  001D4C                     ___ftadd:
 10557                           	opt stack 21
 10558                           
 10559                           ;incstack = 0
 10560  001D4C  C03E  F042         	movff	___ftadd@f1+2,??___ftadd
 10561  001D50  6A43               	clrf	(??___ftadd+1)& (0+255),c
 10562  001D52  6A44               	clrf	(??___ftadd+2)& (0+255),c
 10563  001D54  343D               	rlcf	___ftadd@f1+1,w,c
 10564  001D56  3642               	rlcf	??___ftadd& (0+255),f,c
 10565  001D58  E301               	bnc	u5171
 10566  001D5A  8043               	bsf	(??___ftadd+1)& (0+255),0,c
 10567  001D5C                     u5171:
 10568  001D5C  5042               	movf	??___ftadd,w,c
 10569  001D5E  6E47               	movwf	___ftadd@exp1,c
 10570  001D60  C041  F042         	movff	___ftadd@f2+2,??___ftadd
 10571  001D64  6A43               	clrf	(??___ftadd+1)& (0+255),c
 10572  001D66  6A44               	clrf	(??___ftadd+2)& (0+255),c
 10573  001D68  3440               	rlcf	___ftadd@f2+1,w,c
 10574  001D6A  3642               	rlcf	??___ftadd& (0+255),f,c
 10575  001D6C  E301               	bnc	u5181
 10576  001D6E  8043               	bsf	(??___ftadd+1)& (0+255),0,c
 10577  001D70                     u5181:
 10578  001D70  5042               	movf	??___ftadd,w,c
 10579  001D72  6E46               	movwf	___ftadd@exp2,c
 10580  001D74  5047               	movf	___ftadd@exp1,w,c
 10581  001D76  B4D8               	btfsc	status,2,c
 10582  001D78  D00B               	goto	l1097
 10583  001D7A  5046               	movf	___ftadd@exp2,w,c
 10584  001D7C  5C47               	subwf	___ftadd@exp1,w,c
 10585  001D7E  B0D8               	btfsc	status,0,c
 10586  001D80  D00E               	goto	l5734
 10587  001D82  5047               	movf	___ftadd@exp1,w,c
 10588  001D84  0800               	sublw	0
 10589  001D86  2446               	addwf	___ftadd@exp2,w,c
 10590  001D88  6E42               	movwf	??___ftadd& (0+255),c
 10591  001D8A  0E18               	movlw	24
 10592  001D8C  6442               	cpfsgt	??___ftadd,c
 10593  001D8E  D007               	goto	l5734
 10594  001D90                     l1097:
 10595  001D90  C03F  F03C         	movff	___ftadd@f2,?___ftadd
 10596  001D94  C040  F03D         	movff	___ftadd@f2+1,?___ftadd+1
 10597  001D98  C041  F03E         	movff	___ftadd@f2+2,?___ftadd+2
 10598  001D9C  D0B8               	goto	l1098
 10599  001D9E                     l5734:
 10600  001D9E  5046               	movf	___ftadd@exp2,w,c
 10601  001DA0  B4D8               	btfsc	status,2,c
 10602  001DA2  D00B               	goto	l1101
 10603  001DA4  5047               	movf	___ftadd@exp1,w,c
 10604  001DA6  5C46               	subwf	___ftadd@exp2,w,c
 10605  001DA8  B0D8               	btfsc	status,0,c
 10606  001DAA  D00E               	goto	l5740
 10607  001DAC  5046               	movf	___ftadd@exp2,w,c
 10608  001DAE  0800               	sublw	0
 10609  001DB0  2447               	addwf	___ftadd@exp1,w,c
 10610  001DB2  6E42               	movwf	??___ftadd& (0+255),c
 10611  001DB4  0E18               	movlw	24
 10612  001DB6  6442               	cpfsgt	??___ftadd,c
 10613  001DB8  D007               	goto	l5740
 10614  001DBA                     l1101:
 10615  001DBA  C03C  F03C         	movff	___ftadd@f1,?___ftadd
 10616  001DBE  C03D  F03D         	movff	___ftadd@f1+1,?___ftadd+1
 10617  001DC2  C03E  F03E         	movff	___ftadd@f1+2,?___ftadd+2
 10618  001DC6  D0A3               	goto	l1098
 10619  001DC8                     l5740:
 10620  001DC8  0E06               	movlw	6
 10621  001DCA  6E45               	movwf	___ftadd@sign,c
 10622  001DCC  AE3E               	btfss	___ftadd@f1+2,7,c
 10623  001DCE  D002               	goto	l5746
 10624  001DD0  8E45               	bsf	___ftadd@sign,7,c
 10625  001DD2  D000               	goto	l5746
 10626  001DD4                     l5746:
 10627  001DD4  BE41               	btfsc	___ftadd@f2+2,7,c
 10628  001DD6  8C45               	bsf	___ftadd@sign,6,c
 10629  001DD8  8E3D               	bsf	___ftadd@f1+1,7,c
 10630  001DDA  0EFF               	movlw	255
 10631  001DDC  163C               	andwf	___ftadd@f1,f,c
 10632  001DDE  0EFF               	movlw	255
 10633  001DE0  163D               	andwf	___ftadd@f1+1,f,c
 10634  001DE2  0E00               	movlw	0
 10635  001DE4  163E               	andwf	___ftadd@f1+2,f,c
 10636  001DE6  8E40               	bsf	___ftadd@f2+1,7,c
 10637  001DE8  0EFF               	movlw	255
 10638  001DEA  163F               	andwf	___ftadd@f2,f,c
 10639  001DEC  0EFF               	movlw	255
 10640  001DEE  1640               	andwf	___ftadd@f2+1,f,c
 10641  001DF0  0E00               	movlw	0
 10642  001DF2  1641               	andwf	___ftadd@f2+2,f,c
 10643  001DF4  5046               	movf	___ftadd@exp2,w,c
 10644  001DF6  5C47               	subwf	___ftadd@exp1,w,c
 10645  001DF8  B0D8               	btfsc	status,0,c
 10646  001DFA  D01E               	goto	l5766
 10647  001DFC                     l5756:
 10648  001DFC  90D8               	bcf	status,0,c
 10649  001DFE  363F               	rlcf	___ftadd@f2,f,c
 10650  001E00  3640               	rlcf	___ftadd@f2+1,f,c
 10651  001E02  3641               	rlcf	___ftadd@f2+2,f,c
 10652  001E04  0646               	decf	___ftadd@exp2,f,c
 10653  001E06  5047               	movf	___ftadd@exp1,w,c
 10654  001E08  1846               	xorwf	___ftadd@exp2,w,c
 10655  001E0A  B4D8               	btfsc	status,2,c
 10656  001E0C  D00F               	goto	l5764
 10657  001E0E  0645               	decf	___ftadd@sign,f,c
 10658  001E10  C045  F042         	movff	___ftadd@sign,??___ftadd
 10659  001E14  0E07               	movlw	7
 10660  001E16  1642               	andwf	??___ftadd,f,c
 10661  001E18  B4D8               	btfsc	status,2,c
 10662  001E1A  D008               	goto	l5764
 10663  001E1C  D7EF               	goto	l5756
 10664  001E1E  D006               	goto	l5764
 10665  001E20                     l5762:
 10666  001E20  90D8               	bcf	status,0,c
 10667  001E22  323E               	rrcf	___ftadd@f1+2,f,c
 10668  001E24  323D               	rrcf	___ftadd@f1+1,f,c
 10669  001E26  323C               	rrcf	___ftadd@f1,f,c
 10670  001E28  2A47               	incf	___ftadd@exp1,f,c
 10671  001E2A  D000               	goto	l5764
 10672  001E2C                     l5764:
 10673  001E2C  5046               	movf	___ftadd@exp2,w,c
 10674  001E2E  1847               	xorwf	___ftadd@exp1,w,c
 10675  001E30  B4D8               	btfsc	status,2,c
 10676  001E32  D024               	goto	l1112
 10677  001E34  D7F5               	goto	l5762
 10678  001E36  D022               	goto	l1112
 10679  001E38                     l5766:
 10680  001E38  5047               	movf	___ftadd@exp1,w,c
 10681  001E3A  5C46               	subwf	___ftadd@exp2,w,c
 10682  001E3C  B0D8               	btfsc	status,0,c
 10683  001E3E  D01E               	goto	l1112
 10684  001E40                     l5768:
 10685  001E40  90D8               	bcf	status,0,c
 10686  001E42  363C               	rlcf	___ftadd@f1,f,c
 10687  001E44  363D               	rlcf	___ftadd@f1+1,f,c
 10688  001E46  363E               	rlcf	___ftadd@f1+2,f,c
 10689  001E48  0647               	decf	___ftadd@exp1,f,c
 10690  001E4A  5047               	movf	___ftadd@exp1,w,c
 10691  001E4C  1846               	xorwf	___ftadd@exp2,w,c
 10692  001E4E  B4D8               	btfsc	status,2,c
 10693  001E50  D00F               	goto	l5776
 10694  001E52  0645               	decf	___ftadd@sign,f,c
 10695  001E54  C045  F042         	movff	___ftadd@sign,??___ftadd
 10696  001E58  0E07               	movlw	7
 10697  001E5A  1642               	andwf	??___ftadd,f,c
 10698  001E5C  B4D8               	btfsc	status,2,c
 10699  001E5E  D008               	goto	l5776
 10700  001E60  D7EF               	goto	l5768
 10701  001E62  D006               	goto	l5776
 10702  001E64                     l5774:
 10703  001E64  90D8               	bcf	status,0,c
 10704  001E66  3241               	rrcf	___ftadd@f2+2,f,c
 10705  001E68  3240               	rrcf	___ftadd@f2+1,f,c
 10706  001E6A  323F               	rrcf	___ftadd@f2,f,c
 10707  001E6C  2A46               	incf	___ftadd@exp2,f,c
 10708  001E6E  D000               	goto	l5776
 10709  001E70                     l5776:
 10710  001E70  5046               	movf	___ftadd@exp2,w,c
 10711  001E72  1847               	xorwf	___ftadd@exp1,w,c
 10712  001E74  B4D8               	btfsc	status,2,c
 10713  001E76  D002               	goto	l1112
 10714  001E78  D7F5               	goto	l5774
 10715  001E7A  D000               	goto	l1112
 10716  001E7C                     l1112:
 10717  001E7C  AE45               	btfss	___ftadd@sign,7,c
 10718  001E7E  D00C               	goto	l1121
 10719  001E80  0EFF               	movlw	255
 10720  001E82  1A3C               	xorwf	___ftadd@f1,f,c
 10721  001E84  0EFF               	movlw	255
 10722  001E86  1A3D               	xorwf	___ftadd@f1+1,f,c
 10723  001E88  0EFF               	movlw	255
 10724  001E8A  1A3E               	xorwf	___ftadd@f1+2,f,c
 10725  001E8C  0E01               	movlw	1
 10726  001E8E  263C               	addwf	___ftadd@f1,f,c
 10727  001E90  0E00               	movlw	0
 10728  001E92  223D               	addwfc	___ftadd@f1+1,f,c
 10729  001E94  0E00               	movlw	0
 10730  001E96  223E               	addwfc	___ftadd@f1+2,f,c
 10731  001E98                     l1121:
 10732  001E98  AC45               	btfss	___ftadd@sign,6,c
 10733  001E9A  D00D               	goto	l5782
 10734  001E9C  0EFF               	movlw	255
 10735  001E9E  1A3F               	xorwf	___ftadd@f2,f,c
 10736  001EA0  0EFF               	movlw	255
 10737  001EA2  1A40               	xorwf	___ftadd@f2+1,f,c
 10738  001EA4  0EFF               	movlw	255
 10739  001EA6  1A41               	xorwf	___ftadd@f2+2,f,c
 10740  001EA8  0E01               	movlw	1
 10741  001EAA  263F               	addwf	___ftadd@f2,f,c
 10742  001EAC  0E00               	movlw	0
 10743  001EAE  2240               	addwfc	___ftadd@f2+1,f,c
 10744  001EB0  0E00               	movlw	0
 10745  001EB2  2241               	addwfc	___ftadd@f2+2,f,c
 10746  001EB4  D000               	goto	l5782
 10747  001EB6                     l5782:
 10748  001EB6  0E00               	movlw	0
 10749  001EB8  6E45               	movwf	___ftadd@sign,c
 10750  001EBA  503C               	movf	___ftadd@f1,w,c
 10751  001EBC  263F               	addwf	___ftadd@f2,f,c
 10752  001EBE  503D               	movf	___ftadd@f1+1,w,c
 10753  001EC0  2240               	addwfc	___ftadd@f2+1,f,c
 10754  001EC2  503E               	movf	___ftadd@f1+2,w,c
 10755  001EC4  2241               	addwfc	___ftadd@f2+2,f,c
 10756  001EC6  AE41               	btfss	___ftadd@f2+2,7,c
 10757  001EC8  D00F               	goto	l5792
 10758  001ECA  0EFF               	movlw	255
 10759  001ECC  1A3F               	xorwf	___ftadd@f2,f,c
 10760  001ECE  0EFF               	movlw	255
 10761  001ED0  1A40               	xorwf	___ftadd@f2+1,f,c
 10762  001ED2  0EFF               	movlw	255
 10763  001ED4  1A41               	xorwf	___ftadd@f2+2,f,c
 10764  001ED6  0E01               	movlw	1
 10765  001ED8  263F               	addwf	___ftadd@f2,f,c
 10766  001EDA  0E00               	movlw	0
 10767  001EDC  2240               	addwfc	___ftadd@f2+1,f,c
 10768  001EDE  0E00               	movlw	0
 10769  001EE0  2241               	addwfc	___ftadd@f2+2,f,c
 10770  001EE2  0E01               	movlw	1
 10771  001EE4  6E45               	movwf	___ftadd@sign,c
 10772  001EE6  D000               	goto	l5792
 10773  001EE8                     l5792:
 10774  001EE8  C03F  F00F         	movff	___ftadd@f2,___ftpack@arg
 10775  001EEC  C040  F010         	movff	___ftadd@f2+1,___ftpack@arg+1
 10776  001EF0  C041  F011         	movff	___ftadd@f2+2,___ftpack@arg+2
 10777  001EF4  C047  F012         	movff	___ftadd@exp1,___ftpack@exp
 10778  001EF8  C045  F013         	movff	___ftadd@sign,___ftpack@sign
 10779  001EFC  EC9E  F017         	call	___ftpack	;wreg free
 10780  001F00  C00F  F03C         	movff	?___ftpack,?___ftadd
 10781  001F04  C010  F03D         	movff	?___ftpack+1,?___ftadd+1
 10782  001F08  C011  F03E         	movff	?___ftpack+2,?___ftadd+2
 10783  001F0C  D000               	goto	l1098
 10784  001F0E                     l1098:
 10785  001F0E  0012               	return		;funcret
 10786  001F10                     __end_of___ftadd:
 10787                           	opt stack 0
 10788                           tblptru	equ	0xFF8
 10789                           tblptrh	equ	0xFF7
 10790                           tblptrl	equ	0xFF6
 10791                           tablat	equ	0xFF5
 10792                           prodh	equ	0xFF4
 10793                           prodl	equ	0xFF3
 10794                           intcon2	equ	0xFF1
 10795                           postinc0	equ	0xFEE
 10796                           wreg	equ	0xFE8
 10797                           postdec1	equ	0xFE5
 10798                           fsr1l	equ	0xFE1
 10799                           indf2	equ	0xFDF
 10800                           postinc2	equ	0xFDE
 10801                           postdec2	equ	0xFDD
 10802                           fsr2h	equ	0xFDA
 10803                           fsr2l	equ	0xFD9
 10804                           status	equ	0xFD8
 10805                           
 10806 ;; *************** function ___ftpack *****************
 10807 ;; Defined at:
 10808 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\float.c"
 10809 ;; Parameters:    Size  Location     Type
 10810 ;;  arg             3   14[COMRAM] unsigned um
 10811 ;;  exp             1   17[COMRAM] unsigned char 
 10812 ;;  sign            1   18[COMRAM] unsigned char 
 10813 ;; Auto vars:     Size  Location     Type
 10814 ;;		None
 10815 ;; Return value:  Size  Location     Type
 10816 ;;                  3   14[COMRAM] float 
 10817 ;; Registers used:
 10818 ;;		wreg, status,2, status,0
 10819 ;; Tracked objects:
 10820 ;;		On entry : 0/0
 10821 ;;		On exit  : 0/0
 10822 ;;		Unchanged: 0/0
 10823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10824 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10826 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10827 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10828 ;;Total ram usage:        8 bytes
 10829 ;; Hardware stack levels used:    1
 10830 ;; Hardware stack levels required when called:    2
 10831 ;; This function calls:
 10832 ;;		Nothing
 10833 ;; This function is called by:
 10834 ;;		___awtoft
 10835 ;;		___ftadd
 10836 ;;		___ftdiv
 10837 ;;		___ftmul
 10838 ;;		___lltoft
 10839 ;; This function uses a non-reentrant model
 10840 ;;
 10841                           
 10842                           	psect	text42
 10843  002F3C                     __ptext42:
 10844                           	opt stack 0
 10845  002F3C                     ___ftpack:
 10846                           	opt stack 27
 10847                           
 10848                           ;incstack = 0
 10849  002F3C  5012               	movf	___ftpack@exp,w,c
 10850  002F3E  B4D8               	btfsc	status,2,c
 10851  002F40  D005               	goto	l5670
 10852  002F42  500F               	movf	___ftpack@arg,w,c
 10853  002F44  1010               	iorwf	___ftpack@arg+1,w,c
 10854  002F46  1011               	iorwf	___ftpack@arg+2,w,c
 10855  002F48  A4D8               	btfss	status,2,c
 10856  002F4A  D00E               	goto	l5676
 10857  002F4C                     l5670:
 10858  002F4C  0E00               	movlw	0
 10859  002F4E  6E0F               	movwf	?___ftpack,c
 10860  002F50  0E00               	movlw	0
 10861  002F52  6E10               	movwf	?___ftpack+1,c
 10862  002F54  0E00               	movlw	0
 10863  002F56  6E11               	movwf	?___ftpack+2,c
 10864  002F58  D053               	goto	l1057
 10865  002F5A  D006               	goto	l5676
 10866  002F5C                     l5674:
 10867  002F5C  2A12               	incf	___ftpack@exp,f,c
 10868  002F5E  90D8               	bcf	status,0,c
 10869  002F60  3211               	rrcf	___ftpack@arg+2,f,c
 10870  002F62  3210               	rrcf	___ftpack@arg+1,f,c
 10871  002F64  320F               	rrcf	___ftpack@arg,f,c
 10872  002F66  D000               	goto	l5676
 10873  002F68                     l5676:
 10874  002F68  0E00               	movlw	0
 10875  002F6A  140F               	andwf	___ftpack@arg,w,c
 10876  002F6C  6E14               	movwf	??___ftpack& (0+255),c
 10877  002F6E  0E00               	movlw	0
 10878  002F70  1410               	andwf	___ftpack@arg+1,w,c
 10879  002F72  6E15               	movwf	(??___ftpack+1)& (0+255),c
 10880  002F74  0EFE               	movlw	254
 10881  002F76  1411               	andwf	___ftpack@arg+2,w,c
 10882  002F78  6E16               	movwf	(??___ftpack+2)& (0+255),c
 10883  002F7A  5014               	movf	??___ftpack,w,c
 10884  002F7C  1015               	iorwf	??___ftpack+1,w,c
 10885  002F7E  1016               	iorwf	??___ftpack+2,w,c
 10886  002F80  B4D8               	btfsc	status,2,c
 10887  002F82  D00E               	goto	l5682
 10888  002F84  D7EB               	goto	l5674
 10889  002F86  D00C               	goto	l5682
 10890  002F88                     l5678:
 10891  002F88  2A12               	incf	___ftpack@exp,f,c
 10892  002F8A  0E01               	movlw	1
 10893  002F8C  260F               	addwf	___ftpack@arg,f,c
 10894  002F8E  0E00               	movlw	0
 10895  002F90  2210               	addwfc	___ftpack@arg+1,f,c
 10896  002F92  0E00               	movlw	0
 10897  002F94  2211               	addwfc	___ftpack@arg+2,f,c
 10898  002F96  90D8               	bcf	status,0,c
 10899  002F98  3211               	rrcf	___ftpack@arg+2,f,c
 10900  002F9A  3210               	rrcf	___ftpack@arg+1,f,c
 10901  002F9C  320F               	rrcf	___ftpack@arg,f,c
 10902  002F9E  D000               	goto	l5682
 10903  002FA0                     l5682:
 10904  002FA0  0E00               	movlw	0
 10905  002FA2  140F               	andwf	___ftpack@arg,w,c
 10906  002FA4  6E14               	movwf	??___ftpack& (0+255),c
 10907  002FA6  0E00               	movlw	0
 10908  002FA8  1410               	andwf	___ftpack@arg+1,w,c
 10909  002FAA  6E15               	movwf	(??___ftpack+1)& (0+255),c
 10910  002FAC  0EFF               	movlw	255
 10911  002FAE  1411               	andwf	___ftpack@arg+2,w,c
 10912  002FB0  6E16               	movwf	(??___ftpack+2)& (0+255),c
 10913  002FB2  5014               	movf	??___ftpack,w,c
 10914  002FB4  1015               	iorwf	??___ftpack+1,w,c
 10915  002FB6  1016               	iorwf	??___ftpack+2,w,c
 10916  002FB8  B4D8               	btfsc	status,2,c
 10917  002FBA  D008               	goto	l5686
 10918  002FBC  D7E5               	goto	l5678
 10919  002FBE  D006               	goto	l5686
 10920  002FC0                     l5684:
 10921  002FC0  0612               	decf	___ftpack@exp,f,c
 10922  002FC2  90D8               	bcf	status,0,c
 10923  002FC4  360F               	rlcf	___ftpack@arg,f,c
 10924  002FC6  3610               	rlcf	___ftpack@arg+1,f,c
 10925  002FC8  3611               	rlcf	___ftpack@arg+2,f,c
 10926  002FCA  D000               	goto	l5686
 10927  002FCC                     l5686:
 10928  002FCC  BE10               	btfsc	___ftpack@arg+1,7,c
 10929  002FCE  D004               	goto	l1068
 10930  002FD0  0E02               	movlw	2
 10931  002FD2  6012               	cpfslt	___ftpack@exp,c
 10932  002FD4  D7F5               	goto	l5684
 10933  002FD6  D000               	goto	l1068
 10934  002FD8                     l1068:
 10935  002FD8  B012               	btfsc	___ftpack@exp,0,c
 10936  002FDA  D002               	goto	l5692
 10937  002FDC  9E10               	bcf	___ftpack@arg+1,7,c
 10938  002FDE  D000               	goto	l5692
 10939  002FE0                     l5692:
 10940  002FE0  90D8               	bcf	status,0,c
 10941  002FE2  3212               	rrcf	___ftpack@exp,f,c
 10942  002FE4  5012               	movf	___ftpack@exp,w,c
 10943  002FE6  1211               	iorwf	___ftpack@arg+2,f,c
 10944  002FE8  5013               	movf	___ftpack@sign,w,c
 10945  002FEA  B4D8               	btfsc	status,2,c
 10946  002FEC  D002               	goto	l5698
 10947  002FEE  8E11               	bsf	___ftpack@arg+2,7,c
 10948  002FF0  D000               	goto	l5698
 10949  002FF2                     l5698:
 10950  002FF2  C00F  F00F         	movff	___ftpack@arg,?___ftpack
 10951  002FF6  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
 10952  002FFA  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
 10953  002FFE  D000               	goto	l1057
 10954  003000                     l1057:
 10955  003000  0012               	return		;funcret
 10956  003002                     __end_of___ftpack:
 10957                           	opt stack 0
 10958                           tblptru	equ	0xFF8
 10959                           tblptrh	equ	0xFF7
 10960                           tblptrl	equ	0xFF6
 10961                           tablat	equ	0xFF5
 10962                           prodh	equ	0xFF4
 10963                           prodl	equ	0xFF3
 10964                           intcon2	equ	0xFF1
 10965                           postinc0	equ	0xFEE
 10966                           wreg	equ	0xFE8
 10967                           postdec1	equ	0xFE5
 10968                           fsr1l	equ	0xFE1
 10969                           indf2	equ	0xFDF
 10970                           postinc2	equ	0xFDE
 10971                           postdec2	equ	0xFDD
 10972                           fsr2h	equ	0xFDA
 10973                           fsr2l	equ	0xFD9
 10974                           status	equ	0xFD8
 10975                           
 10976 ;; *************** function ___ftneg *****************
 10977 ;; Defined at:
 10978 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftneg.c"
 10979 ;; Parameters:    Size  Location     Type
 10980 ;;  f1              3   14[COMRAM] float 
 10981 ;; Auto vars:     Size  Location     Type
 10982 ;;		None
 10983 ;; Return value:  Size  Location     Type
 10984 ;;                  3   14[COMRAM] float 
 10985 ;; Registers used:
 10986 ;;		wreg, status,2, status,0
 10987 ;; Tracked objects:
 10988 ;;		On entry : 0/0
 10989 ;;		On exit  : 0/0
 10990 ;;		Unchanged: 0/0
 10991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10992 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10995 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10996 ;;Total ram usage:        3 bytes
 10997 ;; Hardware stack levels used:    1
 10998 ;; Hardware stack levels required when called:    2
 10999 ;; This function calls:
 11000 ;;		Nothing
 11001 ;; This function is called by:
 11002 ;;		_printf
 11003 ;; This function uses a non-reentrant model
 11004 ;;
 11005                           
 11006                           	psect	text43
 11007  003C96                     __ptext43:
 11008                           	opt stack 0
 11009  003C96                     ___ftneg:
 11010                           	opt stack 23
 11011                           
 11012                           ;incstack = 0
 11013  003C96  500F               	movf	___ftneg@f1,w,c
 11014  003C98  1010               	iorwf	___ftneg@f1+1,w,c
 11015  003C9A  1011               	iorwf	___ftneg@f1+2,w,c
 11016  003C9C  B4D8               	btfsc	status,2,c
 11017  003C9E  D006               	goto	l1171
 11018  003CA0  0E00               	movlw	0
 11019  003CA2  1A0F               	xorwf	___ftneg@f1,f,c
 11020  003CA4  0E00               	movlw	0
 11021  003CA6  1A10               	xorwf	___ftneg@f1+1,f,c
 11022  003CA8  0E80               	movlw	128
 11023  003CAA  1A11               	xorwf	___ftneg@f1+2,f,c
 11024  003CAC                     l1171:
 11025  003CAC  C00F  F00F         	movff	___ftneg@f1,?___ftneg
 11026  003CB0  C010  F010         	movff	___ftneg@f1+1,?___ftneg+1
 11027  003CB4  C011  F011         	movff	___ftneg@f1+2,?___ftneg+2
 11028  003CB8  0012               	return		;funcret
 11029  003CBA                     __end_of___ftneg:
 11030                           	opt stack 0
 11031                           tblptru	equ	0xFF8
 11032                           tblptrh	equ	0xFF7
 11033                           tblptrl	equ	0xFF6
 11034                           tablat	equ	0xFF5
 11035                           prodh	equ	0xFF4
 11036                           prodl	equ	0xFF3
 11037                           intcon2	equ	0xFF1
 11038                           postinc0	equ	0xFEE
 11039                           wreg	equ	0xFE8
 11040                           postdec1	equ	0xFE5
 11041                           fsr1l	equ	0xFE1
 11042                           indf2	equ	0xFDF
 11043                           postinc2	equ	0xFDE
 11044                           postdec2	equ	0xFDD
 11045                           fsr2h	equ	0xFDA
 11046                           fsr2l	equ	0xFD9
 11047                           status	equ	0xFD8
 11048                           
 11049 ;; *************** function ___ftge *****************
 11050 ;; Defined at:
 11051 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftge.c"
 11052 ;; Parameters:    Size  Location     Type
 11053 ;;  ff1             3   14[COMRAM] float 
 11054 ;;  ff2             3   17[COMRAM] float 
 11055 ;; Auto vars:     Size  Location     Type
 11056 ;;		None
 11057 ;; Return value:  Size  Location     Type
 11058 ;;		None               void
 11059 ;; Registers used:
 11060 ;;		wreg, status,2, status,0
 11061 ;; Tracked objects:
 11062 ;;		On entry : 0/0
 11063 ;;		On exit  : 0/0
 11064 ;;		Unchanged: 0/0
 11065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11066 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11068 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11069 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11070 ;;Total ram usage:        9 bytes
 11071 ;; Hardware stack levels used:    1
 11072 ;; Hardware stack levels required when called:    2
 11073 ;; This function calls:
 11074 ;;		Nothing
 11075 ;; This function is called by:
 11076 ;;		_main
 11077 ;;		_update_LCD_misc
 11078 ;;		_printf
 11079 ;; This function uses a non-reentrant model
 11080 ;;
 11081                           
 11082                           	psect	text44
 11083  00314C                     __ptext44:
 11084                           	opt stack 0
 11085  00314C                     ___ftge:
 11086                           	opt stack 28
 11087                           
 11088                           ;incstack = 0
 11089  00314C  AE11               	btfss	___ftge@ff1+2,7,c
 11090  00314E  D017               	goto	l6192
 11091  003150  C00F  F015         	movff	___ftge@ff1,??___ftge
 11092  003154  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
 11093  003158  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
 11094  00315C  1E15               	comf	??___ftge,f,c
 11095  00315E  1E16               	comf	??___ftge+1,f,c
 11096  003160  1E17               	comf	??___ftge+2,f,c
 11097  003162  2A15               	incf	??___ftge,f,c
 11098  003164  0E00               	movlw	0
 11099  003166  2216               	addwfc	??___ftge+1,f,c
 11100  003168  2217               	addwfc	??___ftge+2,f,c
 11101  00316A  0E00               	movlw	0
 11102  00316C  2415               	addwf	??___ftge,w,c
 11103  00316E  6E0F               	movwf	___ftge@ff1,c
 11104  003170  0E00               	movlw	0
 11105  003172  2016               	addwfc	??___ftge+1,w,c
 11106  003174  6E10               	movwf	___ftge@ff1+1,c
 11107  003176  0E80               	movlw	128
 11108  003178  2017               	addwfc	??___ftge+2,w,c
 11109  00317A  6E11               	movwf	___ftge@ff1+2,c
 11110  00317C  D000               	goto	l6192
 11111  00317E                     l6192:
 11112  00317E  AE14               	btfss	___ftge@ff2+2,7,c
 11113  003180  D017               	goto	l6196
 11114  003182  C012  F015         	movff	___ftge@ff2,??___ftge
 11115  003186  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
 11116  00318A  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
 11117  00318E  1E15               	comf	??___ftge,f,c
 11118  003190  1E16               	comf	??___ftge+1,f,c
 11119  003192  1E17               	comf	??___ftge+2,f,c
 11120  003194  2A15               	incf	??___ftge,f,c
 11121  003196  0E00               	movlw	0
 11122  003198  2216               	addwfc	??___ftge+1,f,c
 11123  00319A  2217               	addwfc	??___ftge+2,f,c
 11124  00319C  0E00               	movlw	0
 11125  00319E  2415               	addwf	??___ftge,w,c
 11126  0031A0  6E12               	movwf	___ftge@ff2,c
 11127  0031A2  0E00               	movlw	0
 11128  0031A4  2016               	addwfc	??___ftge+1,w,c
 11129  0031A6  6E13               	movwf	___ftge@ff2+1,c
 11130  0031A8  0E80               	movlw	128
 11131  0031AA  2017               	addwfc	??___ftge+2,w,c
 11132  0031AC  6E14               	movwf	___ftge@ff2+2,c
 11133  0031AE  D000               	goto	l6196
 11134  0031B0                     l6196:
 11135  0031B0  0E00               	movlw	0
 11136  0031B2  1A0F               	xorwf	___ftge@ff1,f,c
 11137  0031B4  0E00               	movlw	0
 11138  0031B6  1A10               	xorwf	___ftge@ff1+1,f,c
 11139  0031B8  0E80               	movlw	128
 11140  0031BA  1A11               	xorwf	___ftge@ff1+2,f,c
 11141  0031BC  0E00               	movlw	0
 11142  0031BE  1A12               	xorwf	___ftge@ff2,f,c
 11143  0031C0  0E00               	movlw	0
 11144  0031C2  1A13               	xorwf	___ftge@ff2+1,f,c
 11145  0031C4  0E80               	movlw	128
 11146  0031C6  1A14               	xorwf	___ftge@ff2+2,f,c
 11147  0031C8  5012               	movf	___ftge@ff2,w,c
 11148  0031CA  5C0F               	subwf	___ftge@ff1,w,c
 11149  0031CC  5013               	movf	___ftge@ff2+1,w,c
 11150  0031CE  5810               	subwfb	___ftge@ff1+1,w,c
 11151  0031D0  5014               	movf	___ftge@ff2+2,w,c
 11152  0031D2  5811               	subwfb	___ftge@ff1+2,w,c
 11153  0031D4  B0D8               	btfsc	status,0,c
 11154  0031D6  D002               	goto	l6202
 11155  0031D8  90D8               	bcf	status,0,c
 11156  0031DA  D002               	goto	l1155
 11157  0031DC                     l6202:
 11158  0031DC  80D8               	bsf	status,0,c
 11159  0031DE  D000               	goto	l1155
 11160  0031E0                     l1155:
 11161  0031E0  0012               	return		;funcret
 11162  0031E2                     __end_of___ftge:
 11163                           	opt stack 0
 11164                           tblptru	equ	0xFF8
 11165                           tblptrh	equ	0xFF7
 11166                           tblptrl	equ	0xFF6
 11167                           tablat	equ	0xFF5
 11168                           prodh	equ	0xFF4
 11169                           prodl	equ	0xFF3
 11170                           intcon2	equ	0xFF1
 11171                           postinc0	equ	0xFEE
 11172                           wreg	equ	0xFE8
 11173                           postdec1	equ	0xFE5
 11174                           fsr1l	equ	0xFE1
 11175                           indf2	equ	0xFDF
 11176                           postinc2	equ	0xFDE
 11177                           postdec2	equ	0xFDD
 11178                           fsr2h	equ	0xFDA
 11179                           fsr2l	equ	0xFD9
 11180                           status	equ	0xFD8
 11181                           
 11182 ;; *************** function _Do_Init *****************
 11183 ;; Defined at:
 11184 ;;		line 744 in file "Lab9p1.c"
 11185 ;; Parameters:    Size  Location     Type
 11186 ;;		None
 11187 ;; Auto vars:     Size  Location     Type
 11188 ;;		None
 11189 ;; Return value:  Size  Location     Type
 11190 ;;		None               void
 11191 ;; Registers used:
 11192 ;;		None
 11193 ;; Tracked objects:
 11194 ;;		On entry : 0/0
 11195 ;;		On exit  : 0/0
 11196 ;;		Unchanged: 0/0
 11197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11202 ;;Total ram usage:        0 bytes
 11203 ;; Hardware stack levels used:    1
 11204 ;; Hardware stack levels required when called:    2
 11205 ;; This function calls:
 11206 ;;		Nothing
 11207 ;; This function is called by:
 11208 ;;		_main
 11209 ;;		_checker
 11210 ;; This function uses a non-reentrant model
 11211 ;;
 11212                           
 11213                           	psect	text45
 11214  003D28                     __ptext45:
 11215                           	opt stack 0
 11216  003D28                     _Do_Init:
 11217                           	opt stack 24
 11218                           
 11219                           ;Lab9p1.c: 746: INTCONbits.INT0IF = 0;
 11220                           
 11221                           ;incstack = 0
 11222  003D28  92F2               	bcf	intcon,1,c	;volatile
 11223                           
 11224                           ;Lab9p1.c: 747: INTCON3bits.INT1IF = 0;
 11225  003D2A  90F0               	bcf	intcon3,0,c	;volatile
 11226                           
 11227                           ;Lab9p1.c: 748: INTCON3bits.INT2IF =0;
 11228  003D2C  92F0               	bcf	intcon3,1,c	;volatile
 11229                           
 11230                           ;Lab9p1.c: 750: INTCON2bits.INTEDG0 = 0 ;
 11231  003D2E  9CF1               	bcf	intcon2,6,c	;volatile
 11232                           
 11233                           ;Lab9p1.c: 751: INTCON2bits.INTEDG1 = 0;
 11234  003D30  9AF1               	bcf	intcon2,5,c	;volatile
 11235                           
 11236                           ;Lab9p1.c: 752: INTCON2bits.INTEDG2 = 1;
 11237  003D32  88F1               	bsf	intcon2,4,c	;volatile
 11238                           
 11239                           ;Lab9p1.c: 754: INTCONbits.INT0IE = 1;
 11240  003D34  88F2               	bsf	intcon,4,c	;volatile
 11241                           
 11242                           ;Lab9p1.c: 755: INTCON3bits.INT1IE = 1;
 11243  003D36  86F0               	bsf	intcon3,3,c	;volatile
 11244                           
 11245                           ;Lab9p1.c: 756: INTCON3bits.INT2IE = 1;
 11246  003D38  88F0               	bsf	intcon3,4,c	;volatile
 11247                           
 11248                           ;Lab9p1.c: 758: INTCONbits.GIE = 1;
 11249  003D3A  8EF2               	bsf	intcon,7,c	;volatile
 11250  003D3C  0012               	return		;funcret
 11251  003D3E                     __end_of_Do_Init:
 11252                           	opt stack 0
 11253                           tblptru	equ	0xFF8
 11254                           tblptrh	equ	0xFF7
 11255                           tblptrl	equ	0xFF6
 11256                           tablat	equ	0xFF5
 11257                           prodh	equ	0xFF4
 11258                           prodl	equ	0xFF3
 11259                           intcon	equ	0xFF2
 11260                           intcon2	equ	0xFF1
 11261                           intcon3	equ	0xFF0
 11262                           postinc0	equ	0xFEE
 11263                           wreg	equ	0xFE8
 11264                           postdec1	equ	0xFE5
 11265                           fsr1l	equ	0xFE1
 11266                           indf2	equ	0xFDF
 11267                           postinc2	equ	0xFDE
 11268                           postdec2	equ	0xFDD
 11269                           fsr2h	equ	0xFDA
 11270                           fsr2l	equ	0xFD9
 11271                           status	equ	0xFD8
 11272                           
 11273 ;; *************** function _Set_NSLT *****************
 11274 ;; Defined at:
 11275 ;;		line 561 in file "Lab9p1.c"
 11276 ;; Parameters:    Size  Location     Type
 11277 ;;  color           1    wreg     unsigned char 
 11278 ;; Auto vars:     Size  Location     Type
 11279 ;;  color           1   67[COMRAM] unsigned char 
 11280 ;; Return value:  Size  Location     Type
 11281 ;;		None               void
 11282 ;; Registers used:
 11283 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11284 ;; Tracked objects:
 11285 ;;		On entry : 0/0
 11286 ;;		On exit  : 0/0
 11287 ;;		Unchanged: 0/0
 11288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11290 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11292 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11293 ;;Total ram usage:        1 bytes
 11294 ;; Hardware stack levels used:    1
 11295 ;; Hardware stack levels required when called:    9
 11296 ;; This function calls:
 11297 ;;		_update_LCD_color
 11298 ;; This function is called by:
 11299 ;;		_Day_Mode
 11300 ;;		_Night_Mode
 11301 ;; This function uses a non-reentrant model
 11302 ;;
 11303                           
 11304                           	psect	text46
 11305  0038E6                     __ptext46:
 11306                           	opt stack 0
 11307  0038E6                     _Set_NSLT:
 11308                           	opt stack 20
 11309                           
 11310                           ;incstack = 0
 11311                           ;Set_NSLT@color stored from wreg
 11312  0038E6  6E44               	movwf	Set_NSLT@color,c
 11313                           
 11314                           ;Lab9p1.c: 563: direction = 3;
 11315  0038E8  0E03               	movlw	3
 11316  0038EA  0100               	movlb	0	; () banked
 11317  0038EC  6F94               	movwf	_direction& (0+255),b
 11318                           
 11319                           ; BSR set to: 0
 11320                           ;Lab9p1.c: 564: update_LCD_color(direction, color);
 11321  0038EE  C044  F041         	movff	Set_NSLT@color,update_LCD_color@color
 11322  0038F2  0100               	movlb	0	; () banked
 11323  0038F4  5194               	movf	_direction& (0+255),w,b
 11324  0038F6  ECDB  F00A         	call	_update_LCD_color
 11325                           
 11326                           ;Lab9p1.c: 565: switch (color)
 11327  0038FA  D00A               	goto	l7162
 11328  0038FC                     l483:
 11329  0038FC  9881               	bcf	3969,4,c	;volatile
 11330  0038FE  D001               	goto	L14
 11331  003900                     l485:
 11332  003900  8881               	bsf	3969,4,c	;volatile
 11333  003902                     L14:
 11334  003902  9A81               	bcf	3969,5,c	;volatile
 11335  003904  D013               	goto	l488
 11336  003906                     l486:
 11337  003906  9881               	bcf	3969,4,c	;volatile
 11338  003908  D001               	goto	L15
 11339  00390A                     l487:
 11340  00390A  8881               	bsf	3969,4,c	;volatile
 11341  00390C                     L15:
 11342  00390C  8A81               	bsf	3969,5,c	;volatile
 11343                           
 11344                           ;Lab9p1.c: 571: }
 11345  00390E  D00E               	goto	l488
 11346  003910                     l7162:
 11347  003910  5044               	movf	Set_NSLT@color,w,c
 11348                           
 11349                           ; Switch size 1, requested type "space"
 11350                           ; Number of cases is 4, Range of values is 0 to 3
 11351                           ; switch strategies available:
 11352                           ; Name         Instructions Cycles
 11353                           ; simple_byte           13     7 (average)
 11354                           ;	Chosen strategy is simple_byte
 11355  003912  0A00               	xorlw	0	; case 0
 11356  003914  B4D8               	btfsc	status,2,c
 11357  003916  D7F2               	goto	l483
 11358  003918  0A01               	xorlw	1	; case 1
 11359  00391A  B4D8               	btfsc	status,2,c
 11360  00391C  D7F1               	goto	l485
 11361  00391E  0A03               	xorlw	3	; case 2
 11362  003920  B4D8               	btfsc	status,2,c
 11363  003922  D7F1               	goto	l486
 11364  003924  0A01               	xorlw	1	; case 3
 11365  003926  B4D8               	btfsc	status,2,c
 11366  003928  D7F0               	goto	l487
 11367  00392A  D000               	goto	l488
 11368  00392C                     l488:
 11369  00392C  0012               	return		;funcret
 11370  00392E                     __end_of_Set_NSLT:
 11371                           	opt stack 0
 11372                           tblptru	equ	0xFF8
 11373                           tblptrh	equ	0xFF7
 11374                           tblptrl	equ	0xFF6
 11375                           tablat	equ	0xFF5
 11376                           prodh	equ	0xFF4
 11377                           prodl	equ	0xFF3
 11378                           intcon	equ	0xFF2
 11379                           intcon2	equ	0xFF1
 11380                           intcon3	equ	0xFF0
 11381                           postinc0	equ	0xFEE
 11382                           wreg	equ	0xFE8
 11383                           postdec1	equ	0xFE5
 11384                           fsr1l	equ	0xFE1
 11385                           indf2	equ	0xFDF
 11386                           postinc2	equ	0xFDE
 11387                           postdec2	equ	0xFDD
 11388                           fsr2h	equ	0xFDA
 11389                           fsr2l	equ	0xFD9
 11390                           status	equ	0xFD8
 11391                           
 11392 ;; *************** function _Set_NS *****************
 11393 ;; Defined at:
 11394 ;;		line 548 in file "Lab9p1.c"
 11395 ;; Parameters:    Size  Location     Type
 11396 ;;  color           1    wreg     unsigned char 
 11397 ;; Auto vars:     Size  Location     Type
 11398 ;;  color           1   67[COMRAM] unsigned char 
 11399 ;; Return value:  Size  Location     Type
 11400 ;;		None               void
 11401 ;; Registers used:
 11402 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11403 ;; Tracked objects:
 11404 ;;		On entry : 0/0
 11405 ;;		On exit  : 0/0
 11406 ;;		Unchanged: 0/0
 11407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11409 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11411 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11412 ;;Total ram usage:        1 bytes
 11413 ;; Hardware stack levels used:    1
 11414 ;; Hardware stack levels required when called:    9
 11415 ;; This function calls:
 11416 ;;		_update_LCD_color
 11417 ;; This function is called by:
 11418 ;;		_Day_Mode
 11419 ;;		_Night_Mode
 11420 ;; This function uses a non-reentrant model
 11421 ;;
 11422                           
 11423                           	psect	text47
 11424  00392E                     __ptext47:
 11425                           	opt stack 0
 11426  00392E                     _Set_NS:
 11427                           	opt stack 20
 11428                           
 11429                           ;incstack = 0
 11430                           ;Set_NS@color stored from wreg
 11431  00392E  6E44               	movwf	Set_NS@color,c
 11432                           
 11433                           ;Lab9p1.c: 550: direction = 2;
 11434  003930  0E02               	movlw	2
 11435  003932  0100               	movlb	0	; () banked
 11436  003934  6F94               	movwf	_direction& (0+255),b
 11437                           
 11438                           ; BSR set to: 0
 11439                           ;Lab9p1.c: 551: update_LCD_color(direction, color);
 11440  003936  C044  F041         	movff	Set_NS@color,update_LCD_color@color
 11441  00393A  0100               	movlb	0	; () banked
 11442  00393C  5194               	movf	_direction& (0+255),w,b
 11443  00393E  ECDB  F00A         	call	_update_LCD_color
 11444                           
 11445                           ;Lab9p1.c: 552: switch (color)
 11446  003942  D00A               	goto	l7186
 11447  003944                     l474:
 11448  003944  9280               	bcf	3968,1,c	;volatile
 11449  003946  D001               	goto	L16
 11450  003948                     l476:
 11451  003948  8280               	bsf	3968,1,c	;volatile
 11452  00394A                     L16:
 11453  00394A  9480               	bcf	3968,2,c	;volatile
 11454  00394C  D013               	goto	l479
 11455  00394E                     l477:
 11456  00394E  9280               	bcf	3968,1,c	;volatile
 11457  003950  D001               	goto	L17
 11458  003952                     l478:
 11459  003952  8280               	bsf	3968,1,c	;volatile
 11460  003954                     L17:
 11461  003954  8480               	bsf	3968,2,c	;volatile
 11462                           
 11463                           ;Lab9p1.c: 558: }
 11464  003956  D00E               	goto	l479
 11465  003958                     l7186:
 11466  003958  5044               	movf	Set_NS@color,w,c
 11467                           
 11468                           ; Switch size 1, requested type "space"
 11469                           ; Number of cases is 4, Range of values is 0 to 3
 11470                           ; switch strategies available:
 11471                           ; Name         Instructions Cycles
 11472                           ; simple_byte           13     7 (average)
 11473                           ;	Chosen strategy is simple_byte
 11474  00395A  0A00               	xorlw	0	; case 0
 11475  00395C  B4D8               	btfsc	status,2,c
 11476  00395E  D7F2               	goto	l474
 11477  003960  0A01               	xorlw	1	; case 1
 11478  003962  B4D8               	btfsc	status,2,c
 11479  003964  D7F1               	goto	l476
 11480  003966  0A03               	xorlw	3	; case 2
 11481  003968  B4D8               	btfsc	status,2,c
 11482  00396A  D7F1               	goto	l477
 11483  00396C  0A01               	xorlw	1	; case 3
 11484  00396E  B4D8               	btfsc	status,2,c
 11485  003970  D7F0               	goto	l478
 11486  003972  D000               	goto	l479
 11487  003974                     l479:
 11488  003974  0012               	return		;funcret
 11489  003976                     __end_of_Set_NS:
 11490                           	opt stack 0
 11491                           tblptru	equ	0xFF8
 11492                           tblptrh	equ	0xFF7
 11493                           tblptrl	equ	0xFF6
 11494                           tablat	equ	0xFF5
 11495                           prodh	equ	0xFF4
 11496                           prodl	equ	0xFF3
 11497                           intcon	equ	0xFF2
 11498                           intcon2	equ	0xFF1
 11499                           intcon3	equ	0xFF0
 11500                           postinc0	equ	0xFEE
 11501                           wreg	equ	0xFE8
 11502                           postdec1	equ	0xFE5
 11503                           fsr1l	equ	0xFE1
 11504                           indf2	equ	0xFDF
 11505                           postinc2	equ	0xFDE
 11506                           postdec2	equ	0xFDD
 11507                           fsr2h	equ	0xFDA
 11508                           fsr2l	equ	0xFD9
 11509                           status	equ	0xFD8
 11510                           
 11511 ;; *************** function _Set_EWLT *****************
 11512 ;; Defined at:
 11513 ;;		line 587 in file "Lab9p1.c"
 11514 ;; Parameters:    Size  Location     Type
 11515 ;;  color           1    wreg     unsigned char 
 11516 ;; Auto vars:     Size  Location     Type
 11517 ;;  color           1   67[COMRAM] unsigned char 
 11518 ;; Return value:  Size  Location     Type
 11519 ;;		None               void
 11520 ;; Registers used:
 11521 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11522 ;; Tracked objects:
 11523 ;;		On entry : 0/0
 11524 ;;		On exit  : 0/0
 11525 ;;		Unchanged: 0/0
 11526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11528 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11530 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11531 ;;Total ram usage:        1 bytes
 11532 ;; Hardware stack levels used:    1
 11533 ;; Hardware stack levels required when called:    9
 11534 ;; This function calls:
 11535 ;;		_update_LCD_color
 11536 ;; This function is called by:
 11537 ;;		_Day_Mode
 11538 ;;		_Night_Mode
 11539 ;; This function uses a non-reentrant model
 11540 ;;
 11541                           
 11542                           	psect	text48
 11543  003976                     __ptext48:
 11544                           	opt stack 0
 11545  003976                     _Set_EWLT:
 11546                           	opt stack 20
 11547                           
 11548                           ;incstack = 0
 11549                           ;Set_EWLT@color stored from wreg
 11550  003976  6E44               	movwf	Set_EWLT@color,c
 11551                           
 11552                           ;Lab9p1.c: 589: direction = 1;
 11553  003978  0E01               	movlw	1
 11554  00397A  0100               	movlb	0	; () banked
 11555  00397C  6F94               	movwf	_direction& (0+255),b
 11556                           
 11557                           ; BSR set to: 0
 11558                           ;Lab9p1.c: 590: update_LCD_color(direction, color);
 11559  00397E  C044  F041         	movff	Set_EWLT@color,update_LCD_color@color
 11560  003982  0100               	movlb	0	; () banked
 11561  003984  5194               	movf	_direction& (0+255),w,b
 11562  003986  ECDB  F00A         	call	_update_LCD_color
 11563                           
 11564                           ;Lab9p1.c: 591: switch (color)
 11565  00398A  D00A               	goto	l7178
 11566  00398C                     l501:
 11567  00398C  9284               	bcf	3972,1,c	;volatile
 11568  00398E  D001               	goto	L18
 11569  003990                     l503:
 11570  003990  8284               	bsf	3972,1,c	;volatile
 11571  003992                     L18:
 11572  003992  9484               	bcf	3972,2,c	;volatile
 11573  003994  D013               	goto	l506
 11574  003996                     l504:
 11575  003996  9284               	bcf	3972,1,c	;volatile
 11576  003998  D001               	goto	L19
 11577  00399A                     l505:
 11578  00399A  8284               	bsf	3972,1,c	;volatile
 11579  00399C                     L19:
 11580  00399C  8484               	bsf	3972,2,c	;volatile
 11581                           
 11582                           ;Lab9p1.c: 597: }
 11583  00399E  D00E               	goto	l506
 11584  0039A0                     l7178:
 11585  0039A0  5044               	movf	Set_EWLT@color,w,c
 11586                           
 11587                           ; Switch size 1, requested type "space"
 11588                           ; Number of cases is 4, Range of values is 0 to 3
 11589                           ; switch strategies available:
 11590                           ; Name         Instructions Cycles
 11591                           ; simple_byte           13     7 (average)
 11592                           ;	Chosen strategy is simple_byte
 11593  0039A2  0A00               	xorlw	0	; case 0
 11594  0039A4  B4D8               	btfsc	status,2,c
 11595  0039A6  D7F2               	goto	l501
 11596  0039A8  0A01               	xorlw	1	; case 1
 11597  0039AA  B4D8               	btfsc	status,2,c
 11598  0039AC  D7F1               	goto	l503
 11599  0039AE  0A03               	xorlw	3	; case 2
 11600  0039B0  B4D8               	btfsc	status,2,c
 11601  0039B2  D7F1               	goto	l504
 11602  0039B4  0A01               	xorlw	1	; case 3
 11603  0039B6  B4D8               	btfsc	status,2,c
 11604  0039B8  D7F0               	goto	l505
 11605  0039BA  D000               	goto	l506
 11606  0039BC                     l506:
 11607  0039BC  0012               	return		;funcret
 11608  0039BE                     __end_of_Set_EWLT:
 11609                           	opt stack 0
 11610                           tblptru	equ	0xFF8
 11611                           tblptrh	equ	0xFF7
 11612                           tblptrl	equ	0xFF6
 11613                           tablat	equ	0xFF5
 11614                           prodh	equ	0xFF4
 11615                           prodl	equ	0xFF3
 11616                           intcon	equ	0xFF2
 11617                           intcon2	equ	0xFF1
 11618                           intcon3	equ	0xFF0
 11619                           postinc0	equ	0xFEE
 11620                           wreg	equ	0xFE8
 11621                           postdec1	equ	0xFE5
 11622                           fsr1l	equ	0xFE1
 11623                           indf2	equ	0xFDF
 11624                           postinc2	equ	0xFDE
 11625                           postdec2	equ	0xFDD
 11626                           fsr2h	equ	0xFDA
 11627                           fsr2l	equ	0xFD9
 11628                           status	equ	0xFD8
 11629                           
 11630 ;; *************** function _Set_EW *****************
 11631 ;; Defined at:
 11632 ;;		line 574 in file "Lab9p1.c"
 11633 ;; Parameters:    Size  Location     Type
 11634 ;;  color           1    wreg     unsigned char 
 11635 ;; Auto vars:     Size  Location     Type
 11636 ;;  color           1   67[COMRAM] unsigned char 
 11637 ;; Return value:  Size  Location     Type
 11638 ;;		None               void
 11639 ;; Registers used:
 11640 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11641 ;; Tracked objects:
 11642 ;;		On entry : 0/0
 11643 ;;		On exit  : 0/0
 11644 ;;		Unchanged: 0/0
 11645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11647 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11649 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11650 ;;Total ram usage:        1 bytes
 11651 ;; Hardware stack levels used:    1
 11652 ;; Hardware stack levels required when called:    9
 11653 ;; This function calls:
 11654 ;;		_update_LCD_color
 11655 ;; This function is called by:
 11656 ;;		_Day_Mode
 11657 ;;		_Night_Mode
 11658 ;; This function uses a non-reentrant model
 11659 ;;
 11660                           
 11661                           	psect	text49
 11662  0039BE                     __ptext49:
 11663                           	opt stack 0
 11664  0039BE                     _Set_EW:
 11665                           	opt stack 20
 11666                           
 11667                           ;incstack = 0
 11668                           ;Set_EW@color stored from wreg
 11669  0039BE  6E44               	movwf	Set_EW@color,c
 11670                           
 11671                           ;Lab9p1.c: 576: direction = 0;
 11672  0039C0  0E00               	movlw	0
 11673  0039C2  0100               	movlb	0	; () banked
 11674  0039C4  6F94               	movwf	_direction& (0+255),b
 11675                           
 11676                           ; BSR set to: 0
 11677                           ;Lab9p1.c: 577: update_LCD_color(direction, color);
 11678  0039C6  C044  F041         	movff	Set_EW@color,update_LCD_color@color
 11679  0039CA  0100               	movlb	0	; () banked
 11680  0039CC  5194               	movf	_direction& (0+255),w,b
 11681  0039CE  ECDB  F00A         	call	_update_LCD_color
 11682                           
 11683                           ;Lab9p1.c: 578: switch (color)
 11684  0039D2  D00A               	goto	l7170
 11685  0039D4                     l492:
 11686  0039D4  9A80               	bcf	3968,5,c	;volatile
 11687  0039D6  D001               	goto	L20
 11688  0039D8                     l494:
 11689  0039D8  8A80               	bsf	3968,5,c	;volatile
 11690  0039DA                     L20:
 11691  0039DA  9C81               	bcf	3969,6,c	;volatile
 11692  0039DC  D013               	goto	l497
 11693  0039DE                     l495:
 11694  0039DE  9A80               	bcf	3968,5,c	;volatile
 11695  0039E0  D001               	goto	L21
 11696  0039E2                     l496:
 11697  0039E2  8A80               	bsf	3968,5,c	;volatile
 11698  0039E4                     L21:
 11699  0039E4  8C81               	bsf	3969,6,c	;volatile
 11700                           
 11701                           ;Lab9p1.c: 584: }
 11702  0039E6  D00E               	goto	l497
 11703  0039E8                     l7170:
 11704  0039E8  5044               	movf	Set_EW@color,w,c
 11705                           
 11706                           ; Switch size 1, requested type "space"
 11707                           ; Number of cases is 4, Range of values is 0 to 3
 11708                           ; switch strategies available:
 11709                           ; Name         Instructions Cycles
 11710                           ; simple_byte           13     7 (average)
 11711                           ;	Chosen strategy is simple_byte
 11712  0039EA  0A00               	xorlw	0	; case 0
 11713  0039EC  B4D8               	btfsc	status,2,c
 11714  0039EE  D7F2               	goto	l492
 11715  0039F0  0A01               	xorlw	1	; case 1
 11716  0039F2  B4D8               	btfsc	status,2,c
 11717  0039F4  D7F1               	goto	l494
 11718  0039F6  0A03               	xorlw	3	; case 2
 11719  0039F8  B4D8               	btfsc	status,2,c
 11720  0039FA  D7F1               	goto	l495
 11721  0039FC  0A01               	xorlw	1	; case 3
 11722  0039FE  B4D8               	btfsc	status,2,c
 11723  003A00  D7F0               	goto	l496
 11724  003A02  D000               	goto	l497
 11725  003A04                     l497:
 11726  003A04  0012               	return		;funcret
 11727  003A06                     __end_of_Set_EW:
 11728                           	opt stack 0
 11729                           tblptru	equ	0xFF8
 11730                           tblptrh	equ	0xFF7
 11731                           tblptrl	equ	0xFF6
 11732                           tablat	equ	0xFF5
 11733                           prodh	equ	0xFF4
 11734                           prodl	equ	0xFF3
 11735                           intcon	equ	0xFF2
 11736                           intcon2	equ	0xFF1
 11737                           intcon3	equ	0xFF0
 11738                           postinc0	equ	0xFEE
 11739                           wreg	equ	0xFE8
 11740                           postdec1	equ	0xFE5
 11741                           fsr1l	equ	0xFE1
 11742                           indf2	equ	0xFDF
 11743                           postinc2	equ	0xFDE
 11744                           postdec2	equ	0xFDD
 11745                           fsr2h	equ	0xFDA
 11746                           fsr2l	equ	0xFD9
 11747                           status	equ	0xFD8
 11748                           
 11749 ;; *************** function _update_LCD_color *****************
 11750 ;; Defined at:
 11751 ;;		line 600 in file "Lab9p1.c"
 11752 ;; Parameters:    Size  Location     Type
 11753 ;;  direction       1    wreg     unsigned char 
 11754 ;;  color           1   64[COMRAM] unsigned char 
 11755 ;; Auto vars:     Size  Location     Type
 11756 ;;  direction       1   65[COMRAM] unsigned char 
 11757 ;;  Circle_Y        1   66[COMRAM] unsigned char 
 11758 ;; Return value:  Size  Location     Type
 11759 ;;		None               void
 11760 ;; Registers used:
 11761 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11762 ;; Tracked objects:
 11763 ;;		On entry : 0/0
 11764 ;;		On exit  : 0/0
 11765 ;;		Unchanged: 0/0
 11766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11767 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11768 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11770 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11771 ;;Total ram usage:        3 bytes
 11772 ;; Hardware stack levels used:    1
 11773 ;; Hardware stack levels required when called:    8
 11774 ;; This function calls:
 11775 ;;		_drawCircle
 11776 ;;		_fillCircle
 11777 ;; This function is called by:
 11778 ;;		_Set_NS
 11779 ;;		_Set_NSLT
 11780 ;;		_Set_EW
 11781 ;;		_Set_EWLT
 11782 ;; This function uses a non-reentrant model
 11783 ;;
 11784                           
 11785                           	psect	text50
 11786  0015B6                     __ptext50:
 11787                           	opt stack 0
 11788  0015B6                     _update_LCD_color:
 11789                           	opt stack 20
 11790                           
 11791                           ;incstack = 0
 11792                           ;update_LCD_color@direction stored from wreg
 11793  0015B6  6E42               	movwf	update_LCD_color@direction,c
 11794                           
 11795                           ;Lab9p1.c: 602: char Circle_Y;
 11796                           ;Lab9p1.c: 603: Circle_Y = 20 + 15 + direction * 30;
 11797  0015B8  5042               	movf	update_LCD_color@direction,w,c
 11798  0015BA  0D1E               	mullw	30
 11799  0015BC  50F3               	movf	prodl,w,c
 11800  0015BE  0F23               	addlw	35
 11801  0015C0  6E43               	movwf	update_LCD_color@Circle_Y,c
 11802                           
 11803                           ;Lab9p1.c: 605: if (color == 0)
 11804  0015C2  5041               	movf	update_LCD_color@color,w,c
 11805  0015C4  A4D8               	btfss	status,2,c
 11806  0015C6  D067               	goto	l7068
 11807                           
 11808                           ;Lab9p1.c: 606: {
 11809                           ;Lab9p1.c: 607: fillCircle(40, Circle_Y, 7, 0x0000);
 11810  0015C8  0E00               	movlw	0
 11811  0015CA  6E3A               	movwf	fillCircle@x0+1,c
 11812  0015CC  0E28               	movlw	40
 11813  0015CE  6E39               	movwf	fillCircle@x0,c
 11814  0015D0  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11815  0015D4  6A3C               	clrf	fillCircle@y0+1,c
 11816  0015D6  0E00               	movlw	0
 11817  0015D8  6E3E               	movwf	fillCircle@r+1,c
 11818  0015DA  0E07               	movlw	7
 11819  0015DC  6E3D               	movwf	fillCircle@r,c
 11820  0015DE  0E00               	movlw	0
 11821  0015E0  6E40               	movwf	fillCircle@color+1,c
 11822  0015E2  0E00               	movlw	0
 11823  0015E4  6E3F               	movwf	fillCircle@color,c
 11824  0015E6  ECFE  F01B         	call	_fillCircle	;wreg free
 11825                           
 11826                           ;Lab9p1.c: 608: fillCircle(60, Circle_Y, 7, 0x0000);
 11827  0015EA  0E00               	movlw	0
 11828  0015EC  6E3A               	movwf	fillCircle@x0+1,c
 11829  0015EE  0E3C               	movlw	60
 11830  0015F0  6E39               	movwf	fillCircle@x0,c
 11831  0015F2  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11832  0015F6  6A3C               	clrf	fillCircle@y0+1,c
 11833  0015F8  0E00               	movlw	0
 11834  0015FA  6E3E               	movwf	fillCircle@r+1,c
 11835  0015FC  0E07               	movlw	7
 11836  0015FE  6E3D               	movwf	fillCircle@r,c
 11837  001600  0E00               	movlw	0
 11838  001602  6E40               	movwf	fillCircle@color+1,c
 11839  001604  0E00               	movlw	0
 11840  001606  6E3F               	movwf	fillCircle@color,c
 11841  001608  ECFE  F01B         	call	_fillCircle	;wreg free
 11842                           
 11843                           ;Lab9p1.c: 609: fillCircle(80, Circle_Y, 7, 0x0000);
 11844  00160C  0E00               	movlw	0
 11845  00160E  6E3A               	movwf	fillCircle@x0+1,c
 11846  001610  0E50               	movlw	80
 11847  001612  6E39               	movwf	fillCircle@x0,c
 11848  001614  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11849  001618  6A3C               	clrf	fillCircle@y0+1,c
 11850  00161A  0E00               	movlw	0
 11851  00161C  6E3E               	movwf	fillCircle@r+1,c
 11852  00161E  0E07               	movlw	7
 11853  001620  6E3D               	movwf	fillCircle@r,c
 11854  001622  0E00               	movlw	0
 11855  001624  6E40               	movwf	fillCircle@color+1,c
 11856  001626  0E00               	movlw	0
 11857  001628  6E3F               	movwf	fillCircle@color,c
 11858  00162A  ECFE  F01B         	call	_fillCircle	;wreg free
 11859                           
 11860                           ;Lab9p1.c: 610: drawCircle(40, Circle_Y, 7, 0xF800);
 11861  00162E  0E00               	movlw	0
 11862  001630  6E1B               	movwf	drawCircle@x0+1,c
 11863  001632  0E28               	movlw	40
 11864  001634  6E1A               	movwf	drawCircle@x0,c
 11865  001636  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11866  00163A  6A1D               	clrf	drawCircle@y0+1,c
 11867  00163C  0E00               	movlw	0
 11868  00163E  6E1F               	movwf	drawCircle@r+1,c
 11869  001640  0E07               	movlw	7
 11870  001642  6E1E               	movwf	drawCircle@r,c
 11871  001644  0EF8               	movlw	248
 11872  001646  6E21               	movwf	drawCircle@color+1,c
 11873  001648  0E00               	movlw	0
 11874  00164A  6E20               	movwf	drawCircle@color,c
 11875  00164C  EC88  F00F         	call	_drawCircle	;wreg free
 11876                           
 11877                           ;Lab9p1.c: 611: drawCircle(60, Circle_Y, 7, 0xFFE0);
 11878  001650  0E00               	movlw	0
 11879  001652  6E1B               	movwf	drawCircle@x0+1,c
 11880  001654  0E3C               	movlw	60
 11881  001656  6E1A               	movwf	drawCircle@x0,c
 11882  001658  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11883  00165C  6A1D               	clrf	drawCircle@y0+1,c
 11884  00165E  0E00               	movlw	0
 11885  001660  6E1F               	movwf	drawCircle@r+1,c
 11886  001662  0E07               	movlw	7
 11887  001664  6E1E               	movwf	drawCircle@r,c
 11888  001666  0EFF               	movlw	255
 11889  001668  6E21               	movwf	drawCircle@color+1,c
 11890  00166A  0EE0               	movlw	224
 11891  00166C  6E20               	movwf	drawCircle@color,c
 11892  00166E  EC88  F00F         	call	_drawCircle	;wreg free
 11893                           
 11894                           ;Lab9p1.c: 612: drawCircle(80, Circle_Y, 7, 0x07E0);
 11895  001672  0E00               	movlw	0
 11896  001674  6E1B               	movwf	drawCircle@x0+1,c
 11897  001676  0E50               	movlw	80
 11898  001678  6E1A               	movwf	drawCircle@x0,c
 11899  00167A  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11900  00167E  6A1D               	clrf	drawCircle@y0+1,c
 11901  001680  0E00               	movlw	0
 11902  001682  6E1F               	movwf	drawCircle@r+1,c
 11903  001684  0E07               	movlw	7
 11904  001686  6E1E               	movwf	drawCircle@r,c
 11905  001688  0E07               	movlw	7
 11906  00168A  6E21               	movwf	drawCircle@color+1,c
 11907  00168C  0EE0               	movlw	224
 11908  00168E  6E20               	movwf	drawCircle@color,c
 11909  001690  EC88  F00F         	call	_drawCircle	;wreg free
 11910  001694  D000               	goto	l7068
 11911  001696                     l7068:
 11912                           
 11913                           ;Lab9p1.c: 613: }
 11914                           ;Lab9p1.c: 615: if (color == 1)
 11915  001696  0441               	decf	update_LCD_color@color,w,c
 11916  001698  A4D8               	btfss	status,2,c
 11917  00169A  D067               	goto	l7072
 11918                           
 11919                           ;Lab9p1.c: 616: {
 11920                           ;Lab9p1.c: 617: fillCircle(40, Circle_Y, 7, 0xF800);
 11921  00169C  0E00               	movlw	0
 11922  00169E  6E3A               	movwf	fillCircle@x0+1,c
 11923  0016A0  0E28               	movlw	40
 11924  0016A2  6E39               	movwf	fillCircle@x0,c
 11925  0016A4  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11926  0016A8  6A3C               	clrf	fillCircle@y0+1,c
 11927  0016AA  0E00               	movlw	0
 11928  0016AC  6E3E               	movwf	fillCircle@r+1,c
 11929  0016AE  0E07               	movlw	7
 11930  0016B0  6E3D               	movwf	fillCircle@r,c
 11931  0016B2  0EF8               	movlw	248
 11932  0016B4  6E40               	movwf	fillCircle@color+1,c
 11933  0016B6  0E00               	movlw	0
 11934  0016B8  6E3F               	movwf	fillCircle@color,c
 11935  0016BA  ECFE  F01B         	call	_fillCircle	;wreg free
 11936                           
 11937                           ;Lab9p1.c: 618: fillCircle(60, Circle_Y, 7, 0x0000);
 11938  0016BE  0E00               	movlw	0
 11939  0016C0  6E3A               	movwf	fillCircle@x0+1,c
 11940  0016C2  0E3C               	movlw	60
 11941  0016C4  6E39               	movwf	fillCircle@x0,c
 11942  0016C6  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11943  0016CA  6A3C               	clrf	fillCircle@y0+1,c
 11944  0016CC  0E00               	movlw	0
 11945  0016CE  6E3E               	movwf	fillCircle@r+1,c
 11946  0016D0  0E07               	movlw	7
 11947  0016D2  6E3D               	movwf	fillCircle@r,c
 11948  0016D4  0E00               	movlw	0
 11949  0016D6  6E40               	movwf	fillCircle@color+1,c
 11950  0016D8  0E00               	movlw	0
 11951  0016DA  6E3F               	movwf	fillCircle@color,c
 11952  0016DC  ECFE  F01B         	call	_fillCircle	;wreg free
 11953                           
 11954                           ;Lab9p1.c: 619: fillCircle(80, Circle_Y, 7, 0x0000);
 11955  0016E0  0E00               	movlw	0
 11956  0016E2  6E3A               	movwf	fillCircle@x0+1,c
 11957  0016E4  0E50               	movlw	80
 11958  0016E6  6E39               	movwf	fillCircle@x0,c
 11959  0016E8  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11960  0016EC  6A3C               	clrf	fillCircle@y0+1,c
 11961  0016EE  0E00               	movlw	0
 11962  0016F0  6E3E               	movwf	fillCircle@r+1,c
 11963  0016F2  0E07               	movlw	7
 11964  0016F4  6E3D               	movwf	fillCircle@r,c
 11965  0016F6  0E00               	movlw	0
 11966  0016F8  6E40               	movwf	fillCircle@color+1,c
 11967  0016FA  0E00               	movlw	0
 11968  0016FC  6E3F               	movwf	fillCircle@color,c
 11969  0016FE  ECFE  F01B         	call	_fillCircle	;wreg free
 11970                           
 11971                           ;Lab9p1.c: 620: drawCircle(40, Circle_Y, 7, 0xF800);
 11972  001702  0E00               	movlw	0
 11973  001704  6E1B               	movwf	drawCircle@x0+1,c
 11974  001706  0E28               	movlw	40
 11975  001708  6E1A               	movwf	drawCircle@x0,c
 11976  00170A  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11977  00170E  6A1D               	clrf	drawCircle@y0+1,c
 11978  001710  0E00               	movlw	0
 11979  001712  6E1F               	movwf	drawCircle@r+1,c
 11980  001714  0E07               	movlw	7
 11981  001716  6E1E               	movwf	drawCircle@r,c
 11982  001718  0EF8               	movlw	248
 11983  00171A  6E21               	movwf	drawCircle@color+1,c
 11984  00171C  0E00               	movlw	0
 11985  00171E  6E20               	movwf	drawCircle@color,c
 11986  001720  EC88  F00F         	call	_drawCircle	;wreg free
 11987                           
 11988                           ;Lab9p1.c: 621: drawCircle(60, Circle_Y, 7, 0xFFE0);
 11989  001724  0E00               	movlw	0
 11990  001726  6E1B               	movwf	drawCircle@x0+1,c
 11991  001728  0E3C               	movlw	60
 11992  00172A  6E1A               	movwf	drawCircle@x0,c
 11993  00172C  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11994  001730  6A1D               	clrf	drawCircle@y0+1,c
 11995  001732  0E00               	movlw	0
 11996  001734  6E1F               	movwf	drawCircle@r+1,c
 11997  001736  0E07               	movlw	7
 11998  001738  6E1E               	movwf	drawCircle@r,c
 11999  00173A  0EFF               	movlw	255
 12000  00173C  6E21               	movwf	drawCircle@color+1,c
 12001  00173E  0EE0               	movlw	224
 12002  001740  6E20               	movwf	drawCircle@color,c
 12003  001742  EC88  F00F         	call	_drawCircle	;wreg free
 12004                           
 12005                           ;Lab9p1.c: 622: drawCircle(80, Circle_Y, 7, 0x07E0);
 12006  001746  0E00               	movlw	0
 12007  001748  6E1B               	movwf	drawCircle@x0+1,c
 12008  00174A  0E50               	movlw	80
 12009  00174C  6E1A               	movwf	drawCircle@x0,c
 12010  00174E  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12011  001752  6A1D               	clrf	drawCircle@y0+1,c
 12012  001754  0E00               	movlw	0
 12013  001756  6E1F               	movwf	drawCircle@r+1,c
 12014  001758  0E07               	movlw	7
 12015  00175A  6E1E               	movwf	drawCircle@r,c
 12016  00175C  0E07               	movlw	7
 12017  00175E  6E21               	movwf	drawCircle@color+1,c
 12018  001760  0EE0               	movlw	224
 12019  001762  6E20               	movwf	drawCircle@color,c
 12020  001764  EC88  F00F         	call	_drawCircle	;wreg free
 12021  001768  D000               	goto	l7072
 12022  00176A                     l7072:
 12023                           
 12024                           ;Lab9p1.c: 623: }
 12025                           ;Lab9p1.c: 625: if (color == 2)
 12026  00176A  0E02               	movlw	2
 12027  00176C  1841               	xorwf	update_LCD_color@color,w,c
 12028  00176E  A4D8               	btfss	status,2,c
 12029  001770  D067               	goto	l7076
 12030                           
 12031                           ;Lab9p1.c: 626: {
 12032                           ;Lab9p1.c: 627: fillCircle(40, Circle_Y, 7, 0x0000);
 12033  001772  0E00               	movlw	0
 12034  001774  6E3A               	movwf	fillCircle@x0+1,c
 12035  001776  0E28               	movlw	40
 12036  001778  6E39               	movwf	fillCircle@x0,c
 12037  00177A  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12038  00177E  6A3C               	clrf	fillCircle@y0+1,c
 12039  001780  0E00               	movlw	0
 12040  001782  6E3E               	movwf	fillCircle@r+1,c
 12041  001784  0E07               	movlw	7
 12042  001786  6E3D               	movwf	fillCircle@r,c
 12043  001788  0E00               	movlw	0
 12044  00178A  6E40               	movwf	fillCircle@color+1,c
 12045  00178C  0E00               	movlw	0
 12046  00178E  6E3F               	movwf	fillCircle@color,c
 12047  001790  ECFE  F01B         	call	_fillCircle	;wreg free
 12048                           
 12049                           ;Lab9p1.c: 628: fillCircle(60, Circle_Y, 7, 0x0000);
 12050  001794  0E00               	movlw	0
 12051  001796  6E3A               	movwf	fillCircle@x0+1,c
 12052  001798  0E3C               	movlw	60
 12053  00179A  6E39               	movwf	fillCircle@x0,c
 12054  00179C  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12055  0017A0  6A3C               	clrf	fillCircle@y0+1,c
 12056  0017A2  0E00               	movlw	0
 12057  0017A4  6E3E               	movwf	fillCircle@r+1,c
 12058  0017A6  0E07               	movlw	7
 12059  0017A8  6E3D               	movwf	fillCircle@r,c
 12060  0017AA  0E00               	movlw	0
 12061  0017AC  6E40               	movwf	fillCircle@color+1,c
 12062  0017AE  0E00               	movlw	0
 12063  0017B0  6E3F               	movwf	fillCircle@color,c
 12064  0017B2  ECFE  F01B         	call	_fillCircle	;wreg free
 12065                           
 12066                           ;Lab9p1.c: 629: fillCircle(80, Circle_Y, 7, 0x07E0);
 12067  0017B6  0E00               	movlw	0
 12068  0017B8  6E3A               	movwf	fillCircle@x0+1,c
 12069  0017BA  0E50               	movlw	80
 12070  0017BC  6E39               	movwf	fillCircle@x0,c
 12071  0017BE  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12072  0017C2  6A3C               	clrf	fillCircle@y0+1,c
 12073  0017C4  0E00               	movlw	0
 12074  0017C6  6E3E               	movwf	fillCircle@r+1,c
 12075  0017C8  0E07               	movlw	7
 12076  0017CA  6E3D               	movwf	fillCircle@r,c
 12077  0017CC  0E07               	movlw	7
 12078  0017CE  6E40               	movwf	fillCircle@color+1,c
 12079  0017D0  0EE0               	movlw	224
 12080  0017D2  6E3F               	movwf	fillCircle@color,c
 12081  0017D4  ECFE  F01B         	call	_fillCircle	;wreg free
 12082                           
 12083                           ;Lab9p1.c: 630: drawCircle(40, Circle_Y, 7, 0xF800);
 12084  0017D8  0E00               	movlw	0
 12085  0017DA  6E1B               	movwf	drawCircle@x0+1,c
 12086  0017DC  0E28               	movlw	40
 12087  0017DE  6E1A               	movwf	drawCircle@x0,c
 12088  0017E0  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12089  0017E4  6A1D               	clrf	drawCircle@y0+1,c
 12090  0017E6  0E00               	movlw	0
 12091  0017E8  6E1F               	movwf	drawCircle@r+1,c
 12092  0017EA  0E07               	movlw	7
 12093  0017EC  6E1E               	movwf	drawCircle@r,c
 12094  0017EE  0EF8               	movlw	248
 12095  0017F0  6E21               	movwf	drawCircle@color+1,c
 12096  0017F2  0E00               	movlw	0
 12097  0017F4  6E20               	movwf	drawCircle@color,c
 12098  0017F6  EC88  F00F         	call	_drawCircle	;wreg free
 12099                           
 12100                           ;Lab9p1.c: 631: drawCircle(60, Circle_Y, 7, 0xFFE0);
 12101  0017FA  0E00               	movlw	0
 12102  0017FC  6E1B               	movwf	drawCircle@x0+1,c
 12103  0017FE  0E3C               	movlw	60
 12104  001800  6E1A               	movwf	drawCircle@x0,c
 12105  001802  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12106  001806  6A1D               	clrf	drawCircle@y0+1,c
 12107  001808  0E00               	movlw	0
 12108  00180A  6E1F               	movwf	drawCircle@r+1,c
 12109  00180C  0E07               	movlw	7
 12110  00180E  6E1E               	movwf	drawCircle@r,c
 12111  001810  0EFF               	movlw	255
 12112  001812  6E21               	movwf	drawCircle@color+1,c
 12113  001814  0EE0               	movlw	224
 12114  001816  6E20               	movwf	drawCircle@color,c
 12115  001818  EC88  F00F         	call	_drawCircle	;wreg free
 12116                           
 12117                           ;Lab9p1.c: 632: drawCircle(80, Circle_Y, 7, 0x07E0);
 12118  00181C  0E00               	movlw	0
 12119  00181E  6E1B               	movwf	drawCircle@x0+1,c
 12120  001820  0E50               	movlw	80
 12121  001822  6E1A               	movwf	drawCircle@x0,c
 12122  001824  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12123  001828  6A1D               	clrf	drawCircle@y0+1,c
 12124  00182A  0E00               	movlw	0
 12125  00182C  6E1F               	movwf	drawCircle@r+1,c
 12126  00182E  0E07               	movlw	7
 12127  001830  6E1E               	movwf	drawCircle@r,c
 12128  001832  0E07               	movlw	7
 12129  001834  6E21               	movwf	drawCircle@color+1,c
 12130  001836  0EE0               	movlw	224
 12131  001838  6E20               	movwf	drawCircle@color,c
 12132  00183A  EC88  F00F         	call	_drawCircle	;wreg free
 12133  00183E  D000               	goto	l7076
 12134  001840                     l7076:
 12135                           
 12136                           ;Lab9p1.c: 633: }
 12137                           ;Lab9p1.c: 635: if (color == 3)
 12138  001840  0E03               	movlw	3
 12139  001842  1841               	xorwf	update_LCD_color@color,w,c
 12140  001844  A4D8               	btfss	status,2,c
 12141  001846  D067               	goto	l513
 12142                           
 12143                           ;Lab9p1.c: 636: {
 12144                           ;Lab9p1.c: 637: fillCircle(40, Circle_Y, 7, 0x0000);
 12145  001848  0E00               	movlw	0
 12146  00184A  6E3A               	movwf	fillCircle@x0+1,c
 12147  00184C  0E28               	movlw	40
 12148  00184E  6E39               	movwf	fillCircle@x0,c
 12149  001850  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12150  001854  6A3C               	clrf	fillCircle@y0+1,c
 12151  001856  0E00               	movlw	0
 12152  001858  6E3E               	movwf	fillCircle@r+1,c
 12153  00185A  0E07               	movlw	7
 12154  00185C  6E3D               	movwf	fillCircle@r,c
 12155  00185E  0E00               	movlw	0
 12156  001860  6E40               	movwf	fillCircle@color+1,c
 12157  001862  0E00               	movlw	0
 12158  001864  6E3F               	movwf	fillCircle@color,c
 12159  001866  ECFE  F01B         	call	_fillCircle	;wreg free
 12160                           
 12161                           ;Lab9p1.c: 638: fillCircle(60, Circle_Y, 7, 0xFFE0);
 12162  00186A  0E00               	movlw	0
 12163  00186C  6E3A               	movwf	fillCircle@x0+1,c
 12164  00186E  0E3C               	movlw	60
 12165  001870  6E39               	movwf	fillCircle@x0,c
 12166  001872  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12167  001876  6A3C               	clrf	fillCircle@y0+1,c
 12168  001878  0E00               	movlw	0
 12169  00187A  6E3E               	movwf	fillCircle@r+1,c
 12170  00187C  0E07               	movlw	7
 12171  00187E  6E3D               	movwf	fillCircle@r,c
 12172  001880  0EFF               	movlw	255
 12173  001882  6E40               	movwf	fillCircle@color+1,c
 12174  001884  0EE0               	movlw	224
 12175  001886  6E3F               	movwf	fillCircle@color,c
 12176  001888  ECFE  F01B         	call	_fillCircle	;wreg free
 12177                           
 12178                           ;Lab9p1.c: 639: fillCircle(80, Circle_Y, 7, 0x0000);
 12179  00188C  0E00               	movlw	0
 12180  00188E  6E3A               	movwf	fillCircle@x0+1,c
 12181  001890  0E50               	movlw	80
 12182  001892  6E39               	movwf	fillCircle@x0,c
 12183  001894  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 12184  001898  6A3C               	clrf	fillCircle@y0+1,c
 12185  00189A  0E00               	movlw	0
 12186  00189C  6E3E               	movwf	fillCircle@r+1,c
 12187  00189E  0E07               	movlw	7
 12188  0018A0  6E3D               	movwf	fillCircle@r,c
 12189  0018A2  0E00               	movlw	0
 12190  0018A4  6E40               	movwf	fillCircle@color+1,c
 12191  0018A6  0E00               	movlw	0
 12192  0018A8  6E3F               	movwf	fillCircle@color,c
 12193  0018AA  ECFE  F01B         	call	_fillCircle	;wreg free
 12194                           
 12195                           ;Lab9p1.c: 640: drawCircle(40, Circle_Y, 7, 0xF800);
 12196  0018AE  0E00               	movlw	0
 12197  0018B0  6E1B               	movwf	drawCircle@x0+1,c
 12198  0018B2  0E28               	movlw	40
 12199  0018B4  6E1A               	movwf	drawCircle@x0,c
 12200  0018B6  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12201  0018BA  6A1D               	clrf	drawCircle@y0+1,c
 12202  0018BC  0E00               	movlw	0
 12203  0018BE  6E1F               	movwf	drawCircle@r+1,c
 12204  0018C0  0E07               	movlw	7
 12205  0018C2  6E1E               	movwf	drawCircle@r,c
 12206  0018C4  0EF8               	movlw	248
 12207  0018C6  6E21               	movwf	drawCircle@color+1,c
 12208  0018C8  0E00               	movlw	0
 12209  0018CA  6E20               	movwf	drawCircle@color,c
 12210  0018CC  EC88  F00F         	call	_drawCircle	;wreg free
 12211                           
 12212                           ;Lab9p1.c: 641: drawCircle(60, Circle_Y, 7, 0xFFE0);
 12213  0018D0  0E00               	movlw	0
 12214  0018D2  6E1B               	movwf	drawCircle@x0+1,c
 12215  0018D4  0E3C               	movlw	60
 12216  0018D6  6E1A               	movwf	drawCircle@x0,c
 12217  0018D8  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12218  0018DC  6A1D               	clrf	drawCircle@y0+1,c
 12219  0018DE  0E00               	movlw	0
 12220  0018E0  6E1F               	movwf	drawCircle@r+1,c
 12221  0018E2  0E07               	movlw	7
 12222  0018E4  6E1E               	movwf	drawCircle@r,c
 12223  0018E6  0EFF               	movlw	255
 12224  0018E8  6E21               	movwf	drawCircle@color+1,c
 12225  0018EA  0EE0               	movlw	224
 12226  0018EC  6E20               	movwf	drawCircle@color,c
 12227  0018EE  EC88  F00F         	call	_drawCircle	;wreg free
 12228                           
 12229                           ;Lab9p1.c: 642: drawCircle(80, Circle_Y, 7, 0x07E0);
 12230  0018F2  0E00               	movlw	0
 12231  0018F4  6E1B               	movwf	drawCircle@x0+1,c
 12232  0018F6  0E50               	movlw	80
 12233  0018F8  6E1A               	movwf	drawCircle@x0,c
 12234  0018FA  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 12235  0018FE  6A1D               	clrf	drawCircle@y0+1,c
 12236  001900  0E00               	movlw	0
 12237  001902  6E1F               	movwf	drawCircle@r+1,c
 12238  001904  0E07               	movlw	7
 12239  001906  6E1E               	movwf	drawCircle@r,c
 12240  001908  0E07               	movlw	7
 12241  00190A  6E21               	movwf	drawCircle@color+1,c
 12242  00190C  0EE0               	movlw	224
 12243  00190E  6E20               	movwf	drawCircle@color,c
 12244  001910  EC88  F00F         	call	_drawCircle	;wreg free
 12245  001914  D000               	goto	l513
 12246  001916                     l513:
 12247  001916  0012               	return		;funcret
 12248  001918                     __end_of_update_LCD_color:
 12249                           	opt stack 0
 12250                           tblptru	equ	0xFF8
 12251                           tblptrh	equ	0xFF7
 12252                           tblptrl	equ	0xFF6
 12253                           tablat	equ	0xFF5
 12254                           prodh	equ	0xFF4
 12255                           prodl	equ	0xFF3
 12256                           intcon	equ	0xFF2
 12257                           intcon2	equ	0xFF1
 12258                           intcon3	equ	0xFF0
 12259                           postinc0	equ	0xFEE
 12260                           wreg	equ	0xFE8
 12261                           postdec1	equ	0xFE5
 12262                           fsr1l	equ	0xFE1
 12263                           indf2	equ	0xFDF
 12264                           postinc2	equ	0xFDE
 12265                           postdec2	equ	0xFDD
 12266                           fsr2h	equ	0xFDA
 12267                           fsr2l	equ	0xFD9
 12268                           status	equ	0xFD8
 12269                           
 12270 ;; *************** function _fillCircle *****************
 12271 ;; Defined at:
 12272 ;;		line 647 in file "ST7735_TFT.c"
 12273 ;; Parameters:    Size  Location     Type
 12274 ;;  x0              2   56[COMRAM] int 
 12275 ;;  y0              2   58[COMRAM] int 
 12276 ;;  r               2   60[COMRAM] int 
 12277 ;;  color           2   62[COMRAM] unsigned int 
 12278 ;; Auto vars:     Size  Location     Type
 12279 ;;		None
 12280 ;; Return value:  Size  Location     Type
 12281 ;;		None               void
 12282 ;; Registers used:
 12283 ;;		wreg, status,2, status,0, cstack
 12284 ;; Tracked objects:
 12285 ;;		On entry : 0/0
 12286 ;;		On exit  : 0/0
 12287 ;;		Unchanged: 0/0
 12288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12289 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12292 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12293 ;;Total ram usage:        8 bytes
 12294 ;; Hardware stack levels used:    1
 12295 ;; Hardware stack levels required when called:    7
 12296 ;; This function calls:
 12297 ;;		_drawFastVLine
 12298 ;;		_fillCircleHelper
 12299 ;; This function is called by:
 12300 ;;		_Initialize_Screen
 12301 ;;		_update_LCD_color
 12302 ;; This function uses a non-reentrant model
 12303 ;;
 12304                           
 12305                           	psect	text51
 12306  0037FC                     __ptext51:
 12307                           	opt stack 0
 12308  0037FC                     _fillCircle:
 12309                           	opt stack 20
 12310                           
 12311                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
 12312                           
 12313                           ;incstack = 0
 12314  0037FC  503D               	movf	fillCircle@r,w,c
 12315  0037FE  0800               	sublw	0
 12316  003800  243B               	addwf	fillCircle@y0,w,c
 12317  003802  6E16               	movwf	drawFastVLine@y,c
 12318  003804  80D8               	bsf	status,0,c
 12319  003806  343D               	rlcf	fillCircle@r,w,c
 12320  003808  6E17               	movwf	drawFastVLine@h,c
 12321  00380A  C03F  F018         	movff	fillCircle@color,drawFastVLine@color
 12322  00380E  C040  F019         	movff	fillCircle@color+1,drawFastVLine@color+1
 12323  003812  5039               	movf	fillCircle@x0,w,c
 12324  003814  ECC6  F019         	call	_drawFastVLine
 12325                           
 12326                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
 12327  003818  C039  F021         	movff	fillCircle@x0,fillCircleHelper@x0
 12328  00381C  C03A  F022         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
 12329  003820  C03B  F023         	movff	fillCircle@y0,fillCircleHelper@y0
 12330  003824  C03C  F024         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
 12331  003828  C03D  F025         	movff	fillCircle@r,fillCircleHelper@r
 12332  00382C  C03E  F026         	movff	fillCircle@r+1,fillCircleHelper@r+1
 12333  003830  0E00               	movlw	0
 12334  003832  6E28               	movwf	fillCircleHelper@cornername+1,c
 12335  003834  0E03               	movlw	3
 12336  003836  6E27               	movwf	fillCircleHelper@cornername,c
 12337  003838  0E00               	movlw	0
 12338  00383A  6E2A               	movwf	fillCircleHelper@delta+1,c
 12339  00383C  0E00               	movlw	0
 12340  00383E  6E29               	movwf	fillCircleHelper@delta,c
 12341  003840  C03F  F02B         	movff	fillCircle@color,fillCircleHelper@color
 12342  003844  C040  F02C         	movff	fillCircle@color+1,fillCircleHelper@color+1
 12343  003848  ECDF  F011         	call	_fillCircleHelper	;wreg free
 12344  00384C  0012               	return		;funcret
 12345  00384E                     __end_of_fillCircle:
 12346                           	opt stack 0
 12347                           tblptru	equ	0xFF8
 12348                           tblptrh	equ	0xFF7
 12349                           tblptrl	equ	0xFF6
 12350                           tablat	equ	0xFF5
 12351                           prodh	equ	0xFF4
 12352                           prodl	equ	0xFF3
 12353                           intcon	equ	0xFF2
 12354                           intcon2	equ	0xFF1
 12355                           intcon3	equ	0xFF0
 12356                           postinc0	equ	0xFEE
 12357                           wreg	equ	0xFE8
 12358                           postdec1	equ	0xFE5
 12359                           fsr1l	equ	0xFE1
 12360                           indf2	equ	0xFDF
 12361                           postinc2	equ	0xFDE
 12362                           postdec2	equ	0xFDD
 12363                           fsr2h	equ	0xFDA
 12364                           fsr2l	equ	0xFD9
 12365                           status	equ	0xFD8
 12366                           
 12367 ;; *************** function _fillCircleHelper *****************
 12368 ;; Defined at:
 12369 ;;		line 622 in file "ST7735_TFT.c"
 12370 ;; Parameters:    Size  Location     Type
 12371 ;;  x0              2   32[COMRAM] int 
 12372 ;;  y0              2   34[COMRAM] int 
 12373 ;;  r               2   36[COMRAM] int 
 12374 ;;  cornername      2   38[COMRAM] unsigned int 
 12375 ;;  delta           2   40[COMRAM] int 
 12376 ;;  color           2   42[COMRAM] unsigned int 
 12377 ;; Auto vars:     Size  Location     Type
 12378 ;;  y               2   54[COMRAM] int 
 12379 ;;  x               2   52[COMRAM] int 
 12380 ;;  f               2   50[COMRAM] int 
 12381 ;;  ddF_y           2   48[COMRAM] int 
 12382 ;;  ddF_x           2   46[COMRAM] int 
 12383 ;; Return value:  Size  Location     Type
 12384 ;;		None               void
 12385 ;; Registers used:
 12386 ;;		wreg, status,2, status,0, cstack
 12387 ;; Tracked objects:
 12388 ;;		On entry : 0/0
 12389 ;;		On exit  : 0/0
 12390 ;;		Unchanged: 0/0
 12391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12392 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12393 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12394 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12395 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12396 ;;Total ram usage:       24 bytes
 12397 ;; Hardware stack levels used:    1
 12398 ;; Hardware stack levels required when called:    6
 12399 ;; This function calls:
 12400 ;;		_drawFastVLine
 12401 ;; This function is called by:
 12402 ;;		_fillCircle
 12403 ;; This function uses a non-reentrant model
 12404 ;;
 12405                           
 12406                           	psect	text52
 12407  0023BE                     __ptext52:
 12408                           	opt stack 0
 12409  0023BE                     _fillCircleHelper:
 12410                           	opt stack 20
 12411                           
 12412                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
 12413                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 12414                           
 12415                           ;incstack = 0
 12416  0023BE  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
 12417  0023C2  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
 12418  0023C6  1E2D               	comf	??_fillCircleHelper,f,c
 12419  0023C8  1E2E               	comf	??_fillCircleHelper+1,f,c
 12420  0023CA  4A2D               	infsnz	??_fillCircleHelper,f,c
 12421  0023CC  2A2E               	incf	??_fillCircleHelper+1,f,c
 12422  0023CE  0E01               	movlw	1
 12423  0023D0  242D               	addwf	??_fillCircleHelper,w,c
 12424  0023D2  6E33               	movwf	fillCircleHelper@f,c
 12425  0023D4  0E00               	movlw	0
 12426  0023D6  202E               	addwfc	??_fillCircleHelper+1,w,c
 12427  0023D8  6E34               	movwf	fillCircleHelper@f+1,c
 12428  0023DA  0E00               	movlw	0
 12429  0023DC  6E30               	movwf	fillCircleHelper@ddF_x+1,c
 12430  0023DE  0E01               	movlw	1
 12431  0023E0  6E2F               	movwf	fillCircleHelper@ddF_x,c
 12432  0023E2  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
 12433  0023E6  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
 12434  0023EA  90D8               	bcf	status,0,c
 12435  0023EC  362D               	rlcf	??_fillCircleHelper,f,c
 12436  0023EE  362E               	rlcf	??_fillCircleHelper+1,f,c
 12437  0023F0  1E2D               	comf	??_fillCircleHelper,f,c
 12438  0023F2  1E2E               	comf	??_fillCircleHelper+1,f,c
 12439  0023F4  4A2D               	infsnz	??_fillCircleHelper,f,c
 12440  0023F6  2A2E               	incf	??_fillCircleHelper+1,f,c
 12441  0023F8  C02D  F031         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
 12442  0023FC  C02E  F032         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
 12443  002400  0E00               	movlw	0
 12444  002402  6E36               	movwf	fillCircleHelper@x+1,c
 12445  002404  0E00               	movlw	0
 12446  002406  6E35               	movwf	fillCircleHelper@x,c
 12447  002408  C025  F037         	movff	fillCircleHelper@r,fillCircleHelper@y
 12448  00240C  C026  F038         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
 12449                           
 12450                           ;ST7735_TFT.c: 626: while (x<y) {
 12451  002410  D067               	goto	l6370
 12452  002412                     l6350:
 12453                           
 12454                           ;ST7735_TFT.c: 627: if (f >= 0) {
 12455  002412  BE34               	btfsc	fillCircleHelper@f+1,7,c
 12456  002414  D00B               	goto	l293
 12457                           
 12458                           ;ST7735_TFT.c: 628: y--;
 12459  002416  0637               	decf	fillCircleHelper@y,f,c
 12460  002418  A0D8               	btfss	status,0,c
 12461  00241A  0638               	decf	fillCircleHelper@y+1,f,c
 12462                           
 12463                           ;ST7735_TFT.c: 629: ddF_y += 2;
 12464  00241C  0E02               	movlw	2
 12465  00241E  2631               	addwf	fillCircleHelper@ddF_y,f,c
 12466  002420  0E00               	movlw	0
 12467  002422  2232               	addwfc	fillCircleHelper@ddF_y+1,f,c
 12468                           
 12469                           ;ST7735_TFT.c: 630: f += ddF_y;
 12470  002424  5031               	movf	fillCircleHelper@ddF_y,w,c
 12471  002426  2633               	addwf	fillCircleHelper@f,f,c
 12472  002428  5032               	movf	fillCircleHelper@ddF_y+1,w,c
 12473  00242A  2234               	addwfc	fillCircleHelper@f+1,f,c
 12474  00242C                     l293:
 12475                           
 12476                           ;ST7735_TFT.c: 631: }
 12477                           ;ST7735_TFT.c: 632: x++;
 12478  00242C  4A35               	infsnz	fillCircleHelper@x,f,c
 12479  00242E  2A36               	incf	fillCircleHelper@x+1,f,c
 12480                           
 12481                           ;ST7735_TFT.c: 633: ddF_x += 2;
 12482  002430  0E02               	movlw	2
 12483  002432  262F               	addwf	fillCircleHelper@ddF_x,f,c
 12484  002434  0E00               	movlw	0
 12485  002436  2230               	addwfc	fillCircleHelper@ddF_x+1,f,c
 12486                           
 12487                           ;ST7735_TFT.c: 634: f += ddF_x;
 12488  002438  502F               	movf	fillCircleHelper@ddF_x,w,c
 12489  00243A  2633               	addwf	fillCircleHelper@f,f,c
 12490  00243C  5030               	movf	fillCircleHelper@ddF_x+1,w,c
 12491  00243E  2234               	addwfc	fillCircleHelper@f+1,f,c
 12492                           
 12493                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
 12494  002440  A027               	btfss	fillCircleHelper@cornername,0,c
 12495  002442  D025               	goto	l6366
 12496                           
 12497                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 12498  002444  5037               	movf	fillCircleHelper@y,w,c
 12499  002446  0800               	sublw	0
 12500  002448  2423               	addwf	fillCircleHelper@y0,w,c
 12501  00244A  6E16               	movwf	drawFastVLine@y,c
 12502  00244C  5037               	movf	fillCircleHelper@y,w,c
 12503  00244E  2437               	addwf	fillCircleHelper@y,w,c
 12504  002450  2429               	addwf	fillCircleHelper@delta,w,c
 12505  002452  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12506  002454  282D               	incf	??_fillCircleHelper,w,c
 12507  002456  6E17               	movwf	drawFastVLine@h,c
 12508  002458  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
 12509  00245C  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 12510  002460  5021               	movf	fillCircleHelper@x0,w,c
 12511  002462  2435               	addwf	fillCircleHelper@x,w,c
 12512  002464  ECC6  F019         	call	_drawFastVLine
 12513                           
 12514                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 12515  002468  5035               	movf	fillCircleHelper@x,w,c
 12516  00246A  0800               	sublw	0
 12517  00246C  2423               	addwf	fillCircleHelper@y0,w,c
 12518  00246E  6E16               	movwf	drawFastVLine@y,c
 12519  002470  5035               	movf	fillCircleHelper@x,w,c
 12520  002472  2435               	addwf	fillCircleHelper@x,w,c
 12521  002474  2429               	addwf	fillCircleHelper@delta,w,c
 12522  002476  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12523  002478  282D               	incf	??_fillCircleHelper,w,c
 12524  00247A  6E17               	movwf	drawFastVLine@h,c
 12525  00247C  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
 12526  002480  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 12527  002484  5021               	movf	fillCircleHelper@x0,w,c
 12528  002486  2437               	addwf	fillCircleHelper@y,w,c
 12529  002488  ECC6  F019         	call	_drawFastVLine
 12530  00248C  D000               	goto	l6366
 12531  00248E                     l6366:
 12532                           
 12533                           ;ST7735_TFT.c: 639: }
 12534                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
 12535  00248E  A227               	btfss	fillCircleHelper@cornername,1,c
 12536  002490  D027               	goto	l6370
 12537                           
 12538                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 12539  002492  5037               	movf	fillCircleHelper@y,w,c
 12540  002494  0800               	sublw	0
 12541  002496  2423               	addwf	fillCircleHelper@y0,w,c
 12542  002498  6E16               	movwf	drawFastVLine@y,c
 12543  00249A  5037               	movf	fillCircleHelper@y,w,c
 12544  00249C  2437               	addwf	fillCircleHelper@y,w,c
 12545  00249E  2429               	addwf	fillCircleHelper@delta,w,c
 12546  0024A0  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12547  0024A2  282D               	incf	??_fillCircleHelper,w,c
 12548  0024A4  6E17               	movwf	drawFastVLine@h,c
 12549  0024A6  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
 12550  0024AA  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 12551  0024AE  5035               	movf	fillCircleHelper@x,w,c
 12552  0024B0  0800               	sublw	0
 12553  0024B2  2421               	addwf	fillCircleHelper@x0,w,c
 12554  0024B4  ECC6  F019         	call	_drawFastVLine
 12555                           
 12556                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 12557  0024B8  5035               	movf	fillCircleHelper@x,w,c
 12558  0024BA  0800               	sublw	0
 12559  0024BC  2423               	addwf	fillCircleHelper@y0,w,c
 12560  0024BE  6E16               	movwf	drawFastVLine@y,c
 12561  0024C0  5035               	movf	fillCircleHelper@x,w,c
 12562  0024C2  2435               	addwf	fillCircleHelper@x,w,c
 12563  0024C4  2429               	addwf	fillCircleHelper@delta,w,c
 12564  0024C6  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12565  0024C8  282D               	incf	??_fillCircleHelper,w,c
 12566  0024CA  6E17               	movwf	drawFastVLine@h,c
 12567  0024CC  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
 12568  0024D0  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 12569  0024D4  5037               	movf	fillCircleHelper@y,w,c
 12570  0024D6  0800               	sublw	0
 12571  0024D8  2421               	addwf	fillCircleHelper@x0,w,c
 12572  0024DA  ECC6  F019         	call	_drawFastVLine
 12573  0024DE  D000               	goto	l6370
 12574  0024E0                     l6370:
 12575  0024E0  5037               	movf	fillCircleHelper@y,w,c
 12576  0024E2  5C35               	subwf	fillCircleHelper@x,w,c
 12577  0024E4  5036               	movf	fillCircleHelper@x+1,w,c
 12578  0024E6  0A80               	xorlw	128
 12579  0024E8  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12580  0024EA  5038               	movf	fillCircleHelper@y+1,w,c
 12581  0024EC  0A80               	xorlw	128
 12582  0024EE  582D               	subwfb	??_fillCircleHelper& (0+255),w,c
 12583  0024F0  A0D8               	btfss	status,0,c
 12584  0024F2  D78F               	goto	l6350
 12585  0024F4  0012               	return		;funcret
 12586  0024F6                     __end_of_fillCircleHelper:
 12587                           	opt stack 0
 12588                           tblptru	equ	0xFF8
 12589                           tblptrh	equ	0xFF7
 12590                           tblptrl	equ	0xFF6
 12591                           tablat	equ	0xFF5
 12592                           prodh	equ	0xFF4
 12593                           prodl	equ	0xFF3
 12594                           intcon	equ	0xFF2
 12595                           intcon2	equ	0xFF1
 12596                           intcon3	equ	0xFF0
 12597                           postinc0	equ	0xFEE
 12598                           wreg	equ	0xFE8
 12599                           postdec1	equ	0xFE5
 12600                           fsr1l	equ	0xFE1
 12601                           indf2	equ	0xFDF
 12602                           postinc2	equ	0xFDE
 12603                           postdec2	equ	0xFDD
 12604                           fsr2h	equ	0xFDA
 12605                           fsr2l	equ	0xFD9
 12606                           status	equ	0xFD8
 12607                           
 12608 ;; *************** function _drawCircle *****************
 12609 ;; Defined at:
 12610 ;;		line 561 in file "ST7735_TFT.c"
 12611 ;; Parameters:    Size  Location     Type
 12612 ;;  x0              2   25[COMRAM] int 
 12613 ;;  y0              2   27[COMRAM] int 
 12614 ;;  r               2   29[COMRAM] int 
 12615 ;;  color           2   31[COMRAM] unsigned int 
 12616 ;; Auto vars:     Size  Location     Type
 12617 ;;  y               2   43[COMRAM] int 
 12618 ;;  x               2   41[COMRAM] int 
 12619 ;;  f               2   39[COMRAM] int 
 12620 ;;  ddF_y           2   37[COMRAM] int 
 12621 ;;  ddF_x           2   35[COMRAM] int 
 12622 ;; Return value:  Size  Location     Type
 12623 ;;		None               void
 12624 ;; Registers used:
 12625 ;;		wreg, status,2, status,0, cstack
 12626 ;; Tracked objects:
 12627 ;;		On entry : 0/0
 12628 ;;		On exit  : 0/0
 12629 ;;		Unchanged: 0/0
 12630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12631 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12632 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12633 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12634 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12635 ;;Total ram usage:       20 bytes
 12636 ;; Hardware stack levels used:    1
 12637 ;; Hardware stack levels required when called:    6
 12638 ;; This function calls:
 12639 ;;		_drawPixel
 12640 ;; This function is called by:
 12641 ;;		_Initialize_Screen
 12642 ;;		_update_LCD_color
 12643 ;; This function uses a non-reentrant model
 12644 ;;
 12645                           
 12646                           	psect	text53
 12647  001F10                     __ptext53:
 12648                           	opt stack 0
 12649  001F10                     _drawCircle:
 12650                           	opt stack 21
 12651                           
 12652                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
 12653                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 12654                           
 12655                           ;incstack = 0
 12656  001F10  C01E  F022         	movff	drawCircle@r,??_drawCircle
 12657  001F14  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
 12658  001F18  1E22               	comf	??_drawCircle,f,c
 12659  001F1A  1E23               	comf	??_drawCircle+1,f,c
 12660  001F1C  4A22               	infsnz	??_drawCircle,f,c
 12661  001F1E  2A23               	incf	??_drawCircle+1,f,c
 12662  001F20  0E01               	movlw	1
 12663  001F22  2422               	addwf	??_drawCircle,w,c
 12664  001F24  6E28               	movwf	drawCircle@f,c
 12665  001F26  0E00               	movlw	0
 12666  001F28  2023               	addwfc	??_drawCircle+1,w,c
 12667  001F2A  6E29               	movwf	drawCircle@f+1,c
 12668  001F2C  0E00               	movlw	0
 12669  001F2E  6E25               	movwf	drawCircle@ddF_x+1,c
 12670  001F30  0E01               	movlw	1
 12671  001F32  6E24               	movwf	drawCircle@ddF_x,c
 12672  001F34  C01E  F022         	movff	drawCircle@r,??_drawCircle
 12673  001F38  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
 12674  001F3C  90D8               	bcf	status,0,c
 12675  001F3E  3622               	rlcf	??_drawCircle,f,c
 12676  001F40  3623               	rlcf	??_drawCircle+1,f,c
 12677  001F42  1E22               	comf	??_drawCircle,f,c
 12678  001F44  1E23               	comf	??_drawCircle+1,f,c
 12679  001F46  4A22               	infsnz	??_drawCircle,f,c
 12680  001F48  2A23               	incf	??_drawCircle+1,f,c
 12681  001F4A  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
 12682  001F4E  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 12683  001F52  0E00               	movlw	0
 12684  001F54  6E2B               	movwf	drawCircle@x+1,c
 12685  001F56  0E00               	movlw	0
 12686  001F58  6E2A               	movwf	drawCircle@x,c
 12687  001F5A  C01E  F02C         	movff	drawCircle@r,drawCircle@y
 12688  001F5E  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
 12689                           
 12690                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
 12691  001F62  501C               	movf	drawCircle@y0,w,c
 12692  001F64  241E               	addwf	drawCircle@r,w,c
 12693  001F66  6E16               	movwf	drawPixel@y,c
 12694  001F68  C020  F017         	movff	drawCircle@color,drawPixel@color
 12695  001F6C  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12696  001F70  501A               	movf	drawCircle@x0,w,c
 12697  001F72  ECCD  F01D         	call	_drawPixel
 12698                           
 12699                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
 12700  001F76  501E               	movf	drawCircle@r,w,c
 12701  001F78  0800               	sublw	0
 12702  001F7A  241C               	addwf	drawCircle@y0,w,c
 12703  001F7C  6E16               	movwf	drawPixel@y,c
 12704  001F7E  C020  F017         	movff	drawCircle@color,drawPixel@color
 12705  001F82  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12706  001F86  501A               	movf	drawCircle@x0,w,c
 12707  001F88  ECCD  F01D         	call	_drawPixel
 12708                           
 12709                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
 12710  001F8C  C01C  F016         	movff	drawCircle@y0,drawPixel@y
 12711  001F90  C020  F017         	movff	drawCircle@color,drawPixel@color
 12712  001F94  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12713  001F98  501A               	movf	drawCircle@x0,w,c
 12714  001F9A  241E               	addwf	drawCircle@r,w,c
 12715  001F9C  ECCD  F01D         	call	_drawPixel
 12716                           
 12717                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
 12718  001FA0  C01C  F016         	movff	drawCircle@y0,drawPixel@y
 12719  001FA4  C020  F017         	movff	drawCircle@color,drawPixel@color
 12720  001FA8  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12721  001FAC  501E               	movf	drawCircle@r,w,c
 12722  001FAE  0800               	sublw	0
 12723  001FB0  241A               	addwf	drawCircle@x0,w,c
 12724  001FB2  ECCD  F01D         	call	_drawPixel
 12725                           
 12726                           ;ST7735_TFT.c: 569: while (x < y) {
 12727  001FB6  D078               	goto	l6766
 12728  001FB8                     l6738:
 12729                           
 12730                           ;ST7735_TFT.c: 570: if (f >= 0) {
 12731  001FB8  BE29               	btfsc	drawCircle@f+1,7,c
 12732  001FBA  D00B               	goto	l275
 12733                           
 12734                           ;ST7735_TFT.c: 571: y--;
 12735  001FBC  062C               	decf	drawCircle@y,f,c
 12736  001FBE  A0D8               	btfss	status,0,c
 12737  001FC0  062D               	decf	drawCircle@y+1,f,c
 12738                           
 12739                           ;ST7735_TFT.c: 572: ddF_y += 2;
 12740  001FC2  0E02               	movlw	2
 12741  001FC4  2626               	addwf	drawCircle@ddF_y,f,c
 12742  001FC6  0E00               	movlw	0
 12743  001FC8  2227               	addwfc	drawCircle@ddF_y+1,f,c
 12744                           
 12745                           ;ST7735_TFT.c: 573: f += ddF_y;
 12746  001FCA  5026               	movf	drawCircle@ddF_y,w,c
 12747  001FCC  2628               	addwf	drawCircle@f,f,c
 12748  001FCE  5027               	movf	drawCircle@ddF_y+1,w,c
 12749  001FD0  2229               	addwfc	drawCircle@f+1,f,c
 12750  001FD2                     l275:
 12751                           
 12752                           ;ST7735_TFT.c: 574: }
 12753                           ;ST7735_TFT.c: 575: x++;
 12754  001FD2  4A2A               	infsnz	drawCircle@x,f,c
 12755  001FD4  2A2B               	incf	drawCircle@x+1,f,c
 12756                           
 12757                           ;ST7735_TFT.c: 576: ddF_x += 2;
 12758  001FD6  0E02               	movlw	2
 12759  001FD8  2624               	addwf	drawCircle@ddF_x,f,c
 12760  001FDA  0E00               	movlw	0
 12761  001FDC  2225               	addwfc	drawCircle@ddF_x+1,f,c
 12762                           
 12763                           ;ST7735_TFT.c: 577: f += ddF_x;
 12764  001FDE  5024               	movf	drawCircle@ddF_x,w,c
 12765  001FE0  2628               	addwf	drawCircle@f,f,c
 12766  001FE2  5025               	movf	drawCircle@ddF_x+1,w,c
 12767  001FE4  2229               	addwfc	drawCircle@f+1,f,c
 12768                           
 12769                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
 12770  001FE6  501C               	movf	drawCircle@y0,w,c
 12771  001FE8  242C               	addwf	drawCircle@y,w,c
 12772  001FEA  6E16               	movwf	drawPixel@y,c
 12773  001FEC  C020  F017         	movff	drawCircle@color,drawPixel@color
 12774  001FF0  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12775  001FF4  501A               	movf	drawCircle@x0,w,c
 12776  001FF6  242A               	addwf	drawCircle@x,w,c
 12777  001FF8  ECCD  F01D         	call	_drawPixel
 12778                           
 12779                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
 12780  001FFC  501C               	movf	drawCircle@y0,w,c
 12781  001FFE  242C               	addwf	drawCircle@y,w,c
 12782  002000  6E16               	movwf	drawPixel@y,c
 12783  002002  C020  F017         	movff	drawCircle@color,drawPixel@color
 12784  002006  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12785  00200A  502A               	movf	drawCircle@x,w,c
 12786  00200C  0800               	sublw	0
 12787  00200E  241A               	addwf	drawCircle@x0,w,c
 12788  002010  ECCD  F01D         	call	_drawPixel
 12789                           
 12790                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
 12791  002014  502C               	movf	drawCircle@y,w,c
 12792  002016  0800               	sublw	0
 12793  002018  241C               	addwf	drawCircle@y0,w,c
 12794  00201A  6E16               	movwf	drawPixel@y,c
 12795  00201C  C020  F017         	movff	drawCircle@color,drawPixel@color
 12796  002020  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12797  002024  501A               	movf	drawCircle@x0,w,c
 12798  002026  242A               	addwf	drawCircle@x,w,c
 12799  002028  ECCD  F01D         	call	_drawPixel
 12800                           
 12801                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
 12802  00202C  502C               	movf	drawCircle@y,w,c
 12803  00202E  0800               	sublw	0
 12804  002030  241C               	addwf	drawCircle@y0,w,c
 12805  002032  6E16               	movwf	drawPixel@y,c
 12806  002034  C020  F017         	movff	drawCircle@color,drawPixel@color
 12807  002038  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12808  00203C  502A               	movf	drawCircle@x,w,c
 12809  00203E  0800               	sublw	0
 12810  002040  241A               	addwf	drawCircle@x0,w,c
 12811  002042  ECCD  F01D         	call	_drawPixel
 12812                           
 12813                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
 12814  002046  501C               	movf	drawCircle@y0,w,c
 12815  002048  242A               	addwf	drawCircle@x,w,c
 12816  00204A  6E16               	movwf	drawPixel@y,c
 12817  00204C  C020  F017         	movff	drawCircle@color,drawPixel@color
 12818  002050  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12819  002054  501A               	movf	drawCircle@x0,w,c
 12820  002056  242C               	addwf	drawCircle@y,w,c
 12821  002058  ECCD  F01D         	call	_drawPixel
 12822                           
 12823                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
 12824  00205C  501C               	movf	drawCircle@y0,w,c
 12825  00205E  242A               	addwf	drawCircle@x,w,c
 12826  002060  6E16               	movwf	drawPixel@y,c
 12827  002062  C020  F017         	movff	drawCircle@color,drawPixel@color
 12828  002066  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12829  00206A  502C               	movf	drawCircle@y,w,c
 12830  00206C  0800               	sublw	0
 12831  00206E  241A               	addwf	drawCircle@x0,w,c
 12832  002070  ECCD  F01D         	call	_drawPixel
 12833                           
 12834                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
 12835  002074  502A               	movf	drawCircle@x,w,c
 12836  002076  0800               	sublw	0
 12837  002078  241C               	addwf	drawCircle@y0,w,c
 12838  00207A  6E16               	movwf	drawPixel@y,c
 12839  00207C  C020  F017         	movff	drawCircle@color,drawPixel@color
 12840  002080  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12841  002084  501A               	movf	drawCircle@x0,w,c
 12842  002086  242C               	addwf	drawCircle@y,w,c
 12843  002088  ECCD  F01D         	call	_drawPixel
 12844                           
 12845                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
 12846  00208C  502A               	movf	drawCircle@x,w,c
 12847  00208E  0800               	sublw	0
 12848  002090  241C               	addwf	drawCircle@y0,w,c
 12849  002092  6E16               	movwf	drawPixel@y,c
 12850  002094  C020  F017         	movff	drawCircle@color,drawPixel@color
 12851  002098  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12852  00209C  502C               	movf	drawCircle@y,w,c
 12853  00209E  0800               	sublw	0
 12854  0020A0  241A               	addwf	drawCircle@x0,w,c
 12855  0020A2  ECCD  F01D         	call	_drawPixel
 12856  0020A6  D000               	goto	l6766
 12857  0020A8                     l6766:
 12858  0020A8  502C               	movf	drawCircle@y,w,c
 12859  0020AA  5C2A               	subwf	drawCircle@x,w,c
 12860  0020AC  502B               	movf	drawCircle@x+1,w,c
 12861  0020AE  0A80               	xorlw	128
 12862  0020B0  6E22               	movwf	??_drawCircle& (0+255),c
 12863  0020B2  502D               	movf	drawCircle@y+1,w,c
 12864  0020B4  0A80               	xorlw	128
 12865  0020B6  5822               	subwfb	??_drawCircle& (0+255),w,c
 12866  0020B8  A0D8               	btfss	status,0,c
 12867  0020BA  D77E               	goto	l6738
 12868  0020BC  0012               	return		;funcret
 12869  0020BE                     __end_of_drawCircle:
 12870                           	opt stack 0
 12871                           tblptru	equ	0xFF8
 12872                           tblptrh	equ	0xFF7
 12873                           tblptrl	equ	0xFF6
 12874                           tablat	equ	0xFF5
 12875                           prodh	equ	0xFF4
 12876                           prodl	equ	0xFF3
 12877                           intcon	equ	0xFF2
 12878                           intcon2	equ	0xFF1
 12879                           intcon3	equ	0xFF0
 12880                           postinc0	equ	0xFEE
 12881                           wreg	equ	0xFE8
 12882                           postdec1	equ	0xFE5
 12883                           fsr1l	equ	0xFE1
 12884                           indf2	equ	0xFDF
 12885                           postinc2	equ	0xFDE
 12886                           postdec2	equ	0xFDD
 12887                           fsr2h	equ	0xFDA
 12888                           fsr2l	equ	0xFD9
 12889                           status	equ	0xFD8
 12890                           
 12891 ;; *************** function _PED_Control *****************
 12892 ;; Defined at:
 12893 ;;		line 536 in file "Lab9p1.c"
 12894 ;; Parameters:    Size  Location     Type
 12895 ;;  Direction       1    wreg     unsigned char 
 12896 ;;  Num_Sec         1   74[COMRAM] unsigned char 
 12897 ;; Auto vars:     Size  Location     Type
 12898 ;;  Direction       1    0[COMRAM] unsigned char 
 12899 ;;  i               1   75[COMRAM] unsigned char 
 12900 ;; Return value:  Size  Location     Type
 12901 ;;		None               void
 12902 ;; Registers used:
 12903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12904 ;; Tracked objects:
 12905 ;;		On entry : 0/0
 12906 ;;		On exit  : 0/0
 12907 ;;		Unchanged: 0/0
 12908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12909 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12910 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12912 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12913 ;;Total ram usage:        2 bytes
 12914 ;; Hardware stack levels used:    1
 12915 ;; Hardware stack levels required when called:   10
 12916 ;; This function calls:
 12917 ;;		_WAIT_1_SEC_W_BEEP
 12918 ;;		_update_LCD_PED_Count
 12919 ;; This function is called by:
 12920 ;;		_Day_Mode
 12921 ;; This function uses a non-reentrant model
 12922 ;;
 12923                           
 12924                           	psect	text54
 12925  003B02                     __ptext54:
 12926                           	opt stack 0
 12927  003B02                     _PED_Control:
 12928                           	opt stack 19
 12929                           
 12930                           ;Lab9p1.c: 538: for(char i = Num_Sec-1;i>0; i--)
 12931                           
 12932                           ;incstack = 0
 12933  003B02  044B               	decf	PED_Control@Num_Sec,w,c
 12934  003B04  6E4C               	movwf	PED_Control@i,c
 12935  003B06                     l7190:
 12936  003B06  504C               	movf	PED_Control@i,w,c
 12937  003B08  B4D8               	btfsc	status,2,c
 12938  003B0A  D00C               	goto	l7202
 12939  003B0C  D001               	goto	l7194
 12940  003B0E  D00A               	goto	l7202
 12941  003B10                     l7194:
 12942                           
 12943                           ;Lab9p1.c: 539: {
 12944                           ;Lab9p1.c: 540: update_LCD_PED_Count(direction, i);
 12945  003B10  C04C  F048         	movff	PED_Control@i,update_LCD_PED_Count@count
 12946  003B14  0100               	movlb	0	; () banked
 12947  003B16  5194               	movf	_direction& (0+255),w,b
 12948  003B18  EC05  F015         	call	_update_LCD_PED_Count
 12949                           
 12950                           ;Lab9p1.c: 541: WAIT_1_SEC_W_BEEP();
 12951  003B1C  EC9F  F01E         	call	_WAIT_1_SEC_W_BEEP	;wreg free
 12952  003B20  064C               	decf	PED_Control@i,f,c
 12953  003B22  D7F1               	goto	l7190
 12954  003B24                     l7202:
 12955                           
 12956                           ;Lab9p1.c: 542: }
 12957                           ;Lab9p1.c: 543: update_LCD_PED_Count(direction, 0);
 12958  003B24  0E00               	movlw	0
 12959  003B26  6E48               	movwf	update_LCD_PED_Count@count,c
 12960  003B28  0100               	movlb	0	; () banked
 12961  003B2A  5194               	movf	_direction& (0+255),w,b
 12962  003B2C  EC05  F015         	call	_update_LCD_PED_Count
 12963                           
 12964                           ;Lab9p1.c: 544: WAIT_1_SEC_W_BEEP();
 12965  003B30  EC9F  F01E         	call	_WAIT_1_SEC_W_BEEP	;wreg free
 12966  003B34  0012               	return		;funcret
 12967  003B36                     __end_of_PED_Control:
 12968                           	opt stack 0
 12969                           tblptru	equ	0xFF8
 12970                           tblptrh	equ	0xFF7
 12971                           tblptrl	equ	0xFF6
 12972                           tablat	equ	0xFF5
 12973                           prodh	equ	0xFF4
 12974                           prodl	equ	0xFF3
 12975                           intcon	equ	0xFF2
 12976                           intcon2	equ	0xFF1
 12977                           intcon3	equ	0xFF0
 12978                           postinc0	equ	0xFEE
 12979                           wreg	equ	0xFE8
 12980                           postdec1	equ	0xFE5
 12981                           fsr1l	equ	0xFE1
 12982                           indf2	equ	0xFDF
 12983                           postinc2	equ	0xFDE
 12984                           postdec2	equ	0xFDD
 12985                           fsr2h	equ	0xFDA
 12986                           fsr2l	equ	0xFD9
 12987                           status	equ	0xFD8
 12988                           
 12989 ;; *************** function _update_LCD_PED_Count *****************
 12990 ;; Defined at:
 12991 ;;		line 681 in file "Lab9p1.c"
 12992 ;; Parameters:    Size  Location     Type
 12993 ;;  direction       1    wreg     unsigned char 
 12994 ;;  count           1   71[COMRAM] unsigned char 
 12995 ;; Auto vars:     Size  Location     Type
 12996 ;;  direction       1   73[COMRAM] unsigned char 
 12997 ;; Return value:  Size  Location     Type
 12998 ;;		None               void
 12999 ;; Registers used:
 13000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13001 ;; Tracked objects:
 13002 ;;		On entry : 0/0
 13003 ;;		On exit  : 0/0
 13004 ;;		Unchanged: 0/0
 13005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13006 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13007 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13008 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13009 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13010 ;;Total ram usage:        3 bytes
 13011 ;; Hardware stack levels used:    1
 13012 ;; Hardware stack levels required when called:    9
 13013 ;; This function calls:
 13014 ;;		___awdiv
 13015 ;;		___awmod
 13016 ;;		_drawtext
 13017 ;; This function is called by:
 13018 ;;		_PED_Control
 13019 ;; This function uses a non-reentrant model
 13020 ;;
 13021                           
 13022                           	psect	text55
 13023  002A0A                     __ptext55:
 13024                           	opt stack 0
 13025  002A0A                     _update_LCD_PED_Count:
 13026                           	opt stack 19
 13027                           
 13028                           ;incstack = 0
 13029                           ;update_LCD_PED_Count@direction stored from wreg
 13030  002A0A  6E4A               	movwf	update_LCD_PED_Count@direction,c
 13031                           
 13032                           ;Lab9p1.c: 683: PORTD = (PORTD & 0x80) | array[count];
 13033  002A0C  5048               	movf	update_LCD_PED_Count@count,w,c
 13034  002A0E  0D01               	mullw	1
 13035  002A10  0EB4               	movlw	low _array
 13036  002A12  24F3               	addwf	prodl,w,c
 13037  002A14  6ED9               	movwf	fsr2l,c
 13038  002A16  0E00               	movlw	high _array
 13039  002A18  20F4               	addwfc	prodh,w,c
 13040  002A1A  6EDA               	movwf	fsr2h,c
 13041  002A1C  50DF               	movf	indf2,w,c
 13042  002A1E  6E49               	movwf	??_update_LCD_PED_Count& (0+255),c
 13043  002A20  5083               	movf	3971,w,c	;volatile
 13044  002A22  0B80               	andlw	128
 13045  002A24  1049               	iorwf	??_update_LCD_PED_Count,w,c
 13046  002A26  6E83               	movwf	3971,c	;volatile
 13047                           
 13048                           ;Lab9p1.c: 684: switch (direction)
 13049  002A28  D05B               	goto	l7060
 13050  002A2A                     l7050:
 13051                           
 13052                           ;Lab9p1.c: 687: PED_EW_Count[0] = count/10 + '0';
 13053  002A2A  C048  F015         	movff	update_LCD_PED_Count@count,___awdiv@dividend
 13054  002A2E  6A16               	clrf	___awdiv@dividend+1,c
 13055  002A30  0E00               	movlw	0
 13056  002A32  6E18               	movwf	___awdiv@divisor+1,c
 13057  002A34  0E0A               	movlw	10
 13058  002A36  6E17               	movwf	___awdiv@divisor,c
 13059  002A38  ECF1  F018         	call	___awdiv	;wreg free
 13060  002A3C  5015               	movf	?___awdiv,w,c
 13061  002A3E  0F30               	addlw	48
 13062  002A40  0100               	movlb	0	; () banked
 13063  002A42  6FCB               	movwf	_PED_EW_Count& (0+255),b
 13064                           
 13065                           ;Lab9p1.c: 688: PED_EW_Count[1] = count%10 + '0';
 13066  002A44  C048  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
 13067  002A48  6A10               	clrf	___awmod@dividend+1,c
 13068  002A4A  0E00               	movlw	0
 13069  002A4C  6E12               	movwf	___awmod@divisor+1,c
 13070  002A4E  0E0A               	movlw	10
 13071  002A50  6E11               	movwf	___awmod@divisor,c
 13072  002A52  EC90  F01A         	call	___awmod	;wreg free
 13073  002A56  500F               	movf	?___awmod,w,c
 13074  002A58  0F30               	addlw	48
 13075  002A5A  0100               	movlb	0	; () banked
 13076  002A5C  6FCC               	movwf	(_PED_EW_Count+1)& (0+255),b
 13077                           
 13078                           ; BSR set to: 0
 13079                           ;Lab9p1.c: 689: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
 13080  002A5E  0E1E               	movlw	30
 13081  002A60  6E37               	movwf	drawtext@y,c
 13082  002A62  0ECB               	movlw	low _PED_EW_Count
 13083  002A64  6E38               	movwf	drawtext@_text,c
 13084  002A66  0E00               	movlw	high _PED_EW_Count
 13085  002A68  6E39               	movwf	drawtext@_text+1,c
 13086  002A6A  0E07               	movlw	7
 13087  002A6C  6E3B               	movwf	drawtext@color+1,c
 13088  002A6E  683A               	setf	drawtext@color,c
 13089  002A70  0E00               	movlw	0
 13090  002A72  6E3D               	movwf	drawtext@bg+1,c
 13091  002A74  0E00               	movlw	0
 13092  002A76  6E3C               	movwf	drawtext@bg,c
 13093  002A78  0E02               	movlw	2
 13094  002A7A  6E3E               	movwf	drawtext@size,c
 13095  002A7C  0E02               	movlw	2
 13096  002A7E  EC5D  F016         	call	_drawtext
 13097                           
 13098                           ;Lab9p1.c: 690: break;
 13099  002A82  D036               	goto	l529
 13100  002A84                     l7054:
 13101                           
 13102                           ;Lab9p1.c: 693: PED_NS_Count[0] = count/10 + '0';
 13103  002A84  C048  F015         	movff	update_LCD_PED_Count@count,___awdiv@dividend
 13104  002A88  6A16               	clrf	___awdiv@dividend+1,c
 13105  002A8A  0E00               	movlw	0
 13106  002A8C  6E18               	movwf	___awdiv@divisor+1,c
 13107  002A8E  0E0A               	movlw	10
 13108  002A90  6E17               	movwf	___awdiv@divisor,c
 13109  002A92  ECF1  F018         	call	___awdiv	;wreg free
 13110  002A96  5015               	movf	?___awdiv,w,c
 13111  002A98  0F30               	addlw	48
 13112  002A9A  0100               	movlb	0	; () banked
 13113  002A9C  6FCE               	movwf	_PED_NS_Count& (0+255),b
 13114                           
 13115                           ;Lab9p1.c: 694: PED_NS_Count[1] = count%10 + '0';
 13116  002A9E  C048  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
 13117  002AA2  6A10               	clrf	___awmod@dividend+1,c
 13118  002AA4  0E00               	movlw	0
 13119  002AA6  6E12               	movwf	___awmod@divisor+1,c
 13120  002AA8  0E0A               	movlw	10
 13121  002AAA  6E11               	movwf	___awmod@divisor,c
 13122  002AAC  EC90  F01A         	call	___awmod	;wreg free
 13123  002AB0  500F               	movf	?___awmod,w,c
 13124  002AB2  0F30               	addlw	48
 13125  002AB4  0100               	movlb	0	; () banked
 13126  002AB6  6FCF               	movwf	(_PED_NS_Count+1)& (0+255),b
 13127                           
 13128                           ; BSR set to: 0
 13129                           ;Lab9p1.c: 695: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
 13130  002AB8  0E5A               	movlw	90
 13131  002ABA  6E37               	movwf	drawtext@y,c
 13132  002ABC  0ECE               	movlw	low _PED_NS_Count
 13133  002ABE  6E38               	movwf	drawtext@_text,c
 13134  002AC0  0E00               	movlw	high _PED_NS_Count
 13135  002AC2  6E39               	movwf	drawtext@_text+1,c
 13136  002AC4  0E00               	movlw	0
 13137  002AC6  6E3B               	movwf	drawtext@color+1,c
 13138  002AC8  0E1F               	movlw	31
 13139  002ACA  6E3A               	movwf	drawtext@color,c
 13140  002ACC  0E00               	movlw	0
 13141  002ACE  6E3D               	movwf	drawtext@bg+1,c
 13142  002AD0  0E00               	movlw	0
 13143  002AD2  6E3C               	movwf	drawtext@bg,c
 13144  002AD4  0E02               	movlw	2
 13145  002AD6  6E3E               	movwf	drawtext@size,c
 13146  002AD8  0E02               	movlw	2
 13147  002ADA  EC5D  F016         	call	_drawtext
 13148                           
 13149                           ;Lab9p1.c: 697: }
 13150                           
 13151                           ;Lab9p1.c: 696: break;
 13152  002ADE  D008               	goto	l529
 13153  002AE0                     l7060:
 13154  002AE0  504A               	movf	update_LCD_PED_Count@direction,w,c
 13155                           
 13156                           ; Switch size 1, requested type "space"
 13157                           ; Number of cases is 2, Range of values is 0 to 2
 13158                           ; switch strategies available:
 13159                           ; Name         Instructions Cycles
 13160                           ; simple_byte            7     4 (average)
 13161                           ;	Chosen strategy is simple_byte
 13162  002AE2  0A00               	xorlw	0	; case 0
 13163  002AE4  B4D8               	btfsc	status,2,c
 13164  002AE6  D7A1               	goto	l7050
 13165  002AE8  0A02               	xorlw	2	; case 2
 13166  002AEA  B4D8               	btfsc	status,2,c
 13167  002AEC  D7CB               	goto	l7054
 13168  002AEE  D000               	goto	l529
 13169  002AF0                     l529:
 13170  002AF0  0012               	return		;funcret
 13171  002AF2                     __end_of_update_LCD_PED_Count:
 13172                           	opt stack 0
 13173                           tblptru	equ	0xFF8
 13174                           tblptrh	equ	0xFF7
 13175                           tblptrl	equ	0xFF6
 13176                           tablat	equ	0xFF5
 13177                           prodh	equ	0xFF4
 13178                           prodl	equ	0xFF3
 13179                           intcon	equ	0xFF2
 13180                           intcon2	equ	0xFF1
 13181                           intcon3	equ	0xFF0
 13182                           postinc0	equ	0xFEE
 13183                           wreg	equ	0xFE8
 13184                           postdec1	equ	0xFE5
 13185                           fsr1l	equ	0xFE1
 13186                           indf2	equ	0xFDF
 13187                           postinc2	equ	0xFDE
 13188                           postdec2	equ	0xFDD
 13189                           fsr2h	equ	0xFDA
 13190                           fsr2l	equ	0xFD9
 13191                           status	equ	0xFD8
 13192                           
 13193 ;; *************** function _drawtext *****************
 13194 ;; Defined at:
 13195 ;;		line 507 in file "ST7735_TFT.c"
 13196 ;; Parameters:    Size  Location     Type
 13197 ;;  x               1    wreg     unsigned char 
 13198 ;;  y               1   54[COMRAM] unsigned char 
 13199 ;;  _text           2   55[COMRAM] PTR unsigned char 
 13200 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
 13201 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
 13202 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
 13203 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
 13204 ;;  color           2   57[COMRAM] unsigned int 
 13205 ;;  bg              2   59[COMRAM] unsigned int 
 13206 ;;  size            1   61[COMRAM] unsigned char 
 13207 ;; Auto vars:     Size  Location     Type
 13208 ;;  x               1   64[COMRAM] unsigned char 
 13209 ;;  i               2   67[COMRAM] unsigned int 
 13210 ;;  textsize        2   65[COMRAM] unsigned int 
 13211 ;;  cursor_x        1   70[COMRAM] unsigned char 
 13212 ;;  cursor_y        1   69[COMRAM] unsigned char 
 13213 ;; Return value:  Size  Location     Type
 13214 ;;		None               void
 13215 ;; Registers used:
 13216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13217 ;; Tracked objects:
 13218 ;;		On entry : 0/0
 13219 ;;		On exit  : 0/0
 13220 ;;		Unchanged: 0/0
 13221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13222 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13223 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13224 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13225 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13226 ;;Total ram usage:       17 bytes
 13227 ;; Hardware stack levels used:    1
 13228 ;; Hardware stack levels required when called:    8
 13229 ;; This function calls:
 13230 ;;		_drawChar
 13231 ;;		_strlen
 13232 ;; This function is called by:
 13233 ;;		_Initialize_Screen
 13234 ;;		_WAIT_1_SEC
 13235 ;;		_update_LCD_count
 13236 ;;		_update_LCD_PED_Count
 13237 ;;		_update_LCD_misc
 13238 ;; This function uses a non-reentrant model
 13239 ;;
 13240                           
 13241                           	psect	text56
 13242  002CBA                     __ptext56:
 13243                           	opt stack 0
 13244  002CBA                     _drawtext:
 13245                           	opt stack 19
 13246                           
 13247                           ;incstack = 0
 13248                           ;drawtext@x stored from wreg
 13249  002CBA  6E41               	movwf	drawtext@x,c
 13250                           
 13251                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
 13252                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
 13253                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
 13254  002CBC  C041  F047         	movff	drawtext@x,drawtext@cursor_x
 13255  002CC0  C037  F046         	movff	drawtext@y,drawtext@cursor_y
 13256                           
 13257                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
 13258  002CC4  C038  F00F         	movff	drawtext@_text,strlen@s
 13259  002CC8  C039  F010         	movff	drawtext@_text+1,strlen@s+1
 13260  002CCC  EC44  F01D         	call	_strlen	;wreg free
 13261  002CD0  C00F  F042         	movff	?_strlen,drawtext@textsize
 13262  002CD4  C010  F043         	movff	?_strlen+1,drawtext@textsize+1
 13263                           
 13264                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
 13265  002CD8  0E00               	movlw	0
 13266  002CDA  6E45               	movwf	drawtext@i+1,c
 13267  002CDC  0E00               	movlw	0
 13268  002CDE  6E44               	movwf	drawtext@i,c
 13269  002CE0  D054               	goto	l6338
 13270  002CE2                     l6312:
 13271                           
 13272                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
 13273  002CE2  506C               	movf	_wrap,w,c
 13274  002CE4  B4D8               	btfsc	status,2,c
 13275  002CE6  D02C               	goto	l6328
 13276  002CE8  503E               	movf	drawtext@size,w,c
 13277  002CEA  0D05               	mullw	5
 13278  002CEC  5047               	movf	drawtext@cursor_x,w,c
 13279  002CEE  6E3F               	movwf	??_drawtext& (0+255),c
 13280  002CF0  6A40               	clrf	(??_drawtext+1)& (0+255),c
 13281  002CF2  50F3               	movf	prodl,w,c
 13282  002CF4  263F               	addwf	??_drawtext,f,c
 13283  002CF6  50F4               	movf	prodh,w,c
 13284  002CF8  2240               	addwfc	??_drawtext+1,f,c
 13285  002CFA  BE40               	btfsc	??_drawtext+1,7,c
 13286  002CFC  D021               	goto	l6328
 13287  002CFE  5040               	movf	??_drawtext+1,w,c
 13288  002D00  E104               	bnz	u6180
 13289  002D02  0E81               	movlw	129
 13290  002D04  5C3F               	subwf	??_drawtext,w,c
 13291  002D06  A0D8               	btfss	status,0,c
 13292  002D08  D01B               	goto	l6328
 13293  002D0A                     u6180:
 13294                           
 13295                           ;ST7735_TFT.c: 515: cursor_x = 0;
 13296  002D0A  0E00               	movlw	0
 13297  002D0C  6E47               	movwf	drawtext@cursor_x,c
 13298                           
 13299                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
 13300  002D0E  503E               	movf	drawtext@size,w,c
 13301  002D10  0D07               	mullw	7
 13302  002D12  50F3               	movf	prodl,w,c
 13303  002D14  2446               	addwf	drawtext@cursor_y,w,c
 13304  002D16  0F03               	addlw	3
 13305  002D18  6E46               	movwf	drawtext@cursor_y,c
 13306                           
 13307                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
 13308  002D1A  0EA0               	movlw	160
 13309  002D1C  6446               	cpfsgt	drawtext@cursor_y,c
 13310  002D1E  D003               	goto	l6324
 13311  002D20  0EA0               	movlw	160
 13312  002D22  6E46               	movwf	drawtext@cursor_y,c
 13313  002D24  D000               	goto	l6324
 13314  002D26                     l6324:
 13315                           
 13316                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
 13317  002D26  5044               	movf	drawtext@i,w,c
 13318  002D28  2438               	addwf	drawtext@_text,w,c
 13319  002D2A  6ED9               	movwf	fsr2l,c
 13320  002D2C  5045               	movf	drawtext@i+1,w,c
 13321  002D2E  2039               	addwfc	drawtext@_text+1,w,c
 13322  002D30  6EDA               	movwf	fsr2h,c
 13323  002D32  0E20               	movlw	32
 13324  002D34  18DE               	xorwf	postinc2,w,c
 13325  002D36  B4D8               	btfsc	status,2,c
 13326  002D38  D025               	goto	l6336
 13327  002D3A  D002               	goto	l6328
 13328  002D3C  D023               	goto	l6336
 13329  002D3E  D000               	goto	l6328
 13330  002D40                     l6328:
 13331                           
 13332                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 13333  002D40  C046  F02C         	movff	drawtext@cursor_y,drawChar@y
 13334  002D44  5044               	movf	drawtext@i,w,c
 13335  002D46  2438               	addwf	drawtext@_text,w,c
 13336  002D48  6ED9               	movwf	fsr2l,c
 13337  002D4A  5045               	movf	drawtext@i+1,w,c
 13338  002D4C  2039               	addwfc	drawtext@_text+1,w,c
 13339  002D4E  6EDA               	movwf	fsr2h,c
 13340  002D50  50DF               	movf	indf2,w,c
 13341  002D52  6E2D               	movwf	drawChar@c,c
 13342  002D54  C03A  F02E         	movff	drawtext@color,drawChar@color
 13343  002D58  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
 13344  002D5C  C03C  F030         	movff	drawtext@bg,drawChar@bg
 13345  002D60  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
 13346  002D64  C03E  F032         	movff	drawtext@size,drawChar@size
 13347  002D68  5047               	movf	drawtext@cursor_x,w,c
 13348  002D6A  EC34  F011         	call	_drawChar
 13349                           
 13350                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
 13351  002D6E  503E               	movf	drawtext@size,w,c
 13352  002D70  0D06               	mullw	6
 13353  002D72  50F3               	movf	prodl,w,c
 13354  002D74  2447               	addwf	drawtext@cursor_x,w,c
 13355  002D76  6E47               	movwf	drawtext@cursor_x,c
 13356                           
 13357                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
 13358  002D78  0E80               	movlw	128
 13359  002D7A  6447               	cpfsgt	drawtext@cursor_x,c
 13360  002D7C  D003               	goto	l6336
 13361  002D7E  0E80               	movlw	128
 13362  002D80  6E47               	movwf	drawtext@cursor_x,c
 13363  002D82  D000               	goto	l6336
 13364  002D84                     l6336:
 13365  002D84  4A44               	infsnz	drawtext@i,f,c
 13366  002D86  2A45               	incf	drawtext@i+1,f,c
 13367  002D88  D000               	goto	l6338
 13368  002D8A                     l6338:
 13369  002D8A  5042               	movf	drawtext@textsize,w,c
 13370  002D8C  5C44               	subwf	drawtext@i,w,c
 13371  002D8E  5043               	movf	drawtext@textsize+1,w,c
 13372  002D90  5845               	subwfb	drawtext@i+1,w,c
 13373  002D92  A0D8               	btfss	status,0,c
 13374  002D94  D7A6               	goto	l6312
 13375  002D96  0012               	return		;funcret
 13376  002D98                     __end_of_drawtext:
 13377                           	opt stack 0
 13378                           tblptru	equ	0xFF8
 13379                           tblptrh	equ	0xFF7
 13380                           tblptrl	equ	0xFF6
 13381                           tablat	equ	0xFF5
 13382                           prodh	equ	0xFF4
 13383                           prodl	equ	0xFF3
 13384                           intcon	equ	0xFF2
 13385                           intcon2	equ	0xFF1
 13386                           intcon3	equ	0xFF0
 13387                           postinc0	equ	0xFEE
 13388                           wreg	equ	0xFE8
 13389                           postdec1	equ	0xFE5
 13390                           fsr1l	equ	0xFE1
 13391                           indf2	equ	0xFDF
 13392                           postinc2	equ	0xFDE
 13393                           postdec2	equ	0xFDD
 13394                           fsr2h	equ	0xFDA
 13395                           fsr2l	equ	0xFD9
 13396                           status	equ	0xFD8
 13397                           
 13398 ;; *************** function _strlen *****************
 13399 ;; Defined at:
 13400 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strlen.c"
 13401 ;; Parameters:    Size  Location     Type
 13402 ;;  s               2   14[COMRAM] PTR const unsigned char 
 13403 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
 13404 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
 13405 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
 13406 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
 13407 ;; Auto vars:     Size  Location     Type
 13408 ;;  cp              2   18[COMRAM] PTR const unsigned char 
 13409 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
 13410 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
 13411 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
 13412 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
 13413 ;; Return value:  Size  Location     Type
 13414 ;;                  2   14[COMRAM] unsigned int 
 13415 ;; Registers used:
 13416 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13417 ;; Tracked objects:
 13418 ;;		On entry : 0/0
 13419 ;;		On exit  : 0/0
 13420 ;;		Unchanged: 0/0
 13421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13422 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13423 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13424 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13425 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13426 ;;Total ram usage:        6 bytes
 13427 ;; Hardware stack levels used:    1
 13428 ;; Hardware stack levels required when called:    2
 13429 ;; This function calls:
 13430 ;;		Nothing
 13431 ;; This function is called by:
 13432 ;;		_drawtext
 13433 ;; This function uses a non-reentrant model
 13434 ;;
 13435                           
 13436                           	psect	text57
 13437  003A88                     __ptext57:
 13438                           	opt stack 0
 13439  003A88                     _strlen:
 13440                           	opt stack 24
 13441                           
 13442                           ;incstack = 0
 13443  003A88  C00F  F013         	movff	strlen@s,strlen@cp
 13444  003A8C  C010  F014         	movff	strlen@s+1,strlen@cp+1
 13445  003A90  D003               	goto	l5982
 13446  003A92                     l5980:
 13447  003A92  4A13               	infsnz	strlen@cp,f,c
 13448  003A94  2A14               	incf	strlen@cp+1,f,c
 13449  003A96  D000               	goto	l5982
 13450  003A98                     l5982:
 13451  003A98  C013  FFD9         	movff	strlen@cp,fsr2l
 13452  003A9C  C014  FFDA         	movff	strlen@cp+1,fsr2h
 13453  003AA0  50DF               	movf	indf2,w,c
 13454  003AA2  A4D8               	btfss	status,2,c
 13455  003AA4  D7F6               	goto	l5980
 13456  003AA6  C00F  F011         	movff	strlen@s,??_strlen
 13457  003AAA  C010  F012         	movff	strlen@s+1,??_strlen+1
 13458  003AAE  1E11               	comf	??_strlen,f,c
 13459  003AB0  1E12               	comf	??_strlen+1,f,c
 13460  003AB2  4A11               	infsnz	??_strlen,f,c
 13461  003AB4  2A12               	incf	??_strlen+1,f,c
 13462  003AB6  5013               	movf	strlen@cp,w,c
 13463  003AB8  2411               	addwf	??_strlen,w,c
 13464  003ABA  6E0F               	movwf	?_strlen,c
 13465  003ABC  5014               	movf	strlen@cp+1,w,c
 13466  003ABE  2012               	addwfc	??_strlen+1,w,c
 13467  003AC0  6E10               	movwf	?_strlen+1,c
 13468  003AC2  D000               	goto	l1332
 13469  003AC4                     l1332:
 13470  003AC4  0012               	return		;funcret
 13471  003AC6                     __end_of_strlen:
 13472                           	opt stack 0
 13473                           tblptru	equ	0xFF8
 13474                           tblptrh	equ	0xFF7
 13475                           tblptrl	equ	0xFF6
 13476                           tablat	equ	0xFF5
 13477                           prodh	equ	0xFF4
 13478                           prodl	equ	0xFF3
 13479                           intcon	equ	0xFF2
 13480                           intcon2	equ	0xFF1
 13481                           intcon3	equ	0xFF0
 13482                           postinc0	equ	0xFEE
 13483                           wreg	equ	0xFE8
 13484                           postdec1	equ	0xFE5
 13485                           fsr1l	equ	0xFE1
 13486                           indf2	equ	0xFDF
 13487                           postinc2	equ	0xFDE
 13488                           postdec2	equ	0xFDD
 13489                           fsr2h	equ	0xFDA
 13490                           fsr2l	equ	0xFD9
 13491                           status	equ	0xFD8
 13492                           
 13493 ;; *************** function _drawChar *****************
 13494 ;; Defined at:
 13495 ;;		line 480 in file "ST7735_TFT.c"
 13496 ;; Parameters:    Size  Location     Type
 13497 ;;  x               1    wreg     unsigned char 
 13498 ;;  y               1   43[COMRAM] unsigned char 
 13499 ;;  c               1   44[COMRAM] unsigned char 
 13500 ;;  color           2   45[COMRAM] unsigned int 
 13501 ;;  bg              2   47[COMRAM] unsigned int 
 13502 ;;  size            1   49[COMRAM] unsigned char 
 13503 ;; Auto vars:     Size  Location     Type
 13504 ;;  x               1   51[COMRAM] unsigned char 
 13505 ;;  line            1   50[COMRAM] unsigned char 
 13506 ;;  i               1   53[COMRAM] unsigned char 
 13507 ;;  j               1   52[COMRAM] unsigned char 
 13508 ;; Return value:  Size  Location     Type
 13509 ;;		None               void
 13510 ;; Registers used:
 13511 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13512 ;; Tracked objects:
 13513 ;;		On entry : 0/0
 13514 ;;		On exit  : 0/0
 13515 ;;		Unchanged: 0/0
 13516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13517 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13518 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13520 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13521 ;;Total ram usage:       11 bytes
 13522 ;; Hardware stack levels used:    1
 13523 ;; Hardware stack levels required when called:    7
 13524 ;; This function calls:
 13525 ;;		___wmul
 13526 ;;		_drawPixel
 13527 ;;		_fillRect
 13528 ;; This function is called by:
 13529 ;;		_drawtext
 13530 ;; This function uses a non-reentrant model
 13531 ;;
 13532                           
 13533                           	psect	text58
 13534  002268                     __ptext58:
 13535                           	opt stack 0
 13536  002268                     _drawChar:
 13537                           	opt stack 19
 13538                           
 13539                           ;incstack = 0
 13540                           ;drawChar@x stored from wreg
 13541  002268  6E34               	movwf	drawChar@x,c
 13542                           
 13543                           ;ST7735_TFT.c: 482: char i, j;
 13544                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
 13545  00226A  0E80               	movlw	128
 13546  00226C  6034               	cpfslt	drawChar@x,c
 13547  00226E  D0A6               	goto	l227
 13548  002270  0E9F               	movlw	159
 13549  002272  642C               	cpfsgt	drawChar@y,c
 13550  002274  D001               	goto	l5928
 13551                           
 13552                           ;ST7735_TFT.c: 484: return;
 13553  002276  D0A2               	goto	l227
 13554  002278                     l5928:
 13555                           
 13556                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
 13557  002278  5032               	movf	drawChar@size,w,c
 13558  00227A  A4D8               	btfss	status,2,c
 13559  00227C  D003               	goto	l5932
 13560  00227E  0E01               	movlw	1
 13561  002280  6E32               	movwf	drawChar@size,c
 13562  002282  D000               	goto	l5932
 13563  002284                     l5932:
 13564                           
 13565                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
 13566  002284  0E1F               	movlw	31
 13567  002286  642D               	cpfsgt	drawChar@c,c
 13568  002288  D004               	goto	l5936
 13569  00228A  0E7E               	movlw	126
 13570  00228C  642D               	cpfsgt	drawChar@c,c
 13571  00228E  D003               	goto	l229
 13572  002290  D000               	goto	l5936
 13573  002292                     l5936:
 13574                           
 13575                           ;ST7735_TFT.c: 487: c = '?';
 13576  002292  0E3F               	movlw	63
 13577  002294  6E2D               	movwf	drawChar@c,c
 13578  002296                     l229:
 13579                           
 13580                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
 13581  002296  0E00               	movlw	0
 13582  002298  6E36               	movwf	drawChar@i,c
 13583  00229A                     l5938:
 13584  00229A  0E04               	movlw	4
 13585  00229C  6436               	cpfsgt	drawChar@i,c
 13586  00229E  D001               	goto	l5942
 13587  0022A0  D08D               	goto	l227
 13588  0022A2                     l5942:
 13589                           
 13590                           ;ST7735_TFT.c: 489: unsigned char line;
 13591                           ;ST7735_TFT.c: 490: if(c < 'S')
 13592  0022A2  0E53               	movlw	83
 13593  0022A4  602D               	cpfslt	drawChar@c,c
 13594  0022A6  D015               	goto	l5946
 13595                           
 13596                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
 13597  0022A8  0EE0               	movlw	224
 13598  0022AA  242D               	addwf	drawChar@c,w,c
 13599  0022AC  6E1D               	movwf	___wmul@multiplier,c
 13600  0022AE  6A1E               	clrf	___wmul@multiplier+1,c
 13601  0022B0  0EFF               	movlw	255
 13602  0022B2  221E               	addwfc	___wmul@multiplier+1,f,c
 13603  0022B4  0E00               	movlw	0
 13604  0022B6  6E20               	movwf	___wmul@multiplicand+1,c
 13605  0022B8  0E05               	movlw	5
 13606  0022BA  6E1F               	movwf	___wmul@multiplicand,c
 13607  0022BC  EC24  F01E         	call	___wmul	;wreg free
 13608  0022C0  5036               	movf	drawChar@i,w,c
 13609  0022C2  261D               	addwf	?___wmul,f,c
 13610  0022C4  0E00               	movlw	0
 13611  0022C6  221E               	addwfc	?___wmul+1,f,c
 13612  0022C8  0E15               	movlw	low _font
 13613  0022CA  241D               	addwf	?___wmul,w,c
 13614  0022CC  6EF6               	movwf	tblptrl,c
 13615  0022CE  0EFD               	movlw	high _font
 13616  0022D0  D014               	goto	L22
 13617  0022D2                     l5946:
 13618                           
 13619                           ;ST7735_TFT.c: 492: else
 13620                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
 13621  0022D2  0EAD               	movlw	173
 13622  0022D4  242D               	addwf	drawChar@c,w,c
 13623  0022D6  6E1D               	movwf	___wmul@multiplier,c
 13624  0022D8  6A1E               	clrf	___wmul@multiplier+1,c
 13625  0022DA  0EFF               	movlw	255
 13626  0022DC  221E               	addwfc	___wmul@multiplier+1,f,c
 13627  0022DE  0E00               	movlw	0
 13628  0022E0  6E20               	movwf	___wmul@multiplicand+1,c
 13629  0022E2  0E05               	movlw	5
 13630  0022E4  6E1F               	movwf	___wmul@multiplicand,c
 13631  0022E6  EC24  F01E         	call	___wmul	;wreg free
 13632  0022EA  5036               	movf	drawChar@i,w,c
 13633  0022EC  261D               	addwf	?___wmul,f,c
 13634  0022EE  0E00               	movlw	0
 13635  0022F0  221E               	addwfc	?___wmul+1,f,c
 13636  0022F2  0E14               	movlw	low _font2
 13637  0022F4  241D               	addwf	?___wmul,w,c
 13638  0022F6  6EF6               	movwf	tblptrl,c
 13639  0022F8  0EFE               	movlw	high _font2
 13640  0022FA                     L22:
 13641  0022FA  201E               	addwfc	?___wmul+1,w,c
 13642  0022FC  6EF7               	movwf	tblptrh,c
 13643  0022FE                     	if	0	;There are less than 3 active tblptr bytes
 13644  0022FE                     	endif
 13645  0022FE  0008               	tblrd		*
 13646  002300  CFF5 F033          	movff	tablat,drawChar@line
 13647  002304  D000               	goto	l5948
 13648  002306                     l5948:
 13649                           
 13650                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
 13651  002306  0E00               	movlw	0
 13652  002308  6E35               	movwf	drawChar@j,c
 13653  00230A                     l5950:
 13654  00230A  0E06               	movlw	6
 13655  00230C  6435               	cpfsgt	drawChar@j,c
 13656  00230E  D001               	goto	l236
 13657  002310  D053               	goto	l5974
 13658  002312                     l236:
 13659                           
 13660                           ;ST7735_TFT.c: 495: if(line & 0x01) {
 13661  002312  A033               	btfss	drawChar@line,0,c
 13662  002314  D023               	goto	l5960
 13663                           
 13664                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
 13665  002316  0432               	decf	drawChar@size,w,c
 13666  002318  A4D8               	btfss	status,2,c
 13667  00231A  D00C               	goto	l5958
 13668  00231C  502C               	movf	drawChar@y,w,c
 13669  00231E  2435               	addwf	drawChar@j,w,c
 13670  002320  6E16               	movwf	drawPixel@y,c
 13671  002322  C02E  F017         	movff	drawChar@color,drawPixel@color
 13672  002326  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
 13673  00232A  5034               	movf	drawChar@x,w,c
 13674  00232C  2436               	addwf	drawChar@i,w,c
 13675  00232E  ECCD  F01D         	call	_drawPixel
 13676  002332  D03E               	goto	l5968
 13677  002334                     l5958:
 13678                           
 13679                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
 13680  002334  5035               	movf	drawChar@j,w,c
 13681  002336  0232               	mulwf	drawChar@size,c
 13682  002338  50F3               	movf	prodl,w,c
 13683  00233A  242C               	addwf	drawChar@y,w,c
 13684  00233C  6E21               	movwf	fillRect@y,c
 13685  00233E  C032  F022         	movff	drawChar@size,fillRect@w
 13686  002342  C032  F023         	movff	drawChar@size,fillRect@h
 13687  002346  C02E  F024         	movff	drawChar@color,fillRect@color
 13688  00234A  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
 13689  00234E  5036               	movf	drawChar@i,w,c
 13690  002350  0232               	mulwf	drawChar@size,c
 13691  002352  50F3               	movf	prodl,w,c
 13692  002354  2434               	addwf	drawChar@x,w,c
 13693  002356  EC4E  F01C         	call	_fillRect
 13694                           
 13695                           ;ST7735_TFT.c: 498: }
 13696  00235A  D02A               	goto	l5968
 13697  00235C                     l5960:
 13698                           
 13699                           ;ST7735_TFT.c: 499: else if(bg != color) {
 13700  00235C  502E               	movf	drawChar@color,w,c
 13701  00235E  1830               	xorwf	drawChar@bg,w,c
 13702  002360  E104               	bnz	u5660
 13703  002362  502F               	movf	drawChar@color+1,w,c
 13704  002364  1831               	xorwf	drawChar@bg+1,w,c
 13705  002366  B4D8               	btfsc	status,2,c
 13706  002368  D023               	goto	l5968
 13707  00236A                     u5660:
 13708                           
 13709                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
 13710  00236A  0432               	decf	drawChar@size,w,c
 13711  00236C  A4D8               	btfss	status,2,c
 13712  00236E  D00C               	goto	l5966
 13713  002370  502C               	movf	drawChar@y,w,c
 13714  002372  2435               	addwf	drawChar@j,w,c
 13715  002374  6E16               	movwf	drawPixel@y,c
 13716  002376  C030  F017         	movff	drawChar@bg,drawPixel@color
 13717  00237A  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
 13718  00237E  5034               	movf	drawChar@x,w,c
 13719  002380  2436               	addwf	drawChar@i,w,c
 13720  002382  ECCD  F01D         	call	_drawPixel
 13721  002386  D014               	goto	l5968
 13722  002388                     l5966:
 13723                           
 13724                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
 13725  002388  5035               	movf	drawChar@j,w,c
 13726  00238A  0232               	mulwf	drawChar@size,c
 13727  00238C  50F3               	movf	prodl,w,c
 13728  00238E  242C               	addwf	drawChar@y,w,c
 13729  002390  6E21               	movwf	fillRect@y,c
 13730  002392  C032  F022         	movff	drawChar@size,fillRect@w
 13731  002396  C032  F023         	movff	drawChar@size,fillRect@h
 13732  00239A  C030  F024         	movff	drawChar@bg,fillRect@color
 13733  00239E  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
 13734  0023A2  5036               	movf	drawChar@i,w,c
 13735  0023A4  0232               	mulwf	drawChar@size,c
 13736  0023A6  50F3               	movf	prodl,w,c
 13737  0023A8  2434               	addwf	drawChar@x,w,c
 13738  0023AA  EC4E  F01C         	call	_fillRect
 13739  0023AE  D000               	goto	l5968
 13740  0023B0                     l5968:
 13741  0023B0  2A35               	incf	drawChar@j,f,c
 13742  0023B2  90D8               	bcf	status,0,c
 13743  0023B4  3233               	rrcf	drawChar@line,f,c
 13744  0023B6  D7A9               	goto	l5950
 13745  0023B8                     l5974:
 13746  0023B8  2A36               	incf	drawChar@i,f,c
 13747  0023BA  D76F               	goto	l5938
 13748  0023BC                     l227:
 13749  0023BC  0012               	return		;funcret
 13750  0023BE                     __end_of_drawChar:
 13751                           	opt stack 0
 13752                           tblptru	equ	0xFF8
 13753                           tblptrh	equ	0xFF7
 13754                           tblptrl	equ	0xFF6
 13755                           tablat	equ	0xFF5
 13756                           prodh	equ	0xFF4
 13757                           prodl	equ	0xFF3
 13758                           intcon	equ	0xFF2
 13759                           intcon2	equ	0xFF1
 13760                           intcon3	equ	0xFF0
 13761                           postinc0	equ	0xFEE
 13762                           wreg	equ	0xFE8
 13763                           postdec1	equ	0xFE5
 13764                           fsr1l	equ	0xFE1
 13765                           indf2	equ	0xFDF
 13766                           postinc2	equ	0xFDE
 13767                           postdec2	equ	0xFDD
 13768                           fsr2h	equ	0xFDA
 13769                           fsr2l	equ	0xFD9
 13770                           status	equ	0xFD8
 13771                           
 13772 ;; *************** function _fillRect *****************
 13773 ;; Defined at:
 13774 ;;		line 470 in file "ST7735_TFT.c"
 13775 ;; Parameters:    Size  Location     Type
 13776 ;;  x               1    wreg     unsigned char 
 13777 ;;  y               1   32[COMRAM] unsigned char 
 13778 ;;  w               1   33[COMRAM] unsigned char 
 13779 ;;  h               1   34[COMRAM] unsigned char 
 13780 ;;  color           2   35[COMRAM] unsigned int 
 13781 ;; Auto vars:     Size  Location     Type
 13782 ;;  x               1   40[COMRAM] unsigned char 
 13783 ;;  i               2   41[COMRAM] int 
 13784 ;; Return value:  Size  Location     Type
 13785 ;;		None               void
 13786 ;; Registers used:
 13787 ;;		wreg, status,2, status,0, cstack
 13788 ;; Tracked objects:
 13789 ;;		On entry : 0/0
 13790 ;;		On exit  : 0/0
 13791 ;;		Unchanged: 0/0
 13792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13793 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13794 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13795 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13796 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13797 ;;Total ram usage:       11 bytes
 13798 ;; Hardware stack levels used:    1
 13799 ;; Hardware stack levels required when called:    6
 13800 ;; This function calls:
 13801 ;;		_drawFastVLine
 13802 ;; This function is called by:
 13803 ;;		_drawChar
 13804 ;; This function uses a non-reentrant model
 13805 ;;
 13806                           
 13807                           	psect	text59
 13808  00389C                     __ptext59:
 13809                           	opt stack 0
 13810  00389C                     _fillRect:
 13811                           	opt stack 19
 13812                           
 13813                           ;incstack = 0
 13814                           ;fillRect@x stored from wreg
 13815  00389C  6E29               	movwf	fillRect@x,c
 13816                           
 13817                           ;ST7735_TFT.c: 472: signed int i;
 13818                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
 13819  00389E  C029  F02A         	movff	fillRect@x,fillRect@i
 13820  0038A2  6A2B               	clrf	fillRect@i+1,c
 13821  0038A4  D00E               	goto	l5718
 13822  0038A6                     l5714:
 13823                           
 13824                           ;ST7735_TFT.c: 475: {
 13825                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
 13826  0038A6  C021  F016         	movff	fillRect@y,drawFastVLine@y
 13827  0038AA  C023  F017         	movff	fillRect@h,drawFastVLine@h
 13828  0038AE  C024  F018         	movff	fillRect@color,drawFastVLine@color
 13829  0038B2  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
 13830  0038B6  502A               	movf	fillRect@i,w,c
 13831  0038B8  ECC6  F019         	call	_drawFastVLine
 13832  0038BC  4A2A               	infsnz	fillRect@i,f,c
 13833  0038BE  2A2B               	incf	fillRect@i+1,f,c
 13834  0038C0  D000               	goto	l5718
 13835  0038C2                     l5718:
 13836  0038C2  5022               	movf	fillRect@w,w,c
 13837  0038C4  C029  F026         	movff	fillRect@x,??_fillRect
 13838  0038C8  6A27               	clrf	(??_fillRect+1)& (0+255),c
 13839  0038CA  2626               	addwf	??_fillRect,f,c
 13840  0038CC  0E00               	movlw	0
 13841  0038CE  2227               	addwfc	??_fillRect+1,f,c
 13842  0038D0  5026               	movf	??_fillRect,w,c
 13843  0038D2  5C2A               	subwf	fillRect@i,w,c
 13844  0038D4  502B               	movf	fillRect@i+1,w,c
 13845  0038D6  0A80               	xorlw	128
 13846  0038D8  6E28               	movwf	(??_fillRect+2)& (0+255),c
 13847  0038DA  5027               	movf	??_fillRect+1,w,c
 13848  0038DC  0A80               	xorlw	128
 13849  0038DE  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
 13850  0038E0  A0D8               	btfss	status,0,c
 13851  0038E2  D7E1               	goto	l5714
 13852  0038E4  0012               	return		;funcret
 13853  0038E6                     __end_of_fillRect:
 13854                           	opt stack 0
 13855                           tblptru	equ	0xFF8
 13856                           tblptrh	equ	0xFF7
 13857                           tblptrl	equ	0xFF6
 13858                           tablat	equ	0xFF5
 13859                           prodh	equ	0xFF4
 13860                           prodl	equ	0xFF3
 13861                           intcon	equ	0xFF2
 13862                           intcon2	equ	0xFF1
 13863                           intcon3	equ	0xFF0
 13864                           postinc0	equ	0xFEE
 13865                           wreg	equ	0xFE8
 13866                           postdec1	equ	0xFE5
 13867                           fsr1l	equ	0xFE1
 13868                           indf2	equ	0xFDF
 13869                           postinc2	equ	0xFDE
 13870                           postdec2	equ	0xFDD
 13871                           fsr2h	equ	0xFDA
 13872                           fsr2l	equ	0xFD9
 13873                           status	equ	0xFD8
 13874                           
 13875 ;; *************** function _drawFastVLine *****************
 13876 ;; Defined at:
 13877 ;;		line 449 in file "ST7735_TFT.c"
 13878 ;; Parameters:    Size  Location     Type
 13879 ;;  x               1    wreg     unsigned char 
 13880 ;;  y               1   21[COMRAM] unsigned char 
 13881 ;;  h               1   22[COMRAM] unsigned char 
 13882 ;;  color           2   23[COMRAM] unsigned int 
 13883 ;; Auto vars:     Size  Location     Type
 13884 ;;  x               1   31[COMRAM] unsigned char 
 13885 ;;  lo              1   30[COMRAM] unsigned char 
 13886 ;;  hi              1   29[COMRAM] unsigned char 
 13887 ;; Return value:  Size  Location     Type
 13888 ;;		None               void
 13889 ;; Registers used:
 13890 ;;		wreg, status,2, status,0, cstack
 13891 ;; Tracked objects:
 13892 ;;		On entry : 0/0
 13893 ;;		On exit  : 0/0
 13894 ;;		Unchanged: 0/0
 13895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13896 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13897 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13898 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13899 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13900 ;;Total ram usage:       11 bytes
 13901 ;; Hardware stack levels used:    1
 13902 ;; Hardware stack levels required when called:    5
 13903 ;; This function calls:
 13904 ;;		_setAddrWindow
 13905 ;;		_spiwrite
 13906 ;; This function is called by:
 13907 ;;		_fillRect
 13908 ;;		_fillCircleHelper
 13909 ;;		_fillCircle
 13910 ;;		_drawRect
 13911 ;; This function uses a non-reentrant model
 13912 ;;
 13913                           
 13914                           	psect	text60
 13915  00338C                     __ptext60:
 13916                           	opt stack 0
 13917  00338C                     _drawFastVLine:
 13918                           	opt stack 19
 13919                           
 13920                           ;incstack = 0
 13921                           ;drawFastVLine@x stored from wreg
 13922  00338C  6E20               	movwf	drawFastVLine@x,c
 13923                           
 13924                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
 13925                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
 13926  00338E  0E80               	movlw	128
 13927  003390  6020               	cpfslt	drawFastVLine@x,c
 13928  003392  D03F               	goto	l211
 13929  003394  0E9F               	movlw	159
 13930  003396  6416               	cpfsgt	drawFastVLine@y,c
 13931  003398  D001               	goto	l5648
 13932                           
 13933                           ;ST7735_TFT.c: 453: return;
 13934  00339A  D03B               	goto	l211
 13935  00339C                     l5648:
 13936                           
 13937                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
 13938  00339C  0EFF               	movlw	255
 13939  00339E  6E1A               	movwf	??_drawFastVLine& (0+255),c
 13940  0033A0  0EFF               	movlw	255
 13941  0033A2  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
 13942  0033A4  5017               	movf	drawFastVLine@h,w,c
 13943  0033A6  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
 13944  0033AA  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
 13945  0033AC  261C               	addwf	??_drawFastVLine+2,f,c
 13946  0033AE  0E00               	movlw	0
 13947  0033B0  221D               	addwfc	??_drawFastVLine+3,f,c
 13948  0033B2  501A               	movf	??_drawFastVLine,w,c
 13949  0033B4  261C               	addwf	??_drawFastVLine+2,f,c
 13950  0033B6  501B               	movf	??_drawFastVLine+1,w,c
 13951  0033B8  221D               	addwfc	??_drawFastVLine+3,f,c
 13952  0033BA  BE1D               	btfsc	??_drawFastVLine+3,7,c
 13953  0033BC  D00B               	goto	l5652
 13954  0033BE  501D               	movf	??_drawFastVLine+3,w,c
 13955  0033C0  E104               	bnz	u5040
 13956  0033C2  0EA0               	movlw	160
 13957  0033C4  5C1C               	subwf	??_drawFastVLine+2,w,c
 13958  0033C6  A0D8               	btfss	status,0,c
 13959  0033C8  D005               	goto	l5652
 13960  0033CA                     u5040:
 13961                           
 13962                           ;ST7735_TFT.c: 455: h = 160 - y;
 13963  0033CA  5016               	movf	drawFastVLine@y,w,c
 13964  0033CC  0800               	sublw	0
 13965  0033CE  0FA0               	addlw	160
 13966  0033D0  6E17               	movwf	drawFastVLine@h,c
 13967  0033D2  D000               	goto	l5652
 13968  0033D4                     l5652:
 13969                           
 13970                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
 13971  0033D4  5019               	movf	drawFastVLine@color+1,w,c
 13972  0033D6  6E1E               	movwf	drawFastVLine@hi,c
 13973  0033D8  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
 13974                           
 13975                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
 13976  0033DC  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
 13977  0033E0  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
 13978  0033E4  5016               	movf	drawFastVLine@y,w,c
 13979  0033E6  2417               	addwf	drawFastVLine@h,w,c
 13980  0033E8  6E1A               	movwf	??_drawFastVLine& (0+255),c
 13981  0033EA  041A               	decf	??_drawFastVLine,w,c
 13982  0033EC  6E14               	movwf	setAddrWindow@y1,c
 13983  0033EE  5020               	movf	drawFastVLine@x,w,c
 13984  0033F0  EC27  F01C         	call	_setAddrWindow
 13985                           
 13986                           ;ST7735_TFT.c: 458: PORTCbits.RC2 = 1;
 13987  0033F4  8482               	bsf	3970,2,c	;volatile
 13988                           
 13989                           ;ST7735_TFT.c: 459: PORTCbits.RC4 = 0;
 13990  0033F6  9882               	bcf	3970,4,c	;volatile
 13991                           
 13992                           ;ST7735_TFT.c: 461: while (h--) {
 13993  0033F8  D007               	goto	l5664
 13994  0033FA                     l5662:
 13995                           
 13996                           ;ST7735_TFT.c: 462: spiwrite(hi);
 13997  0033FA  501E               	movf	drawFastVLine@hi,w,c
 13998  0033FC  ECB4  F01E         	call	_spiwrite
 13999                           
 14000                           ;ST7735_TFT.c: 463: spiwrite(lo);
 14001  003400  501F               	movf	drawFastVLine@lo,w,c
 14002  003402  ECB4  F01E         	call	_spiwrite
 14003  003406  D000               	goto	l5664
 14004  003408                     l5664:
 14005  003408  0617               	decf	drawFastVLine@h,f,c
 14006  00340A  2817               	incf	drawFastVLine@h,w,c
 14007  00340C  A4D8               	btfss	status,2,c
 14008  00340E  D7F5               	goto	l5662
 14009                           
 14010                           ;ST7735_TFT.c: 464: }
 14011                           ;ST7735_TFT.c: 465: PORTCbits.RC4 = 1;
 14012  003410  8882               	bsf	3970,4,c	;volatile
 14013  003412                     l211:
 14014  003412  0012               	return		;funcret
 14015  003414                     __end_of_drawFastVLine:
 14016                           	opt stack 0
 14017                           tblptru	equ	0xFF8
 14018                           tblptrh	equ	0xFF7
 14019                           tblptrl	equ	0xFF6
 14020                           tablat	equ	0xFF5
 14021                           prodh	equ	0xFF4
 14022                           prodl	equ	0xFF3
 14023                           intcon	equ	0xFF2
 14024                           intcon2	equ	0xFF1
 14025                           intcon3	equ	0xFF0
 14026                           postinc0	equ	0xFEE
 14027                           wreg	equ	0xFE8
 14028                           postdec1	equ	0xFE5
 14029                           fsr1l	equ	0xFE1
 14030                           indf2	equ	0xFDF
 14031                           postinc2	equ	0xFDE
 14032                           postdec2	equ	0xFDD
 14033                           fsr2h	equ	0xFDA
 14034                           fsr2l	equ	0xFD9
 14035                           status	equ	0xFD8
 14036                           
 14037 ;; *************** function _drawPixel *****************
 14038 ;; Defined at:
 14039 ;;		line 440 in file "ST7735_TFT.c"
 14040 ;; Parameters:    Size  Location     Type
 14041 ;;  x               1    wreg     unsigned char 
 14042 ;;  y               1   21[COMRAM] unsigned char 
 14043 ;;  color           2   22[COMRAM] unsigned int 
 14044 ;; Auto vars:     Size  Location     Type
 14045 ;;  x               1   24[COMRAM] unsigned char 
 14046 ;; Return value:  Size  Location     Type
 14047 ;;		None               void
 14048 ;; Registers used:
 14049 ;;		wreg, status,2, status,0, cstack
 14050 ;; Tracked objects:
 14051 ;;		On entry : 0/0
 14052 ;;		On exit  : 0/0
 14053 ;;		Unchanged: 0/0
 14054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14055 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14056 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14058 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14059 ;;Total ram usage:        4 bytes
 14060 ;; Hardware stack levels used:    1
 14061 ;; Hardware stack levels required when called:    5
 14062 ;; This function calls:
 14063 ;;		_setAddrWindow
 14064 ;;		_write_data
 14065 ;; This function is called by:
 14066 ;;		_drawChar
 14067 ;;		_drawCircle
 14068 ;;		_drawCircleHelper
 14069 ;; This function uses a non-reentrant model
 14070 ;;
 14071                           
 14072                           	psect	text61
 14073  003B9A                     __ptext61:
 14074                           	opt stack 0
 14075  003B9A                     _drawPixel:
 14076                           	opt stack 20
 14077                           
 14078                           ;incstack = 0
 14079                           ;drawPixel@x stored from wreg
 14080  003B9A  6E19               	movwf	drawPixel@x,c
 14081                           
 14082                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
 14083  003B9C  0E80               	movlw	128
 14084  003B9E  6019               	cpfslt	drawPixel@x,c
 14085  003BA0  D013               	goto	l205
 14086  003BA2  0E9F               	movlw	159
 14087  003BA4  6416               	cpfsgt	drawPixel@y,c
 14088  003BA6  D001               	goto	l5706
 14089                           
 14090                           ;ST7735_TFT.c: 443: return;
 14091  003BA8  D00F               	goto	l205
 14092  003BAA                     l5706:
 14093                           
 14094                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
 14095  003BAA  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
 14096  003BAE  2819               	incf	drawPixel@x,w,c
 14097  003BB0  6E13               	movwf	setAddrWindow@x1,c
 14098  003BB2  2816               	incf	drawPixel@y,w,c
 14099  003BB4  6E14               	movwf	setAddrWindow@y1,c
 14100  003BB6  5019               	movf	drawPixel@x,w,c
 14101  003BB8  EC27  F01C         	call	_setAddrWindow
 14102                           
 14103                           ;ST7735_TFT.c: 445: write_data(color >> 8);
 14104  003BBC  5018               	movf	drawPixel@color+1,w,c
 14105  003BBE  ECD0  F01E         	call	_write_data
 14106                           
 14107                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
 14108  003BC2  5017               	movf	drawPixel@color,w,c
 14109  003BC4  ECD0  F01E         	call	_write_data
 14110  003BC8                     l205:
 14111  003BC8  0012               	return		;funcret
 14112  003BCA                     __end_of_drawPixel:
 14113                           	opt stack 0
 14114                           tblptru	equ	0xFF8
 14115                           tblptrh	equ	0xFF7
 14116                           tblptrl	equ	0xFF6
 14117                           tablat	equ	0xFF5
 14118                           prodh	equ	0xFF4
 14119                           prodl	equ	0xFF3
 14120                           intcon	equ	0xFF2
 14121                           intcon2	equ	0xFF1
 14122                           intcon3	equ	0xFF0
 14123                           postinc0	equ	0xFEE
 14124                           wreg	equ	0xFE8
 14125                           postdec1	equ	0xFE5
 14126                           fsr1l	equ	0xFE1
 14127                           indf2	equ	0xFDF
 14128                           postinc2	equ	0xFDE
 14129                           postdec2	equ	0xFDD
 14130                           fsr2h	equ	0xFDA
 14131                           fsr2l	equ	0xFD9
 14132                           status	equ	0xFD8
 14133                           
 14134 ;; *************** function _setAddrWindow *****************
 14135 ;; Defined at:
 14136 ;;		line 425 in file "ST7735_TFT.c"
 14137 ;; Parameters:    Size  Location     Type
 14138 ;;  x0              1    wreg     unsigned char 
 14139 ;;  y0              1   17[COMRAM] unsigned char 
 14140 ;;  x1              1   18[COMRAM] unsigned char 
 14141 ;;  y1              1   19[COMRAM] unsigned char 
 14142 ;; Auto vars:     Size  Location     Type
 14143 ;;  x0              1   20[COMRAM] unsigned char 
 14144 ;; Return value:  Size  Location     Type
 14145 ;;		None               void
 14146 ;; Registers used:
 14147 ;;		wreg, status,2, status,0, cstack
 14148 ;; Tracked objects:
 14149 ;;		On entry : 0/0
 14150 ;;		On exit  : 0/0
 14151 ;;		Unchanged: 0/0
 14152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14153 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14154 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14156 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14157 ;;Total ram usage:        4 bytes
 14158 ;; Hardware stack levels used:    1
 14159 ;; Hardware stack levels required when called:    4
 14160 ;; This function calls:
 14161 ;;		_write_command
 14162 ;;		_write_data
 14163 ;; This function is called by:
 14164 ;;		_drawPixel
 14165 ;;		_drawFastVLine
 14166 ;;		_fillRectangle
 14167 ;;		_drawFastHLine
 14168 ;; This function uses a non-reentrant model
 14169 ;;
 14170                           
 14171                           	psect	text62
 14172  00384E                     __ptext62:
 14173                           	opt stack 0
 14174  00384E                     _setAddrWindow:
 14175                           	opt stack 19
 14176                           
 14177                           ;incstack = 0
 14178                           ;setAddrWindow@x0 stored from wreg
 14179  00384E  6E15               	movwf	setAddrWindow@x0,c
 14180                           
 14181                           ;ST7735_TFT.c: 427: write_command(0x2A);
 14182  003850  0E2A               	movlw	42
 14183  003852  ECD8  F01E         	call	_write_command
 14184                           
 14185                           ;ST7735_TFT.c: 428: write_data(0);
 14186  003856  0E00               	movlw	0
 14187  003858  ECD0  F01E         	call	_write_data
 14188                           
 14189                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
 14190  00385C  5015               	movf	setAddrWindow@x0,w,c
 14191  00385E  2469               	addwf	_colstart,w,c
 14192  003860  ECD0  F01E         	call	_write_data
 14193                           
 14194                           ;ST7735_TFT.c: 430: write_data(0);
 14195  003864  0E00               	movlw	0
 14196  003866  ECD0  F01E         	call	_write_data
 14197                           
 14198                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
 14199  00386A  5013               	movf	setAddrWindow@x1,w,c
 14200  00386C  2469               	addwf	_colstart,w,c
 14201  00386E  ECD0  F01E         	call	_write_data
 14202                           
 14203                           ;ST7735_TFT.c: 432: write_command(0x2B);
 14204  003872  0E2B               	movlw	43
 14205  003874  ECD8  F01E         	call	_write_command
 14206                           
 14207                           ;ST7735_TFT.c: 433: write_data(0);
 14208  003878  0E00               	movlw	0
 14209  00387A  ECD0  F01E         	call	_write_data
 14210                           
 14211                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
 14212  00387E  5012               	movf	setAddrWindow@y0,w,c
 14213  003880  246B               	addwf	_rowstart,w,c
 14214  003882  ECD0  F01E         	call	_write_data
 14215                           
 14216                           ;ST7735_TFT.c: 435: write_data(0);
 14217  003886  0E00               	movlw	0
 14218  003888  ECD0  F01E         	call	_write_data
 14219                           
 14220                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
 14221  00388C  5014               	movf	setAddrWindow@y1,w,c
 14222  00388E  246B               	addwf	_rowstart,w,c
 14223  003890  ECD0  F01E         	call	_write_data
 14224                           
 14225                           ;ST7735_TFT.c: 437: write_command(0x2C);
 14226  003894  0E2C               	movlw	44
 14227  003896  ECD8  F01E         	call	_write_command
 14228  00389A  0012               	return		;funcret
 14229  00389C                     __end_of_setAddrWindow:
 14230                           	opt stack 0
 14231                           tblptru	equ	0xFF8
 14232                           tblptrh	equ	0xFF7
 14233                           tblptrl	equ	0xFF6
 14234                           tablat	equ	0xFF5
 14235                           prodh	equ	0xFF4
 14236                           prodl	equ	0xFF3
 14237                           intcon	equ	0xFF2
 14238                           intcon2	equ	0xFF1
 14239                           intcon3	equ	0xFF0
 14240                           postinc0	equ	0xFEE
 14241                           wreg	equ	0xFE8
 14242                           postdec1	equ	0xFE5
 14243                           fsr1l	equ	0xFE1
 14244                           indf2	equ	0xFDF
 14245                           postinc2	equ	0xFDE
 14246                           postdec2	equ	0xFDD
 14247                           fsr2h	equ	0xFDA
 14248                           fsr2l	equ	0xFD9
 14249                           status	equ	0xFD8
 14250                           
 14251 ;; *************** function _write_data *****************
 14252 ;; Defined at:
 14253 ;;		line 242 in file "ST7735_TFT.c"
 14254 ;; Parameters:    Size  Location     Type
 14255 ;;  data_           1    wreg     unsigned char 
 14256 ;; Auto vars:     Size  Location     Type
 14257 ;;  data_           1   16[COMRAM] unsigned char 
 14258 ;; Return value:  Size  Location     Type
 14259 ;;		None               void
 14260 ;; Registers used:
 14261 ;;		wreg, status,2, cstack
 14262 ;; Tracked objects:
 14263 ;;		On entry : 0/0
 14264 ;;		On exit  : 0/0
 14265 ;;		Unchanged: 0/0
 14266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14268 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14270 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14271 ;;Total ram usage:        1 bytes
 14272 ;; Hardware stack levels used:    1
 14273 ;; Hardware stack levels required when called:    3
 14274 ;; This function calls:
 14275 ;;		_spiwrite
 14276 ;; This function is called by:
 14277 ;;		_Rcmd1
 14278 ;;		_Rcmd2red
 14279 ;;		_Rcmd3
 14280 ;;		_setAddrWindow
 14281 ;;		_drawPixel
 14282 ;;		_TFT_GreenTab_Initialize
 14283 ;;		_Bcmd
 14284 ;;		_setScrollDefinition
 14285 ;;		_Rcmd2green
 14286 ;;		_VerticalScroll
 14287 ;; This function uses a non-reentrant model
 14288 ;;
 14289                           
 14290                           	psect	text63
 14291  003DA0                     __ptext63:
 14292                           	opt stack 0
 14293  003DA0                     _write_data:
 14294                           	opt stack 19
 14295                           
 14296                           ;incstack = 0
 14297                           ;write_data@data_ stored from wreg
 14298  003DA0  6E11               	movwf	write_data@data_,c
 14299                           
 14300                           ;ST7735_TFT.c: 244: PORTCbits.RC4 = 0;
 14301  003DA2  9882               	bcf	3970,4,c	;volatile
 14302                           
 14303                           ;ST7735_TFT.c: 245: PORTCbits.RC2 = 1;
 14304  003DA4  8482               	bsf	3970,2,c	;volatile
 14305                           
 14306                           ;ST7735_TFT.c: 246: spiwrite(data_);
 14307  003DA6  5011               	movf	write_data@data_,w,c
 14308  003DA8  ECB4  F01E         	call	_spiwrite
 14309                           
 14310                           ;ST7735_TFT.c: 247: PORTCbits.RC4 = 1;
 14311  003DAC  8882               	bsf	3970,4,c	;volatile
 14312  003DAE  0012               	return		;funcret
 14313  003DB0                     __end_of_write_data:
 14314                           	opt stack 0
 14315                           tblptru	equ	0xFF8
 14316                           tblptrh	equ	0xFF7
 14317                           tblptrl	equ	0xFF6
 14318                           tablat	equ	0xFF5
 14319                           prodh	equ	0xFF4
 14320                           prodl	equ	0xFF3
 14321                           intcon	equ	0xFF2
 14322                           intcon2	equ	0xFF1
 14323                           intcon3	equ	0xFF0
 14324                           postinc0	equ	0xFEE
 14325                           wreg	equ	0xFE8
 14326                           postdec1	equ	0xFE5
 14327                           fsr1l	equ	0xFE1
 14328                           indf2	equ	0xFDF
 14329                           postinc2	equ	0xFDE
 14330                           postdec2	equ	0xFDD
 14331                           fsr2h	equ	0xFDA
 14332                           fsr2l	equ	0xFD9
 14333                           status	equ	0xFD8
 14334                           
 14335 ;; *************** function _write_command *****************
 14336 ;; Defined at:
 14337 ;;		line 231 in file "ST7735_TFT.c"
 14338 ;; Parameters:    Size  Location     Type
 14339 ;;  cmd_            1    wreg     unsigned char 
 14340 ;; Auto vars:     Size  Location     Type
 14341 ;;  cmd_            1   16[COMRAM] unsigned char 
 14342 ;; Return value:  Size  Location     Type
 14343 ;;		None               void
 14344 ;; Registers used:
 14345 ;;		wreg, status,2, cstack
 14346 ;; Tracked objects:
 14347 ;;		On entry : 0/0
 14348 ;;		On exit  : 0/0
 14349 ;;		Unchanged: 0/0
 14350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14352 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14354 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14355 ;;Total ram usage:        1 bytes
 14356 ;; Hardware stack levels used:    1
 14357 ;; Hardware stack levels required when called:    3
 14358 ;; This function calls:
 14359 ;;		_spiwrite
 14360 ;; This function is called by:
 14361 ;;		_Rcmd1
 14362 ;;		_Rcmd2red
 14363 ;;		_Rcmd3
 14364 ;;		_setAddrWindow
 14365 ;;		_TFT_GreenTab_Initialize
 14366 ;;		_Bcmd
 14367 ;;		_setScrollDefinition
 14368 ;;		_Rcmd2green
 14369 ;;		_VerticalScroll
 14370 ;; This function uses a non-reentrant model
 14371 ;;
 14372                           
 14373                           	psect	text64
 14374  003DB0                     __ptext64:
 14375                           	opt stack 0
 14376  003DB0                     _write_command:
 14377                           	opt stack 19
 14378                           
 14379                           ;incstack = 0
 14380                           ;write_command@cmd_ stored from wreg
 14381  003DB0  6E11               	movwf	write_command@cmd_,c
 14382                           
 14383                           ;ST7735_TFT.c: 233: PORTCbits.RC4 = 0;
 14384  003DB2  9882               	bcf	3970,4,c	;volatile
 14385                           
 14386                           ;ST7735_TFT.c: 235: PORTCbits.RC2 = 0;
 14387  003DB4  9482               	bcf	3970,2,c	;volatile
 14388                           
 14389                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
 14390  003DB6  5011               	movf	write_command@cmd_,w,c
 14391  003DB8  ECB4  F01E         	call	_spiwrite
 14392                           
 14393                           ;ST7735_TFT.c: 238: PORTCbits.RC4 = 1;
 14394  003DBC  8882               	bsf	3970,4,c	;volatile
 14395  003DBE  0012               	return		;funcret
 14396  003DC0                     __end_of_write_command:
 14397                           	opt stack 0
 14398                           tblptru	equ	0xFF8
 14399                           tblptrh	equ	0xFF7
 14400                           tblptrl	equ	0xFF6
 14401                           tablat	equ	0xFF5
 14402                           prodh	equ	0xFF4
 14403                           prodl	equ	0xFF3
 14404                           intcon	equ	0xFF2
 14405                           intcon2	equ	0xFF1
 14406                           intcon3	equ	0xFF0
 14407                           postinc0	equ	0xFEE
 14408                           wreg	equ	0xFE8
 14409                           postdec1	equ	0xFE5
 14410                           fsr1l	equ	0xFE1
 14411                           indf2	equ	0xFDF
 14412                           postinc2	equ	0xFDE
 14413                           postdec2	equ	0xFDD
 14414                           fsr2h	equ	0xFDA
 14415                           fsr2l	equ	0xFD9
 14416                           status	equ	0xFD8
 14417                           
 14418 ;; *************** function _spiwrite *****************
 14419 ;; Defined at:
 14420 ;;		line 222 in file "ST7735_TFT.c"
 14421 ;; Parameters:    Size  Location     Type
 14422 ;;  spidata         1    wreg     unsigned char 
 14423 ;; Auto vars:     Size  Location     Type
 14424 ;;  spidata         1   15[COMRAM] unsigned char 
 14425 ;;  x               1   14[COMRAM] unsigned char 
 14426 ;; Return value:  Size  Location     Type
 14427 ;;		None               void
 14428 ;; Registers used:
 14429 ;;		wreg
 14430 ;; Tracked objects:
 14431 ;;		On entry : 0/0
 14432 ;;		On exit  : 0/0
 14433 ;;		Unchanged: 0/0
 14434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14436 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14438 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14439 ;;Total ram usage:        2 bytes
 14440 ;; Hardware stack levels used:    1
 14441 ;; Hardware stack levels required when called:    2
 14442 ;; This function calls:
 14443 ;;		Nothing
 14444 ;; This function is called by:
 14445 ;;		_write_command
 14446 ;;		_write_data
 14447 ;;		_drawFastVLine
 14448 ;;		_fillRectangle
 14449 ;;		_drawFastHLine
 14450 ;; This function uses a non-reentrant model
 14451 ;;
 14452                           
 14453                           	psect	text65
 14454  003D68                     __ptext65:
 14455                           	opt stack 0
 14456  003D68                     _spiwrite:
 14457                           	opt stack 21
 14458                           
 14459                           ;incstack = 0
 14460                           ;spiwrite@spidata stored from wreg
 14461  003D68  6E10               	movwf	spiwrite@spidata,c
 14462                           
 14463                           ;ST7735_TFT.c: 224: char x;
 14464                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
 14465  003D6A  969E               	bcf	3998,3,c	;volatile
 14466                           
 14467                           ;ST7735_TFT.c: 226: x = SSPBUF;
 14468  003D6C  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
 14469                           
 14470                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
 14471  003D70  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
 14472                           
 14473                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
 14474  003D74  D000               	goto	l161
 14475  003D76                     l161:
 14476  003D76  A0C7               	btfss	4039,0,c	;volatile
 14477  003D78  D7FE               	goto	l161
 14478  003D7A  0012               	return		;funcret
 14479  003D7C                     __end_of_spiwrite:
 14480                           	opt stack 0
 14481                           tblptru	equ	0xFF8
 14482                           tblptrh	equ	0xFF7
 14483                           tblptrl	equ	0xFF6
 14484                           tablat	equ	0xFF5
 14485                           prodh	equ	0xFF4
 14486                           prodl	equ	0xFF3
 14487                           intcon	equ	0xFF2
 14488                           intcon2	equ	0xFF1
 14489                           intcon3	equ	0xFF0
 14490                           postinc0	equ	0xFEE
 14491                           wreg	equ	0xFE8
 14492                           postdec1	equ	0xFE5
 14493                           fsr1l	equ	0xFE1
 14494                           indf2	equ	0xFDF
 14495                           postinc2	equ	0xFDE
 14496                           postdec2	equ	0xFDD
 14497                           fsr2h	equ	0xFDA
 14498                           fsr2l	equ	0xFD9
 14499                           status	equ	0xFD8
 14500                           
 14501 ;; *************** function ___wmul *****************
 14502 ;; Defined at:
 14503 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
 14504 ;; Parameters:    Size  Location     Type
 14505 ;;  multiplier      2   28[COMRAM] unsigned int 
 14506 ;;  multiplicand    2   30[COMRAM] unsigned int 
 14507 ;; Auto vars:     Size  Location     Type
 14508 ;;  product         2   32[COMRAM] unsigned int 
 14509 ;; Return value:  Size  Location     Type
 14510 ;;                  2   28[COMRAM] unsigned int 
 14511 ;; Registers used:
 14512 ;;		wreg, status,2, status,0, prodl, prodh
 14513 ;; Tracked objects:
 14514 ;;		On entry : 0/0
 14515 ;;		On exit  : 0/0
 14516 ;;		Unchanged: 0/0
 14517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14518 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14519 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14521 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14522 ;;Total ram usage:        6 bytes
 14523 ;; Hardware stack levels used:    1
 14524 ;; Hardware stack levels required when called:    2
 14525 ;; This function calls:
 14526 ;;		Nothing
 14527 ;; This function is called by:
 14528 ;;		_delay_ms
 14529 ;;		_drawChar
 14530 ;;		_update_LCD_misc
 14531 ;;		_fround
 14532 ;;		_scale
 14533 ;;		_printf
 14534 ;; This function uses a non-reentrant model
 14535 ;;
 14536                           
 14537                           	psect	text66
 14538  003C48                     __ptext66:
 14539                           	opt stack 0
 14540  003C48                     ___wmul:
 14541                           	opt stack 23
 14542                           
 14543                           ;incstack = 0
 14544  003C48  501D               	movf	___wmul@multiplier,w,c
 14545  003C4A  021F               	mulwf	___wmul@multiplicand,c
 14546  003C4C  CFF3 F021          	movff	prodl,___wmul@product
 14547  003C50  CFF4 F022          	movff	prodh,___wmul@product+1
 14548  003C54  501D               	movf	___wmul@multiplier,w,c
 14549  003C56  0220               	mulwf	___wmul@multiplicand+1,c
 14550  003C58  50F3               	movf	prodl,w,c
 14551  003C5A  2622               	addwf	___wmul@product+1,f,c
 14552  003C5C  501E               	movf	___wmul@multiplier+1,w,c
 14553  003C5E  021F               	mulwf	___wmul@multiplicand,c
 14554  003C60  50F3               	movf	prodl,w,c
 14555  003C62  2622               	addwf	___wmul@product+1,f,c
 14556  003C64  C021  F01D         	movff	___wmul@product,?___wmul
 14557  003C68  C022  F01E         	movff	___wmul@product+1,?___wmul+1
 14558  003C6C  D000               	goto	l732
 14559  003C6E                     l732:
 14560  003C6E  0012               	return		;funcret
 14561  003C70                     __end_of___wmul:
 14562                           	opt stack 0
 14563                           tblptru	equ	0xFF8
 14564                           tblptrh	equ	0xFF7
 14565                           tblptrl	equ	0xFF6
 14566                           tablat	equ	0xFF5
 14567                           prodh	equ	0xFF4
 14568                           prodl	equ	0xFF3
 14569                           intcon	equ	0xFF2
 14570                           intcon2	equ	0xFF1
 14571                           intcon3	equ	0xFF0
 14572                           postinc0	equ	0xFEE
 14573                           wreg	equ	0xFE8
 14574                           postdec1	equ	0xFE5
 14575                           fsr1l	equ	0xFE1
 14576                           indf2	equ	0xFDF
 14577                           postinc2	equ	0xFDE
 14578                           postdec2	equ	0xFDD
 14579                           fsr2h	equ	0xFDA
 14580                           fsr2l	equ	0xFD9
 14581                           status	equ	0xFD8
 14582                           
 14583 ;; *************** function ___awmod *****************
 14584 ;; Defined at:
 14585 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awmod.c"
 14586 ;; Parameters:    Size  Location     Type
 14587 ;;  dividend        2   14[COMRAM] int 
 14588 ;;  divisor         2   16[COMRAM] int 
 14589 ;; Auto vars:     Size  Location     Type
 14590 ;;  sign            1   19[COMRAM] unsigned char 
 14591 ;;  counter         1   18[COMRAM] unsigned char 
 14592 ;; Return value:  Size  Location     Type
 14593 ;;                  2   14[COMRAM] int 
 14594 ;; Registers used:
 14595 ;;		wreg, status,2, status,0
 14596 ;; Tracked objects:
 14597 ;;		On entry : 0/0
 14598 ;;		On exit  : 0/0
 14599 ;;		Unchanged: 0/0
 14600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14601 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14602 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14604 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14605 ;;Total ram usage:        6 bytes
 14606 ;; Hardware stack levels used:    1
 14607 ;; Hardware stack levels required when called:    2
 14608 ;; This function calls:
 14609 ;;		Nothing
 14610 ;; This function is called by:
 14611 ;;		_update_LCD_count
 14612 ;;		_update_LCD_PED_Count
 14613 ;;		_fround
 14614 ;;		_scale
 14615 ;; This function uses a non-reentrant model
 14616 ;;
 14617                           
 14618                           	psect	text67
 14619  003520                     __ptext67:
 14620                           	opt stack 0
 14621  003520                     ___awmod:
 14622                           	opt stack 25
 14623                           
 14624                           ;incstack = 0
 14625  003520  0E00               	movlw	0
 14626  003522  6E14               	movwf	___awmod@sign,c
 14627  003524  AE10               	btfss	___awmod@dividend+1,7,c
 14628  003526  D007               	goto	l5896
 14629  003528  6C0F               	negf	___awmod@dividend,c
 14630  00352A  1E10               	comf	___awmod@dividend+1,f,c
 14631  00352C  B0D8               	btfsc	status,0,c
 14632  00352E  2A10               	incf	___awmod@dividend+1,f,c
 14633  003530  0E01               	movlw	1
 14634  003532  6E14               	movwf	___awmod@sign,c
 14635  003534  D000               	goto	l5896
 14636  003536                     l5896:
 14637  003536  AE12               	btfss	___awmod@divisor+1,7,c
 14638  003538  D005               	goto	l5900
 14639  00353A  6C11               	negf	___awmod@divisor,c
 14640  00353C  1E12               	comf	___awmod@divisor+1,f,c
 14641  00353E  B0D8               	btfsc	status,0,c
 14642  003540  2A12               	incf	___awmod@divisor+1,f,c
 14643  003542  D000               	goto	l5900
 14644  003544                     l5900:
 14645  003544  5011               	movf	___awmod@divisor,w,c
 14646  003546  1012               	iorwf	___awmod@divisor+1,w,c
 14647  003548  B4D8               	btfsc	status,2,c
 14648  00354A  D01D               	goto	l5916
 14649  00354C  0E01               	movlw	1
 14650  00354E  6E13               	movwf	___awmod@counter,c
 14651  003550  D005               	goto	l5906
 14652  003552                     l5904:
 14653  003552  90D8               	bcf	status,0,c
 14654  003554  3611               	rlcf	___awmod@divisor,f,c
 14655  003556  3612               	rlcf	___awmod@divisor+1,f,c
 14656  003558  2A13               	incf	___awmod@counter,f,c
 14657  00355A  D000               	goto	l5906
 14658  00355C                     l5906:
 14659  00355C  BE12               	btfsc	___awmod@divisor+1,7,c
 14660  00355E  D002               	goto	l5908
 14661  003560  D7F8               	goto	l5904
 14662  003562  D000               	goto	l5908
 14663  003564                     l5908:
 14664  003564  5011               	movf	___awmod@divisor,w,c
 14665  003566  5C0F               	subwf	___awmod@dividend,w,c
 14666  003568  5012               	movf	___awmod@divisor+1,w,c
 14667  00356A  5810               	subwfb	___awmod@dividend+1,w,c
 14668  00356C  A0D8               	btfss	status,0,c
 14669  00356E  D005               	goto	l5912
 14670  003570  5011               	movf	___awmod@divisor,w,c
 14671  003572  5E0F               	subwf	___awmod@dividend,f,c
 14672  003574  5012               	movf	___awmod@divisor+1,w,c
 14673  003576  5A10               	subwfb	___awmod@dividend+1,f,c
 14674  003578  D000               	goto	l5912
 14675  00357A                     l5912:
 14676  00357A  90D8               	bcf	status,0,c
 14677  00357C  3212               	rrcf	___awmod@divisor+1,f,c
 14678  00357E  3211               	rrcf	___awmod@divisor,f,c
 14679  003580  2E13               	decfsz	___awmod@counter,f,c
 14680  003582  D7F0               	goto	l5908
 14681  003584  D000               	goto	l5916
 14682  003586                     l5916:
 14683  003586  5014               	movf	___awmod@sign,w,c
 14684  003588  B4D8               	btfsc	status,2,c
 14685  00358A  D005               	goto	l5920
 14686  00358C  6C0F               	negf	___awmod@dividend,c
 14687  00358E  1E10               	comf	___awmod@dividend+1,f,c
 14688  003590  B0D8               	btfsc	status,0,c
 14689  003592  2A10               	incf	___awmod@dividend+1,f,c
 14690  003594  D000               	goto	l5920
 14691  003596                     l5920:
 14692  003596  C00F  F00F         	movff	___awmod@dividend,?___awmod
 14693  00359A  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
 14694  00359E  D000               	goto	l938
 14695  0035A0                     l938:
 14696  0035A0  0012               	return		;funcret
 14697  0035A2                     __end_of___awmod:
 14698                           	opt stack 0
 14699                           tblptru	equ	0xFF8
 14700                           tblptrh	equ	0xFF7
 14701                           tblptrl	equ	0xFF6
 14702                           tablat	equ	0xFF5
 14703                           prodh	equ	0xFF4
 14704                           prodl	equ	0xFF3
 14705                           intcon	equ	0xFF2
 14706                           intcon2	equ	0xFF1
 14707                           intcon3	equ	0xFF0
 14708                           postinc0	equ	0xFEE
 14709                           wreg	equ	0xFE8
 14710                           postdec1	equ	0xFE5
 14711                           fsr1l	equ	0xFE1
 14712                           indf2	equ	0xFDF
 14713                           postinc2	equ	0xFDE
 14714                           postdec2	equ	0xFDD
 14715                           fsr2h	equ	0xFDA
 14716                           fsr2l	equ	0xFD9
 14717                           status	equ	0xFD8
 14718                           
 14719 ;; *************** function ___awdiv *****************
 14720 ;; Defined at:
 14721 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awdiv.c"
 14722 ;; Parameters:    Size  Location     Type
 14723 ;;  dividend        2   20[COMRAM] int 
 14724 ;;  divisor         2   22[COMRAM] int 
 14725 ;; Auto vars:     Size  Location     Type
 14726 ;;  quotient        2   26[COMRAM] int 
 14727 ;;  sign            1   25[COMRAM] unsigned char 
 14728 ;;  counter         1   24[COMRAM] unsigned char 
 14729 ;; Return value:  Size  Location     Type
 14730 ;;                  2   20[COMRAM] int 
 14731 ;; Registers used:
 14732 ;;		wreg, status,2, status,0
 14733 ;; Tracked objects:
 14734 ;;		On entry : 0/0
 14735 ;;		On exit  : 0/0
 14736 ;;		Unchanged: 0/0
 14737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14738 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14739 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14741 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14742 ;;Total ram usage:        8 bytes
 14743 ;; Hardware stack levels used:    1
 14744 ;; Hardware stack levels required when called:    2
 14745 ;; This function calls:
 14746 ;;		Nothing
 14747 ;; This function is called by:
 14748 ;;		_update_LCD_count
 14749 ;;		_update_LCD_PED_Count
 14750 ;;		_fround
 14751 ;;		_scale
 14752 ;;		_printf
 14753 ;; This function uses a non-reentrant model
 14754 ;;
 14755                           
 14756                           	psect	text68
 14757  0031E2                     __ptext68:
 14758                           	opt stack 0
 14759  0031E2                     ___awdiv:
 14760                           	opt stack 25
 14761                           
 14762                           ;incstack = 0
 14763  0031E2  0E00               	movlw	0
 14764  0031E4  6E1A               	movwf	___awdiv@sign,c
 14765  0031E6  AE18               	btfss	___awdiv@divisor+1,7,c
 14766  0031E8  D007               	goto	l5852
 14767  0031EA  6C17               	negf	___awdiv@divisor,c
 14768  0031EC  1E18               	comf	___awdiv@divisor+1,f,c
 14769  0031EE  B0D8               	btfsc	status,0,c
 14770  0031F0  2A18               	incf	___awdiv@divisor+1,f,c
 14771  0031F2  0E01               	movlw	1
 14772  0031F4  6E1A               	movwf	___awdiv@sign,c
 14773  0031F6  D000               	goto	l5852
 14774  0031F8                     l5852:
 14775  0031F8  AE16               	btfss	___awdiv@dividend+1,7,c
 14776  0031FA  D007               	goto	l5858
 14777  0031FC  6C15               	negf	___awdiv@dividend,c
 14778  0031FE  1E16               	comf	___awdiv@dividend+1,f,c
 14779  003200  B0D8               	btfsc	status,0,c
 14780  003202  2A16               	incf	___awdiv@dividend+1,f,c
 14781  003204  0E01               	movlw	1
 14782  003206  1A1A               	xorwf	___awdiv@sign,f,c
 14783  003208  D000               	goto	l5858
 14784  00320A                     l5858:
 14785  00320A  0E00               	movlw	0
 14786  00320C  6E1C               	movwf	___awdiv@quotient+1,c
 14787  00320E  0E00               	movlw	0
 14788  003210  6E1B               	movwf	___awdiv@quotient,c
 14789  003212  5017               	movf	___awdiv@divisor,w,c
 14790  003214  1018               	iorwf	___awdiv@divisor+1,w,c
 14791  003216  B4D8               	btfsc	status,2,c
 14792  003218  D021               	goto	l5880
 14793  00321A  0E01               	movlw	1
 14794  00321C  6E19               	movwf	___awdiv@counter,c
 14795  00321E  D005               	goto	l5866
 14796  003220                     l5864:
 14797  003220  90D8               	bcf	status,0,c
 14798  003222  3617               	rlcf	___awdiv@divisor,f,c
 14799  003224  3618               	rlcf	___awdiv@divisor+1,f,c
 14800  003226  2A19               	incf	___awdiv@counter,f,c
 14801  003228  D000               	goto	l5866
 14802  00322A                     l5866:
 14803  00322A  BE18               	btfsc	___awdiv@divisor+1,7,c
 14804  00322C  D002               	goto	l5868
 14805  00322E  D7F8               	goto	l5864
 14806  003230  D000               	goto	l5868
 14807  003232                     l5868:
 14808  003232  90D8               	bcf	status,0,c
 14809  003234  361B               	rlcf	___awdiv@quotient,f,c
 14810  003236  361C               	rlcf	___awdiv@quotient+1,f,c
 14811  003238  5017               	movf	___awdiv@divisor,w,c
 14812  00323A  5C15               	subwf	___awdiv@dividend,w,c
 14813  00323C  5018               	movf	___awdiv@divisor+1,w,c
 14814  00323E  5816               	subwfb	___awdiv@dividend+1,w,c
 14815  003240  A0D8               	btfss	status,0,c
 14816  003242  D006               	goto	l5876
 14817  003244  5017               	movf	___awdiv@divisor,w,c
 14818  003246  5E15               	subwf	___awdiv@dividend,f,c
 14819  003248  5018               	movf	___awdiv@divisor+1,w,c
 14820  00324A  5A16               	subwfb	___awdiv@dividend+1,f,c
 14821  00324C  801B               	bsf	___awdiv@quotient,0,c
 14822  00324E  D000               	goto	l5876
 14823  003250                     l5876:
 14824  003250  90D8               	bcf	status,0,c
 14825  003252  3218               	rrcf	___awdiv@divisor+1,f,c
 14826  003254  3217               	rrcf	___awdiv@divisor,f,c
 14827  003256  2E19               	decfsz	___awdiv@counter,f,c
 14828  003258  D7EC               	goto	l5868
 14829  00325A  D000               	goto	l5880
 14830  00325C                     l5880:
 14831  00325C  501A               	movf	___awdiv@sign,w,c
 14832  00325E  B4D8               	btfsc	status,2,c
 14833  003260  D005               	goto	l5884
 14834  003262  6C1B               	negf	___awdiv@quotient,c
 14835  003264  1E1C               	comf	___awdiv@quotient+1,f,c
 14836  003266  B0D8               	btfsc	status,0,c
 14837  003268  2A1C               	incf	___awdiv@quotient+1,f,c
 14838  00326A  D000               	goto	l5884
 14839  00326C                     l5884:
 14840  00326C  C01B  F015         	movff	___awdiv@quotient,?___awdiv
 14841  003270  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
 14842  003274  D000               	goto	l925
 14843  003276                     l925:
 14844  003276  0012               	return		;funcret
 14845  003278                     __end_of___awdiv:
 14846                           	opt stack 0
 14847                           tblptru	equ	0xFF8
 14848                           tblptrh	equ	0xFF7
 14849                           tblptrl	equ	0xFF6
 14850                           tablat	equ	0xFF5
 14851                           prodh	equ	0xFF4
 14852                           prodl	equ	0xFF3
 14853                           intcon	equ	0xFF2
 14854                           intcon2	equ	0xFF1
 14855                           intcon3	equ	0xFF0
 14856                           postinc0	equ	0xFEE
 14857                           wreg	equ	0xFE8
 14858                           postdec1	equ	0xFE5
 14859                           fsr1l	equ	0xFE1
 14860                           indf2	equ	0xFDF
 14861                           postinc2	equ	0xFDE
 14862                           postdec2	equ	0xFDD
 14863                           fsr2h	equ	0xFDA
 14864                           fsr2l	equ	0xFD9
 14865                           status	equ	0xFD8
 14866                           
 14867 ;; *************** function _WAIT_1_SEC_W_BEEP *****************
 14868 ;; Defined at:
 14869 ;;		line 512 in file "Lab9p1.c"
 14870 ;; Parameters:    Size  Location     Type
 14871 ;;		None
 14872 ;; Auto vars:     Size  Location     Type
 14873 ;;		None
 14874 ;; Return value:  Size  Location     Type
 14875 ;;		None               void
 14876 ;; Registers used:
 14877 ;;		wreg, status,2, cstack
 14878 ;; Tracked objects:
 14879 ;;		On entry : 0/0
 14880 ;;		On exit  : 0/0
 14881 ;;		Unchanged: 0/0
 14882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14887 ;;Total ram usage:        0 bytes
 14888 ;; Hardware stack levels used:    1
 14889 ;; Hardware stack levels required when called:    3
 14890 ;; This function calls:
 14891 ;;		_Activate_Buzzer
 14892 ;;		_Deactivate_Buzzer
 14893 ;;		_WAIT_HALF_SEC
 14894 ;; This function is called by:
 14895 ;;		_PED_Control
 14896 ;; This function uses a non-reentrant model
 14897 ;;
 14898                           
 14899                           	psect	text69
 14900  003D3E                     __ptext69:
 14901                           	opt stack 0
 14902  003D3E                     _WAIT_1_SEC_W_BEEP:
 14903                           	opt stack 25
 14904                           
 14905                           ;Lab9p1.c: 514: PORTDbits.RD7 = 1;
 14906                           
 14907                           ;incstack = 0
 14908  003D3E  8E83               	bsf	3971,7,c	;volatile
 14909                           
 14910                           ;Lab9p1.c: 515: Activate_Buzzer();
 14911  003D40  ECC7  F01E         	call	_Activate_Buzzer	;wreg free
 14912                           
 14913                           ;Lab9p1.c: 516: WAIT_HALF_SEC();
 14914  003D44  EC7C  F01E         	call	_WAIT_HALF_SEC	;wreg free
 14915                           
 14916                           ;Lab9p1.c: 517: PORTDbits.RD7 = 0;
 14917  003D48  9E83               	bcf	3971,7,c	;volatile
 14918                           
 14919                           ;Lab9p1.c: 518: Deactivate_Buzzer ();
 14920  003D4A  EC07  F01F         	call	_Deactivate_Buzzer	;wreg free
 14921                           
 14922                           ;Lab9p1.c: 519: WAIT_HALF_SEC();
 14923  003D4E  EC7C  F01E         	call	_WAIT_HALF_SEC	;wreg free
 14924  003D52  0012               	return		;funcret
 14925  003D54                     __end_of_WAIT_1_SEC_W_BEEP:
 14926                           	opt stack 0
 14927                           tblptru	equ	0xFF8
 14928                           tblptrh	equ	0xFF7
 14929                           tblptrl	equ	0xFF6
 14930                           tablat	equ	0xFF5
 14931                           prodh	equ	0xFF4
 14932                           prodl	equ	0xFF3
 14933                           intcon	equ	0xFF2
 14934                           intcon2	equ	0xFF1
 14935                           intcon3	equ	0xFF0
 14936                           postinc0	equ	0xFEE
 14937                           wreg	equ	0xFE8
 14938                           postdec1	equ	0xFE5
 14939                           fsr1l	equ	0xFE1
 14940                           indf2	equ	0xFDF
 14941                           postinc2	equ	0xFDE
 14942                           postdec2	equ	0xFDD
 14943                           fsr2h	equ	0xFDA
 14944                           fsr2l	equ	0xFD9
 14945                           status	equ	0xFD8
 14946                           
 14947 ;; *************** function _WAIT_HALF_SEC *****************
 14948 ;; Defined at:
 14949 ;;		line 489 in file "Lab9p1.c"
 14950 ;; Parameters:    Size  Location     Type
 14951 ;;		None
 14952 ;; Auto vars:     Size  Location     Type
 14953 ;;		None
 14954 ;; Return value:  Size  Location     Type
 14955 ;;		None               void
 14956 ;; Registers used:
 14957 ;;		wreg, status,2
 14958 ;; Tracked objects:
 14959 ;;		On entry : 0/0
 14960 ;;		On exit  : 0/0
 14961 ;;		Unchanged: 0/0
 14962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14967 ;;Total ram usage:        0 bytes
 14968 ;; Hardware stack levels used:    1
 14969 ;; Hardware stack levels required when called:    2
 14970 ;; This function calls:
 14971 ;;		Nothing
 14972 ;; This function is called by:
 14973 ;;		_WAIT_1_SEC
 14974 ;;		_WAIT_1_SEC_W_BEEP
 14975 ;; This function uses a non-reentrant model
 14976 ;;
 14977                           
 14978                           	psect	text70
 14979  003CF8                     __ptext70:
 14980                           	opt stack 0
 14981  003CF8                     _WAIT_HALF_SEC:
 14982                           	opt stack 25
 14983                           
 14984                           ;Lab9p1.c: 491: T0CON = 0x03;
 14985                           
 14986                           ;incstack = 0
 14987  003CF8  0E03               	movlw	3
 14988  003CFA  6ED5               	movwf	4053,c	;volatile
 14989                           
 14990                           ;Lab9p1.c: 492: TMR0L = 0xDB;
 14991  003CFC  0EDB               	movlw	219
 14992  003CFE  6ED6               	movwf	4054,c	;volatile
 14993                           
 14994                           ;Lab9p1.c: 493: TMR0H = 0xB;
 14995  003D00  0E0B               	movlw	11
 14996  003D02  6ED7               	movwf	4055,c	;volatile
 14997                           
 14998                           ;Lab9p1.c: 494: INTCONbits.TMR0IF = 0;
 14999  003D04  94F2               	bcf	intcon,2,c	;volatile
 15000                           
 15001                           ;Lab9p1.c: 495: T0CONbits.TMR0ON = 1;
 15002  003D06  8ED5               	bsf	4053,7,c	;volatile
 15003                           
 15004                           ;Lab9p1.c: 496: while (INTCONbits.TMR0IF == 0);
 15005  003D08  D000               	goto	l448
 15006  003D0A                     l448:
 15007  003D0A  A4F2               	btfss	intcon,2,c	;volatile
 15008  003D0C  D7FE               	goto	l448
 15009                           
 15010                           ;Lab9p1.c: 497: T0CONbits.TMR0ON = 0;
 15011  003D0E  9ED5               	bcf	4053,7,c	;volatile
 15012  003D10  0012               	return		;funcret
 15013  003D12                     __end_of_WAIT_HALF_SEC:
 15014                           	opt stack 0
 15015                           tblptru	equ	0xFF8
 15016                           tblptrh	equ	0xFF7
 15017                           tblptrl	equ	0xFF6
 15018                           tablat	equ	0xFF5
 15019                           prodh	equ	0xFF4
 15020                           prodl	equ	0xFF3
 15021                           intcon	equ	0xFF2
 15022                           intcon2	equ	0xFF1
 15023                           intcon3	equ	0xFF0
 15024                           postinc0	equ	0xFEE
 15025                           wreg	equ	0xFE8
 15026                           postdec1	equ	0xFE5
 15027                           fsr1l	equ	0xFE1
 15028                           indf2	equ	0xFDF
 15029                           postinc2	equ	0xFDE
 15030                           postdec2	equ	0xFDD
 15031                           fsr2h	equ	0xFDA
 15032                           fsr2l	equ	0xFD9
 15033                           status	equ	0xFD8
 15034                           
 15035 ;; *************** function _Deactivate_Buzzer *****************
 15036 ;; Defined at:
 15037 ;;		line 530 in file "Lab9p1.c"
 15038 ;; Parameters:    Size  Location     Type
 15039 ;;		None
 15040 ;; Auto vars:     Size  Location     Type
 15041 ;;		None
 15042 ;; Return value:  Size  Location     Type
 15043 ;;		None               void
 15044 ;; Registers used:
 15045 ;;		wreg, status,2
 15046 ;; Tracked objects:
 15047 ;;		On entry : 0/0
 15048 ;;		On exit  : 0/0
 15049 ;;		Unchanged: 0/0
 15050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15055 ;;Total ram usage:        0 bytes
 15056 ;; Hardware stack levels used:    1
 15057 ;; Hardware stack levels required when called:    2
 15058 ;; This function calls:
 15059 ;;		Nothing
 15060 ;; This function is called by:
 15061 ;;		_WAIT_1_SEC_W_BEEP
 15062 ;; This function uses a non-reentrant model
 15063 ;;
 15064                           
 15065                           	psect	text71
 15066  003E0E                     __ptext71:
 15067                           	opt stack 0
 15068  003E0E                     _Deactivate_Buzzer:
 15069                           	opt stack 25
 15070                           
 15071                           ;Lab9p1.c: 532: CCP2CON = 0x0;
 15072                           
 15073                           ;incstack = 0
 15074  003E0E  0E00               	movlw	0
 15075  003E10  6EBA               	movwf	4026,c	;volatile
 15076                           
 15077                           ;Lab9p1.c: 533: PORTBbits.RB3 = 0;
 15078  003E12  9681               	bcf	3969,3,c	;volatile
 15079  003E14  0012               	return		;funcret
 15080  003E16                     __end_of_Deactivate_Buzzer:
 15081                           	opt stack 0
 15082                           tblptru	equ	0xFF8
 15083                           tblptrh	equ	0xFF7
 15084                           tblptrl	equ	0xFF6
 15085                           tablat	equ	0xFF5
 15086                           prodh	equ	0xFF4
 15087                           prodl	equ	0xFF3
 15088                           intcon	equ	0xFF2
 15089                           intcon2	equ	0xFF1
 15090                           intcon3	equ	0xFF0
 15091                           postinc0	equ	0xFEE
 15092                           wreg	equ	0xFE8
 15093                           postdec1	equ	0xFE5
 15094                           fsr1l	equ	0xFE1
 15095                           indf2	equ	0xFDF
 15096                           postinc2	equ	0xFDE
 15097                           postdec2	equ	0xFDD
 15098                           fsr2h	equ	0xFDA
 15099                           fsr2l	equ	0xFD9
 15100                           status	equ	0xFD8
 15101                           
 15102 ;; *************** function _Activate_Buzzer *****************
 15103 ;; Defined at:
 15104 ;;		line 522 in file "Lab9p1.c"
 15105 ;; Parameters:    Size  Location     Type
 15106 ;;		None
 15107 ;; Auto vars:     Size  Location     Type
 15108 ;;		None
 15109 ;; Return value:  Size  Location     Type
 15110 ;;		None               void
 15111 ;; Registers used:
 15112 ;;		wreg, status,2
 15113 ;; Tracked objects:
 15114 ;;		On entry : 0/0
 15115 ;;		On exit  : 0/0
 15116 ;;		Unchanged: 0/0
 15117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15122 ;;Total ram usage:        0 bytes
 15123 ;; Hardware stack levels used:    1
 15124 ;; Hardware stack levels required when called:    2
 15125 ;; This function calls:
 15126 ;;		Nothing
 15127 ;; This function is called by:
 15128 ;;		_WAIT_1_SEC_W_BEEP
 15129 ;; This function uses a non-reentrant model
 15130 ;;
 15131                           
 15132                           	psect	text72
 15133  003D8E                     __ptext72:
 15134                           	opt stack 0
 15135  003D8E                     _Activate_Buzzer:
 15136                           	opt stack 25
 15137                           
 15138                           ;Lab9p1.c: 524: PR2 = 0b11111001 ;
 15139                           
 15140                           ;incstack = 0
 15141  003D8E  0EF9               	movlw	249
 15142  003D90  6ECB               	movwf	4043,c	;volatile
 15143                           
 15144                           ;Lab9p1.c: 525: T2CON = 0b00000101 ;
 15145  003D92  0E05               	movlw	5
 15146  003D94  6ECA               	movwf	4042,c	;volatile
 15147                           
 15148                           ;Lab9p1.c: 526: CCPR2L = 0b01001010 ;
 15149  003D96  0E4A               	movlw	74
 15150  003D98  6EBB               	movwf	4027,c	;volatile
 15151                           
 15152                           ;Lab9p1.c: 527: CCP2CON = 0b00111100 ;
 15153  003D9A  0E3C               	movlw	60
 15154  003D9C  6EBA               	movwf	4026,c	;volatile
 15155  003D9E  0012               	return		;funcret
 15156  003DA0                     __end_of_Activate_Buzzer:
 15157                           	opt stack 0
 15158                           tblptru	equ	0xFF8
 15159                           tblptrh	equ	0xFF7
 15160                           tblptrl	equ	0xFF6
 15161                           tablat	equ	0xFF5
 15162                           prodh	equ	0xFF4
 15163                           prodl	equ	0xFF3
 15164                           intcon	equ	0xFF2
 15165                           intcon2	equ	0xFF1
 15166                           intcon3	equ	0xFF0
 15167                           postinc0	equ	0xFEE
 15168                           wreg	equ	0xFE8
 15169                           postdec1	equ	0xFE5
 15170                           fsr1l	equ	0xFE1
 15171                           indf2	equ	0xFDF
 15172                           postinc2	equ	0xFDE
 15173                           postdec2	equ	0xFDD
 15174                           fsr2h	equ	0xFDA
 15175                           fsr2l	equ	0xFD9
 15176                           status	equ	0xFD8
 15177                           
 15178 ;; *************** function _chkisr *****************
 15179 ;; Defined at:
 15180 ;;		line 761 in file "Lab9p1.c"
 15181 ;; Parameters:    Size  Location     Type
 15182 ;;		None
 15183 ;; Auto vars:     Size  Location     Type
 15184 ;;		None
 15185 ;; Return value:  Size  Location     Type
 15186 ;;		None               void
 15187 ;; Registers used:
 15188 ;;		wreg, status,2, cstack
 15189 ;; Tracked objects:
 15190 ;;		On entry : 0/0
 15191 ;;		On exit  : 0/0
 15192 ;;		Unchanged: 0/0
 15193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15196 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15197 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15198 ;;Total ram usage:       14 bytes
 15199 ;; Hardware stack levels used:    1
 15200 ;; Hardware stack levels required when called:    1
 15201 ;; This function calls:
 15202 ;;		_INT0_ISR
 15203 ;;		_INT1_ISR
 15204 ;;		_INT2_ISR
 15205 ;; This function is called by:
 15206 ;;		Interrupt level 2
 15207 ;; This function uses a non-reentrant model
 15208 ;;
 15209                           
 15210                           	psect	intcode
 15211  000008                     __pintcode:
 15212                           	opt stack 0
 15213  000008                     _chkisr:
 15214                           	opt stack 18
 15215                           
 15216                           ;incstack = 0
 15217  000008  CFFA F001          	movff	pclath,??_chkisr
 15218  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
 15219  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
 15220  000014  ED4D  F01A         	call	int_func,f	;refresh shadow registers
 15221                           pclatu	equ	0xFFB
 15222                           pclath	equ	0xFFA
 15223                           tblptru	equ	0xFF8
 15224                           tblptrh	equ	0xFF7
 15225                           tblptrl	equ	0xFF6
 15226                           tablat	equ	0xFF5
 15227                           prodh	equ	0xFF4
 15228                           prodl	equ	0xFF3
 15229                           intcon	equ	0xFF2
 15230                           intcon2	equ	0xFF1
 15231                           intcon3	equ	0xFF0
 15232                           postinc0	equ	0xFEE
 15233                           fsr0l	equ	0xFE9
 15234                           wreg	equ	0xFE8
 15235                           postdec1	equ	0xFE5
 15236                           fsr1l	equ	0xFE1
 15237                           indf2	equ	0xFDF
 15238                           postinc2	equ	0xFDE
 15239                           postdec2	equ	0xFDD
 15240                           fsr2h	equ	0xFDA
 15241                           fsr2l	equ	0xFD9
 15242                           status	equ	0xFD8
 15243                           
 15244                           	psect	intcode_body
 15245  00349A                     __pintcode_body:
 15246                           	opt stack 18
 15247  00349A                     int_func:
 15248                           	opt stack 18
 15249  00349A  0006               	pop		; remove dummy address from shadow register refresh
 15250  00349C  CFEA F004          	movff	fsr0h,??_chkisr+3
 15251  0034A0  CFE1 F005          	movff	fsr1l,??_chkisr+4
 15252  0034A4  CFE2 F006          	movff	fsr1h,??_chkisr+5
 15253  0034A8  CFD9 F007          	movff	fsr2l,??_chkisr+6
 15254  0034AC  CFDA F008          	movff	fsr2h,??_chkisr+7
 15255  0034B0  CFF3 F009          	movff	prodl,??_chkisr+8
 15256  0034B4  CFF4 F00A          	movff	prodh,??_chkisr+9
 15257  0034B8  CFF6 F00B          	movff	tblptrl,??_chkisr+10
 15258  0034BC  CFF7 F00C          	movff	tblptrh,??_chkisr+11
 15259  0034C0  CFF8 F00D          	movff	tblptru,??_chkisr+12
 15260  0034C4  CFF5 F00E          	movff	tablat,??_chkisr+13
 15261                           
 15262                           ;Lab9p1.c: 763: if (INTCONbits.INT0IF == 1) INT0_ISR();
 15263  0034C8  A2F2               	btfss	intcon,1,c	;volatile
 15264  0034CA  D003               	goto	i2l5602
 15265  0034CC  ECF5  F01E         	call	_INT0_ISR	;wreg free
 15266  0034D0  D000               	goto	i2l5602
 15267  0034D2                     i2l5602:
 15268                           
 15269                           ;Lab9p1.c: 764: if (INTCON3bits.INT1IF == 1) INT1_ISR();
 15270  0034D2  A0F0               	btfss	intcon3,0,c	;volatile
 15271  0034D4  D003               	goto	i2l5606
 15272  0034D6  EC02  F01F         	call	_INT1_ISR	;wreg free
 15273  0034DA  D000               	goto	i2l5606
 15274  0034DC                     i2l5606:
 15275                           
 15276                           ;Lab9p1.c: 765: if (INTCON3bits.INT2IF == 1) INT2_ISR();
 15277  0034DC  A2F0               	btfss	intcon3,1,c	;volatile
 15278  0034DE  D003               	goto	i2l553
 15279  0034E0  ECEE  F01E         	call	_INT2_ISR	;wreg free
 15280  0034E4  D000               	goto	i2l553
 15281  0034E6                     i2l553:
 15282  0034E6  C00E  FFF5         	movff	??_chkisr+13,tablat
 15283  0034EA  C00D  FFF8         	movff	??_chkisr+12,tblptru
 15284  0034EE  C00C  FFF7         	movff	??_chkisr+11,tblptrh
 15285  0034F2  C00B  FFF6         	movff	??_chkisr+10,tblptrl
 15286  0034F6  C00A  FFF4         	movff	??_chkisr+9,prodh
 15287  0034FA  C009  FFF3         	movff	??_chkisr+8,prodl
 15288  0034FE  C008  FFDA         	movff	??_chkisr+7,fsr2h
 15289  003502  C007  FFD9         	movff	??_chkisr+6,fsr2l
 15290  003506  C006  FFE2         	movff	??_chkisr+5,fsr1h
 15291  00350A  C005  FFE1         	movff	??_chkisr+4,fsr1l
 15292  00350E  C004  FFEA         	movff	??_chkisr+3,fsr0h
 15293  003512  C003  FFE9         	movff	??_chkisr+2,fsr0l
 15294  003516  C002  FFFB         	movff	??_chkisr+1,pclatu
 15295  00351A  C001  FFFA         	movff	??_chkisr,pclath
 15296  00351E  0011               	retfie		f
 15297  003520                     __end_of_chkisr:
 15298                           	opt stack 0
 15299                           pclatu	equ	0xFFB
 15300                           pclath	equ	0xFFA
 15301                           tblptru	equ	0xFF8
 15302                           tblptrh	equ	0xFF7
 15303                           tblptrl	equ	0xFF6
 15304                           tablat	equ	0xFF5
 15305                           prodh	equ	0xFF4
 15306                           prodl	equ	0xFF3
 15307                           intcon	equ	0xFF2
 15308                           intcon2	equ	0xFF1
 15309                           intcon3	equ	0xFF0
 15310                           postinc0	equ	0xFEE
 15311                           fsr0h	equ	0xFEA
 15312                           fsr0l	equ	0xFE9
 15313                           wreg	equ	0xFE8
 15314                           postdec1	equ	0xFE5
 15315                           fsr1h	equ	0xFE2
 15316                           fsr1l	equ	0xFE1
 15317                           indf2	equ	0xFDF
 15318                           postinc2	equ	0xFDE
 15319                           postdec2	equ	0xFDD
 15320                           fsr2h	equ	0xFDA
 15321                           fsr2l	equ	0xFD9
 15322                           status	equ	0xFD8
 15323                           
 15324 ;; *************** function _INT2_ISR *****************
 15325 ;; Defined at:
 15326 ;;		line 780 in file "Lab9p1.c"
 15327 ;; Parameters:    Size  Location     Type
 15328 ;;		None
 15329 ;; Auto vars:     Size  Location     Type
 15330 ;;		None
 15331 ;; Return value:  Size  Location     Type
 15332 ;;		None               void
 15333 ;; Registers used:
 15334 ;;		wreg, status,2
 15335 ;; Tracked objects:
 15336 ;;		On entry : 0/0
 15337 ;;		On exit  : 0/0
 15338 ;;		Unchanged: 0/0
 15339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15344 ;;Total ram usage:        0 bytes
 15345 ;; Hardware stack levels used:    1
 15346 ;; This function calls:
 15347 ;;		Nothing
 15348 ;; This function is called by:
 15349 ;;		_chkisr
 15350 ;; This function uses a non-reentrant model
 15351 ;;
 15352                           
 15353                           	psect	text74
 15354  003DDC                     __ptext74:
 15355                           	opt stack 0
 15356  003DDC                     _INT2_ISR:
 15357                           	opt stack 18
 15358                           
 15359                           ;Lab9p1.c: 782: INTCON3bits.INT2IF=0;
 15360                           
 15361                           ;incstack = 0
 15362  003DDC  92F0               	bcf	intcon3,1,c	;volatile
 15363                           
 15364                           ;Lab9p1.c: 783: INT2_flag = 1;
 15365  003DDE  0E00               	movlw	0
 15366  003DE0  0100               	movlb	0	; () banked
 15367  003DE2  6F88               	movwf	(_INT2_flag+1)& (0+255),b
 15368  003DE4  0E01               	movlw	1
 15369  003DE6  6F87               	movwf	_INT2_flag& (0+255),b
 15370                           
 15371                           ; BSR set to: 0
 15372  003DE8  0012               	return		;funcret
 15373  003DEA                     __end_of_INT2_ISR:
 15374                           	opt stack 0
 15375                           pclatu	equ	0xFFB
 15376                           pclath	equ	0xFFA
 15377                           tblptru	equ	0xFF8
 15378                           tblptrh	equ	0xFF7
 15379                           tblptrl	equ	0xFF6
 15380                           tablat	equ	0xFF5
 15381                           prodh	equ	0xFF4
 15382                           prodl	equ	0xFF3
 15383                           intcon	equ	0xFF2
 15384                           intcon2	equ	0xFF1
 15385                           intcon3	equ	0xFF0
 15386                           postinc0	equ	0xFEE
 15387                           fsr0h	equ	0xFEA
 15388                           fsr0l	equ	0xFE9
 15389                           wreg	equ	0xFE8
 15390                           postdec1	equ	0xFE5
 15391                           fsr1h	equ	0xFE2
 15392                           fsr1l	equ	0xFE1
 15393                           indf2	equ	0xFDF
 15394                           postinc2	equ	0xFDE
 15395                           postdec2	equ	0xFDD
 15396                           fsr2h	equ	0xFDA
 15397                           fsr2l	equ	0xFD9
 15398                           status	equ	0xFD8
 15399                           
 15400 ;; *************** function _INT1_ISR *****************
 15401 ;; Defined at:
 15402 ;;		line 774 in file "Lab9p1.c"
 15403 ;; Parameters:    Size  Location     Type
 15404 ;;		None
 15405 ;; Auto vars:     Size  Location     Type
 15406 ;;		None
 15407 ;; Return value:  Size  Location     Type
 15408 ;;		None               void
 15409 ;; Registers used:
 15410 ;;		wreg, status,2
 15411 ;; Tracked objects:
 15412 ;;		On entry : 0/0
 15413 ;;		On exit  : 0/0
 15414 ;;		Unchanged: 0/0
 15415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15420 ;;Total ram usage:        0 bytes
 15421 ;; Hardware stack levels used:    1
 15422 ;; This function calls:
 15423 ;;		Nothing
 15424 ;; This function is called by:
 15425 ;;		_chkisr
 15426 ;; This function uses a non-reentrant model
 15427 ;;
 15428                           
 15429                           	psect	text75
 15430  003E04                     __ptext75:
 15431                           	opt stack 0
 15432  003E04                     _INT1_ISR:
 15433                           	opt stack 18
 15434                           
 15435                           ;Lab9p1.c: 776: INTCON3bits.INT1IF=0;
 15436                           
 15437                           ; BSR set to: 0
 15438                           ;incstack = 0
 15439  003E04  90F0               	bcf	intcon3,0,c	;volatile
 15440                           
 15441                           ;Lab9p1.c: 777: EWPED_SW = 1;
 15442  003E06  0E01               	movlw	1
 15443  003E08  0100               	movlb	0	; () banked
 15444  003E0A  6F8D               	movwf	_EWPED_SW& (0+255),b
 15445                           
 15446                           ; BSR set to: 0
 15447  003E0C  0012               	return		;funcret
 15448  003E0E                     __end_of_INT1_ISR:
 15449                           	opt stack 0
 15450                           pclatu	equ	0xFFB
 15451                           pclath	equ	0xFFA
 15452                           tblptru	equ	0xFF8
 15453                           tblptrh	equ	0xFF7
 15454                           tblptrl	equ	0xFF6
 15455                           tablat	equ	0xFF5
 15456                           prodh	equ	0xFF4
 15457                           prodl	equ	0xFF3
 15458                           intcon	equ	0xFF2
 15459                           intcon2	equ	0xFF1
 15460                           intcon3	equ	0xFF0
 15461                           postinc0	equ	0xFEE
 15462                           fsr0h	equ	0xFEA
 15463                           fsr0l	equ	0xFE9
 15464                           wreg	equ	0xFE8
 15465                           postdec1	equ	0xFE5
 15466                           fsr1h	equ	0xFE2
 15467                           fsr1l	equ	0xFE1
 15468                           indf2	equ	0xFDF
 15469                           postinc2	equ	0xFDE
 15470                           postdec2	equ	0xFDD
 15471                           fsr2h	equ	0xFDA
 15472                           fsr2l	equ	0xFD9
 15473                           status	equ	0xFD8
 15474                           
 15475 ;; *************** function _INT0_ISR *****************
 15476 ;; Defined at:
 15477 ;;		line 768 in file "Lab9p1.c"
 15478 ;; Parameters:    Size  Location     Type
 15479 ;;		None
 15480 ;; Auto vars:     Size  Location     Type
 15481 ;;		None
 15482 ;; Return value:  Size  Location     Type
 15483 ;;		None               void
 15484 ;; Registers used:
 15485 ;;		wreg, status,2
 15486 ;; Tracked objects:
 15487 ;;		On entry : 0/0
 15488 ;;		On exit  : 0/0
 15489 ;;		Unchanged: 0/0
 15490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15495 ;;Total ram usage:        0 bytes
 15496 ;; Hardware stack levels used:    1
 15497 ;; This function calls:
 15498 ;;		Nothing
 15499 ;; This function is called by:
 15500 ;;		_chkisr
 15501 ;; This function uses a non-reentrant model
 15502 ;;
 15503                           
 15504                           	psect	text76
 15505  003DEA                     __ptext76:
 15506                           	opt stack 0
 15507  003DEA                     _INT0_ISR:
 15508                           	opt stack 18
 15509                           
 15510                           ;Lab9p1.c: 770: INTCONbits.INT0IF=0;
 15511                           
 15512                           ; BSR set to: 0
 15513                           ;incstack = 0
 15514  003DEA  92F2               	bcf	intcon,1,c	;volatile
 15515                           
 15516                           ;Lab9p1.c: 771: INT0_flag = 1;
 15517  003DEC  0E00               	movlw	0
 15518  003DEE  0100               	movlb	0	; () banked
 15519  003DF0  6F84               	movwf	(_INT0_flag+1)& (0+255),b
 15520  003DF2  0E01               	movlw	1
 15521  003DF4  6F83               	movwf	_INT0_flag& (0+255),b
 15522                           
 15523                           ; BSR set to: 0
 15524  003DF6  0012               	return		;funcret
 15525  003DF8                     __end_of_INT0_ISR:
 15526                           	opt stack 0
 15527                           pclatu	equ	0xFFB
 15528                           pclath	equ	0xFFA
 15529                           tblptru	equ	0xFF8
 15530                           tblptrh	equ	0xFF7
 15531                           tblptrl	equ	0xFF6
 15532                           tablat	equ	0xFF5
 15533                           prodh	equ	0xFF4
 15534                           prodl	equ	0xFF3
 15535                           intcon	equ	0xFF2
 15536                           intcon2	equ	0xFF1
 15537                           intcon3	equ	0xFF0
 15538                           postinc0	equ	0xFEE
 15539                           fsr0h	equ	0xFEA
 15540                           fsr0l	equ	0xFE9
 15541                           wreg	equ	0xFE8
 15542                           postdec1	equ	0xFE5
 15543                           fsr1h	equ	0xFE2
 15544                           fsr1l	equ	0xFE1
 15545                           indf2	equ	0xFDF
 15546                           postinc2	equ	0xFDE
 15547                           postdec2	equ	0xFDD
 15548                           fsr2h	equ	0xFDA
 15549                           fsr2l	equ	0xFD9
 15550                           status	equ	0xFD8
 15551                           pclatu	equ	0xFFB
 15552                           pclath	equ	0xFFA
 15553                           tblptru	equ	0xFF8
 15554                           tblptrh	equ	0xFF7
 15555                           tblptrl	equ	0xFF6
 15556                           tablat	equ	0xFF5
 15557                           prodh	equ	0xFF4
 15558                           prodl	equ	0xFF3
 15559                           intcon	equ	0xFF2
 15560                           intcon2	equ	0xFF1
 15561                           intcon3	equ	0xFF0
 15562                           postinc0	equ	0xFEE
 15563                           fsr0h	equ	0xFEA
 15564                           fsr0l	equ	0xFE9
 15565                           wreg	equ	0xFE8
 15566                           postdec1	equ	0xFE5
 15567                           fsr1h	equ	0xFE2
 15568                           fsr1l	equ	0xFE1
 15569                           indf2	equ	0xFDF
 15570                           postinc2	equ	0xFDE
 15571                           postdec2	equ	0xFDD
 15572                           fsr2h	equ	0xFDA
 15573                           fsr2l	equ	0xFD9
 15574                           status	equ	0xFD8
 15575                           
 15576                           	psect	rparam
 15577  0000                     pclatu	equ	0xFFB
 15578                           pclath	equ	0xFFA
 15579                           tblptru	equ	0xFF8
 15580                           tblptrh	equ	0xFF7
 15581                           tblptrl	equ	0xFF6
 15582                           tablat	equ	0xFF5
 15583                           prodh	equ	0xFF4
 15584                           prodl	equ	0xFF3
 15585                           intcon	equ	0xFF2
 15586                           intcon2	equ	0xFF1
 15587                           intcon3	equ	0xFF0
 15588                           postinc0	equ	0xFEE
 15589                           fsr0h	equ	0xFEA
 15590                           fsr0l	equ	0xFE9
 15591                           wreg	equ	0xFE8
 15592                           postdec1	equ	0xFE5
 15593                           fsr1h	equ	0xFE2
 15594                           fsr1l	equ	0xFE1
 15595                           indf2	equ	0xFDF
 15596                           postinc2	equ	0xFDE
 15597                           postdec2	equ	0xFDD
 15598                           fsr2h	equ	0xFDA
 15599                           fsr2l	equ	0xFD9
 15600                           status	equ	0xFD8


Data Sizes:
    Strings     153
    Constant    593
    Data        46
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     99     112
    BANK0           128     25     118
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), 
		 -> FlashingS_Txt(BANK0[2]), FlashingR_Txt(BANK0[2]), Act_Mode_Txt(BANK0[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), 
		 -> FlashingS_Txt(BANK0[2]), FlashingR_Txt(BANK0[2]), Act_Mode_Txt(BANK0[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[7]), STR_8(CODE[12]), STR_7(CODE[7]), 
		 -> STR_6(CODE[10]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[6]), STR_1(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_16(CODE[31]), STR_15(CODE[19]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), 
		 -> FlashingS_Txt(BANK0[2]), FlashingR_Txt(BANK0[2]), Act_Mode_Txt(BANK0[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _init_UART->_OpenUSART
    _Night_Mode->_WAIT_N_SEC
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Day_Mode->_WAIT_N_SEC
    _update_LCD_count->_drawtext
    _WAIT_1_SEC->_update_LCD_misc
    _update_LCD_misc->_printf
    ___ftdiv->___awtoft
    ___awtoft->___wmul
    _checker->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___wmul
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _Set_NSLT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EWLT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___wmul->___awdiv
    ___awdiv->___awmod

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _update_LCD_misc->_printf
    _checker->_printf

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0  723694
                                             95 COMRAM     4     4      0
                           _Day_Mode
                            _Do_Init
                           _Init_ADC
                          _Init_TRIS
                  _Initialize_Screen
                         _Night_Mode
                 _Select_ADC_Channel
                           ___awtoft
                            ___ftdiv
                             ___ftge
                       _get_full_ADC
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     375
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Select_ADC_Channel                                   1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  305110
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                         _WAIT_N_SEC
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   74488
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    6892
                                             32 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1932
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    8784
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    4262
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    4262
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    4132
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    4132
                                             34 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Init_TRIS                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  337485
                        _PED_Control
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                         _WAIT_N_SEC
 ---------------------------------------------------------------------------------
 (2) _WAIT_N_SEC                                           2     2      0  205542
                                             93 COMRAM     2     2      0
                         _WAIT_1_SEC
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     3     2      1   32239
                                             71 COMRAM     3     2      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _WAIT_1_SEC                                           0     0      0  173173
                      _WAIT_HALF_SEC
                            _checker
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      5     5      0   90303
                                             88 COMRAM     5     5      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      34
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2898
                                             38 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2391
                                             34 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1929
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _checker                                              0     0      0   54050
                            _Do_Init
                             _printf
 ---------------------------------------------------------------------------------
 (5) _printf                                              42    37      5   54050
                                             77 COMRAM    11     6      5
                                              0 BANK0     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (6) _scale                                               10     7      3   13223
                                             49 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _fround                                              13    10      3   12944
                                             49 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    4526
                                             34 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) __tdiv_to_l_                                         15     9      6     584
                                             14 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (6) __div_to_l_                                          12     6      6     803
                                             14 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    2295
                                             22 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     622
                                             14 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8     501
                                             14 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             15    11      4     566
                                             56 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    4019
                                             71 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    3703
                                             59 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    2128
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     130
                                             14 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     848
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) _Do_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Set_NSLT                                             1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EWLT                                             1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   24830
                                             64 COMRAM     3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8   12244
                                             56 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    4703
                                             32 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8   11424
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          3     2      1   32375
                                             74 COMRAM     2     1      1
                  _WAIT_1_SEC_W_BEEP
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 3     2      1   32115
                                             71 COMRAM     3     2      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   26891
                                             54 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7   12984
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    3092
                                             28 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2383
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2525
                                             20 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _WAIT_1_SEC_W_BEEP                                    0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                      _WAIT_HALF_SEC
 ---------------------------------------------------------------------------------
 (4) _WAIT_HALF_SEC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
 ---------------------------------------------------------------------------------
 (13) _INT2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _WAIT_1_SEC_W_BEEP
         _Activate_Buzzer
         _Deactivate_Buzzer
         _WAIT_HALF_SEC
       _update_LCD_PED_Count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _WAIT_N_SEC
       _WAIT_1_SEC
         _WAIT_HALF_SEC
         _checker
           _Do_Init
           _printf
             ___awdiv
               ___awmod (ARG)
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv
             ___llmod
             ___lltoft
               ___ftpack
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             __div_to_l_
             __tdiv_to_l_
             _fround
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _isdigit
             _putch
             _scale
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawtext
             _drawChar
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
           _printf
             ___awdiv
               ___awmod (ARG)
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv
             ___llmod
             ___lltoft
               ___ftpack
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             __div_to_l_
             __tdiv_to_l_
             _fround
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _isdigit
             _putch
             _scale
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _update_LCD_count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Do_Init
   _Init_ADC
   _Init_TRIS
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _WAIT_N_SEC
       _WAIT_1_SEC
         _WAIT_HALF_SEC
         _checker
           _Do_Init
           _printf
             ___awdiv
               ___awmod (ARG)
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv
             ___llmod
             ___lltoft
               ___ftpack
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             __div_to_l_
             __tdiv_to_l_
             _fround
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _isdigit
             _putch
             _scale
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawtext
             _drawChar
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
           _printf
             ___awdiv
               ___awmod (ARG)
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv
             ___llmod
             ___lltoft
               ___ftpack
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             __div_to_l_
             __tdiv_to_l_
             _fround
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _isdigit
             _putch
             _scale
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _update_LCD_count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Select_ADC_Channel
   ___awtoft
     ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftge
   _get_full_ADC
   _init_UART
     _OpenUSART

 _chkisr (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     19      76       5       92.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     63      70       1       88.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E6      34        0.0%
DATA                 0      0      E6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Nov 03 11:49:00 2022

                     drawCircle@f 0028                       drawCircle@r 001E  
                     drawCircle@x 002A                       drawCircle@y 002C  
                     _SSPSTATbits 000FC7                      drawCircle@x0 001A  
                    drawCircle@y0 001C                      ___awdiv@sign 001A  
             ___wmul@multiplicand 001F          update_LCD_color@Circle_Y 0043  
                    ___ftadd@exp1 0047                      ___ftadd@exp2 0046  
                    ___ftadd@sign 0045                               l211 3412  
                             l205 3BC8                               l151 37F4  
                             l161 3D76                               l227 23BC  
                             l236 2312                               l229 2296  
                             l501 398C                               l413 2EA8  
                             l309 338A                               l503 3990  
                             l415 2EFC                               l504 3996  
                             l264 2E72                               l513 1916  
                             l505 399A                               l265 2DDE  
                             l506 39BC                               l442 3C94  
                             l522 2266                               l275 1FD2  
                             l419 2F3A                               l267 2E4E  
                             l427 314A                               l268 2E70  
                             l293 242C                               l439 3C74  
                             l448 3D0A                               l720 35CE  
                             l529 2AF0                               l474 3944  
                             l483 38FC                               l732 3C6E  
                             l492 39D4                               l476 3948  
                             l724 35E8                               l477 394E  
                             l485 3900                               l725 35EA  
                             l494 39D8                               l478 3952  
                             l486 3906                               l398 3DD2  
                             l566 3C1C                               l726 35F4  
                             l495 39DE                               l479 3974  
                             l487 390A                               l727 35F6  
                             l496 39E2                               l488 392C  
                             l497 3A04                               l729 3610  
                             l666 074A                               l595 15B4  
                             l588 1B5A                               l925 3276  
                             l950 3B00                               l696 0AB6  
                             l938 35A0     update_LCD_PED_Count@direction 004A  
                             _PR2 000FCB                 _Deactivate_Buzzer 3E0E  
                             _dir 006A                               _nbr 008B  
                             _txt 0064                    drawFastHLine@w 0017  
                  drawFastHLine@x 0020                    drawFastHLine@y 0016  
                    ___awmod@sign 0014           __end_of_update_LCD_misc 1D4C  
                             prod 000FF3                               wreg 000FE8  
              ?_Deactivate_Buzzer 0001                   ??_fillRectangle 001B  
                    __CFG_LVP$OFF 000000           _TFT_GreenTab_Initialize 3BCA  
            PED_Control@Direction 0001                      ___ftdiv@cntr 0030  
                    ___ftdiv@sign 0035                      __CFG_WDT$OFF 000000  
                            l1101 1DBA                              l1112 1E7C  
                            l1016 281E                              l1121 1E98  
                            l1025 280E                              l1140 26A4  
                            l1132 2C84                    drawFastVLine@h 0017  
                            l1057 3000                              l1137 2714  
                            l1161 2916                              l1129 2CB8  
                            l1226 32F2                              l1146 2704  
                            l1155 31E0                              l1171 3CAC  
                            l1139 267C                              l1332 3AC4  
                            l1068 2FD8                              l1236 3670  
                            l1182 2BD6                              l1256 37A8  
                            l1097 1D90                              l1098 1F0E  
                            l1178 3A48                    drawFastVLine@x 0020  
                            l1197 3CDA                    drawFastVLine@y 0016  
                            l6010 1B1A                              l6002 1A56  
                            l6110 26D6                              l6030 13AA  
                            l6112 26DC                              l6024 1302  
                            l7000 3380                              l6202 31DC  
                            l6106 26C6                              l6042 14DE  
                            l6034 13BA                              l6132 2736  
                            l6116 26F0                              l6060 3CD2  
                            l6126 2726                              l6118 26FE  
                            l6070 2624                              l7030 2194  
                            l7022 20DE                              l6312 2CE2  
                            l6240 2B80                              l6216 2B10  
                            l6048 1590                              l6400 009A  
                            l7040 224A                              l7120 35C6  
                            l7112 35B4                              l7050 2A2A  
                            l7202 3B24                              l6234 2B6A  
                            l6170 27E0                              l6154 27AC  
                            l6146 277A                              l7034 21EE  
                            l7026 2138                              l6324 2D26  
                            l7060 2AE0                              l6252 2BC4  
                            l6244 2B94                              l6172 27E6  
                            l6076 2642                              l6500 04B4  
                            l6420 0178                              l7212 3B46  
                            l7132 35E0                              l7124 35D2  
                            l7116 35BE                              l7054 2A84  
                            l6350 2412                              l6246 2BA2  
                            l6238 2B7A                              l6262 329A  
                            l6166 27D0                              l6158 27BC  
                            l6510 0530                              l6430 01C0  
                            l6414 0124                              l6336 2D84  
                            l6328 2D40                              l7072 176A  
                            l6192 317E                              l6184 3A1E  
                            l6248 2BAC                              l6264 32A8  
                            l6176 27FA                              l6600 0920  
                            l6504 051C                              l6424 018C  
                            l6408 00FE                              l7208 3B3C  
                            l7400 30B2                              l5706 3BAA  
                            l5714 38A6                              l6338 2D8A  
                            l6370 24E0                              l7170 39E8  
                            l7162 3910                              l6274 32E2  
                            l6266 32B0                              l6290 3660  
                            l6282 3624                              l6178 2808  
                            l6098 26B2                              l5802 283E  
                            l6610 097C                              l6522 05B4  
                            l6514 056A                              l6506 0522  
                            l6418 0160                              l7218 3B5A  
                            l5900 3544                              l5652 33D4  
                            l7076 1840                              l7068 1696  
                            l6196 31B0                              l5740 1DC8  
                            l6284 3632                              l5804 2858  
                            l6604 094E                              l6532 05FC  
                            l6436 01DC                              l6428 0198  
                            l5662 33FA                              l5718 38C2  
                            l7190 3B06                              l6366 248E  
                            l5670 2F4C                              l5734 1D9E  
                            l6286 363A                              l5830 28C2  
                            l5822 289A                              l6630 0A22  
                            l6622 09F0                              l6542 0636  
                            l6526 05D6                              l6518 0570  
                            l6470 0330                              l6462 02C8  
                            l6446 0224                              l6390 0058  
                            l6702 3ADC                              l7350 2E7E  
                            l5920 3596                              l5912 357A  
                            l5904 3552                              l5664 3408  
                            l5648 339C                              l6296 3750  
                            l5840 28F0                              l5832 28C8  
                            l5808 2866                              l6632 0A2E  
                            l6624 09FC                              l6616 09B0  
                            l6560 0718                              l6544 064A  
                            l6536 060C                              l6480 03B6  
                            l6384 002C                              l5906 355C  
                            l7194 3B10                              l7178 39A0  
                            l7186 3958                              l5682 2FA0  
                            l5674 2F5C                              l5762 1E20  
                            l5746 1DD4                              l6298 375E  
                            l5826 28AC                              l6642 0A76  
                            l6618 09BC                              l6562 072C  
                            l6538 0626                              l6554 06F8  
                            l6490 0422                              l6474 0358  
                            l6394 0064                              l7426 3106  
                            l5852 31F8                              l5908 3564  
                            l5916 3586                              l5932 2284  
                            l5692 2FE0                              l5684 2FC0  
                            l5676 2F68                              l5764 1E2C  
                            l5756 1DFC                              l5836 28DA  
                            l6636 0A4C                              l6572 0776  
                            l6556 0708                              l6548 066A  
                            l6492 042E                              l6476 036E  
                            l6396 007A                              l6388 0042  
                            l6660 2C1E                              l6820 1C6C  
                            l6812 1C46                              l6804 1C1E  
                            l5950 230A                              l5942 22A2  
                            l5686 2FCC                              l5678 2F88  
                            l5782 1EB6                              l5774 1E64  
                            l5766 1E38                              l6638 0A58  
                            l6582 08A4                              l6566 0750  
                            l6486 03FC                              l6478 03A0  
                            l6590 08D4                              l6646 0A96  
                            l6654 2BF6                              l6822 1C72  
                            l5864 3220                              l5880 325C  
                            l5960 235C                              l5936 2292  
                            l5928 2278                              l5792 1EE8  
                            l5776 1E70                              l5768 1E40  
                            l6584 08B4                              l6576 07C8  
                            l6496 0472                              l6680 2C5E  
                            l6656 2C10                              l6816 1C5A  
                            l6808 1C32                              l7376 2EE4  
                            l5866 322A                              l5858 320A  
                            l5946 22D2                              l5938 229A  
                            l6738 1FB8                              l5698 2FF2  
                            l6498 04A0                              l6690 2C92  
                            l5884 326C                              l5876 3250  
                            l5868 3232                              l5948 2306  
                            l5980 3A92                              l6596 08FC  
                            l6588 08C4                              l6772 3B72  
                            l5966 2388                              l5958 2334  
                            l5974 23B8                              l5982 3A98  
                            l6766 20A8                              l6774 3B7C  
                            l6950 2E16                              l5896 3536  
                            l5968 23B0                              l6792 1BEC  
                            l6944 2DA8                              l6794 1BF4  
                            l6970 2E5C                              l6962 2E44  
                            l7690 3024                              l6966 2E52  
                            l6984 3314                              l6976 2E6C  
                            l7698 309E                              l6988 334C  
                            l6998 3372                              STR_1 FF9A  
                            STR_2 FFE5                              STR_3 FFEB  
                            STR_4 FFEF                              STR_5 FFFD  
                            STR_6 FFCD                              STR_7 FFDE  
                            STR_8 FFC1                              STR_9 FFD7  
                            u5040 33CA                      printf@tmpval 00E6  
                            u6021 2B02                              u6040 2B2E  
                            u7000 2DD6                              u5401 284E  
                            u7010 2E0C                              u5171 1D5C  
                            u5181 1D70                              u6045 2B26  
                            _MODE 0089                              u6180 2D0A  
                            u5381 2830                              u7080 3342  
                            u6370 0264                              u5811 2616  
                            u5660 236A                              u5831 2634  
                            u6375 025A                              u6801 2BE8  
                            u6821 2C06                              u6590 0742  
                            _RBPU 007F8F                              _TRMT 007D61  
             ??_Deactivate_Buzzer 000F                              _main 3002  
                            _font FD15                      ___ftpack@arg 000F  
                    ___ftpack@exp 0012                              fsr0h 000FEA  
                            fsr1h 000FE2                    ??_get_full_ADC 0011  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              _wrap 006C  
                 drawFastHLine@hi 001E                   drawFastHLine@lo 001F  
        __end_of_update_LCD_color 1918                              pclat 000FFA  
        __end_of_update_LCD_count 2268                __size_of_LCD_Reset 0012  
                            prodh 000FF4                              prodl 000FF3  
                            start 0018                   __end_of_Do_Init 3D3E  
                 ??_drawFastHLine 001A                   ??_drawFastVLine 001A  
                    ___ftmul@cntr 0030                      ___param_bank 000010  
                    ___ftmul@sign 0031                      ___fttol@exp1 0047  
                    ___fttol@lval 0043                      _Act_Mode_Txt 00D1  
                __end_of_INT0_ISR 3DF8                  __end_of_INT1_ISR 3E0E  
                __end_of_INT2_ISR 3DEA                       ?_WAIT_1_SEC 0001  
       __end_of_Deactivate_Buzzer 3E16                   drawFastVLine@hi 001E  
                 drawFastVLine@lo 001F                       _SW_EWLT_Txt 006D  
                     _SW_MODE_Txt 00D7                             ?_main 0001  
                 __end_of___awdiv 3278                   __end_of___ftadd 1F10  
                 drawCircle@ddF_x 0024                             STR_10 FFF7  
                 drawCircle@ddF_y 0026                             STR_11 FFF3  
                           STR_12 FF85                             STR_13 FFFD  
                           STR_14 FFFB                             STR_15 FFAE  
                           STR_16 FF66                   __end_of___awmod 35A2  
                 __end_of___ftdiv 2CBA                   __end_of___ftneg 3CBA  
                 __end_of___lldiv 3304                   __end_of___ftmul 2918  
                           _T0CON 000FD5                   ___awdiv@divisor 0017  
                 __end_of___llmod 3682                   __end_of___ftsub 3A4A  
                 __end_of___fttol 2BD8                             _T2CON 000FCA  
                           _T3CON 000FB1                       ?_WAIT_N_SEC 0001  
                           i2l553 34E6                   ___awdiv@counter 0019  
                 drawCircle@color 0020                             _RCSTA 000FAB  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                           _SPBRG 000FAF                             _PORTD 000F83  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TXREG 000FAD  
                 __end_of_checker 3C1E                             _TXSTA 000FAC  
                           _Count 0066                      ?_PED_Control 004B  
                           _Rcmd1 24F6                             _Rcmd3 2918  
                    ___lltoft@exp 001F                       _SW_NSLT_Txt 00D9  
                   drawRect@color 0029                     ___awtoft@sign 0026  
                 __end_of_dpowers FF18                             _array 00B4  
                           _font2 FE14             fillCircleHelper@ddF_x 002F  
           fillCircleHelper@ddF_y 0031                             _scale 11D6  
                 __end_of_isdigit 3CDC                     ___ftpack@sign 0013  
           fillCircleHelper@delta 0029                             _putch 3DCE  
           fillCircleHelper@color 002B                             _volts 0080  
                  __CFG_BOREN$OFF 000000                             tablat 000FF5  
                           status 000FD8            ??_update_LCD_PED_Count 0049  
                __end_of_Day_Mode 2F3C                   write_data@data_ 0011  
                 __initialization 36E8             __end_of_WAIT_HALF_SEC 3D12  
                    __end_of_main 30A8                      __end_of_font FE14  
                __end_of_Init_ADC 3DCE                  __end_of_Rcmd2red 3A88  
                      _Night_Mode 30A8                  __end_of_Set_EWLT 39BE  
                __end_of_Set_NSLT 392E                            ??_main 0060  
                   ___fttol@sign1 0042                     __activetblptr 000002  
               __end_of_LCD_Reset 3D8E                      _SW_EWPED_Txt 006F  
            __size_of__tdiv_to_l_ 0110         ??_TFT_GreenTab_Initialize 0029  
                ?_update_LCD_misc 0001                            ?_Rcmd1 0001  
                          ?_Rcmd3 0001                            _ADCON0 000FC2  
                          _ADCON1 000FC1                            _ADCON2 000FC0  
                ___llmod@dividend 000F                            ?_scale 0032  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                          _CCPR2L 000FBB                  ___awdiv@dividend 0015  
                __end_of___awtoft 3B02                            ?_putch 0001  
                __end_of___ftpack 3002                  __end_of___lltoft 37AA  
                       ??_Do_Init 000F                            i2l5602 34D2  
                          i2l5606 34DC                            _OSCCON 000FD3  
              __size_of_Init_TRIS 0016                            _SPBRGH 000FB0  
             __size_of_WAIT_1_SEC 0086                            _SSPBUF 000FC9  
                    _SW_NSPED_Txt 00DB                  __end_of_delay_ms 37FC  
             __size_of_WAIT_N_SEC 0032                            _Set_EW 39BE  
                          _Set_NS 392E                  __end_of_fillRect 38E6  
                __end_of_drawChar 23BE                  __end_of__powers_ FF66  
                __end_of_drawRect 36E8                __size_of_OpenUSART 0070  
                          ___ftge 314C          __size_of_Activate_Buzzer 0012  
                          ___wmul 3C48                         ??___awdiv 0019  
       __size_of_fillCircleHelper 0138                  __end_of_drawtext 2D98  
                       ??___ftadd 0042                         ??___awmod 0013  
                       ??___ftdiv 002D                         ??___ftneg 0012  
                       ??___lldiv 0017                         ??___ftmul 0029  
                       ??___llmod 0017                         ??___ftsub 004E  
                       ??___fttol 003D                            _chkisr 0008  
                          _buffer 0095                            _fround 1918  
                       ??_checker 0059                            clear_0 36EE  
                          clear_1 36FA                  ___awdiv@quotient 001B  
                 ___awmod@divisor 0011        __size_of_Deactivate_Buzzer 0008  
                 ___awmod@counter 0013                            _printf 001C  
               WAIT_N_SEC@seconds 005E                      drawtext@size 003E  
                          _strcpy 3B68                            _strlen 3A88  
           ___ftmul@f3_as_product 002D              __end_of_get_full_ADC 3C96  
                    __pdataCOMRAM 006C                         ??_isdigit 000F  
                     Set_EW@color 0044                      __mediumconst FD14  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                            putch@c 000F  
                __end_of_spiwrite 3D7C                       Set_NS@color 0044  
                      __accesstop 0080           __end_of__initialization 3740  
                       ?_INT0_ISR 0001                         ?_INT1_ISR 0001  
                       ?_INT2_ISR 0001                        ___ftadd@f1 003C  
                      ___ftadd@f2 003F                        ___ftge@ff1 000F  
                      ___ftge@ff2 0012                     ___rparam_used 000001  
                      ___ftdiv@f1 0027                        ___ftdiv@f2 002A  
                      ___ftdiv@f3 0031                        ___ftneg@f1 000F  
                      ___awtoft@c 0023                        ___ftmul@f1 0023  
                      ___ftmul@f2 0026                        ___ftsub@f1 0048  
                      ___ftsub@f2 004B                        ___fttol@f1 0039  
                   __end_of_Rcmd1 2606                     __end_of_Rcmd3 2A0A  
                  __pcstackCOMRAM 0001                      __pidataBANK0 3C1E  
                      ___lltoft@c 0017                     __end_of_font2 FEF0  
                   __end_of_scale 15B6                     __end_of_putch 3DDC  
                     ?_Night_Mode 0001                 __end_of_Init_TRIS 3D28  
                  drawPixel@color 0017            __size_of_write_command 0010  
                      __div_to_l_ 2716                         ?_Day_Mode 0001  
      fillCircleHelper@cornername 0027                           ??_Rcmd1 0029  
                         ??_Rcmd3 0029                __size_of_drawPixel 0030  
               __end_of_OpenUSART 3612                   __div_to_l_@exp1 001A  
                 __div_to_l_@cntr 0019                           ??_scale 0035  
            __size_of_PED_Control 0034                   __div_to_l_@quot 0015  
                         ??_putch 000F                        __pbssBANK0 0080  
                       ?_Init_ADC 0001                         ?_Rcmd2red 0001  
              __size_of_init_UART 0014        __end_of_Select_ADC_Channel 3E04  
                      ??_INT0_ISR 0001                        ??_INT1_ISR 0001  
                      ??_INT2_ISR 0001                   spiwrite@spidata 0010  
                       ?_Set_EWLT 0001                     __div_to_l_@f1 000F  
                   __div_to_l_@f2 0012                         ?_Set_NSLT 0001  
               ?_update_LCD_color 0041                 ?_update_LCD_count 0048  
                         ?_Set_EW 0001                           ?_Set_NS 0001  
              __CFG_CCP2MX$PORTBE 000000                ??_update_LCD_color 0042  
              ??_update_LCD_count 0049                           ?___ftge 000F  
                         ?___wmul 001D                           ?_chkisr 0001  
          __size_of_setAddrWindow 004E                           _CCP2CON 000FBA  
       update_LCD_PED_Count@count 0048                           ?_fround 0032  
                    ??_WAIT_1_SEC 005E                         ?___awtoft 0023  
                       ?___ftpack 000F                        _fillCircle 37FC  
                         ?_printf 004E         Select_ADC_Channel@channel 000F  
                       ?___lltoft 0017                           ?_strcpy 000F  
                         ?_strlen 000F                      ??_WAIT_N_SEC 005E  
               ??_Activate_Buzzer 000F                        _fillScreen 3CDC  
                      _drawCircle 1F10                        ??_Day_Mode 0060  
                       ?_delay_ms 0023                         ?_fillRect 0021  
       update_LCD_count@direction 004A                         ?_drawChar 002C  
                         _SSPCON1 000FC6                         ?_drawRect 0021  
                         _SSPSTAT 000FC7             __end_of_fillRectangle 2E74  
                       ?_drawtext 0037                           _SW_EWLT 008F  
                         _SW_MODE 0091                        ??_Init_ADC 000F  
                         _Do_Init 3D28                           _SW_NSLT 0092  
                      ??_Rcmd2red 0012               __size_of_Night_Mode 00A4  
                   _write_command 3DB0                __end_of_WAIT_1_SEC 349A  
                      ??_Set_EWLT 0044                        ??_Set_NSLT 0044  
                     WAIT_N_SEC@i 005F                 __end_of__npowers_ FF3F  
                         __Hparam 0000                        _scale$2520 0035  
              __end_of_WAIT_N_SEC 3B68                           __Lparam 0000  
                 __size_of_Set_EW 0048                   __size_of_Set_NS 0048  
           __end_of_drawFastHLine 338C                 __end_of_drawPixel 3BCA  
           __end_of_drawFastVLine 3414                  _fillCircleHelper 23BE  
                 __size_of___ftge 0096                           ___awdiv 31E2  
                         ___ftadd 1D4C                           ___awmod 3520  
                         ___ftdiv 2BD8                           ___ftneg 3C96  
                         ___lldiv 3278                   __size_of___wmul 0028  
                         ___ftmul 2820                           ___llmod 3612  
                         ___ftsub 3A06                           ___fttol 2AF2  
           __size_of_get_full_ADC 0026                   __size_of_chkisr 3518  
                       ?_spiwrite 0001                           _checker 3BF4  
                         __pcinit 36E8                        ??___awtoft 0026  
                      ??___ftpack 0014                   __size_of_fround 0244  
                         __ramtop 1000                        ??___lltoft 001B  
                         __ptext0 3002                           __ptext1 3D54  
                         __ptext2 35A2                           __ptext3 3DF8  
                         __ptext4 30A8                           __ptext5 0AB8  
                         __ptext6 3CDC                           __ptext7 2D98  
                         __ptext8 3682                           __ptext9 3304  
                 __size_of_printf 0A9C                 __end_of_init_UART 3D68  
                       _T0CONbits 000FD5                   __size_of_strcpy 0032  
                 __size_of_strlen 003E                       ?__div_to_l_ 000F  
                         _dpowers FEF0                           _isdigit 3CBA  
                       _T3CONbits 000FB1                  ___awmod@dividend 000F  
                      ??_delay_ms 0025                     drawtext@_text 0038  
                   drawtext@color 003A                        ??_fillRect 0026  
                      ??_drawChar 0033                         _LCD_Reset 3D7C  
                      ??_drawRect 002B                     _setAddrWindow 384E  
                  __pintcode_body 349A                drawFastHLine@color 0018  
                      delay_ms@ms 0023              end_of_initialization 3740  
                       _INT0_flag 0083                         _INT1_flag 0085  
                       _INT2_flag 0087                        ??_drawtext 003F  
                  ?_write_command 0001                     __Lmediumconst FD14  
                         int_func 349A                         _PED_Count 0067  
                    _get_full_ADC 3C70                   ___lldiv@divisor 0013  
                    PED_Control@i 004C     __size_of_update_LCD_PED_Count 00E8  
                 ___lldiv@counter 001B                         _RCSTAbits 000FAB  
                         printf@c 00F5                           printf@f 004E  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
               _WAIT_1_SEC_W_BEEP 3D3E                    __tdiv_to_l_@f1 000F  
                  __tdiv_to_l_@f2 0012                        ??_spiwrite 000F  
                         strlen@s 000F                   fillCircle@color 003F  
              ?_WAIT_1_SEC_W_BEEP 0001                     ??__tdiv_to_l_ 0015  
                     ?_fillCircle 0039                         _PORTAbits 000F80  
                drawtext@cursor_x 0047                  drawtext@cursor_y 0046  
                       _PORTBbits 000F81                         _PORTCbits 000F82  
                       _PORTDbits 000F83                         _PORTEbits 000F84  
                     ?_fillScreen 0022                       ?_drawCircle 001A  
                      drawChar@bg 0030               ??_WAIT_1_SEC_W_BEEP 000F  
                       _TRISCbits 000F94                    ?_setAddrWindow 0012  
                      ?_LCD_Reset 0001                  drawtext@textsize 0042  
          __size_of_WAIT_HALF_SEC 001A          __size_of_update_LCD_misc 01F0  
                      drawPixel@x 0019                        drawPixel@y 0016  
                     ___ftdiv@exp 0034                       printf@width 00EE  
                       _TXSTAbits 000FAC                PED_Control@Num_Sec 004B  
              get_full_ADC@result 0013                 __size_of_INT0_ISR 000E  
             __size_of__div_to_l_ 010A                 __size_of_INT1_ISR 000A  
               __size_of_INT2_ISR 000E         __end_of_WAIT_1_SEC_W_BEEP 3D54  
                     ___ftmul@exp 002C                    __end_of_Set_EW 3A06  
                  __end_of_Set_NS 3976                    __end_of___ftge 31E2  
                  __end_of___wmul 3C70                     delay_ms@count 0027  
                      _write_data 3DA0                     __pidataCOMRAM 3E16  
                  __end_of_chkisr 3520                      ??_Night_Mode 0060  
        ?_TFT_GreenTab_Initialize 0001                        drawtext@bg 003C  
                  __end_of_fround 1B5C                    __end_of_printf 0AB8  
                  __end_of_strcpy 3B9A                    __end_of_strlen 3AC6  
             start_initialization 36E8                         _Init_TRIS 3D12  
             __end_of__tdiv_to_l_ 2716                 __size_of_Day_Mode 00C8  
                 ??_write_command 0011                         _OpenUSART 35A2  
             __size_of_fillCircle 0052                   ___llmod@divisor 0013  
                __CFG_OSC$INTIO67 000000                 __size_of_Init_ADC 000E  
                 ___llmod@counter 0017                __end_of_Night_Mode 314C  
               __size_of_Rcmd2red 003E               __size_of_fillScreen 001C  
             __size_of_drawCircle 01AE                          ??_Set_EW 0044  
                        ??_Set_NS 0044                 __size_of_Set_EWLT 0048  
                 _Activate_Buzzer 3D8E                 __size_of_Set_NSLT 0048  
                        ??___ftge 0015                          ??___wmul 0021  
                   _WAIT_HALF_SEC 3CF8                          ??_chkisr 0001  
                     __pdataBANK0 00B4                _Select_ADC_Channel 3DF8  
                        ??_fround 0035                   setAddrWindow@x0 0015  
                 setAddrWindow@x1 0013                   setAddrWindow@y0 0012  
                 setAddrWindow@y1 0014                          ??_printf 0053  
                        ??_strcpy 0013                          ??_strlen 0011  
                    _PED_EW_Count 00CB         __size_of_update_LCD_color 0362  
       __size_of_update_LCD_count 01AA                        fround@prec 003B  
               __size_of___awtoft 003C                 __size_of___ftpack 00C6  
             ?_Select_ADC_Channel 0001                 __size_of___lltoft 0060  
                     __pbssCOMRAM 0064                     ??_PED_Control 004C  
                 ??_setAddrWindow 0015                        ?_Init_TRIS 0001  
                   __pcstackBANK0 00DD                      _PED_NS_Count 00CE  
                     ??_LCD_Reset 0029                      _isdigit$2212 0010  
        __end_of_fillCircleHelper 24F6                 __size_of_delay_ms 0052  
                        ?_Do_Init 0001                 __size_of_fillRect 004A  
               __size_of_drawChar 0156                        ?_OpenUSART 000F  
               __size_of_drawRect 0066                 __size_of_drawtext 00DE  
            ??_Select_ADC_Channel 000F        __size_of_WAIT_1_SEC_W_BEEP 0016  
               ??_update_LCD_misc 0059                         __pintcode 0008  
 __end_of_TFT_GreenTab_Initialize 3BF4                    ?_WAIT_HALF_SEC 0001  
                   __pmediumconst FD14                          ?___awdiv 0015  
                        ?___ftadd 003C                          ?___awmod 000F  
                        ?___ftdiv 0027                          ?___ftneg 000F  
                        ?___lldiv 000F                          ?___ftmul 0023  
                        ?___llmod 000F                          ?___ftsub 0048  
                       __npowers_ FF18                          ?___fttol 0039  
                       __tft_type 0068                         _direction 0094  
              drawFastVLine@color 0018                       ?_write_data 0001  
                        ?_checker 0001                         _drawPixel 3B9A  
                     __tdiv_to_l_ 2606                 __size_of_spiwrite 0014  
                    ??__div_to_l_ 0015                          ?_isdigit 0001  
               _Initialize_Screen 0AB8                    __size_of_Rcmd1 0110  
                  __size_of_Rcmd3 00F2                         _init_UART 3D54  
              ?_Initialize_Screen 0001                    __size_of_scale 03E0  
                  __size_of_putch 000E               __end_of_PED_Control 3B36  
         __end_of_Activate_Buzzer 3DA0                          _INT0_ISR 3DEA  
                        _INT1_ISR 3E04                          _INT2_ISR 3DDC  
                  ___wmul@product 0021               ??_Initialize_Screen 0048  
                        _EWPED_SW 008D                          _PIE1bits 000F9D  
                        _PIR1bits 000F9E                __end_of__div_to_l_ 2820  
                        _PIR2bits 000FA1                          _NSPED_SW 008E  
                        _EW_Count 00C2                         fillRect@h 0023  
                       fillRect@i 002A                         fillRect@w 0022  
                       fillRect@x 0029                         fillRect@y 0021  
                       drawChar@c 002D                         drawChar@i 0036  
                       drawChar@j 0035                      ??_fillCircle 0041  
                       drawChar@x 0034                         drawChar@y 002C  
                      ?_drawPixel 0016            __size_of_fillRectangle 00DC  
                        _NS_Count 00C8                        _ADCON0bits 000FC2  
               ___wmul@multiplier 001D         __end_of_Initialize_Screen 11D6  
                    ??_fillScreen 0024                         drawRect@h 0027  
                       drawRect@w 0025                         drawRect@x 0021  
                       drawRect@y 0023                     _FlashingR_Txt 00D3  
                   _FlashingS_Txt 00D5                      ??_drawCircle 0022  
                      printf@flag 00EC      __end_of_update_LCD_PED_Count 2AF2  
                      printf@fval 00F0                         main@nStep 0062  
                        _SW_EWPED 0090                        printf@prec 00F3  
           update_LCD_color@color 0041                          _Day_Mode 2E74  
                        _SW_NSPED 0093         update_LCD_color@direction 0042  
                     ??_Init_TRIS 000F                        ?_init_UART 0001  
          __size_of_drawFastHLine 0088                       _INTCON2bits 000FF1  
                     _INTCON3bits 000FF0                         copy_data0 3714  
                       copy_data1 3734                         drawtext@i 0044  
          __size_of_drawFastVLine 0088                         drawtext@x 0041  
                       drawtext@y 0037                          _Init_ADC 3DC0  
               write_command@cmd_ 0011                       ??_OpenUSART 0011  
                        _Rcmd2red 3A4A                  __size_of_Do_Init 0016  
             __size_of_write_data 0010                   OpenUSART@config 0011  
                        _Set_EWLT 3976                __end_of_fillCircle 384E  
                        _Set_NSLT 38E6                          __Hrparam 0000  
                 ??_WAIT_HALF_SEC 000F                __end_of_fillScreen 3CF8  
           update_LCD_count@count 0048                          __Lrparam 0000  
              __end_of_drawCircle 20BE                  __size_of___awdiv 0096  
                __size_of___ftadd 01C4                  __size_of___awmod 0082  
                __size_of___ftdiv 00E2                  __size_of___ftneg 0024  
                __size_of___lldiv 008C                  __size_of___ftmul 00F8  
                __size_of___llmod 0070                  __size_of___ftsub 0044  
                __size_of___fttol 00E6                          ___awtoft 3AC6  
                        ___ftpack 2F3C                       _fround$2518 0038  
                     _fround$2519 0035                          ___lltoft 374A  
                __size_of_checker 002A                  _update_LCD_color 15B6  
                _update_LCD_count 20BE                  __size_of_isdigit 0022  
                     _PED_Control 3B02                          _delay_ms 37AA  
                        __ptext10 3BCA                          __ptext11 2918  
                        __ptext20 20BE                          __ptext12 3A4A  
                        __ptext21 3414                          __ptext13 24F6  
                        __ptext30 3DCE                          __ptext22 1B5C  
                        __ptext14 3D7C                          __ptext31 3CBA  
                        __ptext23 3C70                          __ptext15 37AA  
                        __ptext40 3A06                          __ptext32 1918  
                        __ptext24 2BD8                          __ptext16 3D12  
                        __ptext41 1D4C                          __ptext33 2820  
                        __ptext25 3AC6                          __ptext17 3DC0  
                        __ptext50 15B6                          __ptext42 2F3C  
                        __ptext34 2606                          __ptext26 3B68  
                        __ptext18 2E74                          __ptext51 37FC  
                        __ptext43 3C96                          __ptext35 2716  
                        __ptext27 3BF4                          __ptext19 3B36  
                        __ptext60 338C                          __ptext52 23BE  
                        __ptext44 314C                          __ptext36 374A  
                        __ptext28 001C                          __ptext61 3B9A  
                        __ptext53 1F10                          __ptext45 3D28  
                        __ptext37 3612                          __ptext29 11D6  
                        __ptext70 3CF8                          __ptext62 384E  
                        __ptext54 3B02                          __ptext46 38E6  
                        __ptext38 3278                          __ptext71 3E0E  
                        __ptext63 3DA0                          __ptext55 2A0A  
                        __ptext47 392E                          __ptext39 2AF2  
                        __ptext72 3D8E                          __ptext64 3DB0  
                        __ptext56 2CBA                          __ptext48 3976  
                        __ptext65 3D68                          __ptext57 3A88  
                        __ptext49 39BE                          __ptext74 3DDC  
                        __ptext66 3C48                          __ptext58 2268  
                        __ptext75 3E04                          __ptext67 3520  
                        __ptext59 389C                          __ptext76 3DEA  
                        __ptext68 31E2                          __ptext69 3D3E  
                        _fillRect 389C                          _drawChar 2268  
                        __powers_ FF3F                          _drawRect 3682  
__size_of_TFT_GreenTab_Initialize 002A                          _colstart 0069  
                        _drawtext 2CBA                        strcpy@from 0011  
                   _fillRectangle 2D98                  ?_Activate_Buzzer 0001  
                   __size_of_main 00A6                   fillRectangle@hi 001F  
                 fillRectangle@lo 0020                     _drawFastHLine 3304  
                   _drawFastVLine 338C                         printf@exp 00EA  
                        _spiwrite 3D68                         printf@val 00E2  
                     ??_drawPixel 0019                          _rowstart 006B  
              fillCircleHelper@x0 0021                fillCircleHelper@y0 0023  
      __size_of_Initialize_Screen 071E                        _INTCONbits 000FF2  
                  OpenUSART@spbrg 000F                       ??_init_UART 0012  
                        isdigit@c 0011                     Set_EWLT@color 0044  
                        scale@scl 0038                        _EWLT_Count 00BF  
               ?_fillCircleHelper 0021                         spiwrite@x 000F  
                        intlevel2 0000                   _update_LCD_misc 1B5C  
                  ?_fillRectangle 0016                  __tdiv_to_l_@exp1 001D  
                __tdiv_to_l_@cntr 001C                  __tdiv_to_l_@quot 0018  
              ??_fillCircleHelper 002D             __end_of_write_command 3DC0  
                ___lldiv@dividend 000F                   fillScreen@color 0022  
            update_LCD_misc@nStep 0059              _update_LCD_PED_Count 2A0A  
            update_LCD_misc@volts 005B                      fillCircle@x0 0039  
                    fillCircle@y0 003B                    ?_drawFastHLine 0016  
                  fillRectangle@h 0018                    fillRectangle@w 0017  
                  fillRectangle@x 0021                    fillRectangle@y 0016  
                  ?_drawFastVLine 0016                          printf@ap 00E0  
               fillCircleHelper@f 0033                 fillCircleHelper@r 0025  
               fillCircleHelper@x 0035                 fillCircleHelper@y 0037  
                    ??_write_data 0011                        _WAIT_1_SEC 3414  
                   fillRect@color 0024                      ?__tdiv_to_l_ 000F  
                     _printf$2521 00DD                        _WAIT_N_SEC 3B36  
                ___lldiv@quotient 0017                          strcpy@cp 0013  
                        strlen@cp 0013                          strcpy@to 000F  
                   Set_NSLT@color 0044                        _NSLT_Count 00C5  
                     fillCircle@r 003D             __end_of_setAddrWindow 389C  
              fillRectangle@color 0019                     drawChar@color 002E  
              __end_of_write_data 3DB0                      drawChar@line 0033  
                   ?_get_full_ADC 000F                      drawChar@size 0032  
           ?_update_LCD_PED_Count 0048       __size_of_Select_ADC_Channel 000C  
