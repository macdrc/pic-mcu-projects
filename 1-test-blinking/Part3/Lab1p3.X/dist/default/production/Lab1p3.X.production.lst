

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Sep 06 18:14:01 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1
    27                           	psect	text19,global,reloc=2,class=CODE,delta=1
    28                           	psect	text20,global,reloc=2,class=CODE,delta=1
    29                           	psect	text21,global,reloc=2,class=CODE,delta=1
    30                           	psect	text22,global,reloc=2,class=CODE,delta=1
    31                           	psect	text23,global,reloc=2,class=CODE,delta=1
    32                           	psect	text24,global,reloc=2,class=CODE,delta=1
    33                           	psect	text25,global,reloc=2,class=CODE,delta=1
    34                           	psect	text26,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           	psect	mediumconst
    39  00FEFE                     __pmediumconst:
    40                           	opt stack 0
    41  00FEFE  00                 	db	0
    42  00FEFF                     _dpowers:
    43                           	opt stack 0
    44  00FEFF  0001               	dw	1
    45  00FF01  0000               	dw	0
    46  00FF03  000A               	dw	10
    47  00FF05  0000               	dw	0
    48  00FF07  0064               	dw	100
    49  00FF09  0000               	dw	0
    50  00FF0B  03E8               	dw	1000
    51  00FF0D  0000               	dw	0
    52  00FF0F  2710               	dw	10000
    53  00FF11  0000               	dw	0
    54  00FF13  86A0               	dw	34464
    55  00FF15  0001               	dw	1
    56  00FF17  4240               	dw	16960
    57  00FF19  000F               	dw	15
    58  00FF1B  9680               	dw	38528
    59  00FF1D  0098               	dw	152
    60  00FF1F  E100               	dw	57600
    61  00FF21  05F5               	dw	1525
    62  00FF23  CA00               	dw	51712
    63  00FF25  3B9A               	dw	15258
    64  00FF27                     __end_of_dpowers:
    65                           	opt stack 0
    66  00FF27                     __npowers_:
    67                           	opt stack 0
    68  00FF27  00                 	db	0
    69  00FF28  80                 	db	128
    70  00FF29  3F                 	db	63
    71  00FF2A  CD                 	db	205
    72  00FF2B  CC                 	db	204
    73  00FF2C  3D                 	db	61
    74  00FF2D  D7                 	db	215
    75  00FF2E  23                 	db	35
    76  00FF2F  3C                 	db	60
    77  00FF30  12                 	db	18
    78  00FF31  83                 	db	131
    79  00FF32  3A                 	db	58
    80  00FF33  B7                 	db	183
    81  00FF34  D1                 	db	209
    82  00FF35  38                 	db	56
    83  00FF36  C6                 	db	198
    84  00FF37  27                 	db	39
    85  00FF38  37                 	db	55
    86  00FF39  38                 	db	56
    87  00FF3A  86                 	db	134
    88  00FF3B  35                 	db	53
    89  00FF3C  C0                 	db	192
    90  00FF3D  D6                 	db	214
    91  00FF3E  33                 	db	51
    92  00FF3F  CC                 	db	204
    93  00FF40  2B                 	db	43
    94  00FF41  32                 	db	50
    95  00FF42  70                 	db	112
    96  00FF43  89                 	db	137
    97  00FF44  30                 	db	48
    98  00FF45  E7                 	db	231
    99  00FF46  DB                 	db	219
   100  00FF47  2E                 	db	46
   101  00FF48  E5                 	db	229
   102  00FF49  3C                 	db	60
   103  00FF4A  1E                 	db	30
   104  00FF4B  42                 	db	66
   105  00FF4C  A2                 	db	162
   106  00FF4D  0D                 	db	13
   107  00FF4E                     __end_of__npowers_:
   108                           	opt stack 0
   109  00FF4E                     __powers_:
   110                           	opt stack 0
   111  00FF4E  00                 	db	0
   112  00FF4F  80                 	db	128
   113  00FF50  3F                 	db	63
   114  00FF51  00                 	db	0
   115  00FF52  20                 	db	32
   116  00FF53  41                 	db	65
   117  00FF54  00                 	db	0
   118  00FF55  C8                 	db	200
   119  00FF56  42                 	db	66
   120  00FF57  00                 	db	0
   121  00FF58  7A                 	db	122
   122  00FF59  44                 	db	68
   123  00FF5A  40                 	db	64
   124  00FF5B  1C                 	db	28
   125  00FF5C  46                 	db	70
   126  00FF5D  50                 	db	80
   127  00FF5E  C3                 	db	195
   128  00FF5F  47                 	db	71
   129  00FF60  24                 	db	36
   130  00FF61  74                 	db	116
   131  00FF62  49                 	db	73
   132  00FF63  97                 	db	151
   133  00FF64  18                 	db	24
   134  00FF65  4B                 	db	75
   135  00FF66  BC                 	db	188
   136  00FF67  BE                 	db	190
   137  00FF68  4C                 	db	76
   138  00FF69  6B                 	db	107
   139  00FF6A  6E                 	db	110
   140  00FF6B  4E                 	db	78
   141  00FF6C  03                 	db	3
   142  00FF6D  15                 	db	21
   143  00FF6E  50                 	db	80
   144  00FF6F  79                 	db	121
   145  00FF70  AD                 	db	173
   146  00FF71  60                 	db	96
   147  00FF72  F3                 	db	243
   148  00FF73  49                 	db	73
   149  00FF74  71                 	db	113
   150  00FF75                     __end_of__powers_:
   151                           	opt stack 0
   152  0000                     _ADCON0	set	4034
   153  0000                     _ADCON0bits	set	4034
   154  0000                     _ADCON1	set	4033
   155  0000                     _ADCON2	set	4032
   156  0000                     _ADRESH	set	4036
   157  0000                     _ADRESL	set	4035
   158  0000                     _OSCCON	set	4051
   159  0000                     _PIE1bits	set	3997
   160  0000                     _PIR1bits	set	3998
   161  0000                     _RCSTA	set	4011
   162  0000                     _RCSTAbits	set	4011
   163  0000                     _SPBRG	set	4015
   164  0000                     _SPBRGH	set	4016
   165  0000                     _TRISCbits	set	3988
   166  0000                     _TXREG	set	4013
   167  0000                     _TXSTA	set	4012
   168  0000                     _TXSTAbits	set	4012
   169  0000                     _TRMT	set	32097
   170  00FF75                     STR_6:
   171  00FF75  52                 	db	82	;'R'
   172  00FF76  65                 	db	101	;'e'
   173  00FF77  66                 	db	102	;'f'
   174  00FF78  65                 	db	101	;'e'
   175  00FF79  72                 	db	114	;'r'
   176  00FF7A  65                 	db	101	;'e'
   177  00FF7B  6E                 	db	110	;'n'
   178  00FF7C  63                 	db	99	;'c'
   179  00FF7D  65                 	db	101	;'e'
   180  00FF7E  20                 	db	32
   181  00FF7F  76                 	db	118	;'v'
   182  00FF80  6F                 	db	111	;'o'
   183  00FF81  6C                 	db	108	;'l'
   184  00FF82  74                 	db	116	;'t'
   185  00FF83  61                 	db	97	;'a'
   186  00FF84  67                 	db	103	;'g'
   187  00FF85  65                 	db	101	;'e'
   188  00FF86  20                 	db	32
   189  00FF87  61                 	db	97	;'a'
   190  00FF88  74                 	db	116	;'t'
   191  00FF89  20                 	db	32
   192  00FF8A  41                 	db	65	;'A'
   193  00FF8B  4E                 	db	78	;'N'
   194  00FF8C  33                 	db	51	;'3'
   195  00FF8D  20                 	db	32
   196  00FF8E  69                 	db	105	;'i'
   197  00FF8F  73                 	db	115	;'s'
   198  00FF90  20                 	db	32
   199  00FF91  25                 	db	37
   200  00FF92  66                 	db	102	;'f'
   201  00FF93  0D                 	db	13
   202  00FF94  0A                 	db	10
   203  00FF95  0A                 	db	10
   204  00FF96  00                 	db	0
   205  00FF97                     STR_1:
   206  00FF97  54                 	db	84	;'T'
   207  00FF98  65                 	db	101	;'e'
   208  00FF99  73                 	db	115	;'s'
   209  00FF9A  74                 	db	116	;'t'
   210  00FF9B  69                 	db	105	;'i'
   211  00FF9C  6E                 	db	110	;'n'
   212  00FF9D  67                 	db	103	;'g'
   213  00FF9E  20                 	db	32
   214  00FF9F  41                 	db	65	;'A'
   215  00FFA0  2F                 	db	47
   216  00FFA1  44                 	db	68	;'D'
   217  00FFA2  20                 	db	32
   218  00FFA3  70                 	db	112	;'p'
   219  00FFA4  69                 	db	105	;'i'
   220  00FFA5  6E                 	db	110	;'n'
   221  00FFA6  73                 	db	115	;'s'
   222  00FFA7  3F                 	db	63	;'?'
   223  00FFA8  20                 	db	32
   224  00FFA9  0D                 	db	13
   225  00FFAA  0A                 	db	10
   226  00FFAB  0A                 	db	10
   227  00FFAC  00                 	db	0
   228  00FFAD                     STR_5:
   229  00FFAD  56                 	db	86	;'V'
   230  00FFAE  6F                 	db	111	;'o'
   231  00FFAF  6C                 	db	108	;'l'
   232  00FFB0  74                 	db	116	;'t'
   233  00FFB1  20                 	db	32
   234  00FFB2  61                 	db	97	;'a'
   235  00FFB3  74                 	db	116	;'t'
   236  00FFB4  20                 	db	32
   237  00FFB5  41                 	db	65	;'A'
   238  00FFB6  4E                 	db	78	;'N'
   239  00FFB7  34                 	db	52	;'4'
   240  00FFB8  20                 	db	32
   241  00FFB9  69                 	db	105	;'i'
   242  00FFBA  73                 	db	115	;'s'
   243  00FFBB  20                 	db	32
   244  00FFBC  25                 	db	37
   245  00FFBD  66                 	db	102	;'f'
   246  00FFBE  0D                 	db	13
   247  00FFBF  0A                 	db	10
   248  00FFC0  0A                 	db	10
   249  00FFC1  00                 	db	0
   250  00FFC2                     STR_2:
   251  00FFC2  56                 	db	86	;'V'
   252  00FFC3  6F                 	db	111	;'o'
   253  00FFC4  6C                 	db	108	;'l'
   254  00FFC5  74                 	db	116	;'t'
   255  00FFC6  20                 	db	32
   256  00FFC7  61                 	db	97	;'a'
   257  00FFC8  74                 	db	116	;'t'
   258  00FFC9  20                 	db	32
   259  00FFCA  41                 	db	65	;'A'
   260  00FFCB  4E                 	db	78	;'N'
   261  00FFCC  30                 	db	48	;'0'
   262  00FFCD  20                 	db	32
   263  00FFCE  69                 	db	105	;'i'
   264  00FFCF  73                 	db	115	;'s'
   265  00FFD0  20                 	db	32
   266  00FFD1  25                 	db	37
   267  00FFD2  66                 	db	102	;'f'
   268  00FFD3  0D                 	db	13
   269  00FFD4  0A                 	db	10
   270  00FFD5  00                 	db	0
   271  00FFD6                     STR_3:
   272  00FFD6  56                 	db	86	;'V'
   273  00FFD7  6F                 	db	111	;'o'
   274  00FFD8  6C                 	db	108	;'l'
   275  00FFD9  74                 	db	116	;'t'
   276  00FFDA  20                 	db	32
   277  00FFDB  61                 	db	97	;'a'
   278  00FFDC  74                 	db	116	;'t'
   279  00FFDD  20                 	db	32
   280  00FFDE  41                 	db	65	;'A'
   281  00FFDF  4E                 	db	78	;'N'
   282  00FFE0  31                 	db	49	;'1'
   283  00FFE1  20                 	db	32
   284  00FFE2  69                 	db	105	;'i'
   285  00FFE3  73                 	db	115	;'s'
   286  00FFE4  20                 	db	32
   287  00FFE5  25                 	db	37
   288  00FFE6  66                 	db	102	;'f'
   289  00FFE7  0D                 	db	13
   290  00FFE8  0A                 	db	10
   291  00FFE9  00                 	db	0
   292  00FFEA                     STR_4:
   293  00FFEA  56                 	db	86	;'V'
   294  00FFEB  6F                 	db	111	;'o'
   295  00FFEC  6C                 	db	108	;'l'
   296  00FFED  74                 	db	116	;'t'
   297  00FFEE  20                 	db	32
   298  00FFEF  61                 	db	97	;'a'
   299  00FFF0  74                 	db	116	;'t'
   300  00FFF1  20                 	db	32
   301  00FFF2  41                 	db	65	;'A'
   302  00FFF3  4E                 	db	78	;'N'
   303  00FFF4  32                 	db	50	;'2'
   304  00FFF5  20                 	db	32
   305  00FFF6  69                 	db	105	;'i'
   306  00FFF7  73                 	db	115	;'s'
   307  00FFF8  20                 	db	32
   308  00FFF9  25                 	db	37
   309  00FFFA  66                 	db	102	;'f'
   310  00FFFB  0D                 	db	13
   311  00FFFC  0A                 	db	10
   312  00FFFD  00                 	db	0
   313                           
   314                           ; #config settings
   315  00FFFE  00                 	db	0	; dummy byte at the end
   316  0000                     
   317                           	psect	cinit
   318  00E546                     __pcinit:
   319                           	opt stack 0
   320  00E546                     start_initialization:
   321                           	opt stack 0
   322  00E546                     __initialization:
   323                           	opt stack 0
   324  00E546                     end_of_initialization:
   325                           	opt stack 0
   326  00E546                     __end_of__initialization:
   327                           	opt stack 0
   328  00E546  0E00               	movlw	low (__Lmediumconst shr (0+16))
   329  00E548  6EF8               	movwf	tblptru,c
   330  00E54A  0100               	movlb	0
   331  00E54C  EF78  F076         	goto	_main	;jump to C main() function
   332                           tblptru	equ	0xFF8
   333                           
   334                           	psect	cstackCOMRAM
   335  000001                     __pcstackCOMRAM:
   336                           	opt stack 0
   337  000001                     ?_Get_Full_ADC:
   338                           	opt stack 0
   339  000001                     ?___awmod:
   340                           	opt stack 0
   341  000001                     ?___ftpack:
   342                           	opt stack 0
   343  000001                     ?___ftneg:
   344                           	opt stack 0
   345  000001                     ?__tdiv_to_l_:
   346                           	opt stack 0
   347  000001                     ?__div_to_l_:
   348                           	opt stack 0
   349  000001                     ?___lldiv:
   350                           	opt stack 0
   351  000001                     ?___llmod:
   352                           	opt stack 0
   353  000001                     putch@c:
   354                           	opt stack 0
   355  000001                     OpenUSART@spbrg:
   356                           	opt stack 0
   357  000001                     ___awmod@dividend:
   358                           	opt stack 0
   359  000001                     __div_to_l_@f1:
   360                           	opt stack 0
   361  000001                     ___ftpack@arg:
   362                           	opt stack 0
   363  000001                     __tdiv_to_l_@f1:
   364                           	opt stack 0
   365  000001                     ___ftge@ff1:
   366                           	opt stack 0
   367  000001                     ___ftneg@f1:
   368                           	opt stack 0
   369  000001                     ___lldiv@dividend:
   370                           	opt stack 0
   371  000001                     ___llmod@dividend:
   372                           	opt stack 0
   373                           
   374                           ; 4 bytes @ 0x0
   375  000001                     	ds	2
   376  000003                     ??_Get_Full_ADC:
   377  000003                     OpenUSART@config:
   378                           	opt stack 0
   379  000003                     ___awmod@divisor:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x2
   383  000003                     	ds	1
   384  000004                     ___ftpack@exp:
   385                           	opt stack 0
   386  000004                     __div_to_l_@f2:
   387                           	opt stack 0
   388  000004                     __tdiv_to_l_@f2:
   389                           	opt stack 0
   390  000004                     ___ftge@ff2:
   391                           	opt stack 0
   392                           
   393                           ; 3 bytes @ 0x3
   394  000004                     	ds	1
   395  000005                     ___awmod@counter:
   396                           	opt stack 0
   397  000005                     ___ftpack@sign:
   398                           	opt stack 0
   399  000005                     Get_Full_ADC@result:
   400                           	opt stack 0
   401  000005                     ___lldiv@divisor:
   402                           	opt stack 0
   403  000005                     ___llmod@divisor:
   404                           	opt stack 0
   405                           
   406                           ; 4 bytes @ 0x4
   407  000005                     	ds	1
   408  000006                     ??___ftpack:
   409  000006                     ___awmod@sign:
   410                           	opt stack 0
   411                           
   412                           ; 1 bytes @ 0x5
   413  000006                     	ds	1
   414  000007                     ??__tdiv_to_l_:
   415  000007                     ??___ftge:
   416  000007                     ?___awdiv:
   417                           	opt stack 0
   418  000007                     ___awdiv@dividend:
   419                           	opt stack 0
   420  000007                     __div_to_l_@quot:
   421                           	opt stack 0
   422                           
   423                           ; 4 bytes @ 0x6
   424  000007                     	ds	2
   425  000009                     ?___awtoft:
   426                           	opt stack 0
   427  000009                     ?___lltoft:
   428                           	opt stack 0
   429  000009                     ___llmod@counter:
   430                           	opt stack 0
   431  000009                     ___awdiv@divisor:
   432                           	opt stack 0
   433  000009                     ___awtoft@c:
   434                           	opt stack 0
   435  000009                     ___lldiv@quotient:
   436                           	opt stack 0
   437  000009                     ___lltoft@c:
   438                           	opt stack 0
   439                           
   440                           ; 4 bytes @ 0x8
   441  000009                     	ds	1
   442  00000A                     __tdiv_to_l_@quot:
   443                           	opt stack 0
   444                           
   445                           ; 4 bytes @ 0x9
   446  00000A                     	ds	1
   447  00000B                     ___awdiv@counter:
   448                           	opt stack 0
   449  00000B                     __div_to_l_@cntr:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0xA
   453  00000B                     	ds	1
   454  00000C                     ___awdiv@sign:
   455                           	opt stack 0
   456  00000C                     ___awtoft@sign:
   457                           	opt stack 0
   458  00000C                     __div_to_l_@exp1:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0xB
   462  00000C                     	ds	1
   463  00000D                     ??___lltoft:
   464  00000D                     ?___ftdiv:
   465                           	opt stack 0
   466  00000D                     ___lldiv@counter:
   467                           	opt stack 0
   468  00000D                     ___awdiv@quotient:
   469                           	opt stack 0
   470  00000D                     ___ftdiv@f1:
   471                           	opt stack 0
   472                           
   473                           ; 3 bytes @ 0xC
   474  00000D                     	ds	1
   475  00000E                     __tdiv_to_l_@cntr:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0xD
   479  00000E                     	ds	1
   480  00000F                     ?___wmul:
   481                           	opt stack 0
   482  00000F                     __tdiv_to_l_@exp1:
   483                           	opt stack 0
   484  00000F                     ___wmul@multiplier:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0xE
   488  00000F                     	ds	1
   489  000010                     ___ftdiv@f2:
   490                           	opt stack 0
   491                           
   492                           ; 3 bytes @ 0xF
   493  000010                     	ds	1
   494  000011                     ___lltoft@exp:
   495                           	opt stack 0
   496  000011                     ___wmul@multiplicand:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x10
   500  000011                     	ds	2
   501  000013                     ??___ftdiv:
   502  000013                     ___wmul@product:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x12
   506  000013                     	ds	3
   507  000016                     ___ftdiv@cntr:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x15
   511  000016                     	ds	1
   512  000017                     ___ftdiv@f3:
   513                           	opt stack 0
   514                           
   515                           ; 3 bytes @ 0x16
   516  000017                     	ds	3
   517  00001A                     ___ftdiv@exp:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0x19
   521  00001A                     	ds	1
   522  00001B                     ___ftdiv@sign:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x1A
   526  00001B                     	ds	1
   527  00001C                     ?___ftmul:
   528                           	opt stack 0
   529  00001C                     ___ftmul@f1:
   530                           	opt stack 0
   531                           
   532                           ; 3 bytes @ 0x1B
   533  00001C                     	ds	3
   534  00001F                     ___ftmul@f2:
   535                           	opt stack 0
   536                           
   537                           ; 3 bytes @ 0x1E
   538  00001F                     	ds	3
   539  000022                     ??___ftmul:
   540                           
   541                           ; 0 bytes @ 0x21
   542  000022                     	ds	3
   543  000025                     ___ftmul@exp:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x24
   547  000025                     	ds	1
   548  000026                     ___ftmul@f3_as_product:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x25
   552  000026                     	ds	3
   553  000029                     ___ftmul@cntr:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x28
   557  000029                     	ds	1
   558  00002A                     ___ftmul@sign:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x29
   562  00002A                     	ds	1
   563  00002B                     ?_Read_Ch_Volt:
   564                           	opt stack 0
   565  00002B                     ?_fround:
   566                           	opt stack 0
   567  00002B                     ?_scale:
   568                           	opt stack 0
   569                           
   570                           ; 3 bytes @ 0x2A
   571  00002B                     	ds	3
   572  00002E                     Read_Ch_Volt@Volt:
   573                           	opt stack 0
   574  00002E                     _fround$1008:
   575                           	opt stack 0
   576  00002E                     _scale$1009:
   577                           	opt stack 0
   578                           
   579                           ; 3 bytes @ 0x2D
   580  00002E                     	ds	3
   581  000031                     scale@scl:
   582                           	opt stack 0
   583  000031                     Read_Ch_Volt@ADC_Result:
   584                           	opt stack 0
   585  000031                     _fround$1007:
   586                           	opt stack 0
   587                           
   588                           ; 3 bytes @ 0x30
   589  000031                     	ds	1
   590  000032                     ?___fttol:
   591                           	opt stack 0
   592  000032                     ___fttol@f1:
   593                           	opt stack 0
   594                           
   595                           ; 3 bytes @ 0x31
   596  000032                     	ds	1
   597  000033                     Read_Ch_Volt@ch_num:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x32
   601  000033                     	ds	1
   602  000034                     fround@prec:
   603                           	opt stack 0
   604                           
   605                           ; 1 bytes @ 0x33
   606  000034                     	ds	1
   607  000035                     ?___ftadd:
   608                           	opt stack 0
   609  000035                     ___ftadd@f1:
   610                           	opt stack 0
   611                           
   612                           ; 3 bytes @ 0x34
   613  000035                     	ds	1
   614  000036                     ??___fttol:
   615                           
   616                           ; 0 bytes @ 0x35
   617  000036                     	ds	2
   618  000038                     ___ftadd@f2:
   619                           	opt stack 0
   620                           
   621                           ; 3 bytes @ 0x37
   622  000038                     	ds	3
   623  00003B                     ??___ftadd:
   624  00003B                     ___fttol@sign1:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0x3A
   628  00003B                     	ds	1
   629  00003C                     ___fttol@lval:
   630                           	opt stack 0
   631                           
   632                           ; 4 bytes @ 0x3B
   633  00003C                     	ds	2
   634  00003E                     ___ftadd@sign:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x3D
   638  00003E                     	ds	1
   639  00003F                     ___ftadd@exp2:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x3E
   643  00003F                     	ds	1
   644  000040                     ___ftadd@exp1:
   645                           	opt stack 0
   646  000040                     ___fttol@exp1:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x3F
   650  000040                     	ds	1
   651  000041                     ?___ftsub:
   652                           	opt stack 0
   653  000041                     ___ftsub@f1:
   654                           	opt stack 0
   655                           
   656                           ; 3 bytes @ 0x40
   657  000041                     	ds	3
   658  000044                     ___ftsub@f2:
   659                           	opt stack 0
   660                           
   661                           ; 3 bytes @ 0x43
   662  000044                     	ds	3
   663  000047                     ?_printf:
   664                           	opt stack 0
   665  000047                     printf@f:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x46
   669  000047                     	ds	5
   670  00004C                     ??_printf:
   671                           
   672                           ; 0 bytes @ 0x4B
   673  00004C                     	ds	6
   674  000052                     _printf$1010:
   675                           	opt stack 0
   676                           
   677                           ; 3 bytes @ 0x51
   678  000052                     	ds	3
   679  000055                     printf@ap:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x54
   683  000055                     	ds	2
   684  000057                     printf@flag:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x56
   688  000057                     	ds	2
   689  000059                     printf@prec:
   690                           	opt stack 0
   691                           
   692                           ; 2 bytes @ 0x58
   693  000059                     	ds	2
   694  00005B                     printf@val:
   695                           	opt stack 0
   696                           
   697                           ; 4 bytes @ 0x5A
   698  00005B                     	ds	4
   699  00005F                     printf@exp:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x5E
   703  00005F                     	ds	2
   704  000061                     printf@tmpval:
   705                           	opt stack 0
   706                           
   707                           ; 4 bytes @ 0x60
   708  000061                     	ds	4
   709  000065                     printf@fval:
   710                           	opt stack 0
   711                           
   712                           ; 3 bytes @ 0x64
   713  000065                     	ds	3
   714  000068                     printf@c:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0x67
   718  000068                     	ds	1
   719  000069                     main@Volt:
   720                           	opt stack 0
   721                           
   722                           ; 3 bytes @ 0x68
   723  000069                     	ds	3
   724                           tblptru	equ	0xFF8
   725                           
   726 ;;
   727 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   728 ;;
   729 ;; *************** function _main *****************
   730 ;; Defined at:
   731 ;;		line 58 in file "Lab1p3.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;		None
   734 ;; Auto vars:     Size  Location     Type
   735 ;;  Volt            3  104[COMRAM] float 
   736 ;; Return value:  Size  Location     Type
   737 ;;		None               void
   738 ;; Registers used:
   739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   740 ;; Tracked objects:
   741 ;;		On entry : 0/0
   742 ;;		On exit  : 0/0
   743 ;;		Unchanged: 0/0
   744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   746 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   748 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   749 ;;Total ram usage:        3 bytes
   750 ;; Hardware stack levels required when called:    4
   751 ;; This function calls:
   752 ;;		_Init_ADC
   753 ;;		_Init_UART
   754 ;;		_Read_Ch_Volt
   755 ;;		_printf
   756 ;; This function is called by:
   757 ;;		Startup code after reset
   758 ;; This function uses a non-reentrant model
   759 ;;
   760                           
   761                           	psect	text0
   762  00ECF0                     __ptext0:
   763                           	opt stack 0
   764  00ECF0                     _main:
   765                           	opt stack 27
   766                           
   767                           ;Lab1p3.c: 60: float Volt;
   768                           ;Lab1p3.c: 61: Init_UART();
   769                           
   770                           ;incstack = 0
   771  00ECF0  ECB6  F072         	call	_Init_UART	;wreg free
   772                           
   773                           ;Lab1p3.c: 62: Init_ADC();
   774  00ECF4  ECA8  F072         	call	_Init_ADC	;wreg free
   775  00ECF8  D000               	goto	l2489
   776  00ECFA                     l2489:
   777                           
   778                           ;Lab1p3.c: 65: {
   779                           ;Lab1p3.c: 66: printf ("Testing A/D pins? \r\n\n");
   780  00ECFA  0E97               	movlw	low STR_1
   781  00ECFC  6E47               	movwf	printf@f,c
   782  00ECFE  0EFF               	movlw	high STR_1
   783  00ED00  6E48               	movwf	printf@f+1,c
   784  00ED02  EC6C  F07C         	call	_printf	;wreg free
   785                           
   786                           ;Lab1p3.c: 67: Volt = Read_Ch_Volt( 0);
   787  00ED06  0E00               	movlw	0
   788  00ED08  ECD9  F073         	call	_Read_Ch_Volt
   789  00ED0C  C02B  F069         	movff	?_Read_Ch_Volt,main@Volt
   790  00ED10  C02C  F06A         	movff	?_Read_Ch_Volt+1,main@Volt+1
   791  00ED14  C02D  F06B         	movff	?_Read_Ch_Volt+2,main@Volt+2
   792                           
   793                           ;Lab1p3.c: 68: printf ("Volt at AN0 is %f\r\n", Volt);
   794  00ED18  0EC2               	movlw	low STR_2
   795  00ED1A  6E47               	movwf	printf@f,c
   796  00ED1C  0EFF               	movlw	high STR_2
   797  00ED1E  6E48               	movwf	printf@f+1,c
   798  00ED20  C069  F049         	movff	main@Volt,?_printf+2
   799  00ED24  C06A  F04A         	movff	main@Volt+1,?_printf+3
   800  00ED28  C06B  F04B         	movff	main@Volt+2,?_printf+4
   801  00ED2C  EC6C  F07C         	call	_printf	;wreg free
   802                           
   803                           ;Lab1p3.c: 69: Volt = Read_Ch_Volt( 1);
   804  00ED30  0E01               	movlw	1
   805  00ED32  ECD9  F073         	call	_Read_Ch_Volt
   806  00ED36  C02B  F069         	movff	?_Read_Ch_Volt,main@Volt
   807  00ED3A  C02C  F06A         	movff	?_Read_Ch_Volt+1,main@Volt+1
   808  00ED3E  C02D  F06B         	movff	?_Read_Ch_Volt+2,main@Volt+2
   809                           
   810                           ;Lab1p3.c: 71: printf ("Volt at AN1 is %f\r\n", Volt);
   811  00ED42  0ED6               	movlw	low STR_3
   812  00ED44  6E47               	movwf	printf@f,c
   813  00ED46  0EFF               	movlw	high STR_3
   814  00ED48  6E48               	movwf	printf@f+1,c
   815  00ED4A  C069  F049         	movff	main@Volt,?_printf+2
   816  00ED4E  C06A  F04A         	movff	main@Volt+1,?_printf+3
   817  00ED52  C06B  F04B         	movff	main@Volt+2,?_printf+4
   818  00ED56  EC6C  F07C         	call	_printf	;wreg free
   819                           
   820                           ;Lab1p3.c: 72: Volt = Read_Ch_Volt( 2);
   821  00ED5A  0E02               	movlw	2
   822  00ED5C  ECD9  F073         	call	_Read_Ch_Volt
   823  00ED60  C02B  F069         	movff	?_Read_Ch_Volt,main@Volt
   824  00ED64  C02C  F06A         	movff	?_Read_Ch_Volt+1,main@Volt+1
   825  00ED68  C02D  F06B         	movff	?_Read_Ch_Volt+2,main@Volt+2
   826                           
   827                           ;Lab1p3.c: 73: printf ("Volt at AN2 is %f\r\n", Volt);
   828  00ED6C  0EEA               	movlw	low STR_4
   829  00ED6E  6E47               	movwf	printf@f,c
   830  00ED70  0EFF               	movlw	high STR_4
   831  00ED72  6E48               	movwf	printf@f+1,c
   832  00ED74  C069  F049         	movff	main@Volt,?_printf+2
   833  00ED78  C06A  F04A         	movff	main@Volt+1,?_printf+3
   834  00ED7C  C06B  F04B         	movff	main@Volt+2,?_printf+4
   835  00ED80  EC6C  F07C         	call	_printf	;wreg free
   836                           
   837                           ;Lab1p3.c: 74: Volt = Read_Ch_Volt( 4);
   838  00ED84  0E04               	movlw	4
   839  00ED86  ECD9  F073         	call	_Read_Ch_Volt
   840  00ED8A  C02B  F069         	movff	?_Read_Ch_Volt,main@Volt
   841  00ED8E  C02C  F06A         	movff	?_Read_Ch_Volt+1,main@Volt+1
   842  00ED92  C02D  F06B         	movff	?_Read_Ch_Volt+2,main@Volt+2
   843                           
   844                           ;Lab1p3.c: 75: printf ("Volt at AN4 is %f\r\n\n", Volt);
   845  00ED96  0EAD               	movlw	low STR_5
   846  00ED98  6E47               	movwf	printf@f,c
   847  00ED9A  0EFF               	movlw	high STR_5
   848  00ED9C  6E48               	movwf	printf@f+1,c
   849  00ED9E  C069  F049         	movff	main@Volt,?_printf+2
   850  00EDA2  C06A  F04A         	movff	main@Volt+1,?_printf+3
   851  00EDA6  C06B  F04B         	movff	main@Volt+2,?_printf+4
   852  00EDAA  EC6C  F07C         	call	_printf	;wreg free
   853                           
   854                           ;Lab1p3.c: 76: Volt = Read_Ch_Volt( 3);
   855  00EDAE  0E03               	movlw	3
   856  00EDB0  ECD9  F073         	call	_Read_Ch_Volt
   857  00EDB4  C02B  F069         	movff	?_Read_Ch_Volt,main@Volt
   858  00EDB8  C02C  F06A         	movff	?_Read_Ch_Volt+1,main@Volt+1
   859  00EDBC  C02D  F06B         	movff	?_Read_Ch_Volt+2,main@Volt+2
   860                           
   861                           ;Lab1p3.c: 77: printf ("Reference voltage at AN3 is %f\r\n\n", Volt);
   862  00EDC0  0E75               	movlw	low STR_6
   863  00EDC2  6E47               	movwf	printf@f,c
   864  00EDC4  0EFF               	movlw	high STR_6
   865  00EDC6  6E48               	movwf	printf@f+1,c
   866  00EDC8  C069  F049         	movff	main@Volt,?_printf+2
   867  00EDCC  C06A  F04A         	movff	main@Volt+1,?_printf+3
   868  00EDD0  C06B  F04B         	movff	main@Volt+2,?_printf+4
   869  00EDD4  EC6C  F07C         	call	_printf	;wreg free
   870  00EDD8  D790               	goto	l2489
   871  00EDDA  EF00  F000         	goto	start
   872  00EDDE                     __end_of_main:
   873                           	opt stack 0
   874                           tblptru	equ	0xFF8
   875                           
   876 ;; *************** function _printf *****************
   877 ;; Defined at:
   878 ;;		line 464 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
   879 ;; Parameters:    Size  Location     Type
   880 ;;  f               2   70[COMRAM] PTR const unsigned char 
   881 ;;		 -> STR_6(34), STR_5(21), STR_4(20), STR_3(20), 
   882 ;;		 -> STR_2(20), STR_1(22), 
   883 ;; Auto vars:     Size  Location     Type
   884 ;;  tmpval          4   96[COMRAM] struct .
   885 ;;  val             4   90[COMRAM] unsigned long 
   886 ;;  fval            3  100[COMRAM] unsigned long 
   887 ;;  cp              3    0        PTR const unsigned char 
   888 ;;  exp             2   94[COMRAM] int 
   889 ;;  prec            2   88[COMRAM] int 
   890 ;;  flag            2   86[COMRAM] unsigned short 
   891 ;;  ap              2   84[COMRAM] PTR void [1]
   892 ;;		 -> ?_printf(2), 
   893 ;;  len             2    0        unsigned int 
   894 ;;  width           2    0        int 
   895 ;;  c               1  103[COMRAM] char 
   896 ;;  d               1    0        unsigned char 
   897 ;; Return value:  Size  Location     Type
   898 ;;                  2   70[COMRAM] int 
   899 ;; Registers used:
   900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   901 ;; Tracked objects:
   902 ;;		On entry : 0/0
   903 ;;		On exit  : 0/0
   904 ;;		Unchanged: 0/0
   905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   906 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   907 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   908 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   909 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   910 ;;Total ram usage:       34 bytes
   911 ;; Hardware stack levels used:    1
   912 ;; Hardware stack levels required when called:    3
   913 ;; This function calls:
   914 ;;		___awdiv
   915 ;;		___ftadd
   916 ;;		___ftge
   917 ;;		___ftmul
   918 ;;		___ftneg
   919 ;;		___ftsub
   920 ;;		___fttol
   921 ;;		___lldiv
   922 ;;		___llmod
   923 ;;		___lltoft
   924 ;;		___wmul
   925 ;;		__div_to_l_
   926 ;;		__tdiv_to_l_
   927 ;;		_fround
   928 ;;		_putch
   929 ;;		_scale
   930 ;; This function is called by:
   931 ;;		_main
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           	psect	text1
   936  00F8D8                     __ptext1:
   937                           	opt stack 0
   938  00F8D8                     _printf:
   939                           	opt stack 27
   940                           
   941                           ;doprnt.c: 466: va_list ap;
   942                           ;doprnt.c: 499: signed char c;
   943                           ;doprnt.c: 501: int width;
   944                           ;doprnt.c: 504: int prec;
   945                           ;doprnt.c: 508: unsigned short flag;
   946                           ;doprnt.c: 515: char d;
   947                           ;doprnt.c: 516: double fval;
   948                           ;doprnt.c: 517: int exp;
   949                           ;doprnt.c: 523: union {
   950                           ;doprnt.c: 524: unsigned long vd;
   951                           ;doprnt.c: 525: double integ;
   952                           ;doprnt.c: 526: } tmpval;
   953                           ;doprnt.c: 528: unsigned long val;
   954                           ;doprnt.c: 529: unsigned len;
   955                           ;doprnt.c: 530: const char * cp;
   956                           ;doprnt.c: 533: *ap = __va_start();
   957                           
   958                           ;incstack = 0
   959  00F8D8  0E49               	movlw	low (?_printf+2)
   960  00F8DA  6E55               	movwf	printf@ap,c
   961  00F8DC  0E00               	movlw	high (?_printf+2)
   962  00F8DE  6E56               	movwf	printf@ap+1,c
   963                           
   964                           ;doprnt.c: 536: while(c = *f++) {
   965  00F8E0  D2FF               	goto	l2485
   966  00F8E2                     l2337:
   967                           
   968                           ;doprnt.c: 538: if(c != '%')
   969  00F8E2  0E25               	movlw	37
   970  00F8E4  1868               	xorwf	printf@c,w,c
   971  00F8E6  B4D8               	btfsc	status,2,c
   972  00F8E8  D004               	goto	l2341
   973                           
   974                           ;doprnt.c: 540: {
   975                           ;doprnt.c: 541: (putch(c) );
   976  00F8EA  5068               	movf	printf@c,w,c
   977  00F8EC  ECAF  F072         	call	_putch
   978                           
   979                           ;doprnt.c: 542: continue;
   980  00F8F0  D2F7               	goto	l2485
   981  00F8F2                     l2341:
   982                           
   983                           ;doprnt.c: 543: }
   984                           ;doprnt.c: 548: flag = 0;
   985  00F8F2  0E00               	movlw	0
   986  00F8F4  6E58               	movwf	printf@flag+1,c
   987  00F8F6  0E00               	movlw	0
   988  00F8F8  6E57               	movwf	printf@flag,c
   989                           
   990                           ;doprnt.c: 635: switch(c = *f++) {
   991  00F8FA  D005               	goto	l2347
   992                           
   993                           ;doprnt.c: 638: goto alldone;
   994                           
   995                           ;doprnt.c: 637: case 0:
   996  00F8FC  D2FF               	goto	l132
   997  00F8FE                     l2343:
   998                           
   999                           ;doprnt.c: 663: flag |= 0x400;
  1000  00F8FE  8458               	bsf	printf@flag+1,2,c
  1001                           
  1002                           ;doprnt.c: 664: break;
  1003  00F900  D013               	goto	l2349
  1004                           
  1005                           ;doprnt.c: 813: continue;
  1006                           
  1007                           ;doprnt.c: 802: default:
  1008  00F902  D2EE               	goto	l2485
  1009                           
  1010                           ;doprnt.c: 822: }
  1011  00F904  D011               	goto	l2349
  1012  00F906                     l2347:
  1013  00F906  C047  FFF6         	movff	printf@f,tblptrl
  1014  00F90A  C048  FFF7         	movff	printf@f+1,tblptrh
  1015  00F90E  4A47               	infsnz	printf@f,f,c
  1016  00F910  2A48               	incf	printf@f+1,f,c
  1017  00F912                     	if	0	;tblptru may be non-zero
  1018  00F912                     	endif
  1019  00F912                     	if	0	;tblptru may be non-zero
  1020  00F912                     	endif
  1021  00F912  0008               	tblrd		*
  1022  00F914  CFF5 F068          	movff	tablat,printf@c
  1023  00F918  5068               	movf	printf@c,w,c
  1024                           
  1025                           ; Switch size 1, requested type "space"
  1026                           ; Number of cases is 2, Range of values is 0 to 102
  1027                           ; switch strategies available:
  1028                           ; Name         Instructions Cycles
  1029                           ; simple_byte            7     4 (average)
  1030                           ;	Chosen strategy is simple_byte
  1031  00F91A  0A00               	xorlw	0	; case 0
  1032  00F91C  B4D8               	btfsc	status,2,c
  1033  00F91E  D2EE               	goto	l132
  1034  00F920  0A66               	xorlw	102	; case 102
  1035  00F922  B4D8               	btfsc	status,2,c
  1036  00F924  D7EC               	goto	l2343
  1037  00F926  D2DC               	goto	l2485
  1038  00F928                     l2349:
  1039                           
  1040                           ;doprnt.c: 825: if(flag & (0x700)) {
  1041  00F928  0E07               	movlw	7
  1042  00F92A  1458               	andwf	printf@flag+1,w,c
  1043  00F92C  B4D8               	btfsc	status,2,c
  1044  00F92E  D2CA               	goto	l2481
  1045                           
  1046                           ;doprnt.c: 829: prec = 6;
  1047  00F930  0E00               	movlw	0
  1048  00F932  6E5A               	movwf	printf@prec+1,c
  1049  00F934  0E06               	movlw	6
  1050  00F936  6E59               	movwf	printf@prec,c
  1051                           
  1052                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1053  00F938  C055  FFD9         	movff	printf@ap,fsr2l
  1054  00F93C  C056  FFDA         	movff	printf@ap+1,fsr2h
  1055  00F940  CFDE F065          	movff	postinc2,printf@fval
  1056  00F944  CFDE F066          	movff	postinc2,printf@fval+1
  1057  00F948  CFDD F067          	movff	postdec2,printf@fval+2
  1058  00F94C  0E03               	movlw	3
  1059  00F94E  2655               	addwf	printf@ap,f,c
  1060  00F950  0E00               	movlw	0
  1061  00F952  2256               	addwfc	printf@ap+1,f,c
  1062                           
  1063                           ;doprnt.c: 831: if(fval < 0.0) {
  1064  00F954  AE67               	btfss	printf@fval+2,7,c
  1065  00F956  D011               	goto	l2363
  1066                           
  1067                           ;doprnt.c: 832: fval = -fval;
  1068  00F958  C065  F001         	movff	printf@fval,___ftneg@f1
  1069  00F95C  C066  F002         	movff	printf@fval+1,___ftneg@f1+1
  1070  00F960  C067  F003         	movff	printf@fval+2,___ftneg@f1+2
  1071  00F964  ECC0  F072         	call	___ftneg	;wreg free
  1072  00F968  C001  F065         	movff	?___ftneg,printf@fval
  1073  00F96C  C002  F066         	movff	?___ftneg+1,printf@fval+1
  1074  00F970  C003  F067         	movff	?___ftneg+2,printf@fval+2
  1075                           
  1076                           ;doprnt.c: 833: flag |= 0x03;
  1077  00F974  0E03               	movlw	3
  1078  00F976  1257               	iorwf	printf@flag,f,c
  1079  00F978  D000               	goto	l2363
  1080  00F97A                     l2363:
  1081                           
  1082                           ;doprnt.c: 834: }
  1083                           ;doprnt.c: 835: exp = 0;
  1084  00F97A  0E00               	movlw	0
  1085  00F97C  6E60               	movwf	printf@exp+1,c
  1086  00F97E  0E00               	movlw	0
  1087  00F980  6E5F               	movwf	printf@exp,c
  1088                           
  1089                           ;doprnt.c: 836: if( fval!=0) {
  1090  00F982  5065               	movf	printf@fval,w,c
  1091  00F984  1066               	iorwf	printf@fval+1,w,c
  1092  00F986  1067               	iorwf	printf@fval+2,w,c
  1093  00F988  B4D8               	btfsc	status,2,c
  1094  00F98A  D085               	goto	l2391
  1095                           
  1096                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1097  00F98C  0E82               	movlw	130
  1098  00F98E  6E4C               	movwf	??_printf& (0+255),c
  1099  00F990  0EFF               	movlw	255
  1100  00F992  6E4D               	movwf	(??_printf+1)& (0+255),c
  1101  00F994  C065  F04E         	movff	printf@fval,??_printf+2
  1102  00F998  C066  F04F         	movff	printf@fval+1,??_printf+3
  1103  00F99C  C067  F050         	movff	printf@fval+2,??_printf+4
  1104  00F9A0  C068  F051         	movff	printf@fval+3,??_printf+5
  1105  00F9A4  0E10               	movlw	16
  1106  00F9A6  D005               	goto	u2470
  1107  00F9A8                     u2475:
  1108  00F9A8  90D8               	bcf	status,0,c
  1109  00F9AA  3251               	rrcf	??_printf+5,f,c
  1110  00F9AC  3250               	rrcf	??_printf+4,f,c
  1111  00F9AE  324F               	rrcf	??_printf+3,f,c
  1112  00F9B0  324E               	rrcf	??_printf+2,f,c
  1113  00F9B2                     u2470:
  1114  00F9B2  2EE8               	decfsz	wreg,f,c
  1115  00F9B4  D7F9               	goto	u2475
  1116  00F9B6  504E               	movf	??_printf+2,w,c
  1117  00F9B8  244C               	addwf	??_printf,w,c
  1118  00F9BA  6E5F               	movwf	printf@exp,c
  1119  00F9BC  0E00               	movlw	0
  1120  00F9BE  204D               	addwfc	??_printf+1,w,c
  1121  00F9C0  6E60               	movwf	printf@exp+1,c
  1122                           
  1123                           ;doprnt.c: 838: exp--;
  1124  00F9C2  065F               	decf	printf@exp,f,c
  1125  00F9C4  A0D8               	btfss	status,0,c
  1126  00F9C6  0660               	decf	printf@exp+1,f,c
  1127                           
  1128                           ;doprnt.c: 839: exp *= 3;
  1129  00F9C8  C05F  F00F         	movff	printf@exp,___wmul@multiplier
  1130  00F9CC  C060  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1131  00F9D0  0E00               	movlw	0
  1132  00F9D2  6E12               	movwf	___wmul@multiplicand+1,c
  1133  00F9D4  0E03               	movlw	3
  1134  00F9D6  6E11               	movwf	___wmul@multiplicand,c
  1135  00F9D8  ECE5  F072         	call	___wmul	;wreg free
  1136  00F9DC  C00F  F05F         	movff	?___wmul,printf@exp
  1137  00F9E0  C010  F060         	movff	?___wmul+1,printf@exp+1
  1138                           
  1139                           ;doprnt.c: 840: exp /= 10;
  1140  00F9E4  C05F  F007         	movff	printf@exp,___awdiv@dividend
  1141  00F9E8  C060  F008         	movff	printf@exp+1,___awdiv@dividend+1
  1142  00F9EC  0E00               	movlw	0
  1143  00F9EE  6E0A               	movwf	___awdiv@divisor+1,c
  1144  00F9F0  0E0A               	movlw	10
  1145  00F9F2  6E09               	movwf	___awdiv@divisor,c
  1146  00F9F4  ECE6  F074         	call	___awdiv	;wreg free
  1147  00F9F8  C007  F05F         	movff	?___awdiv,printf@exp
  1148  00F9FC  C008  F060         	movff	?___awdiv+1,printf@exp+1
  1149                           
  1150                           ;doprnt.c: 841: if(exp < 0)
  1151  00FA00  AE60               	btfss	printf@exp+1,7,c
  1152  00FA02  D004               	goto	l2379
  1153                           
  1154                           ;doprnt.c: 842: exp--;
  1155  00FA04  065F               	decf	printf@exp,f,c
  1156  00FA06  A0D8               	btfss	status,0,c
  1157  00FA08  0660               	decf	printf@exp+1,f,c
  1158  00FA0A  D000               	goto	l2379
  1159  00FA0C                     l2379:
  1160                           
  1161                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1162  00FA0C  505F               	movf	printf@exp,w,c
  1163  00FA0E  0800               	sublw	0
  1164  00FA10  EC7C  F07A         	call	_scale
  1165  00FA14  C02B  F061         	movff	?_scale,printf@tmpval
  1166  00FA18  C02C  F062         	movff	?_scale+1,printf@tmpval+1
  1167  00FA1C  C02D  F063         	movff	?_scale+2,printf@tmpval+2
  1168                           
  1169                           ;doprnt.c: 847: tmpval.integ *= fval;
  1170  00FA20  C061  F01C         	movff	printf@tmpval,___ftmul@f1
  1171  00FA24  C062  F01D         	movff	printf@tmpval+1,___ftmul@f1+1
  1172  00FA28  C063  F01E         	movff	printf@tmpval+2,___ftmul@f1+2
  1173  00FA2C  C065  F01F         	movff	printf@fval,___ftmul@f2
  1174  00FA30  C066  F020         	movff	printf@fval+1,___ftmul@f2+1
  1175  00FA34  C067  F021         	movff	printf@fval+2,___ftmul@f2+2
  1176  00FA38  ECEF  F076         	call	___ftmul	;wreg free
  1177  00FA3C  C01C  F061         	movff	?___ftmul,printf@tmpval
  1178  00FA40  C01D  F062         	movff	?___ftmul+1,printf@tmpval+1
  1179  00FA44  C01E  F063         	movff	?___ftmul+2,printf@tmpval+2
  1180                           
  1181                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1182  00FA48  C061  F001         	movff	printf@tmpval,___ftge@ff1
  1183  00FA4C  C062  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1184  00FA50  C063  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1185  00FA54  0E00               	movlw	0
  1186  00FA56  6E04               	movwf	___ftge@ff2,c
  1187  00FA58  0E80               	movlw	128
  1188  00FA5A  6E05               	movwf	___ftge@ff2+1,c
  1189  00FA5C  0E3F               	movlw	63
  1190  00FA5E  6E06               	movwf	___ftge@ff2+2,c
  1191  00FA60  EC9B  F074         	call	___ftge	;wreg free
  1192  00FA64  B0D8               	btfsc	status,0,c
  1193  00FA66  D004               	goto	l2387
  1194                           
  1195                           ;doprnt.c: 849: exp--;
  1196  00FA68  065F               	decf	printf@exp,f,c
  1197  00FA6A  A0D8               	btfss	status,0,c
  1198  00FA6C  0660               	decf	printf@exp+1,f,c
  1199  00FA6E  D013               	goto	l2391
  1200  00FA70                     l2387:
  1201                           
  1202                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1203  00FA70  C061  F001         	movff	printf@tmpval,___ftge@ff1
  1204  00FA74  C062  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1205  00FA78  C063  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1206  00FA7C  0E00               	movlw	0
  1207  00FA7E  6E04               	movwf	___ftge@ff2,c
  1208  00FA80  0E20               	movlw	32
  1209  00FA82  6E05               	movwf	___ftge@ff2+1,c
  1210  00FA84  0E41               	movlw	65
  1211  00FA86  6E06               	movwf	___ftge@ff2+2,c
  1212  00FA88  EC9B  F074         	call	___ftge	;wreg free
  1213  00FA8C  A0D8               	btfss	status,0,c
  1214  00FA8E  D003               	goto	l2391
  1215                           
  1216                           ;doprnt.c: 851: exp++;
  1217  00FA90  4A5F               	infsnz	printf@exp,f,c
  1218  00FA92  2A60               	incf	printf@exp+1,f,c
  1219  00FA94  D000               	goto	l2391
  1220  00FA96                     l2391:
  1221                           
  1222                           ;doprnt.c: 852: }
  1223                           ;doprnt.c: 1112: if(prec <= 12)
  1224  00FA96  BE5A               	btfsc	printf@prec+1,7,c
  1225  00FA98  D006               	goto	l2393
  1226  00FA9A  505A               	movf	printf@prec+1,w,c
  1227  00FA9C  E11C               	bnz	l2395
  1228  00FA9E  0E0D               	movlw	13
  1229  00FAA0  5C59               	subwf	printf@prec,w,c
  1230  00FAA2  B0D8               	btfsc	status,0,c
  1231  00FAA4  D018               	goto	l2395
  1232  00FAA6                     l2393:
  1233                           
  1234                           ;doprnt.c: 1113: fval += fround(prec);
  1235  00FAA6  C065  F035         	movff	printf@fval,___ftadd@f1
  1236  00FAAA  C066  F036         	movff	printf@fval+1,___ftadd@f1+1
  1237  00FAAE  C067  F037         	movff	printf@fval+2,___ftadd@f1+2
  1238  00FAB2  5059               	movf	printf@prec,w,c
  1239  00FAB4  EC5A  F079         	call	_fround
  1240  00FAB8  C02B  F038         	movff	?_fround,___ftadd@f2
  1241  00FABC  C02C  F039         	movff	?_fround+1,___ftadd@f2+1
  1242  00FAC0  C02D  F03A         	movff	?_fround+2,___ftadd@f2+2
  1243  00FAC4  EC78  F078         	call	___ftadd	;wreg free
  1244  00FAC8  C035  F065         	movff	?___ftadd,printf@fval
  1245  00FACC  C036  F066         	movff	?___ftadd+1,printf@fval+1
  1246  00FAD0  C037  F067         	movff	?___ftadd+2,printf@fval+2
  1247  00FAD4  D000               	goto	l2395
  1248  00FAD6                     l2395:
  1249                           
  1250                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1251  00FAD6  BE60               	btfsc	printf@exp+1,7,c
  1252  00FAD8  D006               	goto	l2397
  1253  00FADA  5060               	movf	printf@exp+1,w,c
  1254  00FADC  E120               	bnz	l2403
  1255  00FADE  0E0A               	movlw	10
  1256  00FAE0  5C5F               	subwf	printf@exp,w,c
  1257  00FAE2  B0D8               	btfsc	status,0,c
  1258  00FAE4  D01C               	goto	l2403
  1259  00FAE6                     l2397:
  1260  00FAE6  5065               	movf	printf@fval,w,c
  1261  00FAE8  1066               	iorwf	printf@fval+1,w,c
  1262  00FAEA  1067               	iorwf	printf@fval+2,w,c
  1263  00FAEC  B4D8               	btfsc	status,2,c
  1264  00FAEE  D06D               	goto	l2417
  1265  00FAF0  C065  F032         	movff	printf@fval,___fttol@f1
  1266  00FAF4  C066  F033         	movff	printf@fval+1,___fttol@f1+1
  1267  00FAF8  C067  F034         	movff	printf@fval+2,___fttol@f1+2
  1268  00FAFC  EC05  F076         	call	___fttol	;wreg free
  1269  00FB00  5032               	movf	?___fttol,w,c
  1270  00FB02  1033               	iorwf	?___fttol+1,w,c
  1271  00FB04  1034               	iorwf	?___fttol+2,w,c
  1272  00FB06  1035               	iorwf	?___fttol+3,w,c
  1273  00FB08  B4D8               	btfsc	status,2,c
  1274  00FB0A  BE60               	btfsc	printf@exp+1,7,c
  1275  00FB0C  D05E               	goto	l2417
  1276  00FB0E  5060               	movf	printf@exp+1,w,c
  1277  00FB10  E106               	bnz	l2403
  1278  00FB12  0E02               	movlw	2
  1279  00FB14  5C5F               	subwf	printf@exp,w,c
  1280  00FB16  B0D8               	btfsc	status,0,c
  1281  00FB18  D002               	goto	l2403
  1282  00FB1A  D057               	goto	l2417
  1283  00FB1C  D000               	goto	l2403
  1284  00FB1E                     l2403:
  1285                           
  1286                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1287  00FB1E  C061  F001         	movff	printf@tmpval,___ftge@ff1
  1288  00FB22  C062  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1289  00FB26  C063  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1290  00FB2A  0E70               	movlw	112
  1291  00FB2C  6E04               	movwf	___ftge@ff2,c
  1292  00FB2E  0E89               	movlw	137
  1293  00FB30  6E05               	movwf	___ftge@ff2+1,c
  1294  00FB32  0E40               	movlw	64
  1295  00FB34  6E06               	movwf	___ftge@ff2+2,c
  1296  00FB36  EC9B  F074         	call	___ftge	;wreg free
  1297  00FB3A  B0D8               	btfsc	status,0,c
  1298  00FB3C  D002               	goto	l2407
  1299                           
  1300                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1301  00FB3E  0EF7               	movlw	247
  1302  00FB40  D001               	goto	L1
  1303  00FB42                     l2407:
  1304                           
  1305                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1306  00FB42  0EF8               	movlw	248
  1307  00FB44                     L1:
  1308  00FB44  265F               	addwf	printf@exp,f,c
  1309  00FB46  0EFF               	movlw	255
  1310  00FB48  2260               	addwfc	printf@exp+1,f,c
  1311  00FB4A  D000               	goto	l2409
  1312  00FB4C                     l2409:
  1313                           
  1314                           ;doprnt.c: 1124: }
  1315                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1316  00FB4C  505F               	movf	printf@exp,w,c
  1317  00FB4E  EC7C  F07A         	call	_scale
  1318  00FB52  C02B  F061         	movff	?_scale,printf@tmpval
  1319  00FB56  C02C  F062         	movff	?_scale+1,printf@tmpval+1
  1320  00FB5A  C02D  F063         	movff	?_scale+2,printf@tmpval+2
  1321                           
  1322                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1323  00FB5E  D017               	goto	l2413
  1324  00FB60  C065  F001         	movff	printf@fval,__div_to_l_@f1
  1325  00FB64  C066  F002         	movff	printf@fval+1,__div_to_l_@f1+1
  1326  00FB68  C067  F003         	movff	printf@fval+2,__div_to_l_@f1+2
  1327  00FB6C  C061  F004         	movff	printf@tmpval,__div_to_l_@f2
  1328  00FB70  C062  F005         	movff	printf@tmpval+1,__div_to_l_@f2+1
  1329  00FB74  C063  F006         	movff	printf@tmpval+2,__div_to_l_@f2+2
  1330  00FB78  EC6B  F077         	call	__div_to_l_	;wreg free
  1331  00FB7C  C001  F05B         	movff	?__div_to_l_,printf@val
  1332  00FB80  C002  F05C         	movff	?__div_to_l_+1,printf@val+1
  1333  00FB84  C003  F05D         	movff	?__div_to_l_+2,printf@val+2
  1334  00FB88  C004  F05E         	movff	?__div_to_l_+3,printf@val+3
  1335  00FB8C  D017               	goto	l2415
  1336  00FB8E                     l2413:
  1337  00FB8E  C065  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1338  00FB92  C066  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1339  00FB96  C067  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1340  00FB9A  C061  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1341  00FB9E  C062  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1342  00FBA2  C063  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1343  00FBA6  ECF0  F077         	call	__tdiv_to_l_	;wreg free
  1344  00FBAA  C001  F05B         	movff	?__tdiv_to_l_,printf@val
  1345  00FBAE  C002  F05C         	movff	?__tdiv_to_l_+1,printf@val+1
  1346  00FBB2  C003  F05D         	movff	?__tdiv_to_l_+2,printf@val+2
  1347  00FBB6  C004  F05E         	movff	?__tdiv_to_l_+3,printf@val+3
  1348  00FBBA  D000               	goto	l2415
  1349  00FBBC                     l2415:
  1350                           
  1351                           ;doprnt.c: 1129: fval = 0.0;
  1352  00FBBC  0E00               	movlw	0
  1353  00FBBE  6E65               	movwf	printf@fval,c
  1354  00FBC0  0E00               	movlw	0
  1355  00FBC2  6E66               	movwf	printf@fval+1,c
  1356  00FBC4  0E00               	movlw	0
  1357  00FBC6  6E67               	movwf	printf@fval+2,c
  1358                           
  1359                           ;doprnt.c: 1130: } else {
  1360  00FBC8  D033               	goto	l2421
  1361  00FBCA                     l2417:
  1362                           
  1363                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1364  00FBCA  C065  F032         	movff	printf@fval,___fttol@f1
  1365  00FBCE  C066  F033         	movff	printf@fval+1,___fttol@f1+1
  1366  00FBD2  C067  F034         	movff	printf@fval+2,___fttol@f1+2
  1367  00FBD6  EC05  F076         	call	___fttol	;wreg free
  1368  00FBDA  C032  F05B         	movff	?___fttol,printf@val
  1369  00FBDE  C033  F05C         	movff	?___fttol+1,printf@val+1
  1370  00FBE2  C034  F05D         	movff	?___fttol+2,printf@val+2
  1371  00FBE6  C035  F05E         	movff	?___fttol+3,printf@val+3
  1372                           
  1373                           ;doprnt.c: 1132: fval -= (double)val;
  1374  00FBEA  C065  F041         	movff	printf@fval,___ftsub@f1
  1375  00FBEE  C066  F042         	movff	printf@fval+1,___ftsub@f1+1
  1376  00FBF2  C067  F043         	movff	printf@fval+2,___ftsub@f1+2
  1377  00FBF6  C05B  F009         	movff	printf@val,___lltoft@c
  1378  00FBFA  C05C  F00A         	movff	printf@val+1,___lltoft@c+1
  1379  00FBFE  C05D  F00B         	movff	printf@val+2,___lltoft@c+2
  1380  00FC02  C05E  F00C         	movff	printf@val+3,___lltoft@c+3
  1381  00FC06  EC39  F073         	call	___lltoft	;wreg free
  1382  00FC0A  C009  F044         	movff	?___lltoft,___ftsub@f2
  1383  00FC0E  C00A  F045         	movff	?___lltoft+1,___ftsub@f2+1
  1384  00FC12  C00B  F046         	movff	?___lltoft+2,___ftsub@f2+2
  1385  00FC16  EC17  F073         	call	___ftsub	;wreg free
  1386  00FC1A  C041  F065         	movff	?___ftsub,printf@fval
  1387  00FC1E  C042  F066         	movff	?___ftsub+1,printf@fval+1
  1388  00FC22  C043  F067         	movff	?___ftsub+2,printf@fval+2
  1389                           
  1390                           ;doprnt.c: 1133: exp = 0;
  1391  00FC26  0E00               	movlw	0
  1392  00FC28  6E60               	movwf	printf@exp+1,c
  1393  00FC2A  0E00               	movlw	0
  1394  00FC2C  6E5F               	movwf	printf@exp,c
  1395  00FC2E  D000               	goto	l2421
  1396  00FC30                     l2421:
  1397                           
  1398                           ;doprnt.c: 1134: }
  1399                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1400  00FC30  0E01               	movlw	1
  1401  00FC32  6E68               	movwf	printf@c,c
  1402  00FC34                     l2423:
  1403  00FC34  0E0A               	movlw	10
  1404  00FC36  1868               	xorwf	printf@c,w,c
  1405  00FC38  B4D8               	btfsc	status,2,c
  1406  00FC3A  D01C               	goto	l2435
  1407  00FC3C  D001               	goto	l2427
  1408  00FC3E  D01A               	goto	l2435
  1409  00FC40                     l2427:
  1410                           
  1411                           ;doprnt.c: 1137: if(val < dpowers[c])
  1412  00FC40  5068               	movf	printf@c,w,c
  1413  00FC42  0D04               	mullw	4
  1414  00FC44  0EFF               	movlw	low _dpowers
  1415  00FC46  24F3               	addwf	prodl,w,c
  1416  00FC48  6EF6               	movwf	tblptrl,c
  1417  00FC4A  0EFE               	movlw	high _dpowers
  1418  00FC4C  20F4               	addwfc	prodh,w,c
  1419  00FC4E  6EF7               	movwf	tblptrh,c
  1420  00FC50                     	if	0	;There are less than 3 active tblptr bytes
  1421  00FC50                     	endif
  1422  00FC50  0009               	tblrd		*+
  1423  00FC52  50F5               	movf	tablat,w,c
  1424  00FC54  5C5B               	subwf	printf@val,w,c
  1425  00FC56  0009               	tblrd		*+
  1426  00FC58  50F5               	movf	tablat,w,c
  1427  00FC5A  585C               	subwfb	printf@val+1,w,c
  1428  00FC5C  0009               	tblrd		*+
  1429  00FC5E  50F5               	movf	tablat,w,c
  1430  00FC60  585D               	subwfb	printf@val+2,w,c
  1431  00FC62  0009               	tblrd		*+
  1432  00FC64  50F5               	movf	tablat,w,c
  1433  00FC66  585E               	subwfb	printf@val+3,w,c
  1434  00FC68  A0D8               	btfss	status,0,c
  1435  00FC6A  D004               	goto	l2435
  1436  00FC6C  D001               	goto	l2431
  1437                           
  1438                           ;doprnt.c: 1138: break;
  1439  00FC6E  D002               	goto	l2435
  1440  00FC70                     l2431:
  1441  00FC70  2A68               	incf	printf@c,f,c
  1442  00FC72  D7E0               	goto	l2423
  1443  00FC74                     l2435:
  1444                           
  1445                           ;doprnt.c: 1175: {
  1446                           ;doprnt.c: 1188: if(flag & 0x03)
  1447  00FC74  0E03               	movlw	3
  1448  00FC76  1457               	andwf	printf@flag,w,c
  1449  00FC78  6E4C               	movwf	??_printf& (0+255),c
  1450  00FC7A  0E00               	movlw	0
  1451  00FC7C  1458               	andwf	printf@flag+1,w,c
  1452  00FC7E  6E4D               	movwf	(??_printf+1)& (0+255),c
  1453  00FC80  504C               	movf	??_printf,w,c
  1454  00FC82  104D               	iorwf	??_printf+1,w,c
  1455  00FC84  B4D8               	btfsc	status,2,c
  1456  00FC86  D049               	goto	l2445
  1457                           
  1458                           ;doprnt.c: 1190: (putch('-') );
  1459  00FC88  0E2D               	movlw	45
  1460  00FC8A  ECAF  F072         	call	_putch
  1461                           
  1462                           ;doprnt.c: 1195: }
  1463                           ;doprnt.c: 1196: while(c--) {
  1464  00FC8E  D045               	goto	l2445
  1465  00FC90                     l2439:
  1466                           
  1467                           ;doprnt.c: 1200: {
  1468                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1469  00FC90  C05B  F001         	movff	printf@val,___lldiv@dividend
  1470  00FC94  C05C  F002         	movff	printf@val+1,___lldiv@dividend+1
  1471  00FC98  C05D  F003         	movff	printf@val+2,___lldiv@dividend+2
  1472  00FC9C  C05E  F004         	movff	printf@val+3,___lldiv@dividend+3
  1473  00FCA0  5068               	movf	printf@c,w,c
  1474  00FCA2  0D04               	mullw	4
  1475  00FCA4  0EFF               	movlw	low _dpowers
  1476  00FCA6  24F3               	addwf	prodl,w,c
  1477  00FCA8  6EF6               	movwf	tblptrl,c
  1478  00FCAA  0EFE               	movlw	high _dpowers
  1479  00FCAC  20F4               	addwfc	prodh,w,c
  1480  00FCAE  6EF7               	movwf	tblptrh,c
  1481  00FCB0                     	if	0	;There are less than 3 active tblptr bytes
  1482  00FCB0                     	endif
  1483  00FCB0  0009               	tblrd		*+
  1484  00FCB2  CFF5 F005          	movff	tablat,___lldiv@divisor
  1485  00FCB6  0009               	tblrd		*+
  1486  00FCB8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1487  00FCBC  0009               	tblrd		*+
  1488  00FCBE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1489  00FCC2  000A               	tblrd		*-
  1490  00FCC4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1491  00FCC8  EC55  F074         	call	___lldiv	;wreg free
  1492  00FCCC  C001  F061         	movff	?___lldiv,printf@tmpval
  1493  00FCD0  C002  F062         	movff	?___lldiv+1,printf@tmpval+1
  1494  00FCD4  C003  F063         	movff	?___lldiv+2,printf@tmpval+2
  1495  00FCD8  C004  F064         	movff	?___lldiv+3,printf@tmpval+3
  1496                           
  1497                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1498  00FCDC  C061  F001         	movff	printf@tmpval,___llmod@dividend
  1499  00FCE0  C062  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1500  00FCE4  C063  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1501  00FCE8  C064  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1502  00FCEC  0E0A               	movlw	10
  1503  00FCEE  6E05               	movwf	___llmod@divisor,c
  1504  00FCF0  0E00               	movlw	0
  1505  00FCF2  6E06               	movwf	___llmod@divisor+1,c
  1506  00FCF4  0E00               	movlw	0
  1507  00FCF6  6E07               	movwf	___llmod@divisor+2,c
  1508  00FCF8  0E00               	movlw	0
  1509  00FCFA  6E08               	movwf	___llmod@divisor+3,c
  1510  00FCFC  ECA1  F073         	call	___llmod	;wreg free
  1511  00FD00  C001  F061         	movff	?___llmod,printf@tmpval
  1512  00FD04  C002  F062         	movff	?___llmod+1,printf@tmpval+1
  1513  00FD08  C003  F063         	movff	?___llmod+2,printf@tmpval+2
  1514  00FD0C  C004  F064         	movff	?___llmod+3,printf@tmpval+3
  1515                           
  1516                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1517  00FD10  5061               	movf	printf@tmpval,w,c
  1518  00FD12  0F30               	addlw	48
  1519  00FD14  ECAF  F072         	call	_putch
  1520  00FD18  D000               	goto	l2445
  1521  00FD1A                     l2445:
  1522  00FD1A  0668               	decf	printf@c,f,c
  1523  00FD1C  2868               	incf	printf@c,w,c
  1524  00FD1E  B4D8               	btfsc	status,2,c
  1525  00FD20  D009               	goto	l2451
  1526  00FD22  D7B6               	goto	l2439
  1527                           
  1528                           ;doprnt.c: 1204: }
  1529                           ;doprnt.c: 1206: }
  1530                           ;doprnt.c: 1207: while(exp > 0) {
  1531  00FD24  D007               	goto	l2451
  1532  00FD26                     l2447:
  1533                           
  1534                           ;doprnt.c: 1208: (putch('0') );
  1535  00FD26  0E30               	movlw	48
  1536  00FD28  ECAF  F072         	call	_putch
  1537                           
  1538                           ;doprnt.c: 1209: exp--;
  1539  00FD2C  065F               	decf	printf@exp,f,c
  1540  00FD2E  A0D8               	btfss	status,0,c
  1541  00FD30  0660               	decf	printf@exp+1,f,c
  1542  00FD32  D000               	goto	l2451
  1543  00FD34                     l2451:
  1544  00FD34  BE60               	btfsc	printf@exp+1,7,c
  1545  00FD36  D005               	goto	l2453
  1546  00FD38  5060               	movf	printf@exp+1,w,c
  1547  00FD3A  E1F5               	bnz	l2447
  1548  00FD3C  045F               	decf	printf@exp,w,c
  1549  00FD3E  B0D8               	btfsc	status,0,c
  1550  00FD40  D7F2               	goto	l2447
  1551  00FD42                     l2453:
  1552                           
  1553                           ;doprnt.c: 1210: }
  1554                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1555  00FD42  BE5A               	btfsc	printf@prec+1,7,c
  1556  00FD44  D009               	goto	l121
  1557  00FD46  505A               	movf	printf@prec+1,w,c
  1558  00FD48  E104               	bnz	u2630
  1559  00FD4A  0E09               	movlw	9
  1560  00FD4C  5C59               	subwf	printf@prec,w,c
  1561  00FD4E  A0D8               	btfss	status,0,c
  1562  00FD50  D003               	goto	l121
  1563  00FD52                     u2630:
  1564                           
  1565                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1566  00FD52  0E08               	movlw	8
  1567  00FD54  6E68               	movwf	printf@c,c
  1568  00FD56  D003               	goto	l2457
  1569  00FD58                     l121:
  1570                           
  1571                           ;doprnt.c: 1213: else
  1572                           ;doprnt.c: 1214: c = prec;
  1573  00FD58  C059  F068         	movff	printf@prec,printf@c
  1574  00FD5C  D000               	goto	l2457
  1575  00FD5E                     l2457:
  1576                           
  1577                           ;doprnt.c: 1215: prec -= c;
  1578  00FD5E  5068               	movf	printf@c,w,c
  1579  00FD60  5E59               	subwf	printf@prec,f,c
  1580  00FD62  0E00               	movlw	0
  1581  00FD64  BE68               	btfsc	printf@c,7,c
  1582  00FD66  0EFF               	movlw	255
  1583  00FD68  5A5A               	subwfb	printf@prec+1,f,c
  1584                           
  1585                           ;doprnt.c: 1219: if(c)
  1586  00FD6A  5068               	movf	printf@c,w,c
  1587  00FD6C  B4D8               	btfsc	status,2,c
  1588  00FD6E  D004               	goto	l2463
  1589                           
  1590                           ;doprnt.c: 1221: (putch('.') );
  1591  00FD70  0E2E               	movlw	46
  1592  00FD72  ECAF  F072         	call	_putch
  1593  00FD76  D000               	goto	l2463
  1594  00FD78                     l2463:
  1595                           
  1596                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1597  00FD78  5068               	movf	printf@c,w,c
  1598  00FD7A  EC7C  F07A         	call	_scale
  1599  00FD7E  C02B  F052         	movff	?_scale,_printf$1010
  1600  00FD82  C02C  F053         	movff	?_scale+1,_printf$1010+1
  1601  00FD86  C02D  F054         	movff	?_scale+2,_printf$1010+2
  1602                           
  1603                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1604  00FD8A  C065  F01F         	movff	printf@fval,___ftmul@f2
  1605  00FD8E  C066  F020         	movff	printf@fval+1,___ftmul@f2+1
  1606  00FD92  C067  F021         	movff	printf@fval+2,___ftmul@f2+2
  1607  00FD96  C052  F01C         	movff	_printf$1010,___ftmul@f1
  1608  00FD9A  C053  F01D         	movff	_printf$1010+1,___ftmul@f1+1
  1609  00FD9E  C054  F01E         	movff	_printf$1010+2,___ftmul@f1+2
  1610  00FDA2  ECEF  F076         	call	___ftmul	;wreg free
  1611  00FDA6  C01C  F032         	movff	?___ftmul,___fttol@f1
  1612  00FDAA  C01D  F033         	movff	?___ftmul+1,___fttol@f1+1
  1613  00FDAE  C01E  F034         	movff	?___ftmul+2,___fttol@f1+2
  1614  00FDB2  EC05  F076         	call	___fttol	;wreg free
  1615  00FDB6  C032  F05B         	movff	?___fttol,printf@val
  1616  00FDBA  C033  F05C         	movff	?___fttol+1,printf@val+1
  1617  00FDBE  C034  F05D         	movff	?___fttol+2,printf@val+2
  1618  00FDC2  C035  F05E         	movff	?___fttol+3,printf@val+3
  1619                           
  1620                           ;doprnt.c: 1228: while(c--) {
  1621  00FDC6  D06B               	goto	l2473
  1622  00FDC8                     l2467:
  1623                           
  1624                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1625  00FDC8  C05B  F001         	movff	printf@val,___lldiv@dividend
  1626  00FDCC  C05C  F002         	movff	printf@val+1,___lldiv@dividend+1
  1627  00FDD0  C05D  F003         	movff	printf@val+2,___lldiv@dividend+2
  1628  00FDD4  C05E  F004         	movff	printf@val+3,___lldiv@dividend+3
  1629  00FDD8  5068               	movf	printf@c,w,c
  1630  00FDDA  0D04               	mullw	4
  1631  00FDDC  0EFF               	movlw	low _dpowers
  1632  00FDDE  24F3               	addwf	prodl,w,c
  1633  00FDE0  6EF6               	movwf	tblptrl,c
  1634  00FDE2  0EFE               	movlw	high _dpowers
  1635  00FDE4  20F4               	addwfc	prodh,w,c
  1636  00FDE6  6EF7               	movwf	tblptrh,c
  1637  00FDE8                     	if	0	;There are less than 3 active tblptr bytes
  1638  00FDE8                     	endif
  1639  00FDE8  0009               	tblrd		*+
  1640  00FDEA  CFF5 F005          	movff	tablat,___lldiv@divisor
  1641  00FDEE  0009               	tblrd		*+
  1642  00FDF0  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1643  00FDF4  0009               	tblrd		*+
  1644  00FDF6  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1645  00FDFA  000A               	tblrd		*-
  1646  00FDFC  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1647  00FE00  EC55  F074         	call	___lldiv	;wreg free
  1648  00FE04  C001  F061         	movff	?___lldiv,printf@tmpval
  1649  00FE08  C002  F062         	movff	?___lldiv+1,printf@tmpval+1
  1650  00FE0C  C003  F063         	movff	?___lldiv+2,printf@tmpval+2
  1651  00FE10  C004  F064         	movff	?___lldiv+3,printf@tmpval+3
  1652                           
  1653                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1654  00FE14  C061  F001         	movff	printf@tmpval,___llmod@dividend
  1655  00FE18  C062  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1656  00FE1C  C063  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1657  00FE20  C064  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1658  00FE24  0E0A               	movlw	10
  1659  00FE26  6E05               	movwf	___llmod@divisor,c
  1660  00FE28  0E00               	movlw	0
  1661  00FE2A  6E06               	movwf	___llmod@divisor+1,c
  1662  00FE2C  0E00               	movlw	0
  1663  00FE2E  6E07               	movwf	___llmod@divisor+2,c
  1664  00FE30  0E00               	movlw	0
  1665  00FE32  6E08               	movwf	___llmod@divisor+3,c
  1666  00FE34  ECA1  F073         	call	___llmod	;wreg free
  1667  00FE38  C001  F061         	movff	?___llmod,printf@tmpval
  1668  00FE3C  C002  F062         	movff	?___llmod+1,printf@tmpval+1
  1669  00FE40  C003  F063         	movff	?___llmod+2,printf@tmpval+2
  1670  00FE44  C004  F064         	movff	?___llmod+3,printf@tmpval+3
  1671                           
  1672                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  1673  00FE48  5061               	movf	printf@tmpval,w,c
  1674  00FE4A  0F30               	addlw	48
  1675  00FE4C  ECAF  F072         	call	_putch
  1676                           
  1677                           ;doprnt.c: 1232: val %= dpowers[c];
  1678  00FE50  C05B  F001         	movff	printf@val,___llmod@dividend
  1679  00FE54  C05C  F002         	movff	printf@val+1,___llmod@dividend+1
  1680  00FE58  C05D  F003         	movff	printf@val+2,___llmod@dividend+2
  1681  00FE5C  C05E  F004         	movff	printf@val+3,___llmod@dividend+3
  1682  00FE60  5068               	movf	printf@c,w,c
  1683  00FE62  0D04               	mullw	4
  1684  00FE64  0EFF               	movlw	low _dpowers
  1685  00FE66  24F3               	addwf	prodl,w,c
  1686  00FE68  6EF6               	movwf	tblptrl,c
  1687  00FE6A  0EFE               	movlw	high _dpowers
  1688  00FE6C  20F4               	addwfc	prodh,w,c
  1689  00FE6E  6EF7               	movwf	tblptrh,c
  1690  00FE70                     	if	0	;There are less than 3 active tblptr bytes
  1691  00FE70                     	endif
  1692  00FE70  0009               	tblrd		*+
  1693  00FE72  CFF5 F005          	movff	tablat,___llmod@divisor
  1694  00FE76  0009               	tblrd		*+
  1695  00FE78  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1696  00FE7C  0009               	tblrd		*+
  1697  00FE7E  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1698  00FE82  000A               	tblrd		*-
  1699  00FE84  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1700  00FE88  ECA1  F073         	call	___llmod	;wreg free
  1701  00FE8C  C001  F05B         	movff	?___llmod,printf@val
  1702  00FE90  C002  F05C         	movff	?___llmod+1,printf@val+1
  1703  00FE94  C003  F05D         	movff	?___llmod+2,printf@val+2
  1704  00FE98  C004  F05E         	movff	?___llmod+3,printf@val+3
  1705  00FE9C  D000               	goto	l2473
  1706  00FE9E                     l2473:
  1707  00FE9E  0668               	decf	printf@c,f,c
  1708  00FEA0  2868               	incf	printf@c,w,c
  1709  00FEA2  B4D8               	btfsc	status,2,c
  1710  00FEA4  D009               	goto	l2479
  1711  00FEA6  D790               	goto	l2467
  1712                           
  1713                           ;doprnt.c: 1233: }
  1714                           ;doprnt.c: 1235: while(prec) {
  1715  00FEA8  D007               	goto	l2479
  1716  00FEAA                     l2475:
  1717                           
  1718                           ;doprnt.c: 1236: (putch('0') );
  1719  00FEAA  0E30               	movlw	48
  1720  00FEAC  ECAF  F072         	call	_putch
  1721                           
  1722                           ;doprnt.c: 1237: prec--;
  1723  00FEB0  0659               	decf	printf@prec,f,c
  1724  00FEB2  A0D8               	btfss	status,0,c
  1725  00FEB4  065A               	decf	printf@prec+1,f,c
  1726  00FEB6  D000               	goto	l2479
  1727  00FEB8                     l2479:
  1728  00FEB8  5059               	movf	printf@prec,w,c
  1729  00FEBA  105A               	iorwf	printf@prec+1,w,c
  1730  00FEBC  B4D8               	btfsc	status,2,c
  1731  00FEBE  D010               	goto	l2485
  1732  00FEC0  D7F4               	goto	l2475
  1733                           
  1734                           ;doprnt.c: 1238: }
  1735                           ;doprnt.c: 1245: continue;
  1736  00FEC2  D00E               	goto	l2485
  1737  00FEC4                     l2481:
  1738                           
  1739                           ;doprnt.c: 1246: }
  1740                           ;doprnt.c: 1422: {
  1741                           ;doprnt.c: 1438: if(flag & 0x03)
  1742  00FEC4  0E03               	movlw	3
  1743  00FEC6  1457               	andwf	printf@flag,w,c
  1744  00FEC8  6E4C               	movwf	??_printf& (0+255),c
  1745  00FECA  0E00               	movlw	0
  1746  00FECC  1458               	andwf	printf@flag+1,w,c
  1747  00FECE  6E4D               	movwf	(??_printf+1)& (0+255),c
  1748  00FED0  504C               	movf	??_printf,w,c
  1749  00FED2  104D               	iorwf	??_printf+1,w,c
  1750  00FED4  B4D8               	btfsc	status,2,c
  1751  00FED6  D004               	goto	l2485
  1752                           
  1753                           ;doprnt.c: 1439: (putch('-') );
  1754  00FED8  0E2D               	movlw	45
  1755  00FEDA  ECAF  F072         	call	_putch
  1756  00FEDE  D000               	goto	l2485
  1757  00FEE0                     l2485:
  1758  00FEE0  C047  FFF6         	movff	printf@f,tblptrl
  1759  00FEE4  C048  FFF7         	movff	printf@f+1,tblptrh
  1760  00FEE8  4A47               	infsnz	printf@f,f,c
  1761  00FEEA  2A48               	incf	printf@f+1,f,c
  1762  00FEEC                     	if	0	;tblptru may be non-zero
  1763  00FEEC                     	endif
  1764  00FEEC                     	if	0	;tblptru may be non-zero
  1765  00FEEC                     	endif
  1766  00FEEC  0008               	tblrd		*
  1767  00FEEE  CFF5 F068          	movff	tablat,printf@c
  1768  00FEF2  5068               	movf	printf@c,w,c
  1769  00FEF4  B4D8               	btfsc	status,2,c
  1770  00FEF6  D002               	goto	l132
  1771  00FEF8  D4F4               	goto	l2337
  1772  00FEFA  D000               	goto	l132
  1773  00FEFC                     l132:
  1774  00FEFC  0012               	return		;funcret
  1775  00FEFE                     __end_of_printf:
  1776                           	opt stack 0
  1777                           tblptru	equ	0xFF8
  1778                           tblptrh	equ	0xFF7
  1779                           tblptrl	equ	0xFF6
  1780                           tablat	equ	0xFF5
  1781                           prodh	equ	0xFF4
  1782                           prodl	equ	0xFF3
  1783                           wreg	equ	0xFE8
  1784                           postinc2	equ	0xFDE
  1785                           postdec2	equ	0xFDD
  1786                           fsr2h	equ	0xFDA
  1787                           fsr2l	equ	0xFD9
  1788                           status	equ	0xFD8
  1789                           
  1790 ;; *************** function _scale *****************
  1791 ;; Defined at:
  1792 ;;		line 425 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;  scl             1    wreg     char 
  1795 ;; Auto vars:     Size  Location     Type
  1796 ;;  scl             1   48[COMRAM] char 
  1797 ;; Return value:  Size  Location     Type
  1798 ;;                  3   42[COMRAM] char 
  1799 ;; Registers used:
  1800 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1801 ;; Tracked objects:
  1802 ;;		On entry : 0/0
  1803 ;;		On exit  : 0/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1806 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1807 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1809 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1810 ;;Total ram usage:        7 bytes
  1811 ;; Hardware stack levels used:    1
  1812 ;; Hardware stack levels required when called:    2
  1813 ;; This function calls:
  1814 ;;		___awdiv
  1815 ;;		___awmod
  1816 ;;		___ftmul
  1817 ;;		___wmul
  1818 ;; This function is called by:
  1819 ;;		_printf
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           	psect	text2
  1824  00F4F8                     __ptext2:
  1825                           	opt stack 0
  1826  00F4F8                     _scale:
  1827                           	opt stack 27
  1828                           
  1829                           ;incstack = 0
  1830                           ;scale@scl stored from wreg
  1831  00F4F8  6E31               	movwf	scale@scl,c
  1832                           
  1833                           ;doprnt.c: 428: if(scl < 0) {
  1834  00F4FA  AE31               	btfss	scale@scl,7,c
  1835  00F4FC  D0EF               	goto	l2005
  1836                           
  1837                           ;doprnt.c: 429: scl = -scl;
  1838  00F4FE  6C31               	negf	scale@scl,c
  1839                           
  1840                           ;doprnt.c: 430: if(scl>=110)
  1841  00F500  5031               	movf	scale@scl,w,c
  1842  00F502  0A80               	xorlw	128
  1843  00F504  0F12               	addlw	-238
  1844  00F506  A0D8               	btfss	status,0,c
  1845  00F508  D08D               	goto	l1995
  1846                           
  1847                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  1848  00F50A  0E00               	movlw	0
  1849  00F50C  6E12               	movwf	___wmul@multiplicand+1,c
  1850  00F50E  0E03               	movlw	3
  1851  00F510  6E11               	movwf	___wmul@multiplicand,c
  1852  00F512  0E00               	movlw	0
  1853  00F514  6E0A               	movwf	___awdiv@divisor+1,c
  1854  00F516  0E0A               	movlw	10
  1855  00F518  6E09               	movwf	___awdiv@divisor,c
  1856  00F51A  0E00               	movlw	0
  1857  00F51C  6E04               	movwf	___awmod@divisor+1,c
  1858  00F51E  0E64               	movlw	100
  1859  00F520  6E03               	movwf	___awmod@divisor,c
  1860  00F522  5031               	movf	scale@scl,w,c
  1861  00F524  6E01               	movwf	___awmod@dividend,c
  1862  00F526  6A02               	clrf	___awmod@dividend+1,c
  1863  00F528  BE01               	btfsc	___awmod@dividend,7,c
  1864  00F52A  0602               	decf	___awmod@dividend+1,f,c
  1865  00F52C  EC14  F074         	call	___awmod	;wreg free
  1866  00F530  C001  F007         	movff	?___awmod,___awdiv@dividend
  1867  00F534  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  1868  00F538  ECE6  F074         	call	___awdiv	;wreg free
  1869  00F53C  0E09               	movlw	9
  1870  00F53E  2407               	addwf	?___awdiv,w,c
  1871  00F540  6E0F               	movwf	___wmul@multiplier,c
  1872  00F542  0E00               	movlw	0
  1873  00F544  2008               	addwfc	?___awdiv+1,w,c
  1874  00F546  6E10               	movwf	___wmul@multiplier+1,c
  1875  00F548  ECE5  F072         	call	___wmul	;wreg free
  1876  00F54C  0E27               	movlw	low __npowers_
  1877  00F54E  240F               	addwf	?___wmul,w,c
  1878  00F550  6EF6               	movwf	tblptrl,c
  1879  00F552  0EFF               	movlw	high __npowers_
  1880  00F554  2010               	addwfc	?___wmul+1,w,c
  1881  00F556  6EF7               	movwf	tblptrh,c
  1882  00F558                     	if	0	;There are less than 3 active tblptr bytes
  1883  00F558                     	endif
  1884  00F558  0009               	tblrd		*+
  1885  00F55A  CFF5 F01F          	movff	tablat,___ftmul@f2
  1886  00F55E  0009               	tblrd		*+
  1887  00F560  CFF5 F020          	movff	tablat,___ftmul@f2+1
  1888  00F564  000A               	tblrd		*-
  1889  00F566  CFF5 F021          	movff	tablat,___ftmul@f2+2
  1890  00F56A  0E00               	movlw	0
  1891  00F56C  6E0A               	movwf	___awdiv@divisor+1,c
  1892  00F56E  0E64               	movlw	100
  1893  00F570  6E09               	movwf	___awdiv@divisor,c
  1894  00F572  5031               	movf	scale@scl,w,c
  1895  00F574  6E07               	movwf	___awdiv@dividend,c
  1896  00F576  6A08               	clrf	___awdiv@dividend+1,c
  1897  00F578  BE07               	btfsc	___awdiv@dividend,7,c
  1898  00F57A  0608               	decf	___awdiv@dividend+1,f,c
  1899  00F57C  ECE6  F074         	call	___awdiv	;wreg free
  1900  00F580  0E12               	movlw	18
  1901  00F582  2407               	addwf	?___awdiv,w,c
  1902  00F584  6E0F               	movwf	___wmul@multiplier,c
  1903  00F586  0E00               	movlw	0
  1904  00F588  2008               	addwfc	?___awdiv+1,w,c
  1905  00F58A  6E10               	movwf	___wmul@multiplier+1,c
  1906  00F58C  0E00               	movlw	0
  1907  00F58E  6E12               	movwf	___wmul@multiplicand+1,c
  1908  00F590  0E03               	movlw	3
  1909  00F592  6E11               	movwf	___wmul@multiplicand,c
  1910  00F594  ECE5  F072         	call	___wmul	;wreg free
  1911  00F598  0E27               	movlw	low __npowers_
  1912  00F59A  240F               	addwf	?___wmul,w,c
  1913  00F59C  6EF6               	movwf	tblptrl,c
  1914  00F59E  0EFF               	movlw	high __npowers_
  1915  00F5A0  2010               	addwfc	?___wmul+1,w,c
  1916  00F5A2  6EF7               	movwf	tblptrh,c
  1917  00F5A4                     	if	0	;There are less than 3 active tblptr bytes
  1918  00F5A4                     	endif
  1919  00F5A4  0009               	tblrd		*+
  1920  00F5A6  CFF5 F01C          	movff	tablat,___ftmul@f1
  1921  00F5AA  0009               	tblrd		*+
  1922  00F5AC  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  1923  00F5B0  000A               	tblrd		*-
  1924  00F5B2  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  1925  00F5B6  ECEF  F076         	call	___ftmul	;wreg free
  1926  00F5BA  C01C  F02E         	movff	?___ftmul,_scale$1009
  1927  00F5BE  C01D  F02F         	movff	?___ftmul+1,_scale$1009+1
  1928  00F5C2  C01E  F030         	movff	?___ftmul+2,_scale$1009+2
  1929                           
  1930                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  1931  00F5C6  C02E  F01C         	movff	_scale$1009,___ftmul@f1
  1932  00F5CA  C02F  F01D         	movff	_scale$1009+1,___ftmul@f1+1
  1933  00F5CE  C030  F01E         	movff	_scale$1009+2,___ftmul@f1+2
  1934  00F5D2  0E00               	movlw	0
  1935  00F5D4  6E12               	movwf	___wmul@multiplicand+1,c
  1936  00F5D6  0E03               	movlw	3
  1937  00F5D8  6E11               	movwf	___wmul@multiplicand,c
  1938  00F5DA  0E00               	movlw	0
  1939  00F5DC  6E04               	movwf	___awmod@divisor+1,c
  1940  00F5DE  0E0A               	movlw	10
  1941  00F5E0  6E03               	movwf	___awmod@divisor,c
  1942  00F5E2  5031               	movf	scale@scl,w,c
  1943  00F5E4  6E01               	movwf	___awmod@dividend,c
  1944  00F5E6  6A02               	clrf	___awmod@dividend+1,c
  1945  00F5E8  BE01               	btfsc	___awmod@dividend,7,c
  1946  00F5EA  0602               	decf	___awmod@dividend+1,f,c
  1947  00F5EC  EC14  F074         	call	___awmod	;wreg free
  1948  00F5F0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  1949  00F5F4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  1950  00F5F8  ECE5  F072         	call	___wmul	;wreg free
  1951  00F5FC  0E27               	movlw	low __npowers_
  1952  00F5FE  240F               	addwf	?___wmul,w,c
  1953  00F600  6EF6               	movwf	tblptrl,c
  1954  00F602  0EFF               	movlw	high __npowers_
  1955  00F604  2010               	addwfc	?___wmul+1,w,c
  1956  00F606  6EF7               	movwf	tblptrh,c
  1957  00F608                     	if	0	;There are less than 3 active tblptr bytes
  1958  00F608                     	endif
  1959  00F608  0009               	tblrd		*+
  1960  00F60A  CFF5 F01F          	movff	tablat,___ftmul@f2
  1961  00F60E  0009               	tblrd		*+
  1962  00F610  CFF5 F020          	movff	tablat,___ftmul@f2+1
  1963  00F614  000A               	tblrd		*-
  1964  00F616  CFF5 F021          	movff	tablat,___ftmul@f2+2
  1965  00F61A  ECEF  F076         	call	___ftmul	;wreg free
  1966  00F61E  D141               	goto	L5
  1967  00F620  D15A               	goto	l76
  1968  00F622  D054               	goto	l2001
  1969  00F624                     l1995:
  1970                           
  1971                           ;doprnt.c: 432: else if(scl > 10)
  1972  00F624  5031               	movf	scale@scl,w,c
  1973  00F626  0A80               	xorlw	128
  1974  00F628  0F75               	addlw	-139
  1975  00F62A  A0D8               	btfss	status,0,c
  1976  00F62C  D04F               	goto	l2001
  1977                           
  1978                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  1979  00F62E  0E00               	movlw	0
  1980  00F630  6E0A               	movwf	___awdiv@divisor+1,c
  1981  00F632  0E0A               	movlw	10
  1982  00F634  6E09               	movwf	___awdiv@divisor,c
  1983  00F636  5031               	movf	scale@scl,w,c
  1984  00F638  6E07               	movwf	___awdiv@dividend,c
  1985  00F63A  6A08               	clrf	___awdiv@dividend+1,c
  1986  00F63C  BE07               	btfsc	___awdiv@dividend,7,c
  1987  00F63E  0608               	decf	___awdiv@dividend+1,f,c
  1988  00F640  ECE6  F074         	call	___awdiv	;wreg free
  1989  00F644  0E09               	movlw	9
  1990  00F646  2407               	addwf	?___awdiv,w,c
  1991  00F648  6E0F               	movwf	___wmul@multiplier,c
  1992  00F64A  0E00               	movlw	0
  1993  00F64C  2008               	addwfc	?___awdiv+1,w,c
  1994  00F64E  6E10               	movwf	___wmul@multiplier+1,c
  1995  00F650  0E00               	movlw	0
  1996  00F652  6E12               	movwf	___wmul@multiplicand+1,c
  1997  00F654  0E03               	movlw	3
  1998  00F656  6E11               	movwf	___wmul@multiplicand,c
  1999  00F658  ECE5  F072         	call	___wmul	;wreg free
  2000  00F65C  0E27               	movlw	low __npowers_
  2001  00F65E  240F               	addwf	?___wmul,w,c
  2002  00F660  6EF6               	movwf	tblptrl,c
  2003  00F662  0EFF               	movlw	high __npowers_
  2004  00F664  2010               	addwfc	?___wmul+1,w,c
  2005  00F666  6EF7               	movwf	tblptrh,c
  2006  00F668                     	if	0	;There are less than 3 active tblptr bytes
  2007  00F668                     	endif
  2008  00F668  0009               	tblrd		*+
  2009  00F66A  CFF5 F01C          	movff	tablat,___ftmul@f1
  2010  00F66E  0009               	tblrd		*+
  2011  00F670  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  2012  00F674  000A               	tblrd		*-
  2013  00F676  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  2014  00F67A  0E00               	movlw	0
  2015  00F67C  6E12               	movwf	___wmul@multiplicand+1,c
  2016  00F67E  0E03               	movlw	3
  2017  00F680  6E11               	movwf	___wmul@multiplicand,c
  2018  00F682  0E00               	movlw	0
  2019  00F684  6E04               	movwf	___awmod@divisor+1,c
  2020  00F686  0E0A               	movlw	10
  2021  00F688  6E03               	movwf	___awmod@divisor,c
  2022  00F68A  5031               	movf	scale@scl,w,c
  2023  00F68C  6E01               	movwf	___awmod@dividend,c
  2024  00F68E  6A02               	clrf	___awmod@dividend+1,c
  2025  00F690  BE01               	btfsc	___awmod@dividend,7,c
  2026  00F692  0602               	decf	___awmod@dividend+1,f,c
  2027  00F694  EC14  F074         	call	___awmod	;wreg free
  2028  00F698  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2029  00F69C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2030  00F6A0  ECE5  F072         	call	___wmul	;wreg free
  2031  00F6A4  0E27               	movlw	low __npowers_
  2032  00F6A6  240F               	addwf	?___wmul,w,c
  2033  00F6A8  6EF6               	movwf	tblptrl,c
  2034  00F6AA  0EFF               	movlw	high __npowers_
  2035  00F6AC  2010               	addwfc	?___wmul+1,w,c
  2036  00F6AE  6EF7               	movwf	tblptrh,c
  2037  00F6B0                     	if	0	;There are less than 3 active tblptr bytes
  2038  00F6B0                     	endif
  2039  00F6B0  0009               	tblrd		*+
  2040  00F6B2  CFF5 F01F          	movff	tablat,___ftmul@f2
  2041  00F6B6  0009               	tblrd		*+
  2042  00F6B8  CFF5 F020          	movff	tablat,___ftmul@f2+1
  2043  00F6BC  000A               	tblrd		*-
  2044  00F6BE  CFF5 F021          	movff	tablat,___ftmul@f2+2
  2045  00F6C2  ECEF  F076         	call	___ftmul	;wreg free
  2046  00F6C6  D0ED               	goto	L5
  2047  00F6C8  D106               	goto	l76
  2048  00F6CA  D000               	goto	l2001
  2049  00F6CC                     l2001:
  2050                           
  2051                           ;doprnt.c: 434: return _npowers_[scl];
  2052  00F6CC  5031               	movf	scale@scl,w,c
  2053  00F6CE  0D03               	mullw	3
  2054  00F6D0  0E27               	movlw	low __npowers_
  2055  00F6D2  24F3               	addwf	prodl,w,c
  2056  00F6D4  6EF6               	movwf	tblptrl,c
  2057  00F6D6  0EFF               	movlw	high __npowers_
  2058  00F6D8  D0F2               	goto	L4
  2059  00F6DA  D0FD               	goto	l76
  2060  00F6DC                     l2005:
  2061                           
  2062                           ;doprnt.c: 435: }
  2063                           ;doprnt.c: 436: if(scl>=110)
  2064  00F6DC  5031               	movf	scale@scl,w,c
  2065  00F6DE  0A80               	xorlw	128
  2066  00F6E0  0F12               	addlw	-238
  2067  00F6E2  A0D8               	btfss	status,0,c
  2068  00F6E4  D08D               	goto	l2013
  2069                           
  2070                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2071  00F6E6  0E00               	movlw	0
  2072  00F6E8  6E12               	movwf	___wmul@multiplicand+1,c
  2073  00F6EA  0E03               	movlw	3
  2074  00F6EC  6E11               	movwf	___wmul@multiplicand,c
  2075  00F6EE  0E00               	movlw	0
  2076  00F6F0  6E0A               	movwf	___awdiv@divisor+1,c
  2077  00F6F2  0E0A               	movlw	10
  2078  00F6F4  6E09               	movwf	___awdiv@divisor,c
  2079  00F6F6  0E00               	movlw	0
  2080  00F6F8  6E04               	movwf	___awmod@divisor+1,c
  2081  00F6FA  0E64               	movlw	100
  2082  00F6FC  6E03               	movwf	___awmod@divisor,c
  2083  00F6FE  5031               	movf	scale@scl,w,c
  2084  00F700  6E01               	movwf	___awmod@dividend,c
  2085  00F702  6A02               	clrf	___awmod@dividend+1,c
  2086  00F704  BE01               	btfsc	___awmod@dividend,7,c
  2087  00F706  0602               	decf	___awmod@dividend+1,f,c
  2088  00F708  EC14  F074         	call	___awmod	;wreg free
  2089  00F70C  C001  F007         	movff	?___awmod,___awdiv@dividend
  2090  00F710  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2091  00F714  ECE6  F074         	call	___awdiv	;wreg free
  2092  00F718  0E09               	movlw	9
  2093  00F71A  2407               	addwf	?___awdiv,w,c
  2094  00F71C  6E0F               	movwf	___wmul@multiplier,c
  2095  00F71E  0E00               	movlw	0
  2096  00F720  2008               	addwfc	?___awdiv+1,w,c
  2097  00F722  6E10               	movwf	___wmul@multiplier+1,c
  2098  00F724  ECE5  F072         	call	___wmul	;wreg free
  2099  00F728  0E4E               	movlw	low __powers_
  2100  00F72A  240F               	addwf	?___wmul,w,c
  2101  00F72C  6EF6               	movwf	tblptrl,c
  2102  00F72E  0EFF               	movlw	high __powers_
  2103  00F730  2010               	addwfc	?___wmul+1,w,c
  2104  00F732  6EF7               	movwf	tblptrh,c
  2105  00F734                     	if	0	;There are less than 3 active tblptr bytes
  2106  00F734                     	endif
  2107  00F734  0009               	tblrd		*+
  2108  00F736  CFF5 F01F          	movff	tablat,___ftmul@f2
  2109  00F73A  0009               	tblrd		*+
  2110  00F73C  CFF5 F020          	movff	tablat,___ftmul@f2+1
  2111  00F740  000A               	tblrd		*-
  2112  00F742  CFF5 F021          	movff	tablat,___ftmul@f2+2
  2113  00F746  0E00               	movlw	0
  2114  00F748  6E0A               	movwf	___awdiv@divisor+1,c
  2115  00F74A  0E64               	movlw	100
  2116  00F74C  6E09               	movwf	___awdiv@divisor,c
  2117  00F74E  5031               	movf	scale@scl,w,c
  2118  00F750  6E07               	movwf	___awdiv@dividend,c
  2119  00F752  6A08               	clrf	___awdiv@dividend+1,c
  2120  00F754  BE07               	btfsc	___awdiv@dividend,7,c
  2121  00F756  0608               	decf	___awdiv@dividend+1,f,c
  2122  00F758  ECE6  F074         	call	___awdiv	;wreg free
  2123  00F75C  0E12               	movlw	18
  2124  00F75E  2407               	addwf	?___awdiv,w,c
  2125  00F760  6E0F               	movwf	___wmul@multiplier,c
  2126  00F762  0E00               	movlw	0
  2127  00F764  2008               	addwfc	?___awdiv+1,w,c
  2128  00F766  6E10               	movwf	___wmul@multiplier+1,c
  2129  00F768  0E00               	movlw	0
  2130  00F76A  6E12               	movwf	___wmul@multiplicand+1,c
  2131  00F76C  0E03               	movlw	3
  2132  00F76E  6E11               	movwf	___wmul@multiplicand,c
  2133  00F770  ECE5  F072         	call	___wmul	;wreg free
  2134  00F774  0E4E               	movlw	low __powers_
  2135  00F776  240F               	addwf	?___wmul,w,c
  2136  00F778  6EF6               	movwf	tblptrl,c
  2137  00F77A  0EFF               	movlw	high __powers_
  2138  00F77C  2010               	addwfc	?___wmul+1,w,c
  2139  00F77E  6EF7               	movwf	tblptrh,c
  2140  00F780                     	if	0	;There are less than 3 active tblptr bytes
  2141  00F780                     	endif
  2142  00F780  0009               	tblrd		*+
  2143  00F782  CFF5 F01C          	movff	tablat,___ftmul@f1
  2144  00F786  0009               	tblrd		*+
  2145  00F788  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  2146  00F78C  000A               	tblrd		*-
  2147  00F78E  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  2148  00F792  ECEF  F076         	call	___ftmul	;wreg free
  2149  00F796  C01C  F02E         	movff	?___ftmul,_scale$1009
  2150  00F79A  C01D  F02F         	movff	?___ftmul+1,_scale$1009+1
  2151  00F79E  C01E  F030         	movff	?___ftmul+2,_scale$1009+2
  2152                           
  2153                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2154  00F7A2  C02E  F01C         	movff	_scale$1009,___ftmul@f1
  2155  00F7A6  C02F  F01D         	movff	_scale$1009+1,___ftmul@f1+1
  2156  00F7AA  C030  F01E         	movff	_scale$1009+2,___ftmul@f1+2
  2157  00F7AE  0E00               	movlw	0
  2158  00F7B0  6E12               	movwf	___wmul@multiplicand+1,c
  2159  00F7B2  0E03               	movlw	3
  2160  00F7B4  6E11               	movwf	___wmul@multiplicand,c
  2161  00F7B6  0E00               	movlw	0
  2162  00F7B8  6E04               	movwf	___awmod@divisor+1,c
  2163  00F7BA  0E0A               	movlw	10
  2164  00F7BC  6E03               	movwf	___awmod@divisor,c
  2165  00F7BE  5031               	movf	scale@scl,w,c
  2166  00F7C0  6E01               	movwf	___awmod@dividend,c
  2167  00F7C2  6A02               	clrf	___awmod@dividend+1,c
  2168  00F7C4  BE01               	btfsc	___awmod@dividend,7,c
  2169  00F7C6  0602               	decf	___awmod@dividend+1,f,c
  2170  00F7C8  EC14  F074         	call	___awmod	;wreg free
  2171  00F7CC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2172  00F7D0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2173  00F7D4  ECE5  F072         	call	___wmul	;wreg free
  2174  00F7D8  0E4E               	movlw	low __powers_
  2175  00F7DA  240F               	addwf	?___wmul,w,c
  2176  00F7DC  6EF6               	movwf	tblptrl,c
  2177  00F7DE  0EFF               	movlw	high __powers_
  2178  00F7E0  2010               	addwfc	?___wmul+1,w,c
  2179  00F7E2  6EF7               	movwf	tblptrh,c
  2180  00F7E4                     	if	0	;There are less than 3 active tblptr bytes
  2181  00F7E4                     	endif
  2182  00F7E4  0009               	tblrd		*+
  2183  00F7E6  CFF5 F01F          	movff	tablat,___ftmul@f2
  2184  00F7EA  0009               	tblrd		*+
  2185  00F7EC  CFF5 F020          	movff	tablat,___ftmul@f2+1
  2186  00F7F0  000A               	tblrd		*-
  2187  00F7F2  CFF5 F021          	movff	tablat,___ftmul@f2+2
  2188  00F7F6  ECEF  F076         	call	___ftmul	;wreg free
  2189  00F7FA  D053               	goto	L5
  2190  00F7FC  D06C               	goto	l76
  2191  00F7FE  D059               	goto	l2019
  2192  00F800                     l2013:
  2193                           
  2194                           ;doprnt.c: 438: else if(scl > 10)
  2195  00F800  5031               	movf	scale@scl,w,c
  2196  00F802  0A80               	xorlw	128
  2197  00F804  0F75               	addlw	-139
  2198  00F806  A0D8               	btfss	status,0,c
  2199  00F808  D054               	goto	l2019
  2200                           
  2201                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2202  00F80A  0E00               	movlw	0
  2203  00F80C  6E0A               	movwf	___awdiv@divisor+1,c
  2204  00F80E  0E0A               	movlw	10
  2205  00F810  6E09               	movwf	___awdiv@divisor,c
  2206  00F812  5031               	movf	scale@scl,w,c
  2207  00F814  6E07               	movwf	___awdiv@dividend,c
  2208  00F816  6A08               	clrf	___awdiv@dividend+1,c
  2209  00F818  BE07               	btfsc	___awdiv@dividend,7,c
  2210  00F81A  0608               	decf	___awdiv@dividend+1,f,c
  2211  00F81C  ECE6  F074         	call	___awdiv	;wreg free
  2212  00F820  0E09               	movlw	9
  2213  00F822  2407               	addwf	?___awdiv,w,c
  2214  00F824  6E0F               	movwf	___wmul@multiplier,c
  2215  00F826  0E00               	movlw	0
  2216  00F828  2008               	addwfc	?___awdiv+1,w,c
  2217  00F82A  6E10               	movwf	___wmul@multiplier+1,c
  2218  00F82C  0E00               	movlw	0
  2219  00F82E  6E12               	movwf	___wmul@multiplicand+1,c
  2220  00F830  0E03               	movlw	3
  2221  00F832  6E11               	movwf	___wmul@multiplicand,c
  2222  00F834  ECE5  F072         	call	___wmul	;wreg free
  2223  00F838  0E4E               	movlw	low __powers_
  2224  00F83A  240F               	addwf	?___wmul,w,c
  2225  00F83C  6EF6               	movwf	tblptrl,c
  2226  00F83E  0EFF               	movlw	high __powers_
  2227  00F840  2010               	addwfc	?___wmul+1,w,c
  2228  00F842  6EF7               	movwf	tblptrh,c
  2229  00F844                     	if	0	;There are less than 3 active tblptr bytes
  2230  00F844                     	endif
  2231  00F844  0009               	tblrd		*+
  2232  00F846  CFF5 F01C          	movff	tablat,___ftmul@f1
  2233  00F84A  0009               	tblrd		*+
  2234  00F84C  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  2235  00F850  000A               	tblrd		*-
  2236  00F852  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  2237  00F856  0E00               	movlw	0
  2238  00F858  6E12               	movwf	___wmul@multiplicand+1,c
  2239  00F85A  0E03               	movlw	3
  2240  00F85C  6E11               	movwf	___wmul@multiplicand,c
  2241  00F85E  0E00               	movlw	0
  2242  00F860  6E04               	movwf	___awmod@divisor+1,c
  2243  00F862  0E0A               	movlw	10
  2244  00F864  6E03               	movwf	___awmod@divisor,c
  2245  00F866  5031               	movf	scale@scl,w,c
  2246  00F868  6E01               	movwf	___awmod@dividend,c
  2247  00F86A  6A02               	clrf	___awmod@dividend+1,c
  2248  00F86C  BE01               	btfsc	___awmod@dividend,7,c
  2249  00F86E  0602               	decf	___awmod@dividend+1,f,c
  2250  00F870  EC14  F074         	call	___awmod	;wreg free
  2251  00F874  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2252  00F878  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2253  00F87C  ECE5  F072         	call	___wmul	;wreg free
  2254  00F880  0E4E               	movlw	low __powers_
  2255  00F882  240F               	addwf	?___wmul,w,c
  2256  00F884  6EF6               	movwf	tblptrl,c
  2257  00F886  0EFF               	movlw	high __powers_
  2258  00F888  2010               	addwfc	?___wmul+1,w,c
  2259  00F88A  6EF7               	movwf	tblptrh,c
  2260  00F88C                     	if	0	;There are less than 3 active tblptr bytes
  2261  00F88C                     	endif
  2262  00F88C  0009               	tblrd		*+
  2263  00F88E  CFF5 F01F          	movff	tablat,___ftmul@f2
  2264  00F892  0009               	tblrd		*+
  2265  00F894  CFF5 F020          	movff	tablat,___ftmul@f2+1
  2266  00F898  000A               	tblrd		*-
  2267  00F89A  CFF5 F021          	movff	tablat,___ftmul@f2+2
  2268  00F89E  ECEF  F076         	call	___ftmul	;wreg free
  2269  00F8A2                     L5:
  2270  00F8A2  C01C  F02B         	movff	?___ftmul,?_scale
  2271  00F8A6  C01D  F02C         	movff	?___ftmul+1,?_scale+1
  2272  00F8AA  C01E  F02D         	movff	?___ftmul+2,?_scale+2
  2273  00F8AE  D013               	goto	l76
  2274  00F8B0  D000               	goto	l2019
  2275  00F8B2                     l2019:
  2276                           
  2277                           ;doprnt.c: 440: return _powers_[scl];
  2278  00F8B2  5031               	movf	scale@scl,w,c
  2279  00F8B4  0D03               	mullw	3
  2280  00F8B6  0E4E               	movlw	low __powers_
  2281  00F8B8  24F3               	addwf	prodl,w,c
  2282  00F8BA  6EF6               	movwf	tblptrl,c
  2283  00F8BC  0EFF               	movlw	high __powers_
  2284  00F8BE                     L4:
  2285  00F8BE  20F4               	addwfc	prodh,w,c
  2286  00F8C0  6EF7               	movwf	tblptrh,c
  2287  00F8C2                     	if	0	;There are less than 3 active tblptr bytes
  2288  00F8C2                     	endif
  2289  00F8C2  0009               	tblrd		*+
  2290  00F8C4  CFF5 F02B          	movff	tablat,?_scale
  2291  00F8C8  0009               	tblrd		*+
  2292  00F8CA  CFF5 F02C          	movff	tablat,?_scale+1
  2293  00F8CE  000A               	tblrd		*-
  2294  00F8D0  CFF5 F02D          	movff	tablat,?_scale+2
  2295  00F8D4  D000               	goto	l76
  2296  00F8D6                     l76:
  2297  00F8D6  0012               	return		;funcret
  2298  00F8D8                     __end_of_scale:
  2299                           	opt stack 0
  2300                           tblptru	equ	0xFF8
  2301                           tblptrh	equ	0xFF7
  2302                           tblptrl	equ	0xFF6
  2303                           tablat	equ	0xFF5
  2304                           prodh	equ	0xFF4
  2305                           prodl	equ	0xFF3
  2306                           wreg	equ	0xFE8
  2307                           postinc2	equ	0xFDE
  2308                           postdec2	equ	0xFDD
  2309                           fsr2h	equ	0xFDA
  2310                           fsr2l	equ	0xFD9
  2311                           status	equ	0xFD8
  2312                           
  2313 ;; *************** function _putch *****************
  2314 ;; Defined at:
  2315 ;;		line 28 in file "Lab1p3.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;  c               1    wreg     unsigned char 
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;  c               1    0[COMRAM] unsigned char 
  2320 ;; Return value:  Size  Location     Type
  2321 ;;		None               void
  2322 ;; Registers used:
  2323 ;;		wreg
  2324 ;; Tracked objects:
  2325 ;;		On entry : 0/0
  2326 ;;		On exit  : 0/0
  2327 ;;		Unchanged: 0/0
  2328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2330 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2332 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2333 ;;Total ram usage:        1 bytes
  2334 ;; Hardware stack levels used:    1
  2335 ;; This function calls:
  2336 ;;		Nothing
  2337 ;; This function is called by:
  2338 ;;		_printf
  2339 ;; This function uses a non-reentrant model
  2340 ;;
  2341                           
  2342                           	psect	text3
  2343  00E55E                     __ptext3:
  2344                           	opt stack 0
  2345  00E55E                     _putch:
  2346                           	opt stack 29
  2347                           
  2348                           ;incstack = 0
  2349                           ;putch@c stored from wreg
  2350  00E55E  6E01               	movwf	putch@c,c
  2351                           
  2352                           ;Lab1p3.c: 31: while (!TRMT);
  2353  00E560  D000               	goto	l28
  2354  00E562                     l28:
  2355  00E562  A2AC               	btfss	4012,1,c	;volatile
  2356  00E564  D7FE               	goto	l28
  2357                           
  2358                           ;Lab1p3.c: 32: TXREG = c;
  2359  00E566  C001  FFAD         	movff	putch@c,4013	;volatile
  2360  00E56A  0012               	return		;funcret
  2361  00E56C                     __end_of_putch:
  2362                           	opt stack 0
  2363                           tblptru	equ	0xFF8
  2364                           tblptrh	equ	0xFF7
  2365                           tblptrl	equ	0xFF6
  2366                           tablat	equ	0xFF5
  2367                           prodh	equ	0xFF4
  2368                           prodl	equ	0xFF3
  2369                           wreg	equ	0xFE8
  2370                           postinc2	equ	0xFDE
  2371                           postdec2	equ	0xFDD
  2372                           fsr2h	equ	0xFDA
  2373                           fsr2l	equ	0xFD9
  2374                           status	equ	0xFD8
  2375                           
  2376 ;; *************** function _fround *****************
  2377 ;; Defined at:
  2378 ;;		line 409 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;  prec            1    wreg     unsigned char 
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;  prec            1   51[COMRAM] unsigned char 
  2383 ;; Return value:  Size  Location     Type
  2384 ;;                  3   42[COMRAM] unsigned char 
  2385 ;; Registers used:
  2386 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2392 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2393 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2395 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2396 ;;Total ram usage:       10 bytes
  2397 ;; Hardware stack levels used:    1
  2398 ;; Hardware stack levels required when called:    2
  2399 ;; This function calls:
  2400 ;;		___awdiv
  2401 ;;		___awmod
  2402 ;;		___ftmul
  2403 ;;		___wmul
  2404 ;; This function is called by:
  2405 ;;		_printf
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409                           	psect	text4
  2410  00F2B4                     __ptext4:
  2411                           	opt stack 0
  2412  00F2B4                     _fround:
  2413                           	opt stack 27
  2414                           
  2415                           ;incstack = 0
  2416                           ;fround@prec stored from wreg
  2417  00F2B4  6E34               	movwf	fround@prec,c
  2418                           
  2419                           ;doprnt.c: 413: if(prec>=110)
  2420  00F2B6  0E6D               	movlw	109
  2421  00F2B8  6434               	cpfsgt	fround@prec,c
  2422  00F2BA  D09B               	goto	l1973
  2423                           
  2424                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2425  00F2BC  0E00               	movlw	0
  2426  00F2BE  6E12               	movwf	___wmul@multiplicand+1,c
  2427  00F2C0  0E03               	movlw	3
  2428  00F2C2  6E11               	movwf	___wmul@multiplicand,c
  2429  00F2C4  0E00               	movlw	0
  2430  00F2C6  6E0A               	movwf	___awdiv@divisor+1,c
  2431  00F2C8  0E0A               	movlw	10
  2432  00F2CA  6E09               	movwf	___awdiv@divisor,c
  2433  00F2CC  0E00               	movlw	0
  2434  00F2CE  6E04               	movwf	___awmod@divisor+1,c
  2435  00F2D0  0E64               	movlw	100
  2436  00F2D2  6E03               	movwf	___awmod@divisor,c
  2437  00F2D4  C034  F001         	movff	fround@prec,___awmod@dividend
  2438  00F2D8  6A02               	clrf	___awmod@dividend+1,c
  2439  00F2DA  EC14  F074         	call	___awmod	;wreg free
  2440  00F2DE  C001  F007         	movff	?___awmod,___awdiv@dividend
  2441  00F2E2  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2442  00F2E6  ECE6  F074         	call	___awdiv	;wreg free
  2443  00F2EA  0E09               	movlw	9
  2444  00F2EC  2407               	addwf	?___awdiv,w,c
  2445  00F2EE  6E0F               	movwf	___wmul@multiplier,c
  2446  00F2F0  0E00               	movlw	0
  2447  00F2F2  2008               	addwfc	?___awdiv+1,w,c
  2448  00F2F4  6E10               	movwf	___wmul@multiplier+1,c
  2449  00F2F6  ECE5  F072         	call	___wmul	;wreg free
  2450  00F2FA  0E27               	movlw	low __npowers_
  2451  00F2FC  240F               	addwf	?___wmul,w,c
  2452  00F2FE  6EF6               	movwf	tblptrl,c
  2453  00F300  0EFF               	movlw	high __npowers_
  2454  00F302  2010               	addwfc	?___wmul+1,w,c
  2455  00F304  6EF7               	movwf	tblptrh,c
  2456  00F306                     	if	0	;There are less than 3 active tblptr bytes
  2457  00F306                     	endif
  2458  00F306  0009               	tblrd		*+
  2459  00F308  CFF5 F01F          	movff	tablat,___ftmul@f2
  2460  00F30C  0009               	tblrd		*+
  2461  00F30E  CFF5 F020          	movff	tablat,___ftmul@f2+1
  2462  00F312  000A               	tblrd		*-
  2463  00F314  CFF5 F021          	movff	tablat,___ftmul@f2+2
  2464  00F318  0E00               	movlw	0
  2465  00F31A  6E0A               	movwf	___awdiv@divisor+1,c
  2466  00F31C  0E64               	movlw	100
  2467  00F31E  6E09               	movwf	___awdiv@divisor,c
  2468  00F320  C034  F007         	movff	fround@prec,___awdiv@dividend
  2469  00F324  6A08               	clrf	___awdiv@dividend+1,c
  2470  00F326  ECE6  F074         	call	___awdiv	;wreg free
  2471  00F32A  0E12               	movlw	18
  2472  00F32C  2407               	addwf	?___awdiv,w,c
  2473  00F32E  6E0F               	movwf	___wmul@multiplier,c
  2474  00F330  0E00               	movlw	0
  2475  00F332  2008               	addwfc	?___awdiv+1,w,c
  2476  00F334  6E10               	movwf	___wmul@multiplier+1,c
  2477  00F336  0E00               	movlw	0
  2478  00F338  6E12               	movwf	___wmul@multiplicand+1,c
  2479  00F33A  0E03               	movlw	3
  2480  00F33C  6E11               	movwf	___wmul@multiplicand,c
  2481  00F33E  ECE5  F072         	call	___wmul	;wreg free
  2482  00F342  0E27               	movlw	low __npowers_
  2483  00F344  240F               	addwf	?___wmul,w,c
  2484  00F346  6EF6               	movwf	tblptrl,c
  2485  00F348  0EFF               	movlw	high __npowers_
  2486  00F34A  2010               	addwfc	?___wmul+1,w,c
  2487  00F34C  6EF7               	movwf	tblptrh,c
  2488  00F34E                     	if	0	;There are less than 3 active tblptr bytes
  2489  00F34E                     	endif
  2490  00F34E  0009               	tblrd		*+
  2491  00F350  CFF5 F01C          	movff	tablat,___ftmul@f1
  2492  00F354  0009               	tblrd		*+
  2493  00F356  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  2494  00F35A  000A               	tblrd		*-
  2495  00F35C  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  2496  00F360  ECEF  F076         	call	___ftmul	;wreg free
  2497  00F364  C01C  F031         	movff	?___ftmul,_fround$1007
  2498  00F368  C01D  F032         	movff	?___ftmul+1,_fround$1007+1
  2499  00F36C  C01E  F033         	movff	?___ftmul+2,_fround$1007+2
  2500                           
  2501                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2502  00F370  0E00               	movlw	0
  2503  00F372  6E12               	movwf	___wmul@multiplicand+1,c
  2504  00F374  0E03               	movlw	3
  2505  00F376  6E11               	movwf	___wmul@multiplicand,c
  2506  00F378  0E00               	movlw	0
  2507  00F37A  6E04               	movwf	___awmod@divisor+1,c
  2508  00F37C  0E0A               	movlw	10
  2509  00F37E  6E03               	movwf	___awmod@divisor,c
  2510  00F380  C034  F001         	movff	fround@prec,___awmod@dividend
  2511  00F384  6A02               	clrf	___awmod@dividend+1,c
  2512  00F386  EC14  F074         	call	___awmod	;wreg free
  2513  00F38A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2514  00F38E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2515  00F392  ECE5  F072         	call	___wmul	;wreg free
  2516  00F396  0E27               	movlw	low __npowers_
  2517  00F398  240F               	addwf	?___wmul,w,c
  2518  00F39A  6EF6               	movwf	tblptrl,c
  2519  00F39C  0EFF               	movlw	high __npowers_
  2520  00F39E  2010               	addwfc	?___wmul+1,w,c
  2521  00F3A0  6EF7               	movwf	tblptrh,c
  2522  00F3A2                     	if	0	;There are less than 3 active tblptr bytes
  2523  00F3A2                     	endif
  2524  00F3A2  0009               	tblrd		*+
  2525  00F3A4  CFF5 F01F          	movff	tablat,___ftmul@f2
  2526  00F3A8  0009               	tblrd		*+
  2527  00F3AA  CFF5 F020          	movff	tablat,___ftmul@f2+1
  2528  00F3AE  000A               	tblrd		*-
  2529  00F3B0  CFF5 F021          	movff	tablat,___ftmul@f2+2
  2530  00F3B4  C031  F01C         	movff	_fround$1007,___ftmul@f1
  2531  00F3B8  C032  F01D         	movff	_fround$1007+1,___ftmul@f1+1
  2532  00F3BC  C033  F01E         	movff	_fround$1007+2,___ftmul@f1+2
  2533  00F3C0  ECEF  F076         	call	___ftmul	;wreg free
  2534  00F3C4  C01C  F02E         	movff	?___ftmul,_fround$1008
  2535  00F3C8  C01D  F02F         	movff	?___ftmul+1,_fround$1008+1
  2536  00F3CC  C01E  F030         	movff	?___ftmul+2,_fround$1008+2
  2537                           
  2538                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2539  00F3D0  C02E  F01C         	movff	_fround$1008,___ftmul@f1
  2540  00F3D4  C02F  F01D         	movff	_fround$1008+1,___ftmul@f1+1
  2541  00F3D8  C030  F01E         	movff	_fround$1008+2,___ftmul@f1+2
  2542  00F3DC  0E00               	movlw	0
  2543  00F3DE  6E1F               	movwf	___ftmul@f2,c
  2544  00F3E0  0E00               	movlw	0
  2545  00F3E2  6E20               	movwf	___ftmul@f2+1,c
  2546  00F3E4  0E3F               	movlw	63
  2547  00F3E6  6E21               	movwf	___ftmul@f2+2,c
  2548  00F3E8  ECEF  F076         	call	___ftmul	;wreg free
  2549  00F3EC  D07D               	goto	L7
  2550  00F3EE  D083               	goto	l69
  2551  00F3F0  D062               	goto	l1981
  2552  00F3F2                     l1973:
  2553                           
  2554                           ;doprnt.c: 415: else if(prec > 10)
  2555  00F3F2  0E0A               	movlw	10
  2556  00F3F4  6434               	cpfsgt	fround@prec,c
  2557  00F3F6  D05F               	goto	l1981
  2558                           
  2559                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2560  00F3F8  0E00               	movlw	0
  2561  00F3FA  6E12               	movwf	___wmul@multiplicand+1,c
  2562  00F3FC  0E03               	movlw	3
  2563  00F3FE  6E11               	movwf	___wmul@multiplicand,c
  2564  00F400  0E00               	movlw	0
  2565  00F402  6E04               	movwf	___awmod@divisor+1,c
  2566  00F404  0E0A               	movlw	10
  2567  00F406  6E03               	movwf	___awmod@divisor,c
  2568  00F408  C034  F001         	movff	fround@prec,___awmod@dividend
  2569  00F40C  6A02               	clrf	___awmod@dividend+1,c
  2570  00F40E  EC14  F074         	call	___awmod	;wreg free
  2571  00F412  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2572  00F416  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2573  00F41A  ECE5  F072         	call	___wmul	;wreg free
  2574  00F41E  0E27               	movlw	low __npowers_
  2575  00F420  240F               	addwf	?___wmul,w,c
  2576  00F422  6EF6               	movwf	tblptrl,c
  2577  00F424  0EFF               	movlw	high __npowers_
  2578  00F426  2010               	addwfc	?___wmul+1,w,c
  2579  00F428  6EF7               	movwf	tblptrh,c
  2580  00F42A                     	if	0	;There are less than 3 active tblptr bytes
  2581  00F42A                     	endif
  2582  00F42A  0009               	tblrd		*+
  2583  00F42C  CFF5 F01F          	movff	tablat,___ftmul@f2
  2584  00F430  0009               	tblrd		*+
  2585  00F432  CFF5 F020          	movff	tablat,___ftmul@f2+1
  2586  00F436  000A               	tblrd		*-
  2587  00F438  CFF5 F021          	movff	tablat,___ftmul@f2+2
  2588  00F43C  0E00               	movlw	0
  2589  00F43E  6E0A               	movwf	___awdiv@divisor+1,c
  2590  00F440  0E0A               	movlw	10
  2591  00F442  6E09               	movwf	___awdiv@divisor,c
  2592  00F444  C034  F007         	movff	fround@prec,___awdiv@dividend
  2593  00F448  6A08               	clrf	___awdiv@dividend+1,c
  2594  00F44A  ECE6  F074         	call	___awdiv	;wreg free
  2595  00F44E  0E09               	movlw	9
  2596  00F450  2407               	addwf	?___awdiv,w,c
  2597  00F452  6E0F               	movwf	___wmul@multiplier,c
  2598  00F454  0E00               	movlw	0
  2599  00F456  2008               	addwfc	?___awdiv+1,w,c
  2600  00F458  6E10               	movwf	___wmul@multiplier+1,c
  2601  00F45A  0E00               	movlw	0
  2602  00F45C  6E12               	movwf	___wmul@multiplicand+1,c
  2603  00F45E  0E03               	movlw	3
  2604  00F460  6E11               	movwf	___wmul@multiplicand,c
  2605  00F462  ECE5  F072         	call	___wmul	;wreg free
  2606  00F466  0E27               	movlw	low __npowers_
  2607  00F468  240F               	addwf	?___wmul,w,c
  2608  00F46A  6EF6               	movwf	tblptrl,c
  2609  00F46C  0EFF               	movlw	high __npowers_
  2610  00F46E  2010               	addwfc	?___wmul+1,w,c
  2611  00F470  6EF7               	movwf	tblptrh,c
  2612  00F472                     	if	0	;There are less than 3 active tblptr bytes
  2613  00F472                     	endif
  2614  00F472  0009               	tblrd		*+
  2615  00F474  CFF5 F01C          	movff	tablat,___ftmul@f1
  2616  00F478  0009               	tblrd		*+
  2617  00F47A  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  2618  00F47E  000A               	tblrd		*-
  2619  00F480  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  2620  00F484  ECEF  F076         	call	___ftmul	;wreg free
  2621  00F488  C01C  F031         	movff	?___ftmul,_fround$1007
  2622  00F48C  C01D  F032         	movff	?___ftmul+1,_fround$1007+1
  2623  00F490  C01E  F033         	movff	?___ftmul+2,_fround$1007+2
  2624                           
  2625                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2626  00F494  C031  F01C         	movff	_fround$1007,___ftmul@f1
  2627  00F498  C032  F01D         	movff	_fround$1007+1,___ftmul@f1+1
  2628  00F49C  C033  F01E         	movff	_fround$1007+2,___ftmul@f1+2
  2629  00F4A0  0E00               	movlw	0
  2630  00F4A2  6E1F               	movwf	___ftmul@f2,c
  2631  00F4A4  0E00               	movlw	0
  2632  00F4A6  6E20               	movwf	___ftmul@f2+1,c
  2633  00F4A8  0E3F               	movlw	63
  2634  00F4AA  6E21               	movwf	___ftmul@f2+2,c
  2635  00F4AC  ECEF  F076         	call	___ftmul	;wreg free
  2636  00F4B0  D01B               	goto	L7
  2637  00F4B2  D021               	goto	l69
  2638  00F4B4  D000               	goto	l1981
  2639  00F4B6                     l1981:
  2640                           
  2641                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  2642  00F4B6  5034               	movf	fround@prec,w,c
  2643  00F4B8  0D03               	mullw	3
  2644  00F4BA  0E27               	movlw	low __npowers_
  2645  00F4BC  24F3               	addwf	prodl,w,c
  2646  00F4BE  6EF6               	movwf	tblptrl,c
  2647  00F4C0  0EFF               	movlw	high __npowers_
  2648  00F4C2  20F4               	addwfc	prodh,w,c
  2649  00F4C4  6EF7               	movwf	tblptrh,c
  2650  00F4C6                     	if	0	;There are less than 3 active tblptr bytes
  2651  00F4C6                     	endif
  2652  00F4C6  0009               	tblrd		*+
  2653  00F4C8  CFF5 F01C          	movff	tablat,___ftmul@f1
  2654  00F4CC  0009               	tblrd		*+
  2655  00F4CE  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  2656  00F4D2  000A               	tblrd		*-
  2657  00F4D4  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  2658  00F4D8  0E00               	movlw	0
  2659  00F4DA  6E1F               	movwf	___ftmul@f2,c
  2660  00F4DC  0E00               	movlw	0
  2661  00F4DE  6E20               	movwf	___ftmul@f2+1,c
  2662  00F4E0  0E3F               	movlw	63
  2663  00F4E2  6E21               	movwf	___ftmul@f2+2,c
  2664  00F4E4  ECEF  F076         	call	___ftmul	;wreg free
  2665  00F4E8                     L7:
  2666  00F4E8  C01C  F02B         	movff	?___ftmul,?_fround
  2667  00F4EC  C01D  F02C         	movff	?___ftmul+1,?_fround+1
  2668  00F4F0  C01E  F02D         	movff	?___ftmul+2,?_fround+2
  2669  00F4F4  D000               	goto	l69
  2670  00F4F6                     l69:
  2671  00F4F6  0012               	return		;funcret
  2672  00F4F8                     __end_of_fround:
  2673                           	opt stack 0
  2674                           tblptru	equ	0xFF8
  2675                           tblptrh	equ	0xFF7
  2676                           tblptrl	equ	0xFF6
  2677                           tablat	equ	0xFF5
  2678                           prodh	equ	0xFF4
  2679                           prodl	equ	0xFF3
  2680                           wreg	equ	0xFE8
  2681                           postinc2	equ	0xFDE
  2682                           postdec2	equ	0xFDD
  2683                           fsr2h	equ	0xFDA
  2684                           fsr2l	equ	0xFD9
  2685                           status	equ	0xFD8
  2686                           
  2687 ;; *************** function ___wmul *****************
  2688 ;; Defined at:
  2689 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  multiplier      2   14[COMRAM] unsigned int 
  2692 ;;  multiplicand    2   16[COMRAM] unsigned int 
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;  product         2   18[COMRAM] unsigned int 
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  2   14[COMRAM] unsigned int 
  2697 ;; Registers used:
  2698 ;;		wreg, status,2, status,0, prodl, prodh
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2704 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2705 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2707 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2708 ;;Total ram usage:        6 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; This function calls:
  2711 ;;		Nothing
  2712 ;; This function is called by:
  2713 ;;		_fround
  2714 ;;		_scale
  2715 ;;		_printf
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text5
  2720  00E5CA                     __ptext5:
  2721                           	opt stack 0
  2722  00E5CA                     ___wmul:
  2723                           	opt stack 28
  2724                           
  2725                           ;incstack = 0
  2726  00E5CA  500F               	movf	___wmul@multiplier,w,c
  2727  00E5CC  0211               	mulwf	___wmul@multiplicand,c
  2728  00E5CE  CFF3 F013          	movff	prodl,___wmul@product
  2729  00E5D2  CFF4 F014          	movff	prodh,___wmul@product+1
  2730  00E5D6  500F               	movf	___wmul@multiplier,w,c
  2731  00E5D8  0212               	mulwf	___wmul@multiplicand+1,c
  2732  00E5DA  50F3               	movf	prodl,w,c
  2733  00E5DC  2614               	addwf	___wmul@product+1,f,c
  2734  00E5DE  5010               	movf	___wmul@multiplier+1,w,c
  2735  00E5E0  0211               	mulwf	___wmul@multiplicand,c
  2736  00E5E2  50F3               	movf	prodl,w,c
  2737  00E5E4  2614               	addwf	___wmul@product+1,f,c
  2738  00E5E6  C013  F00F         	movff	___wmul@product,?___wmul
  2739  00E5EA  C014  F010         	movff	___wmul@product+1,?___wmul+1
  2740  00E5EE  D000               	goto	l168
  2741  00E5F0                     l168:
  2742  00E5F0  0012               	return		;funcret
  2743  00E5F2                     __end_of___wmul:
  2744                           	opt stack 0
  2745                           tblptru	equ	0xFF8
  2746                           tblptrh	equ	0xFF7
  2747                           tblptrl	equ	0xFF6
  2748                           tablat	equ	0xFF5
  2749                           prodh	equ	0xFF4
  2750                           prodl	equ	0xFF3
  2751                           wreg	equ	0xFE8
  2752                           postinc2	equ	0xFDE
  2753                           postdec2	equ	0xFDD
  2754                           fsr2h	equ	0xFDA
  2755                           fsr2l	equ	0xFD9
  2756                           status	equ	0xFD8
  2757                           
  2758 ;; *************** function ___awmod *****************
  2759 ;; Defined at:
  2760 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awmod.c"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;  dividend        2    0[COMRAM] int 
  2763 ;;  divisor         2    2[COMRAM] int 
  2764 ;; Auto vars:     Size  Location     Type
  2765 ;;  sign            1    5[COMRAM] unsigned char 
  2766 ;;  counter         1    4[COMRAM] unsigned char 
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  2    0[COMRAM] int 
  2769 ;; Registers used:
  2770 ;;		wreg, status,2, status,0
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2776 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2777 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2779 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2780 ;;Total ram usage:        6 bytes
  2781 ;; Hardware stack levels used:    1
  2782 ;; This function calls:
  2783 ;;		Nothing
  2784 ;; This function is called by:
  2785 ;;		_fround
  2786 ;;		_scale
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790                           	psect	text6
  2791  00E828                     __ptext6:
  2792                           	opt stack 0
  2793  00E828                     ___awmod:
  2794                           	opt stack 28
  2795                           
  2796                           ;incstack = 0
  2797  00E828  0E00               	movlw	0
  2798  00E82A  6E06               	movwf	___awmod@sign,c
  2799  00E82C  AE02               	btfss	___awmod@dividend+1,7,c
  2800  00E82E  D007               	goto	l1873
  2801  00E830  6C01               	negf	___awmod@dividend,c
  2802  00E832  1E02               	comf	___awmod@dividend+1,f,c
  2803  00E834  B0D8               	btfsc	status,0,c
  2804  00E836  2A02               	incf	___awmod@dividend+1,f,c
  2805  00E838  0E01               	movlw	1
  2806  00E83A  6E06               	movwf	___awmod@sign,c
  2807  00E83C  D000               	goto	l1873
  2808  00E83E                     l1873:
  2809  00E83E  AE04               	btfss	___awmod@divisor+1,7,c
  2810  00E840  D005               	goto	l1877
  2811  00E842  6C03               	negf	___awmod@divisor,c
  2812  00E844  1E04               	comf	___awmod@divisor+1,f,c
  2813  00E846  B0D8               	btfsc	status,0,c
  2814  00E848  2A04               	incf	___awmod@divisor+1,f,c
  2815  00E84A  D000               	goto	l1877
  2816  00E84C                     l1877:
  2817  00E84C  5003               	movf	___awmod@divisor,w,c
  2818  00E84E  1004               	iorwf	___awmod@divisor+1,w,c
  2819  00E850  B4D8               	btfsc	status,2,c
  2820  00E852  D01D               	goto	l1893
  2821  00E854  0E01               	movlw	1
  2822  00E856  6E05               	movwf	___awmod@counter,c
  2823  00E858  D005               	goto	l1883
  2824  00E85A                     l1881:
  2825  00E85A  90D8               	bcf	status,0,c
  2826  00E85C  3603               	rlcf	___awmod@divisor,f,c
  2827  00E85E  3604               	rlcf	___awmod@divisor+1,f,c
  2828  00E860  2A05               	incf	___awmod@counter,f,c
  2829  00E862  D000               	goto	l1883
  2830  00E864                     l1883:
  2831  00E864  BE04               	btfsc	___awmod@divisor+1,7,c
  2832  00E866  D002               	goto	l1885
  2833  00E868  D7F8               	goto	l1881
  2834  00E86A  D000               	goto	l1885
  2835  00E86C                     l1885:
  2836  00E86C  5003               	movf	___awmod@divisor,w,c
  2837  00E86E  5C01               	subwf	___awmod@dividend,w,c
  2838  00E870  5004               	movf	___awmod@divisor+1,w,c
  2839  00E872  5802               	subwfb	___awmod@dividend+1,w,c
  2840  00E874  A0D8               	btfss	status,0,c
  2841  00E876  D005               	goto	l1889
  2842  00E878  5003               	movf	___awmod@divisor,w,c
  2843  00E87A  5E01               	subwf	___awmod@dividend,f,c
  2844  00E87C  5004               	movf	___awmod@divisor+1,w,c
  2845  00E87E  5A02               	subwfb	___awmod@dividend+1,f,c
  2846  00E880  D000               	goto	l1889
  2847  00E882                     l1889:
  2848  00E882  90D8               	bcf	status,0,c
  2849  00E884  3204               	rrcf	___awmod@divisor+1,f,c
  2850  00E886  3203               	rrcf	___awmod@divisor,f,c
  2851  00E888  2E05               	decfsz	___awmod@counter,f,c
  2852  00E88A  D7F0               	goto	l1885
  2853  00E88C  D000               	goto	l1893
  2854  00E88E                     l1893:
  2855  00E88E  5006               	movf	___awmod@sign,w,c
  2856  00E890  B4D8               	btfsc	status,2,c
  2857  00E892  D005               	goto	l1897
  2858  00E894  6C01               	negf	___awmod@dividend,c
  2859  00E896  1E02               	comf	___awmod@dividend+1,f,c
  2860  00E898  B0D8               	btfsc	status,0,c
  2861  00E89A  2A02               	incf	___awmod@dividend+1,f,c
  2862  00E89C  D000               	goto	l1897
  2863  00E89E                     l1897:
  2864  00E89E  C001  F001         	movff	___awmod@dividend,?___awmod
  2865  00E8A2  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2866  00E8A6  D000               	goto	l374
  2867  00E8A8                     l374:
  2868  00E8A8  0012               	return		;funcret
  2869  00E8AA                     __end_of___awmod:
  2870                           	opt stack 0
  2871                           tblptru	equ	0xFF8
  2872                           tblptrh	equ	0xFF7
  2873                           tblptrl	equ	0xFF6
  2874                           tablat	equ	0xFF5
  2875                           prodh	equ	0xFF4
  2876                           prodl	equ	0xFF3
  2877                           wreg	equ	0xFE8
  2878                           postinc2	equ	0xFDE
  2879                           postdec2	equ	0xFDD
  2880                           fsr2h	equ	0xFDA
  2881                           fsr2l	equ	0xFD9
  2882                           status	equ	0xFD8
  2883                           
  2884 ;; *************** function ___awdiv *****************
  2885 ;; Defined at:
  2886 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awdiv.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  dividend        2    6[COMRAM] int 
  2889 ;;  divisor         2    8[COMRAM] int 
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  quotient        2   12[COMRAM] int 
  2892 ;;  sign            1   11[COMRAM] unsigned char 
  2893 ;;  counter         1   10[COMRAM] unsigned char 
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  2    6[COMRAM] int 
  2896 ;; Registers used:
  2897 ;;		wreg, status,2, status,0
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2903 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2904 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;Total ram usage:        8 bytes
  2908 ;; Hardware stack levels used:    1
  2909 ;; This function calls:
  2910 ;;		Nothing
  2911 ;; This function is called by:
  2912 ;;		_fround
  2913 ;;		_scale
  2914 ;;		_printf
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           	psect	text7
  2919  00E9CC                     __ptext7:
  2920                           	opt stack 0
  2921  00E9CC                     ___awdiv:
  2922                           	opt stack 28
  2923                           
  2924                           ;incstack = 0
  2925  00E9CC  0E00               	movlw	0
  2926  00E9CE  6E0C               	movwf	___awdiv@sign,c
  2927  00E9D0  AE0A               	btfss	___awdiv@divisor+1,7,c
  2928  00E9D2  D007               	goto	l1829
  2929  00E9D4  6C09               	negf	___awdiv@divisor,c
  2930  00E9D6  1E0A               	comf	___awdiv@divisor+1,f,c
  2931  00E9D8  B0D8               	btfsc	status,0,c
  2932  00E9DA  2A0A               	incf	___awdiv@divisor+1,f,c
  2933  00E9DC  0E01               	movlw	1
  2934  00E9DE  6E0C               	movwf	___awdiv@sign,c
  2935  00E9E0  D000               	goto	l1829
  2936  00E9E2                     l1829:
  2937  00E9E2  AE08               	btfss	___awdiv@dividend+1,7,c
  2938  00E9E4  D007               	goto	l1835
  2939  00E9E6  6C07               	negf	___awdiv@dividend,c
  2940  00E9E8  1E08               	comf	___awdiv@dividend+1,f,c
  2941  00E9EA  B0D8               	btfsc	status,0,c
  2942  00E9EC  2A08               	incf	___awdiv@dividend+1,f,c
  2943  00E9EE  0E01               	movlw	1
  2944  00E9F0  1A0C               	xorwf	___awdiv@sign,f,c
  2945  00E9F2  D000               	goto	l1835
  2946  00E9F4                     l1835:
  2947  00E9F4  0E00               	movlw	0
  2948  00E9F6  6E0E               	movwf	___awdiv@quotient+1,c
  2949  00E9F8  0E00               	movlw	0
  2950  00E9FA  6E0D               	movwf	___awdiv@quotient,c
  2951  00E9FC  5009               	movf	___awdiv@divisor,w,c
  2952  00E9FE  100A               	iorwf	___awdiv@divisor+1,w,c
  2953  00EA00  B4D8               	btfsc	status,2,c
  2954  00EA02  D021               	goto	l1857
  2955  00EA04  0E01               	movlw	1
  2956  00EA06  6E0B               	movwf	___awdiv@counter,c
  2957  00EA08  D005               	goto	l1843
  2958  00EA0A                     l1841:
  2959  00EA0A  90D8               	bcf	status,0,c
  2960  00EA0C  3609               	rlcf	___awdiv@divisor,f,c
  2961  00EA0E  360A               	rlcf	___awdiv@divisor+1,f,c
  2962  00EA10  2A0B               	incf	___awdiv@counter,f,c
  2963  00EA12  D000               	goto	l1843
  2964  00EA14                     l1843:
  2965  00EA14  BE0A               	btfsc	___awdiv@divisor+1,7,c
  2966  00EA16  D002               	goto	l1845
  2967  00EA18  D7F8               	goto	l1841
  2968  00EA1A  D000               	goto	l1845
  2969  00EA1C                     l1845:
  2970  00EA1C  90D8               	bcf	status,0,c
  2971  00EA1E  360D               	rlcf	___awdiv@quotient,f,c
  2972  00EA20  360E               	rlcf	___awdiv@quotient+1,f,c
  2973  00EA22  5009               	movf	___awdiv@divisor,w,c
  2974  00EA24  5C07               	subwf	___awdiv@dividend,w,c
  2975  00EA26  500A               	movf	___awdiv@divisor+1,w,c
  2976  00EA28  5808               	subwfb	___awdiv@dividend+1,w,c
  2977  00EA2A  A0D8               	btfss	status,0,c
  2978  00EA2C  D006               	goto	l1853
  2979  00EA2E  5009               	movf	___awdiv@divisor,w,c
  2980  00EA30  5E07               	subwf	___awdiv@dividend,f,c
  2981  00EA32  500A               	movf	___awdiv@divisor+1,w,c
  2982  00EA34  5A08               	subwfb	___awdiv@dividend+1,f,c
  2983  00EA36  800D               	bsf	___awdiv@quotient,0,c
  2984  00EA38  D000               	goto	l1853
  2985  00EA3A                     l1853:
  2986  00EA3A  90D8               	bcf	status,0,c
  2987  00EA3C  320A               	rrcf	___awdiv@divisor+1,f,c
  2988  00EA3E  3209               	rrcf	___awdiv@divisor,f,c
  2989  00EA40  2E0B               	decfsz	___awdiv@counter,f,c
  2990  00EA42  D7EC               	goto	l1845
  2991  00EA44  D000               	goto	l1857
  2992  00EA46                     l1857:
  2993  00EA46  500C               	movf	___awdiv@sign,w,c
  2994  00EA48  B4D8               	btfsc	status,2,c
  2995  00EA4A  D005               	goto	l1861
  2996  00EA4C  6C0D               	negf	___awdiv@quotient,c
  2997  00EA4E  1E0E               	comf	___awdiv@quotient+1,f,c
  2998  00EA50  B0D8               	btfsc	status,0,c
  2999  00EA52  2A0E               	incf	___awdiv@quotient+1,f,c
  3000  00EA54  D000               	goto	l1861
  3001  00EA56                     l1861:
  3002  00EA56  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3003  00EA5A  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3004  00EA5E  D000               	goto	l361
  3005  00EA60                     l361:
  3006  00EA60  0012               	return		;funcret
  3007  00EA62                     __end_of___awdiv:
  3008                           	opt stack 0
  3009                           tblptru	equ	0xFF8
  3010                           tblptrh	equ	0xFF7
  3011                           tblptrl	equ	0xFF6
  3012                           tablat	equ	0xFF5
  3013                           prodh	equ	0xFF4
  3014                           prodl	equ	0xFF3
  3015                           wreg	equ	0xFE8
  3016                           postinc2	equ	0xFDE
  3017                           postdec2	equ	0xFDD
  3018                           fsr2h	equ	0xFDA
  3019                           fsr2l	equ	0xFD9
  3020                           status	equ	0xFD8
  3021                           
  3022 ;; *************** function __tdiv_to_l_ *****************
  3023 ;; Defined at:
  3024 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;  f1              3    0[COMRAM] float 
  3027 ;;  f2              3    3[COMRAM] float 
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;  quot            4    9[COMRAM] unsigned long 
  3030 ;;  exp1            1   14[COMRAM] unsigned char 
  3031 ;;  cntr            1   13[COMRAM] unsigned char 
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  4    0[COMRAM] unsigned long 
  3034 ;; Registers used:
  3035 ;;		wreg, status,2, status,0
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3041 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3042 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3043 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;Total ram usage:       15 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; This function calls:
  3048 ;;		Nothing
  3049 ;; This function is called by:
  3050 ;;		_printf
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           	psect	text8
  3055  00EFE0                     __ptext8:
  3056                           	opt stack 0
  3057  00EFE0                     __tdiv_to_l_:
  3058                           	opt stack 29
  3059                           
  3060                           ;incstack = 0
  3061  00EFE0  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3062  00EFE4  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3063  00EFE6  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3064  00EFE8  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3065  00EFEA  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3066  00EFEC  E301               	bnc	u2011
  3067  00EFEE  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3068  00EFF0                     u2011:
  3069  00EFF0  5007               	movf	??__tdiv_to_l_,w,c
  3070  00EFF2  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3071  00EFF4  500F               	movf	__tdiv_to_l_@exp1,w,c
  3072  00EFF6  A4D8               	btfss	status,2,c
  3073  00EFF8  D002               	goto	l2029
  3074  00EFFA  D05D               	goto	l2071
  3075  00EFFC  D078               	goto	l573
  3076  00EFFE                     l2029:
  3077  00EFFE  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3078  00F002  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3079  00F004  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3080  00F006  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3081  00F008  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3082  00F00A  E301               	bnc	u2031
  3083  00F00C  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3084  00F00E                     u2031:
  3085  00F00E  5007               	movf	??__tdiv_to_l_,w,c
  3086  00F010  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3087  00F012  500E               	movf	__tdiv_to_l_@cntr,w,c
  3088  00F014  A4D8               	btfss	status,2,c
  3089  00F016  D002               	goto	l2035
  3090  00F018  D04E               	goto	l2071
  3091  00F01A  D069               	goto	l573
  3092  00F01C                     l2035:
  3093  00F01C  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3094  00F01E  0EFF               	movlw	255
  3095  00F020  1601               	andwf	__tdiv_to_l_@f1,f,c
  3096  00F022  0EFF               	movlw	255
  3097  00F024  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3098  00F026  0E00               	movlw	0
  3099  00F028  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3100  00F02A  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3101  00F02C  0EFF               	movlw	255
  3102  00F02E  1604               	andwf	__tdiv_to_l_@f2,f,c
  3103  00F030  0EFF               	movlw	255
  3104  00F032  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3105  00F034  0E00               	movlw	0
  3106  00F036  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3107  00F038  0E00               	movlw	0
  3108  00F03A  6E0A               	movwf	__tdiv_to_l_@quot,c
  3109  00F03C  0E00               	movlw	0
  3110  00F03E  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3111  00F040  0E00               	movlw	0
  3112  00F042  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3113  00F044  0E00               	movlw	0
  3114  00F046  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3115  00F048  0E7F               	movlw	127
  3116  00F04A  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3117  00F04C  500E               	movf	__tdiv_to_l_@cntr,w,c
  3118  00F04E  0F98               	addlw	152
  3119  00F050  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3120  00F052  0E18               	movlw	24
  3121  00F054  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3122  00F056                     l575:
  3123  00F056  90D8               	bcf	status,0,c
  3124  00F058  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3125  00F05A  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3126  00F05C  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3127  00F05E  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3128  00F060  5004               	movf	__tdiv_to_l_@f2,w,c
  3129  00F062  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3130  00F064  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3131  00F066  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3132  00F068  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3133  00F06A  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3134  00F06C  A0D8               	btfss	status,0,c
  3135  00F06E  D007               	goto	l576
  3136  00F070  5004               	movf	__tdiv_to_l_@f2,w,c
  3137  00F072  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3138  00F074  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3139  00F076  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3140  00F078  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3141  00F07A  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3142  00F07C  800A               	bsf	__tdiv_to_l_@quot,0,c
  3143  00F07E                     l576:
  3144  00F07E  90D8               	bcf	status,0,c
  3145  00F080  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3146  00F082  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3147  00F084  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3148  00F086  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3149  00F088  D7E6               	goto	l575
  3150  00F08A  D000               	goto	l2057
  3151  00F08C                     l2057:
  3152  00F08C  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3153  00F08E  D010               	goto	l2069
  3154  00F090  500F               	movf	__tdiv_to_l_@exp1,w,c
  3155  00F092  0A80               	xorlw	128
  3156  00F094  0F97               	addlw	151
  3157  00F096  B0D8               	btfsc	status,0,c
  3158  00F098  D003               	goto	l2065
  3159  00F09A  D00D               	goto	l2071
  3160  00F09C  D028               	goto	l573
  3161  00F09E  D000               	goto	l2065
  3162  00F0A0                     l2065:
  3163  00F0A0  90D8               	bcf	status,0,c
  3164  00F0A2  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3165  00F0A4  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3166  00F0A6  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3167  00F0A8  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3168  00F0AA  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3169  00F0AC  D7F9               	goto	l2065
  3170  00F0AE  D017               	goto	l582
  3171  00F0B0                     l2069:
  3172  00F0B0  0E17               	movlw	23
  3173  00F0B2  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3174  00F0B4  D011               	goto	l2077
  3175  00F0B6                     l2071:
  3176  00F0B6  0E00               	movlw	0
  3177  00F0B8  6E01               	movwf	?__tdiv_to_l_,c
  3178  00F0BA  0E00               	movlw	0
  3179  00F0BC  6E02               	movwf	?__tdiv_to_l_+1,c
  3180  00F0BE  0E00               	movlw	0
  3181  00F0C0  6E03               	movwf	?__tdiv_to_l_+2,c
  3182  00F0C2  0E00               	movlw	0
  3183  00F0C4  6E04               	movwf	?__tdiv_to_l_+3,c
  3184  00F0C6  D013               	goto	l573
  3185  00F0C8  D007               	goto	l2077
  3186  00F0CA                     l2075:
  3187  00F0CA  90D8               	bcf	status,0,c
  3188  00F0CC  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3189  00F0CE  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3190  00F0D0  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3191  00F0D2  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3192  00F0D4  060F               	decf	__tdiv_to_l_@exp1,f,c
  3193  00F0D6  D000               	goto	l2077
  3194  00F0D8                     l2077:
  3195  00F0D8  500F               	movf	__tdiv_to_l_@exp1,w,c
  3196  00F0DA  A4D8               	btfss	status,2,c
  3197  00F0DC  D7F6               	goto	l2075
  3198  00F0DE                     l582:
  3199  00F0DE  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3200  00F0E2  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3201  00F0E6  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3202  00F0EA  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3203  00F0EE                     l573:
  3204  00F0EE  0012               	return		;funcret
  3205  00F0F0                     __end_of__tdiv_to_l_:
  3206                           	opt stack 0
  3207                           tblptru	equ	0xFF8
  3208                           tblptrh	equ	0xFF7
  3209                           tblptrl	equ	0xFF6
  3210                           tablat	equ	0xFF5
  3211                           prodh	equ	0xFF4
  3212                           prodl	equ	0xFF3
  3213                           wreg	equ	0xFE8
  3214                           postinc2	equ	0xFDE
  3215                           postdec2	equ	0xFDD
  3216                           fsr2h	equ	0xFDA
  3217                           fsr2l	equ	0xFD9
  3218                           status	equ	0xFD8
  3219                           
  3220 ;; *************** function __div_to_l_ *****************
  3221 ;; Defined at:
  3222 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fldivl.c"
  3223 ;; Parameters:    Size  Location     Type
  3224 ;;  f1              3    0[COMRAM] unsigned long 
  3225 ;;  f2              3    3[COMRAM] unsigned long 
  3226 ;; Auto vars:     Size  Location     Type
  3227 ;;  quot            4    6[COMRAM] unsigned long 
  3228 ;;  exp1            1   11[COMRAM] unsigned char 
  3229 ;;  cntr            1   10[COMRAM] unsigned char 
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  4    0[COMRAM] unsigned long 
  3232 ;; Registers used:
  3233 ;;		wreg, status,2, status,0
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3239 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3240 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;Total ram usage:       12 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; This function calls:
  3246 ;;		Nothing
  3247 ;; This function is called by:
  3248 ;;		_printf
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           	psect	text9
  3253  00EED6                     __ptext9:
  3254                           	opt stack 0
  3255  00EED6                     __div_to_l_:
  3256                           	opt stack 29
  3257                           
  3258                           ;incstack = 0
  3259  00EED6  3403               	rlcf	__div_to_l_@f1+2,w,c
  3260  00EED8  3404               	rlcf	__div_to_l_@f1+3,w,c
  3261  00EEDA  6E0C               	movwf	__div_to_l_@exp1,c
  3262  00EEDC  500C               	movf	__div_to_l_@exp1,w,c
  3263  00EEDE  A4D8               	btfss	status,2,c
  3264  00EEE0  D002               	goto	l2085
  3265  00EEE2  D061               	goto	l2131
  3266  00EEE4  D07C               	goto	l452
  3267  00EEE6                     l2085:
  3268  00EEE6  3406               	rlcf	__div_to_l_@f2+2,w,c
  3269  00EEE8  3407               	rlcf	__div_to_l_@f2+3,w,c
  3270  00EEEA  6E0B               	movwf	__div_to_l_@cntr,c
  3271  00EEEC  500B               	movf	__div_to_l_@cntr,w,c
  3272  00EEEE  A4D8               	btfss	status,2,c
  3273  00EEF0  D002               	goto	l2091
  3274  00EEF2  D059               	goto	l2131
  3275  00EEF4  D074               	goto	l452
  3276  00EEF6                     l2091:
  3277  00EEF6  8E03               	bsf	__div_to_l_@f1+2,7,c
  3278  00EEF8  0EFF               	movlw	255
  3279  00EEFA  1601               	andwf	__div_to_l_@f1,f,c
  3280  00EEFC  0EFF               	movlw	255
  3281  00EEFE  1602               	andwf	__div_to_l_@f1+1,f,c
  3282  00EF00  0EFF               	movlw	255
  3283  00EF02  1603               	andwf	__div_to_l_@f1+2,f,c
  3284  00EF04  0E00               	movlw	0
  3285  00EF06  1604               	andwf	__div_to_l_@f1+3,f,c
  3286  00EF08  8E06               	bsf	__div_to_l_@f2+2,7,c
  3287  00EF0A  0EFF               	movlw	255
  3288  00EF0C  1604               	andwf	__div_to_l_@f2,f,c
  3289  00EF0E  0EFF               	movlw	255
  3290  00EF10  1605               	andwf	__div_to_l_@f2+1,f,c
  3291  00EF12  0EFF               	movlw	255
  3292  00EF14  1606               	andwf	__div_to_l_@f2+2,f,c
  3293  00EF16  0E00               	movlw	0
  3294  00EF18  1607               	andwf	__div_to_l_@f2+3,f,c
  3295  00EF1A  0E00               	movlw	0
  3296  00EF1C  6E07               	movwf	__div_to_l_@quot,c
  3297  00EF1E  0E00               	movlw	0
  3298  00EF20  6E08               	movwf	__div_to_l_@quot+1,c
  3299  00EF22  0E00               	movlw	0
  3300  00EF24  6E09               	movwf	__div_to_l_@quot+2,c
  3301  00EF26  0E00               	movlw	0
  3302  00EF28  6E0A               	movwf	__div_to_l_@quot+3,c
  3303  00EF2A  0E7F               	movlw	127
  3304  00EF2C  5E0C               	subwf	__div_to_l_@exp1,f,c
  3305  00EF2E  500B               	movf	__div_to_l_@cntr,w,c
  3306  00EF30  0FA0               	addlw	160
  3307  00EF32  5E0C               	subwf	__div_to_l_@exp1,f,c
  3308  00EF34  0E20               	movlw	32
  3309  00EF36  6E0B               	movwf	__div_to_l_@cntr,c
  3310  00EF38  D000               	goto	l2105
  3311  00EF3A                     l2105:
  3312  00EF3A  90D8               	bcf	status,0,c
  3313  00EF3C  3607               	rlcf	__div_to_l_@quot,f,c
  3314  00EF3E  3608               	rlcf	__div_to_l_@quot+1,f,c
  3315  00EF40  3609               	rlcf	__div_to_l_@quot+2,f,c
  3316  00EF42  360A               	rlcf	__div_to_l_@quot+3,f,c
  3317  00EF44  5004               	movf	__div_to_l_@f2,w,c
  3318  00EF46  5C01               	subwf	__div_to_l_@f1,w,c
  3319  00EF48  5005               	movf	__div_to_l_@f2+1,w,c
  3320  00EF4A  5802               	subwfb	__div_to_l_@f1+1,w,c
  3321  00EF4C  5006               	movf	__div_to_l_@f2+2,w,c
  3322  00EF4E  5803               	subwfb	__div_to_l_@f1+2,w,c
  3323  00EF50  5007               	movf	__div_to_l_@f2+3,w,c
  3324  00EF52  5804               	subwfb	__div_to_l_@f1+3,w,c
  3325  00EF54  A0D8               	btfss	status,0,c
  3326  00EF56  D00A               	goto	l2113
  3327  00EF58  5004               	movf	__div_to_l_@f2,w,c
  3328  00EF5A  5E01               	subwf	__div_to_l_@f1,f,c
  3329  00EF5C  5005               	movf	__div_to_l_@f2+1,w,c
  3330  00EF5E  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3331  00EF60  5006               	movf	__div_to_l_@f2+2,w,c
  3332  00EF62  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3333  00EF64  5007               	movf	__div_to_l_@f2+3,w,c
  3334  00EF66  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3335  00EF68  8007               	bsf	__div_to_l_@quot,0,c
  3336  00EF6A  D000               	goto	l2113
  3337  00EF6C                     l2113:
  3338  00EF6C  90D8               	bcf	status,0,c
  3339  00EF6E  3601               	rlcf	__div_to_l_@f1,f,c
  3340  00EF70  3602               	rlcf	__div_to_l_@f1+1,f,c
  3341  00EF72  3603               	rlcf	__div_to_l_@f1+2,f,c
  3342  00EF74  3604               	rlcf	__div_to_l_@f1+3,f,c
  3343  00EF76  2E0B               	decfsz	__div_to_l_@cntr,f,c
  3344  00EF78  D7E0               	goto	l2105
  3345  00EF7A  D000               	goto	l2117
  3346  00EF7C                     l2117:
  3347  00EF7C  AE0C               	btfss	__div_to_l_@exp1,7,c
  3348  00EF7E  D010               	goto	l2129
  3349  00EF80  500C               	movf	__div_to_l_@exp1,w,c
  3350  00EF82  0A80               	xorlw	128
  3351  00EF84  0F9F               	addlw	159
  3352  00EF86  B0D8               	btfsc	status,0,c
  3353  00EF88  D003               	goto	l2125
  3354  00EF8A  D00D               	goto	l2131
  3355  00EF8C  D028               	goto	l452
  3356  00EF8E  D000               	goto	l2125
  3357  00EF90                     l2125:
  3358  00EF90  90D8               	bcf	status,0,c
  3359  00EF92  320A               	rrcf	__div_to_l_@quot+3,f,c
  3360  00EF94  3209               	rrcf	__div_to_l_@quot+2,f,c
  3361  00EF96  3208               	rrcf	__div_to_l_@quot+1,f,c
  3362  00EF98  3207               	rrcf	__div_to_l_@quot,f,c
  3363  00EF9A  3E0C               	incfsz	__div_to_l_@exp1,f,c
  3364  00EF9C  D7F9               	goto	l2125
  3365  00EF9E  D017               	goto	l461
  3366  00EFA0                     l2129:
  3367  00EFA0  0E1F               	movlw	31
  3368  00EFA2  640C               	cpfsgt	__div_to_l_@exp1,c
  3369  00EFA4  D011               	goto	l2137
  3370  00EFA6                     l2131:
  3371  00EFA6  0E00               	movlw	0
  3372  00EFA8  6E01               	movwf	?__div_to_l_,c
  3373  00EFAA  0E00               	movlw	0
  3374  00EFAC  6E02               	movwf	?__div_to_l_+1,c
  3375  00EFAE  0E00               	movlw	0
  3376  00EFB0  6E03               	movwf	?__div_to_l_+2,c
  3377  00EFB2  0E00               	movlw	0
  3378  00EFB4  6E04               	movwf	?__div_to_l_+3,c
  3379  00EFB6  D013               	goto	l452
  3380  00EFB8  D007               	goto	l2137
  3381  00EFBA                     l2135:
  3382  00EFBA  90D8               	bcf	status,0,c
  3383  00EFBC  3607               	rlcf	__div_to_l_@quot,f,c
  3384  00EFBE  3608               	rlcf	__div_to_l_@quot+1,f,c
  3385  00EFC0  3609               	rlcf	__div_to_l_@quot+2,f,c
  3386  00EFC2  360A               	rlcf	__div_to_l_@quot+3,f,c
  3387  00EFC4  060C               	decf	__div_to_l_@exp1,f,c
  3388  00EFC6  D000               	goto	l2137
  3389  00EFC8                     l2137:
  3390  00EFC8  500C               	movf	__div_to_l_@exp1,w,c
  3391  00EFCA  A4D8               	btfss	status,2,c
  3392  00EFCC  D7F6               	goto	l2135
  3393  00EFCE                     l461:
  3394  00EFCE  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  3395  00EFD2  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  3396  00EFD6  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  3397  00EFDA  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  3398  00EFDE                     l452:
  3399  00EFDE  0012               	return		;funcret
  3400  00EFE0                     __end_of__div_to_l_:
  3401                           	opt stack 0
  3402                           tblptru	equ	0xFF8
  3403                           tblptrh	equ	0xFF7
  3404                           tblptrl	equ	0xFF6
  3405                           tablat	equ	0xFF5
  3406                           prodh	equ	0xFF4
  3407                           prodl	equ	0xFF3
  3408                           wreg	equ	0xFE8
  3409                           postinc2	equ	0xFDE
  3410                           postdec2	equ	0xFDD
  3411                           fsr2h	equ	0xFDA
  3412                           fsr2l	equ	0xFD9
  3413                           status	equ	0xFD8
  3414                           
  3415 ;; *************** function ___lltoft *****************
  3416 ;; Defined at:
  3417 ;;		line 35 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lltoft.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;  c               4    8[COMRAM] unsigned long 
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;  exp             1   16[COMRAM] unsigned char 
  3422 ;; Return value:  Size  Location     Type
  3423 ;;                  3    8[COMRAM] float 
  3424 ;; Registers used:
  3425 ;;		wreg, status,2, status,0, cstack
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3431 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3435 ;;Total ram usage:        9 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:    1
  3438 ;; This function calls:
  3439 ;;		___ftpack
  3440 ;; This function is called by:
  3441 ;;		_printf
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           	psect	text10
  3446  00E672                     __ptext10:
  3447                           	opt stack 0
  3448  00E672                     ___lltoft:
  3449                           	opt stack 28
  3450                           
  3451                           ;incstack = 0
  3452  00E672  0E8E               	movlw	142
  3453  00E674  6E11               	movwf	___lltoft@exp,c
  3454  00E676  D007               	goto	l2315
  3455  00E678                     l2313:
  3456  00E678  90D8               	bcf	status,0,c
  3457  00E67A  320C               	rrcf	___lltoft@c+3,f,c
  3458  00E67C  320B               	rrcf	___lltoft@c+2,f,c
  3459  00E67E  320A               	rrcf	___lltoft@c+1,f,c
  3460  00E680  3209               	rrcf	___lltoft@c,f,c
  3461  00E682  2A11               	incf	___lltoft@exp,f,c
  3462  00E684  D000               	goto	l2315
  3463  00E686                     l2315:
  3464  00E686  0E00               	movlw	0
  3465  00E688  1409               	andwf	___lltoft@c,w,c
  3466  00E68A  6E0D               	movwf	??___lltoft& (0+255),c
  3467  00E68C  0E00               	movlw	0
  3468  00E68E  140A               	andwf	___lltoft@c+1,w,c
  3469  00E690  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  3470  00E692  0E00               	movlw	0
  3471  00E694  140B               	andwf	___lltoft@c+2,w,c
  3472  00E696  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  3473  00E698  0EFF               	movlw	255
  3474  00E69A  140C               	andwf	___lltoft@c+3,w,c
  3475  00E69C  6E10               	movwf	(??___lltoft+3)& (0+255),c
  3476  00E69E  500D               	movf	??___lltoft,w,c
  3477  00E6A0  100E               	iorwf	??___lltoft+1,w,c
  3478  00E6A2  100F               	iorwf	??___lltoft+2,w,c
  3479  00E6A4  1010               	iorwf	??___lltoft+3,w,c
  3480  00E6A6  A4D8               	btfss	status,2,c
  3481  00E6A8  D7E7               	goto	l2313
  3482  00E6AA  C009  F001         	movff	___lltoft@c,___ftpack@arg
  3483  00E6AE  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  3484  00E6B2  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  3485  00E6B6  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  3486  00E6BA  0E00               	movlw	0
  3487  00E6BC  6E05               	movwf	___ftpack@sign,c
  3488  00E6BE  EC31  F075         	call	___ftpack	;wreg free
  3489  00E6C2  C001  F009         	movff	?___ftpack,?___lltoft
  3490  00E6C6  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  3491  00E6CA  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  3492  00E6CE  D000               	goto	l687
  3493  00E6D0                     l687:
  3494  00E6D0  0012               	return		;funcret
  3495  00E6D2                     __end_of___lltoft:
  3496                           	opt stack 0
  3497                           tblptru	equ	0xFF8
  3498                           tblptrh	equ	0xFF7
  3499                           tblptrl	equ	0xFF6
  3500                           tablat	equ	0xFF5
  3501                           prodh	equ	0xFF4
  3502                           prodl	equ	0xFF3
  3503                           wreg	equ	0xFE8
  3504                           postinc2	equ	0xFDE
  3505                           postdec2	equ	0xFDD
  3506                           fsr2h	equ	0xFDA
  3507                           fsr2l	equ	0xFD9
  3508                           status	equ	0xFD8
  3509                           
  3510 ;; *************** function ___llmod *****************
  3511 ;; Defined at:
  3512 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\llmod.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;  dividend        4    0[COMRAM] unsigned long 
  3515 ;;  divisor         4    4[COMRAM] unsigned long 
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  counter         1    8[COMRAM] unsigned char 
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  4    0[COMRAM] unsigned long 
  3520 ;; Registers used:
  3521 ;;		wreg, status,2, status,0
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3527 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3530 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3531 ;;Total ram usage:        9 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; This function calls:
  3534 ;;		Nothing
  3535 ;; This function is called by:
  3536 ;;		_printf
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           	psect	text11
  3541  00E742                     __ptext11:
  3542                           	opt stack 0
  3543  00E742                     ___llmod:
  3544                           	opt stack 29
  3545                           
  3546                           ;incstack = 0
  3547  00E742  5005               	movf	___llmod@divisor,w,c
  3548  00E744  1006               	iorwf	___llmod@divisor+1,w,c
  3549  00E746  1007               	iorwf	___llmod@divisor+2,w,c
  3550  00E748  1008               	iorwf	___llmod@divisor+3,w,c
  3551  00E74A  B4D8               	btfsc	status,2,c
  3552  00E74C  D029               	goto	l667
  3553  00E74E  0E01               	movlw	1
  3554  00E750  6E09               	movwf	___llmod@counter,c
  3555  00E752  D007               	goto	l2301
  3556  00E754                     l2299:
  3557  00E754  90D8               	bcf	status,0,c
  3558  00E756  3605               	rlcf	___llmod@divisor,f,c
  3559  00E758  3606               	rlcf	___llmod@divisor+1,f,c
  3560  00E75A  3607               	rlcf	___llmod@divisor+2,f,c
  3561  00E75C  3608               	rlcf	___llmod@divisor+3,f,c
  3562  00E75E  2A09               	incf	___llmod@counter,f,c
  3563  00E760  D000               	goto	l2301
  3564  00E762                     l2301:
  3565  00E762  BE08               	btfsc	___llmod@divisor+3,7,c
  3566  00E764  D002               	goto	l2303
  3567  00E766  D7F6               	goto	l2299
  3568  00E768  D000               	goto	l2303
  3569  00E76A                     l2303:
  3570  00E76A  5005               	movf	___llmod@divisor,w,c
  3571  00E76C  5C01               	subwf	___llmod@dividend,w,c
  3572  00E76E  5006               	movf	___llmod@divisor+1,w,c
  3573  00E770  5802               	subwfb	___llmod@dividend+1,w,c
  3574  00E772  5007               	movf	___llmod@divisor+2,w,c
  3575  00E774  5803               	subwfb	___llmod@dividend+2,w,c
  3576  00E776  5008               	movf	___llmod@divisor+3,w,c
  3577  00E778  5804               	subwfb	___llmod@dividend+3,w,c
  3578  00E77A  A0D8               	btfss	status,0,c
  3579  00E77C  D009               	goto	l2307
  3580  00E77E  5005               	movf	___llmod@divisor,w,c
  3581  00E780  5E01               	subwf	___llmod@dividend,f,c
  3582  00E782  5006               	movf	___llmod@divisor+1,w,c
  3583  00E784  5A02               	subwfb	___llmod@dividend+1,f,c
  3584  00E786  5007               	movf	___llmod@divisor+2,w,c
  3585  00E788  5A03               	subwfb	___llmod@dividend+2,f,c
  3586  00E78A  5008               	movf	___llmod@divisor+3,w,c
  3587  00E78C  5A04               	subwfb	___llmod@dividend+3,f,c
  3588  00E78E  D000               	goto	l2307
  3589  00E790                     l2307:
  3590  00E790  90D8               	bcf	status,0,c
  3591  00E792  3208               	rrcf	___llmod@divisor+3,f,c
  3592  00E794  3207               	rrcf	___llmod@divisor+2,f,c
  3593  00E796  3206               	rrcf	___llmod@divisor+1,f,c
  3594  00E798  3205               	rrcf	___llmod@divisor,f,c
  3595  00E79A  2E09               	decfsz	___llmod@counter,f,c
  3596  00E79C  D7E6               	goto	l2303
  3597  00E79E  D000               	goto	l667
  3598  00E7A0                     l667:
  3599  00E7A0  C001  F001         	movff	___llmod@dividend,?___llmod
  3600  00E7A4  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  3601  00E7A8  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  3602  00E7AC  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  3603  00E7B0  0012               	return		;funcret
  3604  00E7B2                     __end_of___llmod:
  3605                           	opt stack 0
  3606                           tblptru	equ	0xFF8
  3607                           tblptrh	equ	0xFF7
  3608                           tblptrl	equ	0xFF6
  3609                           tablat	equ	0xFF5
  3610                           prodh	equ	0xFF4
  3611                           prodl	equ	0xFF3
  3612                           wreg	equ	0xFE8
  3613                           postinc2	equ	0xFDE
  3614                           postdec2	equ	0xFDD
  3615                           fsr2h	equ	0xFDA
  3616                           fsr2l	equ	0xFD9
  3617                           status	equ	0xFD8
  3618                           
  3619 ;; *************** function ___lldiv *****************
  3620 ;; Defined at:
  3621 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lldiv.c"
  3622 ;; Parameters:    Size  Location     Type
  3623 ;;  dividend        4    0[COMRAM] unsigned long 
  3624 ;;  divisor         4    4[COMRAM] unsigned long 
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;  quotient        4    8[COMRAM] unsigned long 
  3627 ;;  counter         1   12[COMRAM] unsigned char 
  3628 ;; Return value:  Size  Location     Type
  3629 ;;                  4    0[COMRAM] unsigned long 
  3630 ;; Registers used:
  3631 ;;		wreg, status,2, status,0
  3632 ;; Tracked objects:
  3633 ;;		On entry : 0/0
  3634 ;;		On exit  : 0/0
  3635 ;;		Unchanged: 0/0
  3636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3637 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3638 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3640 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3641 ;;Total ram usage:       13 bytes
  3642 ;; Hardware stack levels used:    1
  3643 ;; This function calls:
  3644 ;;		Nothing
  3645 ;; This function is called by:
  3646 ;;		_printf
  3647 ;; This function uses a non-reentrant model
  3648 ;;
  3649                           
  3650                           	psect	text12
  3651  00E8AA                     __ptext12:
  3652                           	opt stack 0
  3653  00E8AA                     ___lldiv:
  3654                           	opt stack 29
  3655                           
  3656                           ;incstack = 0
  3657  00E8AA  0E00               	movlw	0
  3658  00E8AC  6E09               	movwf	___lldiv@quotient,c
  3659  00E8AE  0E00               	movlw	0
  3660  00E8B0  6E0A               	movwf	___lldiv@quotient+1,c
  3661  00E8B2  0E00               	movlw	0
  3662  00E8B4  6E0B               	movwf	___lldiv@quotient+2,c
  3663  00E8B6  0E00               	movlw	0
  3664  00E8B8  6E0C               	movwf	___lldiv@quotient+3,c
  3665  00E8BA  5005               	movf	___lldiv@divisor,w,c
  3666  00E8BC  1006               	iorwf	___lldiv@divisor+1,w,c
  3667  00E8BE  1007               	iorwf	___lldiv@divisor+2,w,c
  3668  00E8C0  1008               	iorwf	___lldiv@divisor+3,w,c
  3669  00E8C2  B4D8               	btfsc	status,2,c
  3670  00E8C4  D02F               	goto	l657
  3671  00E8C6  0E01               	movlw	1
  3672  00E8C8  6E0D               	movwf	___lldiv@counter,c
  3673  00E8CA  D007               	goto	l2281
  3674  00E8CC                     l2279:
  3675  00E8CC  90D8               	bcf	status,0,c
  3676  00E8CE  3605               	rlcf	___lldiv@divisor,f,c
  3677  00E8D0  3606               	rlcf	___lldiv@divisor+1,f,c
  3678  00E8D2  3607               	rlcf	___lldiv@divisor+2,f,c
  3679  00E8D4  3608               	rlcf	___lldiv@divisor+3,f,c
  3680  00E8D6  2A0D               	incf	___lldiv@counter,f,c
  3681  00E8D8  D000               	goto	l2281
  3682  00E8DA                     l2281:
  3683  00E8DA  BE08               	btfsc	___lldiv@divisor+3,7,c
  3684  00E8DC  D002               	goto	l2283
  3685  00E8DE  D7F6               	goto	l2279
  3686  00E8E0  D000               	goto	l2283
  3687  00E8E2                     l2283:
  3688  00E8E2  90D8               	bcf	status,0,c
  3689  00E8E4  3609               	rlcf	___lldiv@quotient,f,c
  3690  00E8E6  360A               	rlcf	___lldiv@quotient+1,f,c
  3691  00E8E8  360B               	rlcf	___lldiv@quotient+2,f,c
  3692  00E8EA  360C               	rlcf	___lldiv@quotient+3,f,c
  3693  00E8EC  5005               	movf	___lldiv@divisor,w,c
  3694  00E8EE  5C01               	subwf	___lldiv@dividend,w,c
  3695  00E8F0  5006               	movf	___lldiv@divisor+1,w,c
  3696  00E8F2  5802               	subwfb	___lldiv@dividend+1,w,c
  3697  00E8F4  5007               	movf	___lldiv@divisor+2,w,c
  3698  00E8F6  5803               	subwfb	___lldiv@dividend+2,w,c
  3699  00E8F8  5008               	movf	___lldiv@divisor+3,w,c
  3700  00E8FA  5804               	subwfb	___lldiv@dividend+3,w,c
  3701  00E8FC  A0D8               	btfss	status,0,c
  3702  00E8FE  D00A               	goto	l2291
  3703  00E900  5005               	movf	___lldiv@divisor,w,c
  3704  00E902  5E01               	subwf	___lldiv@dividend,f,c
  3705  00E904  5006               	movf	___lldiv@divisor+1,w,c
  3706  00E906  5A02               	subwfb	___lldiv@dividend+1,f,c
  3707  00E908  5007               	movf	___lldiv@divisor+2,w,c
  3708  00E90A  5A03               	subwfb	___lldiv@dividend+2,f,c
  3709  00E90C  5008               	movf	___lldiv@divisor+3,w,c
  3710  00E90E  5A04               	subwfb	___lldiv@dividend+3,f,c
  3711  00E910  8009               	bsf	___lldiv@quotient,0,c
  3712  00E912  D000               	goto	l2291
  3713  00E914                     l2291:
  3714  00E914  90D8               	bcf	status,0,c
  3715  00E916  3208               	rrcf	___lldiv@divisor+3,f,c
  3716  00E918  3207               	rrcf	___lldiv@divisor+2,f,c
  3717  00E91A  3206               	rrcf	___lldiv@divisor+1,f,c
  3718  00E91C  3205               	rrcf	___lldiv@divisor,f,c
  3719  00E91E  2E0D               	decfsz	___lldiv@counter,f,c
  3720  00E920  D7E0               	goto	l2283
  3721  00E922  D000               	goto	l657
  3722  00E924                     l657:
  3723  00E924  C009  F001         	movff	___lldiv@quotient,?___lldiv
  3724  00E928  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3725  00E92C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3726  00E930  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3727  00E934  0012               	return		;funcret
  3728  00E936                     __end_of___lldiv:
  3729                           	opt stack 0
  3730                           tblptru	equ	0xFF8
  3731                           tblptrh	equ	0xFF7
  3732                           tblptrl	equ	0xFF6
  3733                           tablat	equ	0xFF5
  3734                           prodh	equ	0xFF4
  3735                           prodl	equ	0xFF3
  3736                           wreg	equ	0xFE8
  3737                           postinc2	equ	0xFDE
  3738                           postdec2	equ	0xFDD
  3739                           fsr2h	equ	0xFDA
  3740                           fsr2l	equ	0xFD9
  3741                           status	equ	0xFD8
  3742                           
  3743 ;; *************** function ___fttol *****************
  3744 ;; Defined at:
  3745 ;;		line 44 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fttol.c"
  3746 ;; Parameters:    Size  Location     Type
  3747 ;;  f1              3   49[COMRAM] float 
  3748 ;; Auto vars:     Size  Location     Type
  3749 ;;  lval            4   59[COMRAM] unsigned long 
  3750 ;;  exp1            1   63[COMRAM] unsigned char 
  3751 ;;  sign1           1   58[COMRAM] unsigned char 
  3752 ;; Return value:  Size  Location     Type
  3753 ;;                  4   49[COMRAM] long 
  3754 ;; Registers used:
  3755 ;;		wreg, status,2, status,0
  3756 ;; Tracked objects:
  3757 ;;		On entry : 0/0
  3758 ;;		On exit  : 0/0
  3759 ;;		Unchanged: 0/0
  3760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3761 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3762 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3763 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;Total ram usage:       15 bytes
  3766 ;; Hardware stack levels used:    1
  3767 ;; This function calls:
  3768 ;;		Nothing
  3769 ;; This function is called by:
  3770 ;;		_printf
  3771 ;; This function uses a non-reentrant model
  3772 ;;
  3773                           
  3774                           	psect	text13
  3775  00EC0A                     __ptext13:
  3776                           	opt stack 0
  3777  00EC0A                     ___fttol:
  3778                           	opt stack 29
  3779                           
  3780                           ;incstack = 0
  3781  00EC0A  C034  F036         	movff	___fttol@f1+2,??___fttol
  3782  00EC0E  6A37               	clrf	(??___fttol+1)& (0+255),c
  3783  00EC10  6A38               	clrf	(??___fttol+2)& (0+255),c
  3784  00EC12  3433               	rlcf	___fttol@f1+1,w,c
  3785  00EC14  3636               	rlcf	??___fttol& (0+255),f,c
  3786  00EC16  E301               	bnc	u2281
  3787  00EC18  8037               	bsf	(??___fttol+1)& (0+255),0,c
  3788  00EC1A                     u2281:
  3789  00EC1A  5036               	movf	??___fttol,w,c
  3790  00EC1C  6E40               	movwf	___fttol@exp1,c
  3791  00EC1E  5040               	movf	___fttol@exp1,w,c
  3792  00EC20  A4D8               	btfss	status,2,c
  3793  00EC22  D002               	goto	l2233
  3794  00EC24  D039               	goto	l2257
  3795  00EC26  D063               	goto	l618
  3796  00EC28                     l2233:
  3797  00EC28  0E17               	movlw	23
  3798  00EC2A  6E36               	movwf	??___fttol& (0+255),c
  3799  00EC2C  C032  F037         	movff	___fttol@f1,??___fttol+1
  3800  00EC30  C033  F038         	movff	___fttol@f1+1,??___fttol+2
  3801  00EC34  C034  F039         	movff	___fttol@f1+2,??___fttol+3
  3802  00EC38  2836               	incf	??___fttol,w,c
  3803  00EC3A  6E3A               	movwf	(??___fttol+4)& (0+255),c
  3804  00EC3C  D004               	goto	u2300
  3805  00EC3E                     u2305:
  3806  00EC3E  90D8               	bcf	status,0,c
  3807  00EC40  3239               	rrcf	??___fttol+3,f,c
  3808  00EC42  3238               	rrcf	??___fttol+2,f,c
  3809  00EC44  3237               	rrcf	??___fttol+1,f,c
  3810  00EC46                     u2300:
  3811  00EC46  2E3A               	decfsz	(??___fttol+4)& (0+255),f,c
  3812  00EC48  D7FA               	goto	u2305
  3813  00EC4A  5037               	movf	??___fttol+1,w,c
  3814  00EC4C  6E3B               	movwf	___fttol@sign1,c
  3815  00EC4E  8E33               	bsf	___fttol@f1+1,7,c
  3816  00EC50  0EFF               	movlw	255
  3817  00EC52  1632               	andwf	___fttol@f1,f,c
  3818  00EC54  0EFF               	movlw	255
  3819  00EC56  1633               	andwf	___fttol@f1+1,f,c
  3820  00EC58  0E00               	movlw	0
  3821  00EC5A  1634               	andwf	___fttol@f1+2,f,c
  3822  00EC5C  5032               	movf	___fttol@f1,w,c
  3823  00EC5E  6E3C               	movwf	___fttol@lval,c
  3824  00EC60  5033               	movf	___fttol@f1+1,w,c
  3825  00EC62  6E3D               	movwf	___fttol@lval+1,c
  3826  00EC64  5034               	movf	___fttol@f1+2,w,c
  3827  00EC66  6E3E               	movwf	___fttol@lval+2,c
  3828  00EC68  6A3F               	clrf	___fttol@lval+3,c
  3829  00EC6A  0E8E               	movlw	142
  3830  00EC6C  5E40               	subwf	___fttol@exp1,f,c
  3831  00EC6E  AE40               	btfss	___fttol@exp1,7,c
  3832  00EC70  D010               	goto	l2255
  3833  00EC72  5040               	movf	___fttol@exp1,w,c
  3834  00EC74  0A80               	xorlw	128
  3835  00EC76  0F8F               	addlw	143
  3836  00EC78  B0D8               	btfsc	status,0,c
  3837  00EC7A  D003               	goto	l2251
  3838  00EC7C  D00D               	goto	l2257
  3839  00EC7E  D037               	goto	l618
  3840  00EC80  D000               	goto	l2251
  3841  00EC82                     l2251:
  3842  00EC82  90D8               	bcf	status,0,c
  3843  00EC84  323F               	rrcf	___fttol@lval+3,f,c
  3844  00EC86  323E               	rrcf	___fttol@lval+2,f,c
  3845  00EC88  323D               	rrcf	___fttol@lval+1,f,c
  3846  00EC8A  323C               	rrcf	___fttol@lval,f,c
  3847  00EC8C  3E40               	incfsz	___fttol@exp1,f,c
  3848  00EC8E  D7F9               	goto	l2251
  3849  00EC90  D019               	goto	l2265
  3850  00EC92                     l2255:
  3851  00EC92  0E17               	movlw	23
  3852  00EC94  6440               	cpfsgt	___fttol@exp1,c
  3853  00EC96  D011               	goto	l2263
  3854  00EC98                     l2257:
  3855  00EC98  0E00               	movlw	0
  3856  00EC9A  6E32               	movwf	?___fttol,c
  3857  00EC9C  0E00               	movlw	0
  3858  00EC9E  6E33               	movwf	?___fttol+1,c
  3859  00ECA0  0E00               	movlw	0
  3860  00ECA2  6E34               	movwf	?___fttol+2,c
  3861  00ECA4  0E00               	movlw	0
  3862  00ECA6  6E35               	movwf	?___fttol+3,c
  3863  00ECA8  D022               	goto	l618
  3864  00ECAA  D007               	goto	l2263
  3865  00ECAC                     l2261:
  3866  00ECAC  90D8               	bcf	status,0,c
  3867  00ECAE  363C               	rlcf	___fttol@lval,f,c
  3868  00ECB0  363D               	rlcf	___fttol@lval+1,f,c
  3869  00ECB2  363E               	rlcf	___fttol@lval+2,f,c
  3870  00ECB4  363F               	rlcf	___fttol@lval+3,f,c
  3871  00ECB6  0640               	decf	___fttol@exp1,f,c
  3872  00ECB8  D000               	goto	l2263
  3873  00ECBA                     l2263:
  3874  00ECBA  5040               	movf	___fttol@exp1,w,c
  3875  00ECBC  B4D8               	btfsc	status,2,c
  3876  00ECBE  D002               	goto	l2265
  3877  00ECC0  D7F5               	goto	l2261
  3878  00ECC2  D000               	goto	l2265
  3879  00ECC4                     l2265:
  3880  00ECC4  503B               	movf	___fttol@sign1,w,c
  3881  00ECC6  B4D8               	btfsc	status,2,c
  3882  00ECC8  D009               	goto	l2269
  3883  00ECCA  1E3F               	comf	___fttol@lval+3,f,c
  3884  00ECCC  1E3E               	comf	___fttol@lval+2,f,c
  3885  00ECCE  1E3D               	comf	___fttol@lval+1,f,c
  3886  00ECD0  6C3C               	negf	___fttol@lval,c
  3887  00ECD2  0E00               	movlw	0
  3888  00ECD4  223D               	addwfc	___fttol@lval+1,f,c
  3889  00ECD6  223E               	addwfc	___fttol@lval+2,f,c
  3890  00ECD8  223F               	addwfc	___fttol@lval+3,f,c
  3891  00ECDA  D000               	goto	l2269
  3892  00ECDC                     l2269:
  3893  00ECDC  C03C  F032         	movff	___fttol@lval,?___fttol
  3894  00ECE0  C03D  F033         	movff	___fttol@lval+1,?___fttol+1
  3895  00ECE4  C03E  F034         	movff	___fttol@lval+2,?___fttol+2
  3896  00ECE8  C03F  F035         	movff	___fttol@lval+3,?___fttol+3
  3897  00ECEC  D000               	goto	l618
  3898  00ECEE                     l618:
  3899  00ECEE  0012               	return		;funcret
  3900  00ECF0                     __end_of___fttol:
  3901                           	opt stack 0
  3902                           tblptru	equ	0xFF8
  3903                           tblptrh	equ	0xFF7
  3904                           tblptrl	equ	0xFF6
  3905                           tablat	equ	0xFF5
  3906                           prodh	equ	0xFF4
  3907                           prodl	equ	0xFF3
  3908                           wreg	equ	0xFE8
  3909                           postinc2	equ	0xFDE
  3910                           postdec2	equ	0xFDD
  3911                           fsr2h	equ	0xFDA
  3912                           fsr2l	equ	0xFD9
  3913                           status	equ	0xFD8
  3914                           
  3915 ;; *************** function ___ftsub *****************
  3916 ;; Defined at:
  3917 ;;		line 20 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftsub.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  f1              3   64[COMRAM] float 
  3920 ;;  f2              3   67[COMRAM] float 
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;		None
  3923 ;; Return value:  Size  Location     Type
  3924 ;;                  3   64[COMRAM] float 
  3925 ;; Registers used:
  3926 ;;		wreg, status,2, status,0, cstack
  3927 ;; Tracked objects:
  3928 ;;		On entry : 0/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3932 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3935 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3936 ;;Total ram usage:        6 bytes
  3937 ;; Hardware stack levels used:    1
  3938 ;; Hardware stack levels required when called:    2
  3939 ;; This function calls:
  3940 ;;		___ftadd
  3941 ;; This function is called by:
  3942 ;;		_printf
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           	psect	text14
  3947  00E62E                     __ptext14:
  3948                           	opt stack 0
  3949  00E62E                     ___ftsub:
  3950                           	opt stack 27
  3951                           
  3952                           ;incstack = 0
  3953  00E62E  5044               	movf	___ftsub@f2,w,c
  3954  00E630  1045               	iorwf	___ftsub@f2+1,w,c
  3955  00E632  1046               	iorwf	___ftsub@f2+2,w,c
  3956  00E634  B4D8               	btfsc	status,2,c
  3957  00E636  D007               	goto	l2189
  3958  00E638  0E00               	movlw	0
  3959  00E63A  1A44               	xorwf	___ftsub@f2,f,c
  3960  00E63C  0E00               	movlw	0
  3961  00E63E  1A45               	xorwf	___ftsub@f2+1,f,c
  3962  00E640  0E80               	movlw	128
  3963  00E642  1A46               	xorwf	___ftsub@f2+2,f,c
  3964  00E644  D000               	goto	l2189
  3965  00E646                     l2189:
  3966  00E646  C041  F035         	movff	___ftsub@f1,___ftadd@f1
  3967  00E64A  C042  F036         	movff	___ftsub@f1+1,___ftadd@f1+1
  3968  00E64E  C043  F037         	movff	___ftsub@f1+2,___ftadd@f1+2
  3969  00E652  C044  F038         	movff	___ftsub@f2,___ftadd@f2
  3970  00E656  C045  F039         	movff	___ftsub@f2+1,___ftadd@f2+1
  3971  00E65A  C046  F03A         	movff	___ftsub@f2+2,___ftadd@f2+2
  3972  00E65E  EC78  F078         	call	___ftadd	;wreg free
  3973  00E662  C035  F041         	movff	?___ftadd,?___ftsub
  3974  00E666  C036  F042         	movff	?___ftadd+1,?___ftsub+1
  3975  00E66A  C037  F043         	movff	?___ftadd+2,?___ftsub+2
  3976  00E66E  D000               	goto	l614
  3977  00E670                     l614:
  3978  00E670  0012               	return		;funcret
  3979  00E672                     __end_of___ftsub:
  3980                           	opt stack 0
  3981                           tblptru	equ	0xFF8
  3982                           tblptrh	equ	0xFF7
  3983                           tblptrl	equ	0xFF6
  3984                           tablat	equ	0xFF5
  3985                           prodh	equ	0xFF4
  3986                           prodl	equ	0xFF3
  3987                           wreg	equ	0xFE8
  3988                           postinc2	equ	0xFDE
  3989                           postdec2	equ	0xFDD
  3990                           fsr2h	equ	0xFDA
  3991                           fsr2l	equ	0xFD9
  3992                           status	equ	0xFD8
  3993                           
  3994 ;; *************** function ___ftadd *****************
  3995 ;; Defined at:
  3996 ;;		line 86 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftadd.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;  f1              3   52[COMRAM] float 
  3999 ;;  f2              3   55[COMRAM] float 
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;  exp1            1   63[COMRAM] unsigned char 
  4002 ;;  exp2            1   62[COMRAM] unsigned char 
  4003 ;;  sign            1   61[COMRAM] unsigned char 
  4004 ;; Return value:  Size  Location     Type
  4005 ;;                  3   52[COMRAM] float 
  4006 ;; Registers used:
  4007 ;;		wreg, status,2, status,0, cstack
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4013 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4014 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4015 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4016 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4017 ;;Total ram usage:       12 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    1
  4020 ;; This function calls:
  4021 ;;		___ftpack
  4022 ;; This function is called by:
  4023 ;;		_printf
  4024 ;;		___ftsub
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           	psect	text15
  4029  00F0F0                     __ptext15:
  4030                           	opt stack 0
  4031  00F0F0                     ___ftadd:
  4032                           	opt stack 27
  4033                           
  4034                           ;incstack = 0
  4035  00F0F0  C037  F03B         	movff	___ftadd@f1+2,??___ftadd
  4036  00F0F4  6A3C               	clrf	(??___ftadd+1)& (0+255),c
  4037  00F0F6  6A3D               	clrf	(??___ftadd+2)& (0+255),c
  4038  00F0F8  3436               	rlcf	___ftadd@f1+1,w,c
  4039  00F0FA  363B               	rlcf	??___ftadd& (0+255),f,c
  4040  00F0FC  E301               	bnc	u1431
  4041  00F0FE  803C               	bsf	(??___ftadd+1)& (0+255),0,c
  4042  00F100                     u1431:
  4043  00F100  503B               	movf	??___ftadd,w,c
  4044  00F102  6E40               	movwf	___ftadd@exp1,c
  4045  00F104  C03A  F03B         	movff	___ftadd@f2+2,??___ftadd
  4046  00F108  6A3C               	clrf	(??___ftadd+1)& (0+255),c
  4047  00F10A  6A3D               	clrf	(??___ftadd+2)& (0+255),c
  4048  00F10C  3439               	rlcf	___ftadd@f2+1,w,c
  4049  00F10E  363B               	rlcf	??___ftadd& (0+255),f,c
  4050  00F110  E301               	bnc	u1441
  4051  00F112  803C               	bsf	(??___ftadd+1)& (0+255),0,c
  4052  00F114                     u1441:
  4053  00F114  503B               	movf	??___ftadd,w,c
  4054  00F116  6E3F               	movwf	___ftadd@exp2,c
  4055  00F118  5040               	movf	___ftadd@exp1,w,c
  4056  00F11A  B4D8               	btfsc	status,2,c
  4057  00F11C  D00B               	goto	l533
  4058  00F11E  503F               	movf	___ftadd@exp2,w,c
  4059  00F120  5C40               	subwf	___ftadd@exp1,w,c
  4060  00F122  B0D8               	btfsc	status,0,c
  4061  00F124  D00E               	goto	l1711
  4062  00F126  5040               	movf	___ftadd@exp1,w,c
  4063  00F128  0800               	sublw	0
  4064  00F12A  243F               	addwf	___ftadd@exp2,w,c
  4065  00F12C  6E3B               	movwf	??___ftadd& (0+255),c
  4066  00F12E  0E18               	movlw	24
  4067  00F130  643B               	cpfsgt	??___ftadd,c
  4068  00F132  D007               	goto	l1711
  4069  00F134                     l533:
  4070  00F134  C038  F035         	movff	___ftadd@f2,?___ftadd
  4071  00F138  C039  F036         	movff	___ftadd@f2+1,?___ftadd+1
  4072  00F13C  C03A  F037         	movff	___ftadd@f2+2,?___ftadd+2
  4073  00F140  D0B8               	goto	l534
  4074  00F142                     l1711:
  4075  00F142  503F               	movf	___ftadd@exp2,w,c
  4076  00F144  B4D8               	btfsc	status,2,c
  4077  00F146  D00B               	goto	l537
  4078  00F148  5040               	movf	___ftadd@exp1,w,c
  4079  00F14A  5C3F               	subwf	___ftadd@exp2,w,c
  4080  00F14C  B0D8               	btfsc	status,0,c
  4081  00F14E  D00E               	goto	l1717
  4082  00F150  503F               	movf	___ftadd@exp2,w,c
  4083  00F152  0800               	sublw	0
  4084  00F154  2440               	addwf	___ftadd@exp1,w,c
  4085  00F156  6E3B               	movwf	??___ftadd& (0+255),c
  4086  00F158  0E18               	movlw	24
  4087  00F15A  643B               	cpfsgt	??___ftadd,c
  4088  00F15C  D007               	goto	l1717
  4089  00F15E                     l537:
  4090  00F15E  C035  F035         	movff	___ftadd@f1,?___ftadd
  4091  00F162  C036  F036         	movff	___ftadd@f1+1,?___ftadd+1
  4092  00F166  C037  F037         	movff	___ftadd@f1+2,?___ftadd+2
  4093  00F16A  D0A3               	goto	l534
  4094  00F16C                     l1717:
  4095  00F16C  0E06               	movlw	6
  4096  00F16E  6E3E               	movwf	___ftadd@sign,c
  4097  00F170  AE37               	btfss	___ftadd@f1+2,7,c
  4098  00F172  D002               	goto	l1723
  4099  00F174  8E3E               	bsf	___ftadd@sign,7,c
  4100  00F176  D000               	goto	l1723
  4101  00F178                     l1723:
  4102  00F178  BE3A               	btfsc	___ftadd@f2+2,7,c
  4103  00F17A  8C3E               	bsf	___ftadd@sign,6,c
  4104  00F17C  8E36               	bsf	___ftadd@f1+1,7,c
  4105  00F17E  0EFF               	movlw	255
  4106  00F180  1635               	andwf	___ftadd@f1,f,c
  4107  00F182  0EFF               	movlw	255
  4108  00F184  1636               	andwf	___ftadd@f1+1,f,c
  4109  00F186  0E00               	movlw	0
  4110  00F188  1637               	andwf	___ftadd@f1+2,f,c
  4111  00F18A  8E39               	bsf	___ftadd@f2+1,7,c
  4112  00F18C  0EFF               	movlw	255
  4113  00F18E  1638               	andwf	___ftadd@f2,f,c
  4114  00F190  0EFF               	movlw	255
  4115  00F192  1639               	andwf	___ftadd@f2+1,f,c
  4116  00F194  0E00               	movlw	0
  4117  00F196  163A               	andwf	___ftadd@f2+2,f,c
  4118  00F198  503F               	movf	___ftadd@exp2,w,c
  4119  00F19A  5C40               	subwf	___ftadd@exp1,w,c
  4120  00F19C  B0D8               	btfsc	status,0,c
  4121  00F19E  D01E               	goto	l1743
  4122  00F1A0                     l1733:
  4123  00F1A0  90D8               	bcf	status,0,c
  4124  00F1A2  3638               	rlcf	___ftadd@f2,f,c
  4125  00F1A4  3639               	rlcf	___ftadd@f2+1,f,c
  4126  00F1A6  363A               	rlcf	___ftadd@f2+2,f,c
  4127  00F1A8  063F               	decf	___ftadd@exp2,f,c
  4128  00F1AA  5040               	movf	___ftadd@exp1,w,c
  4129  00F1AC  183F               	xorwf	___ftadd@exp2,w,c
  4130  00F1AE  B4D8               	btfsc	status,2,c
  4131  00F1B0  D00F               	goto	l1741
  4132  00F1B2  063E               	decf	___ftadd@sign,f,c
  4133  00F1B4  C03E  F03B         	movff	___ftadd@sign,??___ftadd
  4134  00F1B8  0E07               	movlw	7
  4135  00F1BA  163B               	andwf	??___ftadd,f,c
  4136  00F1BC  B4D8               	btfsc	status,2,c
  4137  00F1BE  D008               	goto	l1741
  4138  00F1C0  D7EF               	goto	l1733
  4139  00F1C2  D006               	goto	l1741
  4140  00F1C4                     l1739:
  4141  00F1C4  90D8               	bcf	status,0,c
  4142  00F1C6  3237               	rrcf	___ftadd@f1+2,f,c
  4143  00F1C8  3236               	rrcf	___ftadd@f1+1,f,c
  4144  00F1CA  3235               	rrcf	___ftadd@f1,f,c
  4145  00F1CC  2A40               	incf	___ftadd@exp1,f,c
  4146  00F1CE  D000               	goto	l1741
  4147  00F1D0                     l1741:
  4148  00F1D0  503F               	movf	___ftadd@exp2,w,c
  4149  00F1D2  1840               	xorwf	___ftadd@exp1,w,c
  4150  00F1D4  B4D8               	btfsc	status,2,c
  4151  00F1D6  D024               	goto	l548
  4152  00F1D8  D7F5               	goto	l1739
  4153  00F1DA  D022               	goto	l548
  4154  00F1DC                     l1743:
  4155  00F1DC  5040               	movf	___ftadd@exp1,w,c
  4156  00F1DE  5C3F               	subwf	___ftadd@exp2,w,c
  4157  00F1E0  B0D8               	btfsc	status,0,c
  4158  00F1E2  D01E               	goto	l548
  4159  00F1E4                     l1745:
  4160  00F1E4  90D8               	bcf	status,0,c
  4161  00F1E6  3635               	rlcf	___ftadd@f1,f,c
  4162  00F1E8  3636               	rlcf	___ftadd@f1+1,f,c
  4163  00F1EA  3637               	rlcf	___ftadd@f1+2,f,c
  4164  00F1EC  0640               	decf	___ftadd@exp1,f,c
  4165  00F1EE  5040               	movf	___ftadd@exp1,w,c
  4166  00F1F0  183F               	xorwf	___ftadd@exp2,w,c
  4167  00F1F2  B4D8               	btfsc	status,2,c
  4168  00F1F4  D00F               	goto	l1753
  4169  00F1F6  063E               	decf	___ftadd@sign,f,c
  4170  00F1F8  C03E  F03B         	movff	___ftadd@sign,??___ftadd
  4171  00F1FC  0E07               	movlw	7
  4172  00F1FE  163B               	andwf	??___ftadd,f,c
  4173  00F200  B4D8               	btfsc	status,2,c
  4174  00F202  D008               	goto	l1753
  4175  00F204  D7EF               	goto	l1745
  4176  00F206  D006               	goto	l1753
  4177  00F208                     l1751:
  4178  00F208  90D8               	bcf	status,0,c
  4179  00F20A  323A               	rrcf	___ftadd@f2+2,f,c
  4180  00F20C  3239               	rrcf	___ftadd@f2+1,f,c
  4181  00F20E  3238               	rrcf	___ftadd@f2,f,c
  4182  00F210  2A3F               	incf	___ftadd@exp2,f,c
  4183  00F212  D000               	goto	l1753
  4184  00F214                     l1753:
  4185  00F214  503F               	movf	___ftadd@exp2,w,c
  4186  00F216  1840               	xorwf	___ftadd@exp1,w,c
  4187  00F218  B4D8               	btfsc	status,2,c
  4188  00F21A  D002               	goto	l548
  4189  00F21C  D7F5               	goto	l1751
  4190  00F21E  D000               	goto	l548
  4191  00F220                     l548:
  4192  00F220  AE3E               	btfss	___ftadd@sign,7,c
  4193  00F222  D00C               	goto	l557
  4194  00F224  0EFF               	movlw	255
  4195  00F226  1A35               	xorwf	___ftadd@f1,f,c
  4196  00F228  0EFF               	movlw	255
  4197  00F22A  1A36               	xorwf	___ftadd@f1+1,f,c
  4198  00F22C  0EFF               	movlw	255
  4199  00F22E  1A37               	xorwf	___ftadd@f1+2,f,c
  4200  00F230  0E01               	movlw	1
  4201  00F232  2635               	addwf	___ftadd@f1,f,c
  4202  00F234  0E00               	movlw	0
  4203  00F236  2236               	addwfc	___ftadd@f1+1,f,c
  4204  00F238  0E00               	movlw	0
  4205  00F23A  2237               	addwfc	___ftadd@f1+2,f,c
  4206  00F23C                     l557:
  4207  00F23C  AC3E               	btfss	___ftadd@sign,6,c
  4208  00F23E  D00D               	goto	l1759
  4209  00F240  0EFF               	movlw	255
  4210  00F242  1A38               	xorwf	___ftadd@f2,f,c
  4211  00F244  0EFF               	movlw	255
  4212  00F246  1A39               	xorwf	___ftadd@f2+1,f,c
  4213  00F248  0EFF               	movlw	255
  4214  00F24A  1A3A               	xorwf	___ftadd@f2+2,f,c
  4215  00F24C  0E01               	movlw	1
  4216  00F24E  2638               	addwf	___ftadd@f2,f,c
  4217  00F250  0E00               	movlw	0
  4218  00F252  2239               	addwfc	___ftadd@f2+1,f,c
  4219  00F254  0E00               	movlw	0
  4220  00F256  223A               	addwfc	___ftadd@f2+2,f,c
  4221  00F258  D000               	goto	l1759
  4222  00F25A                     l1759:
  4223  00F25A  0E00               	movlw	0
  4224  00F25C  6E3E               	movwf	___ftadd@sign,c
  4225  00F25E  5035               	movf	___ftadd@f1,w,c
  4226  00F260  2638               	addwf	___ftadd@f2,f,c
  4227  00F262  5036               	movf	___ftadd@f1+1,w,c
  4228  00F264  2239               	addwfc	___ftadd@f2+1,f,c
  4229  00F266  5037               	movf	___ftadd@f1+2,w,c
  4230  00F268  223A               	addwfc	___ftadd@f2+2,f,c
  4231  00F26A  AE3A               	btfss	___ftadd@f2+2,7,c
  4232  00F26C  D00F               	goto	l1769
  4233  00F26E  0EFF               	movlw	255
  4234  00F270  1A38               	xorwf	___ftadd@f2,f,c
  4235  00F272  0EFF               	movlw	255
  4236  00F274  1A39               	xorwf	___ftadd@f2+1,f,c
  4237  00F276  0EFF               	movlw	255
  4238  00F278  1A3A               	xorwf	___ftadd@f2+2,f,c
  4239  00F27A  0E01               	movlw	1
  4240  00F27C  2638               	addwf	___ftadd@f2,f,c
  4241  00F27E  0E00               	movlw	0
  4242  00F280  2239               	addwfc	___ftadd@f2+1,f,c
  4243  00F282  0E00               	movlw	0
  4244  00F284  223A               	addwfc	___ftadd@f2+2,f,c
  4245  00F286  0E01               	movlw	1
  4246  00F288  6E3E               	movwf	___ftadd@sign,c
  4247  00F28A  D000               	goto	l1769
  4248  00F28C                     l1769:
  4249  00F28C  C038  F001         	movff	___ftadd@f2,___ftpack@arg
  4250  00F290  C039  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4251  00F294  C03A  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4252  00F298  C040  F004         	movff	___ftadd@exp1,___ftpack@exp
  4253  00F29C  C03E  F005         	movff	___ftadd@sign,___ftpack@sign
  4254  00F2A0  EC31  F075         	call	___ftpack	;wreg free
  4255  00F2A4  C001  F035         	movff	?___ftpack,?___ftadd
  4256  00F2A8  C002  F036         	movff	?___ftpack+1,?___ftadd+1
  4257  00F2AC  C003  F037         	movff	?___ftpack+2,?___ftadd+2
  4258  00F2B0  D000               	goto	l534
  4259  00F2B2                     l534:
  4260  00F2B2  0012               	return		;funcret
  4261  00F2B4                     __end_of___ftadd:
  4262                           	opt stack 0
  4263                           tblptru	equ	0xFF8
  4264                           tblptrh	equ	0xFF7
  4265                           tblptrl	equ	0xFF6
  4266                           tablat	equ	0xFF5
  4267                           prodh	equ	0xFF4
  4268                           prodl	equ	0xFF3
  4269                           wreg	equ	0xFE8
  4270                           postinc2	equ	0xFDE
  4271                           postdec2	equ	0xFDD
  4272                           fsr2h	equ	0xFDA
  4273                           fsr2l	equ	0xFD9
  4274                           status	equ	0xFD8
  4275                           
  4276 ;; *************** function ___ftneg *****************
  4277 ;; Defined at:
  4278 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftneg.c"
  4279 ;; Parameters:    Size  Location     Type
  4280 ;;  f1              3    0[COMRAM] float 
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;		None
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  3    0[COMRAM] float 
  4285 ;; Registers used:
  4286 ;;		wreg, status,2, status,0
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4292 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4295 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4296 ;;Total ram usage:        3 bytes
  4297 ;; Hardware stack levels used:    1
  4298 ;; This function calls:
  4299 ;;		Nothing
  4300 ;; This function is called by:
  4301 ;;		_printf
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           	psect	text16
  4306  00E580                     __ptext16:
  4307                           	opt stack 0
  4308  00E580                     ___ftneg:
  4309                           	opt stack 29
  4310                           
  4311                           ;incstack = 0
  4312  00E580  5001               	movf	___ftneg@f1,w,c
  4313  00E582  1002               	iorwf	___ftneg@f1+1,w,c
  4314  00E584  1003               	iorwf	___ftneg@f1+2,w,c
  4315  00E586  B4D8               	btfsc	status,2,c
  4316  00E588  D006               	goto	l607
  4317  00E58A  0E00               	movlw	0
  4318  00E58C  1A01               	xorwf	___ftneg@f1,f,c
  4319  00E58E  0E00               	movlw	0
  4320  00E590  1A02               	xorwf	___ftneg@f1+1,f,c
  4321  00E592  0E80               	movlw	128
  4322  00E594  1A03               	xorwf	___ftneg@f1+2,f,c
  4323  00E596                     l607:
  4324  00E596  C001  F001         	movff	___ftneg@f1,?___ftneg
  4325  00E59A  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4326  00E59E  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4327  00E5A2  0012               	return		;funcret
  4328  00E5A4                     __end_of___ftneg:
  4329                           	opt stack 0
  4330                           tblptru	equ	0xFF8
  4331                           tblptrh	equ	0xFF7
  4332                           tblptrl	equ	0xFF6
  4333                           tablat	equ	0xFF5
  4334                           prodh	equ	0xFF4
  4335                           prodl	equ	0xFF3
  4336                           wreg	equ	0xFE8
  4337                           postinc2	equ	0xFDE
  4338                           postdec2	equ	0xFDD
  4339                           fsr2h	equ	0xFDA
  4340                           fsr2l	equ	0xFD9
  4341                           status	equ	0xFD8
  4342                           
  4343 ;; *************** function ___ftge *****************
  4344 ;; Defined at:
  4345 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftge.c"
  4346 ;; Parameters:    Size  Location     Type
  4347 ;;  ff1             3    0[COMRAM] float 
  4348 ;;  ff2             3    3[COMRAM] float 
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;		None
  4351 ;; Return value:  Size  Location     Type
  4352 ;;		None               void
  4353 ;; Registers used:
  4354 ;;		wreg, status,2, status,0
  4355 ;; Tracked objects:
  4356 ;;		On entry : 0/0
  4357 ;;		On exit  : 0/0
  4358 ;;		Unchanged: 0/0
  4359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4360 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4362 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4364 ;;Total ram usage:        9 bytes
  4365 ;; Hardware stack levels used:    1
  4366 ;; This function calls:
  4367 ;;		Nothing
  4368 ;; This function is called by:
  4369 ;;		_printf
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           	psect	text17
  4374  00E936                     __ptext17:
  4375                           	opt stack 0
  4376  00E936                     ___ftge:
  4377                           	opt stack 29
  4378                           
  4379                           ;incstack = 0
  4380  00E936  AE03               	btfss	___ftge@ff1+2,7,c
  4381  00E938  D017               	goto	l2209
  4382  00E93A  C001  F007         	movff	___ftge@ff1,??___ftge
  4383  00E93E  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4384  00E942  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4385  00E946  1E07               	comf	??___ftge,f,c
  4386  00E948  1E08               	comf	??___ftge+1,f,c
  4387  00E94A  1E09               	comf	??___ftge+2,f,c
  4388  00E94C  2A07               	incf	??___ftge,f,c
  4389  00E94E  0E00               	movlw	0
  4390  00E950  2208               	addwfc	??___ftge+1,f,c
  4391  00E952  2209               	addwfc	??___ftge+2,f,c
  4392  00E954  0E00               	movlw	0
  4393  00E956  2407               	addwf	??___ftge,w,c
  4394  00E958  6E01               	movwf	___ftge@ff1,c
  4395  00E95A  0E00               	movlw	0
  4396  00E95C  2008               	addwfc	??___ftge+1,w,c
  4397  00E95E  6E02               	movwf	___ftge@ff1+1,c
  4398  00E960  0E80               	movlw	128
  4399  00E962  2009               	addwfc	??___ftge+2,w,c
  4400  00E964  6E03               	movwf	___ftge@ff1+2,c
  4401  00E966  D000               	goto	l2209
  4402  00E968                     l2209:
  4403  00E968  AE06               	btfss	___ftge@ff2+2,7,c
  4404  00E96A  D017               	goto	l2213
  4405  00E96C  C004  F007         	movff	___ftge@ff2,??___ftge
  4406  00E970  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4407  00E974  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4408  00E978  1E07               	comf	??___ftge,f,c
  4409  00E97A  1E08               	comf	??___ftge+1,f,c
  4410  00E97C  1E09               	comf	??___ftge+2,f,c
  4411  00E97E  2A07               	incf	??___ftge,f,c
  4412  00E980  0E00               	movlw	0
  4413  00E982  2208               	addwfc	??___ftge+1,f,c
  4414  00E984  2209               	addwfc	??___ftge+2,f,c
  4415  00E986  0E00               	movlw	0
  4416  00E988  2407               	addwf	??___ftge,w,c
  4417  00E98A  6E04               	movwf	___ftge@ff2,c
  4418  00E98C  0E00               	movlw	0
  4419  00E98E  2008               	addwfc	??___ftge+1,w,c
  4420  00E990  6E05               	movwf	___ftge@ff2+1,c
  4421  00E992  0E80               	movlw	128
  4422  00E994  2009               	addwfc	??___ftge+2,w,c
  4423  00E996  6E06               	movwf	___ftge@ff2+2,c
  4424  00E998  D000               	goto	l2213
  4425  00E99A                     l2213:
  4426  00E99A  0E00               	movlw	0
  4427  00E99C  1A01               	xorwf	___ftge@ff1,f,c
  4428  00E99E  0E00               	movlw	0
  4429  00E9A0  1A02               	xorwf	___ftge@ff1+1,f,c
  4430  00E9A2  0E80               	movlw	128
  4431  00E9A4  1A03               	xorwf	___ftge@ff1+2,f,c
  4432  00E9A6  0E00               	movlw	0
  4433  00E9A8  1A04               	xorwf	___ftge@ff2,f,c
  4434  00E9AA  0E00               	movlw	0
  4435  00E9AC  1A05               	xorwf	___ftge@ff2+1,f,c
  4436  00E9AE  0E80               	movlw	128
  4437  00E9B0  1A06               	xorwf	___ftge@ff2+2,f,c
  4438  00E9B2  5004               	movf	___ftge@ff2,w,c
  4439  00E9B4  5C01               	subwf	___ftge@ff1,w,c
  4440  00E9B6  5005               	movf	___ftge@ff2+1,w,c
  4441  00E9B8  5802               	subwfb	___ftge@ff1+1,w,c
  4442  00E9BA  5006               	movf	___ftge@ff2+2,w,c
  4443  00E9BC  5803               	subwfb	___ftge@ff1+2,w,c
  4444  00E9BE  B0D8               	btfsc	status,0,c
  4445  00E9C0  D002               	goto	l2219
  4446  00E9C2  90D8               	bcf	status,0,c
  4447  00E9C4  D002               	goto	l591
  4448  00E9C6                     l2219:
  4449  00E9C6  80D8               	bsf	status,0,c
  4450  00E9C8  D000               	goto	l591
  4451  00E9CA                     l591:
  4452  00E9CA  0012               	return		;funcret
  4453  00E9CC                     __end_of___ftge:
  4454                           	opt stack 0
  4455                           tblptru	equ	0xFF8
  4456                           tblptrh	equ	0xFF7
  4457                           tblptrl	equ	0xFF6
  4458                           tablat	equ	0xFF5
  4459                           prodh	equ	0xFF4
  4460                           prodl	equ	0xFF3
  4461                           wreg	equ	0xFE8
  4462                           postinc2	equ	0xFDE
  4463                           postdec2	equ	0xFDD
  4464                           fsr2h	equ	0xFDA
  4465                           fsr2l	equ	0xFD9
  4466                           status	equ	0xFD8
  4467                           
  4468 ;; *************** function _Read_Ch_Volt *****************
  4469 ;; Defined at:
  4470 ;;		line 50 in file "Lab1p3.c"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;  ch_num          1    wreg     unsigned char 
  4473 ;; Auto vars:     Size  Location     Type
  4474 ;;  ch_num          1   50[COMRAM] unsigned char 
  4475 ;;  Volt            3   45[COMRAM] float 
  4476 ;;  ADC_Result      2   48[COMRAM] int 
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  3   42[COMRAM] float 
  4479 ;; Registers used:
  4480 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4486 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4487 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4489 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4490 ;;Total ram usage:        9 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:    2
  4493 ;; This function calls:
  4494 ;;		_Get_Full_ADC
  4495 ;;		___awtoft
  4496 ;;		___ftdiv
  4497 ;;		___ftmul
  4498 ;; This function is called by:
  4499 ;;		_main
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           	psect	text18
  4504  00E7B2                     __ptext18:
  4505                           	opt stack 0
  4506  00E7B2                     _Read_Ch_Volt:
  4507                           	opt stack 28
  4508                           
  4509                           ;incstack = 0
  4510                           ;Read_Ch_Volt@ch_num stored from wreg
  4511  00E7B2  6E33               	movwf	Read_Ch_Volt@ch_num,c
  4512                           
  4513                           ;Lab1p3.c: 52: ADCON0 = ch_num * 0x4 + 1;
  4514  00E7B4  5033               	movf	Read_Ch_Volt@ch_num,w,c
  4515  00E7B6  0D04               	mullw	4
  4516  00E7B8  28F3               	incf	prodl,w,c
  4517  00E7BA  6EC2               	movwf	4034,c	;volatile
  4518                           
  4519                           ;Lab1p3.c: 53: int ADC_Result = Get_Full_ADC();
  4520  00E7BC  ECD2  F072         	call	_Get_Full_ADC	;wreg free
  4521  00E7C0  C001  F031         	movff	?_Get_Full_ADC,Read_Ch_Volt@ADC_Result
  4522  00E7C4  C002  F032         	movff	?_Get_Full_ADC+1,Read_Ch_Volt@ADC_Result+1
  4523                           
  4524                           ;Lab1p3.c: 54: float Volt = ADC_Result / 1024.0 * 5.0;
  4525  00E7C8  0E00               	movlw	0
  4526  00E7CA  6E10               	movwf	___ftdiv@f2,c
  4527  00E7CC  0E80               	movlw	128
  4528  00E7CE  6E11               	movwf	___ftdiv@f2+1,c
  4529  00E7D0  0E44               	movlw	68
  4530  00E7D2  6E12               	movwf	___ftdiv@f2+2,c
  4531  00E7D4  C031  F009         	movff	Read_Ch_Volt@ADC_Result,___awtoft@c
  4532  00E7D8  C032  F00A         	movff	Read_Ch_Volt@ADC_Result+1,___awtoft@c+1
  4533  00E7DC  ECF9  F072         	call	___awtoft	;wreg free
  4534  00E7E0  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  4535  00E7E4  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  4536  00E7E8  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  4537  00E7EC  EC94  F075         	call	___ftdiv	;wreg free
  4538  00E7F0  C00D  F01C         	movff	?___ftdiv,___ftmul@f1
  4539  00E7F4  C00E  F01D         	movff	?___ftdiv+1,___ftmul@f1+1
  4540  00E7F8  C00F  F01E         	movff	?___ftdiv+2,___ftmul@f1+2
  4541  00E7FC  0E00               	movlw	0
  4542  00E7FE  6E1F               	movwf	___ftmul@f2,c
  4543  00E800  0EA0               	movlw	160
  4544  00E802  6E20               	movwf	___ftmul@f2+1,c
  4545  00E804  0E40               	movlw	64
  4546  00E806  6E21               	movwf	___ftmul@f2+2,c
  4547  00E808  ECEF  F076         	call	___ftmul	;wreg free
  4548  00E80C  C01C  F02E         	movff	?___ftmul,Read_Ch_Volt@Volt
  4549  00E810  C01D  F02F         	movff	?___ftmul+1,Read_Ch_Volt@Volt+1
  4550  00E814  C01E  F030         	movff	?___ftmul+2,Read_Ch_Volt@Volt+2
  4551                           
  4552                           ;Lab1p3.c: 55: return (Volt);
  4553  00E818  C02E  F02B         	movff	Read_Ch_Volt@Volt,?_Read_Ch_Volt
  4554  00E81C  C02F  F02C         	movff	Read_Ch_Volt@Volt+1,?_Read_Ch_Volt+1
  4555  00E820  C030  F02D         	movff	Read_Ch_Volt@Volt+2,?_Read_Ch_Volt+2
  4556  00E824  D000               	goto	l43
  4557  00E826                     l43:
  4558  00E826  0012               	return		;funcret
  4559  00E828                     __end_of_Read_Ch_Volt:
  4560                           	opt stack 0
  4561                           tblptru	equ	0xFF8
  4562                           tblptrh	equ	0xFF7
  4563                           tblptrl	equ	0xFF6
  4564                           tablat	equ	0xFF5
  4565                           prodh	equ	0xFF4
  4566                           prodl	equ	0xFF3
  4567                           wreg	equ	0xFE8
  4568                           postinc2	equ	0xFDE
  4569                           postdec2	equ	0xFDD
  4570                           fsr2h	equ	0xFDA
  4571                           fsr2l	equ	0xFD9
  4572                           status	equ	0xFD8
  4573                           
  4574 ;; *************** function ___ftmul *****************
  4575 ;; Defined at:
  4576 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftmul.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;  f1              3   27[COMRAM] float 
  4579 ;;  f2              3   30[COMRAM] float 
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;  f3_as_produc    3   37[COMRAM] unsigned um
  4582 ;;  sign            1   41[COMRAM] unsigned char 
  4583 ;;  cntr            1   40[COMRAM] unsigned char 
  4584 ;;  exp             1   36[COMRAM] unsigned char 
  4585 ;; Return value:  Size  Location     Type
  4586 ;;                  3   27[COMRAM] float 
  4587 ;; Registers used:
  4588 ;;		wreg, status,2, status,0, cstack
  4589 ;; Tracked objects:
  4590 ;;		On entry : 0/0
  4591 ;;		On exit  : 0/0
  4592 ;;		Unchanged: 0/0
  4593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4594 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4595 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;Total ram usage:       15 bytes
  4599 ;; Hardware stack levels used:    1
  4600 ;; Hardware stack levels required when called:    1
  4601 ;; This function calls:
  4602 ;;		___ftpack
  4603 ;; This function is called by:
  4604 ;;		_Read_Ch_Volt
  4605 ;;		_fround
  4606 ;;		_scale
  4607 ;;		_printf
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611                           	psect	text19
  4612  00EDDE                     __ptext19:
  4613                           	opt stack 0
  4614  00EDDE                     ___ftmul:
  4615                           	opt stack 27
  4616                           
  4617                           ;incstack = 0
  4618  00EDDE  C01E  F022         	movff	___ftmul@f1+2,??___ftmul
  4619  00EDE2  6A23               	clrf	(??___ftmul+1)& (0+255),c
  4620  00EDE4  6A24               	clrf	(??___ftmul+2)& (0+255),c
  4621  00EDE6  341D               	rlcf	___ftmul@f1+1,w,c
  4622  00EDE8  3622               	rlcf	??___ftmul& (0+255),f,c
  4623  00EDEA  E301               	bnc	u1641
  4624  00EDEC  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  4625  00EDEE                     u1641:
  4626  00EDEE  5022               	movf	??___ftmul,w,c
  4627  00EDF0  6E25               	movwf	___ftmul@exp,c
  4628  00EDF2  5025               	movf	___ftmul@exp,w,c
  4629  00EDF4  A4D8               	btfss	status,2,c
  4630  00EDF6  D002               	goto	l1779
  4631  00EDF8  D00E               	goto	l1781
  4632  00EDFA  D06C               	goto	l597
  4633  00EDFC                     l1779:
  4634  00EDFC  C021  F022         	movff	___ftmul@f2+2,??___ftmul
  4635  00EE00  6A23               	clrf	(??___ftmul+1)& (0+255),c
  4636  00EE02  6A24               	clrf	(??___ftmul+2)& (0+255),c
  4637  00EE04  3420               	rlcf	___ftmul@f2+1,w,c
  4638  00EE06  3622               	rlcf	??___ftmul& (0+255),f,c
  4639  00EE08  E301               	bnc	u1661
  4640  00EE0A  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  4641  00EE0C                     u1661:
  4642  00EE0C  5022               	movf	??___ftmul,w,c
  4643  00EE0E  6E2A               	movwf	___ftmul@sign,c
  4644  00EE10  502A               	movf	___ftmul@sign,w,c
  4645  00EE12  A4D8               	btfss	status,2,c
  4646  00EE14  D007               	goto	l1785
  4647  00EE16                     l1781:
  4648  00EE16  0E00               	movlw	0
  4649  00EE18  6E1C               	movwf	?___ftmul,c
  4650  00EE1A  0E00               	movlw	0
  4651  00EE1C  6E1D               	movwf	?___ftmul+1,c
  4652  00EE1E  0E00               	movlw	0
  4653  00EE20  6E1E               	movwf	?___ftmul+2,c
  4654  00EE22  D058               	goto	l597
  4655  00EE24                     l1785:
  4656  00EE24  502A               	movf	___ftmul@sign,w,c
  4657  00EE26  0F7B               	addlw	123
  4658  00EE28  2625               	addwf	___ftmul@exp,f,c
  4659  00EE2A  C01E  F02A         	movff	___ftmul@f1+2,___ftmul@sign
  4660  00EE2E  5021               	movf	___ftmul@f2+2,w,c
  4661  00EE30  1A2A               	xorwf	___ftmul@sign,f,c
  4662  00EE32  0E80               	movlw	128
  4663  00EE34  162A               	andwf	___ftmul@sign,f,c
  4664  00EE36  8E1D               	bsf	___ftmul@f1+1,7,c
  4665  00EE38  8E20               	bsf	___ftmul@f2+1,7,c
  4666  00EE3A  0EFF               	movlw	255
  4667  00EE3C  161F               	andwf	___ftmul@f2,f,c
  4668  00EE3E  0EFF               	movlw	255
  4669  00EE40  1620               	andwf	___ftmul@f2+1,f,c
  4670  00EE42  0E00               	movlw	0
  4671  00EE44  1621               	andwf	___ftmul@f2+2,f,c
  4672  00EE46  0E00               	movlw	0
  4673  00EE48  6E26               	movwf	___ftmul@f3_as_product,c
  4674  00EE4A  0E00               	movlw	0
  4675  00EE4C  6E27               	movwf	___ftmul@f3_as_product+1,c
  4676  00EE4E  0E00               	movlw	0
  4677  00EE50  6E28               	movwf	___ftmul@f3_as_product+2,c
  4678  00EE52  0E07               	movlw	7
  4679  00EE54  6E29               	movwf	___ftmul@cntr,c
  4680  00EE56  D000               	goto	l1799
  4681  00EE58                     l1799:
  4682  00EE58  A01C               	btfss	___ftmul@f1,0,c
  4683  00EE5A  D007               	goto	l1803
  4684  00EE5C  501F               	movf	___ftmul@f2,w,c
  4685  00EE5E  2626               	addwf	___ftmul@f3_as_product,f,c
  4686  00EE60  5020               	movf	___ftmul@f2+1,w,c
  4687  00EE62  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  4688  00EE64  5021               	movf	___ftmul@f2+2,w,c
  4689  00EE66  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  4690  00EE68  D000               	goto	l1803
  4691  00EE6A                     l1803:
  4692  00EE6A  90D8               	bcf	status,0,c
  4693  00EE6C  321E               	rrcf	___ftmul@f1+2,f,c
  4694  00EE6E  321D               	rrcf	___ftmul@f1+1,f,c
  4695  00EE70  321C               	rrcf	___ftmul@f1,f,c
  4696  00EE72  90D8               	bcf	status,0,c
  4697  00EE74  361F               	rlcf	___ftmul@f2,f,c
  4698  00EE76  3620               	rlcf	___ftmul@f2+1,f,c
  4699  00EE78  3621               	rlcf	___ftmul@f2+2,f,c
  4700  00EE7A  2E29               	decfsz	___ftmul@cntr,f,c
  4701  00EE7C  D7ED               	goto	l1799
  4702  00EE7E  D000               	goto	l1807
  4703  00EE80                     l1807:
  4704  00EE80  0E09               	movlw	9
  4705  00EE82  6E29               	movwf	___ftmul@cntr,c
  4706  00EE84  D000               	goto	l1809
  4707  00EE86                     l1809:
  4708  00EE86  A01C               	btfss	___ftmul@f1,0,c
  4709  00EE88  D007               	goto	l1813
  4710  00EE8A  501F               	movf	___ftmul@f2,w,c
  4711  00EE8C  2626               	addwf	___ftmul@f3_as_product,f,c
  4712  00EE8E  5020               	movf	___ftmul@f2+1,w,c
  4713  00EE90  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  4714  00EE92  5021               	movf	___ftmul@f2+2,w,c
  4715  00EE94  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  4716  00EE96  D000               	goto	l1813
  4717  00EE98                     l1813:
  4718  00EE98  90D8               	bcf	status,0,c
  4719  00EE9A  321E               	rrcf	___ftmul@f1+2,f,c
  4720  00EE9C  321D               	rrcf	___ftmul@f1+1,f,c
  4721  00EE9E  321C               	rrcf	___ftmul@f1,f,c
  4722  00EEA0  90D8               	bcf	status,0,c
  4723  00EEA2  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  4724  00EEA4  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  4725  00EEA6  3226               	rrcf	___ftmul@f3_as_product,f,c
  4726  00EEA8  2E29               	decfsz	___ftmul@cntr,f,c
  4727  00EEAA  D7ED               	goto	l1809
  4728  00EEAC  D000               	goto	l1817
  4729  00EEAE                     l1817:
  4730  00EEAE  C026  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4731  00EEB2  C027  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4732  00EEB6  C028  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4733  00EEBA  C025  F004         	movff	___ftmul@exp,___ftpack@exp
  4734  00EEBE  C02A  F005         	movff	___ftmul@sign,___ftpack@sign
  4735  00EEC2  EC31  F075         	call	___ftpack	;wreg free
  4736  00EEC6  C001  F01C         	movff	?___ftpack,?___ftmul
  4737  00EECA  C002  F01D         	movff	?___ftpack+1,?___ftmul+1
  4738  00EECE  C003  F01E         	movff	?___ftpack+2,?___ftmul+2
  4739  00EED2  D000               	goto	l597
  4740  00EED4                     l597:
  4741  00EED4  0012               	return		;funcret
  4742  00EED6                     __end_of___ftmul:
  4743                           	opt stack 0
  4744                           tblptru	equ	0xFF8
  4745                           tblptrh	equ	0xFF7
  4746                           tblptrl	equ	0xFF6
  4747                           tablat	equ	0xFF5
  4748                           prodh	equ	0xFF4
  4749                           prodl	equ	0xFF3
  4750                           wreg	equ	0xFE8
  4751                           postinc2	equ	0xFDE
  4752                           postdec2	equ	0xFDD
  4753                           fsr2h	equ	0xFDA
  4754                           fsr2l	equ	0xFD9
  4755                           status	equ	0xFD8
  4756                           
  4757 ;; *************** function ___ftdiv *****************
  4758 ;; Defined at:
  4759 ;;		line 54 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  4760 ;; Parameters:    Size  Location     Type
  4761 ;;  f1              3   12[COMRAM] float 
  4762 ;;  f2              3   15[COMRAM] float 
  4763 ;; Auto vars:     Size  Location     Type
  4764 ;;  f3              3   22[COMRAM] float 
  4765 ;;  sign            1   26[COMRAM] unsigned char 
  4766 ;;  exp             1   25[COMRAM] unsigned char 
  4767 ;;  cntr            1   21[COMRAM] unsigned char 
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  3   12[COMRAM] float 
  4770 ;; Registers used:
  4771 ;;		wreg, status,2, status,0, cstack
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4777 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4778 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4779 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4780 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4781 ;;Total ram usage:       15 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; Hardware stack levels required when called:    1
  4784 ;; This function calls:
  4785 ;;		___ftpack
  4786 ;; This function is called by:
  4787 ;;		_Read_Ch_Volt
  4788 ;; This function uses a non-reentrant model
  4789 ;;
  4790                           
  4791                           	psect	text20
  4792  00EB28                     __ptext20:
  4793                           	opt stack 0
  4794  00EB28                     ___ftdiv:
  4795                           	opt stack 28
  4796                           
  4797                           ;incstack = 0
  4798  00EB28  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  4799  00EB2C  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  4800  00EB2E  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  4801  00EB30  340E               	rlcf	___ftdiv@f1+1,w,c
  4802  00EB32  3613               	rlcf	??___ftdiv& (0+255),f,c
  4803  00EB34  E301               	bnc	u2171
  4804  00EB36  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  4805  00EB38                     u2171:
  4806  00EB38  5013               	movf	??___ftdiv,w,c
  4807  00EB3A  6E1A               	movwf	___ftdiv@exp,c
  4808  00EB3C  501A               	movf	___ftdiv@exp,w,c
  4809  00EB3E  A4D8               	btfss	status,2,c
  4810  00EB40  D002               	goto	l2145
  4811  00EB42  D00E               	goto	l2147
  4812  00EB44  D061               	goto	l565
  4813  00EB46                     l2145:
  4814  00EB46  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  4815  00EB4A  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  4816  00EB4C  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  4817  00EB4E  3411               	rlcf	___ftdiv@f2+1,w,c
  4818  00EB50  3613               	rlcf	??___ftdiv& (0+255),f,c
  4819  00EB52  E301               	bnc	u2191
  4820  00EB54  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  4821  00EB56                     u2191:
  4822  00EB56  5013               	movf	??___ftdiv,w,c
  4823  00EB58  6E1B               	movwf	___ftdiv@sign,c
  4824  00EB5A  501B               	movf	___ftdiv@sign,w,c
  4825  00EB5C  A4D8               	btfss	status,2,c
  4826  00EB5E  D007               	goto	l2151
  4827  00EB60                     l2147:
  4828  00EB60  0E00               	movlw	0
  4829  00EB62  6E0D               	movwf	?___ftdiv,c
  4830  00EB64  0E00               	movlw	0
  4831  00EB66  6E0E               	movwf	?___ftdiv+1,c
  4832  00EB68  0E00               	movlw	0
  4833  00EB6A  6E0F               	movwf	?___ftdiv+2,c
  4834  00EB6C  D04D               	goto	l565
  4835  00EB6E                     l2151:
  4836  00EB6E  0E00               	movlw	0
  4837  00EB70  6E17               	movwf	___ftdiv@f3,c
  4838  00EB72  0E00               	movlw	0
  4839  00EB74  6E18               	movwf	___ftdiv@f3+1,c
  4840  00EB76  0E00               	movlw	0
  4841  00EB78  6E19               	movwf	___ftdiv@f3+2,c
  4842  00EB7A  501B               	movf	___ftdiv@sign,w,c
  4843  00EB7C  0F89               	addlw	137
  4844  00EB7E  5E1A               	subwf	___ftdiv@exp,f,c
  4845  00EB80  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  4846  00EB84  5012               	movf	___ftdiv@f2+2,w,c
  4847  00EB86  1A1B               	xorwf	___ftdiv@sign,f,c
  4848  00EB88  0E80               	movlw	128
  4849  00EB8A  161B               	andwf	___ftdiv@sign,f,c
  4850  00EB8C  8E0E               	bsf	___ftdiv@f1+1,7,c
  4851  00EB8E  0EFF               	movlw	255
  4852  00EB90  160D               	andwf	___ftdiv@f1,f,c
  4853  00EB92  0EFF               	movlw	255
  4854  00EB94  160E               	andwf	___ftdiv@f1+1,f,c
  4855  00EB96  0E00               	movlw	0
  4856  00EB98  160F               	andwf	___ftdiv@f1+2,f,c
  4857  00EB9A  8E11               	bsf	___ftdiv@f2+1,7,c
  4858  00EB9C  0EFF               	movlw	255
  4859  00EB9E  1610               	andwf	___ftdiv@f2,f,c
  4860  00EBA0  0EFF               	movlw	255
  4861  00EBA2  1611               	andwf	___ftdiv@f2+1,f,c
  4862  00EBA4  0E00               	movlw	0
  4863  00EBA6  1612               	andwf	___ftdiv@f2+2,f,c
  4864  00EBA8  0E18               	movlw	24
  4865  00EBAA  6E16               	movwf	___ftdiv@cntr,c
  4866  00EBAC  D000               	goto	l2171
  4867  00EBAE                     l2171:
  4868  00EBAE  90D8               	bcf	status,0,c
  4869  00EBB0  3617               	rlcf	___ftdiv@f3,f,c
  4870  00EBB2  3618               	rlcf	___ftdiv@f3+1,f,c
  4871  00EBB4  3619               	rlcf	___ftdiv@f3+2,f,c
  4872  00EBB6  5010               	movf	___ftdiv@f2,w,c
  4873  00EBB8  5C0D               	subwf	___ftdiv@f1,w,c
  4874  00EBBA  5011               	movf	___ftdiv@f2+1,w,c
  4875  00EBBC  580E               	subwfb	___ftdiv@f1+1,w,c
  4876  00EBBE  5012               	movf	___ftdiv@f2+2,w,c
  4877  00EBC0  580F               	subwfb	___ftdiv@f1+2,w,c
  4878  00EBC2  A0D8               	btfss	status,0,c
  4879  00EBC4  D007               	goto	l568
  4880  00EBC6  5010               	movf	___ftdiv@f2,w,c
  4881  00EBC8  5E0D               	subwf	___ftdiv@f1,f,c
  4882  00EBCA  5011               	movf	___ftdiv@f2+1,w,c
  4883  00EBCC  5A0E               	subwfb	___ftdiv@f1+1,f,c
  4884  00EBCE  5012               	movf	___ftdiv@f2+2,w,c
  4885  00EBD0  5A0F               	subwfb	___ftdiv@f1+2,f,c
  4886  00EBD2  8017               	bsf	___ftdiv@f3,0,c
  4887  00EBD4                     l568:
  4888  00EBD4  90D8               	bcf	status,0,c
  4889  00EBD6  360D               	rlcf	___ftdiv@f1,f,c
  4890  00EBD8  360E               	rlcf	___ftdiv@f1+1,f,c
  4891  00EBDA  360F               	rlcf	___ftdiv@f1+2,f,c
  4892  00EBDC  2E16               	decfsz	___ftdiv@cntr,f,c
  4893  00EBDE  D7E7               	goto	l2171
  4894  00EBE0  D000               	goto	l2181
  4895  00EBE2                     l2181:
  4896  00EBE2  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  4897  00EBE6  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4898  00EBEA  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4899  00EBEE  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  4900  00EBF2  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  4901  00EBF6  EC31  F075         	call	___ftpack	;wreg free
  4902  00EBFA  C001  F00D         	movff	?___ftpack,?___ftdiv
  4903  00EBFE  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  4904  00EC02  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  4905  00EC06  D000               	goto	l565
  4906  00EC08                     l565:
  4907  00EC08  0012               	return		;funcret
  4908  00EC0A                     __end_of___ftdiv:
  4909                           	opt stack 0
  4910                           tblptru	equ	0xFF8
  4911                           tblptrh	equ	0xFF7
  4912                           tblptrl	equ	0xFF6
  4913                           tablat	equ	0xFF5
  4914                           prodh	equ	0xFF4
  4915                           prodl	equ	0xFF3
  4916                           wreg	equ	0xFE8
  4917                           postinc2	equ	0xFDE
  4918                           postdec2	equ	0xFDD
  4919                           fsr2h	equ	0xFDA
  4920                           fsr2l	equ	0xFD9
  4921                           status	equ	0xFD8
  4922                           
  4923 ;; *************** function ___awtoft *****************
  4924 ;; Defined at:
  4925 ;;		line 32 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awtoft.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;  c               2    8[COMRAM] int 
  4928 ;; Auto vars:     Size  Location     Type
  4929 ;;  sign            1   11[COMRAM] unsigned char 
  4930 ;; Return value:  Size  Location     Type
  4931 ;;                  3    8[COMRAM] float 
  4932 ;; Registers used:
  4933 ;;		wreg, status,2, status,0, cstack
  4934 ;; Tracked objects:
  4935 ;;		On entry : 0/0
  4936 ;;		On exit  : 0/0
  4937 ;;		Unchanged: 0/0
  4938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4939 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4940 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4942 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;Total ram usage:        4 bytes
  4944 ;; Hardware stack levels used:    1
  4945 ;; Hardware stack levels required when called:    1
  4946 ;; This function calls:
  4947 ;;		___ftpack
  4948 ;; This function is called by:
  4949 ;;		_Read_Ch_Volt
  4950 ;; This function uses a non-reentrant model
  4951 ;;
  4952                           
  4953                           	psect	text21
  4954  00E5F2                     __ptext21:
  4955                           	opt stack 0
  4956  00E5F2                     ___awtoft:
  4957                           	opt stack 28
  4958                           
  4959                           ;incstack = 0
  4960  00E5F2  0E00               	movlw	0
  4961  00E5F4  6E0C               	movwf	___awtoft@sign,c
  4962  00E5F6  AE0A               	btfss	___awtoft@c+1,7,c
  4963  00E5F8  D007               	goto	l2201
  4964  00E5FA  6C09               	negf	___awtoft@c,c
  4965  00E5FC  1E0A               	comf	___awtoft@c+1,f,c
  4966  00E5FE  B0D8               	btfsc	status,0,c
  4967  00E600  2A0A               	incf	___awtoft@c+1,f,c
  4968  00E602  0E01               	movlw	1
  4969  00E604  6E0C               	movwf	___awtoft@sign,c
  4970  00E606  D000               	goto	l2201
  4971  00E608                     l2201:
  4972  00E608  C009  F001         	movff	___awtoft@c,___ftpack@arg
  4973  00E60C  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  4974  00E610  6A03               	clrf	___ftpack@arg+2,c
  4975  00E612  0E8E               	movlw	142
  4976  00E614  6E04               	movwf	___ftpack@exp,c
  4977  00E616  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  4978  00E61A  EC31  F075         	call	___ftpack	;wreg free
  4979  00E61E  C001  F009         	movff	?___ftpack,?___awtoft
  4980  00E622  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  4981  00E626  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  4982  00E62A  D000               	goto	l386
  4983  00E62C                     l386:
  4984  00E62C  0012               	return		;funcret
  4985  00E62E                     __end_of___awtoft:
  4986                           	opt stack 0
  4987                           tblptru	equ	0xFF8
  4988                           tblptrh	equ	0xFF7
  4989                           tblptrl	equ	0xFF6
  4990                           tablat	equ	0xFF5
  4991                           prodh	equ	0xFF4
  4992                           prodl	equ	0xFF3
  4993                           wreg	equ	0xFE8
  4994                           postinc2	equ	0xFDE
  4995                           postdec2	equ	0xFDD
  4996                           fsr2h	equ	0xFDA
  4997                           fsr2l	equ	0xFD9
  4998                           status	equ	0xFD8
  4999                           
  5000 ;; *************** function ___ftpack *****************
  5001 ;; Defined at:
  5002 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\float.c"
  5003 ;; Parameters:    Size  Location     Type
  5004 ;;  arg             3    0[COMRAM] unsigned um
  5005 ;;  exp             1    3[COMRAM] unsigned char 
  5006 ;;  sign            1    4[COMRAM] unsigned char 
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;		None
  5009 ;; Return value:  Size  Location     Type
  5010 ;;                  3    0[COMRAM] float 
  5011 ;; Registers used:
  5012 ;;		wreg, status,2, status,0
  5013 ;; Tracked objects:
  5014 ;;		On entry : 0/0
  5015 ;;		On exit  : 0/0
  5016 ;;		Unchanged: 0/0
  5017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5018 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5020 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5021 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5022 ;;Total ram usage:        8 bytes
  5023 ;; Hardware stack levels used:    1
  5024 ;; This function calls:
  5025 ;;		Nothing
  5026 ;; This function is called by:
  5027 ;;		___awtoft
  5028 ;;		___ftadd
  5029 ;;		___ftdiv
  5030 ;;		___ftmul
  5031 ;;		___lltoft
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           	psect	text22
  5036  00EA62                     __ptext22:
  5037                           	opt stack 0
  5038  00EA62                     ___ftpack:
  5039                           	opt stack 27
  5040                           
  5041                           ;incstack = 0
  5042  00EA62  5004               	movf	___ftpack@exp,w,c
  5043  00EA64  B4D8               	btfsc	status,2,c
  5044  00EA66  D005               	goto	l1665
  5045  00EA68  5001               	movf	___ftpack@arg,w,c
  5046  00EA6A  1002               	iorwf	___ftpack@arg+1,w,c
  5047  00EA6C  1003               	iorwf	___ftpack@arg+2,w,c
  5048  00EA6E  A4D8               	btfss	status,2,c
  5049  00EA70  D00E               	goto	l1671
  5050  00EA72                     l1665:
  5051  00EA72  0E00               	movlw	0
  5052  00EA74  6E01               	movwf	?___ftpack,c
  5053  00EA76  0E00               	movlw	0
  5054  00EA78  6E02               	movwf	?___ftpack+1,c
  5055  00EA7A  0E00               	movlw	0
  5056  00EA7C  6E03               	movwf	?___ftpack+2,c
  5057  00EA7E  D053               	goto	l493
  5058  00EA80  D006               	goto	l1671
  5059  00EA82                     l1669:
  5060  00EA82  2A04               	incf	___ftpack@exp,f,c
  5061  00EA84  90D8               	bcf	status,0,c
  5062  00EA86  3203               	rrcf	___ftpack@arg+2,f,c
  5063  00EA88  3202               	rrcf	___ftpack@arg+1,f,c
  5064  00EA8A  3201               	rrcf	___ftpack@arg,f,c
  5065  00EA8C  D000               	goto	l1671
  5066  00EA8E                     l1671:
  5067  00EA8E  0E00               	movlw	0
  5068  00EA90  1401               	andwf	___ftpack@arg,w,c
  5069  00EA92  6E06               	movwf	??___ftpack& (0+255),c
  5070  00EA94  0E00               	movlw	0
  5071  00EA96  1402               	andwf	___ftpack@arg+1,w,c
  5072  00EA98  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5073  00EA9A  0EFE               	movlw	254
  5074  00EA9C  1403               	andwf	___ftpack@arg+2,w,c
  5075  00EA9E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5076  00EAA0  5006               	movf	??___ftpack,w,c
  5077  00EAA2  1007               	iorwf	??___ftpack+1,w,c
  5078  00EAA4  1008               	iorwf	??___ftpack+2,w,c
  5079  00EAA6  B4D8               	btfsc	status,2,c
  5080  00EAA8  D00E               	goto	l1677
  5081  00EAAA  D7EB               	goto	l1669
  5082  00EAAC  D00C               	goto	l1677
  5083  00EAAE                     l1673:
  5084  00EAAE  2A04               	incf	___ftpack@exp,f,c
  5085  00EAB0  0E01               	movlw	1
  5086  00EAB2  2601               	addwf	___ftpack@arg,f,c
  5087  00EAB4  0E00               	movlw	0
  5088  00EAB6  2202               	addwfc	___ftpack@arg+1,f,c
  5089  00EAB8  0E00               	movlw	0
  5090  00EABA  2203               	addwfc	___ftpack@arg+2,f,c
  5091  00EABC  90D8               	bcf	status,0,c
  5092  00EABE  3203               	rrcf	___ftpack@arg+2,f,c
  5093  00EAC0  3202               	rrcf	___ftpack@arg+1,f,c
  5094  00EAC2  3201               	rrcf	___ftpack@arg,f,c
  5095  00EAC4  D000               	goto	l1677
  5096  00EAC6                     l1677:
  5097  00EAC6  0E00               	movlw	0
  5098  00EAC8  1401               	andwf	___ftpack@arg,w,c
  5099  00EACA  6E06               	movwf	??___ftpack& (0+255),c
  5100  00EACC  0E00               	movlw	0
  5101  00EACE  1402               	andwf	___ftpack@arg+1,w,c
  5102  00EAD0  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5103  00EAD2  0EFF               	movlw	255
  5104  00EAD4  1403               	andwf	___ftpack@arg+2,w,c
  5105  00EAD6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5106  00EAD8  5006               	movf	??___ftpack,w,c
  5107  00EADA  1007               	iorwf	??___ftpack+1,w,c
  5108  00EADC  1008               	iorwf	??___ftpack+2,w,c
  5109  00EADE  B4D8               	btfsc	status,2,c
  5110  00EAE0  D008               	goto	l1681
  5111  00EAE2  D7E5               	goto	l1673
  5112  00EAE4  D006               	goto	l1681
  5113  00EAE6                     l1679:
  5114  00EAE6  0604               	decf	___ftpack@exp,f,c
  5115  00EAE8  90D8               	bcf	status,0,c
  5116  00EAEA  3601               	rlcf	___ftpack@arg,f,c
  5117  00EAEC  3602               	rlcf	___ftpack@arg+1,f,c
  5118  00EAEE  3603               	rlcf	___ftpack@arg+2,f,c
  5119  00EAF0  D000               	goto	l1681
  5120  00EAF2                     l1681:
  5121  00EAF2  BE02               	btfsc	___ftpack@arg+1,7,c
  5122  00EAF4  D004               	goto	l504
  5123  00EAF6  0E02               	movlw	2
  5124  00EAF8  6004               	cpfslt	___ftpack@exp,c
  5125  00EAFA  D7F5               	goto	l1679
  5126  00EAFC  D000               	goto	l504
  5127  00EAFE                     l504:
  5128  00EAFE  B004               	btfsc	___ftpack@exp,0,c
  5129  00EB00  D002               	goto	l1687
  5130  00EB02  9E02               	bcf	___ftpack@arg+1,7,c
  5131  00EB04  D000               	goto	l1687
  5132  00EB06                     l1687:
  5133  00EB06  90D8               	bcf	status,0,c
  5134  00EB08  3204               	rrcf	___ftpack@exp,f,c
  5135  00EB0A  5004               	movf	___ftpack@exp,w,c
  5136  00EB0C  1203               	iorwf	___ftpack@arg+2,f,c
  5137  00EB0E  5005               	movf	___ftpack@sign,w,c
  5138  00EB10  B4D8               	btfsc	status,2,c
  5139  00EB12  D002               	goto	l1693
  5140  00EB14  8E03               	bsf	___ftpack@arg+2,7,c
  5141  00EB16  D000               	goto	l1693
  5142  00EB18                     l1693:
  5143  00EB18  C001  F001         	movff	___ftpack@arg,?___ftpack
  5144  00EB1C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5145  00EB20  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5146  00EB24  D000               	goto	l493
  5147  00EB26                     l493:
  5148  00EB26  0012               	return		;funcret
  5149  00EB28                     __end_of___ftpack:
  5150                           	opt stack 0
  5151                           tblptru	equ	0xFF8
  5152                           tblptrh	equ	0xFF7
  5153                           tblptrl	equ	0xFF6
  5154                           tablat	equ	0xFF5
  5155                           prodh	equ	0xFF4
  5156                           prodl	equ	0xFF3
  5157                           wreg	equ	0xFE8
  5158                           postinc2	equ	0xFDE
  5159                           postdec2	equ	0xFDD
  5160                           fsr2h	equ	0xFDA
  5161                           fsr2l	equ	0xFD9
  5162                           status	equ	0xFD8
  5163                           
  5164 ;; *************** function _Get_Full_ADC *****************
  5165 ;; Defined at:
  5166 ;;		line 41 in file "Lab1p3.c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;		None
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;  result          2    4[COMRAM] int 
  5171 ;; Return value:  Size  Location     Type
  5172 ;;                  2    0[COMRAM] unsigned int 
  5173 ;; Registers used:
  5174 ;;		wreg, status,2, status,0
  5175 ;; Tracked objects:
  5176 ;;		On entry : 0/0
  5177 ;;		On exit  : 0/0
  5178 ;;		Unchanged: 0/0
  5179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5180 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5181 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5182 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;Total ram usage:        6 bytes
  5185 ;; Hardware stack levels used:    1
  5186 ;; This function calls:
  5187 ;;		Nothing
  5188 ;; This function is called by:
  5189 ;;		_Read_Ch_Volt
  5190 ;; This function uses a non-reentrant model
  5191 ;;
  5192                           
  5193                           	psect	text23
  5194  00E5A4                     __ptext23:
  5195                           	opt stack 0
  5196  00E5A4                     _Get_Full_ADC:
  5197                           	opt stack 29
  5198                           
  5199                           ;Lab1p3.c: 43: int result;
  5200                           ;Lab1p3.c: 44: ADCON0bits.GO=1;
  5201                           
  5202                           ;incstack = 0
  5203  00E5A4  82C2               	bsf	4034,1,c	;volatile
  5204                           
  5205                           ;Lab1p3.c: 45: while(ADCON0bits.DONE==1);
  5206  00E5A6  D000               	goto	l37
  5207  00E5A8                     l37:
  5208  00E5A8  B2C2               	btfsc	4034,1,c	;volatile
  5209  00E5AA  D7FE               	goto	l37
  5210                           
  5211                           ;Lab1p3.c: 46: result = (ADRESH * 0x100) + ADRESL;
  5212  00E5AC  50C4               	movf	4036,w,c	;volatile
  5213  00E5AE  6E04               	movwf	(??_Get_Full_ADC+1)& (0+255),c
  5214  00E5B0  6A03               	clrf	??_Get_Full_ADC& (0+255),c
  5215  00E5B2  50C3               	movf	4035,w,c	;volatile
  5216  00E5B4  2403               	addwf	??_Get_Full_ADC,w,c
  5217  00E5B6  6E05               	movwf	Get_Full_ADC@result,c
  5218  00E5B8  0E00               	movlw	0
  5219  00E5BA  2004               	addwfc	??_Get_Full_ADC+1,w,c
  5220  00E5BC  6E06               	movwf	Get_Full_ADC@result+1,c
  5221                           
  5222                           ;Lab1p3.c: 47: return result;
  5223  00E5BE  C005  F001         	movff	Get_Full_ADC@result,?_Get_Full_ADC
  5224  00E5C2  C006  F002         	movff	Get_Full_ADC@result+1,?_Get_Full_ADC+1
  5225  00E5C6  D000               	goto	l40
  5226  00E5C8                     l40:
  5227  00E5C8  0012               	return		;funcret
  5228  00E5CA                     __end_of_Get_Full_ADC:
  5229                           	opt stack 0
  5230                           tblptru	equ	0xFF8
  5231                           tblptrh	equ	0xFF7
  5232                           tblptrl	equ	0xFF6
  5233                           tablat	equ	0xFF5
  5234                           prodh	equ	0xFF4
  5235                           prodl	equ	0xFF3
  5236                           wreg	equ	0xFE8
  5237                           postinc2	equ	0xFDE
  5238                           postdec2	equ	0xFDD
  5239                           fsr2h	equ	0xFDA
  5240                           fsr2l	equ	0xFD9
  5241                           status	equ	0xFD8
  5242                           
  5243 ;; *************** function _Init_UART *****************
  5244 ;; Defined at:
  5245 ;;		line 20 in file "Lab1p3.c"
  5246 ;; Parameters:    Size  Location     Type
  5247 ;;		None
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;		None
  5250 ;; Return value:  Size  Location     Type
  5251 ;;		None               void
  5252 ;; Registers used:
  5253 ;;		wreg, status,2, cstack
  5254 ;; Tracked objects:
  5255 ;;		On entry : 0/0
  5256 ;;		On exit  : 0/0
  5257 ;;		Unchanged: 0/0
  5258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5263 ;;Total ram usage:        0 bytes
  5264 ;; Hardware stack levels used:    1
  5265 ;; Hardware stack levels required when called:    1
  5266 ;; This function calls:
  5267 ;;		_OpenUSART
  5268 ;; This function is called by:
  5269 ;;		_main
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text24
  5274  00E56C                     __ptext24:
  5275                           	opt stack 0
  5276  00E56C                     _Init_UART:
  5277                           	opt stack 29
  5278                           
  5279                           ;Lab1p3.c: 22: OpenUSART (0b01111111 & 0b10111111 &
  5280                           ;Lab1p3.c: 23: 0b11111110 & 0b11111101 & 0b11111111 &
  5281                           ;Lab1p3.c: 24: 0b11111111, 25);
  5282                           
  5283                           ;incstack = 0
  5284  00E56C  0E00               	movlw	0
  5285  00E56E  6E02               	movwf	OpenUSART@spbrg+1,c
  5286  00E570  0E19               	movlw	25
  5287  00E572  6E01               	movwf	OpenUSART@spbrg,c
  5288  00E574  0E3C               	movlw	60
  5289  00E576  EC69  F073         	call	_OpenUSART
  5290                           
  5291                           ;Lab1p3.c: 25: OSCCON = 0x60;
  5292  00E57A  0E60               	movlw	96
  5293  00E57C  6ED3               	movwf	4051,c	;volatile
  5294  00E57E  0012               	return		;funcret
  5295  00E580                     __end_of_Init_UART:
  5296                           	opt stack 0
  5297                           tblptru	equ	0xFF8
  5298                           tblptrh	equ	0xFF7
  5299                           tblptrl	equ	0xFF6
  5300                           tablat	equ	0xFF5
  5301                           prodh	equ	0xFF4
  5302                           prodl	equ	0xFF3
  5303                           wreg	equ	0xFE8
  5304                           postinc2	equ	0xFDE
  5305                           postdec2	equ	0xFDD
  5306                           fsr2h	equ	0xFDA
  5307                           fsr2l	equ	0xFD9
  5308                           status	equ	0xFD8
  5309                           
  5310 ;; *************** function _OpenUSART *****************
  5311 ;; Defined at:
  5312 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;  config          1    wreg     unsigned char 
  5315 ;;  spbrg           2    0[COMRAM] unsigned int 
  5316 ;; Auto vars:     Size  Location     Type
  5317 ;;  config          1    2[COMRAM] unsigned char 
  5318 ;; Return value:  Size  Location     Type
  5319 ;;		None               void
  5320 ;; Registers used:
  5321 ;;		wreg, status,2
  5322 ;; Tracked objects:
  5323 ;;		On entry : 0/0
  5324 ;;		On exit  : 0/0
  5325 ;;		Unchanged: 0/0
  5326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5327 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5328 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5330 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5331 ;;Total ram usage:        3 bytes
  5332 ;; Hardware stack levels used:    1
  5333 ;; This function calls:
  5334 ;;		Nothing
  5335 ;; This function is called by:
  5336 ;;		_Init_UART
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           	psect	text25
  5341  00E6D2                     __ptext25:
  5342                           	opt stack 0
  5343  00E6D2                     _OpenUSART:
  5344                           	opt stack 29
  5345                           
  5346                           ;incstack = 0
  5347                           ;OpenUSART@config stored from wreg
  5348  00E6D2  6E03               	movwf	OpenUSART@config,c
  5349  00E6D4  0E00               	movlw	0
  5350  00E6D6  6EAC               	movwf	4012,c	;volatile
  5351  00E6D8  0E00               	movlw	0
  5352  00E6DA  6EAB               	movwf	4011,c	;volatile
  5353  00E6DC  A003               	btfss	OpenUSART@config,0,c
  5354  00E6DE  D002               	goto	l1907
  5355  00E6E0  88AC               	bsf	4012,4,c	;volatile
  5356  00E6E2  D000               	goto	l1907
  5357  00E6E4                     l1907:
  5358  00E6E4  A203               	btfss	OpenUSART@config,1,c
  5359  00E6E6  D003               	goto	l1911
  5360  00E6E8  8CAC               	bsf	4012,6,c	;volatile
  5361  00E6EA  8CAB               	bsf	4011,6,c	;volatile
  5362  00E6EC  D000               	goto	l1911
  5363  00E6EE                     l1911:
  5364  00E6EE  A403               	btfss	OpenUSART@config,2,c
  5365  00E6F0  D002               	goto	l1915
  5366  00E6F2  8EAC               	bsf	4012,7,c	;volatile
  5367  00E6F4  D000               	goto	l1915
  5368  00E6F6                     l1915:
  5369  00E6F6  A603               	btfss	OpenUSART@config,3,c
  5370  00E6F8  D002               	goto	l156
  5371  00E6FA  88AB               	bsf	4011,4,c	;volatile
  5372  00E6FC  D002               	goto	l1919
  5373  00E6FE                     l156:
  5374  00E6FE  8AAB               	bsf	4011,5,c	;volatile
  5375  00E700  D000               	goto	l1919
  5376  00E702                     l1919:
  5377  00E702  B803               	btfsc	OpenUSART@config,4,c
  5378  00E704  84AC               	bsf	4012,2,c	;volatile
  5379  00E706  989E               	bcf	3998,4,c	;volatile
  5380  00E708  AA03               	btfss	OpenUSART@config,5,c
  5381  00E70A  D002               	goto	l1927
  5382  00E70C  86AB               	bsf	4011,3,c	;volatile
  5383  00E70E  D000               	goto	l1927
  5384  00E710                     l1927:
  5385  00E710  AC03               	btfss	OpenUSART@config,6,c
  5386  00E712  D002               	goto	l160
  5387  00E714  8A9D               	bsf	3997,5,c	;volatile
  5388  00E716  D001               	goto	l161
  5389  00E718                     l160:
  5390  00E718  9A9D               	bcf	3997,5,c	;volatile
  5391  00E71A                     l161:
  5392  00E71A  9A9E               	bcf	3998,5,c	;volatile
  5393  00E71C  AE03               	btfss	OpenUSART@config,7,c
  5394  00E71E  D002               	goto	l162
  5395  00E720  889D               	bsf	3997,4,c	;volatile
  5396  00E722  D001               	goto	l163
  5397  00E724                     l162:
  5398  00E724  989D               	bcf	3997,4,c	;volatile
  5399  00E726                     l163:
  5400  00E726  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  5401  00E72A  5002               	movf	OpenUSART@spbrg+1,w,c
  5402  00E72C  6EB0               	movwf	4016,c	;volatile
  5403  00E72E  8AAC               	bsf	4012,5,c	;volatile
  5404  00E730  8EAB               	bsf	4011,7,c	;volatile
  5405  00E732  9C94               	bcf	3988,6,c	;volatile
  5406  00E734  8E94               	bsf	3988,7,c	;volatile
  5407  00E736  B8AC               	btfsc	4012,4,c	;volatile
  5408  00E738  BEAC               	btfsc	4012,7,c	;volatile
  5409  00E73A  D002               	goto	l165
  5410  00E73C  8C94               	bsf	3988,6,c	;volatile
  5411  00E73E  D000               	goto	l165
  5412  00E740                     l165:
  5413  00E740  0012               	return		;funcret
  5414  00E742                     __end_of_OpenUSART:
  5415                           	opt stack 0
  5416                           tblptru	equ	0xFF8
  5417                           tblptrh	equ	0xFF7
  5418                           tblptrl	equ	0xFF6
  5419                           tablat	equ	0xFF5
  5420                           prodh	equ	0xFF4
  5421                           prodl	equ	0xFF3
  5422                           wreg	equ	0xFE8
  5423                           postinc2	equ	0xFDE
  5424                           postdec2	equ	0xFDD
  5425                           fsr2h	equ	0xFDA
  5426                           fsr2l	equ	0xFD9
  5427                           status	equ	0xFD8
  5428                           
  5429 ;; *************** function _Init_ADC *****************
  5430 ;; Defined at:
  5431 ;;		line 35 in file "Lab1p3.c"
  5432 ;; Parameters:    Size  Location     Type
  5433 ;;		None
  5434 ;; Auto vars:     Size  Location     Type
  5435 ;;		None
  5436 ;; Return value:  Size  Location     Type
  5437 ;;		None               void
  5438 ;; Registers used:
  5439 ;;		wreg, status,2
  5440 ;; Tracked objects:
  5441 ;;		On entry : 0/0
  5442 ;;		On exit  : 0/0
  5443 ;;		Unchanged: 0/0
  5444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5449 ;;Total ram usage:        0 bytes
  5450 ;; Hardware stack levels used:    1
  5451 ;; This function calls:
  5452 ;;		Nothing
  5453 ;; This function is called by:
  5454 ;;		_main
  5455 ;; This function uses a non-reentrant model
  5456 ;;
  5457                           
  5458                           	psect	text26
  5459  00E550                     __ptext26:
  5460                           	opt stack 0
  5461  00E550                     _Init_ADC:
  5462                           	opt stack 30
  5463                           
  5464                           ;Lab1p3.c: 37: ADCON0=0x01;
  5465                           
  5466                           ;incstack = 0
  5467  00E550  0E01               	movlw	1
  5468  00E552  6EC2               	movwf	4034,c	;volatile
  5469                           
  5470                           ;Lab1p3.c: 38: ADCON1=0x0a;
  5471  00E554  0E0A               	movlw	10
  5472  00E556  6EC1               	movwf	4033,c	;volatile
  5473                           
  5474                           ;Lab1p3.c: 39: ADCON2=0xA9;
  5475  00E558  0EA9               	movlw	169
  5476  00E55A  6EC0               	movwf	4032,c	;volatile
  5477  00E55C  0012               	return		;funcret
  5478  00E55E                     __end_of_Init_ADC:
  5479                           	opt stack 0
  5480                           tblptru	equ	0xFF8
  5481                           tblptrh	equ	0xFF7
  5482                           tblptrl	equ	0xFF6
  5483                           tablat	equ	0xFF5
  5484                           prodh	equ	0xFF4
  5485                           prodl	equ	0xFF3
  5486                           wreg	equ	0xFE8
  5487                           postinc2	equ	0xFDE
  5488                           postdec2	equ	0xFDD
  5489                           fsr2h	equ	0xFDA
  5490                           fsr2l	equ	0xFD9
  5491                           status	equ	0xFD8
  5492                           tblptru	equ	0xFF8
  5493                           tblptrh	equ	0xFF7
  5494                           tblptrl	equ	0xFF6
  5495                           tablat	equ	0xFF5
  5496                           prodh	equ	0xFF4
  5497                           prodl	equ	0xFF3
  5498                           wreg	equ	0xFE8
  5499                           postinc2	equ	0xFDE
  5500                           postdec2	equ	0xFDD
  5501                           fsr2h	equ	0xFDA
  5502                           fsr2l	equ	0xFD9
  5503                           status	equ	0xFD8
  5504                           
  5505                           	psect	rparam
  5506  0000                     tblptru	equ	0xFF8
  5507                           tblptrh	equ	0xFF7
  5508                           tblptrl	equ	0xFF6
  5509                           tablat	equ	0xFF5
  5510                           prodh	equ	0xFF4
  5511                           prodl	equ	0xFF3
  5512                           wreg	equ	0xFE8
  5513                           postinc2	equ	0xFDE
  5514                           postdec2	equ	0xFDD
  5515                           fsr2h	equ	0xFDA
  5516                           fsr2l	equ	0xFD9
  5517                           status	equ	0xFD8


Data Sizes:
    Strings     137
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    107     107
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_6(CODE[34]), STR_5(CODE[21]), STR_4(CODE[20]), STR_3(CODE[20]), 
		 -> STR_2(CODE[20]), STR_1(CODE[22]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _Read_Ch_Volt->___ftmul
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Init_UART->_OpenUSART

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   44853
                                            104 COMRAM     3     3      0
                           _Init_ADC
                          _Init_UART
                       _Read_Ch_Volt
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   36530
                                             70 COMRAM    34    29      5
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3    8696
                                             42 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3    8498
                                             42 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1855
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1250
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1360
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     409
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     552
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    1868
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     477
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     374
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     411
                                             49 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3131
                                             64 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    2878
                                             52 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      98
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     454
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _Read_Ch_Volt                                         9     6      3    7935
                                             42 COMRAM     9     6      3
                       _Get_Full_ADC
                           ___awtoft
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3742
                                             27 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2212
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    1890
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1746
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Get_Full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _Init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_ADC
   _Init_UART
     _OpenUSART
   _Read_Ch_Volt
     _Get_Full_ADC
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     6B      6B       1       84.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Sep 06 18:14:01 2022

                     l40 E5C8                       l43 E826                       l28 E562  
                     l37 E5A8                       l76 F8D6                       l69 F4F6  
           ___awdiv@sign 000C      ___wmul@multiplicand 0011             ___ftadd@exp1 0040  
           ___ftadd@exp2 003F             ___ftadd@sign 003E                      l121 FD58  
                    l132 FEFC                      l160 E718                      l161 E71A  
                    l162 E724                      l163 E726                      l156 E6FE  
                    l165 E740                      l504 EAFE                      l168 E5F0  
                    l361 EA60                      l452 EFDE                      l533 F134  
                    l461 EFCE                      l534 F2B2                      l614 E670  
                    l374 E8A8                      l607 E596                      l537 F15E  
                    l386 E62C                      l618 ECEE                      l548 F220  
                    l493 EB26                      l565 EC08                      l557 F23C  
                    l573 F0EE                      l582 F0DE                      l591 E9CA  
                    l575 F056                      l568 EBD4                      l576 F07E  
                    l657 E924                      l667 E7A0                      l597 EED4  
                    l687 E6D0             ___awmod@sign 0006                      wreg 000FE8  
           __CFG_LVP$OFF 000000             ___ftdiv@cntr 0016             ___ftdiv@sign 001B  
           __CFG_WDT$OFF 000000                     l2001 F6CC                     l2013 F800  
                   l2005 F6DC                     l2201 E608                     l2113 EF6C  
                   l2105 EF3A                     l2131 EFA6                     l2035 F01C  
                   l2019 F8B2                     l2213 E99A                     l2301 E762  
                   l2125 EF90                     l2117 EF7C                     l2029 EFFE  
                   l2151 EB6E                     l2303 E76A                     l2135 EFBA  
                   l2071 F0B6                     l2145 EB46                     l2209 E968  
                   l2233 EC28                     l2313 E678                     l2137 EFC8  
                   l2129 EFA0                     l2065 F0A0                     l2057 F08C  
                   l2171 EBAE                     l2147 EB60                     l2219 E9C6  
                   l2251 EC82                     l2307 E790                     l2315 E686  
                   l2091 EEF6                     l2075 F0CA                     l2403 FB1E  
                   l2181 EBE2                     l2261 ECAC                     l2085 EEE6  
                   l2077 F0D8                     l2069 F0B0                     l2421 FC30  
                   l2413 FB8E                     l2341 F8F2                     l1711 F142  
                   l2263 ECBA                     l2255 EC92                     l2431 FC70  
                   l2423 FC34                     l2415 FBBC                     l2407 FB42  
                   l2343 F8FE                     l2257 EC98                     l2265 ECC4  
                   l2281 E8DA                     l2409 FB4C                     l2417 FBCA  
                   l2337 F8E2                     l1803 EE6A                     l1723 F178  
                   l2291 E914                     l2283 E8E2                     l2451 FD34  
                   l2435 FC74                     l2427 FC40                     l2363 F97A  
                   l2347 F906                     l1813 EE98                     l1741 F1D0  
                   l1733 F1A0                     l1717 F16C                     l2189 E646  
                   l2269 ECDC                     l2453 FD42                     l2445 FD1A  
                   l2349 F928                     l1911 E6EE                     l1671 EA8E  
                   l1807 EE80                     l1751 F208                     l1743 F1DC  
                   l2279 E8CC                     l2463 FD78                     l2447 FD26  
                   l2439 FC90                     l2391 FA96                     l1681 EAF2  
                   l1673 EAAE                     l1665 EA72                     l1817 EEAE  
                   l1809 EE86                     l1753 F214                     l1745 F1E4  
                   l1841 EA0A                     l2473 FE9E                     l2457 FD5E  
                   l2393 FAA6                     l2481 FEC4                     l1915 E6F6  
                   l1907 E6E4                     l1739 F1C4                     l2299 E754  
                   l1843 EA14                     l1835 E9F4                     l2475 FEAA  
                   l2467 FDC8                     l2395 FAD6                     l2387 FA70  
                   l2379 FA0C                     l1693 EB18                     l1677 EAC6  
                   l1669 EA82                     l1781 EE16                     l1861 EA56  
                   l1853 EA3A                     l1845 EA1C                     l1829 E9E2  
                   l2397 FAE6                     l2485 FEE0                     l1927 E710  
                   l1919 E702                     l1687 EB06                     l1679 EAE6  
                   l1759 F25A                     l2479 FEB8                     l1785 EE24  
                   l1769 F28C                     l1857 EA46                     l1881 E85A  
                   l1873 E83E                     l2489 ECFA                     l1779 EDFC  
                   l1883 E864                     l1885 E86C                     l1893 E88E  
                   l1877 E84C                     l1981 F4B6                     l1973 F3F2  
                   l1799 EE58                     l1897 E89E                     l1889 E882  
                   l1995 F624                     STR_1 FF97                     STR_2 FFC2  
                   STR_3 FFD6                     STR_4 FFEA                     STR_5 FFAD  
                   STR_6 FF75                     u2011 EFF0                     u2031 F00E  
                   u2300 EC46                     u1431 F100                     u1441 F114  
                   u2305 EC3E                     u2171 EB38                     u2191 EB56  
                   u1641 EDEE                     u2281 EC1A                     u1661 EE0C  
                   u2630 FD52                     u2470 F9B2                     u2475 F9A8  
           printf@tmpval 0061                     _TRMT 007D61                     _main ECF0  
           ___ftpack@arg 0001             ___ftpack@exp 0004                     fsr2h 000FDA  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0000             ___ftmul@cntr 0029             ___param_bank 000010  
           ___ftmul@sign 002A            ?_Read_Ch_Volt 002B     __end_of_Get_Full_ADC E5CA  
           ___fttol@exp1 0040             ___fttol@lval 003C                    ?_main 0001  
        __end_of___awdiv EA62          __end_of___ftadd F2B4          __end_of___awmod E8AA  
        __end_of___ftdiv EC0A          __end_of___ftneg E5A4          __end_of___lldiv E936  
        __end_of___ftmul EED6          ___awdiv@divisor 0009          __end_of___llmod E7B2  
        __end_of___ftsub E672          __end_of___fttol ECF0          ___awdiv@counter 000B  
                  _RCSTA 000FAB                    _SPBRG 000FAF                    _TXREG 000FAD  
                  _TXSTA 000FAC             ___lltoft@exp 0011            ___awtoft@sign 000C  
        __end_of_dpowers FF27                    _scale F4F8            ___ftpack@sign 0005  
                  _putch E55E           __CFG_BOREN$OFF 000000                    tablat 000FF5  
                  status 000FD8          __initialization E546           ??_Read_Ch_Volt 002E  
           __end_of_main EDDE         __end_of_Init_ADC E55E                   ??_main 0069  
          ___fttol@sign1 003B            __activetblptr 000002     __size_of__tdiv_to_l_ 0110  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
       ___llmod@dividend 0001                   ?_scale 002B                   _ADRESH 000FC4  
                 _ADRESL 000FC3         ___awdiv@dividend 0007         __end_of___awtoft E62E  
                 ?_putch 0001         __end_of___ftpack EB28         __end_of___lltoft E6D2  
                 _OSCCON 000FD3       __size_of_Init_UART 0014                   _SPBRGH 000FB0  
     Get_Full_ADC@result 0005         __end_of__powers_ FF75       __size_of_OpenUSART 0070  
                 ___ftge E936                   ___wmul E5CA                ??___awdiv 000B  
              ??___ftadd 003B                ??___awmod 0005                ??___ftdiv 0013  
              ??___ftneg 0004                ??___lldiv 0009                ??___ftmul 0022  
              ??___llmod 0009                ??___ftsub 0047                ??___fttol 0036  
                 _fround F2B4         ___awdiv@quotient 000D          ___awmod@divisor 0003  
        ___awmod@counter 0005                   _printf F8D8    ___ftmul@f3_as_product 0026  
           __mediumconst FEFE                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001               __accesstop 0080  
__end_of__initialization E546               ___ftadd@f1 0035               ___ftadd@f2 0038  
             ___ftge@ff1 0001               ___ftge@ff2 0004            ___rparam_used 000001  
             ___ftdiv@f1 000D               ___ftdiv@f2 0010               ___ftdiv@f3 0017  
  __size_of_Get_Full_ADC 0026               ___ftneg@f1 0001               ___awtoft@c 0009  
             ___ftmul@f1 001C               ___ftmul@f2 001F               ___ftsub@f1 0041  
             ___ftsub@f2 0044               ___fttol@f1 0032           __pcstackCOMRAM 0001  
             ___lltoft@c 0009            __end_of_scale F8D8            __end_of_putch E56C  
      __end_of_Init_UART E580               __div_to_l_ EED6        __end_of_OpenUSART E742  
   __end_of_Read_Ch_Volt E828          __div_to_l_@exp1 000C          __div_to_l_@cntr 000B  
                ??_scale 002E          __div_to_l_@quot 0007             _Get_Full_ADC E5A4  
                ??_putch 0001                ?_Init_ADC 0001            __div_to_l_@f1 0001  
          __div_to_l_@f2 0004                  ?___ftge 0001                  ?___wmul 000F  
                ?_fround 002B                ?___awtoft 0009                ?___ftpack 0001  
                ?_printf 0047                ?___lltoft 0009               ??_Init_ADC 0001  
      __end_of__npowers_ FF4E                  __Hparam 0000               _scale$1009 002E  
                __Lparam 0000          __size_of___ftge 0096                  ___awdiv E9CC  
                ___ftadd F0F0                  ___awmod E828                  ___ftdiv EB28  
                ___ftneg E580                  ___lldiv E8AA          __size_of___wmul 0028  
                ___ftmul EDDE                  ___llmod E742                  ___ftsub E62E  
                ___fttol EC0A                  __pcinit E546               ??___awtoft 000C  
             ??___ftpack 0006          __size_of_fround 0244                  __ramtop 1000  
             ??___lltoft 000D                  __ptext0 ECF0                  __ptext1 F8D8  
                __ptext2 F4F8                  __ptext3 E55E                  __ptext4 F2B4  
                __ptext5 E5CA                  __ptext6 E828                  __ptext7 E9CC  
                __ptext8 EFE0                  __ptext9 EED6          __size_of_printf 0626  
            ?__div_to_l_ 0001                  _dpowers FEFF         ___awmod@dividend 0001  
       Read_Ch_Volt@Volt 002E     end_of_initialization E546            __Lmediumconst FEFE  
        ___lldiv@divisor 0005          ___lldiv@counter 000D                _RCSTAbits 000FAB  
                printf@c 0068                  printf@f 0047                  postdec2 000FDD  
                postinc2 000FDE           __tdiv_to_l_@f1 0001           __tdiv_to_l_@f2 0004  
          ??__tdiv_to_l_ 0007    __size_of_Read_Ch_Volt 0076                _TRISCbits 000F94  
            ___ftdiv@exp 001A                _TXSTAbits 000FAC      __size_of__div_to_l_ 010A  
            ___ftmul@exp 0025             _Read_Ch_Volt E7B2           __end_of___ftge E9CC  
         __end_of___wmul E5F2           __end_of_fround F4F8           __end_of_printf FEFE  
    start_initialization E546                _Init_UART E56C      __end_of__tdiv_to_l_ F0F0  
              _OpenUSART E6D2          ___llmod@divisor 0005         __CFG_OSC$INTIO67 000000  
      __size_of_Init_ADC 000E          ___llmod@counter 0009                 ??___ftge 0007  
               ??___wmul 0013                 ??_fround 002E                 ??_printf 004C  
             fround@prec 0034        __size_of___awtoft 003C        __size_of___ftpack 00C6  
      __size_of___lltoft 0060               ?_Init_UART 0001               ?_OpenUSART 0001  
          __pmediumconst FEFE                 ?___awdiv 0007                 ?___ftadd 0035  
               ?___awmod 0001                 ?___ftdiv 000D                 ?___ftneg 0001  
               ?___lldiv 0001                 ?___ftmul 001C                 ?___llmod 0001  
               ?___ftsub 0041                __npowers_ FF27                 ?___fttol 0032  
            __tdiv_to_l_ EFE0             ??__div_to_l_ 0007           __size_of_scale 03E0  
         __size_of_putch 000E           ___wmul@product 0013                 _PIE1bits 000F9D  
               _PIR1bits 000F9E       __end_of__div_to_l_ EFE0               _ADCON0bits 000FC2  
      ___wmul@multiplier 000F               printf@flag 0057               printf@fval 0065  
             printf@prec 0059              ??_Init_UART 0004       Read_Ch_Volt@ch_num 0033  
               _Init_ADC E550              ??_OpenUSART 0003          OpenUSART@config 0003  
               __Hrparam 0000                 __Lrparam 0000         __size_of___awdiv 0096  
       __size_of___ftadd 01C4         __size_of___awmod 0082         __size_of___ftdiv 00E2  
       __size_of___ftneg 0024         __size_of___lldiv 008C         __size_of___ftmul 00F8  
       __size_of___llmod 0070         __size_of___ftsub 0044         __size_of___fttol 00E6  
               ___awtoft E5F2                 ___ftpack EA62   Read_Ch_Volt@ADC_Result 0031  
            _fround$1007 0031              _fround$1008 002E                 ___lltoft E672  
               __ptext10 E672                 __ptext11 E742                 __ptext20 EB28  
               __ptext12 E8AA                 __ptext21 E5F2                 __ptext13 EC0A  
               __ptext22 EA62                 __ptext14 E62E                 __ptext23 E5A4  
               __ptext15 F0F0                 __ptext24 E56C                 __ptext16 E580  
               __ptext25 E6D2                 __ptext17 E936                 __ptext26 E550  
               __ptext18 E7B2                 __ptext19 EDDE                 __powers_ FF4E  
          ?_Get_Full_ADC 0001            __size_of_main 00EE                 main@Volt 0069  
              printf@exp 005F                printf@val 005B           OpenUSART@spbrg 0001  
         ??_Get_Full_ADC 0003                 scale@scl 0031         __tdiv_to_l_@exp1 000F  
       __tdiv_to_l_@cntr 000E         __tdiv_to_l_@quot 000A         ___lldiv@dividend 0001  
               printf@ap 0055             ?__tdiv_to_l_ 0001              _printf$1010 0052  
       ___lldiv@quotient 0009  
