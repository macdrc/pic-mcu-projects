

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Dec 08 16:11:34 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1
   106                           	psect	text88,global,reloc=2,class=CODE,delta=1
   107                           	psect	text89,global,reloc=2,class=CODE,delta=1
   108                           	psect	text90,global,reloc=2,class=CODE,delta=1
   109                           	psect	text91,global,reloc=2,class=CODE,delta=1
   110                           	psect	text92,global,reloc=2,class=CODE,delta=1
   111                           	psect	text93,global,reloc=2,class=CODE,delta=1
   112                           	psect	text94,global,reloc=2,class=CODE,delta=1
   113                           	psect	text95,global,reloc=2,class=CODE,delta=1
   114                           	psect	text96,global,reloc=2,class=CODE,delta=1
   115                           	psect	text97,global,reloc=2,class=CODE,delta=1
   116                           	psect	text98,global,reloc=2,class=CODE,delta=1
   117                           	psect	text99,global,reloc=2,class=CODE,delta=1
   118                           	psect	text100,global,reloc=2,class=CODE,delta=1
   119                           	psect	text101,global,reloc=2,class=CODE,delta=1
   120                           	psect	text102,global,reloc=2,class=CODE,delta=1
   121                           	psect	text103,global,reloc=2,class=CODE,delta=1
   122                           	psect	text104,global,reloc=2,class=CODE,delta=1
   123                           	psect	text105,global,reloc=2,class=CODE,delta=1
   124                           	psect	text106,global,reloc=2,class=CODE,delta=1
   125                           	psect	text107,global,reloc=2,class=CODE,delta=1
   126                           	psect	text108,global,reloc=2,class=CODE,delta=1
   127                           	psect	text109,global,reloc=2,class=CODE,delta=1
   128                           	psect	text110,global,reloc=2,class=CODE,delta=1
   129                           	psect	text111,global,reloc=2,class=CODE,delta=1
   130                           	psect	text112,global,reloc=2,class=CODE,delta=1
   131                           	psect	text113,global,reloc=2,class=CODE,delta=1
   132                           	psect	text114,global,reloc=2,class=CODE,delta=1
   133                           	psect	text115,global,reloc=2,class=CODE,delta=1
   134                           	psect	text116,global,reloc=2,class=CODE,delta=1
   135                           	psect	text117,global,reloc=2,class=CODE,delta=1
   136                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   137                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   138                           	psect	text119,global,reloc=2,class=CODE,delta=1
   139                           	psect	text120,global,reloc=2,class=CODE,delta=1
   140                           	psect	text121,global,reloc=2,class=CODE,delta=1
   141                           	psect	text122,global,reloc=2,class=CODE,delta=1
   142                           	psect	text123,global,reloc=2,class=CODE,delta=1
   143                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   144                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   145  0000                     
   146                           	psect	idataCOMRAM
   147  003E80                     __pidataCOMRAM:
   148                           	opt stack 0
   149                           
   150                           ;initializer for _heater_set_temp
   151  003E80  4B                 	db	75
   152                           
   153                           	psect	idataBANK0
   154  003264                     __pidataBANK0:
   155                           	opt stack 0
   156                           
   157                           ;initializer for _tempSecond
   158  003264  FF                 	db	255
   159                           
   160                           ;initializer for _wrap
   161  003265  01                 	db	1
   162                           
   163                           ;initializer for _alarm_time
   164  003266  30                 	db	48
   165  003267  30                 	db	48
   166  003268  3A                 	db	58
   167  003269  30                 	db	48
   168  00326A  30                 	db	48
   169  00326B  3A                 	db	58
   170  00326C  30                 	db	48
   171  00326D  30                 	db	48
   172  00326E  00                 	db	0
   173                           
   174                           ;initializer for _date
   175  00326F  30                 	db	48
   176  003270  30                 	db	48
   177  003271  2F                 	db	47
   178  003272  30                 	db	48
   179  003273  30                 	db	48
   180  003274  2F                 	db	47
   181  003275  30                 	db	48
   182  003276  30                 	db	48
   183  003277  00                 	db	0
   184                           
   185                           ;initializer for _setup_alarm_time
   186  003278  30                 	db	48
   187  003279  30                 	db	48
   188  00327A  3A                 	db	58
   189  00327B  30                 	db	48
   190  00327C  30                 	db	48
   191  00327D  3A                 	db	58
   192  00327E  30                 	db	48
   193  00327F  30                 	db	48
   194  003280  00                 	db	0
   195                           
   196                           ;initializer for _setup_date
   197  003281  30                 	db	48
   198  003282  31                 	db	49
   199  003283  2F                 	db	47
   200  003284  30                 	db	48
   201  003285  31                 	db	49
   202  003286  2F                 	db	47
   203  003287  30                 	db	48
   204  003288  30                 	db	48
   205  003289  00                 	db	0
   206                           
   207                           ;initializer for _setup_time
   208  00328A  30                 	db	48
   209  00328B  30                 	db	48
   210  00328C  3A                 	db	58
   211  00328D  30                 	db	48
   212  00328E  30                 	db	48
   213  00328F  3A                 	db	58
   214  003290  30                 	db	48
   215  003291  30                 	db	48
   216  003292  00                 	db	0
   217                           
   218                           ;initializer for _time
   219  003293  30                 	db	48
   220  003294  30                 	db	48
   221  003295  3A                 	db	58
   222  003296  30                 	db	48
   223  003297  30                 	db	48
   224  003298  3A                 	db	58
   225  003299  30                 	db	48
   226  00329A  30                 	db	48
   227  00329B  00                 	db	0
   228                           
   229                           ;initializer for _Volt_Txt
   230  00329C  30                 	db	48
   231  00329D  2E                 	db	46
   232  00329E  30                 	db	48
   233  00329F  30                 	db	48
   234  0032A0  56                 	db	86
   235  0032A1  00                 	db	0
   236                           
   237                           ;initializer for _Heater_Set_Temp_Txt
   238  0032A2  30                 	db	48
   239  0032A3  37                 	db	55
   240  0032A4  35                 	db	53
   241  0032A5  46                 	db	70
   242  0032A6  00                 	db	0
   243                           
   244                           ;initializer for _RPM_Txt
   245  0032A7  30                 	db	48
   246  0032A8  30                 	db	48
   247  0032A9  30                 	db	48
   248  0032AA  30                 	db	48
   249  0032AB  00                 	db	0
   250                           
   251                           ;initializer for _setup_heater_set_text
   252  0032AC  30                 	db	48
   253  0032AD  37                 	db	55
   254  0032AE  35                 	db	53
   255  0032AF  46                 	db	70
   256  0032B0  00                 	db	0
   257                           
   258                           ;initializer for _Alarm_SW_Txt
   259  0032B1  4F                 	db	79
   260  0032B2  46                 	db	70
   261  0032B3  46                 	db	70
   262  0032B4  00                 	db	0
   263                           
   264                           ;initializer for _DC_Txt
   265  0032B5  30                 	db	48
   266  0032B6  30                 	db	48
   267  0032B7  30                 	db	48
   268  0032B8  00                 	db	0
   269                           
   270                           ;initializer for _Heater_SW_Txt
   271  0032B9  4F                 	db	79
   272  0032BA  46                 	db	70
   273  0032BB  46                 	db	70
   274  0032BC  00                 	db	0
   275                           
   276                           ;initializer for _tempC
   277  0032BD  2B                 	db	43
   278  0032BE  32                 	db	50
   279  0032BF  35                 	db	53
   280  0032C0  00                 	db	0
   281                           
   282                           ;initializer for _tempF
   283  0032C1  2B                 	db	43
   284  0032C2  37                 	db	55
   285  0032C3  37                 	db	55
   286  0032C4  00                 	db	0
   287                           
   288                           ;initializer for _RTC_ALARM_Txt
   289  0032C5  30                 	db	48
   290  0032C6  00                 	db	0
   291                           
   292                           	psect	idataBANK1
   293  003432                     __pidataBANK1:
   294                           	opt stack 0
   295                           
   296                           ;initializer for _buffer
   297  003432  45                 	db	69
   298  003433  43                 	db	67
   299  003434  45                 	db	69
   300  003435  33                 	db	51
   301  003436  33                 	db	51
   302  003437  30                 	db	48
   303  003438  31                 	db	49
   304  003439  4C                 	db	76
   305  00343A  20                 	db	32
   306  00343B  46                 	db	70
   307  00343C  27                 	db	39
   308  00343D  32                 	db	50
   309  00343E  32                 	db	50
   310  00343F  20                 	db	32
   311  003440  53                 	db	83
   312  003441  31                 	db	49
   313  003442  20                 	db	32
   314  003443  00                 	db	0
   315  003444  00                 	db	0
   316  003445  00                 	db	0
   317  003446  00                 	db	0
   318  003447  00                 	db	0
   319  003448  00                 	db	0
   320  003449  00                 	db	0
   321  00344A  00                 	db	0
   322  00344B  00                 	db	0
   323  00344C  00                 	db	0
   324  00344D  00                 	db	0
   325  00344E  00                 	db	0
   326  00344F  00                 	db	0
   327  003450  00                 	db	0
   328                           
   329                           ;initializer for _array1
   330  003451  A2                 	db	162
   331  003452  62                 	db	98
   332  003453  E2                 	db	226
   333  003454  22                 	db	34
   334  003455  02                 	db	2
   335  003456  C2                 	db	194
   336  003457  E0                 	db	224
   337  003458  A8                 	db	168
   338  003459  90                 	db	144
   339  00345A  68                 	db	104
   340  00345B  98                 	db	152
   341  00345C  B0                 	db	176
   342  00345D  30                 	db	48
   343  00345E  18                 	db	24
   344  00345F  7A                 	db	122
   345  003460  10                 	db	16
   346  003461  38                 	db	56
   347  003462  5A                 	db	90
   348  003463  42                 	db	66
   349  003464  4A                 	db	74
   350  003465  52                 	db	82
   351                           
   352                           ;initializer for Set_RGB_Color@F4250
   353  003466  0000               	dw	0
   354  003468  0001               	dw	1
   355  00346A  0002               	dw	2
   356  00346C  0003               	dw	3
   357  00346E  0004               	dw	4
   358  003470  0005               	dw	5
   359  003472  0006               	dw	6
   360  003474  0007               	dw	7
   361                           
   362                           ;initializer for _D1
   363  003476  00                 	db	0
   364  003477  01                 	db	1
   365  003478  02                 	db	2
   366  003479  03                 	db	3
   367  00347A  04                 	db	4
   368  00347B  05                 	db	5
   369  00347C  06                 	db	6
   370  00347D  07                 	db	7
   371                           
   372                           ;initializer for _D2
   373  00347E  01                 	db	1
   374  00347F  02                 	db	2
   375  003480  03                 	db	3
   376  003481  04                 	db	4
   377  003482  05                 	db	5
   378  003483  06                 	db	6
   379  003484  07                 	db	7
   380                           
   381                           	psect	mediumconst
   382  00FCC8                     __pmediumconst:
   383                           	opt stack 0
   384  00FCC8  00                 	db	0
   385  00FCC9                     _font:
   386                           	opt stack 0
   387  00FCC9  00                 	db	0
   388  00FCCA  00                 	db	0
   389  00FCCB  00                 	db	0
   390  00FCCC  00                 	db	0
   391  00FCCD  00                 	db	0
   392  00FCCE  00                 	db	0
   393  00FCCF  00                 	db	0
   394  00FCD0  5F                 	db	95
   395  00FCD1  00                 	db	0
   396  00FCD2  00                 	db	0
   397  00FCD3  00                 	db	0
   398  00FCD4  07                 	db	7
   399  00FCD5  00                 	db	0
   400  00FCD6  07                 	db	7
   401  00FCD7  00                 	db	0
   402  00FCD8  14                 	db	20
   403  00FCD9  7F                 	db	127
   404  00FCDA  14                 	db	20
   405  00FCDB  7F                 	db	127
   406  00FCDC  14                 	db	20
   407  00FCDD  24                 	db	36
   408  00FCDE  2A                 	db	42
   409  00FCDF  7F                 	db	127
   410  00FCE0  2A                 	db	42
   411  00FCE1  12                 	db	18
   412  00FCE2  23                 	db	35
   413  00FCE3  13                 	db	19
   414  00FCE4  08                 	db	8
   415  00FCE5  64                 	db	100
   416  00FCE6  62                 	db	98
   417  00FCE7  36                 	db	54
   418  00FCE8  49                 	db	73
   419  00FCE9  56                 	db	86
   420  00FCEA  20                 	db	32
   421  00FCEB  50                 	db	80
   422  00FCEC  00                 	db	0
   423  00FCED  08                 	db	8
   424  00FCEE  07                 	db	7
   425  00FCEF  03                 	db	3
   426  00FCF0  00                 	db	0
   427  00FCF1  00                 	db	0
   428  00FCF2  1C                 	db	28
   429  00FCF3  22                 	db	34
   430  00FCF4  41                 	db	65
   431  00FCF5  00                 	db	0
   432  00FCF6  00                 	db	0
   433  00FCF7  41                 	db	65
   434  00FCF8  22                 	db	34
   435  00FCF9  1C                 	db	28
   436  00FCFA  00                 	db	0
   437  00FCFB  2A                 	db	42
   438  00FCFC  1C                 	db	28
   439  00FCFD  7F                 	db	127
   440  00FCFE  1C                 	db	28
   441  00FCFF  2A                 	db	42
   442  00FD00  08                 	db	8
   443  00FD01  08                 	db	8
   444  00FD02  3E                 	db	62
   445  00FD03  08                 	db	8
   446  00FD04  08                 	db	8
   447  00FD05  00                 	db	0
   448  00FD06  80                 	db	128
   449  00FD07  70                 	db	112
   450  00FD08  30                 	db	48
   451  00FD09  00                 	db	0
   452  00FD0A  08                 	db	8
   453  00FD0B  08                 	db	8
   454  00FD0C  08                 	db	8
   455  00FD0D  08                 	db	8
   456  00FD0E  08                 	db	8
   457  00FD0F  00                 	db	0
   458  00FD10  00                 	db	0
   459  00FD11  60                 	db	96
   460  00FD12  60                 	db	96
   461  00FD13  00                 	db	0
   462  00FD14  20                 	db	32
   463  00FD15  10                 	db	16
   464  00FD16  08                 	db	8
   465  00FD17  04                 	db	4
   466  00FD18  02                 	db	2
   467  00FD19  3E                 	db	62
   468  00FD1A  51                 	db	81
   469  00FD1B  49                 	db	73
   470  00FD1C  45                 	db	69
   471  00FD1D  3E                 	db	62
   472  00FD1E  00                 	db	0
   473  00FD1F  42                 	db	66
   474  00FD20  7F                 	db	127
   475  00FD21  40                 	db	64
   476  00FD22  00                 	db	0
   477  00FD23  72                 	db	114
   478  00FD24  49                 	db	73
   479  00FD25  49                 	db	73
   480  00FD26  49                 	db	73
   481  00FD27  46                 	db	70
   482  00FD28  21                 	db	33
   483  00FD29  41                 	db	65
   484  00FD2A  49                 	db	73
   485  00FD2B  4D                 	db	77
   486  00FD2C  33                 	db	51
   487  00FD2D  18                 	db	24
   488  00FD2E  14                 	db	20
   489  00FD2F  12                 	db	18
   490  00FD30  7F                 	db	127
   491  00FD31  10                 	db	16
   492  00FD32  27                 	db	39
   493  00FD33  45                 	db	69
   494  00FD34  45                 	db	69
   495  00FD35  45                 	db	69
   496  00FD36  39                 	db	57
   497  00FD37  3C                 	db	60
   498  00FD38  4A                 	db	74
   499  00FD39  49                 	db	73
   500  00FD3A  49                 	db	73
   501  00FD3B  31                 	db	49
   502  00FD3C  41                 	db	65
   503  00FD3D  21                 	db	33
   504  00FD3E  11                 	db	17
   505  00FD3F  09                 	db	9
   506  00FD40  07                 	db	7
   507  00FD41  36                 	db	54
   508  00FD42  49                 	db	73
   509  00FD43  49                 	db	73
   510  00FD44  49                 	db	73
   511  00FD45  36                 	db	54
   512  00FD46  46                 	db	70
   513  00FD47  49                 	db	73
   514  00FD48  49                 	db	73
   515  00FD49  29                 	db	41
   516  00FD4A  1E                 	db	30
   517  00FD4B  00                 	db	0
   518  00FD4C  00                 	db	0
   519  00FD4D  14                 	db	20
   520  00FD4E  00                 	db	0
   521  00FD4F  00                 	db	0
   522  00FD50  00                 	db	0
   523  00FD51  40                 	db	64
   524  00FD52  34                 	db	52
   525  00FD53  00                 	db	0
   526  00FD54  00                 	db	0
   527  00FD55  00                 	db	0
   528  00FD56  08                 	db	8
   529  00FD57  14                 	db	20
   530  00FD58  22                 	db	34
   531  00FD59  41                 	db	65
   532  00FD5A  14                 	db	20
   533  00FD5B  14                 	db	20
   534  00FD5C  14                 	db	20
   535  00FD5D  14                 	db	20
   536  00FD5E  14                 	db	20
   537  00FD5F  00                 	db	0
   538  00FD60  41                 	db	65
   539  00FD61  22                 	db	34
   540  00FD62  14                 	db	20
   541  00FD63  08                 	db	8
   542  00FD64  02                 	db	2
   543  00FD65  01                 	db	1
   544  00FD66  59                 	db	89
   545  00FD67  09                 	db	9
   546  00FD68  06                 	db	6
   547  00FD69  3E                 	db	62
   548  00FD6A  41                 	db	65
   549  00FD6B  5D                 	db	93
   550  00FD6C  59                 	db	89
   551  00FD6D  4E                 	db	78
   552  00FD6E  7C                 	db	124
   553  00FD6F  12                 	db	18
   554  00FD70  11                 	db	17
   555  00FD71  12                 	db	18
   556  00FD72  7C                 	db	124
   557  00FD73  7F                 	db	127
   558  00FD74  49                 	db	73
   559  00FD75  49                 	db	73
   560  00FD76  49                 	db	73
   561  00FD77  36                 	db	54
   562  00FD78  3E                 	db	62
   563  00FD79  41                 	db	65
   564  00FD7A  41                 	db	65
   565  00FD7B  41                 	db	65
   566  00FD7C  22                 	db	34
   567  00FD7D  7F                 	db	127
   568  00FD7E  41                 	db	65
   569  00FD7F  41                 	db	65
   570  00FD80  41                 	db	65
   571  00FD81  3E                 	db	62
   572  00FD82  7F                 	db	127
   573  00FD83  49                 	db	73
   574  00FD84  49                 	db	73
   575  00FD85  49                 	db	73
   576  00FD86  41                 	db	65
   577  00FD87  7F                 	db	127
   578  00FD88  09                 	db	9
   579  00FD89  09                 	db	9
   580  00FD8A  09                 	db	9
   581  00FD8B  01                 	db	1
   582  00FD8C  3E                 	db	62
   583  00FD8D  41                 	db	65
   584  00FD8E  41                 	db	65
   585  00FD8F  51                 	db	81
   586  00FD90  73                 	db	115
   587  00FD91  7F                 	db	127
   588  00FD92  08                 	db	8
   589  00FD93  08                 	db	8
   590  00FD94  08                 	db	8
   591  00FD95  7F                 	db	127
   592  00FD96  00                 	db	0
   593  00FD97  41                 	db	65
   594  00FD98  7F                 	db	127
   595  00FD99  41                 	db	65
   596  00FD9A  00                 	db	0
   597  00FD9B  20                 	db	32
   598  00FD9C  40                 	db	64
   599  00FD9D  41                 	db	65
   600  00FD9E  3F                 	db	63
   601  00FD9F  01                 	db	1
   602  00FDA0  7F                 	db	127
   603  00FDA1  08                 	db	8
   604  00FDA2  14                 	db	20
   605  00FDA3  22                 	db	34
   606  00FDA4  41                 	db	65
   607  00FDA5  7F                 	db	127
   608  00FDA6  40                 	db	64
   609  00FDA7  40                 	db	64
   610  00FDA8  40                 	db	64
   611  00FDA9  40                 	db	64
   612  00FDAA  7F                 	db	127
   613  00FDAB  02                 	db	2
   614  00FDAC  1C                 	db	28
   615  00FDAD  02                 	db	2
   616  00FDAE  7F                 	db	127
   617  00FDAF  7F                 	db	127
   618  00FDB0  04                 	db	4
   619  00FDB1  08                 	db	8
   620  00FDB2  10                 	db	16
   621  00FDB3  7F                 	db	127
   622  00FDB4  3E                 	db	62
   623  00FDB5  41                 	db	65
   624  00FDB6  41                 	db	65
   625  00FDB7  41                 	db	65
   626  00FDB8  3E                 	db	62
   627  00FDB9  7F                 	db	127
   628  00FDBA  09                 	db	9
   629  00FDBB  09                 	db	9
   630  00FDBC  09                 	db	9
   631  00FDBD  06                 	db	6
   632  00FDBE  3E                 	db	62
   633  00FDBF  41                 	db	65
   634  00FDC0  51                 	db	81
   635  00FDC1  21                 	db	33
   636  00FDC2  5E                 	db	94
   637  00FDC3  7F                 	db	127
   638  00FDC4  09                 	db	9
   639  00FDC5  19                 	db	25
   640  00FDC6  29                 	db	41
   641  00FDC7  46                 	db	70
   642  00FDC8                     __end_of_font:
   643                           	opt stack 0
   644  00FDC8                     _font2:
   645                           	opt stack 0
   646  00FDC8  26                 	db	38
   647  00FDC9  49                 	db	73
   648  00FDCA  49                 	db	73
   649  00FDCB  49                 	db	73
   650  00FDCC  32                 	db	50
   651  00FDCD  03                 	db	3
   652  00FDCE  01                 	db	1
   653  00FDCF  7F                 	db	127
   654  00FDD0  01                 	db	1
   655  00FDD1  03                 	db	3
   656  00FDD2  3F                 	db	63
   657  00FDD3  40                 	db	64
   658  00FDD4  40                 	db	64
   659  00FDD5  40                 	db	64
   660  00FDD6  3F                 	db	63
   661  00FDD7  1F                 	db	31
   662  00FDD8  20                 	db	32
   663  00FDD9  40                 	db	64
   664  00FDDA  20                 	db	32
   665  00FDDB  1F                 	db	31
   666  00FDDC  3F                 	db	63
   667  00FDDD  40                 	db	64
   668  00FDDE  38                 	db	56
   669  00FDDF  40                 	db	64
   670  00FDE0  3F                 	db	63
   671  00FDE1  63                 	db	99
   672  00FDE2  14                 	db	20
   673  00FDE3  08                 	db	8
   674  00FDE4  14                 	db	20
   675  00FDE5  63                 	db	99
   676  00FDE6  03                 	db	3
   677  00FDE7  04                 	db	4
   678  00FDE8  78                 	db	120
   679  00FDE9  04                 	db	4
   680  00FDEA  03                 	db	3
   681  00FDEB  61                 	db	97
   682  00FDEC  59                 	db	89
   683  00FDED  49                 	db	73
   684  00FDEE  4D                 	db	77
   685  00FDEF  43                 	db	67
   686  00FDF0  00                 	db	0
   687  00FDF1  7F                 	db	127
   688  00FDF2  41                 	db	65
   689  00FDF3  41                 	db	65
   690  00FDF4  41                 	db	65
   691  00FDF5  02                 	db	2
   692  00FDF6  04                 	db	4
   693  00FDF7  08                 	db	8
   694  00FDF8  10                 	db	16
   695  00FDF9  20                 	db	32
   696  00FDFA  00                 	db	0
   697  00FDFB  41                 	db	65
   698  00FDFC  41                 	db	65
   699  00FDFD  41                 	db	65
   700  00FDFE  7F                 	db	127
   701  00FDFF  04                 	db	4
   702  00FE00  02                 	db	2
   703  00FE01  01                 	db	1
   704  00FE02  02                 	db	2
   705  00FE03  04                 	db	4
   706  00FE04  40                 	db	64
   707  00FE05  40                 	db	64
   708  00FE06  40                 	db	64
   709  00FE07  40                 	db	64
   710  00FE08  40                 	db	64
   711  00FE09  00                 	db	0
   712  00FE0A  03                 	db	3
   713  00FE0B  07                 	db	7
   714  00FE0C  08                 	db	8
   715  00FE0D  00                 	db	0
   716  00FE0E  20                 	db	32
   717  00FE0F  54                 	db	84
   718  00FE10  54                 	db	84
   719  00FE11  78                 	db	120
   720  00FE12  40                 	db	64
   721  00FE13  7F                 	db	127
   722  00FE14  28                 	db	40
   723  00FE15  44                 	db	68
   724  00FE16  44                 	db	68
   725  00FE17  38                 	db	56
   726  00FE18  38                 	db	56
   727  00FE19  44                 	db	68
   728  00FE1A  44                 	db	68
   729  00FE1B  44                 	db	68
   730  00FE1C  28                 	db	40
   731  00FE1D  38                 	db	56
   732  00FE1E  44                 	db	68
   733  00FE1F  44                 	db	68
   734  00FE20  28                 	db	40
   735  00FE21  7F                 	db	127
   736  00FE22  38                 	db	56
   737  00FE23  54                 	db	84
   738  00FE24  54                 	db	84
   739  00FE25  54                 	db	84
   740  00FE26  18                 	db	24
   741  00FE27  00                 	db	0
   742  00FE28  08                 	db	8
   743  00FE29  7E                 	db	126
   744  00FE2A  09                 	db	9
   745  00FE2B  02                 	db	2
   746  00FE2C  18                 	db	24
   747  00FE2D  A4                 	db	164
   748  00FE2E  A4                 	db	164
   749  00FE2F  9C                 	db	156
   750  00FE30  78                 	db	120
   751  00FE31  7F                 	db	127
   752  00FE32  08                 	db	8
   753  00FE33  04                 	db	4
   754  00FE34  04                 	db	4
   755  00FE35  78                 	db	120
   756  00FE36  00                 	db	0
   757  00FE37  44                 	db	68
   758  00FE38  7D                 	db	125
   759  00FE39  40                 	db	64
   760  00FE3A  00                 	db	0
   761  00FE3B  20                 	db	32
   762  00FE3C  40                 	db	64
   763  00FE3D  40                 	db	64
   764  00FE3E  3D                 	db	61
   765  00FE3F  00                 	db	0
   766  00FE40  7F                 	db	127
   767  00FE41  10                 	db	16
   768  00FE42  28                 	db	40
   769  00FE43  44                 	db	68
   770  00FE44  00                 	db	0
   771  00FE45  00                 	db	0
   772  00FE46  41                 	db	65
   773  00FE47  7F                 	db	127
   774  00FE48  40                 	db	64
   775  00FE49  00                 	db	0
   776  00FE4A  7C                 	db	124
   777  00FE4B  04                 	db	4
   778  00FE4C  78                 	db	120
   779  00FE4D  04                 	db	4
   780  00FE4E  78                 	db	120
   781  00FE4F  7C                 	db	124
   782  00FE50  08                 	db	8
   783  00FE51  04                 	db	4
   784  00FE52  04                 	db	4
   785  00FE53  78                 	db	120
   786  00FE54  38                 	db	56
   787  00FE55  44                 	db	68
   788  00FE56  44                 	db	68
   789  00FE57  44                 	db	68
   790  00FE58  38                 	db	56
   791  00FE59  FC                 	db	252
   792  00FE5A  18                 	db	24
   793  00FE5B  24                 	db	36
   794  00FE5C  24                 	db	36
   795  00FE5D  18                 	db	24
   796  00FE5E  18                 	db	24
   797  00FE5F  24                 	db	36
   798  00FE60  24                 	db	36
   799  00FE61  18                 	db	24
   800  00FE62  FC                 	db	252
   801  00FE63  7C                 	db	124
   802  00FE64  08                 	db	8
   803  00FE65  04                 	db	4
   804  00FE66  04                 	db	4
   805  00FE67  08                 	db	8
   806  00FE68  48                 	db	72
   807  00FE69  54                 	db	84
   808  00FE6A  54                 	db	84
   809  00FE6B  54                 	db	84
   810  00FE6C  24                 	db	36
   811  00FE6D  04                 	db	4
   812  00FE6E  04                 	db	4
   813  00FE6F  3F                 	db	63
   814  00FE70  44                 	db	68
   815  00FE71  24                 	db	36
   816  00FE72  3C                 	db	60
   817  00FE73  40                 	db	64
   818  00FE74  40                 	db	64
   819  00FE75  20                 	db	32
   820  00FE76  7C                 	db	124
   821  00FE77  1C                 	db	28
   822  00FE78  20                 	db	32
   823  00FE79  40                 	db	64
   824  00FE7A  20                 	db	32
   825  00FE7B  1C                 	db	28
   826  00FE7C  3C                 	db	60
   827  00FE7D  40                 	db	64
   828  00FE7E  30                 	db	48
   829  00FE7F  40                 	db	64
   830  00FE80  3C                 	db	60
   831  00FE81  44                 	db	68
   832  00FE82  28                 	db	40
   833  00FE83  10                 	db	16
   834  00FE84  28                 	db	40
   835  00FE85  44                 	db	68
   836  00FE86  4C                 	db	76
   837  00FE87  90                 	db	144
   838  00FE88  90                 	db	144
   839  00FE89  90                 	db	144
   840  00FE8A  7C                 	db	124
   841  00FE8B  44                 	db	68
   842  00FE8C  64                 	db	100
   843  00FE8D  54                 	db	84
   844  00FE8E  4C                 	db	76
   845  00FE8F  44                 	db	68
   846  00FE90  00                 	db	0
   847  00FE91  08                 	db	8
   848  00FE92  36                 	db	54
   849  00FE93  41                 	db	65
   850  00FE94  00                 	db	0
   851  00FE95  00                 	db	0
   852  00FE96  00                 	db	0
   853  00FE97  77                 	db	119
   854  00FE98  00                 	db	0
   855  00FE99  00                 	db	0
   856  00FE9A  00                 	db	0
   857  00FE9B  41                 	db	65
   858  00FE9C  36                 	db	54
   859  00FE9D  08                 	db	8
   860  00FE9E  00                 	db	0
   861  00FE9F  02                 	db	2
   862  00FEA0  01                 	db	1
   863  00FEA1  02                 	db	2
   864  00FEA2  04                 	db	4
   865  00FEA3  02                 	db	2
   866  00FEA4                     __end_of_font2:
   867                           	opt stack 0
   868  00FEA4                     _dpowers:
   869                           	opt stack 0
   870  00FEA4  0001               	dw	1
   871  00FEA6  000A               	dw	10
   872  00FEA8  0064               	dw	100
   873  00FEAA  03E8               	dw	1000
   874  00FEAC  2710               	dw	10000
   875  00FEAE                     __end_of_dpowers:
   876                           	opt stack 0
   877  00FEAE                     _hexpowers:
   878                           	opt stack 0
   879  00FEAE  0001               	dw	1
   880  00FEB0  0010               	dw	16
   881  00FEB2  0100               	dw	256
   882  00FEB4  1000               	dw	4096
   883  00FEB6                     __end_of_hexpowers:
   884                           	opt stack 0
   885  0000                     _ADCON0	set	4034
   886  0000                     _ADCON0bits	set	4034
   887  0000                     _ADCON1	set	4033
   888  0000                     _ADCON2	set	4032
   889  0000                     _ADRESH	set	4036
   890  0000                     _ADRESL	set	4035
   891  0000                     _CCP1CON	set	4029
   892  0000                     _CCP2CON	set	4026
   893  0000                     _CCPR1L	set	4030
   894  0000                     _CCPR2L	set	4027
   895  0000                     _INTCON2bits	set	4081
   896  0000                     _INTCON3bits	set	4080
   897  0000                     _INTCONbits	set	4082
   898  0000                     _OSCCON	set	4051
   899  0000                     _PIE1bits	set	3997
   900  0000                     _PIR1bits	set	3998
   901  0000                     _PORTA	set	3968
   902  0000                     _PORTAbits	set	3968
   903  0000                     _PORTBbits	set	3969
   904  0000                     _PORTCbits	set	3970
   905  0000                     _PORTD	set	3971
   906  0000                     _PORTDbits	set	3971
   907  0000                     _PORTE	set	3972
   908  0000                     _PORTEbits	set	3972
   909  0000                     _PR2	set	4043
   910  0000                     _RCSTA	set	4011
   911  0000                     _RCSTAbits	set	4011
   912  0000                     _SPBRG	set	4015
   913  0000                     _SPBRGH	set	4016
   914  0000                     _SSPBUF	set	4041
   915  0000                     _SSPCON1	set	4038
   916  0000                     _SSPSTAT	set	4039
   917  0000                     _SSPSTATbits	set	4039
   918  0000                     _T0CON	set	4053
   919  0000                     _T0CONbits	set	4053
   920  0000                     _T1CON	set	4045
   921  0000                     _T1CONbits	set	4045
   922  0000                     _T2CON	set	4042
   923  0000                     _T3CON	set	4017
   924  0000                     _TMR0H	set	4055
   925  0000                     _TMR0L	set	4054
   926  0000                     _TMR1H	set	4047
   927  0000                     _TMR1L	set	4046
   928  0000                     _TMR3L	set	4018
   929  0000                     _TRISA	set	3986
   930  0000                     _TRISAbits	set	3986
   931  0000                     _TRISB	set	3987
   932  0000                     _TRISBbits	set	3987
   933  0000                     _TRISC	set	3988
   934  0000                     _TRISCbits	set	3988
   935  0000                     _TRISD	set	3989
   936  0000                     _TRISE	set	3990
   937  0000                     _TXREG	set	4013
   938  0000                     _TXSTA	set	4012
   939  0000                     _TXSTAbits	set	4012
   940  0000                     _RBPU	set	32655
   941  0000                     _TRMT	set	32097
   942  00FEB6                     STR_1:
   943  00FEB6  25                 	db	37
   944  00FEB7  30                 	db	48	;'0'
   945  00FEB8  32                 	db	50	;'2'
   946  00FEB9  78                 	db	120	;'x'
   947  00FEBA  3A                 	db	58	;':'
   948  00FEBB  25                 	db	37
   949  00FEBC  30                 	db	48	;'0'
   950  00FEBD  32                 	db	50	;'2'
   951  00FEBE  78                 	db	120	;'x'
   952  00FEBF  3A                 	db	58	;':'
   953  00FEC0  25                 	db	37
   954  00FEC1  30                 	db	48	;'0'
   955  00FEC2  32                 	db	50	;'2'
   956  00FEC3  78                 	db	120	;'x'
   957  00FEC4  20                 	db	32
   958  00FEC5  25                 	db	37
   959  00FEC6  30                 	db	48	;'0'
   960  00FEC7  32                 	db	50	;'2'
   961  00FEC8  78                 	db	120	;'x'
   962  00FEC9  2F                 	db	47
   963  00FECA  25                 	db	37
   964  00FECB  30                 	db	48	;'0'
   965  00FECC  32                 	db	50	;'2'
   966  00FECD  78                 	db	120	;'x'
   967  00FECE  2F                 	db	47
   968  00FECF  25                 	db	37
   969  00FED0  30                 	db	48	;'0'
   970  00FED1  32                 	db	50	;'2'
   971  00FED2  78                 	db	120	;'x'
   972  00FED3  00                 	db	0
   973  00FED4                     STR_3:
   974  00FED4  61                 	db	97	;'a'
   975  00FED5  6C                 	db	108	;'l'
   976  00FED6  61                 	db	97	;'a'
   977  00FED7  72                 	db	114	;'r'
   978  00FED8  6D                 	db	109	;'m'
   979  00FED9  20                 	db	32
   980  00FEDA  3D                 	db	61	;'='
   981  00FEDB  20                 	db	32
   982  00FEDC  25                 	db	37
   983  00FEDD  64                 	db	100	;'d'
   984  00FEDE  20                 	db	32
   985  00FEDF  48                 	db	72	;'H'
   986  00FEE0  65                 	db	101	;'e'
   987  00FEE1  61                 	db	97	;'a'
   988  00FEE2  74                 	db	116	;'t'
   989  00FEE3  65                 	db	101	;'e'
   990  00FEE4  72                 	db	114	;'r'
   991  00FEE5  20                 	db	32
   992  00FEE6  3D                 	db	61	;'='
   993  00FEE7  20                 	db	32
   994  00FEE8  25                 	db	37
   995  00FEE9  64                 	db	100	;'d'
   996  00FEEA  20                 	db	32
   997  00FEEB  00                 	db	0
   998  00FEEC                     STR_36:
   999  00FEEC  43                 	db	67	;'C'
  1000  00FEED  61                 	db	97	;'a'
  1001  00FEEE  6E                 	db	110	;'n'
  1002  00FEEF  6E                 	db	110	;'n'
  1003  00FEF0  6F                 	db	111	;'o'
  1004  00FEF1  74                 	db	116	;'t'
  1005  00FEF2  20                 	db	32
  1006  00FEF3  66                 	db	102	;'f'
  1007  00FEF4  69                 	db	105	;'i'
  1008  00FEF5  6E                 	db	110	;'n'
  1009  00FEF6  64                 	db	100	;'d'
  1010  00FEF7  20                 	db	32
  1011  00FEF8  62                 	db	98	;'b'
  1012  00FEF9  75                 	db	117	;'u'
  1013  00FEFA  74                 	db	116	;'t'
  1014  00FEFB  74                 	db	116	;'t'
  1015  00FEFC  6F                 	db	111	;'o'
  1016  00FEFD  6E                 	db	110	;'n'
  1017  00FEFE  20                 	db	32
  1018  00FEFF  0D                 	db	13
  1019  00FF00  0A                 	db	10
  1020  00FF01  00                 	db	0
  1021  00FF02                     STR_2:
  1022  00FF02  20                 	db	32
  1023  00FF03  54                 	db	84	;'T'
  1024  00FF04  65                 	db	101	;'e'
  1025  00FF05  6D                 	db	109	;'m'
  1026  00FF06  70                 	db	112	;'p'
  1027  00FF07  20                 	db	32
  1028  00FF08  3D                 	db	61	;'='
  1029  00FF09  20                 	db	32
  1030  00FF0A  25                 	db	37
  1031  00FF0B  64                 	db	100	;'d'
  1032  00FF0C  20                 	db	32
  1033  00FF0D  43                 	db	67	;'C'
  1034  00FF0E  20                 	db	32
  1035  00FF0F  3D                 	db	61	;'='
  1036  00FF10  20                 	db	32
  1037  00FF11  25                 	db	37
  1038  00FF12  64                 	db	100	;'d'
  1039  00FF13  20                 	db	32
  1040  00FF14  46                 	db	70	;'F'
  1041  00FF15  20                 	db	32
  1042  00FF16  00                 	db	0
  1043  00FF17                     STR_4:
  1044  00FF17  52                 	db	82	;'R'
  1045  00FF18  50                 	db	80	;'P'
  1046  00FF19  4D                 	db	77	;'M'
  1047  00FF1A  20                 	db	32
  1048  00FF1B  3D                 	db	61	;'='
  1049  00FF1C  20                 	db	32
  1050  00FF1D  25                 	db	37
  1051  00FF1E  64                 	db	100	;'d'
  1052  00FF1F  20                 	db	32
  1053  00FF20  20                 	db	32
  1054  00FF21  64                 	db	100	;'d'
  1055  00FF22  63                 	db	99	;'c'
  1056  00FF23  20                 	db	32
  1057  00FF24  3D                 	db	61	;'='
  1058  00FF25  20                 	db	32
  1059  00FF26  25                 	db	37
  1060  00FF27  64                 	db	100	;'d'
  1061  00FF28  0D                 	db	13
  1062  00FF29  0A                 	db	10
  1063  00FF2A  00                 	db	0
  1064  00FF2B                     STR_5:
  1065  00FF2B  45                 	db	69	;'E'
  1066  00FF2C  43                 	db	67	;'C'
  1067  00FF2D  45                 	db	69	;'E'
  1068  00FF2E  33                 	db	51	;'3'
  1069  00FF2F  33                 	db	51	;'3'
  1070  00FF30  30                 	db	48	;'0'
  1071  00FF31  31                 	db	49	;'1'
  1072  00FF32  4C                 	db	76	;'L'
  1073  00FF33  20                 	db	32
  1074  00FF34  46                 	db	70	;'F'
  1075  00FF35  27                 	db	39
  1076  00FF36  32                 	db	50	;'2'
  1077  00FF37  32                 	db	50	;'2'
  1078  00FF38  20                 	db	32
  1079  00FF39  53                 	db	83	;'S'
  1080  00FF3A  31                 	db	49	;'1'
  1081  00FF3B  00                 	db	0
  1082  00FF3C  00                 	db	0
  1083  00FF3D                     STR_37:
  1084  00FF3D  30                 	db	48	;'0'
  1085  00FF3E  31                 	db	49	;'1'
  1086  00FF3F  32                 	db	50	;'2'
  1087  00FF40  33                 	db	51	;'3'
  1088  00FF41  34                 	db	52	;'4'
  1089  00FF42  35                 	db	53	;'5'
  1090  00FF43  36                 	db	54	;'6'
  1091  00FF44  37                 	db	55	;'7'
  1092  00FF45  38                 	db	56	;'8'
  1093  00FF46  39                 	db	57	;'9'
  1094  00FF47  61                 	db	97	;'a'
  1095  00FF48  62                 	db	98	;'b'
  1096  00FF49  63                 	db	99	;'c'
  1097  00FF4A  64                 	db	100	;'d'
  1098  00FF4B  65                 	db	101	;'e'
  1099  00FF4C  66                 	db	102	;'f'
  1100  00FF4D  00                 	db	0
  1101  00FF4E                     STR_23:
  1102  00FF4E  45                 	db	69	;'E'
  1103  00FF4F  43                 	db	67	;'C'
  1104  00FF50  45                 	db	69	;'E'
  1105  00FF51  33                 	db	51	;'3'
  1106  00FF52  33                 	db	51	;'3'
  1107  00FF53  30                 	db	48	;'0'
  1108  00FF54  31                 	db	49	;'1'
  1109  00FF55  4C                 	db	76	;'L'
  1110  00FF56  20                 	db	32
  1111  00FF57  46                 	db	70	;'F'
  1112  00FF58  27                 	db	39
  1113  00FF59  32                 	db	50	;'2'
  1114  00FF5A  32                 	db	50	;'2'
  1115  00FF5B  20                 	db	32
  1116  00FF5C  53                 	db	83	;'S'
  1117  00FF5D  34                 	db	52	;'4'
  1118  00FF5E  00                 	db	0
  1119  00FF5F                     STR_31:
  1120  00FF5F  53                 	db	83	;'S'
  1121  00FF60  65                 	db	101	;'e'
  1122  00FF61  74                 	db	116	;'t'
  1123  00FF62  20                 	db	32
  1124  00FF63  48                 	db	72	;'H'
  1125  00FF64  65                 	db	101	;'e'
  1126  00FF65  61                 	db	97	;'a'
  1127  00FF66  74                 	db	116	;'t'
  1128  00FF67  65                 	db	101	;'e'
  1129  00FF68  72                 	db	114	;'r'
  1130  00FF69  20                 	db	32
  1131  00FF6A  54                 	db	84	;'T'
  1132  00FF6B  65                 	db	101	;'e'
  1133  00FF6C  6D                 	db	109	;'m'
  1134  00FF6D  70                 	db	112	;'p'
  1135  00FF6E  00                 	db	0
  1136  00FF6F                     STR_6:
  1137  00FF6F  54                 	db	84	;'T'
  1138  00FF70  65                 	db	101	;'e'
  1139  00FF71  6D                 	db	109	;'m'
  1140  00FF72  70                 	db	112	;'p'
  1141  00FF73  65                 	db	101	;'e'
  1142  00FF74  72                 	db	114	;'r'
  1143  00FF75  61                 	db	97	;'a'
  1144  00FF76  74                 	db	116	;'t'
  1145  00FF77  75                 	db	117	;'u'
  1146  00FF78  72                 	db	114	;'r'
  1147  00FF79  65                 	db	101	;'e'
  1148  00FF7A  3A                 	db	58	;':'
  1149  00FF7B  00                 	db	0
  1150  00FF7C                     STR_13:
  1151  00FF7C  48                 	db	72	;'H'
  1152  00FF7D  54                 	db	84	;'T'
  1153  00FF7E  52                 	db	82	;'R'
  1154  00FF7F  20                 	db	32
  1155  00FF80  53                 	db	83	;'S'
  1156  00FF81  65                 	db	101	;'e'
  1157  00FF82  74                 	db	116	;'t'
  1158  00FF83  20                 	db	32
  1159  00FF84  54                 	db	84	;'T'
  1160  00FF85  65                 	db	101	;'e'
  1161  00FF86  6D                 	db	109	;'m'
  1162  00FF87  70                 	db	112	;'p'
  1163  00FF88  00                 	db	0
  1164  00FF89                     STR_33:
  1165  00FF89  54                 	db	84	;'T'
  1166  00FF8A  69                 	db	105	;'i'
  1167  00FF8B  6D                 	db	109	;'m'
  1168  00FF8C  65                 	db	101	;'e'
  1169  00FF8D  20                 	db	32
  1170  00FF8E  53                 	db	83	;'S'
  1171  00FF8F  65                 	db	101	;'e'
  1172  00FF90  74                 	db	116	;'t'
  1173  00FF91  75                 	db	117	;'u'
  1174  00FF92  70                 	db	112	;'p'
  1175  00FF93  00                 	db	0
  1176  00FF94  00                 	db	0
  1177  00FF95                     STR_29:
  1178  00FF95  20                 	db	32
  1179  00FF96  20                 	db	32
  1180  00FF97  48                 	db	72	;'H'
  1181  00FF98  65                 	db	101	;'e'
  1182  00FF99  61                 	db	97	;'a'
  1183  00FF9A  74                 	db	116	;'t'
  1184  00FF9B  65                 	db	101	;'e'
  1185  00FF9C  72                 	db	114	;'r'
  1186  00FF9D  00                 	db	0
  1187  00FF9E  20                 	db	32
  1188  00FF9F  00                 	db	0
  1189  00FFA0                     STR_27:
  1190  00FFA0  25                 	db	37
  1191  00FFA1  78                 	db	120	;'x'
  1192  00FFA2  3A                 	db	58	;':'
  1193  00FFA3  25                 	db	37
  1194  00FFA4  78                 	db	120	;'x'
  1195  00FFA5  3A                 	db	58	;':'
  1196  00FFA6  25                 	db	37
  1197  00FFA7  78                 	db	120	;'x'
  1198  00FFA8  0D                 	db	13
  1199  00FFA9  0A                 	db	10
  1200  00FFAA  00                 	db	0
  1201  00FFAB                     STR_11:
  1202  00FFAB  41                 	db	65	;'A'
  1203  00FFAC  6C                 	db	108	;'l'
  1204  00FFAD  61                 	db	97	;'a'
  1205  00FFAE  72                 	db	114	;'r'
  1206  00FFAF  6D                 	db	109	;'m'
  1207  00FFB0  20                 	db	32
  1208  00FFB1  54                 	db	84	;'T'
  1209  00FFB2  69                 	db	105	;'i'
  1210  00FFB3  6D                 	db	109	;'m'
  1211  00FFB4  65                 	db	101	;'e'
  1212  00FFB5  00                 	db	0
  1213  00FFB6                     STR_30:
  1214  00FFB6  20                 	db	32
  1215  00FFB7  20                 	db	32
  1216  00FFB8  53                 	db	83	;'S'
  1217  00FFB9  65                 	db	101	;'e'
  1218  00FFBA  74                 	db	116	;'t'
  1219  00FFBB  75                 	db	117	;'u'
  1220  00FFBC  70                 	db	112	;'p'
  1221  00FFBD  00                 	db	0
  1222  00FFBE  20                 	db	32
  1223  00FFBF  00                 	db	0
  1224  00FFC0                     STR_12:
  1225  00FFC0  41                 	db	65	;'A'
  1226  00FFC1  6C                 	db	108	;'l'
  1227  00FFC2  61                 	db	97	;'a'
  1228  00FFC3  72                 	db	114	;'r'
  1229  00FFC4  6D                 	db	109	;'m'
  1230  00FFC5  20                 	db	32
  1231  00FFC6  53                 	db	83	;'S'
  1232  00FFC7  57                 	db	87	;'W'
  1233  00FFC8  00                 	db	0
  1234  00FFC9                     STR_24:
  1235  00FFC9  20                 	db	32
  1236  00FFCA  20                 	db	32
  1237  00FFCB  41                 	db	65	;'A'
  1238  00FFCC  6C                 	db	108	;'l'
  1239  00FFCD  61                 	db	97	;'a'
  1240  00FFCE  72                 	db	114	;'r'
  1241  00FFCF  6D                 	db	109	;'m'
  1242  00FFD0  00                 	db	0
  1243  00FFD1                     STR_25:
  1244  00FFD1  20                 	db	32
  1245  00FFD2  20                 	db	32
  1246  00FFD3  53                 	db	83	;'S'
  1247  00FFD4  65                 	db	101	;'e'
  1248  00FFD5  74                 	db	116	;'t'
  1249  00FFD6  75                 	db	117	;'u'
  1250  00FFD7  70                 	db	112	;'p'
  1251  00FFD8  00                 	db	0
  1252  00FFD9                     STR_14:
  1253  00FFD9  48                 	db	72	;'H'
  1254  00FFDA  54                 	db	84	;'T'
  1255  00FFDB  52                 	db	82	;'R'
  1256  00FFDC  20                 	db	32
  1257  00FFDD  53                 	db	83	;'S'
  1258  00FFDE  57                 	db	87	;'W'
  1259  00FFDF  00                 	db	0
  1260  00FFE0                     STR_10:
  1261  00FFE0  44                 	db	68	;'D'
  1262  00FFE1  61                 	db	97	;'a'
  1263  00FFE2  74                 	db	116	;'t'
  1264  00FFE3  65                 	db	101	;'e'
  1265  00FFE4  00                 	db	0
  1266  00FFE5                     STR_17:
  1267  00FFE5  56                 	db	86	;'V'
  1268  00FFE6  6F                 	db	111	;'o'
  1269  00FFE7  6C                 	db	108	;'l'
  1270  00FFE8  74                 	db	116	;'t'
  1271  00FFE9  00                 	db	0
  1272  00FFEA                     STR_19:
  1273  00FFEA  4F                 	db	79	;'O'
  1274  00FFEB  4E                 	db	78	;'N'
  1275  00FFEC  20                 	db	32
  1276  00FFED  00                 	db	0
  1277  00FFEE                     STR_20:
  1278  00FFEE  4F                 	db	79	;'O'
  1279  00FFEF  46                 	db	70	;'F'
  1280  00FFF0  46                 	db	70	;'F'
  1281  00FFF1  00                 	db	0
  1282  00FFF2                     STR_18:
  1283  00FFF2  52                 	db	82	;'R'
  1284  00FFF3  50                 	db	80	;'P'
  1285  00FFF4  4D                 	db	77	;'M'
  1286  00FFF5  00                 	db	0
  1287  00FFF6                     STR_7:
  1288  00FFF6  43                 	db	67	;'C'
  1289  00FFF7  2F                 	db	47
  1290  00FFF8  00                 	db	0
  1291  00FFF9                     STR_15:
  1292  00FFF9  44                 	db	68	;'D'
  1293  00FFFA  43                 	db	67	;'C'
  1294  00FFFB  00                 	db	0
  1295  00FFFC                     STR_16:
  1296  00FFFC  52                 	db	82	;'R'
  1297  00FFFD  4D                 	db	77	;'M'
  1298  00FFFE  00                 	db	0
  1299  0000                     
  1300                           ; #config settings
  1301  00FFFF  00                 	db	0	; dummy byte at the end
  1302  0000                     
  1303                           	psect	cinit
  1304  003044                     __pcinit:
  1305                           	opt stack 0
  1306  003044                     start_initialization:
  1307                           	opt stack 0
  1308  003044                     __initialization:
  1309                           	opt stack 0
  1310                           
  1311                           ; Clear objects allocated to BANK0 (26 bytes)
  1312  003044  EE00  F0E3         	lfsr	0,__pbssBANK0
  1313  003048  0E1A               	movlw	26
  1314  00304A                     clear_0:
  1315  00304A  6AEE               	clrf	postinc0,c
  1316  00304C  06E8               	decf	wreg,f,c
  1317  00304E  E1FD               	bnz	clear_0
  1318                           
  1319                           ; Clear objects allocated to COMRAM (43 bytes)
  1320  003050  EE00  F044         	lfsr	0,__pbssCOMRAM
  1321  003054  0E2B               	movlw	43
  1322  003056                     clear_1:
  1323  003056  6AEE               	clrf	postinc0,c
  1324  003058  06E8               	decf	wreg,f,c
  1325  00305A  E1FD               	bnz	clear_1
  1326                           
  1327                           ; Initialize objects allocated to BANK1 (83 bytes)
  1328                           ; load TBLPTR registers with __pidataBANK1
  1329  00305C  0E32               	movlw	low __pidataBANK1
  1330  00305E  6EF6               	movwf	tblptrl,c
  1331  003060  0E34               	movlw	high __pidataBANK1
  1332  003062  6EF7               	movwf	tblptrh,c
  1333  003064  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1334  003066  6EF8               	movwf	tblptru,c
  1335  003068  EE01  F000         	lfsr	0,__pdataBANK1
  1336  00306C  EE10 F053          	lfsr	1,83
  1337  003070                     copy_data0:
  1338  003070  0009               	tblrd		*+
  1339  003072  CFF5 FFEE          	movff	tablat,postinc0
  1340  003076  50E5               	movf	postdec1,w,c
  1341  003078  50E1               	movf	fsr1l,w,c
  1342  00307A  E1FA               	bnz	copy_data0
  1343                           
  1344                           ; Initialize objects allocated to BANK0 (99 bytes)
  1345                           ; load TBLPTR registers with __pidataBANK0
  1346  00307C  0E64               	movlw	low __pidataBANK0
  1347  00307E  6EF6               	movwf	tblptrl,c
  1348  003080  0E32               	movlw	high __pidataBANK0
  1349  003082  6EF7               	movwf	tblptrh,c
  1350  003084  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1351  003086  6EF8               	movwf	tblptru,c
  1352  003088  EE00  F080         	lfsr	0,__pdataBANK0
  1353  00308C  EE10 F063          	lfsr	1,99
  1354  003090                     copy_data1:
  1355  003090  0009               	tblrd		*+
  1356  003092  CFF5 FFEE          	movff	tablat,postinc0
  1357  003096  50E5               	movf	postdec1,w,c
  1358  003098  50E1               	movf	fsr1l,w,c
  1359  00309A  E1FA               	bnz	copy_data1
  1360                           
  1361                           ; Initialize objects allocated to COMRAM (1 bytes)
  1362                           ; load TBLPTR registers with __pidataCOMRAM
  1363  00309C  0E80               	movlw	low __pidataCOMRAM
  1364  00309E  6EF6               	movwf	tblptrl,c
  1365  0030A0  0E3E               	movlw	high __pidataCOMRAM
  1366  0030A2  6EF7               	movwf	tblptrh,c
  1367  0030A4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1368  0030A6  6EF8               	movwf	tblptru,c
  1369  0030A8  0009               	tblrd		*+	;fetch initializer
  1370  0030AA  CFF5 F06F          	movff	tablat,__pdataCOMRAM
  1371  0030AE                     end_of_initialization:
  1372                           	opt stack 0
  1373  0030AE                     __end_of__initialization:
  1374                           	opt stack 0
  1375  0030AE  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1376  0030B0  6EF8               	movwf	tblptru,c
  1377  0030B2  0100               	movlb	0
  1378  0030B4  EFB0  F006         	goto	_main	;jump to C main() function
  1379                           tblptru	equ	0xFF8
  1380                           tblptrh	equ	0xFF7
  1381                           tblptrl	equ	0xFF6
  1382                           tablat	equ	0xFF5
  1383                           postinc0	equ	0xFEE
  1384                           wreg	equ	0xFE8
  1385                           postdec1	equ	0xFE5
  1386                           fsr1l	equ	0xFE1
  1387                           
  1388                           	psect	bssCOMRAM
  1389  000044                     __pbssCOMRAM:
  1390                           	opt stack 0
  1391  000044                     _ALARMEN:
  1392                           	opt stack 0
  1393  000044                     	ds	2
  1394  000046                     _DS1621_tempC:
  1395                           	opt stack 0
  1396  000046                     	ds	2
  1397  000048                     _DS1621_tempF:
  1398                           	opt stack 0
  1399  000048                     	ds	2
  1400  00004A                     _Time_Elapsed:
  1401                           	opt stack 0
  1402  00004A                     	ds	2
  1403  00004C                     _rpm:
  1404                           	opt stack 0
  1405  00004C                     	ds	2
  1406  00004E                     _txt:
  1407                           	opt stack 0
  1408  00004E                     	ds	2
  1409  000050                     _HEATER:
  1410                           	opt stack 0
  1411  000050                     	ds	1
  1412  000051                     _Nec_code1:
  1413                           	opt stack 0
  1414  000051                     	ds	1
  1415  000052                     _Nec_state:
  1416                           	opt stack 0
  1417  000052                     	ds	1
  1418  000053                     _Select_Alarm_Field:
  1419                           	opt stack 0
  1420  000053                     	ds	1
  1421  000054                     _Select_Field:
  1422                           	opt stack 0
  1423  000054                     	ds	1
  1424  000055                     __tft_type:
  1425                           	opt stack 0
  1426  000055                     	ds	1
  1427  000056                     _alarm_date:
  1428                           	opt stack 0
  1429  000056                     	ds	1
  1430  000057                     _alarm_hour:
  1431                           	opt stack 0
  1432  000057                     	ds	1
  1433  000058                     _alarm_minute:
  1434                           	opt stack 0
  1435  000058                     	ds	1
  1436  000059                     _alarm_second:
  1437                           	opt stack 0
  1438  000059                     	ds	1
  1439  00005A                     _colstart:
  1440                           	opt stack 0
  1441  00005A                     	ds	1
  1442  00005B                     _day:
  1443                           	opt stack 0
  1444  00005B                     	ds	1
  1445  00005C                     _dow:
  1446                           	opt stack 0
  1447  00005C                     	ds	1
  1448  00005D                     _duty_cycle:
  1449                           	opt stack 0
  1450  00005D                     	ds	1
  1451  00005E                     _found:
  1452                           	opt stack 0
  1453  00005E                     	ds	1
  1454  00005F                     _hour:
  1455                           	opt stack 0
  1456  00005F                     	ds	1
  1457  000060                     _minute:
  1458                           	opt stack 0
  1459  000060                     	ds	1
  1460  000061                     _month:
  1461                           	opt stack 0
  1462  000061                     	ds	1
  1463  000062                     _rowstart:
  1464                           	opt stack 0
  1465  000062                     	ds	1
  1466  000063                     _second:
  1467                           	opt stack 0
  1468  000063                     	ds	1
  1469  000064                     _setup_alarm_hour:
  1470                           	opt stack 0
  1471  000064                     	ds	1
  1472  000065                     _setup_alarm_minute:
  1473                           	opt stack 0
  1474  000065                     	ds	1
  1475  000066                     _setup_alarm_second:
  1476                           	opt stack 0
  1477  000066                     	ds	1
  1478  000067                     _setup_day:
  1479                           	opt stack 0
  1480  000067                     	ds	1
  1481  000068                     _setup_heater_set_temp:
  1482                           	opt stack 0
  1483  000068                     	ds	1
  1484  000069                     _setup_hour:
  1485                           	opt stack 0
  1486  000069                     	ds	1
  1487  00006A                     _setup_minute:
  1488                           	opt stack 0
  1489  00006A                     	ds	1
  1490  00006B                     _setup_month:
  1491                           	opt stack 0
  1492  00006B                     	ds	1
  1493  00006C                     _setup_second:
  1494                           	opt stack 0
  1495  00006C                     	ds	1
  1496  00006D                     _setup_year:
  1497                           	opt stack 0
  1498  00006D                     	ds	1
  1499  00006E                     _year:
  1500                           	opt stack 0
  1501  00006E                     	ds	1
  1502                           tblptru	equ	0xFF8
  1503                           tblptrh	equ	0xFF7
  1504                           tblptrl	equ	0xFF6
  1505                           tablat	equ	0xFF5
  1506                           postinc0	equ	0xFEE
  1507                           wreg	equ	0xFE8
  1508                           postdec1	equ	0xFE5
  1509                           fsr1l	equ	0xFE1
  1510                           
  1511                           	psect	dataCOMRAM
  1512  00006F                     __pdataCOMRAM:
  1513                           	opt stack 0
  1514  00006F                     _heater_set_temp:
  1515                           	opt stack 0
  1516  00006F                     	ds	1
  1517                           tblptru	equ	0xFF8
  1518                           tblptrh	equ	0xFF7
  1519                           tblptrl	equ	0xFF6
  1520                           tablat	equ	0xFF5
  1521                           postinc0	equ	0xFEE
  1522                           wreg	equ	0xFE8
  1523                           postdec1	equ	0xFE5
  1524                           fsr1l	equ	0xFE1
  1525                           
  1526                           	psect	bssBANK0
  1527  0000E3                     __pbssBANK0:
  1528                           	opt stack 0
  1529  0000E3                     _Nec_code:
  1530                           	opt stack 0
  1531  0000E3                     	ds	4
  1532  0000E7                     _volt:
  1533                           	opt stack 0
  1534  0000E7                     	ds	3
  1535  0000EA                     _MATCHED:
  1536                           	opt stack 0
  1537  0000EA                     	ds	2
  1538  0000EC                     _alarm_mode:
  1539                           	opt stack 0
  1540  0000EC                     	ds	2
  1541  0000EE                     _color:
  1542                           	opt stack 0
  1543  0000EE                     	ds	2
  1544  0000F0                     _nbr:
  1545                           	opt stack 0
  1546  0000F0                     	ds	2
  1547  0000F2                     _nec_ok:
  1548                           	opt stack 0
  1549  0000F2                     	ds	2
  1550  0000F4                     _rps:
  1551                           	opt stack 0
  1552  0000F4                     	ds	2
  1553  0000F6                     _INT1_flag:
  1554                           	opt stack 0
  1555  0000F6                     	ds	1
  1556  0000F7                     _INT2_flag:
  1557                           	opt stack 0
  1558  0000F7                     	ds	1
  1559  0000F8                     _In_Alarm_Time_Setup:
  1560                           	opt stack 0
  1561  0000F8                     	ds	1
  1562  0000F9                     _In_Heater_Temp_Setup:
  1563                           	opt stack 0
  1564  0000F9                     	ds	1
  1565  0000FA                     _In_Time_Setup:
  1566                           	opt stack 0
  1567  0000FA                     	ds	1
  1568  0000FB                     _Select_Heater_Temp_Field:
  1569                           	opt stack 0
  1570  0000FB                     	ds	1
  1571  0000FC                     _bit_count:
  1572                           	opt stack 0
  1573  0000FC                     	ds	1
  1574                           tblptru	equ	0xFF8
  1575                           tblptrh	equ	0xFF7
  1576                           tblptrl	equ	0xFF6
  1577                           tablat	equ	0xFF5
  1578                           postinc0	equ	0xFEE
  1579                           wreg	equ	0xFE8
  1580                           postdec1	equ	0xFE5
  1581                           fsr1l	equ	0xFE1
  1582                           
  1583                           	psect	dataBANK0
  1584  000080                     __pdataBANK0:
  1585                           	opt stack 0
  1586  000080                     _tempSecond:
  1587                           	opt stack 0
  1588  000080                     	ds	1
  1589  000081                     _wrap:
  1590                           	opt stack 0
  1591  000081                     	ds	1
  1592  000082                     _alarm_time:
  1593                           	opt stack 0
  1594  000082                     	ds	9
  1595  00008B                     _date:
  1596                           	opt stack 0
  1597  00008B                     	ds	9
  1598  000094                     _setup_alarm_time:
  1599                           	opt stack 0
  1600  000094                     	ds	9
  1601  00009D                     _setup_date:
  1602                           	opt stack 0
  1603  00009D                     	ds	9
  1604  0000A6                     _setup_time:
  1605                           	opt stack 0
  1606  0000A6                     	ds	9
  1607  0000AF                     _time:
  1608                           	opt stack 0
  1609  0000AF                     	ds	9
  1610  0000B8                     _Volt_Txt:
  1611                           	opt stack 0
  1612  0000B8                     	ds	6
  1613  0000BE                     _Heater_Set_Temp_Txt:
  1614                           	opt stack 0
  1615  0000BE                     	ds	5
  1616  0000C3                     _RPM_Txt:
  1617                           	opt stack 0
  1618  0000C3                     	ds	5
  1619  0000C8                     _setup_heater_set_text:
  1620                           	opt stack 0
  1621  0000C8                     	ds	5
  1622  0000CD                     _Alarm_SW_Txt:
  1623                           	opt stack 0
  1624  0000CD                     	ds	4
  1625  0000D1                     _DC_Txt:
  1626                           	opt stack 0
  1627  0000D1                     	ds	4
  1628  0000D5                     _Heater_SW_Txt:
  1629                           	opt stack 0
  1630  0000D5                     	ds	4
  1631  0000D9                     _tempC:
  1632                           	opt stack 0
  1633  0000D9                     	ds	4
  1634  0000DD                     _tempF:
  1635                           	opt stack 0
  1636  0000DD                     	ds	4
  1637  0000E1                     _RTC_ALARM_Txt:
  1638                           	opt stack 0
  1639  0000E1                     	ds	2
  1640                           tblptru	equ	0xFF8
  1641                           tblptrh	equ	0xFF7
  1642                           tblptrl	equ	0xFF6
  1643                           tablat	equ	0xFF5
  1644                           postinc0	equ	0xFEE
  1645                           wreg	equ	0xFE8
  1646                           postdec1	equ	0xFE5
  1647                           fsr1l	equ	0xFE1
  1648                           
  1649                           	psect	dataBANK1
  1650  000100                     __pdataBANK1:
  1651                           	opt stack 0
  1652  000100                     _buffer:
  1653                           	opt stack 0
  1654  000100                     	ds	31
  1655  00011F                     _array1:
  1656                           	opt stack 0
  1657  00011F                     	ds	21
  1658  000134                     Set_RGB_Color@F4250:
  1659                           	opt stack 0
  1660  000134                     	ds	16
  1661  000144                     _D1:
  1662                           	opt stack 0
  1663  000144                     	ds	8
  1664  00014C                     _D2:
  1665                           	opt stack 0
  1666  00014C                     	ds	7
  1667                           tblptru	equ	0xFF8
  1668                           tblptrh	equ	0xFF7
  1669                           tblptrl	equ	0xFF6
  1670                           tablat	equ	0xFF5
  1671                           postinc0	equ	0xFEE
  1672                           wreg	equ	0xFE8
  1673                           postdec1	equ	0xFE5
  1674                           fsr1l	equ	0xFE1
  1675                           
  1676                           	psect	cstackBANK1
  1677  000153                     __pcstackBANK1:
  1678                           	opt stack 0
  1679  000153                     ?___awdiv:
  1680                           	opt stack 0
  1681  000153                     drawtext@x:
  1682                           	opt stack 0
  1683  000153                     ___awdiv@dividend:
  1684                           	opt stack 0
  1685                           
  1686                           ; 2 bytes @ 0x0
  1687  000153                     	ds	1
  1688  000154                     drawtext@textsize:
  1689                           	opt stack 0
  1690                           
  1691                           ; 2 bytes @ 0x1
  1692  000154                     	ds	1
  1693  000155                     ___awdiv@divisor:
  1694                           	opt stack 0
  1695                           
  1696                           ; 2 bytes @ 0x2
  1697  000155                     	ds	1
  1698  000156                     drawtext@i:
  1699                           	opt stack 0
  1700                           
  1701                           ; 2 bytes @ 0x3
  1702  000156                     	ds	1
  1703  000157                     ___awdiv@counter:
  1704                           	opt stack 0
  1705                           
  1706                           ; 1 bytes @ 0x4
  1707  000157                     	ds	1
  1708  000158                     drawtext@cursor_y:
  1709                           	opt stack 0
  1710  000158                     ___awdiv@sign:
  1711                           	opt stack 0
  1712                           
  1713                           ; 1 bytes @ 0x5
  1714  000158                     	ds	1
  1715  000159                     drawtext@cursor_x:
  1716                           	opt stack 0
  1717  000159                     ___awdiv@quotient:
  1718                           	opt stack 0
  1719                           
  1720                           ; 2 bytes @ 0x6
  1721  000159                     	ds	2
  1722  00015B                     ??_Do_Setup_Heater_Temp:
  1723  00015B                     Set_RPM_RGB@RPM:
  1724                           	opt stack 0
  1725  00015B                     Update_Screen@neg_tempF:
  1726                           	opt stack 0
  1727  00015B                     dec_2_bcd@bcd:
  1728                           	opt stack 0
  1729                           
  1730                           ; 2 bytes @ 0x8
  1731  00015B                     	ds	2
  1732  00015D                     Set_RPM_RGB@mask:
  1733                           	opt stack 0
  1734  00015D                     Update_Screen@neg_DS1621_tempC:
  1735                           	opt stack 0
  1736  00015D                     dec_2_bcd@dec:
  1737                           	opt stack 0
  1738                           
  1739                           ; 1 bytes @ 0xA
  1740  00015D                     	ds	1
  1741  00015E                     Set_RPM_RGB@maskedValue:
  1742                           	opt stack 0
  1743  00015E                     DS3231_Write_Time@Device:
  1744                           	opt stack 0
  1745  00015E                     DS3231_Write_Alarm_Time@Device:
  1746                           	opt stack 0
  1747                           
  1748                           ; 1 bytes @ 0xB
  1749  00015E                     	ds	1
  1750  00015F                     DS3231_Write_Time@Address:
  1751                           	opt stack 0
  1752  00015F                     DS3231_Write_Alarm_Time@Address:
  1753                           	opt stack 0
  1754                           
  1755                           ; 1 bytes @ 0xC
  1756  00015F                     	ds	1
  1757  000160                     ??_main:
  1758                           
  1759                           ; 0 bytes @ 0xD
  1760  000160                     	ds	2
  1761                           tblptru	equ	0xFF8
  1762                           tblptrh	equ	0xFF7
  1763                           tblptrl	equ	0xFF6
  1764                           tablat	equ	0xFF5
  1765                           postinc0	equ	0xFEE
  1766                           wreg	equ	0xFE8
  1767                           postdec1	equ	0xFE5
  1768                           fsr1l	equ	0xFE1
  1769                           
  1770                           	psect	cstackBANK0
  1771  0000FD                     __pcstackBANK0:
  1772                           	opt stack 0
  1773  0000FD                     ??_dec_2_bcd:
  1774  0000FD                     ??_Update_Screen:
  1775  0000FD                     ??_Monitor_Heater:
  1776  0000FD                     Set_DC_RGB@d1color_C:
  1777                           	opt stack 0
  1778  0000FD                     Update_Setup_Heater_Screen@dc_char1:
  1779                           	opt stack 0
  1780  0000FD                     get_RPM@RPS:
  1781                           	opt stack 0
  1782                           
  1783                           ; 2 bytes @ 0x0
  1784  0000FD                     	ds	1
  1785  0000FE                     Set_DC_RGB@d1color_I:
  1786                           	opt stack 0
  1787  0000FE                     Update_Setup_Heater_Screen@dc_char2:
  1788                           	opt stack 0
  1789                           
  1790                           ; 1 bytes @ 0x1
  1791  0000FE                     	ds	1
  1792  0000FF                     Update_Setup_Heater_Screen@dc_char3:
  1793                           	opt stack 0
  1794                           
  1795                           ; 1 bytes @ 0x2
  1796  0000FF                     	ds	1
  1797                           tblptru	equ	0xFF8
  1798                           tblptrh	equ	0xFF7
  1799                           tblptrl	equ	0xFF6
  1800                           tablat	equ	0xFF5
  1801                           postinc0	equ	0xFEE
  1802                           wreg	equ	0xFE8
  1803                           postdec1	equ	0xFE5
  1804                           fsr1l	equ	0xFE1
  1805                           
  1806                           	psect	cstackCOMRAM
  1807  000001                     __pcstackCOMRAM:
  1808                           	opt stack 0
  1809  000001                     ??_INT0_isr:
  1810  000001                     
  1811                           ; 2 bytes @ 0x0
  1812  000001                     	ds	2
  1813  000003                     ??_chkisr:
  1814                           
  1815                           ; 0 bytes @ 0x2
  1816  000003                     	ds	14
  1817  000011                     ??_bcd_2_dec:
  1818  000011                     ??_isdigit:
  1819  000011                     ?_strlen:
  1820                           	opt stack 0
  1821  000011                     ?_get_full_ADC:
  1822                           	opt stack 0
  1823  000011                     ?_get_duty_cycle:
  1824                           	opt stack 0
  1825  000011                     ?___wmul:
  1826                           	opt stack 0
  1827  000011                     ?___lwdiv:
  1828                           	opt stack 0
  1829  000011                     ?___ftpack:
  1830                           	opt stack 0
  1831  000011                     I2C_Read@ack:
  1832                           	opt stack 0
  1833  000011                     I2C_Write@outByte:
  1834                           	opt stack 0
  1835  000011                     putch@c:
  1836                           	opt stack 0
  1837  000011                     spiwrite@x:
  1838                           	opt stack 0
  1839  000011                     get_duty_cycle@temp:
  1840                           	opt stack 0
  1841  000011                     Wait_One_Sec@k:
  1842                           	opt stack 0
  1843  000011                     OpenUSART@spbrg:
  1844                           	opt stack 0
  1845  000011                     ___wmul@multiplier:
  1846                           	opt stack 0
  1847  000011                     ___lwdiv@dividend:
  1848                           	opt stack 0
  1849  000011                     strcpy@to:
  1850                           	opt stack 0
  1851  000011                     strlen@s:
  1852                           	opt stack 0
  1853  000011                     ___ftpack@arg:
  1854                           	opt stack 0
  1855  000011                     ___ftge@ff1:
  1856                           	opt stack 0
  1857  000011                     I2C_Init@c:
  1858                           	opt stack 0
  1859                           
  1860                           ; 4 bytes @ 0x10
  1861  000011                     	ds	1
  1862  000012                     I2C_Read@n:
  1863                           	opt stack 0
  1864  000012                     I2C_Write@n:
  1865                           	opt stack 0
  1866  000012                     spiwrite@spidata:
  1867                           	opt stack 0
  1868  000012                     _isdigit$3067:
  1869                           	opt stack 0
  1870                           
  1871                           ; 1 bytes @ 0x11
  1872  000012                     	ds	1
  1873  000013                     ??_Set_RGB_Color:
  1874  000013                     ??_strlen:
  1875  000013                     ??_get_full_ADC:
  1876  000013                     I2C_Read@inByte:
  1877                           	opt stack 0
  1878  000013                     I2C_Write_Address_Write_One_Byte@Address:
  1879                           	opt stack 0
  1880  000013                     I2C_Write_Cmd_Only@Cmd:
  1881                           	opt stack 0
  1882  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1883                           	opt stack 0
  1884  000013                     write_command@cmd_:
  1885                           	opt stack 0
  1886  000013                     write_data@data_:
  1887                           	opt stack 0
  1888  000013                     OpenUSART@config:
  1889                           	opt stack 0
  1890  000013                     isdigit@c:
  1891                           	opt stack 0
  1892  000013                     get_duty_cycle@set_temp:
  1893                           	opt stack 0
  1894  000013                     bcd_2_dec@dec:
  1895                           	opt stack 0
  1896  000013                     ___wmul@multiplicand:
  1897                           	opt stack 0
  1898  000013                     ___lwdiv@divisor:
  1899                           	opt stack 0
  1900  000013                     strcpy@from:
  1901                           	opt stack 0
  1902                           
  1903                           ; 2 bytes @ 0x12
  1904  000013                     	ds	1
  1905  000014                     ?_DS1621_Read_Temp:
  1906                           	opt stack 0
  1907  000014                     I2C_Write_Address_Read_One_Byte@Address:
  1908                           	opt stack 0
  1909  000014                     I2C_Write_Address_Write_One_Byte@Data_Out:
  1910                           	opt stack 0
  1911  000014                     I2C_Write_Cmd_Only@Device:
  1912                           	opt stack 0
  1913  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1914                           	opt stack 0
  1915  000014                     DS3231_Read_Time@Address:
  1916                           	opt stack 0
  1917  000014                     DS3231_Read_Alarm_Time@Address:
  1918                           	opt stack 0
  1919  000014                     setAddrWindow@y0:
  1920                           	opt stack 0
  1921  000014                     ___ftpack@exp:
  1922                           	opt stack 0
  1923  000014                     ___ftge@ff2:
  1924                           	opt stack 0
  1925  000014                     Set_RGB_Color@D3:
  1926                           	opt stack 0
  1927                           
  1928                           ; 16 bytes @ 0x13
  1929  000014                     	ds	1
  1930  000015                     ??_get_duty_cycle:
  1931  000015                     I2C_Write_Address_Read_One_Byte@Data_Ret:
  1932                           	opt stack 0
  1933  000015                     I2C_Write_Address_Write_One_Byte@Device:
  1934                           	opt stack 0
  1935  000015                     I2C_Write_Cmd_Write_Data@Device:
  1936                           	opt stack 0
  1937  000015                     DS3231_Read_Time@Device:
  1938                           	opt stack 0
  1939  000015                     DS3231_Read_Alarm_Time@Device:
  1940                           	opt stack 0
  1941  000015                     setAddrWindow@x1:
  1942                           	opt stack 0
  1943  000015                     bcd_2_dec@bcd:
  1944                           	opt stack 0
  1945  000015                     ___ftpack@sign:
  1946                           	opt stack 0
  1947  000015                     get_full_ADC@result:
  1948                           	opt stack 0
  1949  000015                     ___wmul@product:
  1950                           	opt stack 0
  1951  000015                     ___lwdiv@quotient:
  1952                           	opt stack 0
  1953  000015                     strcpy@cp:
  1954                           	opt stack 0
  1955  000015                     strlen@cp:
  1956                           	opt stack 0
  1957                           
  1958                           ; 2 bytes @ 0x14
  1959  000015                     	ds	1
  1960  000016                     ??___ftpack:
  1961  000016                     I2C_Write_Address_Read_One_Byte@Device:
  1962                           	opt stack 0
  1963  000016                     DS1621_Init@Device:
  1964                           	opt stack 0
  1965  000016                     DS1621_Read_Temp@Cmd:
  1966                           	opt stack 0
  1967  000016                     setAddrWindow@y1:
  1968                           	opt stack 0
  1969                           
  1970                           ; 1 bytes @ 0x15
  1971  000016                     	ds	1
  1972  000017                     ??___ftge:
  1973  000017                     DS1621_Read_Temp@Data_Ret:
  1974                           	opt stack 0
  1975  000017                     DS3231_Init@Address_7:
  1976                           	opt stack 0
  1977  000017                     setAddrWindow@x0:
  1978                           	opt stack 0
  1979  000017                     ___lwdiv@counter:
  1980                           	opt stack 0
  1981  000017                     get_duty_cycle@diff:
  1982                           	opt stack 0
  1983  000017                     delay_ms@ms:
  1984                           	opt stack 0
  1985                           
  1986                           ; 2 bytes @ 0x16
  1987  000017                     	ds	1
  1988  000018                     ?___lwmod:
  1989                           	opt stack 0
  1990  000018                     DS1621_Read_Temp@Device:
  1991                           	opt stack 0
  1992  000018                     DS3231_Init@Address_E:
  1993                           	opt stack 0
  1994  000018                     drawPixel@y:
  1995                           	opt stack 0
  1996  000018                     drawFastVLine@y:
  1997                           	opt stack 0
  1998  000018                     fillRectangle@y:
  1999                           	opt stack 0
  2000  000018                     ___lwmod@dividend:
  2001                           	opt stack 0
  2002                           
  2003                           ; 2 bytes @ 0x17
  2004  000018                     	ds	1
  2005  000019                     ??_delay_ms:
  2006  000019                     ?___lbtoft:
  2007                           	opt stack 0
  2008  000019                     ?___lwtoft:
  2009                           	opt stack 0
  2010  000019                     DS3231_Init@control_E:
  2011                           	opt stack 0
  2012  000019                     drawFastVLine@h:
  2013                           	opt stack 0
  2014  000019                     fillRectangle@w:
  2015                           	opt stack 0
  2016  000019                     drawPixel@color:
  2017                           	opt stack 0
  2018  000019                     ___lwtoft@c:
  2019                           	opt stack 0
  2020                           
  2021                           ; 2 bytes @ 0x18
  2022  000019                     	ds	1
  2023  00001A                     DS3231_Init@Device:
  2024                           	opt stack 0
  2025  00001A                     fillRectangle@h:
  2026                           	opt stack 0
  2027  00001A                     drawFastVLine@color:
  2028                           	opt stack 0
  2029  00001A                     ___lwmod@divisor:
  2030                           	opt stack 0
  2031                           
  2032                           ; 2 bytes @ 0x19
  2033  00001A                     	ds	1
  2034  00001B                     DS3231_Turn_Off_Alarm@Address_E:
  2035                           	opt stack 0
  2036  00001B                     DS3231_Turn_On_Alarm@Address_E:
  2037                           	opt stack 0
  2038  00001B                     drawPixel@x:
  2039                           	opt stack 0
  2040  00001B                     delay_ms@count:
  2041                           	opt stack 0
  2042  00001B                     fillRectangle@color:
  2043                           	opt stack 0
  2044                           
  2045                           ; 2 bytes @ 0x1A
  2046  00001B                     	ds	1
  2047  00001C                     ??_drawFastVLine:
  2048  00001C                     DS3231_Turn_Off_Alarm@Address_F:
  2049                           	opt stack 0
  2050  00001C                     DS3231_Turn_On_Alarm@Address_F:
  2051                           	opt stack 0
  2052  00001C                     ___lbtoft@c:
  2053                           	opt stack 0
  2054  00001C                     ___lwmod@counter:
  2055                           	opt stack 0
  2056  00001C                     drawCircle@x0:
  2057                           	opt stack 0
  2058                           
  2059                           ; 2 bytes @ 0x1B
  2060  00001C                     	ds	1
  2061  00001D                     ??_fillRectangle:
  2062  00001D                     ?_printf:
  2063                           	opt stack 0
  2064  00001D                     ?___ftmul:
  2065                           	opt stack 0
  2066  00001D                     DS3231_Turn_Off_Alarm@control_E:
  2067                           	opt stack 0
  2068  00001D                     DS3231_Turn_On_Alarm@control_E:
  2069                           	opt stack 0
  2070  00001D                     printf@f:
  2071                           	opt stack 0
  2072  00001D                     ___ftmul@f1:
  2073                           	opt stack 0
  2074                           
  2075                           ; 3 bytes @ 0x1C
  2076  00001D                     	ds	1
  2077  00001E                     DS3231_Turn_Off_Alarm@control_F:
  2078                           	opt stack 0
  2079  00001E                     DS3231_Turn_On_Alarm@control_F:
  2080                           	opt stack 0
  2081  00001E                     drawCircle@y0:
  2082                           	opt stack 0
  2083                           
  2084                           ; 2 bytes @ 0x1D
  2085  00001E                     	ds	1
  2086  00001F                     DS3231_Turn_Off_Alarm@Device:
  2087                           	opt stack 0
  2088  00001F                     DS3231_Turn_On_Alarm@Device:
  2089                           	opt stack 0
  2090                           
  2091                           ; 1 bytes @ 0x1E
  2092  00001F                     	ds	1
  2093  000020                     drawFastVLine@hi:
  2094                           	opt stack 0
  2095  000020                     drawCircle@r:
  2096                           	opt stack 0
  2097  000020                     ___ftmul@f2:
  2098                           	opt stack 0
  2099                           
  2100                           ; 3 bytes @ 0x1F
  2101  000020                     	ds	1
  2102  000021                     drawFastVLine@lo:
  2103                           	opt stack 0
  2104  000021                     fillRectangle@hi:
  2105                           	opt stack 0
  2106                           
  2107                           ; 1 bytes @ 0x20
  2108  000021                     	ds	1
  2109  000022                     drawFastVLine@x:
  2110                           	opt stack 0
  2111  000022                     fillRectangle@lo:
  2112                           	opt stack 0
  2113  000022                     drawCircle@color:
  2114                           	opt stack 0
  2115                           
  2116                           ; 2 bytes @ 0x21
  2117  000022                     	ds	1
  2118  000023                     ??___ftmul:
  2119  000023                     fillRect@y:
  2120                           	opt stack 0
  2121  000023                     fillRectangle@x:
  2122                           	opt stack 0
  2123                           
  2124                           ; 1 bytes @ 0x22
  2125  000023                     	ds	1
  2126  000024                     ??_drawCircle:
  2127  000024                     fillRect@w:
  2128                           	opt stack 0
  2129  000024                     Set_RGB_Color@color:
  2130                           	opt stack 0
  2131  000024                     fillScreen@color:
  2132                           	opt stack 0
  2133                           
  2134                           ; 2 bytes @ 0x23
  2135  000024                     	ds	1
  2136  000025                     fillRect@h:
  2137                           	opt stack 0
  2138  000025                     Set_RGB_Color@masked:
  2139                           	opt stack 0
  2140                           
  2141                           ; 1 bytes @ 0x24
  2142  000025                     	ds	1
  2143  000026                     Set_RGB_Color@masked_d:
  2144                           	opt stack 0
  2145  000026                     ___ftmul@exp:
  2146                           	opt stack 0
  2147  000026                     fillRect@color:
  2148                           	opt stack 0
  2149  000026                     drawCircle@ddF_x:
  2150                           	opt stack 0
  2151                           
  2152                           ; 2 bytes @ 0x25
  2153  000026                     	ds	1
  2154  000027                     ___ftmul@f3_as_product:
  2155                           	opt stack 0
  2156                           
  2157                           ; 3 bytes @ 0x26
  2158  000027                     	ds	1
  2159  000028                     ??_fillRect:
  2160  000028                     drawCircle@ddF_y:
  2161                           	opt stack 0
  2162                           
  2163                           ; 2 bytes @ 0x27
  2164  000028                     	ds	2
  2165  00002A                     ___ftmul@cntr:
  2166                           	opt stack 0
  2167  00002A                     drawCircle@f:
  2168                           	opt stack 0
  2169                           
  2170                           ; 2 bytes @ 0x29
  2171  00002A                     	ds	1
  2172  00002B                     ??_printf:
  2173  00002B                     fillRect@x:
  2174                           	opt stack 0
  2175  00002B                     ___ftmul@sign:
  2176                           	opt stack 0
  2177                           
  2178                           ; 1 bytes @ 0x2A
  2179  00002B                     	ds	1
  2180  00002C                     ?___ftdiv:
  2181                           	opt stack 0
  2182  00002C                     ?___fttol:
  2183                           	opt stack 0
  2184  00002C                     fillRect@i:
  2185                           	opt stack 0
  2186  00002C                     drawCircle@x:
  2187                           	opt stack 0
  2188  00002C                     ___ftdiv@f1:
  2189                           	opt stack 0
  2190  00002C                     ___fttol@f1:
  2191                           	opt stack 0
  2192                           
  2193                           ; 3 bytes @ 0x2B
  2194  00002C                     	ds	2
  2195  00002E                     drawChar@y:
  2196                           	opt stack 0
  2197  00002E                     Update_Setup_Screen_Cursor_Forward@field:
  2198                           	opt stack 0
  2199  00002E                     Update_Setup_Screen_Cursor_Backward@field:
  2200                           	opt stack 0
  2201  00002E                     drawCircle@y:
  2202                           	opt stack 0
  2203                           
  2204                           ; 2 bytes @ 0x2D
  2205  00002E                     	ds	1
  2206  00002F                     drawChar@c:
  2207                           	opt stack 0
  2208  00002F                     Update_Setup_Screen_Cursor_Forward@yinc:
  2209                           	opt stack 0
  2210  00002F                     Update_Setup_Screen_Cursor_Backward@yinc:
  2211                           	opt stack 0
  2212  00002F                     printf@idx:
  2213                           	opt stack 0
  2214  00002F                     ___ftdiv@f2:
  2215                           	opt stack 0
  2216                           
  2217                           ; 3 bytes @ 0x2E
  2218  00002F                     	ds	1
  2219  000030                     ??___fttol:
  2220  000030                     Update_Setup_Screen_Cursor_Forward@xinc:
  2221                           	opt stack 0
  2222  000030                     Update_Setup_Screen_Cursor_Backward@xinc:
  2223                           	opt stack 0
  2224  000030                     drawChar@color:
  2225                           	opt stack 0
  2226  000030                     printf@ap:
  2227                           	opt stack 0
  2228                           
  2229                           ; 2 bytes @ 0x2F
  2230  000030                     	ds	1
  2231  000031                     
  2232                           ; 0 bytes @ 0x30
  2233  000031                     	ds	1
  2234  000032                     ??___ftdiv:
  2235  000032                     printf@prec:
  2236                           	opt stack 0
  2237  000032                     drawChar@bg:
  2238                           	opt stack 0
  2239                           
  2240                           ; 2 bytes @ 0x31
  2241  000032                     	ds	1
  2242  000033                     printf@val:
  2243                           	opt stack 0
  2244                           
  2245                           ; 2 bytes @ 0x32
  2246  000033                     	ds	1
  2247  000034                     drawChar@size:
  2248                           	opt stack 0
  2249                           
  2250                           ; 1 bytes @ 0x33
  2251  000034                     	ds	1
  2252  000035                     drawChar@line:
  2253                           	opt stack 0
  2254  000035                     printf@flag:
  2255                           	opt stack 0
  2256  000035                     ___ftdiv@cntr:
  2257                           	opt stack 0
  2258  000035                     ___fttol@sign1:
  2259                           	opt stack 0
  2260                           
  2261                           ; 1 bytes @ 0x34
  2262  000035                     	ds	1
  2263  000036                     drawChar@x:
  2264                           	opt stack 0
  2265  000036                     printf@width:
  2266                           	opt stack 0
  2267  000036                     ___ftdiv@f3:
  2268                           	opt stack 0
  2269  000036                     ___fttol@lval:
  2270                           	opt stack 0
  2271                           
  2272                           ; 4 bytes @ 0x35
  2273  000036                     	ds	1
  2274  000037                     drawChar@j:
  2275                           	opt stack 0
  2276                           
  2277                           ; 1 bytes @ 0x36
  2278  000037                     	ds	1
  2279  000038                     drawChar@i:
  2280                           	opt stack 0
  2281  000038                     printf@c:
  2282                           	opt stack 0
  2283                           
  2284                           ; 1 bytes @ 0x37
  2285  000038                     	ds	1
  2286  000039                     drawtext@y:
  2287                           	opt stack 0
  2288  000039                     ___ftdiv@exp:
  2289                           	opt stack 0
  2290                           
  2291                           ; 1 bytes @ 0x38
  2292  000039                     	ds	1
  2293  00003A                     ___ftdiv@sign:
  2294                           	opt stack 0
  2295  00003A                     ___fttol@exp1:
  2296                           	opt stack 0
  2297  00003A                     drawtext@_text:
  2298                           	opt stack 0
  2299  00003A                     check_for_button_input@j:
  2300                           	opt stack 0
  2301                           
  2302                           ; 2 bytes @ 0x39
  2303  00003A                     	ds	1
  2304  00003B                     ??_do_update_pwm:
  2305  00003B                     ?___awmod:
  2306                           	opt stack 0
  2307  00003B                     ?_read_volt:
  2308                           	opt stack 0
  2309  00003B                     ___awmod@dividend:
  2310                           	opt stack 0
  2311                           
  2312                           ; 2 bytes @ 0x3A
  2313  00003B                     	ds	1
  2314  00003C                     drawtext@color:
  2315                           	opt stack 0
  2316                           
  2317                           ; 2 bytes @ 0x3B
  2318  00003C                     	ds	1
  2319  00003D                     ___awmod@divisor:
  2320                           	opt stack 0
  2321                           
  2322                           ; 2 bytes @ 0x3C
  2323  00003D                     	ds	1
  2324  00003E                     drawtext@bg:
  2325                           	opt stack 0
  2326  00003E                     do_update_pwm@dc_f:
  2327                           	opt stack 0
  2328  00003E                     read_volt@num_step:
  2329                           	opt stack 0
  2330                           
  2331                           ; 3 bytes @ 0x3D
  2332  00003E                     	ds	1
  2333  00003F                     ___awmod@counter:
  2334                           	opt stack 0
  2335                           
  2336                           ; 1 bytes @ 0x3E
  2337  00003F                     	ds	1
  2338  000040                     drawtext@size:
  2339                           	opt stack 0
  2340  000040                     ___awmod@sign:
  2341                           	opt stack 0
  2342                           
  2343                           ; 1 bytes @ 0x3F
  2344  000040                     	ds	1
  2345  000041                     ??_drawtext:
  2346  000041                     ?_dec_2_bcd:
  2347                           	opt stack 0
  2348  000041                     ?_get_RPM:
  2349                           	opt stack 0
  2350  000041                     do_update_pwm@duty_cycle:
  2351                           	opt stack 0
  2352  000041                     Set_DC_RGB@duty_cycle:
  2353                           	opt stack 0
  2354  000041                     Set_RPM_RGB@rpm:
  2355                           	opt stack 0
  2356  000041                     read_volt@voltage_v:
  2357                           	opt stack 0
  2358                           
  2359                           ; 3 bytes @ 0x40
  2360  000041                     	ds	1
  2361  000042                     do_update_pwm@dc_I:
  2362                           	opt stack 0
  2363                           
  2364                           ; 2 bytes @ 0x41
  2365  000042                     	ds	1
  2366  000043                     
  2367                           ; 0 bytes @ 0x42
  2368  000043                     	ds	1
  2369  000044                     tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           postinc0	equ	0xFEE
  2374                           wreg	equ	0xFE8
  2375                           postdec1	equ	0xFE5
  2376                           fsr1l	equ	0xFE1
  2377                           
  2378                           ; 0 bytes @ 0x43
  2379 ;;
  2380 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2381 ;;
  2382 ;; *************** function _main *****************
  2383 ;; Defined at:
  2384 ;;		line 124 in file "Main.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;		None
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;		None
  2389 ;; Return value:  Size  Location     Type
  2390 ;;		None               void
  2391 ;; Registers used:
  2392 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2400 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2402 ;;Total ram usage:        2 bytes
  2403 ;; Hardware stack levels required when called:   13
  2404 ;; This function calls:
  2405 ;;		_DS1621_Read_Temp
  2406 ;;		_DS3231_Read_Alarm_Time
  2407 ;;		_DS3231_Read_Time
  2408 ;;		_DS3231_Turn_Off_Alarm
  2409 ;;		_Do_Beep_Bad
  2410 ;;		_Do_Beep_Good
  2411 ;;		_Do_Init
  2412 ;;		_Do_Setup_Alarm_Time
  2413 ;;		_Do_Setup_Heater_Temp
  2414 ;;		_Do_Setup_Time
  2415 ;;		_Initialize_Screen
  2416 ;;		_Monitor_Heater
  2417 ;;		_Set_DC_RGB
  2418 ;;		_Set_RPM_RGB
  2419 ;;		_Test_Alarm
  2420 ;;		_Toggle_Heater
  2421 ;;		_Update_Screen
  2422 ;;		___awdiv
  2423 ;;		___wmul
  2424 ;;		_check_for_button_input
  2425 ;;		_get_RPM
  2426 ;;		_printf
  2427 ;;		_read_volt
  2428 ;; This function is called by:
  2429 ;;		Startup code after reset
  2430 ;; This function uses a non-reentrant model
  2431 ;;
  2432                           
  2433                           	psect	text0
  2434  000D60                     __ptext0:
  2435                           	opt stack 0
  2436  000D60                     _main:
  2437                           	opt stack 18
  2438                           
  2439                           ;Main.c: 126: Do_Init();
  2440                           
  2441                           ;incstack = 0
  2442  000D60  ECC1  F019         	call	_Do_Init	;wreg free
  2443                           
  2444                           ;Main.c: 127: Initialize_Screen();
  2445  000D64  EC43  F003         	call	_Initialize_Screen	;wreg free
  2446                           
  2447                           ;Main.c: 128: DS3231_Turn_Off_Alarm();
  2448  000D68  EC6C  F01A         	call	_DS3231_Turn_Off_Alarm	;wreg free
  2449                           
  2450                           ;Main.c: 129: DS3231_Read_Alarm_Time();
  2451  000D6C  EC5A  F01B         	call	_DS3231_Read_Alarm_Time	;wreg free
  2452                           
  2453                           ;Main.c: 131: tempSecond = 0xff;
  2454  000D70  0100               	movlb	0	; () banked
  2455  000D72  6980               	setf	_tempSecond& (0+255),b
  2456  000D74  D000               	goto	l10073
  2457  000D76                     l10073:
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;Main.c: 133: {
  2461                           ;Main.c: 134: DS3231_Read_Time();
  2462  000D76  EC00  F019         	call	_DS3231_Read_Time	;wreg free
  2463                           
  2464                           ;Main.c: 136: if(tempSecond != second)
  2465  000D7A  5063               	movf	_second,w,c
  2466  000D7C  0100               	movlb	0	; () banked
  2467  000D7E  1980               	xorwf	_tempSecond& (0+255),w,b
  2468  000D80  B4D8               	btfsc	status,2,c
  2469  000D82  D0AC               	goto	l10109
  2470                           
  2471                           ; BSR set to: 0
  2472                           ;Main.c: 137: {
  2473                           ;Main.c: 138: tempSecond = second;
  2474  000D84  C063  F080         	movff	_second,_tempSecond
  2475                           
  2476                           ; BSR set to: 0
  2477                           ;Main.c: 139: rpm = get_RPM();
  2478  000D88  ECEF  F01B         	call	_get_RPM	;wreg free
  2479  000D8C  C041  F04C         	movff	?_get_RPM,_rpm
  2480  000D90  C042  F04D         	movff	?_get_RPM+1,_rpm+1
  2481                           
  2482                           ;Main.c: 140: volt = read_volt();
  2483  000D94  EC5C  F018         	call	_read_volt	;wreg free
  2484  000D98  C03B  F0E7         	movff	?_read_volt,_volt
  2485  000D9C  C03C  F0E8         	movff	?_read_volt+1,_volt+1
  2486  000DA0  C03D  F0E9         	movff	?_read_volt+2,_volt+2
  2487                           
  2488                           ;Main.c: 141: DS1621_tempC = DS1621_Read_Temp();
  2489  000DA4  EC8D  F01C         	call	_DS1621_Read_Temp	;wreg free
  2490  000DA8  C014  F046         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2491  000DAC  C015  F047         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2492                           
  2493                           ;Main.c: 142: if ((DS1621_tempC & 0x80) == 0x80)
  2494  000DB0  AE46               	btfss	_DS1621_tempC,7,c
  2495  000DB2  D01D               	goto	l10089
  2496                           
  2497                           ;Main.c: 143: DS1621_tempC = - (0x80 - DS1621_tempC & 0x7f);
  2498  000DB4  C046  F160         	movff	_DS1621_tempC,??_main
  2499  000DB8  C047  F161         	movff	_DS1621_tempC+1,??_main+1
  2500  000DBC  0101               	movlb	1	; () banked
  2501  000DBE  1F60               	comf	??_main& (0+255),f,b
  2502  000DC0  1F61               	comf	(??_main+1)& (0+255),f,b
  2503  000DC2  4B60               	infsnz	??_main& (0+255),f,b
  2504  000DC4  2B61               	incf	(??_main+1)& (0+255),f,b
  2505  000DC6  0E80               	movlw	128
  2506  000DC8  0101               	movlb	1	; () banked
  2507  000DCA  2760               	addwf	??_main& (0+255),f,b
  2508  000DCC  0E00               	movlw	0
  2509  000DCE  2361               	addwfc	(??_main+1)& (0+255),f,b
  2510  000DD0  0E7F               	movlw	127
  2511  000DD2  0101               	movlb	1	; () banked
  2512  000DD4  1760               	andwf	??_main& (0+255),f,b
  2513  000DD6  0E00               	movlw	0
  2514  000DD8  1761               	andwf	(??_main+1)& (0+255),f,b
  2515  000DDA  0101               	movlb	1	; () banked
  2516  000DDC  1F60               	comf	??_main& (0+255),f,b
  2517  000DDE  1F61               	comf	(??_main+1)& (0+255),f,b
  2518  000DE0  4B60               	infsnz	??_main& (0+255),f,b
  2519  000DE2  2B61               	incf	(??_main+1)& (0+255),f,b
  2520  000DE4  C160  F046         	movff	??_main,_DS1621_tempC
  2521  000DE8  C161  F047         	movff	??_main+1,_DS1621_tempC+1
  2522  000DEC  D000               	goto	l10089
  2523  000DEE                     l10089:
  2524                           
  2525                           ;Main.c: 144: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2526  000DEE  C046  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2527  000DF2  C047  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2528  000DF6  0E00               	movlw	0
  2529  000DF8  6E14               	movwf	___wmul@multiplicand+1,c
  2530  000DFA  0E09               	movlw	9
  2531  000DFC  6E13               	movwf	___wmul@multiplicand,c
  2532  000DFE  EC1F  F01D         	call	___wmul	;wreg free
  2533  000E02  C011  F153         	movff	?___wmul,___awdiv@dividend
  2534  000E06  C012  F154         	movff	?___wmul+1,___awdiv@dividend+1
  2535  000E0A  0E00               	movlw	0
  2536  000E0C  0101               	movlb	1	; () banked
  2537  000E0E  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  2538  000E10  0E05               	movlw	5
  2539  000E12  6F55               	movwf	___awdiv@divisor& (0+255),b
  2540  000E14  ECCD  F012         	call	___awdiv	;wreg free
  2541  000E18  0E20               	movlw	32
  2542  000E1A  0101               	movlb	1	; () banked
  2543  000E1C  2553               	addwf	?___awdiv& (0+255),w,b
  2544  000E1E  6E48               	movwf	_DS1621_tempF,c
  2545  000E20  0E00               	movlw	0
  2546  000E22  0101               	movlb	1	; () banked
  2547  000E24  2154               	addwfc	(?___awdiv+1)& (0+255),w,b
  2548  000E26  6E49               	movwf	_DS1621_tempF+1,c
  2549                           
  2550                           ; BSR set to: 1
  2551                           ;Main.c: 148: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,year)
      +                          ;
  2552  000E28  0EB6               	movlw	low STR_1
  2553  000E2A  6E1D               	movwf	printf@f,c
  2554  000E2C  0EFE               	movlw	high STR_1
  2555  000E2E  6E1E               	movwf	printf@f+1,c
  2556  000E30  C05F  F01F         	movff	_hour,?_printf+2
  2557  000E34  6A20               	clrf	?_printf+3,c
  2558  000E36  C060  F021         	movff	_minute,?_printf+4
  2559  000E3A  6A22               	clrf	?_printf+5,c
  2560  000E3C  C063  F023         	movff	_second,?_printf+6
  2561  000E40  6A24               	clrf	?_printf+7,c
  2562  000E42  C061  F025         	movff	_month,?_printf+8
  2563  000E46  6A26               	clrf	?_printf+9,c
  2564  000E48  C05B  F027         	movff	_day,?_printf+10
  2565  000E4C  6A28               	clrf	?_printf+11,c
  2566  000E4E  C06E  F029         	movff	_year,?_printf+12
  2567  000E52  6A2A               	clrf	?_printf+13,c
  2568  000E54  EC03  F005         	call	_printf	;wreg free
  2569                           
  2570                           ;Main.c: 149: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2571  000E58  0E02               	movlw	low STR_2
  2572  000E5A  6E1D               	movwf	printf@f,c
  2573  000E5C  0EFF               	movlw	high STR_2
  2574  000E5E  6E1E               	movwf	printf@f+1,c
  2575  000E60  C046  F01F         	movff	_DS1621_tempC,?_printf+2
  2576  000E64  C047  F020         	movff	_DS1621_tempC+1,?_printf+3
  2577  000E68  C048  F021         	movff	_DS1621_tempF,?_printf+4
  2578  000E6C  C049  F022         	movff	_DS1621_tempF+1,?_printf+5
  2579  000E70  EC03  F005         	call	_printf	;wreg free
  2580                           
  2581                           ;Main.c: 150: printf ("alarm = %d Heater = %d ", PORTBbits.RB2, HEATER);
  2582  000E74  0ED4               	movlw	low STR_3
  2583  000E76  6E1D               	movwf	printf@f,c
  2584  000E78  0EFE               	movlw	high STR_3
  2585  000E7A  6E1E               	movwf	printf@f+1,c
  2586  000E7C  A481               	btfss	3969,2,c	;volatile
  2587  000E7E  D004               	goto	u7420
  2588  000E80  0101               	movlb	1	; () banked
  2589  000E82  6B60               	clrf	??_main& (0+255),b
  2590  000E84  2B60               	incf	??_main& (0+255),f,b
  2591  000E86  D002               	goto	u7428
  2592  000E88                     u7420:
  2593  000E88  0101               	movlb	1	; () banked
  2594  000E8A  6B60               	clrf	??_main& (0+255),b
  2595  000E8C                     u7428:
  2596  000E8C  0101               	movlb	1	; () banked
  2597  000E8E  5160               	movf	??_main& (0+255),w,b
  2598  000E90  6E1F               	movwf	?_printf+2,c
  2599  000E92  6A20               	clrf	?_printf+3,c
  2600  000E94  C050  F021         	movff	_HEATER,?_printf+4
  2601  000E98  6A22               	clrf	?_printf+5,c
  2602  000E9A  EC03  F005         	call	_printf	;wreg free
  2603                           
  2604                           ;Main.c: 151: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2605  000E9E  0E17               	movlw	low STR_4
  2606  000EA0  6E1D               	movwf	printf@f,c
  2607  000EA2  0EFF               	movlw	high STR_4
  2608  000EA4  6E1E               	movwf	printf@f+1,c
  2609  000EA6  C04C  F01F         	movff	_rpm,?_printf+2
  2610  000EAA  C04D  F020         	movff	_rpm+1,?_printf+3
  2611  000EAE  C05D  F021         	movff	_duty_cycle,?_printf+4
  2612  000EB2  6A22               	clrf	?_printf+5,c
  2613  000EB4  EC03  F005         	call	_printf	;wreg free
  2614                           
  2615                           ;Main.c: 153: Set_DC_RGB(duty_cycle);
  2616  000EB8  C05D  F041         	movff	_duty_cycle,Set_DC_RGB@duty_cycle
  2617  000EBC  6A42               	clrf	Set_DC_RGB@duty_cycle+1,c
  2618  000EBE  ECBE  F01A         	call	_Set_DC_RGB	;wreg free
  2619                           
  2620                           ;Main.c: 154: Set_RPM_RGB(rpm);
  2621  000EC2  C04C  F041         	movff	_rpm,Set_RPM_RGB@rpm
  2622  000EC6  C04D  F042         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2623  000ECA  EC64  F019         	call	_Set_RPM_RGB	;wreg free
  2624                           
  2625                           ;Main.c: 155: Monitor_Heater();
  2626  000ECE  ECEF  F019         	call	_Monitor_Heater	;wreg free
  2627                           
  2628                           ;Main.c: 156: Test_Alarm();
  2629  000ED2  EC81  F00C         	call	_Test_Alarm	;wreg free
  2630                           
  2631                           ;Main.c: 157: Update_Screen();
  2632  000ED6  EC0E  F000         	call	_Update_Screen	;wreg free
  2633  000EDA  D000               	goto	l10109
  2634  000EDC                     l10109:
  2635                           
  2636                           ;Main.c: 158: }
  2637                           ;Main.c: 160: if (check_for_button_input() == 1)
  2638  000EDC  ECA4  F017         	call	_check_for_button_input	;wreg free
  2639  000EE0  06E8               	decf	wreg,f,c
  2640  000EE2  A4D8               	btfss	status,2,c
  2641  000EE4  D02C               	goto	l10133
  2642                           
  2643                           ;Main.c: 161: {
  2644                           ;Main.c: 163: nec_ok = 0;
  2645  000EE6  0E00               	movlw	0
  2646  000EE8  0100               	movlb	0	; () banked
  2647  000EEA  6FF3               	movwf	(_nec_ok+1)& (0+255),b
  2648  000EEC  0E00               	movlw	0
  2649  000EEE  6FF2               	movwf	_nec_ok& (0+255),b
  2650                           
  2651                           ;Main.c: 164: switch (found)
  2652  000EF0  D017               	goto	l10131
  2653  000EF2                     l10113:
  2654                           
  2655                           ;Main.c: 167: Do_Beep_Good();
  2656  000EF2  EC60  F01E         	call	_Do_Beep_Good	;wreg free
  2657                           
  2658                           ;Main.c: 168: Do_Setup_Time();
  2659  000EF6  EC35  F013         	call	_Do_Setup_Time	;wreg free
  2660                           
  2661                           ;Main.c: 169: break;
  2662  000EFA  D021               	goto	l10133
  2663  000EFC                     l10117:
  2664                           
  2665                           ;Main.c: 172: Do_Beep_Good();
  2666  000EFC  EC60  F01E         	call	_Do_Beep_Good	;wreg free
  2667                           
  2668                           ;Main.c: 173: Do_Setup_Alarm_Time();
  2669  000F00  ECFD  F013         	call	_Do_Setup_Alarm_Time	;wreg free
  2670                           
  2671                           ;Main.c: 174: break;
  2672  000F04  D01C               	goto	l10133
  2673  000F06                     l10121:
  2674                           
  2675                           ;Main.c: 177: Do_Beep_Good();
  2676  000F06  EC60  F01E         	call	_Do_Beep_Good	;wreg free
  2677                           
  2678                           ;Main.c: 178: Do_Setup_Heater_Temp();
  2679  000F0A  ECB4  F015         	call	_Do_Setup_Heater_Temp	;wreg free
  2680                           
  2681                           ;Main.c: 179: break;
  2682  000F0E  D017               	goto	l10133
  2683  000F10                     l10125:
  2684                           
  2685                           ;Main.c: 182: Do_Beep_Good();
  2686  000F10  EC60  F01E         	call	_Do_Beep_Good	;wreg free
  2687                           
  2688                           ;Main.c: 183: Toggle_Heater();
  2689  000F14  EC88  F01E         	call	_Toggle_Heater	;wreg free
  2690                           
  2691                           ;Main.c: 184: break;
  2692  000F18  D012               	goto	l10133
  2693  000F1A                     l10127:
  2694                           
  2695                           ;Main.c: 187: Do_Beep_Bad();
  2696  000F1A  EC6A  F01E         	call	_Do_Beep_Bad	;wreg free
  2697                           
  2698                           ;Main.c: 189: }
  2699                           
  2700                           ;Main.c: 188: break;
  2701  000F1E  D00F               	goto	l10133
  2702  000F20                     l10131:
  2703  000F20  505E               	movf	_found,w,c
  2704                           
  2705                           ; Switch size 1, requested type "space"
  2706                           ; Number of cases is 4, Range of values is 0 to 5
  2707                           ; switch strategies available:
  2708                           ; Name         Instructions Cycles
  2709                           ; simple_byte           13     7 (average)
  2710                           ;	Chosen strategy is simple_byte
  2711  000F22  0A00               	xorlw	0	; case 0
  2712  000F24  B4D8               	btfsc	status,2,c
  2713  000F26  D7E5               	goto	l10113
  2714  000F28  0A01               	xorlw	1	; case 1
  2715  000F2A  B4D8               	btfsc	status,2,c
  2716  000F2C  D7E7               	goto	l10117
  2717  000F2E  0A03               	xorlw	3	; case 2
  2718  000F30  B4D8               	btfsc	status,2,c
  2719  000F32  D7E9               	goto	l10121
  2720  000F34  0A07               	xorlw	7	; case 5
  2721  000F36  B4D8               	btfsc	status,2,c
  2722  000F38  D7EB               	goto	l10125
  2723  000F3A  D7EF               	goto	l10127
  2724  000F3C  D000               	goto	l10133
  2725  000F3E                     l10133:
  2726                           
  2727                           ;Main.c: 190: }
  2728                           ;Main.c: 194: if (INT1_flag == 1)
  2729  000F3E  0100               	movlb	0	; () banked
  2730  000F40  05F6               	decf	_INT1_flag& (0+255),w,b
  2731  000F42  A4D8               	btfss	status,2,c
  2732  000F44  D00D               	goto	l10139
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;Main.c: 195: {
  2736                           ;Main.c: 196: ALARMEN = !ALARMEN;
  2737  000F46  5044               	movf	_ALARMEN,w,c
  2738  000F48  1045               	iorwf	_ALARMEN+1,w,c
  2739  000F4A  A4D8               	btfss	status,2,c
  2740  000F4C  D002               	goto	u7450
  2741  000F4E  0E01               	movlw	1
  2742  000F50  D001               	goto	u7460
  2743  000F52                     u7450:
  2744  000F52  0E00               	movlw	0
  2745  000F54                     u7460:
  2746  000F54  6E44               	movwf	_ALARMEN,c
  2747  000F56  6A45               	clrf	_ALARMEN+1,c
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;Main.c: 197: INT1_flag = 0;
  2751  000F58  0E00               	movlw	0
  2752  000F5A  0100               	movlb	0	; () banked
  2753  000F5C  6FF6               	movwf	_INT1_flag& (0+255),b
  2754  000F5E  D000               	goto	l10139
  2755  000F60                     l10139:
  2756                           
  2757                           ; BSR set to: 0
  2758                           ;Main.c: 198: }
  2759                           ;Main.c: 200: if (INT2_flag == 1)
  2760  000F60  0100               	movlb	0	; () banked
  2761  000F62  05F7               	decf	_INT2_flag& (0+255),w,b
  2762  000F64  A4D8               	btfss	status,2,c
  2763  000F66  D707               	goto	l10073
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;Main.c: 201: {
  2767                           ;Main.c: 203: INT2_flag = 0;
  2768  000F68  0E00               	movlw	0
  2769  000F6A  0100               	movlb	0	; () banked
  2770  000F6C  6FF7               	movwf	_INT2_flag& (0+255),b
  2771                           
  2772                           ; BSR set to: 0
  2773                           
  2774                           ; BSR set to: 0
  2775  000F6E  D703               	goto	l10073
  2776                           
  2777                           ; BSR set to: 0
  2778                           
  2779                           ; BSR set to: 0
  2780  000F70  EF0C  F000         	goto	start
  2781  000F74                     __end_of_main:
  2782                           	opt stack 0
  2783                           tblptru	equ	0xFF8
  2784                           tblptrh	equ	0xFF7
  2785                           tblptrl	equ	0xFF6
  2786                           tablat	equ	0xFF5
  2787                           postinc0	equ	0xFEE
  2788                           wreg	equ	0xFE8
  2789                           postdec1	equ	0xFE5
  2790                           fsr1l	equ	0xFE1
  2791                           status	equ	0xFD8
  2792                           
  2793 ;; *************** function _read_volt *****************
  2794 ;; Defined at:
  2795 ;;		line 148 in file "utils.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;		None
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;  voltage_v       3   64[COMRAM] float 
  2800 ;;  num_step        3   61[COMRAM] float 
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  3   58[COMRAM] float 
  2803 ;; Registers used:
  2804 ;;		wreg, status,2, status,0, cstack
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2810 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2811 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2813 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2814 ;;Total ram usage:        9 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    5
  2817 ;; This function calls:
  2818 ;;		___ftdiv
  2819 ;;		___ftmul
  2820 ;;		___lwtoft
  2821 ;;		_get_full_ADC
  2822 ;; This function is called by:
  2823 ;;		_main
  2824 ;; This function uses a non-reentrant model
  2825 ;;
  2826                           
  2827                           	psect	text1
  2828  0030B8                     __ptext1:
  2829                           	opt stack 0
  2830  0030B8                     _read_volt:
  2831                           	opt stack 25
  2832                           
  2833                           ;utils.c: 150: float num_step = get_full_ADC();
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;incstack = 0
  2837  0030B8  EC33  F01D         	call	_get_full_ADC	;wreg free
  2838  0030BC  C011  F019         	movff	?_get_full_ADC,___lwtoft@c
  2839  0030C0  C012  F01A         	movff	?_get_full_ADC+1,___lwtoft@c+1
  2840  0030C4  EC46  F01D         	call	___lwtoft	;wreg free
  2841  0030C8  C019  F03E         	movff	?___lwtoft,read_volt@num_step
  2842  0030CC  C01A  F03F         	movff	?___lwtoft+1,read_volt@num_step+1
  2843  0030D0  C01B  F040         	movff	?___lwtoft+2,read_volt@num_step+2
  2844                           
  2845                           ;utils.c: 151: float voltage_v = num_step*4/1024.0;
  2846  0030D4  0E00               	movlw	0
  2847  0030D6  6E20               	movwf	___ftmul@f2,c
  2848  0030D8  0E80               	movlw	128
  2849  0030DA  6E21               	movwf	___ftmul@f2+1,c
  2850  0030DC  0E40               	movlw	64
  2851  0030DE  6E22               	movwf	___ftmul@f2+2,c
  2852  0030E0  C03E  F01D         	movff	read_volt@num_step,___ftmul@f1
  2853  0030E4  C03F  F01E         	movff	read_volt@num_step+1,___ftmul@f1+1
  2854  0030E8  C040  F01F         	movff	read_volt@num_step+2,___ftmul@f1+2
  2855  0030EC  EC2C  F00F         	call	___ftmul	;wreg free
  2856  0030F0  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
  2857  0030F4  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
  2858  0030F8  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
  2859  0030FC  0E00               	movlw	0
  2860  0030FE  6E2F               	movwf	___ftdiv@f2,c
  2861  003100  0E80               	movlw	128
  2862  003102  6E30               	movwf	___ftdiv@f2+1,c
  2863  003104  0E44               	movlw	68
  2864  003106  6E31               	movwf	___ftdiv@f2+2,c
  2865  003108  EC86  F011         	call	___ftdiv	;wreg free
  2866  00310C  C02C  F041         	movff	?___ftdiv,read_volt@voltage_v
  2867  003110  C02D  F042         	movff	?___ftdiv+1,read_volt@voltage_v+1
  2868  003114  C02E  F043         	movff	?___ftdiv+2,read_volt@voltage_v+2
  2869                           
  2870                           ;utils.c: 154: return voltage_v;
  2871  003118  C041  F03B         	movff	read_volt@voltage_v,?_read_volt
  2872  00311C  C042  F03C         	movff	read_volt@voltage_v+1,?_read_volt+1
  2873  003120  C043  F03D         	movff	read_volt@voltage_v+2,?_read_volt+2
  2874  003124  D000               	goto	l1396
  2875  003126                     l1396:
  2876  003126  0012               	return		;funcret
  2877  003128                     __end_of_read_volt:
  2878                           	opt stack 0
  2879                           tblptru	equ	0xFF8
  2880                           tblptrh	equ	0xFF7
  2881                           tblptrl	equ	0xFF6
  2882                           tablat	equ	0xFF5
  2883                           postinc0	equ	0xFEE
  2884                           wreg	equ	0xFE8
  2885                           postdec1	equ	0xFE5
  2886                           fsr1l	equ	0xFE1
  2887                           status	equ	0xFD8
  2888                           
  2889 ;; *************** function _get_full_ADC *****************
  2890 ;; Defined at:
  2891 ;;		line 159 in file "utils.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;		None
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;  result          2   20[COMRAM] int 
  2896 ;; Return value:  Size  Location     Type
  2897 ;;                  2   16[COMRAM] unsigned int 
  2898 ;; Registers used:
  2899 ;;		wreg, status,2, status,0
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2905 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;Total ram usage:        6 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    3
  2912 ;; This function calls:
  2913 ;;		Nothing
  2914 ;; This function is called by:
  2915 ;;		_read_volt
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           	psect	text2
  2920  003A66                     __ptext2:
  2921                           	opt stack 0
  2922  003A66                     _get_full_ADC:
  2923                           	opt stack 26
  2924                           
  2925                           ;utils.c: 160: int result;
  2926                           ;utils.c: 161: ADCON0bits.GO=1;
  2927                           
  2928                           ;incstack = 0
  2929  003A66  82C2               	bsf	4034,1,c	;volatile
  2930                           
  2931                           ;utils.c: 163: while(ADCON0bits.DONE==1);
  2932  003A68  D000               	goto	l1399
  2933  003A6A                     l1399:
  2934  003A6A  B2C2               	btfsc	4034,1,c	;volatile
  2935  003A6C  D7FE               	goto	l1399
  2936                           
  2937                           ;utils.c: 165: result = (ADRESH * 0x100) + ADRESL;
  2938  003A6E  50C4               	movf	4036,w,c	;volatile
  2939  003A70  6E14               	movwf	(??_get_full_ADC+1)& (0+255),c
  2940  003A72  6A13               	clrf	??_get_full_ADC& (0+255),c
  2941  003A74  50C3               	movf	4035,w,c	;volatile
  2942  003A76  2413               	addwf	??_get_full_ADC,w,c
  2943  003A78  6E15               	movwf	get_full_ADC@result,c
  2944  003A7A  0E00               	movlw	0
  2945  003A7C  2014               	addwfc	??_get_full_ADC+1,w,c
  2946  003A7E  6E16               	movwf	get_full_ADC@result+1,c
  2947                           
  2948                           ;utils.c: 168: return result;
  2949  003A80  C015  F011         	movff	get_full_ADC@result,?_get_full_ADC
  2950  003A84  C016  F012         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  2951  003A88  D000               	goto	l1402
  2952  003A8A                     l1402:
  2953  003A8A  0012               	return		;funcret
  2954  003A8C                     __end_of_get_full_ADC:
  2955                           	opt stack 0
  2956                           tblptru	equ	0xFF8
  2957                           tblptrh	equ	0xFF7
  2958                           tblptrl	equ	0xFF6
  2959                           tablat	equ	0xFF5
  2960                           postinc0	equ	0xFEE
  2961                           wreg	equ	0xFE8
  2962                           postdec1	equ	0xFE5
  2963                           fsr1l	equ	0xFE1
  2964                           status	equ	0xFD8
  2965                           
  2966 ;; *************** function ___lwtoft *****************
  2967 ;; Defined at:
  2968 ;;		line 28 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;  c               2   24[COMRAM] unsigned int 
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;		None
  2973 ;; Return value:  Size  Location     Type
  2974 ;;                  3   24[COMRAM] float 
  2975 ;; Registers used:
  2976 ;;		wreg, status,2, status,0, cstack
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2982 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;Total ram usage:        3 bytes
  2987 ;; Hardware stack levels used:    1
  2988 ;; Hardware stack levels required when called:    4
  2989 ;; This function calls:
  2990 ;;		___ftpack
  2991 ;; This function is called by:
  2992 ;;		_read_volt
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996                           	psect	text3
  2997  003A8C                     __ptext3:
  2998                           	opt stack 0
  2999  003A8C                     ___lwtoft:
  3000                           	opt stack 25
  3001                           
  3002                           ;incstack = 0
  3003  003A8C  C019  F011         	movff	___lwtoft@c,___ftpack@arg
  3004  003A90  C01A  F012         	movff	___lwtoft@c+1,___ftpack@arg+1
  3005  003A94  6A13               	clrf	___ftpack@arg+2,c
  3006  003A96  0E8E               	movlw	142
  3007  003A98  6E14               	movwf	___ftpack@exp,c
  3008  003A9A  0E00               	movlw	0
  3009  003A9C  6E15               	movwf	___ftpack@sign,c
  3010  003A9E  EC9A  F013         	call	___ftpack	;wreg free
  3011  003AA2  C011  F019         	movff	?___ftpack,?___lwtoft
  3012  003AA6  C012  F01A         	movff	?___ftpack+1,?___lwtoft+1
  3013  003AAA  C013  F01B         	movff	?___ftpack+2,?___lwtoft+2
  3014  003AAE  D000               	goto	l2065
  3015  003AB0                     l2065:
  3016  003AB0  0012               	return		;funcret
  3017  003AB2                     __end_of___lwtoft:
  3018                           	opt stack 0
  3019                           tblptru	equ	0xFF8
  3020                           tblptrh	equ	0xFF7
  3021                           tblptrl	equ	0xFF6
  3022                           tablat	equ	0xFF5
  3023                           postinc0	equ	0xFEE
  3024                           wreg	equ	0xFE8
  3025                           postdec1	equ	0xFE5
  3026                           fsr1l	equ	0xFE1
  3027                           status	equ	0xFD8
  3028                           
  3029 ;; *************** function _get_RPM *****************
  3030 ;; Defined at:
  3031 ;;		line 42 in file "Fan_Support.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;		None
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;  RPS             2    0[BANK0 ] int 
  3036 ;; Return value:  Size  Location     Type
  3037 ;;                  2   64[COMRAM] int 
  3038 ;; Registers used:
  3039 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3040 ;; Tracked objects:
  3041 ;;		On entry : 0/0
  3042 ;;		On exit  : 0/0
  3043 ;;		Unchanged: 0/0
  3044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3045 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3048 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3049 ;;Total ram usage:        4 bytes
  3050 ;; Hardware stack levels used:    1
  3051 ;; Hardware stack levels required when called:    4
  3052 ;; This function calls:
  3053 ;;		___awdiv
  3054 ;;		___wmul
  3055 ;; This function is called by:
  3056 ;;		_main
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           	psect	text4
  3061  0037DE                     __ptext4:
  3062                           	opt stack 0
  3063  0037DE                     _get_RPM:
  3064                           	opt stack 26
  3065                           
  3066                           ;Fan_Support.c: 44: int RPS = TMR3L / 2;
  3067                           
  3068                           ;incstack = 0
  3069  0037DE  CFB2 F153          	movff	4018,___awdiv@dividend	;volatile
  3070  0037E2  0101               	movlb	1	; () banked
  3071  0037E4  6B54               	clrf	(___awdiv@dividend+1)& (0+255),b
  3072  0037E6  0E00               	movlw	0
  3073  0037E8  0101               	movlb	1	; () banked
  3074  0037EA  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  3075  0037EC  0E02               	movlw	2
  3076  0037EE  6F55               	movwf	___awdiv@divisor& (0+255),b
  3077  0037F0  ECCD  F012         	call	___awdiv	;wreg free
  3078  0037F4  C153  F0FD         	movff	?___awdiv,get_RPM@RPS
  3079  0037F8  C154  F0FE         	movff	?___awdiv+1,get_RPM@RPS+1
  3080                           
  3081                           ;Fan_Support.c: 46: TMR3L = 0;
  3082  0037FC  0E00               	movlw	0
  3083  0037FE  6EB2               	movwf	4018,c	;volatile
  3084                           
  3085                           ;Fan_Support.c: 47: return (RPS * 60);
  3086  003800  C0FD  F011         	movff	get_RPM@RPS,___wmul@multiplier
  3087  003804  C0FE  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  3088  003808  0E00               	movlw	0
  3089  00380A  6E14               	movwf	___wmul@multiplicand+1,c
  3090  00380C  0E3C               	movlw	60
  3091  00380E  6E13               	movwf	___wmul@multiplicand,c
  3092  003810  EC1F  F01D         	call	___wmul	;wreg free
  3093  003814  C011  F041         	movff	?___wmul,?_get_RPM
  3094  003818  C012  F042         	movff	?___wmul+1,?_get_RPM+1
  3095  00381C  D000               	goto	l57
  3096  00381E                     l57:
  3097  00381E  0012               	return		;funcret
  3098  003820                     __end_of_get_RPM:
  3099                           	opt stack 0
  3100                           tblptru	equ	0xFF8
  3101                           tblptrh	equ	0xFF7
  3102                           tblptrl	equ	0xFF6
  3103                           tablat	equ	0xFF5
  3104                           postinc0	equ	0xFEE
  3105                           wreg	equ	0xFE8
  3106                           postdec1	equ	0xFE5
  3107                           fsr1l	equ	0xFE1
  3108                           status	equ	0xFD8
  3109                           
  3110 ;; *************** function _Update_Screen *****************
  3111 ;; Defined at:
  3112 ;;		line 76 in file "Main_Screen.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;		None
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;  neg_tempF       2    8[BANK1 ] int 
  3117 ;;  neg_DS1621_t    1   10[BANK1 ] unsigned char 
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  2  406[None  ] int 
  3120 ;; Registers used:
  3121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Totals:         0       2       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;Total ram usage:        5 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; Hardware stack levels required when called:   10
  3134 ;; This function calls:
  3135 ;;		___awdiv
  3136 ;;		___awmod
  3137 ;;		___ftmul
  3138 ;;		___fttol
  3139 ;;		_drawtext
  3140 ;;		_strcpy
  3141 ;; This function is called by:
  3142 ;;		_main
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           	psect	text5
  3147  00001C                     __ptext5:
  3148                           	opt stack 0
  3149  00001C                     _Update_Screen:
  3150                           	opt stack 20
  3151                           
  3152                           ;Main_Screen.c: 78: if ((DS1621_tempC & 0x80) == 0x80)
  3153                           
  3154                           ;incstack = 0
  3155  00001C  AE46               	btfss	_DS1621_tempC,7,c
  3156  00001E  D023               	goto	l9669
  3157                           
  3158                           ;Main_Screen.c: 79: {
  3159                           ;Main_Screen.c: 80: tempC[0] = '-';
  3160  000020  0E2D               	movlw	45
  3161  000022  0100               	movlb	0	; () banked
  3162  000024  6FD9               	movwf	_tempC& (0+255),b
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;Main_Screen.c: 81: char neg_DS1621_tempC = 0x80 - (DS1621_tempC & 0x7f);
  3166  000026  5046               	movf	_DS1621_tempC,w,c
  3167  000028  0B7F               	andlw	127
  3168  00002A  0800               	sublw	0
  3169  00002C  0F80               	addlw	128
  3170  00002E  0101               	movlb	1	; () banked
  3171  000030  6F5D               	movwf	Update_Screen@neg_DS1621_tempC& (0+255),b
  3172                           
  3173                           ; BSR set to: 1
  3174                           ;Main_Screen.c: 82: tempC[1] = (neg_DS1621_tempC)/10 + '0';
  3175  000032  C15D  F153         	movff	Update_Screen@neg_DS1621_tempC,___awdiv@dividend
  3176  000036  0101               	movlb	1	; () banked
  3177  000038  6B54               	clrf	(___awdiv@dividend+1)& (0+255),b
  3178  00003A  0E00               	movlw	0
  3179  00003C  0101               	movlb	1	; () banked
  3180  00003E  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  3181  000040  0E0A               	movlw	10
  3182  000042  6F55               	movwf	___awdiv@divisor& (0+255),b
  3183  000044  ECCD  F012         	call	___awdiv	;wreg free
  3184  000048  0101               	movlb	1	; () banked
  3185  00004A  5153               	movf	?___awdiv& (0+255),w,b
  3186  00004C  0F30               	addlw	48
  3187  00004E  0100               	movlb	0	; () banked
  3188  000050  6FDA               	movwf	(_tempC+1)& (0+255),b
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;Main_Screen.c: 83: tempC[2] = (neg_DS1621_tempC)%10 + '0';
  3192  000052  C15D  F03B         	movff	Update_Screen@neg_DS1621_tempC,___awmod@dividend
  3193  000056  6A3C               	clrf	___awmod@dividend+1,c
  3194  000058  0E00               	movlw	0
  3195  00005A  6E3E               	movwf	___awmod@divisor+1,c
  3196  00005C  0E0A               	movlw	10
  3197  00005E  6E3D               	movwf	___awmod@divisor,c
  3198  000060  EC63  F017         	call	___awmod	;wreg free
  3199  000064  D01D               	goto	L1
  3200  000066                     l9669:
  3201                           
  3202                           ;Main_Screen.c: 85: else
  3203                           ;Main_Screen.c: 86: {
  3204                           ;Main_Screen.c: 87: tempC[0] = '+';
  3205  000066  0E2B               	movlw	43
  3206  000068  0100               	movlb	0	; () banked
  3207  00006A  6FD9               	movwf	_tempC& (0+255),b
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;Main_Screen.c: 88: tempC[1] = DS1621_tempC/10 + '0';
  3211  00006C  C046  F153         	movff	_DS1621_tempC,___awdiv@dividend
  3212  000070  C047  F154         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  3213  000074  0E00               	movlw	0
  3214  000076  0101               	movlb	1	; () banked
  3215  000078  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  3216  00007A  0E0A               	movlw	10
  3217  00007C  6F55               	movwf	___awdiv@divisor& (0+255),b
  3218  00007E  ECCD  F012         	call	___awdiv	;wreg free
  3219  000082  0101               	movlb	1	; () banked
  3220  000084  5153               	movf	?___awdiv& (0+255),w,b
  3221  000086  0F30               	addlw	48
  3222  000088  0100               	movlb	0	; () banked
  3223  00008A  6FDA               	movwf	(_tempC+1)& (0+255),b
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;Main_Screen.c: 89: tempC[2] = DS1621_tempC%10 + '0';
  3227  00008C  C046  F03B         	movff	_DS1621_tempC,___awmod@dividend
  3228  000090  C047  F03C         	movff	_DS1621_tempC+1,___awmod@dividend+1
  3229  000094  0E00               	movlw	0
  3230  000096  6E3E               	movwf	___awmod@divisor+1,c
  3231  000098  0E0A               	movlw	10
  3232  00009A  6E3D               	movwf	___awmod@divisor,c
  3233  00009C  EC63  F017         	call	___awmod	;wreg free
  3234  0000A0                     L1:
  3235  0000A0  503B               	movf	?___awmod,w,c
  3236  0000A2  0F30               	addlw	48
  3237  0000A4  0100               	movlb	0	; () banked
  3238  0000A6  6FDB               	movwf	(_tempC+2)& (0+255),b
  3239  0000A8  D000               	goto	l9675
  3240  0000AA                     l9675:
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;Main_Screen.c: 90: }
  3244                           ;Main_Screen.c: 92: if (DS1621_tempF < 0)
  3245  0000AA  AE49               	btfss	_DS1621_tempF+1,7,c
  3246  0000AC  D035               	goto	l9685
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;Main_Screen.c: 93: {
  3250                           ;Main_Screen.c: 94: tempF[0] = '-';
  3251  0000AE  0E2D               	movlw	45
  3252  0000B0  0100               	movlb	0	; () banked
  3253  0000B2  6FDD               	movwf	_tempF& (0+255),b
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;Main_Screen.c: 95: int neg_tempF = 0x80 - (DS1621_tempF & 0x7f);
  3257  0000B4  0E7F               	movlw	127
  3258  0000B6  1448               	andwf	_DS1621_tempF,w,c
  3259  0000B8  0100               	movlb	0	; () banked
  3260  0000BA  6FFD               	movwf	??_Update_Screen& (0+255),b
  3261  0000BC  0E00               	movlw	0
  3262  0000BE  1449               	andwf	_DS1621_tempF+1,w,c
  3263  0000C0  0100               	movlb	0	; () banked
  3264  0000C2  6FFE               	movwf	(??_Update_Screen+1)& (0+255),b
  3265  0000C4  0100               	movlb	0	; () banked
  3266  0000C6  1FFD               	comf	??_Update_Screen& (0+255),f,b
  3267  0000C8  1FFE               	comf	(??_Update_Screen+1)& (0+255),f,b
  3268  0000CA  4BFD               	infsnz	??_Update_Screen& (0+255),f,b
  3269  0000CC  2BFE               	incf	(??_Update_Screen+1)& (0+255),f,b
  3270  0000CE  0E80               	movlw	128
  3271  0000D0  0100               	movlb	0	; () banked
  3272  0000D2  25FD               	addwf	??_Update_Screen& (0+255),w,b
  3273  0000D4  0101               	movlb	1	; () banked
  3274  0000D6  6F5B               	movwf	Update_Screen@neg_tempF& (0+255),b
  3275  0000D8  0E00               	movlw	0
  3276  0000DA  0100               	movlb	0	; () banked
  3277  0000DC  21FE               	addwfc	(??_Update_Screen+1)& (0+255),w,b
  3278  0000DE  0101               	movlb	1	; () banked
  3279  0000E0  6F5C               	movwf	(Update_Screen@neg_tempF+1)& (0+255),b
  3280                           
  3281                           ; BSR set to: 1
  3282                           ;Main_Screen.c: 96: tempF[1] = neg_tempF/10 + '0';
  3283  0000E2  C15B  F153         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3284  0000E6  C15C  F154         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3285  0000EA  0E00               	movlw	0
  3286  0000EC  0101               	movlb	1	; () banked
  3287  0000EE  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  3288  0000F0  0E0A               	movlw	10
  3289  0000F2  6F55               	movwf	___awdiv@divisor& (0+255),b
  3290  0000F4  ECCD  F012         	call	___awdiv	;wreg free
  3291  0000F8  0101               	movlb	1	; () banked
  3292  0000FA  5153               	movf	?___awdiv& (0+255),w,b
  3293  0000FC  0F30               	addlw	48
  3294  0000FE  0100               	movlb	0	; () banked
  3295  000100  6FDE               	movwf	(_tempF+1)& (0+255),b
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;Main_Screen.c: 97: tempF[2] = neg_tempF%10 + '0';
  3299  000102  C15B  F03B         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3300  000106  C15C  F03C         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3301  00010A  0E00               	movlw	0
  3302  00010C  6E3E               	movwf	___awmod@divisor+1,c
  3303  00010E  0E0A               	movlw	10
  3304  000110  6E3D               	movwf	___awmod@divisor,c
  3305  000112  EC63  F017         	call	___awmod	;wreg free
  3306  000116  D01D               	goto	L2
  3307  000118                     l9685:
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;Main_Screen.c: 99: else
  3311                           ;Main_Screen.c: 100: {
  3312                           ;Main_Screen.c: 101: tempF[0] = '+';
  3313  000118  0E2B               	movlw	43
  3314  00011A  0100               	movlb	0	; () banked
  3315  00011C  6FDD               	movwf	_tempF& (0+255),b
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;Main_Screen.c: 102: tempF[1] = DS1621_tempF/10 + '0';
  3319  00011E  C048  F153         	movff	_DS1621_tempF,___awdiv@dividend
  3320  000122  C049  F154         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3321  000126  0E00               	movlw	0
  3322  000128  0101               	movlb	1	; () banked
  3323  00012A  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  3324  00012C  0E0A               	movlw	10
  3325  00012E  6F55               	movwf	___awdiv@divisor& (0+255),b
  3326  000130  ECCD  F012         	call	___awdiv	;wreg free
  3327  000134  0101               	movlb	1	; () banked
  3328  000136  5153               	movf	?___awdiv& (0+255),w,b
  3329  000138  0F30               	addlw	48
  3330  00013A  0100               	movlb	0	; () banked
  3331  00013C  6FDE               	movwf	(_tempF+1)& (0+255),b
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;Main_Screen.c: 103: tempF[2] = DS1621_tempF%10 + '0';
  3335  00013E  C048  F03B         	movff	_DS1621_tempF,___awmod@dividend
  3336  000142  C049  F03C         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3337  000146  0E00               	movlw	0
  3338  000148  6E3E               	movwf	___awmod@divisor+1,c
  3339  00014A  0E0A               	movlw	10
  3340  00014C  6E3D               	movwf	___awmod@divisor,c
  3341  00014E  EC63  F017         	call	___awmod	;wreg free
  3342  000152                     L2:
  3343  000152  503B               	movf	?___awmod,w,c
  3344  000154  0F30               	addlw	48
  3345  000156  0100               	movlb	0	; () banked
  3346  000158  6FDF               	movwf	(_tempF+2)& (0+255),b
  3347  00015A  D000               	goto	l9691
  3348  00015C                     l9691:
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;Main_Screen.c: 104: }
  3352                           ;Main_Screen.c: 106: time[0] = (hour>>4) + '0';
  3353  00015C  385F               	swapf	_hour,w,c
  3354  00015E  0B0F               	andlw	15
  3355  000160  0F30               	addlw	48
  3356  000162  0100               	movlb	0	; () banked
  3357  000164  6FAF               	movwf	_time& (0+255),b
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;Main_Screen.c: 107: time[1] = (hour & 0x0f)+ '0';
  3361  000166  505F               	movf	_hour,w,c
  3362  000168  0B0F               	andlw	15
  3363  00016A  0F30               	addlw	48
  3364  00016C  0100               	movlb	0	; () banked
  3365  00016E  6FB0               	movwf	(_time+1)& (0+255),b
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;Main_Screen.c: 108: time[3] = (minute>>4)+ '0';
  3369  000170  3860               	swapf	_minute,w,c
  3370  000172  0B0F               	andlw	15
  3371  000174  0F30               	addlw	48
  3372  000176  0100               	movlb	0	; () banked
  3373  000178  6FB2               	movwf	(_time+3)& (0+255),b
  3374                           
  3375                           ; BSR set to: 0
  3376                           ;Main_Screen.c: 109: time[4] = (minute & 0x0f) + '0';
  3377  00017A  5060               	movf	_minute,w,c
  3378  00017C  0B0F               	andlw	15
  3379  00017E  0F30               	addlw	48
  3380  000180  0100               	movlb	0	; () banked
  3381  000182  6FB3               	movwf	(_time+4)& (0+255),b
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;Main_Screen.c: 110: time[6] = (second>>4) + '0';
  3385  000184  3863               	swapf	_second,w,c
  3386  000186  0B0F               	andlw	15
  3387  000188  0F30               	addlw	48
  3388  00018A  0100               	movlb	0	; () banked
  3389  00018C  6FB5               	movwf	(_time+6)& (0+255),b
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;Main_Screen.c: 111: time[7] = (second & 0x0f) + '0';
  3393  00018E  5063               	movf	_second,w,c
  3394  000190  0B0F               	andlw	15
  3395  000192  0F30               	addlw	48
  3396  000194  0100               	movlb	0	; () banked
  3397  000196  6FB6               	movwf	(_time+7)& (0+255),b
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;Main_Screen.c: 112: date[0] = (month>>4) +'0';
  3401  000198  3861               	swapf	_month,w,c
  3402  00019A  0B0F               	andlw	15
  3403  00019C  0F30               	addlw	48
  3404  00019E  0100               	movlb	0	; () banked
  3405  0001A0  6F8B               	movwf	_date& (0+255),b
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;Main_Screen.c: 113: date[1] = (month & 0x0f) + '0';
  3409  0001A2  5061               	movf	_month,w,c
  3410  0001A4  0B0F               	andlw	15
  3411  0001A6  0F30               	addlw	48
  3412  0001A8  0100               	movlb	0	; () banked
  3413  0001AA  6F8C               	movwf	(_date+1)& (0+255),b
  3414                           
  3415                           ; BSR set to: 0
  3416                           ;Main_Screen.c: 114: date[3] = (day>>4) + '0';
  3417  0001AC  385B               	swapf	_day,w,c
  3418  0001AE  0B0F               	andlw	15
  3419  0001B0  0F30               	addlw	48
  3420  0001B2  0100               	movlb	0	; () banked
  3421  0001B4  6F8E               	movwf	(_date+3)& (0+255),b
  3422                           
  3423                           ; BSR set to: 0
  3424                           ;Main_Screen.c: 115: date[4] = (day & 0x0f) + '0';
  3425  0001B6  505B               	movf	_day,w,c
  3426  0001B8  0B0F               	andlw	15
  3427  0001BA  0F30               	addlw	48
  3428  0001BC  0100               	movlb	0	; () banked
  3429  0001BE  6F8F               	movwf	(_date+4)& (0+255),b
  3430                           
  3431                           ; BSR set to: 0
  3432                           ;Main_Screen.c: 116: date[6] = (year>>4) + '0';
  3433  0001C0  386E               	swapf	_year,w,c
  3434  0001C2  0B0F               	andlw	15
  3435  0001C4  0F30               	addlw	48
  3436  0001C6  0100               	movlb	0	; () banked
  3437  0001C8  6F91               	movwf	(_date+6)& (0+255),b
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;Main_Screen.c: 117: date[7] = (year & 0x0f) + '0';
  3441  0001CA  506E               	movf	_year,w,c
  3442  0001CC  0B0F               	andlw	15
  3443  0001CE  0F30               	addlw	48
  3444  0001D0  0100               	movlb	0	; () banked
  3445  0001D2  6F92               	movwf	(_date+7)& (0+255),b
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;Main_Screen.c: 118: alarm_time[0] = (alarm_hour>>4) + '0';
  3449  0001D4  3857               	swapf	_alarm_hour,w,c
  3450  0001D6  0B0F               	andlw	15
  3451  0001D8  0F30               	addlw	48
  3452  0001DA  0100               	movlb	0	; () banked
  3453  0001DC  6F82               	movwf	_alarm_time& (0+255),b
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;Main_Screen.c: 119: alarm_time[1] = (alarm_hour & 0x0f)+ '0';
  3457  0001DE  5057               	movf	_alarm_hour,w,c
  3458  0001E0  0B0F               	andlw	15
  3459  0001E2  0F30               	addlw	48
  3460  0001E4  0100               	movlb	0	; () banked
  3461  0001E6  6F83               	movwf	(_alarm_time+1)& (0+255),b
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;Main_Screen.c: 120: alarm_time[3] = (alarm_minute>>4) + '0';
  3465  0001E8  3858               	swapf	_alarm_minute,w,c
  3466  0001EA  0B0F               	andlw	15
  3467  0001EC  0F30               	addlw	48
  3468  0001EE  0100               	movlb	0	; () banked
  3469  0001F0  6F85               	movwf	(_alarm_time+3)& (0+255),b
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;Main_Screen.c: 121: alarm_time[4] = (alarm_minute & 0x0f) + '0';
  3473  0001F2  5058               	movf	_alarm_minute,w,c
  3474  0001F4  0B0F               	andlw	15
  3475  0001F6  0F30               	addlw	48
  3476  0001F8  0100               	movlb	0	; () banked
  3477  0001FA  6F86               	movwf	(_alarm_time+4)& (0+255),b
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;Main_Screen.c: 122: alarm_time[6] = (alarm_second>>4) + '0';
  3481  0001FC  3859               	swapf	_alarm_second,w,c
  3482  0001FE  0B0F               	andlw	15
  3483  000200  0F30               	addlw	48
  3484  000202  0100               	movlb	0	; () banked
  3485  000204  6F88               	movwf	(_alarm_time+6)& (0+255),b
  3486                           
  3487                           ; BSR set to: 0
  3488                           ;Main_Screen.c: 123: alarm_time[7] = (alarm_second & 0x0f) + '0';
  3489  000206  5059               	movf	_alarm_second,w,c
  3490  000208  0B0F               	andlw	15
  3491  00020A  0F30               	addlw	48
  3492  00020C  0100               	movlb	0	; () banked
  3493  00020E  6F89               	movwf	(_alarm_time+7)& (0+255),b
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;Main_Screen.c: 125: if (ALARMEN == 1)
  3497  000210  0444               	decf	_ALARMEN,w,c
  3498  000212  1045               	iorwf	_ALARMEN+1,w,c
  3499  000214  A4D8               	btfss	status,2,c
  3500  000216  D00B               	goto	l9731
  3501                           
  3502                           ; BSR set to: 0
  3503                           ;Main_Screen.c: 126: {
  3504                           ;Main_Screen.c: 127: strcpy(Alarm_SW_Txt, "ON ");
  3505  000218  0ECD               	movlw	low _Alarm_SW_Txt
  3506  00021A  6E11               	movwf	strcpy@to,c
  3507  00021C  0E00               	movlw	high _Alarm_SW_Txt
  3508  00021E  6E12               	movwf	strcpy@to+1,c
  3509  000220  0EEA               	movlw	low STR_19
  3510  000222  6E13               	movwf	strcpy@from,c
  3511  000224  0EFF               	movlw	high STR_19
  3512  000226  6E14               	movwf	strcpy@from+1,c
  3513  000228  ECC4  F01C         	call	_strcpy	;wreg free
  3514                           
  3515                           ;Main_Screen.c: 128: }
  3516  00022C  D00B               	goto	l9733
  3517  00022E                     l9731:
  3518                           
  3519                           ;Main_Screen.c: 129: else
  3520                           ;Main_Screen.c: 130: {
  3521                           ;Main_Screen.c: 131: strcpy(Alarm_SW_Txt, "OFF");
  3522  00022E  0ECD               	movlw	low _Alarm_SW_Txt
  3523  000230  6E11               	movwf	strcpy@to,c
  3524  000232  0E00               	movlw	high _Alarm_SW_Txt
  3525  000234  6E12               	movwf	strcpy@to+1,c
  3526  000236  0EEE               	movlw	low STR_20
  3527  000238  6E13               	movwf	strcpy@from,c
  3528  00023A  0EFF               	movlw	high STR_20
  3529  00023C  6E14               	movwf	strcpy@from+1,c
  3530  00023E  ECC4  F01C         	call	_strcpy	;wreg free
  3531  000242  D000               	goto	l9733
  3532  000244                     l9733:
  3533                           
  3534                           ;Main_Screen.c: 132: }
  3535                           ;Main_Screen.c: 134: Heater_Set_Temp_Txt[0] = heater_set_temp/100 + '0';
  3536  000244  C06F  F153         	movff	_heater_set_temp,___awdiv@dividend
  3537  000248  0101               	movlb	1	; () banked
  3538  00024A  6B54               	clrf	(___awdiv@dividend+1)& (0+255),b
  3539  00024C  0E00               	movlw	0
  3540  00024E  0101               	movlb	1	; () banked
  3541  000250  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  3542  000252  0E64               	movlw	100
  3543  000254  6F55               	movwf	___awdiv@divisor& (0+255),b
  3544  000256  ECCD  F012         	call	___awdiv	;wreg free
  3545  00025A  0101               	movlb	1	; () banked
  3546  00025C  5153               	movf	?___awdiv& (0+255),w,b
  3547  00025E  0F30               	addlw	48
  3548  000260  0100               	movlb	0	; () banked
  3549  000262  6FBE               	movwf	_Heater_Set_Temp_Txt& (0+255),b
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;Main_Screen.c: 135: Heater_Set_Temp_Txt[1] = (heater_set_temp%100)/10 + '0';
  3553  000264  0E00               	movlw	0
  3554  000266  6E3E               	movwf	___awmod@divisor+1,c
  3555  000268  0E64               	movlw	100
  3556  00026A  6E3D               	movwf	___awmod@divisor,c
  3557  00026C  C06F  F03B         	movff	_heater_set_temp,___awmod@dividend
  3558  000270  6A3C               	clrf	___awmod@dividend+1,c
  3559  000272  EC63  F017         	call	___awmod	;wreg free
  3560  000276  C03B  F153         	movff	?___awmod,___awdiv@dividend
  3561  00027A  C03C  F154         	movff	?___awmod+1,___awdiv@dividend+1
  3562  00027E  0E00               	movlw	0
  3563  000280  0101               	movlb	1	; () banked
  3564  000282  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  3565  000284  0E0A               	movlw	10
  3566  000286  6F55               	movwf	___awdiv@divisor& (0+255),b
  3567  000288  ECCD  F012         	call	___awdiv	;wreg free
  3568  00028C  0101               	movlb	1	; () banked
  3569  00028E  5153               	movf	?___awdiv& (0+255),w,b
  3570  000290  0F30               	addlw	48
  3571  000292  0100               	movlb	0	; () banked
  3572  000294  6FBF               	movwf	(_Heater_Set_Temp_Txt+1)& (0+255),b
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;Main_Screen.c: 136: Heater_Set_Temp_Txt[2] = (heater_set_temp%10) + '0';
  3576  000296  C06F  F03B         	movff	_heater_set_temp,___awmod@dividend
  3577  00029A  6A3C               	clrf	___awmod@dividend+1,c
  3578  00029C  0E00               	movlw	0
  3579  00029E  6E3E               	movwf	___awmod@divisor+1,c
  3580  0002A0  0E0A               	movlw	10
  3581  0002A2  6E3D               	movwf	___awmod@divisor,c
  3582  0002A4  EC63  F017         	call	___awmod	;wreg free
  3583  0002A8  503B               	movf	?___awmod,w,c
  3584  0002AA  0F30               	addlw	48
  3585  0002AC  0100               	movlb	0	; () banked
  3586  0002AE  6FC0               	movwf	(_Heater_Set_Temp_Txt+2)& (0+255),b
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;Main_Screen.c: 138: if (HEATER == 1)
  3590  0002B0  0450               	decf	_HEATER,w,c
  3591  0002B2  A4D8               	btfss	status,2,c
  3592  0002B4  D00B               	goto	l9743
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;Main_Screen.c: 139: {
  3596                           ;Main_Screen.c: 140: strcpy(Heater_SW_Txt, "ON ");
  3597  0002B6  0ED5               	movlw	low _Heater_SW_Txt
  3598  0002B8  6E11               	movwf	strcpy@to,c
  3599  0002BA  0E00               	movlw	high _Heater_SW_Txt
  3600  0002BC  6E12               	movwf	strcpy@to+1,c
  3601  0002BE  0EEA               	movlw	low STR_19
  3602  0002C0  6E13               	movwf	strcpy@from,c
  3603  0002C2  0EFF               	movlw	high STR_19
  3604  0002C4  6E14               	movwf	strcpy@from+1,c
  3605  0002C6  ECC4  F01C         	call	_strcpy	;wreg free
  3606                           
  3607                           ;Main_Screen.c: 141: }
  3608  0002CA  D00B               	goto	l9745
  3609  0002CC                     l9743:
  3610                           
  3611                           ;Main_Screen.c: 142: else
  3612                           ;Main_Screen.c: 143: {
  3613                           ;Main_Screen.c: 144: strcpy(Heater_SW_Txt, "OFF");
  3614  0002CC  0ED5               	movlw	low _Heater_SW_Txt
  3615  0002CE  6E11               	movwf	strcpy@to,c
  3616  0002D0  0E00               	movlw	high _Heater_SW_Txt
  3617  0002D2  6E12               	movwf	strcpy@to+1,c
  3618  0002D4  0EEE               	movlw	low STR_20
  3619  0002D6  6E13               	movwf	strcpy@from,c
  3620  0002D8  0EFF               	movlw	high STR_20
  3621  0002DA  6E14               	movwf	strcpy@from+1,c
  3622  0002DC  ECC4  F01C         	call	_strcpy	;wreg free
  3623  0002E0  D000               	goto	l9745
  3624  0002E2                     l9745:
  3625                           
  3626                           ;Main_Screen.c: 145: }
  3627                           ;Main_Screen.c: 147: if (PORTBbits.RB2 == 0) RTC_ALARM_Txt[0] = '1';
  3628  0002E2  B481               	btfsc	3969,2,c	;volatile
  3629  0002E4  D002               	goto	l9749
  3630  0002E6  0E31               	movlw	49
  3631  0002E8  D001               	goto	L3
  3632  0002EA                     l9749:
  3633                           
  3634                           ;Main_Screen.c: 148: else RTC_ALARM_Txt[0] = '0';
  3635  0002EA  0E30               	movlw	48
  3636  0002EC                     L3:
  3637  0002EC  0100               	movlb	0	; () banked
  3638  0002EE  6FE1               	movwf	_RTC_ALARM_Txt& (0+255),b
  3639  0002F0  D000               	goto	l9751
  3640  0002F2                     l9751:
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;Main_Screen.c: 151: DC_Txt[0] = duty_cycle/100 + '0';
  3644  0002F2  C05D  F153         	movff	_duty_cycle,___awdiv@dividend
  3645  0002F6  0101               	movlb	1	; () banked
  3646  0002F8  6B54               	clrf	(___awdiv@dividend+1)& (0+255),b
  3647  0002FA  0E00               	movlw	0
  3648  0002FC  0101               	movlb	1	; () banked
  3649  0002FE  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  3650  000300  0E64               	movlw	100
  3651  000302  6F55               	movwf	___awdiv@divisor& (0+255),b
  3652  000304  ECCD  F012         	call	___awdiv	;wreg free
  3653  000308  0101               	movlb	1	; () banked
  3654  00030A  5153               	movf	?___awdiv& (0+255),w,b
  3655  00030C  0F30               	addlw	48
  3656  00030E  0100               	movlb	0	; () banked
  3657  000310  6FD1               	movwf	_DC_Txt& (0+255),b
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;Main_Screen.c: 152: DC_Txt[1] = (duty_cycle%100)/10 + '0';
  3661  000312  0E00               	movlw	0
  3662  000314  6E3E               	movwf	___awmod@divisor+1,c
  3663  000316  0E64               	movlw	100
  3664  000318  6E3D               	movwf	___awmod@divisor,c
  3665  00031A  C05D  F03B         	movff	_duty_cycle,___awmod@dividend
  3666  00031E  6A3C               	clrf	___awmod@dividend+1,c
  3667  000320  EC63  F017         	call	___awmod	;wreg free
  3668  000324  C03B  F153         	movff	?___awmod,___awdiv@dividend
  3669  000328  C03C  F154         	movff	?___awmod+1,___awdiv@dividend+1
  3670  00032C  0E00               	movlw	0
  3671  00032E  0101               	movlb	1	; () banked
  3672  000330  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  3673  000332  0E0A               	movlw	10
  3674  000334  6F55               	movwf	___awdiv@divisor& (0+255),b
  3675  000336  ECCD  F012         	call	___awdiv	;wreg free
  3676  00033A  0101               	movlb	1	; () banked
  3677  00033C  5153               	movf	?___awdiv& (0+255),w,b
  3678  00033E  0F30               	addlw	48
  3679  000340  0100               	movlb	0	; () banked
  3680  000342  6FD2               	movwf	(_DC_Txt+1)& (0+255),b
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;Main_Screen.c: 153: DC_Txt[2] = (duty_cycle%10) + '0';
  3684  000344  C05D  F03B         	movff	_duty_cycle,___awmod@dividend
  3685  000348  6A3C               	clrf	___awmod@dividend+1,c
  3686  00034A  0E00               	movlw	0
  3687  00034C  6E3E               	movwf	___awmod@divisor+1,c
  3688  00034E  0E0A               	movlw	10
  3689  000350  6E3D               	movwf	___awmod@divisor,c
  3690  000352  EC63  F017         	call	___awmod	;wreg free
  3691  000356  503B               	movf	?___awmod,w,c
  3692  000358  0F30               	addlw	48
  3693  00035A  0100               	movlb	0	; () banked
  3694  00035C  6FD3               	movwf	(_DC_Txt+2)& (0+255),b
  3695                           
  3696                           ; BSR set to: 0
  3697                           ;Main_Screen.c: 155: Volt_Txt[0] = ((int)volt) + '0';
  3698  00035E  C0E7  F02C         	movff	_volt,___fttol@f1
  3699  000362  C0E8  F02D         	movff	_volt+1,___fttol@f1+1
  3700  000366  C0E9  F02E         	movff	_volt+2,___fttol@f1+2
  3701  00036A  EC13  F011         	call	___fttol	;wreg free
  3702  00036E  502C               	movf	?___fttol,w,c
  3703  000370  0F30               	addlw	48
  3704  000372  0100               	movlb	0	; () banked
  3705  000374  6FB8               	movwf	_Volt_Txt& (0+255),b
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;Main_Screen.c: 156: Volt_Txt[2] = ((((int)(volt*100))%100)/10) + '0';
  3709  000376  0E00               	movlw	0
  3710  000378  6E3E               	movwf	___awmod@divisor+1,c
  3711  00037A  0E64               	movlw	100
  3712  00037C  6E3D               	movwf	___awmod@divisor,c
  3713  00037E  0E00               	movlw	0
  3714  000380  6E20               	movwf	___ftmul@f2,c
  3715  000382  0EC8               	movlw	200
  3716  000384  6E21               	movwf	___ftmul@f2+1,c
  3717  000386  0E42               	movlw	66
  3718  000388  6E22               	movwf	___ftmul@f2+2,c
  3719  00038A  C0E7  F01D         	movff	_volt,___ftmul@f1
  3720  00038E  C0E8  F01E         	movff	_volt+1,___ftmul@f1+1
  3721  000392  C0E9  F01F         	movff	_volt+2,___ftmul@f1+2
  3722  000396  EC2C  F00F         	call	___ftmul	;wreg free
  3723  00039A  C01D  F02C         	movff	?___ftmul,___fttol@f1
  3724  00039E  C01E  F02D         	movff	?___ftmul+1,___fttol@f1+1
  3725  0003A2  C01F  F02E         	movff	?___ftmul+2,___fttol@f1+2
  3726  0003A6  EC13  F011         	call	___fttol	;wreg free
  3727  0003AA  C02C  F03B         	movff	?___fttol,___awmod@dividend
  3728  0003AE  C02D  F03C         	movff	?___fttol+1,___awmod@dividend+1
  3729  0003B2  EC63  F017         	call	___awmod	;wreg free
  3730  0003B6  C03B  F153         	movff	?___awmod,___awdiv@dividend
  3731  0003BA  C03C  F154         	movff	?___awmod+1,___awdiv@dividend+1
  3732  0003BE  0E00               	movlw	0
  3733  0003C0  0101               	movlb	1	; () banked
  3734  0003C2  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  3735  0003C4  0E0A               	movlw	10
  3736  0003C6  6F55               	movwf	___awdiv@divisor& (0+255),b
  3737  0003C8  ECCD  F012         	call	___awdiv	;wreg free
  3738  0003CC  0101               	movlb	1	; () banked
  3739  0003CE  5153               	movf	?___awdiv& (0+255),w,b
  3740  0003D0  0F30               	addlw	48
  3741  0003D2  0100               	movlb	0	; () banked
  3742  0003D4  6FBA               	movwf	(_Volt_Txt+2)& (0+255),b
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;Main_Screen.c: 157: Volt_Txt[3] = (((int)(volt*100))%10) + '0';
  3746  0003D6  0E00               	movlw	0
  3747  0003D8  6E20               	movwf	___ftmul@f2,c
  3748  0003DA  0EC8               	movlw	200
  3749  0003DC  6E21               	movwf	___ftmul@f2+1,c
  3750  0003DE  0E42               	movlw	66
  3751  0003E0  6E22               	movwf	___ftmul@f2+2,c
  3752  0003E2  C0E7  F01D         	movff	_volt,___ftmul@f1
  3753  0003E6  C0E8  F01E         	movff	_volt+1,___ftmul@f1+1
  3754  0003EA  C0E9  F01F         	movff	_volt+2,___ftmul@f1+2
  3755  0003EE  EC2C  F00F         	call	___ftmul	;wreg free
  3756  0003F2  C01D  F02C         	movff	?___ftmul,___fttol@f1
  3757  0003F6  C01E  F02D         	movff	?___ftmul+1,___fttol@f1+1
  3758  0003FA  C01F  F02E         	movff	?___ftmul+2,___fttol@f1+2
  3759  0003FE  EC13  F011         	call	___fttol	;wreg free
  3760  000402  C02C  F03B         	movff	?___fttol,___awmod@dividend
  3761  000406  C02D  F03C         	movff	?___fttol+1,___awmod@dividend+1
  3762  00040A  0E00               	movlw	0
  3763  00040C  6E3E               	movwf	___awmod@divisor+1,c
  3764  00040E  0E0A               	movlw	10
  3765  000410  6E3D               	movwf	___awmod@divisor,c
  3766  000412  EC63  F017         	call	___awmod	;wreg free
  3767  000416  503B               	movf	?___awmod,w,c
  3768  000418  0F30               	addlw	48
  3769  00041A  0100               	movlb	0	; () banked
  3770  00041C  6FBB               	movwf	(_Volt_Txt+3)& (0+255),b
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;Main_Screen.c: 159: RPM_Txt[0] = rpm/1000 + '0';
  3774  00041E  C04C  F153         	movff	_rpm,___awdiv@dividend
  3775  000422  C04D  F154         	movff	_rpm+1,___awdiv@dividend+1
  3776  000426  0E03               	movlw	3
  3777  000428  0101               	movlb	1	; () banked
  3778  00042A  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  3779  00042C  0EE8               	movlw	232
  3780  00042E  6F55               	movwf	___awdiv@divisor& (0+255),b
  3781  000430  ECCD  F012         	call	___awdiv	;wreg free
  3782  000434  0101               	movlb	1	; () banked
  3783  000436  5153               	movf	?___awdiv& (0+255),w,b
  3784  000438  0F30               	addlw	48
  3785  00043A  0100               	movlb	0	; () banked
  3786  00043C  6FC3               	movwf	_RPM_Txt& (0+255),b
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;Main_Screen.c: 160: RPM_Txt[1] = (rpm%1000)/100 + '0';
  3790  00043E  0E03               	movlw	3
  3791  000440  6E3E               	movwf	___awmod@divisor+1,c
  3792  000442  0EE8               	movlw	232
  3793  000444  6E3D               	movwf	___awmod@divisor,c
  3794  000446  C04C  F03B         	movff	_rpm,___awmod@dividend
  3795  00044A  C04D  F03C         	movff	_rpm+1,___awmod@dividend+1
  3796  00044E  EC63  F017         	call	___awmod	;wreg free
  3797  000452  C03B  F153         	movff	?___awmod,___awdiv@dividend
  3798  000456  C03C  F154         	movff	?___awmod+1,___awdiv@dividend+1
  3799  00045A  0E00               	movlw	0
  3800  00045C  0101               	movlb	1	; () banked
  3801  00045E  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  3802  000460  0E64               	movlw	100
  3803  000462  6F55               	movwf	___awdiv@divisor& (0+255),b
  3804  000464  ECCD  F012         	call	___awdiv	;wreg free
  3805  000468  0101               	movlb	1	; () banked
  3806  00046A  5153               	movf	?___awdiv& (0+255),w,b
  3807  00046C  0F30               	addlw	48
  3808  00046E  0100               	movlb	0	; () banked
  3809  000470  6FC4               	movwf	(_RPM_Txt+1)& (0+255),b
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;Main_Screen.c: 161: RPM_Txt[2] = (rpm%100)/10 +'0';
  3813  000472  0E00               	movlw	0
  3814  000474  6E3E               	movwf	___awmod@divisor+1,c
  3815  000476  0E64               	movlw	100
  3816  000478  6E3D               	movwf	___awmod@divisor,c
  3817  00047A  C04C  F03B         	movff	_rpm,___awmod@dividend
  3818  00047E  C04D  F03C         	movff	_rpm+1,___awmod@dividend+1
  3819  000482  EC63  F017         	call	___awmod	;wreg free
  3820  000486  C03B  F153         	movff	?___awmod,___awdiv@dividend
  3821  00048A  C03C  F154         	movff	?___awmod+1,___awdiv@dividend+1
  3822  00048E  0E00               	movlw	0
  3823  000490  0101               	movlb	1	; () banked
  3824  000492  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  3825  000494  0E0A               	movlw	10
  3826  000496  6F55               	movwf	___awdiv@divisor& (0+255),b
  3827  000498  ECCD  F012         	call	___awdiv	;wreg free
  3828  00049C  0101               	movlb	1	; () banked
  3829  00049E  5153               	movf	?___awdiv& (0+255),w,b
  3830  0004A0  0F30               	addlw	48
  3831  0004A2  0100               	movlb	0	; () banked
  3832  0004A4  6FC5               	movwf	(_RPM_Txt+2)& (0+255),b
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;Main_Screen.c: 162: RPM_Txt[3] = rpm%10 + '0';
  3836  0004A6  C04C  F03B         	movff	_rpm,___awmod@dividend
  3837  0004AA  C04D  F03C         	movff	_rpm+1,___awmod@dividend+1
  3838  0004AE  0E00               	movlw	0
  3839  0004B0  6E3E               	movwf	___awmod@divisor+1,c
  3840  0004B2  0E0A               	movlw	10
  3841  0004B4  6E3D               	movwf	___awmod@divisor,c
  3842  0004B6  EC63  F017         	call	___awmod	;wreg free
  3843  0004BA  503B               	movf	?___awmod,w,c
  3844  0004BC  0F30               	addlw	48
  3845  0004BE  0100               	movlb	0	; () banked
  3846  0004C0  6FC6               	movwf	(_RPM_Txt+3)& (0+255),b
  3847                           
  3848                           ; BSR set to: 0
  3849                           ;Main_Screen.c: 164: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  3850  0004C2  0E17               	movlw	23
  3851  0004C4  6E39               	movwf	drawtext@y,c
  3852  0004C6  0ED9               	movlw	low _tempC
  3853  0004C8  6E3A               	movwf	drawtext@_text,c
  3854  0004CA  0E00               	movlw	high _tempC
  3855  0004CC  6E3B               	movwf	drawtext@_text+1,c
  3856  0004CE  0EFF               	movlw	255
  3857  0004D0  6E3D               	movwf	drawtext@color+1,c
  3858  0004D2  0EE0               	movlw	224
  3859  0004D4  6E3C               	movwf	drawtext@color,c
  3860  0004D6  0E00               	movlw	0
  3861  0004D8  6E3F               	movwf	drawtext@bg+1,c
  3862  0004DA  0E00               	movlw	0
  3863  0004DC  6E3E               	movwf	drawtext@bg,c
  3864  0004DE  0E02               	movlw	2
  3865  0004E0  6E40               	movwf	drawtext@size,c
  3866  0004E2  0E01               	movlw	1
  3867  0004E4  EC99  F00D         	call	_drawtext
  3868                           
  3869                           ;Main_Screen.c: 165: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  3870  0004E8  0E17               	movlw	23
  3871  0004EA  6E39               	movwf	drawtext@y,c
  3872  0004EC  0EDD               	movlw	low _tempF
  3873  0004EE  6E3A               	movwf	drawtext@_text,c
  3874  0004F0  0E00               	movlw	high _tempF
  3875  0004F2  6E3B               	movwf	drawtext@_text+1,c
  3876  0004F4  0EFF               	movlw	255
  3877  0004F6  6E3D               	movwf	drawtext@color+1,c
  3878  0004F8  0EE0               	movlw	224
  3879  0004FA  6E3C               	movwf	drawtext@color,c
  3880  0004FC  0E00               	movlw	0
  3881  0004FE  6E3F               	movwf	drawtext@bg+1,c
  3882  000500  0E00               	movlw	0
  3883  000502  6E3E               	movwf	drawtext@bg,c
  3884  000504  0E02               	movlw	2
  3885  000506  6E40               	movwf	drawtext@size,c
  3886  000508  0E46               	movlw	70
  3887  00050A  EC99  F00D         	call	_drawtext
  3888                           
  3889                           ;Main_Screen.c: 166: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  3890  00050E  0E34               	movlw	52
  3891  000510  6E39               	movwf	drawtext@y,c
  3892  000512  0EAF               	movlw	low _time
  3893  000514  6E3A               	movwf	drawtext@_text,c
  3894  000516  0E00               	movlw	high _time
  3895  000518  6E3B               	movwf	drawtext@_text+1,c
  3896  00051A  0E07               	movlw	7
  3897  00051C  6E3D               	movwf	drawtext@color+1,c
  3898  00051E  683C               	setf	drawtext@color,c
  3899  000520  0E00               	movlw	0
  3900  000522  6E3F               	movwf	drawtext@bg+1,c
  3901  000524  0E00               	movlw	0
  3902  000526  6E3E               	movwf	drawtext@bg,c
  3903  000528  0E02               	movlw	2
  3904  00052A  6E40               	movwf	drawtext@size,c
  3905  00052C  0E0F               	movlw	15
  3906  00052E  EC99  F00D         	call	_drawtext
  3907                           
  3908                           ;Main_Screen.c: 167: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  3909  000532  0E52               	movlw	82
  3910  000534  6E39               	movwf	drawtext@y,c
  3911  000536  0E8B               	movlw	low _date
  3912  000538  6E3A               	movwf	drawtext@_text,c
  3913  00053A  0E00               	movlw	high _date
  3914  00053C  6E3B               	movwf	drawtext@_text+1,c
  3915  00053E  0E07               	movlw	7
  3916  000540  6E3D               	movwf	drawtext@color+1,c
  3917  000542  0EE0               	movlw	224
  3918  000544  6E3C               	movwf	drawtext@color,c
  3919  000546  0E00               	movlw	0
  3920  000548  6E3F               	movwf	drawtext@bg+1,c
  3921  00054A  0E00               	movlw	0
  3922  00054C  6E3E               	movwf	drawtext@bg,c
  3923  00054E  0E02               	movlw	2
  3924  000550  6E40               	movwf	drawtext@size,c
  3925  000552  0E0F               	movlw	15
  3926  000554  EC99  F00D         	call	_drawtext
  3927                           
  3928                           ;Main_Screen.c: 168: drawtext(10 , 110 , alarm_time , 0x07FF , 0x0000 , 1);
  3929  000558  0E6E               	movlw	110
  3930  00055A  6E39               	movwf	drawtext@y,c
  3931  00055C  0E82               	movlw	low _alarm_time
  3932  00055E  6E3A               	movwf	drawtext@_text,c
  3933  000560  0E00               	movlw	high _alarm_time
  3934  000562  6E3B               	movwf	drawtext@_text+1,c
  3935  000564  0E07               	movlw	7
  3936  000566  6E3D               	movwf	drawtext@color+1,c
  3937  000568  683C               	setf	drawtext@color,c
  3938  00056A  0E00               	movlw	0
  3939  00056C  6E3F               	movwf	drawtext@bg+1,c
  3940  00056E  0E00               	movlw	0
  3941  000570  6E3E               	movwf	drawtext@bg,c
  3942  000572  0E01               	movlw	1
  3943  000574  6E40               	movwf	drawtext@size,c
  3944  000576  0E0A               	movlw	10
  3945  000578  EC99  F00D         	call	_drawtext
  3946                           
  3947                           ;Main_Screen.c: 169: drawtext(95 , 110 , Alarm_SW_Txt , 0x07FF , 0x0000 , 1);
  3948  00057C  0E6E               	movlw	110
  3949  00057E  6E39               	movwf	drawtext@y,c
  3950  000580  0ECD               	movlw	low _Alarm_SW_Txt
  3951  000582  6E3A               	movwf	drawtext@_text,c
  3952  000584  0E00               	movlw	high _Alarm_SW_Txt
  3953  000586  6E3B               	movwf	drawtext@_text+1,c
  3954  000588  0E07               	movlw	7
  3955  00058A  6E3D               	movwf	drawtext@color+1,c
  3956  00058C  683C               	setf	drawtext@color,c
  3957  00058E  0E00               	movlw	0
  3958  000590  6E3F               	movwf	drawtext@bg+1,c
  3959  000592  0E00               	movlw	0
  3960  000594  6E3E               	movwf	drawtext@bg,c
  3961  000596  0E01               	movlw	1
  3962  000598  6E40               	movwf	drawtext@size,c
  3963  00059A  0E5F               	movlw	95
  3964  00059C  EC99  F00D         	call	_drawtext
  3965                           
  3966                           ;Main_Screen.c: 170: drawtext(35, 130 ,Heater_Set_Temp_Txt, 0xF800, 0x0000, 1);
  3967  0005A0  0E82               	movlw	130
  3968  0005A2  6E39               	movwf	drawtext@y,c
  3969  0005A4  0EBE               	movlw	low _Heater_Set_Temp_Txt
  3970  0005A6  6E3A               	movwf	drawtext@_text,c
  3971  0005A8  0E00               	movlw	high _Heater_Set_Temp_Txt
  3972  0005AA  6E3B               	movwf	drawtext@_text+1,c
  3973  0005AC  0EF8               	movlw	248
  3974  0005AE  6E3D               	movwf	drawtext@color+1,c
  3975  0005B0  0E00               	movlw	0
  3976  0005B2  6E3C               	movwf	drawtext@color,c
  3977  0005B4  0E00               	movlw	0
  3978  0005B6  6E3F               	movwf	drawtext@bg+1,c
  3979  0005B8  0E00               	movlw	0
  3980  0005BA  6E3E               	movwf	drawtext@bg,c
  3981  0005BC  0E01               	movlw	1
  3982  0005BE  6E40               	movwf	drawtext@size,c
  3983  0005C0  0E23               	movlw	35
  3984  0005C2  EC99  F00D         	call	_drawtext
  3985                           
  3986                           ;Main_Screen.c: 171: drawtext(95, 130, Heater_SW_Txt, 0xF800 , 0x0000 , 1);
  3987  0005C6  0E82               	movlw	130
  3988  0005C8  6E39               	movwf	drawtext@y,c
  3989  0005CA  0ED5               	movlw	low _Heater_SW_Txt
  3990  0005CC  6E3A               	movwf	drawtext@_text,c
  3991  0005CE  0E00               	movlw	high _Heater_SW_Txt
  3992  0005D0  6E3B               	movwf	drawtext@_text+1,c
  3993  0005D2  0EF8               	movlw	248
  3994  0005D4  6E3D               	movwf	drawtext@color+1,c
  3995  0005D6  0E00               	movlw	0
  3996  0005D8  6E3C               	movwf	drawtext@color,c
  3997  0005DA  0E00               	movlw	0
  3998  0005DC  6E3F               	movwf	drawtext@bg+1,c
  3999  0005DE  0E00               	movlw	0
  4000  0005E0  6E3E               	movwf	drawtext@bg,c
  4001  0005E2  0E01               	movlw	1
  4002  0005E4  6E40               	movwf	drawtext@size,c
  4003  0005E6  0E5F               	movlw	95
  4004  0005E8  EC99  F00D         	call	_drawtext
  4005                           
  4006                           ;Main_Screen.c: 172: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  4007  0005EC  0E96               	movlw	150
  4008  0005EE  6E39               	movwf	drawtext@y,c
  4009  0005F0  0ED1               	movlw	low _DC_Txt
  4010  0005F2  6E3A               	movwf	drawtext@_text,c
  4011  0005F4  0E00               	movlw	high _DC_Txt
  4012  0005F6  6E3B               	movwf	drawtext@_text+1,c
  4013  0005F8  0E07               	movlw	7
  4014  0005FA  6E3D               	movwf	drawtext@color+1,c
  4015  0005FC  0EE0               	movlw	224
  4016  0005FE  6E3C               	movwf	drawtext@color,c
  4017  000600  0E00               	movlw	0
  4018  000602  6E3F               	movwf	drawtext@bg+1,c
  4019  000604  0E00               	movlw	0
  4020  000606  6E3E               	movwf	drawtext@bg,c
  4021  000608  0E01               	movlw	1
  4022  00060A  6E40               	movwf	drawtext@size,c
  4023  00060C  0E0A               	movlw	10
  4024  00060E  EC99  F00D         	call	_drawtext
  4025                           
  4026                           ;Main_Screen.c: 173: drawtext(35, 150, RTC_ALARM_Txt, 0x07E0, 0x0000, 1);
  4027  000612  0E96               	movlw	150
  4028  000614  6E39               	movwf	drawtext@y,c
  4029  000616  0EE1               	movlw	low _RTC_ALARM_Txt
  4030  000618  6E3A               	movwf	drawtext@_text,c
  4031  00061A  0E00               	movlw	high _RTC_ALARM_Txt
  4032  00061C  6E3B               	movwf	drawtext@_text+1,c
  4033  00061E  0E07               	movlw	7
  4034  000620  6E3D               	movwf	drawtext@color+1,c
  4035  000622  0EE0               	movlw	224
  4036  000624  6E3C               	movwf	drawtext@color,c
  4037  000626  0E00               	movlw	0
  4038  000628  6E3F               	movwf	drawtext@bg+1,c
  4039  00062A  0E00               	movlw	0
  4040  00062C  6E3E               	movwf	drawtext@bg,c
  4041  00062E  0E01               	movlw	1
  4042  000630  6E40               	movwf	drawtext@size,c
  4043  000632  0E23               	movlw	35
  4044  000634  EC99  F00D         	call	_drawtext
  4045                           
  4046                           ;Main_Screen.c: 174: drawtext(50, 150, Volt_Txt, 0x07E0, 0x0000, 1);
  4047  000638  0E96               	movlw	150
  4048  00063A  6E39               	movwf	drawtext@y,c
  4049  00063C  0EB8               	movlw	low _Volt_Txt
  4050  00063E  6E3A               	movwf	drawtext@_text,c
  4051  000640  0E00               	movlw	high _Volt_Txt
  4052  000642  6E3B               	movwf	drawtext@_text+1,c
  4053  000644  0E07               	movlw	7
  4054  000646  6E3D               	movwf	drawtext@color+1,c
  4055  000648  0EE0               	movlw	224
  4056  00064A  6E3C               	movwf	drawtext@color,c
  4057  00064C  0E00               	movlw	0
  4058  00064E  6E3F               	movwf	drawtext@bg+1,c
  4059  000650  0E00               	movlw	0
  4060  000652  6E3E               	movwf	drawtext@bg,c
  4061  000654  0E01               	movlw	1
  4062  000656  6E40               	movwf	drawtext@size,c
  4063  000658  0E32               	movlw	50
  4064  00065A  EC99  F00D         	call	_drawtext
  4065                           
  4066                           ;Main_Screen.c: 175: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  4067  00065E  0E96               	movlw	150
  4068  000660  6E39               	movwf	drawtext@y,c
  4069  000662  0EC3               	movlw	low _RPM_Txt
  4070  000664  6E3A               	movwf	drawtext@_text,c
  4071  000666  0E00               	movlw	high _RPM_Txt
  4072  000668  6E3B               	movwf	drawtext@_text+1,c
  4073  00066A  0E07               	movlw	7
  4074  00066C  6E3D               	movwf	drawtext@color+1,c
  4075  00066E  0EE0               	movlw	224
  4076  000670  6E3C               	movwf	drawtext@color,c
  4077  000672  0E00               	movlw	0
  4078  000674  6E3F               	movwf	drawtext@bg+1,c
  4079  000676  0E00               	movlw	0
  4080  000678  6E3E               	movwf	drawtext@bg,c
  4081  00067A  0E01               	movlw	1
  4082  00067C  6E40               	movwf	drawtext@size,c
  4083  00067E  0E5D               	movlw	93
  4084  000680  EC99  F00D         	call	_drawtext
  4085  000684  0012               	return		;funcret
  4086  000686                     __end_of_Update_Screen:
  4087                           	opt stack 0
  4088                           tblptru	equ	0xFF8
  4089                           tblptrh	equ	0xFF7
  4090                           tblptrl	equ	0xFF6
  4091                           tablat	equ	0xFF5
  4092                           postinc0	equ	0xFEE
  4093                           wreg	equ	0xFE8
  4094                           postdec1	equ	0xFE5
  4095                           fsr1l	equ	0xFE1
  4096                           status	equ	0xFD8
  4097                           
  4098 ;; *************** function _Toggle_Heater *****************
  4099 ;; Defined at:
  4100 ;;		line 36 in file "Fan_Support.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;		None
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;		None
  4105 ;; Return value:  Size  Location     Type
  4106 ;;		None               void
  4107 ;; Registers used:
  4108 ;;		wreg, status,2, status,0, cstack
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4118 ;;Total ram usage:        0 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    7
  4121 ;; This function calls:
  4122 ;;		_Turn_Off_Fan
  4123 ;;		_Turn_On_Fan
  4124 ;; This function is called by:
  4125 ;;		_main
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           	psect	text6
  4130  003D10                     __ptext6:
  4131                           	opt stack 0
  4132  003D10                     _Toggle_Heater:
  4133                           	opt stack 23
  4134                           
  4135                           ;Fan_Support.c: 38: if(PORTEbits.RE0==0) Turn_On_Fan();
  4136                           
  4137                           ;incstack = 0
  4138  003D10  B084               	btfsc	3972,0,c	;volatile
  4139  003D12  D003               	goto	l9503
  4140  003D14  ECD0  F01E         	call	_Turn_On_Fan	;wreg free
  4141  003D18  D003               	goto	l54
  4142  003D1A                     l9503:
  4143                           
  4144                           ;Fan_Support.c: 39: else Turn_Off_Fan();
  4145  003D1A  EC12  F01F         	call	_Turn_Off_Fan	;wreg free
  4146  003D1E  D000               	goto	l54
  4147  003D20                     l54:
  4148  003D20  0012               	return		;funcret
  4149  003D22                     __end_of_Toggle_Heater:
  4150                           	opt stack 0
  4151                           tblptru	equ	0xFF8
  4152                           tblptrh	equ	0xFF7
  4153                           tblptrl	equ	0xFF6
  4154                           tablat	equ	0xFF5
  4155                           postinc0	equ	0xFEE
  4156                           wreg	equ	0xFE8
  4157                           postdec1	equ	0xFE5
  4158                           fsr1l	equ	0xFE1
  4159                           status	equ	0xFD8
  4160                           
  4161 ;; *************** function _Test_Alarm *****************
  4162 ;; Defined at:
  4163 ;;		line 269 in file "Main.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;		None
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;		None
  4168 ;; Return value:  Size  Location     Type
  4169 ;;		None               void
  4170 ;; Registers used:
  4171 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4181 ;;Total ram usage:        0 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; Hardware stack levels required when called:    9
  4184 ;; This function calls:
  4185 ;;		_Activate_Buzzer
  4186 ;;		_DS3231_Turn_Off_Alarm
  4187 ;;		_DS3231_Turn_On_Alarm
  4188 ;;		_Deactivate_Buzzer
  4189 ;;		_Set_RGB_Color
  4190 ;;		___ftge
  4191 ;;		_do_update_pwm
  4192 ;; This function is called by:
  4193 ;;		_main
  4194 ;; This function uses a non-reentrant model
  4195 ;;
  4196                           
  4197                           	psect	text7
  4198  001902                     __ptext7:
  4199                           	opt stack 0
  4200  001902                     _Test_Alarm:
  4201                           	opt stack 21
  4202                           
  4203                           ;Main.c: 271: if(!alarm_mode && ALARMEN){
  4204                           
  4205                           ;incstack = 0
  4206  001902  0100               	movlb	0	; () banked
  4207  001904  51EC               	movf	_alarm_mode& (0+255),w,b
  4208  001906  0100               	movlb	0	; () banked
  4209  001908  11ED               	iorwf	(_alarm_mode+1)& (0+255),w,b
  4210  00190A  A4D8               	btfss	status,2,c
  4211  00190C  D00B               	goto	l9609
  4212                           
  4213                           ; BSR set to: 0
  4214  00190E  5044               	movf	_ALARMEN,w,c
  4215  001910  1045               	iorwf	_ALARMEN+1,w,c
  4216  001912  B4D8               	btfsc	status,2,c
  4217  001914  D007               	goto	l9609
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;Main.c: 272: DS3231_Turn_On_Alarm();
  4221  001916  EC43  F01A         	call	_DS3231_Turn_On_Alarm	;wreg free
  4222                           
  4223                           ;Main.c: 273: alarm_mode = 1;
  4224  00191A  0E00               	movlw	0
  4225  00191C  0100               	movlb	0	; () banked
  4226  00191E  6FED               	movwf	(_alarm_mode+1)& (0+255),b
  4227  001920  0E01               	movlw	1
  4228  001922  D07C               	goto	L4
  4229  001924                     l9609:
  4230                           
  4231                           ; BSR set to: 0
  4232                           ;Main.c: 275: else if(alarm_mode && !ALARMEN){
  4233  001924  0100               	movlb	0	; () banked
  4234  001926  51EC               	movf	_alarm_mode& (0+255),w,b
  4235  001928  0100               	movlb	0	; () banked
  4236  00192A  11ED               	iorwf	(_alarm_mode+1)& (0+255),w,b
  4237  00192C  B4D8               	btfsc	status,2,c
  4238  00192E  D016               	goto	l9623
  4239                           
  4240                           ; BSR set to: 0
  4241  001930  5044               	movf	_ALARMEN,w,c
  4242  001932  1045               	iorwf	_ALARMEN+1,w,c
  4243  001934  A4D8               	btfss	status,2,c
  4244  001936  D012               	goto	l9623
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;Main.c: 276: DS3231_Turn_Off_Alarm();
  4248  001938  EC6C  F01A         	call	_DS3231_Turn_Off_Alarm	;wreg free
  4249                           
  4250                           ;Main.c: 277: alarm_mode = 0;
  4251  00193C  0E00               	movlw	0
  4252  00193E  0100               	movlb	0	; () banked
  4253  001940  6FED               	movwf	(_alarm_mode+1)& (0+255),b
  4254  001942  0E00               	movlw	0
  4255  001944  6FEC               	movwf	_alarm_mode& (0+255),b
  4256                           
  4257                           ; BSR set to: 0
  4258                           ;Main.c: 278: Set_RGB_Color(0x00);
  4259  001946  0E00               	movlw	0
  4260  001948  EC10  F01C         	call	_Set_RGB_Color
  4261                           
  4262                           ;Main.c: 279: Deactivate_Buzzer();
  4263  00194C  EC30  F01F         	call	_Deactivate_Buzzer	;wreg free
  4264                           
  4265                           ;Main.c: 280: MATCHED = 0;
  4266  001950  0E00               	movlw	0
  4267  001952  0100               	movlb	0	; () banked
  4268  001954  6FEB               	movwf	(_MATCHED+1)& (0+255),b
  4269  001956  0E00               	movlw	0
  4270  001958  6FEA               	movwf	_MATCHED& (0+255),b
  4271                           
  4272                           ;Main.c: 281: }else if (alarm_mode == 1 && ALARMEN ==1)
  4273  00195A  D062               	goto	l592
  4274  00195C                     l9623:
  4275                           
  4276                           ; BSR set to: 0
  4277  00195C  0100               	movlb	0	; () banked
  4278  00195E  05EC               	decf	_alarm_mode& (0+255),w,b
  4279  001960  0100               	movlb	0	; () banked
  4280  001962  11ED               	iorwf	(_alarm_mode+1)& (0+255),w,b
  4281  001964  A4D8               	btfss	status,2,c
  4282  001966  D05C               	goto	l592
  4283                           
  4284                           ; BSR set to: 0
  4285  001968  0444               	decf	_ALARMEN,w,c
  4286  00196A  1045               	iorwf	_ALARMEN+1,w,c
  4287  00196C  A4D8               	btfss	status,2,c
  4288  00196E  D058               	goto	l592
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;Main.c: 283: {
  4292                           ;Main.c: 285: if(PORTBbits.RB2 == 0)
  4293  001970  B481               	btfsc	3969,2,c	;volatile
  4294  001972  D00A               	goto	l586
  4295                           
  4296                           ; BSR set to: 0
  4297                           ;Main.c: 286: {
  4298                           ;Main.c: 287: MATCHED = 1;
  4299  001974  0E00               	movlw	0
  4300  001976  0100               	movlb	0	; () banked
  4301  001978  6FEB               	movwf	(_MATCHED+1)& (0+255),b
  4302  00197A  0E01               	movlw	1
  4303  00197C  6FEA               	movwf	_MATCHED& (0+255),b
  4304                           
  4305                           ; BSR set to: 0
  4306                           ;Main.c: 288: Activate_Buzzer();
  4307  00197E  EC91  F01E         	call	_Activate_Buzzer	;wreg free
  4308                           
  4309                           ;Main.c: 289: do_update_pwm(duty_cycle);
  4310  001982  505D               	movf	_duty_cycle,w,c
  4311  001984  ECB8  F014         	call	_do_update_pwm
  4312  001988                     l586:
  4313                           
  4314                           ;Main.c: 290: }
  4315                           ;Main.c: 291: if (MATCHED == 1)
  4316  001988  0100               	movlb	0	; () banked
  4317  00198A  05EA               	decf	_MATCHED& (0+255),w,b
  4318  00198C  0100               	movlb	0	; () banked
  4319  00198E  11EB               	iorwf	(_MATCHED+1)& (0+255),w,b
  4320  001990  A4D8               	btfss	status,2,c
  4321  001992  D046               	goto	l592
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;Main.c: 292: { Activate_Buzzer();
  4325  001994  EC91  F01E         	call	_Activate_Buzzer	;wreg free
  4326                           
  4327                           ;Main.c: 293: Set_RGB_Color(color++);
  4328  001998  0100               	movlb	0	; () banked
  4329  00199A  51EE               	movf	_color& (0+255),w,b
  4330  00199C  EC10  F01C         	call	_Set_RGB_Color
  4331  0019A0  0100               	movlb	0	; () banked
  4332  0019A2  4BEE               	infsnz	_color& (0+255),f,b
  4333  0019A4  2BEF               	incf	(_color+1)& (0+255),f,b
  4334                           
  4335                           ; BSR set to: 0
  4336                           ;Main.c: 294: if(color>7)
  4337  0019A6  0100               	movlb	0	; () banked
  4338  0019A8  BFEF               	btfsc	(_color+1)& (0+255),7,b
  4339  0019AA  D00E               	goto	l9645
  4340  0019AC  0100               	movlb	0	; () banked
  4341  0019AE  51EF               	movf	(_color+1)& (0+255),w,b
  4342  0019B0  E105               	bnz	u6940
  4343  0019B2  0E08               	movlw	8
  4344  0019B4  0100               	movlb	0	; () banked
  4345  0019B6  5DEE               	subwf	_color& (0+255),w,b
  4346  0019B8  A0D8               	btfss	status,0,c
  4347  0019BA  D006               	goto	l9645
  4348  0019BC                     u6940:
  4349                           
  4350                           ; BSR set to: 0
  4351                           ;Main.c: 295: color =0;
  4352  0019BC  0E00               	movlw	0
  4353  0019BE  0100               	movlb	0	; () banked
  4354  0019C0  6FEF               	movwf	(_color+1)& (0+255),b
  4355  0019C2  0E00               	movlw	0
  4356  0019C4  6FEE               	movwf	_color& (0+255),b
  4357  0019C6  D000               	goto	l9645
  4358  0019C8                     l9645:
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;Main.c: 297: if (volt > 3 || ALARMEN == 0)
  4362  0019C8  0E00               	movlw	0
  4363  0019CA  6E11               	movwf	___ftge@ff1,c
  4364  0019CC  0E40               	movlw	64
  4365  0019CE  6E12               	movwf	___ftge@ff1+1,c
  4366  0019D0  0E40               	movlw	64
  4367  0019D2  6E13               	movwf	___ftge@ff1+2,c
  4368  0019D4  C0E7  F014         	movff	_volt,___ftge@ff2
  4369  0019D8  C0E8  F015         	movff	_volt+1,___ftge@ff2+1
  4370  0019DC  C0E9  F016         	movff	_volt+2,___ftge@ff2+2
  4371  0019E0  EC69  F015         	call	___ftge	;wreg free
  4372  0019E4  A0D8               	btfss	status,0,c
  4373  0019E6  D004               	goto	l9649
  4374  0019E8  5044               	movf	_ALARMEN,w,c
  4375  0019EA  1045               	iorwf	_ALARMEN+1,w,c
  4376  0019EC  A4D8               	btfss	status,2,c
  4377  0019EE  D018               	goto	l592
  4378  0019F0                     l9649:
  4379                           
  4380                           ;Main.c: 298: {
  4381                           ;Main.c: 299: MATCHED = 0;
  4382  0019F0  0E00               	movlw	0
  4383  0019F2  0100               	movlb	0	; () banked
  4384  0019F4  6FEB               	movwf	(_MATCHED+1)& (0+255),b
  4385  0019F6  0E00               	movlw	0
  4386  0019F8  6FEA               	movwf	_MATCHED& (0+255),b
  4387                           
  4388                           ;Main.c: 300: color =0;
  4389  0019FA  0E00               	movlw	0
  4390  0019FC  0100               	movlb	0	; () banked
  4391  0019FE  6FEF               	movwf	(_color+1)& (0+255),b
  4392  001A00  0E00               	movlw	0
  4393  001A02  6FEE               	movwf	_color& (0+255),b
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;Main.c: 301: Set_RGB_Color(0x00);
  4397  001A04  0E00               	movlw	0
  4398  001A06  EC10  F01C         	call	_Set_RGB_Color
  4399                           
  4400                           ;Main.c: 302: Deactivate_Buzzer();
  4401  001A0A  EC30  F01F         	call	_Deactivate_Buzzer	;wreg free
  4402                           
  4403                           ;Main.c: 303: do_update_pwm(duty_cycle);
  4404  001A0E  505D               	movf	_duty_cycle,w,c
  4405  001A10  ECB8  F014         	call	_do_update_pwm
  4406                           
  4407                           ;Main.c: 304: alarm_mode = 0;
  4408  001A14  0E00               	movlw	0
  4409  001A16  0100               	movlb	0	; () banked
  4410  001A18  6FED               	movwf	(_alarm_mode+1)& (0+255),b
  4411  001A1A  0E00               	movlw	0
  4412  001A1C                     L4:
  4413  001A1C  6FEC               	movwf	_alarm_mode& (0+255),b
  4414                           
  4415                           ; BSR set to: 0
  4416                           
  4417                           ; BSR set to: 0
  4418                           
  4419                           ; BSR set to: 0
  4420                           
  4421                           ; BSR set to: 0
  4422  001A1E  D000               	goto	l592
  4423  001A20                     l592:
  4424  001A20  0012               	return		;funcret
  4425  001A22                     __end_of_Test_Alarm:
  4426                           	opt stack 0
  4427                           tblptru	equ	0xFF8
  4428                           tblptrh	equ	0xFF7
  4429                           tblptrl	equ	0xFF6
  4430                           tablat	equ	0xFF5
  4431                           postinc0	equ	0xFEE
  4432                           wreg	equ	0xFE8
  4433                           postdec1	equ	0xFE5
  4434                           fsr1l	equ	0xFE1
  4435                           status	equ	0xFD8
  4436                           
  4437 ;; *************** function ___ftge *****************
  4438 ;; Defined at:
  4439 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftge.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  ff1             3   16[COMRAM] float 
  4442 ;;  ff2             3   19[COMRAM] float 
  4443 ;; Auto vars:     Size  Location     Type
  4444 ;;		None
  4445 ;; Return value:  Size  Location     Type
  4446 ;;		None               void
  4447 ;; Registers used:
  4448 ;;		wreg, status,2, status,0
  4449 ;; Tracked objects:
  4450 ;;		On entry : 0/0
  4451 ;;		On exit  : 0/0
  4452 ;;		Unchanged: 0/0
  4453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4454 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4457 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4458 ;;Total ram usage:        9 bytes
  4459 ;; Hardware stack levels used:    1
  4460 ;; Hardware stack levels required when called:    3
  4461 ;; This function calls:
  4462 ;;		Nothing
  4463 ;; This function is called by:
  4464 ;;		_Test_Alarm
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           	psect	text8
  4469  002AD2                     __ptext8:
  4470                           	opt stack 0
  4471  002AD2                     ___ftge:
  4472                           	opt stack 26
  4473                           
  4474                           ;incstack = 0
  4475  002AD2  AE13               	btfss	___ftge@ff1+2,7,c
  4476  002AD4  D017               	goto	l6835
  4477  002AD6  C011  F017         	movff	___ftge@ff1,??___ftge
  4478  002ADA  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
  4479  002ADE  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
  4480  002AE2  1E17               	comf	??___ftge,f,c
  4481  002AE4  1E18               	comf	??___ftge+1,f,c
  4482  002AE6  1E19               	comf	??___ftge+2,f,c
  4483  002AE8  2A17               	incf	??___ftge,f,c
  4484  002AEA  0E00               	movlw	0
  4485  002AEC  2218               	addwfc	??___ftge+1,f,c
  4486  002AEE  2219               	addwfc	??___ftge+2,f,c
  4487  002AF0  0E00               	movlw	0
  4488  002AF2  2417               	addwf	??___ftge,w,c
  4489  002AF4  6E11               	movwf	___ftge@ff1,c
  4490  002AF6  0E00               	movlw	0
  4491  002AF8  2018               	addwfc	??___ftge+1,w,c
  4492  002AFA  6E12               	movwf	___ftge@ff1+1,c
  4493  002AFC  0E80               	movlw	128
  4494  002AFE  2019               	addwfc	??___ftge+2,w,c
  4495  002B00  6E13               	movwf	___ftge@ff1+2,c
  4496  002B02  D000               	goto	l6835
  4497  002B04                     l6835:
  4498  002B04  AE16               	btfss	___ftge@ff2+2,7,c
  4499  002B06  D017               	goto	l6839
  4500  002B08  C014  F017         	movff	___ftge@ff2,??___ftge
  4501  002B0C  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
  4502  002B10  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
  4503  002B14  1E17               	comf	??___ftge,f,c
  4504  002B16  1E18               	comf	??___ftge+1,f,c
  4505  002B18  1E19               	comf	??___ftge+2,f,c
  4506  002B1A  2A17               	incf	??___ftge,f,c
  4507  002B1C  0E00               	movlw	0
  4508  002B1E  2218               	addwfc	??___ftge+1,f,c
  4509  002B20  2219               	addwfc	??___ftge+2,f,c
  4510  002B22  0E00               	movlw	0
  4511  002B24  2417               	addwf	??___ftge,w,c
  4512  002B26  6E14               	movwf	___ftge@ff2,c
  4513  002B28  0E00               	movlw	0
  4514  002B2A  2018               	addwfc	??___ftge+1,w,c
  4515  002B2C  6E15               	movwf	___ftge@ff2+1,c
  4516  002B2E  0E80               	movlw	128
  4517  002B30  2019               	addwfc	??___ftge+2,w,c
  4518  002B32  6E16               	movwf	___ftge@ff2+2,c
  4519  002B34  D000               	goto	l6839
  4520  002B36                     l6839:
  4521  002B36  0E00               	movlw	0
  4522  002B38  1A11               	xorwf	___ftge@ff1,f,c
  4523  002B3A  0E00               	movlw	0
  4524  002B3C  1A12               	xorwf	___ftge@ff1+1,f,c
  4525  002B3E  0E80               	movlw	128
  4526  002B40  1A13               	xorwf	___ftge@ff1+2,f,c
  4527  002B42  0E00               	movlw	0
  4528  002B44  1A14               	xorwf	___ftge@ff2,f,c
  4529  002B46  0E00               	movlw	0
  4530  002B48  1A15               	xorwf	___ftge@ff2+1,f,c
  4531  002B4A  0E80               	movlw	128
  4532  002B4C  1A16               	xorwf	___ftge@ff2+2,f,c
  4533  002B4E  5014               	movf	___ftge@ff2,w,c
  4534  002B50  5C11               	subwf	___ftge@ff1,w,c
  4535  002B52  5015               	movf	___ftge@ff2+1,w,c
  4536  002B54  5812               	subwfb	___ftge@ff1+1,w,c
  4537  002B56  5016               	movf	___ftge@ff2+2,w,c
  4538  002B58  5813               	subwfb	___ftge@ff1+2,w,c
  4539  002B5A  B0D8               	btfsc	status,0,c
  4540  002B5C  D002               	goto	l6845
  4541  002B5E  90D8               	bcf	status,0,c
  4542  002B60  D002               	goto	l1904
  4543  002B62                     l6845:
  4544  002B62  80D8               	bsf	status,0,c
  4545  002B64  D000               	goto	l1904
  4546  002B66                     l1904:
  4547  002B66  0012               	return		;funcret
  4548  002B68                     __end_of___ftge:
  4549                           	opt stack 0
  4550                           tblptru	equ	0xFF8
  4551                           tblptrh	equ	0xFF7
  4552                           tblptrl	equ	0xFF6
  4553                           tablat	equ	0xFF5
  4554                           postinc0	equ	0xFEE
  4555                           wreg	equ	0xFE8
  4556                           postdec1	equ	0xFE5
  4557                           fsr1l	equ	0xFE1
  4558                           status	equ	0xFD8
  4559                           
  4560 ;; *************** function _Set_RGB_Color *****************
  4561 ;; Defined at:
  4562 ;;		line 178 in file "utils.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;  color           1    wreg     unsigned char 
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;  color           1   35[COMRAM] unsigned char 
  4567 ;;  D3             16   19[COMRAM] int [8]
  4568 ;;  masked_d        1   37[COMRAM] unsigned char 
  4569 ;;  masked          1   36[COMRAM] unsigned char 
  4570 ;; Return value:  Size  Location     Type
  4571 ;;		None               void
  4572 ;; Registers used:
  4573 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4574 ;; Tracked objects:
  4575 ;;		On entry : 0/0
  4576 ;;		On exit  : 0/0
  4577 ;;		Unchanged: 0/0
  4578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4580 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4581 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4582 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4583 ;;Total ram usage:       20 bytes
  4584 ;; Hardware stack levels used:    1
  4585 ;; Hardware stack levels required when called:    4
  4586 ;; This function calls:
  4587 ;;		_Wait_One_Sec
  4588 ;; This function is called by:
  4589 ;;		_Test_Alarm
  4590 ;; This function uses a non-reentrant model
  4591 ;;
  4592                           
  4593                           	psect	text9
  4594  003820                     __ptext9:
  4595                           	opt stack 0
  4596  003820                     _Set_RGB_Color:
  4597                           	opt stack 25
  4598                           
  4599                           ;incstack = 0
  4600                           ;Set_RGB_Color@color stored from wreg
  4601  003820  6E24               	movwf	Set_RGB_Color@color,c
  4602                           
  4603                           ;utils.c: 180: unsigned char masked=0x8F;
  4604  003822  0E8F               	movlw	143
  4605  003824  6E25               	movwf	Set_RGB_Color@masked,c
  4606                           
  4607                           ;utils.c: 181: unsigned char masked_d=PORTD & masked;
  4608  003826  5083               	movf	3971,w,c	;volatile
  4609  003828  1425               	andwf	Set_RGB_Color@masked,w,c
  4610  00382A  6E26               	movwf	Set_RGB_Color@masked_d,c
  4611                           
  4612                           ;utils.c: 182: int D3[8] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07};
  4613  00382C  EE21  F034         	lfsr	2,Set_RGB_Color@F4250
  4614  003830  EE10  F014         	lfsr	1,Set_RGB_Color@D3
  4615  003834  0E0F               	movlw	15
  4616  003836                     u4171:
  4617  003836  CFDB FFE3          	movff	plusw2,plusw1
  4618  00383A  06E8               	decf	wreg,f,c
  4619  00383C  E2FC               	bc	u4171
  4620                           
  4621                           ;utils.c: 183: PORTD = (D3[color]<<4)|masked_d;
  4622  00383E  5024               	movf	Set_RGB_Color@color,w,c
  4623  003840  0D02               	mullw	2
  4624  003842  0E14               	movlw	low Set_RGB_Color@D3
  4625  003844  24F3               	addwf	prodl,w,c
  4626  003846  6ED9               	movwf	fsr2l,c
  4627  003848  0E00               	movlw	high Set_RGB_Color@D3
  4628  00384A  20F4               	addwfc	prodh,w,c
  4629  00384C  6EDA               	movwf	fsr2h,c
  4630  00384E  50DF               	movf	indf2,w,c
  4631  003850  6E13               	movwf	??_Set_RGB_Color& (0+255),c
  4632  003852  3813               	swapf	??_Set_RGB_Color,w,c
  4633  003854  0BF0               	andlw	240
  4634  003856  1026               	iorwf	Set_RGB_Color@masked_d,w,c
  4635  003858  6E83               	movwf	3971,c	;volatile
  4636                           
  4637                           ;utils.c: 184: Wait_One_Sec();
  4638  00385A  ECCC  F01D         	call	_Wait_One_Sec	;wreg free
  4639  00385E  0012               	return		;funcret
  4640  003860                     __end_of_Set_RGB_Color:
  4641                           	opt stack 0
  4642                           tblptru	equ	0xFF8
  4643                           tblptrh	equ	0xFF7
  4644                           tblptrl	equ	0xFF6
  4645                           tablat	equ	0xFF5
  4646                           prodh	equ	0xFF4
  4647                           prodl	equ	0xFF3
  4648                           postinc0	equ	0xFEE
  4649                           wreg	equ	0xFE8
  4650                           postdec1	equ	0xFE5
  4651                           plusw1	equ	0xFE3
  4652                           fsr1l	equ	0xFE1
  4653                           indf2	equ	0xFDF
  4654                           plusw2	equ	0xFDB
  4655                           fsr2h	equ	0xFDA
  4656                           fsr2l	equ	0xFD9
  4657                           status	equ	0xFD8
  4658                           
  4659 ;; *************** function _DS3231_Turn_On_Alarm *****************
  4660 ;; Defined at:
  4661 ;;		line 210 in file "I2C_Support.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;		None
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;  Device          1   30[COMRAM] unsigned char 
  4666 ;;  control_F       1   29[COMRAM] unsigned char 
  4667 ;;  control_E       1   28[COMRAM] unsigned char 
  4668 ;;  Address_F       1   27[COMRAM] unsigned char 
  4669 ;;  Address_E       1   26[COMRAM] unsigned char 
  4670 ;; Return value:  Size  Location     Type
  4671 ;;		None               void
  4672 ;; Registers used:
  4673 ;;		wreg, status,2, status,0, cstack
  4674 ;; Tracked objects:
  4675 ;;		On entry : 0/0
  4676 ;;		On exit  : 0/0
  4677 ;;		Unchanged: 0/0
  4678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4680 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4682 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4683 ;;Total ram usage:        5 bytes
  4684 ;; Hardware stack levels used:    1
  4685 ;; Hardware stack levels required when called:    8
  4686 ;; This function calls:
  4687 ;;		_DS3231_Init
  4688 ;;		_I2C_Write_Address_Read_One_Byte
  4689 ;;		_I2C_Write_Address_Write_One_Byte
  4690 ;; This function is called by:
  4691 ;;		_Test_Alarm
  4692 ;; This function uses a non-reentrant model
  4693 ;;
  4694                           
  4695                           	psect	text10
  4696  003486                     __ptext10:
  4697                           	opt stack 0
  4698  003486                     _DS3231_Turn_On_Alarm:
  4699                           	opt stack 21
  4700                           
  4701                           ;I2C_Support.c: 212: char Device = 0x68;
  4702                           
  4703                           ;incstack = 0
  4704  003486  0E68               	movlw	104
  4705  003488  6E1F               	movwf	DS3231_Turn_On_Alarm@Device,c
  4706                           
  4707                           ;I2C_Support.c: 213: char Address_E = 0x0E;
  4708  00348A  0E0E               	movlw	14
  4709  00348C  6E1B               	movwf	DS3231_Turn_On_Alarm@Address_E,c
  4710                           
  4711                           ;I2C_Support.c: 214: char Address_F = 0x0F;
  4712  00348E  0E0F               	movlw	15
  4713  003490  6E1C               	movwf	DS3231_Turn_On_Alarm@Address_F,c
  4714                           
  4715                           ;I2C_Support.c: 215: char control_E;
  4716                           ;I2C_Support.c: 216: char control_F;
  4717                           ;I2C_Support.c: 218: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  4718  003492  C01B  F014         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  4719  003496  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4720  003498  ECAB  F01C         	call	_I2C_Write_Address_Read_One_Byte
  4721  00349C  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  4722                           
  4723                           ;I2C_Support.c: 219: control_E = control_E | 0x01;
  4724  00349E  501D               	movf	DS3231_Turn_On_Alarm@control_E,w,c
  4725  0034A0  0901               	iorlw	1
  4726  0034A2  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  4727                           
  4728                           ;I2C_Support.c: 220: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  4729  0034A4  C01B  F013         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  4730  0034A8  C01D  F014         	movff	DS3231_Turn_On_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  4731  0034AC  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4732  0034AE  EC8F  F01D         	call	_I2C_Write_Address_Write_One_Byte
  4733                           
  4734                           ;I2C_Support.c: 222: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  4735  0034B2  C01C  F014         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  4736  0034B6  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4737  0034B8  ECAB  F01C         	call	_I2C_Write_Address_Read_One_Byte
  4738  0034BC  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  4739                           
  4740                           ;I2C_Support.c: 223: control_F = control_F & 0xFE;
  4741  0034BE  501E               	movf	DS3231_Turn_On_Alarm@control_F,w,c
  4742  0034C0  0BFE               	andlw	254
  4743  0034C2  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  4744                           
  4745                           ;I2C_Support.c: 224: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  4746  0034C4  C01C  F013         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  4747  0034C8  C01E  F014         	movff	DS3231_Turn_On_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  4748  0034CC  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4749  0034CE  EC8F  F01D         	call	_I2C_Write_Address_Write_One_Byte
  4750                           
  4751                           ;I2C_Support.c: 225: DS3231_Init();
  4752  0034D2  EC5C  F014         	call	_DS3231_Init	;wreg free
  4753  0034D6  0012               	return		;funcret
  4754  0034D8                     __end_of_DS3231_Turn_On_Alarm:
  4755                           	opt stack 0
  4756                           tblptru	equ	0xFF8
  4757                           tblptrh	equ	0xFF7
  4758                           tblptrl	equ	0xFF6
  4759                           tablat	equ	0xFF5
  4760                           prodh	equ	0xFF4
  4761                           prodl	equ	0xFF3
  4762                           postinc0	equ	0xFEE
  4763                           wreg	equ	0xFE8
  4764                           postdec1	equ	0xFE5
  4765                           plusw1	equ	0xFE3
  4766                           fsr1l	equ	0xFE1
  4767                           indf2	equ	0xFDF
  4768                           plusw2	equ	0xFDB
  4769                           fsr2h	equ	0xFDA
  4770                           fsr2l	equ	0xFD9
  4771                           status	equ	0xFD8
  4772                           
  4773 ;; *************** function _DS3231_Turn_Off_Alarm *****************
  4774 ;; Defined at:
  4775 ;;		line 193 in file "I2C_Support.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;		None
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;  Device          1   30[COMRAM] unsigned char 
  4780 ;;  control_F       1   29[COMRAM] unsigned char 
  4781 ;;  control_E       1   28[COMRAM] unsigned char 
  4782 ;;  Address_F       1   27[COMRAM] unsigned char 
  4783 ;;  Address_E       1   26[COMRAM] unsigned char 
  4784 ;; Return value:  Size  Location     Type
  4785 ;;		None               void
  4786 ;; Registers used:
  4787 ;;		wreg, status,2, status,0, cstack
  4788 ;; Tracked objects:
  4789 ;;		On entry : 0/0
  4790 ;;		On exit  : 0/0
  4791 ;;		Unchanged: 0/0
  4792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4794 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4796 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4797 ;;Total ram usage:        5 bytes
  4798 ;; Hardware stack levels used:    1
  4799 ;; Hardware stack levels required when called:    8
  4800 ;; This function calls:
  4801 ;;		_DS3231_Init
  4802 ;;		_I2C_Write_Address_Read_One_Byte
  4803 ;;		_I2C_Write_Address_Write_One_Byte
  4804 ;; This function is called by:
  4805 ;;		_main
  4806 ;;		_Test_Alarm
  4807 ;; This function uses a non-reentrant model
  4808 ;;
  4809                           
  4810                           	psect	text11
  4811  0034D8                     __ptext11:
  4812                           	opt stack 0
  4813  0034D8                     _DS3231_Turn_Off_Alarm:
  4814                           	opt stack 21
  4815                           
  4816                           ;I2C_Support.c: 195: char Device = 0x68;
  4817                           
  4818                           ;incstack = 0
  4819  0034D8  0E68               	movlw	104
  4820  0034DA  6E1F               	movwf	DS3231_Turn_Off_Alarm@Device,c
  4821                           
  4822                           ;I2C_Support.c: 196: char Address_E = 0x0E;
  4823  0034DC  0E0E               	movlw	14
  4824  0034DE  6E1B               	movwf	DS3231_Turn_Off_Alarm@Address_E,c
  4825                           
  4826                           ;I2C_Support.c: 197: char Address_F = 0x0F;
  4827  0034E0  0E0F               	movlw	15
  4828  0034E2  6E1C               	movwf	DS3231_Turn_Off_Alarm@Address_F,c
  4829                           
  4830                           ;I2C_Support.c: 198: char control_E;
  4831                           ;I2C_Support.c: 199: char control_F;
  4832                           ;I2C_Support.c: 201: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  4833  0034E4  C01B  F014         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  4834  0034E8  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4835  0034EA  ECAB  F01C         	call	_I2C_Write_Address_Read_One_Byte
  4836  0034EE  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  4837                           
  4838                           ;I2C_Support.c: 202: control_E = control_E & 0xFE;
  4839  0034F0  501D               	movf	DS3231_Turn_Off_Alarm@control_E,w,c
  4840  0034F2  0BFE               	andlw	254
  4841  0034F4  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  4842                           
  4843                           ;I2C_Support.c: 203: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  4844  0034F6  C01B  F013         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  4845  0034FA  C01D  F014         	movff	DS3231_Turn_Off_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  4846  0034FE  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4847  003500  EC8F  F01D         	call	_I2C_Write_Address_Write_One_Byte
  4848                           
  4849                           ;I2C_Support.c: 204: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  4850  003504  C01C  F014         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  4851  003508  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4852  00350A  ECAB  F01C         	call	_I2C_Write_Address_Read_One_Byte
  4853  00350E  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  4854                           
  4855                           ;I2C_Support.c: 205: control_F = control_F & 0xFE;
  4856  003510  501E               	movf	DS3231_Turn_Off_Alarm@control_F,w,c
  4857  003512  0BFE               	andlw	254
  4858  003514  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  4859                           
  4860                           ;I2C_Support.c: 206: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  4861  003516  C01C  F013         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  4862  00351A  C01E  F014         	movff	DS3231_Turn_Off_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  4863  00351E  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4864  003520  EC8F  F01D         	call	_I2C_Write_Address_Write_One_Byte
  4865                           
  4866                           ;I2C_Support.c: 207: DS3231_Init();
  4867  003524  EC5C  F014         	call	_DS3231_Init	;wreg free
  4868  003528  0012               	return		;funcret
  4869  00352A                     __end_of_DS3231_Turn_Off_Alarm:
  4870                           	opt stack 0
  4871                           tblptru	equ	0xFF8
  4872                           tblptrh	equ	0xFF7
  4873                           tblptrl	equ	0xFF6
  4874                           tablat	equ	0xFF5
  4875                           prodh	equ	0xFF4
  4876                           prodl	equ	0xFF3
  4877                           postinc0	equ	0xFEE
  4878                           wreg	equ	0xFE8
  4879                           postdec1	equ	0xFE5
  4880                           plusw1	equ	0xFE3
  4881                           fsr1l	equ	0xFE1
  4882                           indf2	equ	0xFDF
  4883                           plusw2	equ	0xFDB
  4884                           fsr2h	equ	0xFDA
  4885                           fsr2l	equ	0xFD9
  4886                           status	equ	0xFD8
  4887                           
  4888 ;; *************** function _DS3231_Init *****************
  4889 ;; Defined at:
  4890 ;;		line 132 in file "I2C_Support.c"
  4891 ;; Parameters:    Size  Location     Type
  4892 ;;		None
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;  Device          1   25[COMRAM] unsigned char 
  4895 ;;  control_E       1   24[COMRAM] unsigned char 
  4896 ;;  Address_E       1   23[COMRAM] unsigned char 
  4897 ;;  Address_7       1   22[COMRAM] unsigned char 
  4898 ;; Return value:  Size  Location     Type
  4899 ;;		None               void
  4900 ;; Registers used:
  4901 ;;		wreg, status,2, status,0, cstack
  4902 ;; Tracked objects:
  4903 ;;		On entry : 0/0
  4904 ;;		On exit  : 0/0
  4905 ;;		Unchanged: 0/0
  4906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4908 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4910 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4911 ;;Total ram usage:        4 bytes
  4912 ;; Hardware stack levels used:    1
  4913 ;; Hardware stack levels required when called:    7
  4914 ;; This function calls:
  4915 ;;		_I2C_ReStart
  4916 ;;		_I2C_Read
  4917 ;;		_I2C_Start
  4918 ;;		_I2C_Stop
  4919 ;;		_I2C_Write
  4920 ;;		_I2C_Write_Address_Read_One_Byte
  4921 ;;		_I2C_Write_Address_Write_One_Byte
  4922 ;; This function is called by:
  4923 ;;		_DS3231_Turn_Off_Alarm
  4924 ;;		_DS3231_Turn_On_Alarm
  4925 ;; This function uses a non-reentrant model
  4926 ;;
  4927                           
  4928                           	psect	text12
  4929  0028B8                     __ptext12:
  4930                           	opt stack 0
  4931  0028B8                     _DS3231_Init:
  4932                           	opt stack 21
  4933                           
  4934                           ;I2C_Support.c: 134: char Device = 0x68;
  4935                           
  4936                           ;incstack = 0
  4937  0028B8  0E68               	movlw	104
  4938  0028BA  6E1A               	movwf	DS3231_Init@Device,c
  4939                           
  4940                           ;I2C_Support.c: 135: char Address_7 = 0x07;
  4941  0028BC  0E07               	movlw	7
  4942  0028BE  6E17               	movwf	DS3231_Init@Address_7,c
  4943                           
  4944                           ;I2C_Support.c: 136: char Address_E = 0x0E;
  4945  0028C0  0E0E               	movlw	14
  4946  0028C2  6E18               	movwf	DS3231_Init@Address_E,c
  4947                           
  4948                           ;I2C_Support.c: 137: char control_E;
  4949                           ;I2C_Support.c: 139: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  4950  0028C4  C018  F014         	movff	DS3231_Init@Address_E,I2C_Write_Address_Read_One_Byte@Address
  4951  0028C8  501A               	movf	DS3231_Init@Device,w,c
  4952  0028CA  ECAB  F01C         	call	_I2C_Write_Address_Read_One_Byte
  4953  0028CE  6E19               	movwf	DS3231_Init@control_E,c
  4954                           
  4955                           ;I2C_Support.c: 140: control_E = control_E & 0x01;
  4956  0028D0  5019               	movf	DS3231_Init@control_E,w,c
  4957  0028D2  0B01               	andlw	1
  4958  0028D4  6E19               	movwf	DS3231_Init@control_E,c
  4959                           
  4960                           ;I2C_Support.c: 141: control_E = control_E | 0x25;
  4961  0028D6  5019               	movf	DS3231_Init@control_E,w,c
  4962  0028D8  0925               	iorlw	37
  4963  0028DA  6E19               	movwf	DS3231_Init@control_E,c
  4964                           
  4965                           ;I2C_Support.c: 142: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  4966  0028DC  C018  F013         	movff	DS3231_Init@Address_E,I2C_Write_Address_Write_One_Byte@Address
  4967  0028E0  C019  F014         	movff	DS3231_Init@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  4968  0028E4  501A               	movf	DS3231_Init@Device,w,c
  4969  0028E6  EC8F  F01D         	call	_I2C_Write_Address_Write_One_Byte
  4970                           
  4971                           ;I2C_Support.c: 143: I2C_Start();
  4972  0028EA  ECBE  F01E         	call	_I2C_Start	;wreg free
  4973                           
  4974                           ;I2C_Support.c: 144: I2C_Write((Device << 1) | 0);
  4975  0028EE  501A               	movf	DS3231_Init@Device,w,c
  4976  0028F0  241A               	addwf	DS3231_Init@Device,w,c
  4977  0028F2  EC6E  F01C         	call	_I2C_Write
  4978                           
  4979                           ;I2C_Support.c: 145: I2C_Write(Address_7);
  4980  0028F6  5017               	movf	DS3231_Init@Address_7,w,c
  4981  0028F8  EC6E  F01C         	call	_I2C_Write
  4982                           
  4983                           ;I2C_Support.c: 146: I2C_ReStart();
  4984  0028FC  EC23  F01E         	call	_I2C_ReStart	;wreg free
  4985                           
  4986                           ;I2C_Support.c: 147: I2C_Write((Device << 1) | 1);
  4987  002900  80D8               	bsf	status,0,c
  4988  002902  341A               	rlcf	DS3231_Init@Device,w,c
  4989  002904  EC6E  F01C         	call	_I2C_Write
  4990                           
  4991                           ;I2C_Support.c: 148: alarm_second = I2C_Read(1);
  4992  002908  0E01               	movlw	1
  4993  00290A  ECCB  F01B         	call	_I2C_Read
  4994  00290E  6E59               	movwf	_alarm_second,c
  4995                           
  4996                           ;I2C_Support.c: 149: alarm_minute = I2C_Read(1);
  4997  002910  0E01               	movlw	1
  4998  002912  ECCB  F01B         	call	_I2C_Read
  4999  002916  6E58               	movwf	_alarm_minute,c
  5000                           
  5001                           ;I2C_Support.c: 150: alarm_hour = I2C_Read(1);
  5002  002918  0E01               	movlw	1
  5003  00291A  ECCB  F01B         	call	_I2C_Read
  5004  00291E  6E57               	movwf	_alarm_hour,c
  5005                           
  5006                           ;I2C_Support.c: 151: alarm_date = I2C_Read(0);
  5007  002920  0E00               	movlw	0
  5008  002922  ECCB  F01B         	call	_I2C_Read
  5009  002926  6E56               	movwf	_alarm_date,c
  5010                           
  5011                           ;I2C_Support.c: 153: alarm_second = alarm_second & 0x7f;
  5012  002928  5059               	movf	_alarm_second,w,c
  5013  00292A  0B7F               	andlw	127
  5014  00292C  6E59               	movwf	_alarm_second,c
  5015                           
  5016                           ;I2C_Support.c: 154: alarm_minute = alarm_minute & 0x7f;
  5017  00292E  5058               	movf	_alarm_minute,w,c
  5018  002930  0B7F               	andlw	127
  5019  002932  6E58               	movwf	_alarm_minute,c
  5020                           
  5021                           ;I2C_Support.c: 155: alarm_hour = alarm_hour & 0x7f;
  5022  002934  5057               	movf	_alarm_hour,w,c
  5023  002936  0B7F               	andlw	127
  5024  002938  6E57               	movwf	_alarm_hour,c
  5025                           
  5026                           ;I2C_Support.c: 156: alarm_date = alarm_date | 0x80;
  5027  00293A  5056               	movf	_alarm_date,w,c
  5028  00293C  0980               	iorlw	128
  5029  00293E  6E56               	movwf	_alarm_date,c
  5030                           
  5031                           ;I2C_Support.c: 158: I2C_Start();
  5032  002940  ECBE  F01E         	call	_I2C_Start	;wreg free
  5033                           
  5034                           ;I2C_Support.c: 159: I2C_Write((Device << 1) | 0);
  5035  002944  501A               	movf	DS3231_Init@Device,w,c
  5036  002946  241A               	addwf	DS3231_Init@Device,w,c
  5037  002948  EC6E  F01C         	call	_I2C_Write
  5038                           
  5039                           ;I2C_Support.c: 160: I2C_Write(Address_7);
  5040  00294C  5017               	movf	DS3231_Init@Address_7,w,c
  5041  00294E  EC6E  F01C         	call	_I2C_Write
  5042                           
  5043                           ;I2C_Support.c: 162: I2C_Write(alarm_second);
  5044  002952  5059               	movf	_alarm_second,w,c
  5045  002954  EC6E  F01C         	call	_I2C_Write
  5046                           
  5047                           ;I2C_Support.c: 163: I2C_Write(alarm_minute);
  5048  002958  5058               	movf	_alarm_minute,w,c
  5049  00295A  EC6E  F01C         	call	_I2C_Write
  5050                           
  5051                           ;I2C_Support.c: 164: I2C_Write(alarm_hour);
  5052  00295E  5057               	movf	_alarm_hour,w,c
  5053  002960  EC6E  F01C         	call	_I2C_Write
  5054                           
  5055                           ;I2C_Support.c: 165: I2C_Write(alarm_date);
  5056  002964  5056               	movf	_alarm_date,w,c
  5057  002966  EC6E  F01C         	call	_I2C_Write
  5058                           
  5059                           ;I2C_Support.c: 166: I2C_Stop();
  5060  00296A  ECB5  F01E         	call	_I2C_Stop	;wreg free
  5061  00296E  0012               	return		;funcret
  5062  002970                     __end_of_DS3231_Init:
  5063                           	opt stack 0
  5064                           tblptru	equ	0xFF8
  5065                           tblptrh	equ	0xFF7
  5066                           tblptrl	equ	0xFF6
  5067                           tablat	equ	0xFF5
  5068                           prodh	equ	0xFF4
  5069                           prodl	equ	0xFF3
  5070                           postinc0	equ	0xFEE
  5071                           wreg	equ	0xFE8
  5072                           postdec1	equ	0xFE5
  5073                           plusw1	equ	0xFE3
  5074                           fsr1l	equ	0xFE1
  5075                           indf2	equ	0xFDF
  5076                           plusw2	equ	0xFDB
  5077                           fsr2h	equ	0xFDA
  5078                           fsr2l	equ	0xFD9
  5079                           status	equ	0xFD8
  5080                           
  5081 ;; *************** function _I2C_Write_Address_Write_One_Byte *****************
  5082 ;; Defined at:
  5083 ;;		line 131 in file "I2C_Soft.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;  Device          1    wreg     unsigned char 
  5086 ;;  Address         1   18[COMRAM] unsigned char 
  5087 ;;  Data_Out        1   19[COMRAM] unsigned char 
  5088 ;; Auto vars:     Size  Location     Type
  5089 ;;  Device          1   20[COMRAM] unsigned char 
  5090 ;; Return value:  Size  Location     Type
  5091 ;;		None               void
  5092 ;; Registers used:
  5093 ;;		wreg, status,2, status,0, cstack
  5094 ;; Tracked objects:
  5095 ;;		On entry : 0/0
  5096 ;;		On exit  : 0/0
  5097 ;;		Unchanged: 0/0
  5098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5099 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5100 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5102 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5103 ;;Total ram usage:        3 bytes
  5104 ;; Hardware stack levels used:    1
  5105 ;; Hardware stack levels required when called:    5
  5106 ;; This function calls:
  5107 ;;		_I2C_Start
  5108 ;;		_I2C_Stop
  5109 ;;		_I2C_Write
  5110 ;; This function is called by:
  5111 ;;		_DS3231_Init
  5112 ;;		_DS3231_Turn_Off_Alarm
  5113 ;;		_DS3231_Turn_On_Alarm
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           	psect	text13
  5118  003B1E                     __ptext13:
  5119                           	opt stack 0
  5120  003B1E                     _I2C_Write_Address_Write_One_Byte:
  5121                           	opt stack 23
  5122                           
  5123                           ;incstack = 0
  5124                           ;I2C_Write_Address_Write_One_Byte@Device stored from wreg
  5125  003B1E  6E15               	movwf	I2C_Write_Address_Write_One_Byte@Device,c
  5126                           
  5127                           ;I2C_Soft.c: 133: I2C_Start();
  5128  003B20  ECBE  F01E         	call	_I2C_Start	;wreg free
  5129                           
  5130                           ;I2C_Soft.c: 134: I2C_Write((Device << 1) | 0);
  5131  003B24  5015               	movf	I2C_Write_Address_Write_One_Byte@Device,w,c
  5132  003B26  2415               	addwf	I2C_Write_Address_Write_One_Byte@Device,w,c
  5133  003B28  EC6E  F01C         	call	_I2C_Write
  5134                           
  5135                           ;I2C_Soft.c: 135: I2C_Write(Address);
  5136  003B2C  5013               	movf	I2C_Write_Address_Write_One_Byte@Address,w,c
  5137  003B2E  EC6E  F01C         	call	_I2C_Write
  5138                           
  5139                           ;I2C_Soft.c: 136: I2C_Write(Data_Out);
  5140  003B32  5014               	movf	I2C_Write_Address_Write_One_Byte@Data_Out,w,c
  5141  003B34  EC6E  F01C         	call	_I2C_Write
  5142                           
  5143                           ;I2C_Soft.c: 137: I2C_Stop();
  5144  003B38  ECB5  F01E         	call	_I2C_Stop	;wreg free
  5145  003B3C  0012               	return		;funcret
  5146  003B3E                     __end_of_I2C_Write_Address_Write_One_Byte:
  5147                           	opt stack 0
  5148                           tblptru	equ	0xFF8
  5149                           tblptrh	equ	0xFF7
  5150                           tblptrl	equ	0xFF6
  5151                           tablat	equ	0xFF5
  5152                           prodh	equ	0xFF4
  5153                           prodl	equ	0xFF3
  5154                           postinc0	equ	0xFEE
  5155                           wreg	equ	0xFE8
  5156                           postdec1	equ	0xFE5
  5157                           plusw1	equ	0xFE3
  5158                           fsr1l	equ	0xFE1
  5159                           indf2	equ	0xFDF
  5160                           plusw2	equ	0xFDB
  5161                           fsr2h	equ	0xFDA
  5162                           fsr2l	equ	0xFD9
  5163                           status	equ	0xFD8
  5164                           
  5165 ;; *************** function _I2C_Write_Address_Read_One_Byte *****************
  5166 ;; Defined at:
  5167 ;;		line 118 in file "I2C_Soft.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;  Device          1    wreg     unsigned char 
  5170 ;;  Address         1   19[COMRAM] unsigned char 
  5171 ;; Auto vars:     Size  Location     Type
  5172 ;;  Device          1   21[COMRAM] unsigned char 
  5173 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  5174 ;; Return value:  Size  Location     Type
  5175 ;;                  1    wreg      unsigned char 
  5176 ;; Registers used:
  5177 ;;		wreg, status,2, status,0, cstack
  5178 ;; Tracked objects:
  5179 ;;		On entry : 0/0
  5180 ;;		On exit  : 0/0
  5181 ;;		Unchanged: 0/0
  5182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5183 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5187 ;;Total ram usage:        3 bytes
  5188 ;; Hardware stack levels used:    1
  5189 ;; Hardware stack levels required when called:    6
  5190 ;; This function calls:
  5191 ;;		_I2C_ReStart
  5192 ;;		_I2C_Read
  5193 ;;		_I2C_Start
  5194 ;;		_I2C_Stop
  5195 ;;		_I2C_Write
  5196 ;; This function is called by:
  5197 ;;		_DS3231_Init
  5198 ;;		_DS3231_Turn_Off_Alarm
  5199 ;;		_DS3231_Turn_On_Alarm
  5200 ;; This function uses a non-reentrant model
  5201 ;;
  5202                           
  5203                           	psect	text14
  5204  003956                     __ptext14:
  5205                           	opt stack 0
  5206  003956                     _I2C_Write_Address_Read_One_Byte:
  5207                           	opt stack 22
  5208                           
  5209                           ;incstack = 0
  5210                           ;I2C_Write_Address_Read_One_Byte@Device stored from wreg
  5211  003956  6E16               	movwf	I2C_Write_Address_Read_One_Byte@Device,c
  5212                           
  5213                           ;I2C_Soft.c: 120: char Data_Ret;
  5214                           ;I2C_Soft.c: 121: I2C_Start();
  5215  003958  ECBE  F01E         	call	_I2C_Start	;wreg free
  5216                           
  5217                           ;I2C_Soft.c: 122: I2C_Write((Device << 1) | 0);
  5218  00395C  5016               	movf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5219  00395E  2416               	addwf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5220  003960  EC6E  F01C         	call	_I2C_Write
  5221                           
  5222                           ;I2C_Soft.c: 123: I2C_Write(Address);
  5223  003964  5014               	movf	I2C_Write_Address_Read_One_Byte@Address,w,c
  5224  003966  EC6E  F01C         	call	_I2C_Write
  5225                           
  5226                           ;I2C_Soft.c: 124: I2C_ReStart();
  5227  00396A  EC23  F01E         	call	_I2C_ReStart	;wreg free
  5228                           
  5229                           ;I2C_Soft.c: 125: I2C_Write((Device << 1) | 1);
  5230  00396E  80D8               	bsf	status,0,c
  5231  003970  3416               	rlcf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5232  003972  EC6E  F01C         	call	_I2C_Write
  5233                           
  5234                           ;I2C_Soft.c: 126: Data_Ret = I2C_Read(0);
  5235  003976  0E00               	movlw	0
  5236  003978  ECCB  F01B         	call	_I2C_Read
  5237  00397C  6E15               	movwf	I2C_Write_Address_Read_One_Byte@Data_Ret,c
  5238                           
  5239                           ;I2C_Soft.c: 127: I2C_Stop();
  5240  00397E  ECB5  F01E         	call	_I2C_Stop	;wreg free
  5241                           
  5242                           ;I2C_Soft.c: 128: return Data_Ret;
  5243  003982  5015               	movf	I2C_Write_Address_Read_One_Byte@Data_Ret,w,c
  5244  003984  D000               	goto	l153
  5245  003986                     l153:
  5246  003986  0012               	return		;funcret
  5247  003988                     __end_of_I2C_Write_Address_Read_One_Byte:
  5248                           	opt stack 0
  5249                           tblptru	equ	0xFF8
  5250                           tblptrh	equ	0xFF7
  5251                           tblptrl	equ	0xFF6
  5252                           tablat	equ	0xFF5
  5253                           prodh	equ	0xFF4
  5254                           prodl	equ	0xFF3
  5255                           postinc0	equ	0xFEE
  5256                           wreg	equ	0xFE8
  5257                           postdec1	equ	0xFE5
  5258                           plusw1	equ	0xFE3
  5259                           fsr1l	equ	0xFE1
  5260                           indf2	equ	0xFDF
  5261                           plusw2	equ	0xFDB
  5262                           fsr2h	equ	0xFDA
  5263                           fsr2l	equ	0xFD9
  5264                           status	equ	0xFD8
  5265                           
  5266 ;; *************** function _Activate_Buzzer *****************
  5267 ;; Defined at:
  5268 ;;		line 97 in file "utils.c"
  5269 ;; Parameters:    Size  Location     Type
  5270 ;;		None
  5271 ;; Auto vars:     Size  Location     Type
  5272 ;;		None
  5273 ;; Return value:  Size  Location     Type
  5274 ;;		None               void
  5275 ;; Registers used:
  5276 ;;		wreg, status,2
  5277 ;; Tracked objects:
  5278 ;;		On entry : 0/0
  5279 ;;		On exit  : 0/0
  5280 ;;		Unchanged: 0/0
  5281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5286 ;;Total ram usage:        0 bytes
  5287 ;; Hardware stack levels used:    1
  5288 ;; Hardware stack levels required when called:    3
  5289 ;; This function calls:
  5290 ;;		Nothing
  5291 ;; This function is called by:
  5292 ;;		_Test_Alarm
  5293 ;;		_Do_Beep
  5294 ;; This function uses a non-reentrant model
  5295 ;;
  5296                           
  5297                           	psect	text15
  5298  003D22                     __ptext15:
  5299                           	opt stack 0
  5300  003D22                     _Activate_Buzzer:
  5301                           	opt stack 26
  5302                           
  5303                           ;utils.c: 99: PR2 = 0b11111001 ;
  5304                           
  5305                           ;incstack = 0
  5306  003D22  0EF9               	movlw	249
  5307  003D24  6ECB               	movwf	4043,c	;volatile
  5308                           
  5309                           ;utils.c: 100: T2CON = 0b00000101 ;
  5310  003D26  0E05               	movlw	5
  5311  003D28  6ECA               	movwf	4042,c	;volatile
  5312                           
  5313                           ;utils.c: 101: CCPR2L = 0b01001010 ;
  5314  003D2A  0E4A               	movlw	74
  5315  003D2C  6EBB               	movwf	4027,c	;volatile
  5316                           
  5317                           ;utils.c: 102: CCP2CON = 0b00111100 ;
  5318  003D2E  0E3C               	movlw	60
  5319  003D30  6EBA               	movwf	4026,c	;volatile
  5320  003D32  0012               	return		;funcret
  5321  003D34                     __end_of_Activate_Buzzer:
  5322                           	opt stack 0
  5323                           tblptru	equ	0xFF8
  5324                           tblptrh	equ	0xFF7
  5325                           tblptrl	equ	0xFF6
  5326                           tablat	equ	0xFF5
  5327                           prodh	equ	0xFF4
  5328                           prodl	equ	0xFF3
  5329                           postinc0	equ	0xFEE
  5330                           wreg	equ	0xFE8
  5331                           postdec1	equ	0xFE5
  5332                           plusw1	equ	0xFE3
  5333                           fsr1l	equ	0xFE1
  5334                           indf2	equ	0xFDF
  5335                           plusw2	equ	0xFDB
  5336                           fsr2h	equ	0xFDA
  5337                           fsr2l	equ	0xFD9
  5338                           status	equ	0xFD8
  5339                           
  5340 ;; *************** function _Set_RPM_RGB *****************
  5341 ;; Defined at:
  5342 ;;		line 103 in file "Fan_Support.c"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;  rpm             2   64[COMRAM] int 
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;  RPM             2    8[BANK1 ] int 
  5347 ;;  maskedValue     1   11[BANK1 ] unsigned char 
  5348 ;;  mask            1   10[BANK1 ] unsigned char 
  5349 ;; Return value:  Size  Location     Type
  5350 ;;		None               void
  5351 ;; Registers used:
  5352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5353 ;; Tracked objects:
  5354 ;;		On entry : 0/0
  5355 ;;		On exit  : 0/0
  5356 ;;		Unchanged: 0/0
  5357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5358 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5359 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5361 ;;      Totals:         2       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;Total ram usage:        6 bytes
  5363 ;; Hardware stack levels used:    1
  5364 ;; Hardware stack levels required when called:    4
  5365 ;; This function calls:
  5366 ;;		___awdiv
  5367 ;; This function is called by:
  5368 ;;		_main
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           	psect	text16
  5373  0032C8                     __ptext16:
  5374                           	opt stack 0
  5375  0032C8                     _Set_RPM_RGB:
  5376                           	opt stack 26
  5377                           
  5378                           ;Fan_Support.c: 105: unsigned char mask = 0xF8;
  5379                           
  5380                           ;incstack = 0
  5381  0032C8  0EF8               	movlw	248
  5382  0032CA  0101               	movlb	1	; () banked
  5383  0032CC  6F5D               	movwf	Set_RPM_RGB@mask& (0+255),b
  5384                           
  5385                           ; BSR set to: 1
  5386                           ;Fan_Support.c: 106: unsigned char maskedValue;
  5387                           ;Fan_Support.c: 107: maskedValue = PORTD & mask;
  5388  0032CE  5083               	movf	3971,w,c	;volatile
  5389  0032D0  0101               	movlb	1	; () banked
  5390  0032D2  155D               	andwf	Set_RPM_RGB@mask& (0+255),w,b
  5391  0032D4  0101               	movlb	1	; () banked
  5392  0032D6  6F5E               	movwf	Set_RPM_RGB@maskedValue& (0+255),b
  5393                           
  5394                           ; BSR set to: 1
  5395                           ;Fan_Support.c: 108: int RPM= (rpm/500);
  5396  0032D8  C041  F153         	movff	Set_RPM_RGB@rpm,___awdiv@dividend
  5397  0032DC  C042  F154         	movff	Set_RPM_RGB@rpm+1,___awdiv@dividend+1
  5398  0032E0  0E01               	movlw	1
  5399  0032E2  0101               	movlb	1	; () banked
  5400  0032E4  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  5401  0032E6  0EF4               	movlw	244
  5402  0032E8  6F55               	movwf	___awdiv@divisor& (0+255),b
  5403  0032EA  ECCD  F012         	call	___awdiv	;wreg free
  5404  0032EE  C153  F15B         	movff	?___awdiv,Set_RPM_RGB@RPM
  5405  0032F2  C154  F15C         	movff	?___awdiv+1,Set_RPM_RGB@RPM+1
  5406                           
  5407                           ;Fan_Support.c: 109: if (rpm < 1){
  5408  0032F6  BE42               	btfsc	Set_RPM_RGB@rpm+1,7,c
  5409  0032F8  D005               	goto	l9535
  5410  0032FA  5042               	movf	Set_RPM_RGB@rpm+1,w,c
  5411  0032FC  E106               	bnz	l9537
  5412  0032FE  0441               	decf	Set_RPM_RGB@rpm,w,c
  5413  003300  B0D8               	btfsc	status,0,c
  5414  003302  D003               	goto	l9537
  5415  003304                     l9535:
  5416                           
  5417                           ;Fan_Support.c: 110: PORTD = maskedValue;
  5418  003304  C15E  FF83         	movff	Set_RPM_RGB@maskedValue,3971	;volatile
  5419                           
  5420                           ;Fan_Support.c: 111: }
  5421  003308  D00D               	goto	l82
  5422  00330A                     l9537:
  5423                           
  5424                           ;Fan_Support.c: 112: else{
  5425                           ;Fan_Support.c: 113: PORTD = maskedValue | D2[RPM];
  5426  00330A  0E4C               	movlw	low _D2
  5427  00330C  0101               	movlb	1	; () banked
  5428  00330E  255B               	addwf	Set_RPM_RGB@RPM& (0+255),w,b
  5429  003310  6ED9               	movwf	fsr2l,c
  5430  003312  0E01               	movlw	high _D2
  5431  003314  0101               	movlb	1	; () banked
  5432  003316  215C               	addwfc	(Set_RPM_RGB@RPM+1)& (0+255),w,b
  5433  003318  6EDA               	movwf	fsr2h,c
  5434  00331A  50DF               	movf	indf2,w,c
  5435  00331C  0101               	movlb	1	; () banked
  5436  00331E  115E               	iorwf	Set_RPM_RGB@maskedValue& (0+255),w,b
  5437  003320  6E83               	movwf	3971,c	;volatile
  5438  003322  D000               	goto	l82
  5439  003324                     l82:
  5440  003324  0012               	return		;funcret
  5441  003326                     __end_of_Set_RPM_RGB:
  5442                           	opt stack 0
  5443                           tblptru	equ	0xFF8
  5444                           tblptrh	equ	0xFF7
  5445                           tblptrl	equ	0xFF6
  5446                           tablat	equ	0xFF5
  5447                           prodh	equ	0xFF4
  5448                           prodl	equ	0xFF3
  5449                           postinc0	equ	0xFEE
  5450                           wreg	equ	0xFE8
  5451                           postdec1	equ	0xFE5
  5452                           plusw1	equ	0xFE3
  5453                           fsr1l	equ	0xFE1
  5454                           indf2	equ	0xFDF
  5455                           plusw2	equ	0xFDB
  5456                           fsr2h	equ	0xFDA
  5457                           fsr2l	equ	0xFD9
  5458                           status	equ	0xFD8
  5459                           
  5460 ;; *************** function _Set_DC_RGB *****************
  5461 ;; Defined at:
  5462 ;;		line 65 in file "Fan_Support.c"
  5463 ;; Parameters:    Size  Location     Type
  5464 ;;  duty_cycle      2   64[COMRAM] int 
  5465 ;; Auto vars:     Size  Location     Type
  5466 ;;  d1color_I       1    1[BANK0 ] unsigned char 
  5467 ;;  d1color_C       1    0[BANK0 ] unsigned char 
  5468 ;; Return value:  Size  Location     Type
  5469 ;;		None               void
  5470 ;; Registers used:
  5471 ;;		wreg, status,2, status,0, cstack
  5472 ;; Tracked objects:
  5473 ;;		On entry : 0/0
  5474 ;;		On exit  : 0/0
  5475 ;;		Unchanged: 0/0
  5476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5477 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;Total ram usage:        4 bytes
  5482 ;; Hardware stack levels used:    1
  5483 ;; Hardware stack levels required when called:    4
  5484 ;; This function calls:
  5485 ;;		___awdiv
  5486 ;; This function is called by:
  5487 ;;		_main
  5488 ;; This function uses a non-reentrant model
  5489 ;;
  5490                           
  5491                           	psect	text17
  5492  00357C                     __ptext17:
  5493                           	opt stack 0
  5494  00357C                     _Set_DC_RGB:
  5495                           	opt stack 26
  5496                           
  5497                           ;Fan_Support.c: 67: unsigned char d1color_I;
  5498                           ;Fan_Support.c: 68: unsigned char d1color_C = 0x73;
  5499                           
  5500                           ;incstack = 0
  5501  00357C  0E73               	movlw	115
  5502  00357E  0100               	movlb	0	; () banked
  5503  003580  6FFD               	movwf	Set_DC_RGB@d1color_C& (0+255),b
  5504                           
  5505                           ; BSR set to: 0
  5506                           ;Fan_Support.c: 69: d1color_I = PORTA & d1color_C;
  5507  003582  5080               	movf	3968,w,c	;volatile
  5508  003584  0100               	movlb	0	; () banked
  5509  003586  15FD               	andwf	Set_DC_RGB@d1color_C& (0+255),w,b
  5510  003588  0100               	movlb	0	; () banked
  5511  00358A  6FFE               	movwf	Set_DC_RGB@d1color_I& (0+255),b
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;Fan_Support.c: 70: d1color_I = duty_cycle / 10;
  5515  00358C  C041  F153         	movff	Set_DC_RGB@duty_cycle,___awdiv@dividend
  5516  003590  C042  F154         	movff	Set_DC_RGB@duty_cycle+1,___awdiv@dividend+1
  5517  003594  0E00               	movlw	0
  5518  003596  0101               	movlb	1	; () banked
  5519  003598  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  5520  00359A  0E0A               	movlw	10
  5521  00359C  6F55               	movwf	___awdiv@divisor& (0+255),b
  5522  00359E  ECCD  F012         	call	___awdiv	;wreg free
  5523  0035A2  0101               	movlb	1	; () banked
  5524  0035A4  5153               	movf	?___awdiv& (0+255),w,b
  5525  0035A6  0100               	movlb	0	; () banked
  5526  0035A8  6FFE               	movwf	Set_DC_RGB@d1color_I& (0+255),b
  5527                           
  5528                           ; BSR set to: 0
  5529                           ;Fan_Support.c: 71: if (d1color_I >7) d1color_I =7;
  5530  0035AA  0E07               	movlw	7
  5531  0035AC  0100               	movlb	0	; () banked
  5532  0035AE  65FE               	cpfsgt	Set_DC_RGB@d1color_I& (0+255),b
  5533  0035B0  D004               	goto	l9523
  5534                           
  5535                           ; BSR set to: 0
  5536  0035B2  0E07               	movlw	7
  5537  0035B4  0100               	movlb	0	; () banked
  5538  0035B6  6FFE               	movwf	Set_DC_RGB@d1color_I& (0+255),b
  5539  0035B8  D000               	goto	l9523
  5540  0035BA                     l9523:
  5541                           
  5542                           ; BSR set to: 0
  5543                           ;Fan_Support.c: 73: d1color_C = (char) d1color_I;
  5544  0035BA  C0FE  F0FD         	movff	Set_DC_RGB@d1color_I,Set_DC_RGB@d1color_C
  5545                           
  5546                           ; BSR set to: 0
  5547                           ;Fan_Support.c: 74: PORTA = (d1color_C << 2);
  5548  0035BE  0100               	movlb	0	; () banked
  5549  0035C0  45FD               	rlncf	Set_DC_RGB@d1color_C& (0+255),w,b
  5550  0035C2  46E8               	rlncf	wreg,f,c
  5551  0035C4  0BFC               	andlw	252
  5552  0035C6  6E80               	movwf	3968,c	;volatile
  5553                           
  5554                           ; BSR set to: 0
  5555  0035C8  0012               	return		;funcret
  5556  0035CA                     __end_of_Set_DC_RGB:
  5557                           	opt stack 0
  5558                           tblptru	equ	0xFF8
  5559                           tblptrh	equ	0xFF7
  5560                           tblptrl	equ	0xFF6
  5561                           tablat	equ	0xFF5
  5562                           prodh	equ	0xFF4
  5563                           prodl	equ	0xFF3
  5564                           postinc0	equ	0xFEE
  5565                           wreg	equ	0xFE8
  5566                           postdec1	equ	0xFE5
  5567                           plusw1	equ	0xFE3
  5568                           fsr1l	equ	0xFE1
  5569                           indf2	equ	0xFDF
  5570                           plusw2	equ	0xFDB
  5571                           fsr2h	equ	0xFDA
  5572                           fsr2l	equ	0xFD9
  5573                           status	equ	0xFD8
  5574                           
  5575 ;; *************** function _Monitor_Heater *****************
  5576 ;; Defined at:
  5577 ;;		line 27 in file "Fan_Support.c"
  5578 ;; Parameters:    Size  Location     Type
  5579 ;;		None
  5580 ;; Auto vars:     Size  Location     Type
  5581 ;;		None
  5582 ;; Return value:  Size  Location     Type
  5583 ;;		None               void
  5584 ;; Registers used:
  5585 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5586 ;; Tracked objects:
  5587 ;;		On entry : 0/0
  5588 ;;		On exit  : 0/0
  5589 ;;		Unchanged: 0/0
  5590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5593 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5594 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5595 ;;Total ram usage:        3 bytes
  5596 ;; Hardware stack levels used:    1
  5597 ;; Hardware stack levels required when called:    7
  5598 ;; This function calls:
  5599 ;;		_Turn_Off_Fan
  5600 ;;		_Turn_On_Fan
  5601 ;;		_do_update_pwm
  5602 ;;		_get_duty_cycle
  5603 ;; This function is called by:
  5604 ;;		_main
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608                           	psect	text18
  5609  0033DE                     __ptext18:
  5610                           	opt stack 0
  5611  0033DE                     _Monitor_Heater:
  5612                           	opt stack 23
  5613                           
  5614                           ;Fan_Support.c: 29: duty_cycle = get_duty_cycle(DS1621_tempF, heater_set_temp);
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;incstack = 0
  5618  0033DE  C048  F011         	movff	_DS1621_tempF,get_duty_cycle@temp
  5619  0033E2  C049  F012         	movff	_DS1621_tempF+1,get_duty_cycle@temp+1
  5620  0033E6  C06F  F013         	movff	_heater_set_temp,get_duty_cycle@set_temp
  5621  0033EA  6A14               	clrf	get_duty_cycle@set_temp+1,c
  5622  0033EC  EC65  F012         	call	_get_duty_cycle	;wreg free
  5623  0033F0  5011               	movf	?_get_duty_cycle,w,c
  5624  0033F2  6E5D               	movwf	_duty_cycle,c
  5625                           
  5626                           ;Fan_Support.c: 30: do_update_pwm(duty_cycle);
  5627  0033F4  505D               	movf	_duty_cycle,w,c
  5628  0033F6  ECB8  F014         	call	_do_update_pwm
  5629                           
  5630                           ;Fan_Support.c: 32: if (HEATER == 1) if(DS1621_tempF < heater_set_temp) Turn_On_Fan();
  5631  0033FA  0450               	decf	_HEATER,w,c
  5632  0033FC  A4D8               	btfss	status,2,c
  5633  0033FE  D018               	goto	l49
  5634  003400  506F               	movf	_heater_set_temp,w,c
  5635  003402  0100               	movlb	0	; () banked
  5636  003404  6FFD               	movwf	??_Monitor_Heater& (0+255),b
  5637  003406  6BFE               	clrf	(??_Monitor_Heater+1)& (0+255),b
  5638  003408  0100               	movlb	0	; () banked
  5639  00340A  51FD               	movf	??_Monitor_Heater& (0+255),w,b
  5640  00340C  5C48               	subwf	_DS1621_tempF,w,c
  5641  00340E  5049               	movf	_DS1621_tempF+1,w,c
  5642  003410  0A80               	xorlw	128
  5643  003412  0100               	movlb	0	; () banked
  5644  003414  6FFF               	movwf	(??_Monitor_Heater+2)& (0+255),b
  5645  003416  0100               	movlb	0	; () banked
  5646  003418  51FE               	movf	(??_Monitor_Heater+1)& (0+255),w,b
  5647  00341A  0A80               	xorlw	128
  5648  00341C  0100               	movlb	0	; () banked
  5649  00341E  59FF               	subwfb	(??_Monitor_Heater+2)& (0+255),w,b
  5650  003420  B0D8               	btfsc	status,0,c
  5651  003422  D003               	goto	l9497
  5652                           
  5653                           ; BSR set to: 0
  5654  003424  ECD0  F01E         	call	_Turn_On_Fan	;wreg free
  5655  003428  D003               	goto	l49
  5656  00342A                     l9497:
  5657                           
  5658                           ;Fan_Support.c: 33: else Turn_Off_Fan();
  5659  00342A  EC12  F01F         	call	_Turn_Off_Fan	;wreg free
  5660  00342E  D000               	goto	l49
  5661  003430                     l49:
  5662  003430  0012               	return		;funcret
  5663  003432                     __end_of_Monitor_Heater:
  5664                           	opt stack 0
  5665                           tblptru	equ	0xFF8
  5666                           tblptrh	equ	0xFF7
  5667                           tblptrl	equ	0xFF6
  5668                           tablat	equ	0xFF5
  5669                           prodh	equ	0xFF4
  5670                           prodl	equ	0xFF3
  5671                           postinc0	equ	0xFEE
  5672                           wreg	equ	0xFE8
  5673                           postdec1	equ	0xFE5
  5674                           plusw1	equ	0xFE3
  5675                           fsr1l	equ	0xFE1
  5676                           indf2	equ	0xFDF
  5677                           plusw2	equ	0xFDB
  5678                           fsr2h	equ	0xFDA
  5679                           fsr2l	equ	0xFD9
  5680                           status	equ	0xFD8
  5681                           
  5682 ;; *************** function _get_duty_cycle *****************
  5683 ;; Defined at:
  5684 ;;		line 15 in file "Fan_Support.c"
  5685 ;; Parameters:    Size  Location     Type
  5686 ;;  temp            2   16[COMRAM] int 
  5687 ;;  set_temp        2   18[COMRAM] int 
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;  diff            2   22[COMRAM] int 
  5690 ;; Return value:  Size  Location     Type
  5691 ;;                  2   16[COMRAM] int 
  5692 ;; Registers used:
  5693 ;;		wreg, status,2, status,0, prodl, prodh
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5699 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5700 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5701 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5702 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5703 ;;Total ram usage:        8 bytes
  5704 ;; Hardware stack levels used:    1
  5705 ;; Hardware stack levels required when called:    3
  5706 ;; This function calls:
  5707 ;;		Nothing
  5708 ;; This function is called by:
  5709 ;;		_Monitor_Heater
  5710 ;; This function uses a non-reentrant model
  5711 ;;
  5712                           
  5713                           	psect	text19
  5714  0024CA                     __ptext19:
  5715                           	opt stack 0
  5716  0024CA                     _get_duty_cycle:
  5717                           	opt stack 26
  5718                           
  5719                           ;Fan_Support.c: 16: if(temp >= set_temp) duty_cycle = 0;
  5720                           
  5721                           ;incstack = 0
  5722  0024CA  5013               	movf	get_duty_cycle@set_temp,w,c
  5723  0024CC  5C11               	subwf	get_duty_cycle@temp,w,c
  5724  0024CE  5012               	movf	get_duty_cycle@temp+1,w,c
  5725  0024D0  0A80               	xorlw	128
  5726  0024D2  6E15               	movwf	??_get_duty_cycle& (0+255),c
  5727  0024D4  5014               	movf	get_duty_cycle@set_temp+1,w,c
  5728  0024D6  0A80               	xorlw	128
  5729  0024D8  5815               	subwfb	??_get_duty_cycle& (0+255),w,c
  5730  0024DA  A0D8               	btfss	status,0,c
  5731  0024DC  D002               	goto	l6373
  5732  0024DE  0E00               	movlw	0
  5733  0024E0  D034               	goto	L6
  5734  0024E2                     l6373:
  5735                           
  5736                           ;Fan_Support.c: 17: else if (temp < set_temp){
  5737  0024E2  5013               	movf	get_duty_cycle@set_temp,w,c
  5738  0024E4  5C11               	subwf	get_duty_cycle@temp,w,c
  5739  0024E6  5012               	movf	get_duty_cycle@temp+1,w,c
  5740  0024E8  0A80               	xorlw	128
  5741  0024EA  6E15               	movwf	??_get_duty_cycle& (0+255),c
  5742  0024EC  5014               	movf	get_duty_cycle@set_temp+1,w,c
  5743  0024EE  0A80               	xorlw	128
  5744  0024F0  5815               	subwfb	??_get_duty_cycle& (0+255),w,c
  5745  0024F2  B0D8               	btfsc	status,0,c
  5746  0024F4  D04E               	goto	l34
  5747                           
  5748                           ;Fan_Support.c: 18: int diff = set_temp - temp;
  5749  0024F6  C011  F015         	movff	get_duty_cycle@temp,??_get_duty_cycle
  5750  0024FA  C012  F016         	movff	get_duty_cycle@temp+1,??_get_duty_cycle+1
  5751  0024FE  1E15               	comf	??_get_duty_cycle,f,c
  5752  002500  1E16               	comf	??_get_duty_cycle+1,f,c
  5753  002502  4A15               	infsnz	??_get_duty_cycle,f,c
  5754  002504  2A16               	incf	??_get_duty_cycle+1,f,c
  5755  002506  5013               	movf	get_duty_cycle@set_temp,w,c
  5756  002508  2415               	addwf	??_get_duty_cycle,w,c
  5757  00250A  6E17               	movwf	get_duty_cycle@diff,c
  5758  00250C  5014               	movf	get_duty_cycle@set_temp+1,w,c
  5759  00250E  2016               	addwfc	??_get_duty_cycle+1,w,c
  5760  002510  6E18               	movwf	get_duty_cycle@diff+1,c
  5761                           
  5762                           ;Fan_Support.c: 19: if(diff > 50) duty_cycle = 100;
  5763  002512  BE18               	btfsc	get_duty_cycle@diff+1,7,c
  5764  002514  D008               	goto	l6379
  5765  002516  5018               	movf	get_duty_cycle@diff+1,w,c
  5766  002518  E104               	bnz	u4050
  5767  00251A  0E33               	movlw	51
  5768  00251C  5C17               	subwf	get_duty_cycle@diff,w,c
  5769  00251E  A0D8               	btfss	status,0,c
  5770  002520  D002               	goto	l6379
  5771  002522                     u4050:
  5772  002522  0E64               	movlw	100
  5773  002524  D012               	goto	L6
  5774  002526                     l6379:
  5775                           
  5776                           ;Fan_Support.c: 20: else if((diff >= 25) && (diff < 50)) duty_cycle = diff * 2;
  5777  002526  BE18               	btfsc	get_duty_cycle@diff+1,7,c
  5778  002528  D012               	goto	l6385
  5779  00252A  5018               	movf	get_duty_cycle@diff+1,w,c
  5780  00252C  E104               	bnz	u4060
  5781  00252E  0E19               	movlw	25
  5782  002530  5C17               	subwf	get_duty_cycle@diff,w,c
  5783  002532  A0D8               	btfss	status,0,c
  5784  002534  D00C               	goto	l6385
  5785  002536                     u4060:
  5786  002536  BE18               	btfsc	get_duty_cycle@diff+1,7,c
  5787  002538  D006               	goto	l6383
  5788  00253A  5018               	movf	get_duty_cycle@diff+1,w,c
  5789  00253C  E108               	bnz	l6385
  5790  00253E  0E32               	movlw	50
  5791  002540  5C17               	subwf	get_duty_cycle@diff,w,c
  5792  002542  B0D8               	btfsc	status,0,c
  5793  002544  D004               	goto	l6385
  5794  002546                     l6383:
  5795  002546  5017               	movf	get_duty_cycle@diff,w,c
  5796  002548  2417               	addwf	get_duty_cycle@diff,w,c
  5797  00254A                     L6:
  5798  00254A  6E5D               	movwf	_duty_cycle,c
  5799  00254C  D022               	goto	l34
  5800  00254E                     l6385:
  5801                           
  5802                           ;Fan_Support.c: 21: else if ((diff >= 10) && (diff < 25)) duty_cycle = diff * (3/2);
  5803  00254E  BE18               	btfsc	get_duty_cycle@diff+1,7,c
  5804  002550  D013               	goto	l6391
  5805  002552  5018               	movf	get_duty_cycle@diff+1,w,c
  5806  002554  E104               	bnz	u4080
  5807  002556  0E0A               	movlw	10
  5808  002558  5C17               	subwf	get_duty_cycle@diff,w,c
  5809  00255A  A0D8               	btfss	status,0,c
  5810  00255C  D00D               	goto	l6391
  5811  00255E                     u4080:
  5812  00255E  BE18               	btfsc	get_duty_cycle@diff+1,7,c
  5813  002560  D006               	goto	l6389
  5814  002562  5018               	movf	get_duty_cycle@diff+1,w,c
  5815  002564  E109               	bnz	l6391
  5816  002566  0E19               	movlw	25
  5817  002568  5C17               	subwf	get_duty_cycle@diff,w,c
  5818  00256A  B0D8               	btfsc	status,0,c
  5819  00256C  D005               	goto	l6391
  5820  00256E                     l6389:
  5821  00256E  5017               	movf	get_duty_cycle@diff,w,c
  5822  002570  0D01               	mullw	1
  5823  002572  CFF3 F05D          	movff	prodl,_duty_cycle
  5824  002576  D00D               	goto	l34
  5825  002578                     l6391:
  5826                           
  5827                           ;Fan_Support.c: 22: else if ((diff >= 0) && (diff < 10)) duty_cycle = diff;
  5828  002578  BE18               	btfsc	get_duty_cycle@diff+1,7,c
  5829  00257A  D00B               	goto	l34
  5830  00257C  BE18               	btfsc	get_duty_cycle@diff+1,7,c
  5831  00257E  D006               	goto	l6395
  5832  002580  5018               	movf	get_duty_cycle@diff+1,w,c
  5833  002582  E107               	bnz	l34
  5834  002584  0E0A               	movlw	10
  5835  002586  5C17               	subwf	get_duty_cycle@diff,w,c
  5836  002588  B0D8               	btfsc	status,0,c
  5837  00258A  D003               	goto	l34
  5838  00258C                     l6395:
  5839  00258C  C017  F05D         	movff	get_duty_cycle@diff,_duty_cycle
  5840  002590  D000               	goto	l34
  5841  002592                     l34:
  5842                           
  5843                           ;Fan_Support.c: 23: }
  5844                           ;Fan_Support.c: 24: return duty_cycle;
  5845  002592  C05D  F011         	movff	_duty_cycle,?_get_duty_cycle
  5846  002596  6A12               	clrf	?_get_duty_cycle+1,c
  5847  002598  0012               	return		;funcret
  5848  00259A                     __end_of_get_duty_cycle:
  5849                           	opt stack 0
  5850                           tblptru	equ	0xFF8
  5851                           tblptrh	equ	0xFF7
  5852                           tblptrl	equ	0xFF6
  5853                           tablat	equ	0xFF5
  5854                           prodh	equ	0xFF4
  5855                           prodl	equ	0xFF3
  5856                           postinc0	equ	0xFEE
  5857                           wreg	equ	0xFE8
  5858                           postdec1	equ	0xFE5
  5859                           plusw1	equ	0xFE3
  5860                           fsr1l	equ	0xFE1
  5861                           indf2	equ	0xFDF
  5862                           plusw2	equ	0xFDB
  5863                           fsr2h	equ	0xFDA
  5864                           fsr2l	equ	0xFD9
  5865                           status	equ	0xFD8
  5866                           
  5867 ;; *************** function _Turn_On_Fan *****************
  5868 ;; Defined at:
  5869 ;;		line 57 in file "Fan_Support.c"
  5870 ;; Parameters:    Size  Location     Type
  5871 ;;		None
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;		None
  5874 ;; Return value:  Size  Location     Type
  5875 ;;		None               void
  5876 ;; Registers used:
  5877 ;;		wreg, status,2, status,0, cstack
  5878 ;; Tracked objects:
  5879 ;;		On entry : 0/0
  5880 ;;		On exit  : 0/0
  5881 ;;		Unchanged: 0/0
  5882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5887 ;;Total ram usage:        0 bytes
  5888 ;; Hardware stack levels used:    1
  5889 ;; Hardware stack levels required when called:    6
  5890 ;; This function calls:
  5891 ;;		_do_update_pwm
  5892 ;; This function is called by:
  5893 ;;		_Monitor_Heater
  5894 ;;		_Toggle_Heater
  5895 ;; This function uses a non-reentrant model
  5896 ;;
  5897                           
  5898                           	psect	text20
  5899  003DA0                     __ptext20:
  5900                           	opt stack 0
  5901  003DA0                     _Turn_On_Fan:
  5902                           	opt stack 23
  5903                           
  5904                           ;Fan_Support.c: 59: HEATER = 1;
  5905                           
  5906                           ;incstack = 0
  5907  003DA0  0E01               	movlw	1
  5908  003DA2  6E50               	movwf	_HEATER,c
  5909                           
  5910                           ;Fan_Support.c: 60: PORTDbits.RD7 = 1;
  5911  003DA4  8E83               	bsf	3971,7,c	;volatile
  5912                           
  5913                           ;Fan_Support.c: 61: do_update_pwm(duty_cycle);
  5914  003DA6  505D               	movf	_duty_cycle,w,c
  5915  003DA8  ECB8  F014         	call	_do_update_pwm
  5916                           
  5917                           ;Fan_Support.c: 62: PORTEbits.RE0=1;
  5918  003DAC  8084               	bsf	3972,0,c	;volatile
  5919  003DAE  0012               	return		;funcret
  5920  003DB0                     __end_of_Turn_On_Fan:
  5921                           	opt stack 0
  5922                           tblptru	equ	0xFF8
  5923                           tblptrh	equ	0xFF7
  5924                           tblptrl	equ	0xFF6
  5925                           tablat	equ	0xFF5
  5926                           prodh	equ	0xFF4
  5927                           prodl	equ	0xFF3
  5928                           postinc0	equ	0xFEE
  5929                           wreg	equ	0xFE8
  5930                           postdec1	equ	0xFE5
  5931                           plusw1	equ	0xFE3
  5932                           fsr1l	equ	0xFE1
  5933                           indf2	equ	0xFDF
  5934                           plusw2	equ	0xFDB
  5935                           fsr2h	equ	0xFDA
  5936                           fsr2l	equ	0xFD9
  5937                           status	equ	0xFD8
  5938                           
  5939 ;; *************** function _Do_Setup_Time *****************
  5940 ;; Defined at:
  5941 ;;		line 33 in file "Setup_Time.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;		None
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;		None
  5946 ;; Return value:  Size  Location     Type
  5947 ;;                  2  412[None  ] int 
  5948 ;; Registers used:
  5949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5959 ;;Total ram usage:        0 bytes
  5960 ;; Hardware stack levels used:    1
  5961 ;; Hardware stack levels required when called:   12
  5962 ;; This function calls:
  5963 ;;		_DS3231_Read_Time
  5964 ;;		_Decrease_Time
  5965 ;;		_Do_Beep_Bad
  5966 ;;		_Do_Beep_Good
  5967 ;;		_Do_Save_New_Time
  5968 ;;		_Exit_Time_Setup
  5969 ;;		_Go_Next_Field
  5970 ;;		_Go_Prev_Field
  5971 ;;		_Increase_Time
  5972 ;;		_Initialize_Setup_Time_Screen
  5973 ;;		_Update_Setup_Time_Screen
  5974 ;;		_bcd_2_dec
  5975 ;;		_check_for_button_input
  5976 ;; This function is called by:
  5977 ;;		_main
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           	psect	text21
  5982  00266A                     __ptext21:
  5983                           	opt stack 0
  5984  00266A                     _Do_Setup_Time:
  5985                           	opt stack 18
  5986                           
  5987                           ;Setup_Time.c: 36: Select_Field = 0;
  5988                           
  5989                           ;incstack = 0
  5990  00266A  0E00               	movlw	0
  5991  00266C  6E54               	movwf	_Select_Field,c
  5992                           
  5993                           ;Setup_Time.c: 38: DS3231_Read_Time();
  5994  00266E  EC00  F019         	call	_DS3231_Read_Time	;wreg free
  5995                           
  5996                           ;Setup_Time.c: 39: setup_second = bcd_2_dec(second);
  5997  002672  5063               	movf	_second,w,c
  5998  002674  ECF5  F01C         	call	_bcd_2_dec
  5999  002678  6E6C               	movwf	_setup_second,c
  6000                           
  6001                           ;Setup_Time.c: 40: setup_minute = bcd_2_dec(minute);
  6002  00267A  5060               	movf	_minute,w,c
  6003  00267C  ECF5  F01C         	call	_bcd_2_dec
  6004  002680  6E6A               	movwf	_setup_minute,c
  6005                           
  6006                           ;Setup_Time.c: 41: setup_hour = bcd_2_dec(hour);
  6007  002682  505F               	movf	_hour,w,c
  6008  002684  ECF5  F01C         	call	_bcd_2_dec
  6009  002688  6E69               	movwf	_setup_hour,c
  6010                           
  6011                           ;Setup_Time.c: 42: setup_day = bcd_2_dec(day);
  6012  00268A  505B               	movf	_day,w,c
  6013  00268C  ECF5  F01C         	call	_bcd_2_dec
  6014  002690  6E67               	movwf	_setup_day,c
  6015                           
  6016                           ;Setup_Time.c: 43: setup_month = bcd_2_dec(month);
  6017  002692  5061               	movf	_month,w,c
  6018  002694  ECF5  F01C         	call	_bcd_2_dec
  6019  002698  6E6B               	movwf	_setup_month,c
  6020                           
  6021                           ;Setup_Time.c: 44: setup_year = bcd_2_dec(year);
  6022  00269A  506E               	movf	_year,w,c
  6023  00269C  ECF5  F01C         	call	_bcd_2_dec
  6024  0026A0  6E6D               	movwf	_setup_year,c
  6025                           
  6026                           ;Setup_Time.c: 46: Initialize_Setup_Time_Screen();
  6027  0026A2  EC20  F00E         	call	_Initialize_Setup_Time_Screen	;wreg free
  6028                           
  6029                           ;Setup_Time.c: 47: Update_Setup_Time_Screen();
  6030  0026A6  EC48  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  6031                           
  6032                           ;Setup_Time.c: 48: In_Time_Setup = 1;
  6033  0026AA  0E01               	movlw	1
  6034  0026AC  0100               	movlb	0	; () banked
  6035  0026AE  6FFA               	movwf	_In_Time_Setup& (0+255),b
  6036                           
  6037                           ;Setup_Time.c: 50: while (In_Time_Setup == 1)
  6038  0026B0  D03C               	goto	l9853
  6039  0026B2                     l9817:
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;Setup_Time.c: 51: {
  6043                           ;Setup_Time.c: 52: if (check_for_button_input() == 1)
  6044  0026B2  ECA4  F017         	call	_check_for_button_input	;wreg free
  6045  0026B6  06E8               	decf	wreg,f,c
  6046  0026B8  A4D8               	btfss	status,2,c
  6047  0026BA  D037               	goto	l9853
  6048                           
  6049                           ;Setup_Time.c: 53: {
  6050                           ;Setup_Time.c: 55: if (found >= 3 && found <= 8)
  6051  0026BC  0E02               	movlw	2
  6052  0026BE  645E               	cpfsgt	_found,c
  6053  0026C0  D031               	goto	l9851
  6054  0026C2  0E09               	movlw	9
  6055  0026C4  605E               	cpfslt	_found,c
  6056  0026C6  D02E               	goto	l9851
  6057                           
  6058                           ;Setup_Time.c: 56: {
  6059                           ;Setup_Time.c: 57: Do_Beep_Good();
  6060  0026C8  EC60  F01E         	call	_Do_Beep_Good	;wreg free
  6061                           
  6062                           ;Setup_Time.c: 58: if (found == 3) Go_Prev_Field();
  6063  0026CC  0E03               	movlw	3
  6064  0026CE  185E               	xorwf	_found,w,c
  6065  0026D0  A4D8               	btfss	status,2,c
  6066  0026D2  D003               	goto	l9829
  6067  0026D4  ECE7  F01D         	call	_Go_Prev_Field	;wreg free
  6068  0026D8  D000               	goto	l9829
  6069  0026DA                     l9829:
  6070                           
  6071                           ;Setup_Time.c: 59: if (found == 4) Go_Next_Field();
  6072  0026DA  0E04               	movlw	4
  6073  0026DC  185E               	xorwf	_found,w,c
  6074  0026DE  A4D8               	btfss	status,2,c
  6075  0026E0  D003               	goto	l9833
  6076  0026E2  ECF3  F01D         	call	_Go_Next_Field	;wreg free
  6077  0026E6  D000               	goto	l9833
  6078  0026E8                     l9833:
  6079                           
  6080                           ;Setup_Time.c: 60: if (found == 5) Do_Save_New_Time();
  6081  0026E8  0E05               	movlw	5
  6082  0026EA  185E               	xorwf	_found,w,c
  6083  0026EC  A4D8               	btfss	status,2,c
  6084  0026EE  D003               	goto	l9837
  6085  0026F0  EC2E  F01E         	call	_Do_Save_New_Time	;wreg free
  6086  0026F4  D000               	goto	l9837
  6087  0026F6                     l9837:
  6088                           
  6089                           ;Setup_Time.c: 61: if (found == 6) Decrease_Time();
  6090  0026F6  0E06               	movlw	6
  6091  0026F8  185E               	xorwf	_found,w,c
  6092  0026FA  A4D8               	btfss	status,2,c
  6093  0026FC  D003               	goto	l9841
  6094  0026FE  EC8F  F016         	call	_Decrease_Time	;wreg free
  6095  002702  D000               	goto	l9841
  6096  002704                     l9841:
  6097                           
  6098                           ;Setup_Time.c: 62: if (found == 7 ) Increase_Time();
  6099  002704  0E07               	movlw	7
  6100  002706  185E               	xorwf	_found,w,c
  6101  002708  A4D8               	btfss	status,2,c
  6102  00270A  D003               	goto	l9845
  6103  00270C  EC47  F016         	call	_Increase_Time	;wreg free
  6104  002710  D000               	goto	l9845
  6105  002712                     l9845:
  6106                           
  6107                           ;Setup_Time.c: 63: if (found == 8) Exit_Time_Setup();
  6108  002712  0E08               	movlw	8
  6109  002714  185E               	xorwf	_found,w,c
  6110  002716  A4D8               	btfss	status,2,c
  6111  002718  D003               	goto	l9849
  6112  00271A  ECD8  F01E         	call	_Exit_Time_Setup	;wreg free
  6113  00271E  D000               	goto	l9849
  6114  002720                     l9849:
  6115                           
  6116                           ;Setup_Time.c: 64: found = 0xff;
  6117  002720  685E               	setf	_found,c
  6118                           
  6119                           ;Setup_Time.c: 65: }
  6120  002722  D003               	goto	l9853
  6121  002724                     l9851:
  6122                           
  6123                           ;Setup_Time.c: 66: else
  6124                           ;Setup_Time.c: 67: {
  6125                           ;Setup_Time.c: 68: Do_Beep_Bad();
  6126  002724  EC6A  F01E         	call	_Do_Beep_Bad	;wreg free
  6127  002728  D000               	goto	l9853
  6128  00272A                     l9853:
  6129  00272A  0100               	movlb	0	; () banked
  6130  00272C  05FA               	decf	_In_Time_Setup& (0+255),w,b
  6131  00272E  B4D8               	btfsc	status,2,c
  6132  002730  D7C0               	goto	l9817
  6133                           
  6134                           ; BSR set to: 0
  6135                           
  6136                           ; BSR set to: 0
  6137  002732  0012               	return		;funcret
  6138  002734                     __end_of_Do_Setup_Time:
  6139                           	opt stack 0
  6140                           tblptru	equ	0xFF8
  6141                           tblptrh	equ	0xFF7
  6142                           tblptrl	equ	0xFF6
  6143                           tablat	equ	0xFF5
  6144                           prodh	equ	0xFF4
  6145                           prodl	equ	0xFF3
  6146                           postinc0	equ	0xFEE
  6147                           wreg	equ	0xFE8
  6148                           postdec1	equ	0xFE5
  6149                           plusw1	equ	0xFE3
  6150                           fsr1l	equ	0xFE1
  6151                           indf2	equ	0xFDF
  6152                           plusw2	equ	0xFDB
  6153                           fsr2h	equ	0xFDA
  6154                           fsr2l	equ	0xFD9
  6155                           status	equ	0xFD8
  6156                           
  6157 ;; *************** function _Initialize_Setup_Time_Screen *****************
  6158 ;; Defined at:
  6159 ;;		line 187 in file "Setup_Time.c"
  6160 ;; Parameters:    Size  Location     Type
  6161 ;;		None
  6162 ;; Auto vars:     Size  Location     Type
  6163 ;;		None
  6164 ;; Return value:  Size  Location     Type
  6165 ;;		None               void
  6166 ;; Registers used:
  6167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6168 ;; Tracked objects:
  6169 ;;		On entry : 0/0
  6170 ;;		On exit  : 0/0
  6171 ;;		Unchanged: 0/0
  6172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6177 ;;Total ram usage:        0 bytes
  6178 ;; Hardware stack levels used:    1
  6179 ;; Hardware stack levels required when called:   10
  6180 ;; This function calls:
  6181 ;;		_drawtext
  6182 ;;		_fillRect
  6183 ;;		_fillScreen
  6184 ;;		_strcpy
  6185 ;; This function is called by:
  6186 ;;		_Do_Setup_Time
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text22
  6191  001C40                     __ptext22:
  6192                           	opt stack 0
  6193  001C40                     _Initialize_Setup_Time_Screen:
  6194                           	opt stack 19
  6195                           
  6196                           ;Setup_Time.c: 189: fillScreen(0x0000);
  6197                           
  6198                           ; BSR set to: 0
  6199                           ;incstack = 0
  6200  001C40  0E00               	movlw	0
  6201  001C42  6E25               	movwf	fillScreen@color+1,c
  6202  001C44  0E00               	movlw	0
  6203  001C46  6E24               	movwf	fillScreen@color,c
  6204  001C48  ECBE  F01D         	call	_fillScreen	;wreg free
  6205                           
  6206                           ;Setup_Time.c: 191: strcpy(txt, "ECE3301L F'22 S1\0");
  6207  001C4C  C04E  F011         	movff	_txt,strcpy@to
  6208  001C50  C04F  F012         	movff	_txt+1,strcpy@to+1
  6209  001C54  0E2B               	movlw	low STR_5
  6210  001C56  6E13               	movwf	strcpy@from,c
  6211  001C58  0EFF               	movlw	high STR_5
  6212  001C5A  6E14               	movwf	strcpy@from+1,c
  6213  001C5C  ECC4  F01C         	call	_strcpy	;wreg free
  6214                           
  6215                           ;Setup_Time.c: 192: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  6216  001C60  0E01               	movlw	1
  6217  001C62  6E39               	movwf	drawtext@y,c
  6218  001C64  C04E  F03A         	movff	_txt,drawtext@_text
  6219  001C68  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  6220  001C6C  0EFF               	movlw	255
  6221  001C6E  6E3D               	movwf	drawtext@color+1,c
  6222  001C70  683C               	setf	drawtext@color,c
  6223  001C72  0E00               	movlw	0
  6224  001C74  6E3F               	movwf	drawtext@bg+1,c
  6225  001C76  0E00               	movlw	0
  6226  001C78  6E3E               	movwf	drawtext@bg,c
  6227  001C7A  0E01               	movlw	1
  6228  001C7C  6E40               	movwf	drawtext@size,c
  6229  001C7E  0E01               	movlw	1
  6230  001C80  EC99  F00D         	call	_drawtext
  6231                           
  6232                           ;Setup_Time.c: 195: strcpy(txt, "Time Setup\0");
  6233  001C84  C04E  F011         	movff	_txt,strcpy@to
  6234  001C88  C04F  F012         	movff	_txt+1,strcpy@to+1
  6235  001C8C  0E89               	movlw	low STR_33
  6236  001C8E  6E13               	movwf	strcpy@from,c
  6237  001C90  0EFF               	movlw	high STR_33
  6238  001C92  6E14               	movwf	strcpy@from+1,c
  6239  001C94  ECC4  F01C         	call	_strcpy	;wreg free
  6240                           
  6241                           ;Setup_Time.c: 196: drawtext(1+3 , 1+15, txt, 0xF81F, 0x0000, 2);
  6242  001C98  0E10               	movlw	16
  6243  001C9A  6E39               	movwf	drawtext@y,c
  6244  001C9C  C04E  F03A         	movff	_txt,drawtext@_text
  6245  001CA0  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  6246  001CA4  0EF8               	movlw	248
  6247  001CA6  6E3D               	movwf	drawtext@color+1,c
  6248  001CA8  0E1F               	movlw	31
  6249  001CAA  6E3C               	movwf	drawtext@color,c
  6250  001CAC  0E00               	movlw	0
  6251  001CAE  6E3F               	movwf	drawtext@bg+1,c
  6252  001CB0  0E00               	movlw	0
  6253  001CB2  6E3E               	movwf	drawtext@bg,c
  6254  001CB4  0E02               	movlw	2
  6255  001CB6  6E40               	movwf	drawtext@size,c
  6256  001CB8  0E04               	movlw	4
  6257  001CBA  EC99  F00D         	call	_drawtext
  6258                           
  6259                           ;Setup_Time.c: 198: strcpy(txt, "Time");
  6260  001CBE  C04E  F011         	movff	_txt,strcpy@to
  6261  001CC2  C04F  F012         	movff	_txt+1,strcpy@to+1
  6262  001CC6  0EB1               	movlw	low (STR_11+6)
  6263  001CC8  6E13               	movwf	strcpy@from,c
  6264  001CCA  0EFF               	movlw	high (STR_11+6)
  6265  001CCC  6E14               	movwf	strcpy@from+1,c
  6266  001CCE  ECC4  F01C         	call	_strcpy	;wreg free
  6267                           
  6268                           ;Setup_Time.c: 199: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  6269  001CD2  0E28               	movlw	40
  6270  001CD4  6E39               	movwf	drawtext@y,c
  6271  001CD6  C04E  F03A         	movff	_txt,drawtext@_text
  6272  001CDA  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  6273  001CDE  0E00               	movlw	0
  6274  001CE0  6E3D               	movwf	drawtext@color+1,c
  6275  001CE2  0E1F               	movlw	31
  6276  001CE4  6E3C               	movwf	drawtext@color,c
  6277  001CE6  0E00               	movlw	0
  6278  001CE8  6E3F               	movwf	drawtext@bg+1,c
  6279  001CEA  0E00               	movlw	0
  6280  001CEC  6E3E               	movwf	drawtext@bg,c
  6281  001CEE  0E01               	movlw	1
  6282  001CF0  6E40               	movwf	drawtext@size,c
  6283  001CF2  0E32               	movlw	50
  6284  001CF4  EC99  F00D         	call	_drawtext
  6285                           
  6286                           ;Setup_Time.c: 201: fillRect(15-1, 52+16, 25,2,0x07FF);
  6287  001CF8  0E44               	movlw	68
  6288  001CFA  6E23               	movwf	fillRect@y,c
  6289  001CFC  0E19               	movlw	25
  6290  001CFE  6E24               	movwf	fillRect@w,c
  6291  001D00  0E02               	movlw	2
  6292  001D02  6E25               	movwf	fillRect@h,c
  6293  001D04  0E07               	movlw	7
  6294  001D06  6E27               	movwf	fillRect@color+1,c
  6295  001D08  6826               	setf	fillRect@color,c
  6296  001D0A  0E0E               	movlw	14
  6297  001D0C  ECA6  F01B         	call	_fillRect
  6298                           
  6299                           ;Setup_Time.c: 202: strcpy(txt, "Date");
  6300  001D10  C04E  F011         	movff	_txt,strcpy@to
  6301  001D14  C04F  F012         	movff	_txt+1,strcpy@to+1
  6302  001D18  0EE0               	movlw	low STR_10
  6303  001D1A  6E13               	movwf	strcpy@from,c
  6304  001D1C  0EFF               	movlw	high STR_10
  6305  001D1E  6E14               	movwf	strcpy@from+1,c
  6306  001D20  ECC4  F01C         	call	_strcpy	;wreg free
  6307                           
  6308                           ;Setup_Time.c: 203: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  6309  001D24  0E47               	movlw	71
  6310  001D26  6E39               	movwf	drawtext@y,c
  6311  001D28  C04E  F03A         	movff	_txt,drawtext@_text
  6312  001D2C  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  6313  001D30  0EF8               	movlw	248
  6314  001D32  6E3D               	movwf	drawtext@color+1,c
  6315  001D34  0E00               	movlw	0
  6316  001D36  6E3C               	movwf	drawtext@color,c
  6317  001D38  0E00               	movlw	0
  6318  001D3A  6E3F               	movwf	drawtext@bg+1,c
  6319  001D3C  0E00               	movlw	0
  6320  001D3E  6E3E               	movwf	drawtext@bg,c
  6321  001D40  0E01               	movlw	1
  6322  001D42  6E40               	movwf	drawtext@size,c
  6323  001D44  0E32               	movlw	50
  6324  001D46  EC99  F00D         	call	_drawtext
  6325  001D4A  0012               	return		;funcret
  6326  001D4C                     __end_of_Initialize_Setup_Time_Screen:
  6327                           	opt stack 0
  6328                           tblptru	equ	0xFF8
  6329                           tblptrh	equ	0xFF7
  6330                           tblptrl	equ	0xFF6
  6331                           tablat	equ	0xFF5
  6332                           prodh	equ	0xFF4
  6333                           prodl	equ	0xFF3
  6334                           postinc0	equ	0xFEE
  6335                           wreg	equ	0xFE8
  6336                           postdec1	equ	0xFE5
  6337                           plusw1	equ	0xFE3
  6338                           fsr1l	equ	0xFE1
  6339                           indf2	equ	0xFDF
  6340                           plusw2	equ	0xFDB
  6341                           fsr2h	equ	0xFDA
  6342                           fsr2l	equ	0xFD9
  6343                           status	equ	0xFD8
  6344                           
  6345 ;; *************** function _Increase_Time *****************
  6346 ;; Defined at:
  6347 ;;		line 74 in file "Setup_Time.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;		None
  6350 ;; Auto vars:     Size  Location     Type
  6351 ;;		None
  6352 ;; Return value:  Size  Location     Type
  6353 ;;		None               void
  6354 ;; Registers used:
  6355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6356 ;; Tracked objects:
  6357 ;;		On entry : 0/0
  6358 ;;		On exit  : 0/0
  6359 ;;		Unchanged: 0/0
  6360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6365 ;;Total ram usage:        0 bytes
  6366 ;; Hardware stack levels used:    1
  6367 ;; Hardware stack levels required when called:   11
  6368 ;; This function calls:
  6369 ;;		_Update_Setup_Time_Screen
  6370 ;; This function is called by:
  6371 ;;		_Do_Setup_Time
  6372 ;; This function uses a non-reentrant model
  6373 ;;
  6374                           
  6375                           	psect	text23
  6376  002C8E                     __ptext23:
  6377                           	opt stack 0
  6378  002C8E                     _Increase_Time:
  6379                           	opt stack 18
  6380                           
  6381                           ;Setup_Time.c: 76: switch (Select_Field)
  6382                           
  6383                           ;incstack = 0
  6384  002C8E  D030               	goto	l9473
  6385  002C90                     l9435:
  6386                           
  6387                           ;Setup_Time.c: 79: setup_hour++;
  6388  002C90  2A69               	incf	_setup_hour,f,c
  6389                           
  6390                           ;Setup_Time.c: 80: if (setup_hour == 24) setup_hour = 0;
  6391  002C92  0E18               	movlw	24
  6392  002C94  1869               	xorwf	_setup_hour,w,c
  6393  002C96  A4D8               	btfss	status,2,c
  6394  002C98  D03F               	goto	l9475
  6395  002C9A  0E00               	movlw	0
  6396  002C9C  6E69               	movwf	_setup_hour,c
  6397                           
  6398                           ;Setup_Time.c: 81: break;
  6399  002C9E  D03C               	goto	l9475
  6400  002CA0                     l9441:
  6401                           
  6402                           ;Setup_Time.c: 84: setup_minute++;
  6403  002CA0  2A6A               	incf	_setup_minute,f,c
  6404                           
  6405                           ;Setup_Time.c: 85: if (setup_minute == 60) setup_minute = 0;
  6406  002CA2  0E3C               	movlw	60
  6407  002CA4  186A               	xorwf	_setup_minute,w,c
  6408  002CA6  A4D8               	btfss	status,2,c
  6409  002CA8  D037               	goto	l9475
  6410  002CAA  0E00               	movlw	0
  6411  002CAC  6E6A               	movwf	_setup_minute,c
  6412                           
  6413                           ;Setup_Time.c: 86: break;
  6414  002CAE  D034               	goto	l9475
  6415  002CB0                     l9447:
  6416                           
  6417                           ;Setup_Time.c: 89: setup_second++;
  6418  002CB0  2A6C               	incf	_setup_second,f,c
  6419                           
  6420                           ;Setup_Time.c: 90: if (setup_second == 60) setup_second = 0;
  6421  002CB2  0E3C               	movlw	60
  6422  002CB4  186C               	xorwf	_setup_second,w,c
  6423  002CB6  A4D8               	btfss	status,2,c
  6424  002CB8  D02F               	goto	l9475
  6425  002CBA  0E00               	movlw	0
  6426  002CBC  6E6C               	movwf	_setup_second,c
  6427                           
  6428                           ;Setup_Time.c: 91: break;
  6429  002CBE  D02C               	goto	l9475
  6430  002CC0                     l9453:
  6431                           
  6432                           ;Setup_Time.c: 93: setup_month++;
  6433  002CC0  2A6B               	incf	_setup_month,f,c
  6434                           
  6435                           ;Setup_Time.c: 94: if (setup_month == 13) setup_month = 1;
  6436  002CC2  0E0D               	movlw	13
  6437  002CC4  186B               	xorwf	_setup_month,w,c
  6438  002CC6  A4D8               	btfss	status,2,c
  6439  002CC8  D027               	goto	l9475
  6440  002CCA  0E01               	movlw	1
  6441  002CCC  6E6B               	movwf	_setup_month,c
  6442                           
  6443                           ;Setup_Time.c: 95: break;
  6444  002CCE  D024               	goto	l9475
  6445  002CD0                     l9459:
  6446                           
  6447                           ;Setup_Time.c: 97: setup_day++;
  6448  002CD0  2A67               	incf	_setup_day,f,c
  6449                           
  6450                           ;Setup_Time.c: 98: if (setup_day ==32) setup_day=1;
  6451  002CD2  0E20               	movlw	32
  6452  002CD4  1867               	xorwf	_setup_day,w,c
  6453  002CD6  A4D8               	btfss	status,2,c
  6454  002CD8  D01F               	goto	l9475
  6455  002CDA  0E01               	movlw	1
  6456  002CDC  6E67               	movwf	_setup_day,c
  6457                           
  6458                           ;Setup_Time.c: 101: break;
  6459  002CDE  D01C               	goto	l9475
  6460  002CE0                     l9465:
  6461                           
  6462                           ;Setup_Time.c: 103: setup_year++;
  6463  002CE0  2A6D               	incf	_setup_year,f,c
  6464                           
  6465                           ;Setup_Time.c: 104: if (setup_year == 100) setup_year = 0;
  6466  002CE2  0E64               	movlw	100
  6467  002CE4  186D               	xorwf	_setup_year,w,c
  6468  002CE6  A4D8               	btfss	status,2,c
  6469  002CE8  D017               	goto	l9475
  6470  002CEA  0E00               	movlw	0
  6471  002CEC  6E6D               	movwf	_setup_year,c
  6472                           
  6473                           ;Setup_Time.c: 108: }
  6474                           
  6475                           ;Setup_Time.c: 107: break;
  6476                           
  6477                           ;Setup_Time.c: 106: default:
  6478                           
  6479                           ;Setup_Time.c: 105: break;
  6480  002CEE  D014               	goto	l9475
  6481  002CF0                     l9473:
  6482  002CF0  5054               	movf	_Select_Field,w,c
  6483                           
  6484                           ; Switch size 1, requested type "space"
  6485                           ; Number of cases is 6, Range of values is 0 to 5
  6486                           ; switch strategies available:
  6487                           ; Name         Instructions Cycles
  6488                           ; simple_byte           19    10 (average)
  6489                           ;	Chosen strategy is simple_byte
  6490  002CF2  0A00               	xorlw	0	; case 0
  6491  002CF4  B4D8               	btfsc	status,2,c
  6492  002CF6  D7CC               	goto	l9435
  6493  002CF8  0A01               	xorlw	1	; case 1
  6494  002CFA  B4D8               	btfsc	status,2,c
  6495  002CFC  D7D1               	goto	l9441
  6496  002CFE  0A03               	xorlw	3	; case 2
  6497  002D00  B4D8               	btfsc	status,2,c
  6498  002D02  D7D6               	goto	l9447
  6499  002D04  0A01               	xorlw	1	; case 3
  6500  002D06  B4D8               	btfsc	status,2,c
  6501  002D08  D7DB               	goto	l9453
  6502  002D0A  0A07               	xorlw	7	; case 4
  6503  002D0C  B4D8               	btfsc	status,2,c
  6504  002D0E  D7E0               	goto	l9459
  6505  002D10  0A01               	xorlw	1	; case 5
  6506  002D12  B4D8               	btfsc	status,2,c
  6507  002D14  D7E5               	goto	l9465
  6508  002D16  D000               	goto	l9475
  6509  002D18                     l9475:
  6510                           
  6511                           ;Setup_Time.c: 109: Update_Setup_Time_Screen();
  6512  002D18  EC48  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  6513  002D1C  0012               	return		;funcret
  6514  002D1E                     __end_of_Increase_Time:
  6515                           	opt stack 0
  6516                           tblptru	equ	0xFF8
  6517                           tblptrh	equ	0xFF7
  6518                           tblptrl	equ	0xFF6
  6519                           tablat	equ	0xFF5
  6520                           prodh	equ	0xFF4
  6521                           prodl	equ	0xFF3
  6522                           postinc0	equ	0xFEE
  6523                           wreg	equ	0xFE8
  6524                           postdec1	equ	0xFE5
  6525                           plusw1	equ	0xFE3
  6526                           fsr1l	equ	0xFE1
  6527                           indf2	equ	0xFDF
  6528                           plusw2	equ	0xFDB
  6529                           fsr2h	equ	0xFDA
  6530                           fsr2l	equ	0xFD9
  6531                           status	equ	0xFD8
  6532                           
  6533 ;; *************** function _Go_Prev_Field *****************
  6534 ;; Defined at:
  6535 ;;		line 166 in file "Setup_Time.c"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;		None
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;		None
  6540 ;; Return value:  Size  Location     Type
  6541 ;;		None               void
  6542 ;; Registers used:
  6543 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6553 ;;Total ram usage:        0 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:    9
  6556 ;; This function calls:
  6557 ;;		_Update_Setup_Screen_Cursor_Backward
  6558 ;; This function is called by:
  6559 ;;		_Do_Setup_Time
  6560 ;; This function uses a non-reentrant model
  6561 ;;
  6562                           
  6563                           	psect	text24
  6564  003BCE                     __ptext24:
  6565                           	opt stack 0
  6566  003BCE                     _Go_Prev_Field:
  6567                           	opt stack 20
  6568                           
  6569                           ;Setup_Time.c: 168: if (Select_Field == 0) Select_Field = 5;
  6570                           
  6571                           ;incstack = 0
  6572  003BCE  5054               	movf	_Select_Field,w,c
  6573  003BD0  A4D8               	btfss	status,2,c
  6574  003BD2  D003               	goto	l9371
  6575  003BD4  0E05               	movlw	5
  6576  003BD6  6E54               	movwf	_Select_Field,c
  6577  003BD8  D002               	goto	l9373
  6578  003BDA                     l9371:
  6579                           
  6580                           ;Setup_Time.c: 169: else Select_Field--;
  6581  003BDA  0654               	decf	_Select_Field,f,c
  6582  003BDC  D000               	goto	l9373
  6583  003BDE                     l9373:
  6584                           
  6585                           ;Setup_Time.c: 170: Update_Setup_Screen_Cursor_Backward(Select_Field);
  6586  003BDE  5054               	movf	_Select_Field,w,c
  6587  003BE0  EC97  F008         	call	_Update_Setup_Screen_Cursor_Backward
  6588  003BE4  0012               	return		;funcret
  6589  003BE6                     __end_of_Go_Prev_Field:
  6590                           	opt stack 0
  6591                           tblptru	equ	0xFF8
  6592                           tblptrh	equ	0xFF7
  6593                           tblptrl	equ	0xFF6
  6594                           tablat	equ	0xFF5
  6595                           prodh	equ	0xFF4
  6596                           prodl	equ	0xFF3
  6597                           postinc0	equ	0xFEE
  6598                           wreg	equ	0xFE8
  6599                           postdec1	equ	0xFE5
  6600                           plusw1	equ	0xFE3
  6601                           fsr1l	equ	0xFE1
  6602                           indf2	equ	0xFDF
  6603                           plusw2	equ	0xFDB
  6604                           fsr2h	equ	0xFDA
  6605                           fsr2l	equ	0xFD9
  6606                           status	equ	0xFD8
  6607                           
  6608 ;; *************** function _Go_Next_Field *****************
  6609 ;; Defined at:
  6610 ;;		line 157 in file "Setup_Time.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;		None
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;		None
  6615 ;; Return value:  Size  Location     Type
  6616 ;;		None               void
  6617 ;; Registers used:
  6618 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6628 ;;Total ram usage:        0 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:    9
  6631 ;; This function calls:
  6632 ;;		_Update_Setup_Screen_Cursor_Forward
  6633 ;; This function is called by:
  6634 ;;		_Do_Setup_Time
  6635 ;; This function uses a non-reentrant model
  6636 ;;
  6637                           
  6638                           	psect	text25
  6639  003BE6                     __ptext25:
  6640                           	opt stack 0
  6641  003BE6                     _Go_Next_Field:
  6642                           	opt stack 20
  6643                           
  6644                           ;Setup_Time.c: 160: Select_Field++;
  6645                           
  6646                           ;incstack = 0
  6647  003BE6  2A54               	incf	_Select_Field,f,c
  6648                           
  6649                           ;Setup_Time.c: 161: if (Select_Field == 6) Select_Field = 0;
  6650  003BE8  0E06               	movlw	6
  6651  003BEA  1854               	xorwf	_Select_Field,w,c
  6652  003BEC  A4D8               	btfss	status,2,c
  6653  003BEE  D003               	goto	l9381
  6654  003BF0  0E00               	movlw	0
  6655  003BF2  6E54               	movwf	_Select_Field,c
  6656  003BF4  D000               	goto	l9381
  6657  003BF6                     l9381:
  6658                           
  6659                           ;Setup_Time.c: 162: Update_Setup_Screen_Cursor_Forward(Select_Field);
  6660  003BF6  5054               	movf	_Select_Field,w,c
  6661  003BF8  ECBA  F007         	call	_Update_Setup_Screen_Cursor_Forward
  6662  003BFC  0012               	return		;funcret
  6663  003BFE                     __end_of_Go_Next_Field:
  6664                           	opt stack 0
  6665                           tblptru	equ	0xFF8
  6666                           tblptrh	equ	0xFF7
  6667                           tblptrl	equ	0xFF6
  6668                           tablat	equ	0xFF5
  6669                           prodh	equ	0xFF4
  6670                           prodl	equ	0xFF3
  6671                           postinc0	equ	0xFEE
  6672                           wreg	equ	0xFE8
  6673                           postdec1	equ	0xFE5
  6674                           plusw1	equ	0xFE3
  6675                           fsr1l	equ	0xFE1
  6676                           indf2	equ	0xFDF
  6677                           plusw2	equ	0xFDB
  6678                           fsr2h	equ	0xFDA
  6679                           fsr2l	equ	0xFD9
  6680                           status	equ	0xFD8
  6681                           
  6682 ;; *************** function _Exit_Time_Setup *****************
  6683 ;; Defined at:
  6684 ;;		line 181 in file "Setup_Time.c"
  6685 ;; Parameters:    Size  Location     Type
  6686 ;;		None
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;		None
  6689 ;; Return value:  Size  Location     Type
  6690 ;;		None               void
  6691 ;; Registers used:
  6692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6693 ;; Tracked objects:
  6694 ;;		On entry : 0/0
  6695 ;;		On exit  : 0/0
  6696 ;;		Unchanged: 0/0
  6697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6702 ;;Total ram usage:        0 bytes
  6703 ;; Hardware stack levels used:    1
  6704 ;; Hardware stack levels required when called:   11
  6705 ;; This function calls:
  6706 ;;		_DS3231_Read_Time
  6707 ;;		_Initialize_Screen
  6708 ;; This function is called by:
  6709 ;;		_Do_Setup_Time
  6710 ;; This function uses a non-reentrant model
  6711 ;;
  6712                           
  6713                           	psect	text26
  6714  003DB0                     __ptext26:
  6715                           	opt stack 0
  6716  003DB0                     _Exit_Time_Setup:
  6717                           	opt stack 18
  6718                           
  6719                           ;Setup_Time.c: 183: DS3231_Read_Time();
  6720                           
  6721                           ;incstack = 0
  6722  003DB0  EC00  F019         	call	_DS3231_Read_Time	;wreg free
  6723                           
  6724                           ;Setup_Time.c: 184: Initialize_Screen();
  6725  003DB4  EC43  F003         	call	_Initialize_Screen	;wreg free
  6726                           
  6727                           ;Setup_Time.c: 185: In_Time_Setup = 0;
  6728  003DB8  0E00               	movlw	0
  6729  003DBA  0100               	movlb	0	; () banked
  6730  003DBC  6FFA               	movwf	_In_Time_Setup& (0+255),b
  6731                           
  6732                           ; BSR set to: 0
  6733  003DBE  0012               	return		;funcret
  6734  003DC0                     __end_of_Exit_Time_Setup:
  6735                           	opt stack 0
  6736                           tblptru	equ	0xFF8
  6737                           tblptrh	equ	0xFF7
  6738                           tblptrl	equ	0xFF6
  6739                           tablat	equ	0xFF5
  6740                           prodh	equ	0xFF4
  6741                           prodl	equ	0xFF3
  6742                           postinc0	equ	0xFEE
  6743                           wreg	equ	0xFE8
  6744                           postdec1	equ	0xFE5
  6745                           plusw1	equ	0xFE3
  6746                           fsr1l	equ	0xFE1
  6747                           indf2	equ	0xFDF
  6748                           plusw2	equ	0xFDB
  6749                           fsr2h	equ	0xFDA
  6750                           fsr2l	equ	0xFD9
  6751                           status	equ	0xFD8
  6752                           
  6753 ;; *************** function _Do_Save_New_Time *****************
  6754 ;; Defined at:
  6755 ;;		line 173 in file "Setup_Time.c"
  6756 ;; Parameters:    Size  Location     Type
  6757 ;;		None
  6758 ;; Auto vars:     Size  Location     Type
  6759 ;;		None
  6760 ;; Return value:  Size  Location     Type
  6761 ;;		None               void
  6762 ;; Registers used:
  6763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6764 ;; Tracked objects:
  6765 ;;		On entry : 0/0
  6766 ;;		On exit  : 0/0
  6767 ;;		Unchanged: 0/0
  6768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6773 ;;Total ram usage:        0 bytes
  6774 ;; Hardware stack levels used:    1
  6775 ;; Hardware stack levels required when called:   11
  6776 ;; This function calls:
  6777 ;;		_DS3231_Read_Time
  6778 ;;		_DS3231_Write_Time
  6779 ;;		_Initialize_Screen
  6780 ;; This function is called by:
  6781 ;;		_Do_Setup_Time
  6782 ;; This function uses a non-reentrant model
  6783 ;;
  6784                           
  6785                           	psect	text27
  6786  003C5C                     __ptext27:
  6787                           	opt stack 0
  6788  003C5C                     _Do_Save_New_Time:
  6789                           	opt stack 18
  6790                           
  6791                           ;Setup_Time.c: 175: DS3231_Write_Time();
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;incstack = 0
  6795  003C5C  ECFE  F015         	call	_DS3231_Write_Time	;wreg free
  6796                           
  6797                           ;Setup_Time.c: 176: DS3231_Read_Time();
  6798  003C60  EC00  F019         	call	_DS3231_Read_Time	;wreg free
  6799                           
  6800                           ;Setup_Time.c: 177: Initialize_Screen();
  6801  003C64  EC43  F003         	call	_Initialize_Screen	;wreg free
  6802                           
  6803                           ;Setup_Time.c: 178: In_Time_Setup = 0;
  6804  003C68  0E00               	movlw	0
  6805  003C6A  0100               	movlb	0	; () banked
  6806  003C6C  6FFA               	movwf	_In_Time_Setup& (0+255),b
  6807                           
  6808                           ; BSR set to: 0
  6809  003C6E  0012               	return		;funcret
  6810  003C70                     __end_of_Do_Save_New_Time:
  6811                           	opt stack 0
  6812                           tblptru	equ	0xFF8
  6813                           tblptrh	equ	0xFF7
  6814                           tblptrl	equ	0xFF6
  6815                           tablat	equ	0xFF5
  6816                           prodh	equ	0xFF4
  6817                           prodl	equ	0xFF3
  6818                           postinc0	equ	0xFEE
  6819                           wreg	equ	0xFE8
  6820                           postdec1	equ	0xFE5
  6821                           plusw1	equ	0xFE3
  6822                           fsr1l	equ	0xFE1
  6823                           indf2	equ	0xFDF
  6824                           plusw2	equ	0xFDB
  6825                           fsr2h	equ	0xFDA
  6826                           fsr2l	equ	0xFD9
  6827                           status	equ	0xFD8
  6828                           
  6829 ;; *************** function _DS3231_Write_Time *****************
  6830 ;; Defined at:
  6831 ;;		line 90 in file "I2C_Support.c"
  6832 ;; Parameters:    Size  Location     Type
  6833 ;;		None
  6834 ;; Auto vars:     Size  Location     Type
  6835 ;;  Address         1   12[BANK1 ] unsigned char 
  6836 ;;  Device          1   11[BANK1 ] unsigned char 
  6837 ;; Return value:  Size  Location     Type
  6838 ;;		None               void
  6839 ;; Registers used:
  6840 ;;		wreg, status,2, status,0, cstack
  6841 ;; Tracked objects:
  6842 ;;		On entry : 0/0
  6843 ;;		On exit  : 0/0
  6844 ;;		Unchanged: 0/0
  6845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6847 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6849 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6850 ;;Total ram usage:        2 bytes
  6851 ;; Hardware stack levels used:    1
  6852 ;; Hardware stack levels required when called:    5
  6853 ;; This function calls:
  6854 ;;		_I2C_Start
  6855 ;;		_I2C_Stop
  6856 ;;		_I2C_Write
  6857 ;;		_dec_2_bcd
  6858 ;; This function is called by:
  6859 ;;		_Do_Save_New_Time
  6860 ;; This function uses a non-reentrant model
  6861 ;;
  6862                           
  6863                           	psect	text28
  6864  002BFC                     __ptext28:
  6865                           	opt stack 0
  6866  002BFC                     _DS3231_Write_Time:
  6867                           	opt stack 23
  6868                           
  6869                           ;I2C_Support.c: 92: char Device = 0x68;
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;incstack = 0
  6873  002BFC  0E68               	movlw	104
  6874  002BFE  0101               	movlb	1	; () banked
  6875  002C00  6F5E               	movwf	DS3231_Write_Time@Device& (0+255),b
  6876                           
  6877                           ;I2C_Support.c: 93: char Address = 0x00;
  6878  002C02  0E00               	movlw	0
  6879  002C04  0101               	movlb	1	; () banked
  6880  002C06  6F5F               	movwf	DS3231_Write_Time@Address& (0+255),b
  6881                           
  6882                           ; BSR set to: 1
  6883                           ;I2C_Support.c: 94: second = dec_2_bcd(setup_second);
  6884  002C08  506C               	movf	_setup_second,w,c
  6885  002C0A  ECCC  F018         	call	_dec_2_bcd
  6886  002C0E  5041               	movf	?_dec_2_bcd,w,c
  6887  002C10  6E63               	movwf	_second,c
  6888                           
  6889                           ;I2C_Support.c: 95: minute = dec_2_bcd(setup_minute);
  6890  002C12  506A               	movf	_setup_minute,w,c
  6891  002C14  ECCC  F018         	call	_dec_2_bcd
  6892  002C18  5041               	movf	?_dec_2_bcd,w,c
  6893  002C1A  6E60               	movwf	_minute,c
  6894                           
  6895                           ;I2C_Support.c: 96: hour = dec_2_bcd(setup_hour);
  6896  002C1C  5069               	movf	_setup_hour,w,c
  6897  002C1E  ECCC  F018         	call	_dec_2_bcd
  6898  002C22  5041               	movf	?_dec_2_bcd,w,c
  6899  002C24  6E5F               	movwf	_hour,c
  6900                           
  6901                           ;I2C_Support.c: 97: dow = 0x01;
  6902  002C26  0E01               	movlw	1
  6903  002C28  6E5C               	movwf	_dow,c
  6904                           
  6905                           ;I2C_Support.c: 98: day = dec_2_bcd(setup_day);
  6906  002C2A  5067               	movf	_setup_day,w,c
  6907  002C2C  ECCC  F018         	call	_dec_2_bcd
  6908  002C30  5041               	movf	?_dec_2_bcd,w,c
  6909  002C32  6E5B               	movwf	_day,c
  6910                           
  6911                           ;I2C_Support.c: 99: month = dec_2_bcd(setup_month);
  6912  002C34  506B               	movf	_setup_month,w,c
  6913  002C36  ECCC  F018         	call	_dec_2_bcd
  6914  002C3A  5041               	movf	?_dec_2_bcd,w,c
  6915  002C3C  6E61               	movwf	_month,c
  6916                           
  6917                           ;I2C_Support.c: 100: year = dec_2_bcd(setup_year);
  6918  002C3E  506D               	movf	_setup_year,w,c
  6919  002C40  ECCC  F018         	call	_dec_2_bcd
  6920  002C44  5041               	movf	?_dec_2_bcd,w,c
  6921  002C46  6E6E               	movwf	_year,c
  6922                           
  6923                           ;I2C_Support.c: 101: I2C_Start();
  6924  002C48  ECBE  F01E         	call	_I2C_Start	;wreg free
  6925                           
  6926                           ;I2C_Support.c: 102: I2C_Write((Device << 1) | 0);
  6927  002C4C  0101               	movlb	1	; () banked
  6928  002C4E  515E               	movf	DS3231_Write_Time@Device& (0+255),w,b
  6929  002C50  255E               	addwf	DS3231_Write_Time@Device& (0+255),w,b
  6930  002C52  EC6E  F01C         	call	_I2C_Write
  6931                           
  6932                           ;I2C_Support.c: 103: I2C_Write(Address);
  6933  002C56  0101               	movlb	1	; () banked
  6934  002C58  515F               	movf	DS3231_Write_Time@Address& (0+255),w,b
  6935  002C5A  EC6E  F01C         	call	_I2C_Write
  6936                           
  6937                           ;I2C_Support.c: 104: I2C_Write(second);
  6938  002C5E  5063               	movf	_second,w,c
  6939  002C60  EC6E  F01C         	call	_I2C_Write
  6940                           
  6941                           ;I2C_Support.c: 105: I2C_Write(minute);
  6942  002C64  5060               	movf	_minute,w,c
  6943  002C66  EC6E  F01C         	call	_I2C_Write
  6944                           
  6945                           ;I2C_Support.c: 106: I2C_Write(hour);
  6946  002C6A  505F               	movf	_hour,w,c
  6947  002C6C  EC6E  F01C         	call	_I2C_Write
  6948                           
  6949                           ;I2C_Support.c: 107: I2C_Write(dow);
  6950  002C70  505C               	movf	_dow,w,c
  6951  002C72  EC6E  F01C         	call	_I2C_Write
  6952                           
  6953                           ;I2C_Support.c: 108: I2C_Write(day);
  6954  002C76  505B               	movf	_day,w,c
  6955  002C78  EC6E  F01C         	call	_I2C_Write
  6956                           
  6957                           ;I2C_Support.c: 109: I2C_Write(month);
  6958  002C7C  5061               	movf	_month,w,c
  6959  002C7E  EC6E  F01C         	call	_I2C_Write
  6960                           
  6961                           ;I2C_Support.c: 110: I2C_Write(year);
  6962  002C82  506E               	movf	_year,w,c
  6963  002C84  EC6E  F01C         	call	_I2C_Write
  6964                           
  6965                           ;I2C_Support.c: 111: I2C_Stop();
  6966  002C88  ECB5  F01E         	call	_I2C_Stop	;wreg free
  6967  002C8C  0012               	return		;funcret
  6968  002C8E                     __end_of_DS3231_Write_Time:
  6969                           	opt stack 0
  6970                           tblptru	equ	0xFF8
  6971                           tblptrh	equ	0xFF7
  6972                           tblptrl	equ	0xFF6
  6973                           tablat	equ	0xFF5
  6974                           prodh	equ	0xFF4
  6975                           prodl	equ	0xFF3
  6976                           postinc0	equ	0xFEE
  6977                           wreg	equ	0xFE8
  6978                           postdec1	equ	0xFE5
  6979                           plusw1	equ	0xFE3
  6980                           fsr1l	equ	0xFE1
  6981                           indf2	equ	0xFDF
  6982                           plusw2	equ	0xFDB
  6983                           fsr2h	equ	0xFDA
  6984                           fsr2l	equ	0xFD9
  6985                           status	equ	0xFD8
  6986                           
  6987 ;; *************** function _Decrease_Time *****************
  6988 ;; Defined at:
  6989 ;;		line 112 in file "Setup_Time.c"
  6990 ;; Parameters:    Size  Location     Type
  6991 ;;		None
  6992 ;; Auto vars:     Size  Location     Type
  6993 ;;		None
  6994 ;; Return value:  Size  Location     Type
  6995 ;;		None               void
  6996 ;; Registers used:
  6997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6998 ;; Tracked objects:
  6999 ;;		On entry : 0/0
  7000 ;;		On exit  : 0/0
  7001 ;;		Unchanged: 0/0
  7002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7007 ;;Total ram usage:        0 bytes
  7008 ;; Hardware stack levels used:    1
  7009 ;; Hardware stack levels required when called:   11
  7010 ;; This function calls:
  7011 ;;		_Update_Setup_Time_Screen
  7012 ;; This function is called by:
  7013 ;;		_Do_Setup_Time
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           	psect	text29
  7018  002D1E                     __ptext29:
  7019                           	opt stack 0
  7020  002D1E                     _Decrease_Time:
  7021                           	opt stack 18
  7022                           
  7023                           ;Setup_Time.c: 114: switch (Select_Field)
  7024                           
  7025                           ;incstack = 0
  7026  002D1E  D030               	goto	l9429
  7027  002D20                     l9391:
  7028                           
  7029                           ;Setup_Time.c: 117: if (setup_hour == 0) setup_hour = 23;
  7030  002D20  5069               	movf	_setup_hour,w,c
  7031  002D22  A4D8               	btfss	status,2,c
  7032  002D24  D003               	goto	l9395
  7033  002D26  0E17               	movlw	23
  7034  002D28  6E69               	movwf	_setup_hour,c
  7035  002D2A  D03E               	goto	l9431
  7036  002D2C                     l9395:
  7037                           
  7038                           ;Setup_Time.c: 118: else --setup_hour;
  7039  002D2C  0669               	decf	_setup_hour,f,c
  7040                           
  7041                           ;Setup_Time.c: 119: break;
  7042  002D2E  D03C               	goto	l9431
  7043  002D30                     l9397:
  7044                           
  7045                           ;Setup_Time.c: 122: if (setup_minute == 0) setup_minute = 59;
  7046  002D30  506A               	movf	_setup_minute,w,c
  7047  002D32  A4D8               	btfss	status,2,c
  7048  002D34  D003               	goto	l9401
  7049  002D36  0E3B               	movlw	59
  7050  002D38  6E6A               	movwf	_setup_minute,c
  7051  002D3A  D036               	goto	l9431
  7052  002D3C                     l9401:
  7053                           
  7054                           ;Setup_Time.c: 123: else --setup_minute;
  7055  002D3C  066A               	decf	_setup_minute,f,c
  7056                           
  7057                           ;Setup_Time.c: 124: break;
  7058  002D3E  D034               	goto	l9431
  7059  002D40                     l9403:
  7060                           
  7061                           ;Setup_Time.c: 128: if (setup_second == 0) setup_second = 59;
  7062  002D40  506C               	movf	_setup_second,w,c
  7063  002D42  A4D8               	btfss	status,2,c
  7064  002D44  D003               	goto	l9407
  7065  002D46  0E3B               	movlw	59
  7066  002D48  6E6C               	movwf	_setup_second,c
  7067  002D4A  D02E               	goto	l9431
  7068  002D4C                     l9407:
  7069                           
  7070                           ;Setup_Time.c: 129: else --setup_second;
  7071  002D4C  066C               	decf	_setup_second,f,c
  7072                           
  7073                           ;Setup_Time.c: 130: break;
  7074  002D4E  D02C               	goto	l9431
  7075  002D50                     l9409:
  7076                           
  7077                           ;Setup_Time.c: 133: if (setup_month == 1) setup_month = 12;
  7078  002D50  046B               	decf	_setup_month,w,c
  7079  002D52  A4D8               	btfss	status,2,c
  7080  002D54  D003               	goto	l9413
  7081  002D56  0E0C               	movlw	12
  7082  002D58  6E6B               	movwf	_setup_month,c
  7083  002D5A  D026               	goto	l9431
  7084  002D5C                     l9413:
  7085                           
  7086                           ;Setup_Time.c: 134: else --setup_month;
  7087  002D5C  066B               	decf	_setup_month,f,c
  7088                           
  7089                           ;Setup_Time.c: 135: break;
  7090  002D5E  D024               	goto	l9431
  7091  002D60                     l9415:
  7092                           
  7093                           ;Setup_Time.c: 138: if(setup_day == 1) setup_day=31;
  7094  002D60  0467               	decf	_setup_day,w,c
  7095  002D62  A4D8               	btfss	status,2,c
  7096  002D64  D003               	goto	l9419
  7097  002D66  0E1F               	movlw	31
  7098  002D68  6E67               	movwf	_setup_day,c
  7099  002D6A  D01E               	goto	l9431
  7100  002D6C                     l9419:
  7101                           
  7102                           ;Setup_Time.c: 145: else --setup_day;
  7103  002D6C  0667               	decf	_setup_day,f,c
  7104                           
  7105                           ;Setup_Time.c: 146: break;
  7106  002D6E  D01C               	goto	l9431
  7107  002D70                     l9421:
  7108                           
  7109                           ;Setup_Time.c: 148: if (setup_year == 0) setup_year = 99;
  7110  002D70  506D               	movf	_setup_year,w,c
  7111  002D72  A4D8               	btfss	status,2,c
  7112  002D74  D003               	goto	l9425
  7113  002D76  0E63               	movlw	99
  7114  002D78  6E6D               	movwf	_setup_year,c
  7115  002D7A  D016               	goto	l9431
  7116  002D7C                     l9425:
  7117                           
  7118                           ;Setup_Time.c: 149: else --setup_year;
  7119  002D7C  066D               	decf	_setup_year,f,c
  7120                           
  7121                           ;Setup_Time.c: 153: }
  7122                           
  7123                           ;Setup_Time.c: 152: break;
  7124                           
  7125                           ;Setup_Time.c: 151: default:
  7126                           
  7127                           ;Setup_Time.c: 150: break;
  7128  002D7E  D014               	goto	l9431
  7129  002D80                     l9429:
  7130  002D80  5054               	movf	_Select_Field,w,c
  7131                           
  7132                           ; Switch size 1, requested type "space"
  7133                           ; Number of cases is 6, Range of values is 0 to 5
  7134                           ; switch strategies available:
  7135                           ; Name         Instructions Cycles
  7136                           ; simple_byte           19    10 (average)
  7137                           ;	Chosen strategy is simple_byte
  7138  002D82  0A00               	xorlw	0	; case 0
  7139  002D84  B4D8               	btfsc	status,2,c
  7140  002D86  D7CC               	goto	l9391
  7141  002D88  0A01               	xorlw	1	; case 1
  7142  002D8A  B4D8               	btfsc	status,2,c
  7143  002D8C  D7D1               	goto	l9397
  7144  002D8E  0A03               	xorlw	3	; case 2
  7145  002D90  B4D8               	btfsc	status,2,c
  7146  002D92  D7D6               	goto	l9403
  7147  002D94  0A01               	xorlw	1	; case 3
  7148  002D96  B4D8               	btfsc	status,2,c
  7149  002D98  D7DB               	goto	l9409
  7150  002D9A  0A07               	xorlw	7	; case 4
  7151  002D9C  B4D8               	btfsc	status,2,c
  7152  002D9E  D7E0               	goto	l9415
  7153  002DA0  0A01               	xorlw	1	; case 5
  7154  002DA2  B4D8               	btfsc	status,2,c
  7155  002DA4  D7E5               	goto	l9421
  7156  002DA6  D000               	goto	l9431
  7157  002DA8                     l9431:
  7158                           
  7159                           ;Setup_Time.c: 154: Update_Setup_Time_Screen();
  7160  002DA8  EC48  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  7161  002DAC  0012               	return		;funcret
  7162  002DAE                     __end_of_Decrease_Time:
  7163                           	opt stack 0
  7164                           tblptru	equ	0xFF8
  7165                           tblptrh	equ	0xFF7
  7166                           tblptrl	equ	0xFF6
  7167                           tablat	equ	0xFF5
  7168                           prodh	equ	0xFF4
  7169                           prodl	equ	0xFF3
  7170                           postinc0	equ	0xFEE
  7171                           wreg	equ	0xFE8
  7172                           postdec1	equ	0xFE5
  7173                           plusw1	equ	0xFE3
  7174                           fsr1l	equ	0xFE1
  7175                           indf2	equ	0xFDF
  7176                           plusw2	equ	0xFDB
  7177                           fsr2h	equ	0xFDA
  7178                           fsr2l	equ	0xFD9
  7179                           status	equ	0xFD8
  7180                           
  7181 ;; *************** function _Update_Setup_Time_Screen *****************
  7182 ;; Defined at:
  7183 ;;		line 206 in file "Setup_Time.c"
  7184 ;; Parameters:    Size  Location     Type
  7185 ;;		None
  7186 ;; Auto vars:     Size  Location     Type
  7187 ;;		None
  7188 ;; Return value:  Size  Location     Type
  7189 ;;		None               void
  7190 ;; Registers used:
  7191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7192 ;; Tracked objects:
  7193 ;;		On entry : 0/0
  7194 ;;		On exit  : 0/0
  7195 ;;		Unchanged: 0/0
  7196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7200 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7201 ;;Total ram usage:        0 bytes
  7202 ;; Hardware stack levels used:    1
  7203 ;; Hardware stack levels required when called:   10
  7204 ;; This function calls:
  7205 ;;		___awdiv
  7206 ;;		___awmod
  7207 ;;		_drawtext
  7208 ;; This function is called by:
  7209 ;;		_Do_Setup_Time
  7210 ;;		_Increase_Time
  7211 ;;		_Decrease_Time
  7212 ;; This function uses a non-reentrant model
  7213 ;;
  7214                           
  7215                           	psect	text30
  7216  001490                     __ptext30:
  7217                           	opt stack 0
  7218  001490                     _Update_Setup_Time_Screen:
  7219                           	opt stack 19
  7220                           
  7221                           ;Setup_Time.c: 208: setup_time[0] = (setup_hour/10) + '0';
  7222                           
  7223                           ;incstack = 0
  7224  001490  C069  F153         	movff	_setup_hour,___awdiv@dividend
  7225  001494  0101               	movlb	1	; () banked
  7226  001496  6B54               	clrf	(___awdiv@dividend+1)& (0+255),b
  7227  001498  0E00               	movlw	0
  7228  00149A  0101               	movlb	1	; () banked
  7229  00149C  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  7230  00149E  0E0A               	movlw	10
  7231  0014A0  6F55               	movwf	___awdiv@divisor& (0+255),b
  7232  0014A2  ECCD  F012         	call	___awdiv	;wreg free
  7233  0014A6  0101               	movlb	1	; () banked
  7234  0014A8  5153               	movf	?___awdiv& (0+255),w,b
  7235  0014AA  0F30               	addlw	48
  7236  0014AC  0100               	movlb	0	; () banked
  7237  0014AE  6FA6               	movwf	_setup_time& (0+255),b
  7238                           
  7239                           ;Setup_Time.c: 209: setup_time[1] = (setup_hour % 10) + '0';
  7240  0014B0  C069  F03B         	movff	_setup_hour,___awmod@dividend
  7241  0014B4  6A3C               	clrf	___awmod@dividend+1,c
  7242  0014B6  0E00               	movlw	0
  7243  0014B8  6E3E               	movwf	___awmod@divisor+1,c
  7244  0014BA  0E0A               	movlw	10
  7245  0014BC  6E3D               	movwf	___awmod@divisor,c
  7246  0014BE  EC63  F017         	call	___awmod	;wreg free
  7247  0014C2  503B               	movf	?___awmod,w,c
  7248  0014C4  0F30               	addlw	48
  7249  0014C6  0100               	movlb	0	; () banked
  7250  0014C8  6FA7               	movwf	(_setup_time+1)& (0+255),b
  7251                           
  7252                           ;Setup_Time.c: 211: setup_time[3] = (setup_minute/10) + '0';
  7253  0014CA  C06A  F153         	movff	_setup_minute,___awdiv@dividend
  7254  0014CE  0101               	movlb	1	; () banked
  7255  0014D0  6B54               	clrf	(___awdiv@dividend+1)& (0+255),b
  7256  0014D2  0E00               	movlw	0
  7257  0014D4  0101               	movlb	1	; () banked
  7258  0014D6  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  7259  0014D8  0E0A               	movlw	10
  7260  0014DA  6F55               	movwf	___awdiv@divisor& (0+255),b
  7261  0014DC  ECCD  F012         	call	___awdiv	;wreg free
  7262  0014E0  0101               	movlb	1	; () banked
  7263  0014E2  5153               	movf	?___awdiv& (0+255),w,b
  7264  0014E4  0F30               	addlw	48
  7265  0014E6  0100               	movlb	0	; () banked
  7266  0014E8  6FA9               	movwf	(_setup_time+3)& (0+255),b
  7267                           
  7268                           ;Setup_Time.c: 212: setup_time[4] = (setup_minute % 10) + '0';
  7269  0014EA  C06A  F03B         	movff	_setup_minute,___awmod@dividend
  7270  0014EE  6A3C               	clrf	___awmod@dividend+1,c
  7271  0014F0  0E00               	movlw	0
  7272  0014F2  6E3E               	movwf	___awmod@divisor+1,c
  7273  0014F4  0E0A               	movlw	10
  7274  0014F6  6E3D               	movwf	___awmod@divisor,c
  7275  0014F8  EC63  F017         	call	___awmod	;wreg free
  7276  0014FC  503B               	movf	?___awmod,w,c
  7277  0014FE  0F30               	addlw	48
  7278  001500  0100               	movlb	0	; () banked
  7279  001502  6FAA               	movwf	(_setup_time+4)& (0+255),b
  7280                           
  7281                           ;Setup_Time.c: 214: setup_time[6] = (setup_second/10) + '0';
  7282  001504  C06C  F153         	movff	_setup_second,___awdiv@dividend
  7283  001508  0101               	movlb	1	; () banked
  7284  00150A  6B54               	clrf	(___awdiv@dividend+1)& (0+255),b
  7285  00150C  0E00               	movlw	0
  7286  00150E  0101               	movlb	1	; () banked
  7287  001510  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  7288  001512  0E0A               	movlw	10
  7289  001514  6F55               	movwf	___awdiv@divisor& (0+255),b
  7290  001516  ECCD  F012         	call	___awdiv	;wreg free
  7291  00151A  0101               	movlb	1	; () banked
  7292  00151C  5153               	movf	?___awdiv& (0+255),w,b
  7293  00151E  0F30               	addlw	48
  7294  001520  0100               	movlb	0	; () banked
  7295  001522  6FAC               	movwf	(_setup_time+6)& (0+255),b
  7296                           
  7297                           ;Setup_Time.c: 215: setup_time[7] = (setup_second % 10) + '0';
  7298  001524  C06C  F03B         	movff	_setup_second,___awmod@dividend
  7299  001528  6A3C               	clrf	___awmod@dividend+1,c
  7300  00152A  0E00               	movlw	0
  7301  00152C  6E3E               	movwf	___awmod@divisor+1,c
  7302  00152E  0E0A               	movlw	10
  7303  001530  6E3D               	movwf	___awmod@divisor,c
  7304  001532  EC63  F017         	call	___awmod	;wreg free
  7305  001536  503B               	movf	?___awmod,w,c
  7306  001538  0F30               	addlw	48
  7307  00153A  0100               	movlb	0	; () banked
  7308  00153C  6FAD               	movwf	(_setup_time+7)& (0+255),b
  7309                           
  7310                           ;Setup_Time.c: 217: setup_date[0] = (setup_month/10) + '0';
  7311  00153E  C06B  F153         	movff	_setup_month,___awdiv@dividend
  7312  001542  0101               	movlb	1	; () banked
  7313  001544  6B54               	clrf	(___awdiv@dividend+1)& (0+255),b
  7314  001546  0E00               	movlw	0
  7315  001548  0101               	movlb	1	; () banked
  7316  00154A  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  7317  00154C  0E0A               	movlw	10
  7318  00154E  6F55               	movwf	___awdiv@divisor& (0+255),b
  7319  001550  ECCD  F012         	call	___awdiv	;wreg free
  7320  001554  0101               	movlb	1	; () banked
  7321  001556  5153               	movf	?___awdiv& (0+255),w,b
  7322  001558  0F30               	addlw	48
  7323  00155A  0100               	movlb	0	; () banked
  7324  00155C  6F9D               	movwf	_setup_date& (0+255),b
  7325                           
  7326                           ;Setup_Time.c: 218: setup_date[1] = (setup_month % 10) + '0';
  7327  00155E  C06B  F03B         	movff	_setup_month,___awmod@dividend
  7328  001562  6A3C               	clrf	___awmod@dividend+1,c
  7329  001564  0E00               	movlw	0
  7330  001566  6E3E               	movwf	___awmod@divisor+1,c
  7331  001568  0E0A               	movlw	10
  7332  00156A  6E3D               	movwf	___awmod@divisor,c
  7333  00156C  EC63  F017         	call	___awmod	;wreg free
  7334  001570  503B               	movf	?___awmod,w,c
  7335  001572  0F30               	addlw	48
  7336  001574  0100               	movlb	0	; () banked
  7337  001576  6F9E               	movwf	(_setup_date+1)& (0+255),b
  7338                           
  7339                           ;Setup_Time.c: 220: setup_date[3] = (setup_day/10) + '0';
  7340  001578  C067  F153         	movff	_setup_day,___awdiv@dividend
  7341  00157C  0101               	movlb	1	; () banked
  7342  00157E  6B54               	clrf	(___awdiv@dividend+1)& (0+255),b
  7343  001580  0E00               	movlw	0
  7344  001582  0101               	movlb	1	; () banked
  7345  001584  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  7346  001586  0E0A               	movlw	10
  7347  001588  6F55               	movwf	___awdiv@divisor& (0+255),b
  7348  00158A  ECCD  F012         	call	___awdiv	;wreg free
  7349  00158E  0101               	movlb	1	; () banked
  7350  001590  5153               	movf	?___awdiv& (0+255),w,b
  7351  001592  0F30               	addlw	48
  7352  001594  0100               	movlb	0	; () banked
  7353  001596  6FA0               	movwf	(_setup_date+3)& (0+255),b
  7354                           
  7355                           ;Setup_Time.c: 221: setup_date[4] = (setup_day % 10) + '0';
  7356  001598  C067  F03B         	movff	_setup_day,___awmod@dividend
  7357  00159C  6A3C               	clrf	___awmod@dividend+1,c
  7358  00159E  0E00               	movlw	0
  7359  0015A0  6E3E               	movwf	___awmod@divisor+1,c
  7360  0015A2  0E0A               	movlw	10
  7361  0015A4  6E3D               	movwf	___awmod@divisor,c
  7362  0015A6  EC63  F017         	call	___awmod	;wreg free
  7363  0015AA  503B               	movf	?___awmod,w,c
  7364  0015AC  0F30               	addlw	48
  7365  0015AE  0100               	movlb	0	; () banked
  7366  0015B0  6FA1               	movwf	(_setup_date+4)& (0+255),b
  7367                           
  7368                           ;Setup_Time.c: 223: setup_date[6] = (setup_year/10) + '0';
  7369  0015B2  C06D  F153         	movff	_setup_year,___awdiv@dividend
  7370  0015B6  0101               	movlb	1	; () banked
  7371  0015B8  6B54               	clrf	(___awdiv@dividend+1)& (0+255),b
  7372  0015BA  0E00               	movlw	0
  7373  0015BC  0101               	movlb	1	; () banked
  7374  0015BE  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  7375  0015C0  0E0A               	movlw	10
  7376  0015C2  6F55               	movwf	___awdiv@divisor& (0+255),b
  7377  0015C4  ECCD  F012         	call	___awdiv	;wreg free
  7378  0015C8  0101               	movlb	1	; () banked
  7379  0015CA  5153               	movf	?___awdiv& (0+255),w,b
  7380  0015CC  0F30               	addlw	48
  7381  0015CE  0100               	movlb	0	; () banked
  7382  0015D0  6FA3               	movwf	(_setup_date+6)& (0+255),b
  7383                           
  7384                           ;Setup_Time.c: 224: setup_date[7] = (setup_year % 10) + '0';
  7385  0015D2  C06D  F03B         	movff	_setup_year,___awmod@dividend
  7386  0015D6  6A3C               	clrf	___awmod@dividend+1,c
  7387  0015D8  0E00               	movlw	0
  7388  0015DA  6E3E               	movwf	___awmod@divisor+1,c
  7389  0015DC  0E0A               	movlw	10
  7390  0015DE  6E3D               	movwf	___awmod@divisor,c
  7391  0015E0  EC63  F017         	call	___awmod	;wreg free
  7392  0015E4  503B               	movf	?___awmod,w,c
  7393  0015E6  0F30               	addlw	48
  7394  0015E8  0100               	movlb	0	; () banked
  7395  0015EA  6FA4               	movwf	(_setup_date+7)& (0+255),b
  7396                           
  7397                           ; BSR set to: 0
  7398                           ;Setup_Time.c: 226: drawtext(15, 52, setup_time, 0x07FF, 0x0000, 2);
  7399  0015EC  0E34               	movlw	52
  7400  0015EE  6E39               	movwf	drawtext@y,c
  7401  0015F0  0EA6               	movlw	low _setup_time
  7402  0015F2  6E3A               	movwf	drawtext@_text,c
  7403  0015F4  0E00               	movlw	high _setup_time
  7404  0015F6  6E3B               	movwf	drawtext@_text+1,c
  7405  0015F8  0E07               	movlw	7
  7406  0015FA  6E3D               	movwf	drawtext@color+1,c
  7407  0015FC  683C               	setf	drawtext@color,c
  7408  0015FE  0E00               	movlw	0
  7409  001600  6E3F               	movwf	drawtext@bg+1,c
  7410  001602  0E00               	movlw	0
  7411  001604  6E3E               	movwf	drawtext@bg,c
  7412  001606  0E02               	movlw	2
  7413  001608  6E40               	movwf	drawtext@size,c
  7414  00160A  0E0F               	movlw	15
  7415  00160C  EC99  F00D         	call	_drawtext
  7416                           
  7417                           ;Setup_Time.c: 227: drawtext(15, 82, setup_date, 0x07E0, 0x0000, 2);
  7418  001610  0E52               	movlw	82
  7419  001612  6E39               	movwf	drawtext@y,c
  7420  001614  0E9D               	movlw	low _setup_date
  7421  001616  6E3A               	movwf	drawtext@_text,c
  7422  001618  0E00               	movlw	high _setup_date
  7423  00161A  6E3B               	movwf	drawtext@_text+1,c
  7424  00161C  0E07               	movlw	7
  7425  00161E  6E3D               	movwf	drawtext@color+1,c
  7426  001620  0EE0               	movlw	224
  7427  001622  6E3C               	movwf	drawtext@color,c
  7428  001624  0E00               	movlw	0
  7429  001626  6E3F               	movwf	drawtext@bg+1,c
  7430  001628  0E00               	movlw	0
  7431  00162A  6E3E               	movwf	drawtext@bg,c
  7432  00162C  0E02               	movlw	2
  7433  00162E  6E40               	movwf	drawtext@size,c
  7434  001630  0E0F               	movlw	15
  7435  001632  EC99  F00D         	call	_drawtext
  7436  001636  0012               	return		;funcret
  7437  001638                     __end_of_Update_Setup_Time_Screen:
  7438                           	opt stack 0
  7439                           tblptru	equ	0xFF8
  7440                           tblptrh	equ	0xFF7
  7441                           tblptrl	equ	0xFF6
  7442                           tablat	equ	0xFF5
  7443                           prodh	equ	0xFF4
  7444                           prodl	equ	0xFF3
  7445                           postinc0	equ	0xFEE
  7446                           wreg	equ	0xFE8
  7447                           postdec1	equ	0xFE5
  7448                           plusw1	equ	0xFE3
  7449                           fsr1l	equ	0xFE1
  7450                           indf2	equ	0xFDF
  7451                           plusw2	equ	0xFDB
  7452                           fsr2h	equ	0xFDA
  7453                           fsr2l	equ	0xFD9
  7454                           status	equ	0xFD8
  7455                           
  7456 ;; *************** function _Do_Setup_Heater_Temp *****************
  7457 ;; Defined at:
  7458 ;;		line 24 in file "Setup_Heater_Temp.c"
  7459 ;; Parameters:    Size  Location     Type
  7460 ;;		None
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;		None
  7463 ;; Return value:  Size  Location     Type
  7464 ;;                  2  416[None  ] int 
  7465 ;; Registers used:
  7466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7467 ;; Tracked objects:
  7468 ;;		On entry : 0/0
  7469 ;;		On exit  : 0/0
  7470 ;;		Unchanged: 0/0
  7471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7474 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7475 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7476 ;;Total ram usage:        2 bytes
  7477 ;; Hardware stack levels used:    1
  7478 ;; Hardware stack levels required when called:   12
  7479 ;; This function calls:
  7480 ;;		_Decrease_Heater_Temp
  7481 ;;		_Do_Beep_Bad
  7482 ;;		_Do_Beep_Good
  7483 ;;		_Do_Save_New_Heater_Temp
  7484 ;;		_Exit_Setup_Heater_Temp
  7485 ;;		_Increase_Heater_Temp
  7486 ;;		_Initialize_Setup_Heater_Screen
  7487 ;;		_Update_Setup_Heater_Screen
  7488 ;;		_check_for_button_input
  7489 ;; This function is called by:
  7490 ;;		_main
  7491 ;; This function uses a non-reentrant model
  7492 ;;
  7493                           
  7494                           	psect	text31
  7495  002B68                     __ptext31:
  7496                           	opt stack 0
  7497  002B68                     _Do_Setup_Heater_Temp:
  7498                           	opt stack 18
  7499                           
  7500                           ;Setup_Heater_Temp.c: 26: In_Heater_Temp_Setup = 1;
  7501                           
  7502                           ;incstack = 0
  7503  002B68  0E01               	movlw	1
  7504  002B6A  0100               	movlb	0	; () banked
  7505  002B6C  6FF9               	movwf	_In_Heater_Temp_Setup& (0+255),b
  7506                           
  7507                           ; BSR set to: 0
  7508                           ;Setup_Heater_Temp.c: 27: setup_heater_set_temp = heater_set_temp;
  7509  002B6E  C06F  F068         	movff	_heater_set_temp,_setup_heater_set_temp
  7510                           
  7511                           ; BSR set to: 0
  7512                           ;Setup_Heater_Temp.c: 28: Initialize_Setup_Heater_Screen();
  7513  002B72  ECA8  F00F         	call	_Initialize_Setup_Heater_Screen	;wreg free
  7514                           
  7515                           ;Setup_Heater_Temp.c: 29: Update_Setup_Heater_Screen();
  7516  002B76  EC13  F015         	call	_Update_Setup_Heater_Screen	;wreg free
  7517                           
  7518                           ;Setup_Heater_Temp.c: 31: while (In_Heater_Temp_Setup == 1)
  7519  002B7A  D03B               	goto	l9951
  7520  002B7C                     l9921:
  7521                           
  7522                           ;Setup_Heater_Temp.c: 32: {
  7523                           ;Setup_Heater_Temp.c: 33: if (check_for_button_input() == 1)
  7524  002B7C  0E01               	movlw	1
  7525  002B7E  0101               	movlb	1	; () banked
  7526  002B80  6F5B               	movwf	??_Do_Setup_Heater_Temp& (0+255),b
  7527  002B82  0E00               	movlw	0
  7528  002B84  0101               	movlb	1	; () banked
  7529  002B86  6F5C               	movwf	(??_Do_Setup_Heater_Temp+1)& (0+255),b
  7530  002B88  ECA4  F017         	call	_check_for_button_input	;wreg free
  7531  002B8C  0101               	movlb	1	; () banked
  7532  002B8E  195B               	xorwf	??_Do_Setup_Heater_Temp& (0+255),w,b
  7533  002B90  115C               	iorwf	(??_Do_Setup_Heater_Temp+1)& (0+255),w,b
  7534  002B92  A4D8               	btfss	status,2,c
  7535  002B94  D02E               	goto	l9951
  7536                           
  7537                           ; BSR set to: 1
  7538                           ;Setup_Heater_Temp.c: 34: {
  7539                           ;Setup_Heater_Temp.c: 35: nec_ok = 0;
  7540  002B96  0E00               	movlw	0
  7541  002B98  0100               	movlb	0	; () banked
  7542  002B9A  6FF3               	movwf	(_nec_ok+1)& (0+255),b
  7543  002B9C  0E00               	movlw	0
  7544  002B9E  6FF2               	movwf	_nec_ok& (0+255),b
  7545                           
  7546                           ; BSR set to: 0
  7547                           ;Setup_Heater_Temp.c: 36: if (found >= 5 && found <= 8)
  7548  002BA0  0E04               	movlw	4
  7549  002BA2  645E               	cpfsgt	_found,c
  7550  002BA4  D023               	goto	l9949
  7551                           
  7552                           ; BSR set to: 0
  7553  002BA6  0E09               	movlw	9
  7554  002BA8  605E               	cpfslt	_found,c
  7555  002BAA  D020               	goto	l9949
  7556                           
  7557                           ; BSR set to: 0
  7558                           ;Setup_Heater_Temp.c: 37: {
  7559                           ;Setup_Heater_Temp.c: 38: Do_Beep_Good();
  7560  002BAC  EC60  F01E         	call	_Do_Beep_Good	;wreg free
  7561                           
  7562                           ;Setup_Heater_Temp.c: 39: if(found == 5) Do_Save_New_Heater_Temp();
  7563  002BB0  0E05               	movlw	5
  7564  002BB2  185E               	xorwf	_found,w,c
  7565  002BB4  A4D8               	btfss	status,2,c
  7566  002BB6  D003               	goto	l9935
  7567  002BB8  EC42  F01E         	call	_Do_Save_New_Heater_Temp	;wreg free
  7568  002BBC  D015               	goto	l9947
  7569  002BBE                     l9935:
  7570                           
  7571                           ;Setup_Heater_Temp.c: 40: else if (found == 6) Decrease_Heater_Temp();
  7572  002BBE  0E06               	movlw	6
  7573  002BC0  185E               	xorwf	_found,w,c
  7574  002BC2  A4D8               	btfss	status,2,c
  7575  002BC4  D003               	goto	l9939
  7576  002BC6  EC4C  F01E         	call	_Decrease_Heater_Temp	;wreg free
  7577  002BCA  D00E               	goto	l9947
  7578  002BCC                     l9939:
  7579                           
  7580                           ;Setup_Heater_Temp.c: 41: else if (found == 7) Increase_Heater_Temp();
  7581  002BCC  0E07               	movlw	7
  7582  002BCE  185E               	xorwf	_found,w,c
  7583  002BD0  A4D8               	btfss	status,2,c
  7584  002BD2  D003               	goto	l9943
  7585  002BD4  EC38  F01E         	call	_Increase_Heater_Temp	;wreg free
  7586  002BD8  D007               	goto	l9947
  7587  002BDA                     l9943:
  7588                           
  7589                           ;Setup_Heater_Temp.c: 42: else if (found == 8) Exit_Setup_Heater_Temp();
  7590  002BDA  0E08               	movlw	8
  7591  002BDC  185E               	xorwf	_found,w,c
  7592  002BDE  A4D8               	btfss	status,2,c
  7593  002BE0  D003               	goto	l9947
  7594  002BE2  ECE0  F01E         	call	_Exit_Setup_Heater_Temp	;wreg free
  7595  002BE6  D000               	goto	l9947
  7596  002BE8                     l9947:
  7597                           
  7598                           ;Setup_Heater_Temp.c: 43: found = 0xff;
  7599  002BE8  685E               	setf	_found,c
  7600                           
  7601                           ;Setup_Heater_Temp.c: 44: }
  7602  002BEA  D003               	goto	l9951
  7603  002BEC                     l9949:
  7604                           
  7605                           ;Setup_Heater_Temp.c: 45: else
  7606                           ;Setup_Heater_Temp.c: 46: {
  7607                           ;Setup_Heater_Temp.c: 47: Do_Beep_Bad();
  7608  002BEC  EC6A  F01E         	call	_Do_Beep_Bad	;wreg free
  7609  002BF0  D000               	goto	l9951
  7610  002BF2                     l9951:
  7611  002BF2  0100               	movlb	0	; () banked
  7612  002BF4  05F9               	decf	_In_Heater_Temp_Setup& (0+255),w,b
  7613  002BF6  B4D8               	btfsc	status,2,c
  7614  002BF8  D7C1               	goto	l9921
  7615                           
  7616                           ; BSR set to: 0
  7617                           
  7618                           ; BSR set to: 0
  7619  002BFA  0012               	return		;funcret
  7620  002BFC                     __end_of_Do_Setup_Heater_Temp:
  7621                           	opt stack 0
  7622                           tblptru	equ	0xFF8
  7623                           tblptrh	equ	0xFF7
  7624                           tblptrl	equ	0xFF6
  7625                           tablat	equ	0xFF5
  7626                           prodh	equ	0xFF4
  7627                           prodl	equ	0xFF3
  7628                           postinc0	equ	0xFEE
  7629                           wreg	equ	0xFE8
  7630                           postdec1	equ	0xFE5
  7631                           plusw1	equ	0xFE3
  7632                           fsr1l	equ	0xFE1
  7633                           indf2	equ	0xFDF
  7634                           plusw2	equ	0xFDB
  7635                           fsr2h	equ	0xFDA
  7636                           fsr2l	equ	0xFD9
  7637                           status	equ	0xFD8
  7638                           
  7639 ;; *************** function _Initialize_Setup_Heater_Screen *****************
  7640 ;; Defined at:
  7641 ;;		line 84 in file "Setup_Heater_Temp.c"
  7642 ;; Parameters:    Size  Location     Type
  7643 ;;		None
  7644 ;; Auto vars:     Size  Location     Type
  7645 ;;		None
  7646 ;; Return value:  Size  Location     Type
  7647 ;;		None               void
  7648 ;; Registers used:
  7649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7650 ;; Tracked objects:
  7651 ;;		On entry : 0/0
  7652 ;;		On exit  : 0/0
  7653 ;;		Unchanged: 0/0
  7654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7659 ;;Total ram usage:        0 bytes
  7660 ;; Hardware stack levels used:    1
  7661 ;; Hardware stack levels required when called:   10
  7662 ;; This function calls:
  7663 ;;		_drawtext
  7664 ;;		_fillScreen
  7665 ;;		_strcpy
  7666 ;; This function is called by:
  7667 ;;		_Do_Setup_Heater_Temp
  7668 ;; This function uses a non-reentrant model
  7669 ;;
  7670                           
  7671                           	psect	text32
  7672  001F50                     __ptext32:
  7673                           	opt stack 0
  7674  001F50                     _Initialize_Setup_Heater_Screen:
  7675                           	opt stack 19
  7676                           
  7677                           ;Setup_Heater_Temp.c: 86: fillScreen(0x0000);
  7678                           
  7679                           ; BSR set to: 0
  7680                           ;incstack = 0
  7681  001F50  0E00               	movlw	0
  7682  001F52  6E25               	movwf	fillScreen@color+1,c
  7683  001F54  0E00               	movlw	0
  7684  001F56  6E24               	movwf	fillScreen@color,c
  7685  001F58  ECBE  F01D         	call	_fillScreen	;wreg free
  7686                           
  7687                           ;Setup_Heater_Temp.c: 88: strcpy(txt, "ECE3301L F'22 S1\0");
  7688  001F5C  C04E  F011         	movff	_txt,strcpy@to
  7689  001F60  C04F  F012         	movff	_txt+1,strcpy@to+1
  7690  001F64  0E2B               	movlw	low STR_5
  7691  001F66  6E13               	movwf	strcpy@from,c
  7692  001F68  0EFF               	movlw	high STR_5
  7693  001F6A  6E14               	movwf	strcpy@from+1,c
  7694  001F6C  ECC4  F01C         	call	_strcpy	;wreg free
  7695                           
  7696                           ;Setup_Heater_Temp.c: 89: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  7697  001F70  0E01               	movlw	1
  7698  001F72  6E39               	movwf	drawtext@y,c
  7699  001F74  C04E  F03A         	movff	_txt,drawtext@_text
  7700  001F78  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  7701  001F7C  0EFF               	movlw	255
  7702  001F7E  6E3D               	movwf	drawtext@color+1,c
  7703  001F80  683C               	setf	drawtext@color,c
  7704  001F82  0E00               	movlw	0
  7705  001F84  6E3F               	movwf	drawtext@bg+1,c
  7706  001F86  0E00               	movlw	0
  7707  001F88  6E3E               	movwf	drawtext@bg,c
  7708  001F8A  0E01               	movlw	1
  7709  001F8C  6E40               	movwf	drawtext@size,c
  7710  001F8E  0E01               	movlw	1
  7711  001F90  EC99  F00D         	call	_drawtext
  7712                           
  7713                           ;Setup_Heater_Temp.c: 91: strcpy(txt, "  Heater\0 ");
  7714  001F94  C04E  F011         	movff	_txt,strcpy@to
  7715  001F98  C04F  F012         	movff	_txt+1,strcpy@to+1
  7716  001F9C  0E95               	movlw	low STR_29
  7717  001F9E  6E13               	movwf	strcpy@from,c
  7718  001FA0  0EFF               	movlw	high STR_29
  7719  001FA2  6E14               	movwf	strcpy@from+1,c
  7720  001FA4  ECC4  F01C         	call	_strcpy	;wreg free
  7721                           
  7722                           ;Setup_Heater_Temp.c: 92: drawtext(1 , 1+25, txt, 0xFFE0, 0x0000, 2);
  7723  001FA8  0E1A               	movlw	26
  7724  001FAA  6E39               	movwf	drawtext@y,c
  7725  001FAC  C04E  F03A         	movff	_txt,drawtext@_text
  7726  001FB0  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  7727  001FB4  0EFF               	movlw	255
  7728  001FB6  6E3D               	movwf	drawtext@color+1,c
  7729  001FB8  0EE0               	movlw	224
  7730  001FBA  6E3C               	movwf	drawtext@color,c
  7731  001FBC  0E00               	movlw	0
  7732  001FBE  6E3F               	movwf	drawtext@bg+1,c
  7733  001FC0  0E00               	movlw	0
  7734  001FC2  6E3E               	movwf	drawtext@bg,c
  7735  001FC4  0E02               	movlw	2
  7736  001FC6  6E40               	movwf	drawtext@size,c
  7737  001FC8  0E01               	movlw	1
  7738  001FCA  EC99  F00D         	call	_drawtext
  7739                           
  7740                           ;Setup_Heater_Temp.c: 93: strcpy(txt, "  Setup\0 ");
  7741  001FCE  C04E  F011         	movff	_txt,strcpy@to
  7742  001FD2  C04F  F012         	movff	_txt+1,strcpy@to+1
  7743  001FD6  0EB6               	movlw	low STR_30
  7744  001FD8  6E13               	movwf	strcpy@from,c
  7745  001FDA  0EFF               	movlw	high STR_30
  7746  001FDC  6E14               	movwf	strcpy@from+1,c
  7747  001FDE  ECC4  F01C         	call	_strcpy	;wreg free
  7748                           
  7749                           ;Setup_Heater_Temp.c: 94: drawtext(1 , 1+40, txt, 0xFFE0, 0x0000, 2);
  7750  001FE2  0E29               	movlw	41
  7751  001FE4  6E39               	movwf	drawtext@y,c
  7752  001FE6  C04E  F03A         	movff	_txt,drawtext@_text
  7753  001FEA  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  7754  001FEE  0EFF               	movlw	255
  7755  001FF0  6E3D               	movwf	drawtext@color+1,c
  7756  001FF2  0EE0               	movlw	224
  7757  001FF4  6E3C               	movwf	drawtext@color,c
  7758  001FF6  0E00               	movlw	0
  7759  001FF8  6E3F               	movwf	drawtext@bg+1,c
  7760  001FFA  0E00               	movlw	0
  7761  001FFC  6E3E               	movwf	drawtext@bg,c
  7762  001FFE  0E02               	movlw	2
  7763  002000  6E40               	movwf	drawtext@size,c
  7764  002002  0E01               	movlw	1
  7765  002004  EC99  F00D         	call	_drawtext
  7766                           
  7767                           ;Setup_Heater_Temp.c: 95: strcpy(txt, "Set Heater Temp");
  7768  002008  C04E  F011         	movff	_txt,strcpy@to
  7769  00200C  C04F  F012         	movff	_txt+1,strcpy@to+1
  7770  002010  0E5F               	movlw	low STR_31
  7771  002012  6E13               	movwf	strcpy@from,c
  7772  002014  0EFF               	movlw	high STR_31
  7773  002016  6E14               	movwf	strcpy@from+1,c
  7774  002018  ECC4  F01C         	call	_strcpy	;wreg free
  7775                           
  7776                           ;Setup_Heater_Temp.c: 96: drawtext(15 , 60, txt, 0x07FF , 0x0000, 1);
  7777  00201C  0E3C               	movlw	60
  7778  00201E  6E39               	movwf	drawtext@y,c
  7779  002020  C04E  F03A         	movff	_txt,drawtext@_text
  7780  002024  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  7781  002028  0E07               	movlw	7
  7782  00202A  6E3D               	movwf	drawtext@color+1,c
  7783  00202C  683C               	setf	drawtext@color,c
  7784  00202E  0E00               	movlw	0
  7785  002030  6E3F               	movwf	drawtext@bg+1,c
  7786  002032  0E00               	movlw	0
  7787  002034  6E3E               	movwf	drawtext@bg,c
  7788  002036  0E01               	movlw	1
  7789  002038  6E40               	movwf	drawtext@size,c
  7790  00203A  0E0F               	movlw	15
  7791  00203C  EC99  F00D         	call	_drawtext
  7792  002040  0012               	return		;funcret
  7793  002042                     __end_of_Initialize_Setup_Heater_Screen:
  7794                           	opt stack 0
  7795                           tblptru	equ	0xFF8
  7796                           tblptrh	equ	0xFF7
  7797                           tblptrl	equ	0xFF6
  7798                           tablat	equ	0xFF5
  7799                           prodh	equ	0xFF4
  7800                           prodl	equ	0xFF3
  7801                           postinc0	equ	0xFEE
  7802                           wreg	equ	0xFE8
  7803                           postdec1	equ	0xFE5
  7804                           plusw1	equ	0xFE3
  7805                           fsr1l	equ	0xFE1
  7806                           indf2	equ	0xFDF
  7807                           plusw2	equ	0xFDB
  7808                           fsr2h	equ	0xFDA
  7809                           fsr2l	equ	0xFD9
  7810                           status	equ	0xFD8
  7811                           
  7812 ;; *************** function _Increase_Heater_Temp *****************
  7813 ;; Defined at:
  7814 ;;		line 53 in file "Setup_Heater_Temp.c"
  7815 ;; Parameters:    Size  Location     Type
  7816 ;;		None
  7817 ;; Auto vars:     Size  Location     Type
  7818 ;;		None
  7819 ;; Return value:  Size  Location     Type
  7820 ;;		None               void
  7821 ;; Registers used:
  7822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7823 ;; Tracked objects:
  7824 ;;		On entry : 0/0
  7825 ;;		On exit  : 0/0
  7826 ;;		Unchanged: 0/0
  7827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7832 ;;Total ram usage:        0 bytes
  7833 ;; Hardware stack levels used:    1
  7834 ;; Hardware stack levels required when called:   11
  7835 ;; This function calls:
  7836 ;;		_Update_Setup_Heater_Screen
  7837 ;; This function is called by:
  7838 ;;		_Do_Setup_Heater_Temp
  7839 ;; This function uses a non-reentrant model
  7840 ;;
  7841                           
  7842                           	psect	text33
  7843  003C70                     __ptext33:
  7844                           	opt stack 0
  7845  003C70                     _Increase_Heater_Temp:
  7846                           	opt stack 18
  7847                           
  7848                           ;Setup_Heater_Temp.c: 56: setup_heater_set_temp++;
  7849                           
  7850                           ;incstack = 0
  7851  003C70  2A68               	incf	_setup_heater_set_temp,f,c
  7852                           
  7853                           ;Setup_Heater_Temp.c: 57: if(setup_heater_set_temp>120) setup_heater_set_temp = 120;
  7854  003C72  0E78               	movlw	120
  7855  003C74  6468               	cpfsgt	_setup_heater_set_temp,c
  7856  003C76  D003               	goto	l9341
  7857  003C78  0E78               	movlw	120
  7858  003C7A  6E68               	movwf	_setup_heater_set_temp,c
  7859  003C7C  D000               	goto	l9341
  7860  003C7E                     l9341:
  7861                           
  7862                           ;Setup_Heater_Temp.c: 58: Update_Setup_Heater_Screen();
  7863  003C7E  EC13  F015         	call	_Update_Setup_Heater_Screen	;wreg free
  7864  003C82  0012               	return		;funcret
  7865  003C84                     __end_of_Increase_Heater_Temp:
  7866                           	opt stack 0
  7867                           tblptru	equ	0xFF8
  7868                           tblptrh	equ	0xFF7
  7869                           tblptrl	equ	0xFF6
  7870                           tablat	equ	0xFF5
  7871                           prodh	equ	0xFF4
  7872                           prodl	equ	0xFF3
  7873                           postinc0	equ	0xFEE
  7874                           wreg	equ	0xFE8
  7875                           postdec1	equ	0xFE5
  7876                           plusw1	equ	0xFE3
  7877                           fsr1l	equ	0xFE1
  7878                           indf2	equ	0xFDF
  7879                           plusw2	equ	0xFDB
  7880                           fsr2h	equ	0xFDA
  7881                           fsr2l	equ	0xFD9
  7882                           status	equ	0xFD8
  7883                           
  7884 ;; *************** function _Exit_Setup_Heater_Temp *****************
  7885 ;; Defined at:
  7886 ;;		line 69 in file "Setup_Heater_Temp.c"
  7887 ;; Parameters:    Size  Location     Type
  7888 ;;		None
  7889 ;; Auto vars:     Size  Location     Type
  7890 ;;		None
  7891 ;; Return value:  Size  Location     Type
  7892 ;;		None               void
  7893 ;; Registers used:
  7894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7895 ;; Tracked objects:
  7896 ;;		On entry : 0/0
  7897 ;;		On exit  : 0/0
  7898 ;;		Unchanged: 0/0
  7899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7904 ;;Total ram usage:        0 bytes
  7905 ;; Hardware stack levels used:    1
  7906 ;; Hardware stack levels required when called:   11
  7907 ;; This function calls:
  7908 ;;		_DS3231_Read_Time
  7909 ;;		_Initialize_Screen
  7910 ;; This function is called by:
  7911 ;;		_Do_Setup_Heater_Temp
  7912 ;; This function uses a non-reentrant model
  7913 ;;
  7914                           
  7915                           	psect	text34
  7916  003DC0                     __ptext34:
  7917                           	opt stack 0
  7918  003DC0                     _Exit_Setup_Heater_Temp:
  7919                           	opt stack 18
  7920                           
  7921                           ;Setup_Heater_Temp.c: 71: DS3231_Read_Time();
  7922                           
  7923                           ;incstack = 0
  7924  003DC0  EC00  F019         	call	_DS3231_Read_Time	;wreg free
  7925                           
  7926                           ;Setup_Heater_Temp.c: 72: Initialize_Screen();
  7927  003DC4  EC43  F003         	call	_Initialize_Screen	;wreg free
  7928                           
  7929                           ;Setup_Heater_Temp.c: 73: In_Heater_Temp_Setup = 0;
  7930  003DC8  0E00               	movlw	0
  7931  003DCA  0100               	movlb	0	; () banked
  7932  003DCC  6FF9               	movwf	_In_Heater_Temp_Setup& (0+255),b
  7933                           
  7934                           ; BSR set to: 0
  7935  003DCE  0012               	return		;funcret
  7936  003DD0                     __end_of_Exit_Setup_Heater_Temp:
  7937                           	opt stack 0
  7938                           tblptru	equ	0xFF8
  7939                           tblptrh	equ	0xFF7
  7940                           tblptrl	equ	0xFF6
  7941                           tablat	equ	0xFF5
  7942                           prodh	equ	0xFF4
  7943                           prodl	equ	0xFF3
  7944                           postinc0	equ	0xFEE
  7945                           wreg	equ	0xFE8
  7946                           postdec1	equ	0xFE5
  7947                           plusw1	equ	0xFE3
  7948                           fsr1l	equ	0xFE1
  7949                           indf2	equ	0xFDF
  7950                           plusw2	equ	0xFDB
  7951                           fsr2h	equ	0xFDA
  7952                           fsr2l	equ	0xFD9
  7953                           status	equ	0xFD8
  7954                           
  7955 ;; *************** function _Do_Save_New_Heater_Temp *****************
  7956 ;; Defined at:
  7957 ;;		line 76 in file "Setup_Heater_Temp.c"
  7958 ;; Parameters:    Size  Location     Type
  7959 ;;		None
  7960 ;; Auto vars:     Size  Location     Type
  7961 ;;		None
  7962 ;; Return value:  Size  Location     Type
  7963 ;;		None               void
  7964 ;; Registers used:
  7965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7966 ;; Tracked objects:
  7967 ;;		On entry : 0/0
  7968 ;;		On exit  : 0/0
  7969 ;;		Unchanged: 0/0
  7970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;Total ram usage:        0 bytes
  7976 ;; Hardware stack levels used:    1
  7977 ;; Hardware stack levels required when called:   11
  7978 ;; This function calls:
  7979 ;;		_DS3231_Read_Time
  7980 ;;		_Initialize_Screen
  7981 ;; This function is called by:
  7982 ;;		_Do_Setup_Heater_Temp
  7983 ;; This function uses a non-reentrant model
  7984 ;;
  7985                           
  7986                           	psect	text35
  7987  003C84                     __ptext35:
  7988                           	opt stack 0
  7989  003C84                     _Do_Save_New_Heater_Temp:
  7990                           	opt stack 18
  7991                           
  7992                           ;Setup_Heater_Temp.c: 78: heater_set_temp = setup_heater_set_temp;
  7993                           
  7994                           ; BSR set to: 0
  7995                           ;incstack = 0
  7996  003C84  C068  F06F         	movff	_setup_heater_set_temp,_heater_set_temp
  7997                           
  7998                           ;Setup_Heater_Temp.c: 79: DS3231_Read_Time();
  7999  003C88  EC00  F019         	call	_DS3231_Read_Time	;wreg free
  8000                           
  8001                           ;Setup_Heater_Temp.c: 80: Initialize_Screen();
  8002  003C8C  EC43  F003         	call	_Initialize_Screen	;wreg free
  8003                           
  8004                           ;Setup_Heater_Temp.c: 81: In_Heater_Temp_Setup = 0;
  8005  003C90  0E00               	movlw	0
  8006  003C92  0100               	movlb	0	; () banked
  8007  003C94  6FF9               	movwf	_In_Heater_Temp_Setup& (0+255),b
  8008                           
  8009                           ; BSR set to: 0
  8010  003C96  0012               	return		;funcret
  8011  003C98                     __end_of_Do_Save_New_Heater_Temp:
  8012                           	opt stack 0
  8013                           tblptru	equ	0xFF8
  8014                           tblptrh	equ	0xFF7
  8015                           tblptrl	equ	0xFF6
  8016                           tablat	equ	0xFF5
  8017                           prodh	equ	0xFF4
  8018                           prodl	equ	0xFF3
  8019                           postinc0	equ	0xFEE
  8020                           wreg	equ	0xFE8
  8021                           postdec1	equ	0xFE5
  8022                           plusw1	equ	0xFE3
  8023                           fsr1l	equ	0xFE1
  8024                           indf2	equ	0xFDF
  8025                           plusw2	equ	0xFDB
  8026                           fsr2h	equ	0xFDA
  8027                           fsr2l	equ	0xFD9
  8028                           status	equ	0xFD8
  8029                           
  8030 ;; *************** function _Decrease_Heater_Temp *****************
  8031 ;; Defined at:
  8032 ;;		line 62 in file "Setup_Heater_Temp.c"
  8033 ;; Parameters:    Size  Location     Type
  8034 ;;		None
  8035 ;; Auto vars:     Size  Location     Type
  8036 ;;		None
  8037 ;; Return value:  Size  Location     Type
  8038 ;;		None               void
  8039 ;; Registers used:
  8040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8041 ;; Tracked objects:
  8042 ;;		On entry : 0/0
  8043 ;;		On exit  : 0/0
  8044 ;;		Unchanged: 0/0
  8045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8050 ;;Total ram usage:        0 bytes
  8051 ;; Hardware stack levels used:    1
  8052 ;; Hardware stack levels required when called:   11
  8053 ;; This function calls:
  8054 ;;		_Update_Setup_Heater_Screen
  8055 ;; This function is called by:
  8056 ;;		_Do_Setup_Heater_Temp
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           	psect	text36
  8061  003C98                     __ptext36:
  8062                           	opt stack 0
  8063  003C98                     _Decrease_Heater_Temp:
  8064                           	opt stack 18
  8065                           
  8066                           ;Setup_Heater_Temp.c: 64: setup_heater_set_temp--;
  8067                           
  8068                           ; BSR set to: 0
  8069                           ;incstack = 0
  8070  003C98  0668               	decf	_setup_heater_set_temp,f,c
  8071                           
  8072                           ;Setup_Heater_Temp.c: 65: if(setup_heater_set_temp < 50) setup_heater_set_temp = 50;
  8073  003C9A  0E32               	movlw	50
  8074  003C9C  6068               	cpfslt	_setup_heater_set_temp,c
  8075  003C9E  D003               	goto	l9333
  8076  003CA0  0E32               	movlw	50
  8077  003CA2  6E68               	movwf	_setup_heater_set_temp,c
  8078  003CA4  D000               	goto	l9333
  8079  003CA6                     l9333:
  8080                           
  8081                           ;Setup_Heater_Temp.c: 66: Update_Setup_Heater_Screen();
  8082  003CA6  EC13  F015         	call	_Update_Setup_Heater_Screen	;wreg free
  8083  003CAA  0012               	return		;funcret
  8084  003CAC                     __end_of_Decrease_Heater_Temp:
  8085                           	opt stack 0
  8086                           tblptru	equ	0xFF8
  8087                           tblptrh	equ	0xFF7
  8088                           tblptrl	equ	0xFF6
  8089                           tablat	equ	0xFF5
  8090                           prodh	equ	0xFF4
  8091                           prodl	equ	0xFF3
  8092                           postinc0	equ	0xFEE
  8093                           wreg	equ	0xFE8
  8094                           postdec1	equ	0xFE5
  8095                           plusw1	equ	0xFE3
  8096                           fsr1l	equ	0xFE1
  8097                           indf2	equ	0xFDF
  8098                           plusw2	equ	0xFDB
  8099                           fsr2h	equ	0xFDA
  8100                           fsr2l	equ	0xFD9
  8101                           status	equ	0xFD8
  8102                           
  8103 ;; *************** function _Update_Setup_Heater_Screen *****************
  8104 ;; Defined at:
  8105 ;;		line 99 in file "Setup_Heater_Temp.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;		None
  8108 ;; Auto vars:     Size  Location     Type
  8109 ;;  dc_char3        1    2[BANK0 ] unsigned char 
  8110 ;;  dc_char2        1    1[BANK0 ] unsigned char 
  8111 ;;  dc_char1        1    0[BANK0 ] unsigned char 
  8112 ;; Return value:  Size  Location     Type
  8113 ;;		None               void
  8114 ;; Registers used:
  8115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8116 ;; Tracked objects:
  8117 ;;		On entry : 0/0
  8118 ;;		On exit  : 0/0
  8119 ;;		Unchanged: 0/0
  8120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8122 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8124 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;Total ram usage:        3 bytes
  8126 ;; Hardware stack levels used:    1
  8127 ;; Hardware stack levels required when called:   10
  8128 ;; This function calls:
  8129 ;;		___awdiv
  8130 ;;		___awmod
  8131 ;;		_drawtext
  8132 ;; This function is called by:
  8133 ;;		_Do_Setup_Heater_Temp
  8134 ;;		_Increase_Heater_Temp
  8135 ;;		_Decrease_Heater_Temp
  8136 ;; This function uses a non-reentrant model
  8137 ;;
  8138                           
  8139                           	psect	text37
  8140  002A26                     __ptext37:
  8141                           	opt stack 0
  8142  002A26                     _Update_Setup_Heater_Screen:
  8143                           	opt stack 19
  8144                           
  8145                           ;Setup_Heater_Temp.c: 101: char dc_char1 = setup_heater_set_temp/100;
  8146                           
  8147                           ;incstack = 0
  8148  002A26  C068  F153         	movff	_setup_heater_set_temp,___awdiv@dividend
  8149  002A2A  0101               	movlb	1	; () banked
  8150  002A2C  6B54               	clrf	(___awdiv@dividend+1)& (0+255),b
  8151  002A2E  0E00               	movlw	0
  8152  002A30  0101               	movlb	1	; () banked
  8153  002A32  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  8154  002A34  0E64               	movlw	100
  8155  002A36  6F55               	movwf	___awdiv@divisor& (0+255),b
  8156  002A38  ECCD  F012         	call	___awdiv	;wreg free
  8157  002A3C  0101               	movlb	1	; () banked
  8158  002A3E  5153               	movf	?___awdiv& (0+255),w,b
  8159  002A40  0100               	movlb	0	; () banked
  8160  002A42  6FFD               	movwf	Update_Setup_Heater_Screen@dc_char1& (0+255),b
  8161                           
  8162                           ;Setup_Heater_Temp.c: 102: char dc_char2 = (setup_heater_set_temp%100)/10;
  8163  002A44  0E00               	movlw	0
  8164  002A46  6E3E               	movwf	___awmod@divisor+1,c
  8165  002A48  0E64               	movlw	100
  8166  002A4A  6E3D               	movwf	___awmod@divisor,c
  8167  002A4C  C068  F03B         	movff	_setup_heater_set_temp,___awmod@dividend
  8168  002A50  6A3C               	clrf	___awmod@dividend+1,c
  8169  002A52  EC63  F017         	call	___awmod	;wreg free
  8170  002A56  C03B  F153         	movff	?___awmod,___awdiv@dividend
  8171  002A5A  C03C  F154         	movff	?___awmod+1,___awdiv@dividend+1
  8172  002A5E  0E00               	movlw	0
  8173  002A60  0101               	movlb	1	; () banked
  8174  002A62  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
  8175  002A64  0E0A               	movlw	10
  8176  002A66  6F55               	movwf	___awdiv@divisor& (0+255),b
  8177  002A68  ECCD  F012         	call	___awdiv	;wreg free
  8178  002A6C  0101               	movlb	1	; () banked
  8179  002A6E  5153               	movf	?___awdiv& (0+255),w,b
  8180  002A70  0100               	movlb	0	; () banked
  8181  002A72  6FFE               	movwf	Update_Setup_Heater_Screen@dc_char2& (0+255),b
  8182                           
  8183                           ;Setup_Heater_Temp.c: 103: char dc_char3 = (setup_heater_set_temp%10);
  8184  002A74  C068  F03B         	movff	_setup_heater_set_temp,___awmod@dividend
  8185  002A78  6A3C               	clrf	___awmod@dividend+1,c
  8186  002A7A  0E00               	movlw	0
  8187  002A7C  6E3E               	movwf	___awmod@divisor+1,c
  8188  002A7E  0E0A               	movlw	10
  8189  002A80  6E3D               	movwf	___awmod@divisor,c
  8190  002A82  EC63  F017         	call	___awmod	;wreg free
  8191  002A86  503B               	movf	?___awmod,w,c
  8192  002A88  0100               	movlb	0	; () banked
  8193  002A8A  6FFF               	movwf	Update_Setup_Heater_Screen@dc_char3& (0+255),b
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;Setup_Heater_Temp.c: 104: setup_heater_set_text[0] = dc_char1 + '0';
  8197  002A8C  0100               	movlb	0	; () banked
  8198  002A8E  51FD               	movf	Update_Setup_Heater_Screen@dc_char1& (0+255),w,b
  8199  002A90  0F30               	addlw	48
  8200  002A92  0100               	movlb	0	; () banked
  8201  002A94  6FC8               	movwf	_setup_heater_set_text& (0+255),b
  8202                           
  8203                           ; BSR set to: 0
  8204                           ;Setup_Heater_Temp.c: 105: setup_heater_set_text[1] = dc_char2 + '0';
  8205  002A96  0100               	movlb	0	; () banked
  8206  002A98  51FE               	movf	Update_Setup_Heater_Screen@dc_char2& (0+255),w,b
  8207  002A9A  0F30               	addlw	48
  8208  002A9C  0100               	movlb	0	; () banked
  8209  002A9E  6FC9               	movwf	(_setup_heater_set_text+1)& (0+255),b
  8210                           
  8211                           ; BSR set to: 0
  8212                           ;Setup_Heater_Temp.c: 106: setup_heater_set_text[2] = dc_char3 + '0';
  8213  002AA0  0100               	movlb	0	; () banked
  8214  002AA2  51FF               	movf	Update_Setup_Heater_Screen@dc_char3& (0+255),w,b
  8215  002AA4  0F30               	addlw	48
  8216  002AA6  0100               	movlb	0	; () banked
  8217  002AA8  6FCA               	movwf	(_setup_heater_set_text+2)& (0+255),b
  8218                           
  8219                           ; BSR set to: 0
  8220                           ;Setup_Heater_Temp.c: 107: drawtext(40, 74 ,setup_heater_set_text, 0xF800, 0x0000, 2);
  8221  002AAA  0E4A               	movlw	74
  8222  002AAC  6E39               	movwf	drawtext@y,c
  8223  002AAE  0EC8               	movlw	low _setup_heater_set_text
  8224  002AB0  6E3A               	movwf	drawtext@_text,c
  8225  002AB2  0E00               	movlw	high _setup_heater_set_text
  8226  002AB4  6E3B               	movwf	drawtext@_text+1,c
  8227  002AB6  0EF8               	movlw	248
  8228  002AB8  6E3D               	movwf	drawtext@color+1,c
  8229  002ABA  0E00               	movlw	0
  8230  002ABC  6E3C               	movwf	drawtext@color,c
  8231  002ABE  0E00               	movlw	0
  8232  002AC0  6E3F               	movwf	drawtext@bg+1,c
  8233  002AC2  0E00               	movlw	0
  8234  002AC4  6E3E               	movwf	drawtext@bg,c
  8235  002AC6  0E02               	movlw	2
  8236  002AC8  6E40               	movwf	drawtext@size,c
  8237  002ACA  0E28               	movlw	40
  8238  002ACC  EC99  F00D         	call	_drawtext
  8239  002AD0  0012               	return		;funcret
  8240  002AD2                     __end_of_Update_Setup_Heater_Screen:
  8241                           	opt stack 0
  8242                           tblptru	equ	0xFF8
  8243                           tblptrh	equ	0xFF7
  8244                           tblptrl	equ	0xFF6
  8245                           tablat	equ	0xFF5
  8246                           prodh	equ	0xFF4
  8247                           prodl	equ	0xFF3
  8248                           postinc0	equ	0xFEE
  8249                           wreg	equ	0xFE8
  8250                           postdec1	equ	0xFE5
  8251                           plusw1	equ	0xFE3
  8252                           fsr1l	equ	0xFE1
  8253                           indf2	equ	0xFDF
  8254                           plusw2	equ	0xFDB
  8255                           fsr2h	equ	0xFDA
  8256                           fsr2l	equ	0xFD9
  8257                           status	equ	0xFD8
  8258                           
  8259 ;; *************** function _Do_Setup_Alarm_Time *****************
  8260 ;; Defined at:
  8261 ;;		line 24 in file "Setup_Alarm_Time.c"
  8262 ;; Parameters:    Size  Location     Type
  8263 ;;		None
  8264 ;; Auto vars:     Size  Location     Type
  8265 ;;		None
  8266 ;; Return value:  Size  Location     Type
  8267 ;;                  2  414[None  ] int 
  8268 ;; Registers used:
  8269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8270 ;; Tracked objects:
  8271 ;;		On entry : 0/0
  8272 ;;		On exit  : 0/0
  8273 ;;		Unchanged: 0/0
  8274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8279 ;;Total ram usage:        0 bytes
  8280 ;; Hardware stack levels used:    1
  8281 ;; Hardware stack levels required when called:   12
  8282 ;; This function calls:
  8283 ;;		_DS3231_Read_Alarm_Time
  8284 ;;		_Decrease_Alarm_Time
  8285 ;;		_Do_Beep_Bad
  8286 ;;		_Do_Beep_Good
  8287 ;;		_Do_Save_New_Alarm_Time
  8288 ;;		_Exit_Setup_Alarm_Time
  8289 ;;		_Go_Next_Alarm_Field
  8290 ;;		_Go_Prev_Alarm_Field
  8291 ;;		_Increase_Alarm_Time
  8292 ;;		_Initialize_Setup_Alarm_Time_Screen
  8293 ;;		_Update_Setup_Alarm_Time_Screen
  8294 ;;		_bcd_2_dec
  8295 ;;		_check_for_button_input
  8296 ;; This function is called by:
  8297 ;;		_main
  8298 ;; This function uses a non-reentrant model
  8299 ;;
  8300                           
  8301                           	psect	text38
  8302  0027FA                     __ptext38:
  8303                           	opt stack 0
  8304  0027FA                     _Do_Setup_Alarm_Time:
  8305                           	opt stack 18
  8306                           
  8307                           ;Setup_Alarm_Time.c: 26: Select_Alarm_Field = 0;
  8308                           
  8309                           ;incstack = 0
  8310  0027FA  0E00               	movlw	0
  8311  0027FC  6E53               	movwf	_Select_Alarm_Field,c
  8312                           
  8313                           ;Setup_Alarm_Time.c: 27: In_Alarm_Time_Setup = 1;
  8314  0027FE  0E01               	movlw	1
  8315  002800  0100               	movlb	0	; () banked
  8316  002802  6FF8               	movwf	_In_Alarm_Time_Setup& (0+255),b
  8317                           
  8318                           ; BSR set to: 0
  8319                           ;Setup_Alarm_Time.c: 28: DS3231_Read_Alarm_Time();
  8320  002804  EC5A  F01B         	call	_DS3231_Read_Alarm_Time	;wreg free
  8321                           
  8322                           ;Setup_Alarm_Time.c: 29: alarm_second = bcd_2_dec(alarm_second);
  8323  002808  5059               	movf	_alarm_second,w,c
  8324  00280A  ECF5  F01C         	call	_bcd_2_dec
  8325  00280E  6E59               	movwf	_alarm_second,c
  8326                           
  8327                           ;Setup_Alarm_Time.c: 30: alarm_minute = bcd_2_dec(alarm_minute);
  8328  002810  5058               	movf	_alarm_minute,w,c
  8329  002812  ECF5  F01C         	call	_bcd_2_dec
  8330  002816  6E58               	movwf	_alarm_minute,c
  8331                           
  8332                           ;Setup_Alarm_Time.c: 31: alarm_hour = bcd_2_dec(alarm_hour);
  8333  002818  5057               	movf	_alarm_hour,w,c
  8334  00281A  ECF5  F01C         	call	_bcd_2_dec
  8335  00281E  6E57               	movwf	_alarm_hour,c
  8336                           
  8337                           ;Setup_Alarm_Time.c: 32: setup_alarm_second = alarm_second;
  8338  002820  C059  F066         	movff	_alarm_second,_setup_alarm_second
  8339                           
  8340                           ;Setup_Alarm_Time.c: 33: setup_alarm_minute = alarm_minute;
  8341  002824  C058  F065         	movff	_alarm_minute,_setup_alarm_minute
  8342                           
  8343                           ;Setup_Alarm_Time.c: 34: setup_alarm_hour = alarm_hour;
  8344  002828  C057  F064         	movff	_alarm_hour,_setup_alarm_hour
  8345                           
  8346                           ;Setup_Alarm_Time.c: 35: Initialize_Setup_Alarm_Time_Screen();
  8347  00282C  ECA6  F00E         	call	_Initialize_Setup_Alarm_Time_Screen	;wreg free
  8348                           
  8349                           ;Setup_Alarm_Time.c: 36: Update_Setup_Alarm_Time_Screen();
  8350  002830  EC9A  F010         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  8351                           
  8352                           ;Setup_Alarm_Time.c: 37: while (In_Alarm_Time_Setup == 1)
  8353  002834  D03C               	goto	l9911
  8354  002836                     l9875:
  8355                           
  8356                           ;Setup_Alarm_Time.c: 38: {
  8357                           ;Setup_Alarm_Time.c: 39: if (check_for_button_input() == 1)
  8358  002836  ECA4  F017         	call	_check_for_button_input	;wreg free
  8359  00283A  06E8               	decf	wreg,f,c
  8360  00283C  A4D8               	btfss	status,2,c
  8361  00283E  D037               	goto	l9911
  8362                           
  8363                           ;Setup_Alarm_Time.c: 40: {
  8364                           ;Setup_Alarm_Time.c: 41: if (found >= 3 && found <= 8)
  8365  002840  0E02               	movlw	2
  8366  002842  645E               	cpfsgt	_found,c
  8367  002844  D031               	goto	l9909
  8368  002846  0E09               	movlw	9
  8369  002848  605E               	cpfslt	_found,c
  8370  00284A  D02E               	goto	l9909
  8371                           
  8372                           ;Setup_Alarm_Time.c: 42: {
  8373                           ;Setup_Alarm_Time.c: 43: Do_Beep_Good();
  8374  00284C  EC60  F01E         	call	_Do_Beep_Good	;wreg free
  8375                           
  8376                           ;Setup_Alarm_Time.c: 44: if (found == 3) Go_Prev_Alarm_Field();
  8377  002850  0E03               	movlw	3
  8378  002852  185E               	xorwf	_found,w,c
  8379  002854  A4D8               	btfss	status,2,c
  8380  002856  D003               	goto	l9887
  8381  002858  ECFF  F01D         	call	_Go_Prev_Alarm_Field	;wreg free
  8382  00285C  D023               	goto	l9907
  8383  00285E                     l9887:
  8384                           
  8385                           ;Setup_Alarm_Time.c: 45: else if (found == 4)
  8386  00285E  0E04               	movlw	4
  8387  002860  185E               	xorwf	_found,w,c
  8388  002862  A4D8               	btfss	status,2,c
  8389  002864  D003               	goto	l9891
  8390                           
  8391                           ;Setup_Alarm_Time.c: 46: Go_Next_Alarm_Field();
  8392  002866  EC0B  F01E         	call	_Go_Next_Alarm_Field	;wreg free
  8393  00286A  D01C               	goto	l9907
  8394  00286C                     l9891:
  8395                           
  8396                           ;Setup_Alarm_Time.c: 47: else if (found == 5)
  8397  00286C  0E05               	movlw	5
  8398  00286E  185E               	xorwf	_found,w,c
  8399  002870  A4D8               	btfss	status,2,c
  8400  002872  D003               	goto	l9895
  8401                           
  8402                           ;Setup_Alarm_Time.c: 48: Do_Save_New_Alarm_Time();
  8403  002874  EC17  F01E         	call	_Do_Save_New_Alarm_Time	;wreg free
  8404  002878  D015               	goto	l9907
  8405  00287A                     l9895:
  8406                           
  8407                           ;Setup_Alarm_Time.c: 49: else if (found == 6)
  8408  00287A  0E06               	movlw	6
  8409  00287C  185E               	xorwf	_found,w,c
  8410  00287E  A4D8               	btfss	status,2,c
  8411  002880  D003               	goto	l9899
  8412                           
  8413                           ;Setup_Alarm_Time.c: 50: Decrease_Alarm_Time();
  8414  002882  EC0C  F01B         	call	_Decrease_Alarm_Time	;wreg free
  8415  002886  D00E               	goto	l9907
  8416  002888                     l9899:
  8417                           
  8418                           ;Setup_Alarm_Time.c: 51: else if (found == 7)
  8419  002888  0E07               	movlw	7
  8420  00288A  185E               	xorwf	_found,w,c
  8421  00288C  A4D8               	btfss	status,2,c
  8422  00288E  D003               	goto	l9903
  8423                           
  8424                           ;Setup_Alarm_Time.c: 52: Increase_Alarm_Time();
  8425  002890  ECE5  F01A         	call	_Increase_Alarm_Time	;wreg free
  8426  002894  D007               	goto	l9907
  8427  002896                     l9903:
  8428                           
  8429                           ;Setup_Alarm_Time.c: 53: else if (found == 8)
  8430  002896  0E08               	movlw	8
  8431  002898  185E               	xorwf	_found,w,c
  8432  00289A  A4D8               	btfss	status,2,c
  8433  00289C  D003               	goto	l9907
  8434                           
  8435                           ;Setup_Alarm_Time.c: 54: Exit_Setup_Alarm_Time();
  8436  00289E  EC56  F01E         	call	_Exit_Setup_Alarm_Time	;wreg free
  8437  0028A2  D000               	goto	l9907
  8438  0028A4                     l9907:
  8439                           
  8440                           ;Setup_Alarm_Time.c: 55: found = 0xff;
  8441  0028A4  685E               	setf	_found,c
  8442                           
  8443                           ;Setup_Alarm_Time.c: 56: }
  8444  0028A6  D003               	goto	l9911
  8445  0028A8                     l9909:
  8446                           
  8447                           ;Setup_Alarm_Time.c: 57: else
  8448                           ;Setup_Alarm_Time.c: 58: {
  8449                           ;Setup_Alarm_Time.c: 59: Do_Beep_Bad();
  8450  0028A8  EC6A  F01E         	call	_Do_Beep_Bad	;wreg free
  8451  0028AC  D000               	goto	l9911
  8452  0028AE                     l9911:
  8453  0028AE  0100               	movlb	0	; () banked
  8454  0028B0  05F8               	decf	_In_Alarm_Time_Setup& (0+255),w,b
  8455  0028B2  B4D8               	btfsc	status,2,c
  8456  0028B4  D7C0               	goto	l9875
  8457                           
  8458                           ; BSR set to: 0
  8459                           
  8460                           ; BSR set to: 0
  8461  0028B6  0012               	return		;funcret
  8462  0028B8                     __end_of_Do_Setup_Alarm_Time:
  8463                           	opt stack 0
  8464                           tblptru	equ	0xFF8
  8465                           tblptrh	equ	0xFF7
  8466                           tblptrl	equ	0xFF6
  8467                           tablat	equ	0xFF5
  8468                           prodh	equ	0xFF4
  8469                           prodl	equ	0xFF3
  8470                           postinc0	equ	0xFEE
  8471                           wreg	equ	0xFE8
  8472                           postdec1	equ	0xFE5
  8473                           plusw1	equ	0xFE3
  8474                           fsr1l	equ	0xFE1
  8475                           indf2	equ	0xFDF
  8476                           plusw2	equ	0xFDB
  8477                           fsr2h	equ	0xFDA
  8478                           fsr2l	equ	0xFD9
  8479                           status	equ	0xFD8
  8480                           
  8481 ;; *************** function _check_for_button_input *****************
  8482 ;; Defined at:
  8483 ;;		line 15 in file "utils.c"
  8484 ;; Parameters:    Size  Location     Type
  8485 ;;		None
  8486 ;; Auto vars:     Size  Location     Type
  8487 ;;  j               2   57[COMRAM] int 
  8488 ;; Return value:  Size  Location     Type
  8489 ;;                  1    wreg      unsigned char 
  8490 ;; Registers used:
  8491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8492 ;; Tracked objects:
  8493 ;;		On entry : 0/0
  8494 ;;		On exit  : 0/0
  8495 ;;		Unchanged: 0/0
  8496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8498 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8499 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8500 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8501 ;;Total ram usage:        3 bytes
  8502 ;; Hardware stack levels used:    1
  8503 ;; Hardware stack levels required when called:    5
  8504 ;; This function calls:
  8505 ;;		_printf
  8506 ;; This function is called by:
  8507 ;;		_main
  8508 ;;		_Do_Setup_Alarm_Time
  8509 ;;		_Do_Setup_Heater_Temp
  8510 ;;		_Do_Setup_Time
  8511 ;; This function uses a non-reentrant model
  8512 ;;
  8513                           
  8514                           	psect	text39
  8515  002F48                     __ptext39:
  8516                           	opt stack 0
  8517  002F48                     _check_for_button_input:
  8518                           	opt stack 25
  8519                           
  8520                           ;utils.c: 17: if (nec_ok == 1)
  8521                           
  8522                           ; BSR set to: 0
  8523                           ;incstack = 0
  8524  002F48  0100               	movlb	0	; () banked
  8525  002F4A  05F2               	decf	_nec_ok& (0+255),w,b
  8526  002F4C  0100               	movlb	0	; () banked
  8527  002F4E  11F3               	iorwf	(_nec_ok+1)& (0+255),w,b
  8528  002F50  A4D8               	btfss	status,2,c
  8529  002F52  D038               	goto	l1353
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;utils.c: 18: {
  8533                           ;utils.c: 19: nec_ok = 0;
  8534  002F54  0E00               	movlw	0
  8535  002F56  0100               	movlb	0	; () banked
  8536  002F58  6FF3               	movwf	(_nec_ok+1)& (0+255),b
  8537  002F5A  0E00               	movlw	0
  8538  002F5C  6FF2               	movwf	_nec_ok& (0+255),b
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;utils.c: 21: INTCONbits.INT0IE = 1;
  8542  002F5E  88F2               	bsf	intcon,4,c	;volatile
  8543                           
  8544                           ; BSR set to: 0
  8545                           ;utils.c: 22: INTCON2bits.INTEDG0 = 0;
  8546  002F60  9CF1               	bcf	intcon2,6,c	;volatile
  8547                           
  8548                           ; BSR set to: 0
  8549                           ;utils.c: 24: found = 0xff;
  8550  002F62  685E               	setf	_found,c
  8551                           
  8552                           ;utils.c: 25: for (int j=0; j< 21; j++)
  8553  002F64  0E00               	movlw	0
  8554  002F66  6E3B               	movwf	check_for_button_input@j+1,c
  8555  002F68  0E00               	movlw	0
  8556  002F6A  6E3A               	movwf	check_for_button_input@j,c
  8557  002F6C                     l9163:
  8558                           
  8559                           ; BSR set to: 0
  8560  002F6C  BE3B               	btfsc	check_for_button_input@j+1,7,c
  8561  002F6E  D008               	goto	l9167
  8562  002F70  503B               	movf	check_for_button_input@j+1,w,c
  8563  002F72  E11B               	bnz	l9177
  8564  002F74  0E15               	movlw	21
  8565  002F76  5C3A               	subwf	check_for_button_input@j,w,c
  8566  002F78  B0D8               	btfsc	status,0,c
  8567  002F7A  D017               	goto	l9177
  8568  002F7C  D001               	goto	l9167
  8569                           
  8570                           ; BSR set to: 0
  8571  002F7E  D015               	goto	l9177
  8572  002F80                     l9167:
  8573                           
  8574                           ;utils.c: 26: {
  8575                           ;utils.c: 27: if (Nec_code1 == array1[j])
  8576  002F80  0E1F               	movlw	low _array1
  8577  002F82  243A               	addwf	check_for_button_input@j,w,c
  8578  002F84  6ED9               	movwf	fsr2l,c
  8579  002F86  0E01               	movlw	high _array1
  8580  002F88  203B               	addwfc	check_for_button_input@j+1,w,c
  8581  002F8A  6EDA               	movwf	fsr2h,c
  8582  002F8C  5051               	movf	_Nec_code1,w,c
  8583  002F8E  18DE               	xorwf	postinc2,w,c
  8584  002F90  A4D8               	btfss	status,2,c
  8585  002F92  D007               	goto	l9173
  8586                           
  8587                           ;utils.c: 28: {
  8588                           ;utils.c: 29: found = j;
  8589  002F94  C03A  F05E         	movff	check_for_button_input@j,_found
  8590                           
  8591                           ;utils.c: 30: j = 21;
  8592  002F98  0E00               	movlw	0
  8593  002F9A  6E3B               	movwf	check_for_button_input@j+1,c
  8594  002F9C  0E15               	movlw	21
  8595  002F9E  6E3A               	movwf	check_for_button_input@j,c
  8596  002FA0  D000               	goto	l9173
  8597  002FA2                     l9173:
  8598  002FA2  4A3A               	infsnz	check_for_button_input@j,f,c
  8599  002FA4  2A3B               	incf	check_for_button_input@j+1,f,c
  8600  002FA6  D7E2               	goto	l9163
  8601  002FA8  D000               	goto	l9177
  8602  002FAA                     l9177:
  8603                           
  8604                           ;utils.c: 31: }
  8605                           ;utils.c: 32: }
  8606                           ;utils.c: 34: if (found == 0xff)
  8607  002FAA  285E               	incf	_found,w,c
  8608  002FAC  A4D8               	btfss	status,2,c
  8609  002FAE  D008               	goto	l9187
  8610                           
  8611                           ;utils.c: 35: {
  8612                           ;utils.c: 36: printf ("Cannot find button \r\n");
  8613  002FB0  0EEC               	movlw	low STR_36
  8614  002FB2  6E1D               	movwf	printf@f,c
  8615  002FB4  0EFE               	movlw	high STR_36
  8616  002FB6  6E1E               	movwf	printf@f+1,c
  8617  002FB8  EC03  F005         	call	_printf	;wreg free
  8618                           
  8619                           ;utils.c: 37: return (0);
  8620  002FBC  0E00               	movlw	0
  8621                           
  8622                           ;utils.c: 38: }
  8623  002FBE  D002               	goto	l1353
  8624  002FC0                     l9187:
  8625                           
  8626                           ;utils.c: 39: else
  8627                           ;utils.c: 40: {
  8628                           ;utils.c: 41: return (1);
  8629  002FC0  0E01               	movlw	1
  8630  002FC2  D000               	goto	l1353
  8631  002FC4                     l1353:
  8632  002FC4  0012               	return		;funcret
  8633  002FC6                     __end_of_check_for_button_input:
  8634                           	opt stack 0
  8635                           tblptru	equ	0xFF8
  8636                           tblptrh	equ	0xFF7
  8637                           tblptrl	equ	0xFF6
  8638                           tablat	equ	0xFF5
  8639                           prodh	equ	0xFF4
  8640                           prodl	equ	0xFF3
  8641                           intcon	equ	0xFF2
  8642                           intcon2	equ	0xFF1
  8643                           postinc0	equ	0xFEE
  8644                           wreg	equ	0xFE8
  8645                           postdec1	equ	0xFE5
  8646                           plusw1	equ	0xFE3
  8647                           fsr1l	equ	0xFE1
  8648                           indf2	equ	0xFDF
  8649                           postinc2	equ	0xFDE
  8650                           plusw2	equ	0xFDB
  8651                           fsr2h	equ	0xFDA
  8652                           fsr2l	equ	0xFD9
  8653                           status	equ	0xFD8
  8654                           
  8655 ;; *************** function _bcd_2_dec *****************
  8656 ;; Defined at:
  8657 ;;		line 46 in file "utils.c"
  8658 ;; Parameters:    Size  Location     Type
  8659 ;;  bcd             1    wreg     unsigned char 
  8660 ;; Auto vars:     Size  Location     Type
  8661 ;;  bcd             1   20[COMRAM] unsigned char 
  8662 ;;  dec             2   18[COMRAM] int 
  8663 ;; Return value:  Size  Location     Type
  8664 ;;                  1    wreg      unsigned char 
  8665 ;; Registers used:
  8666 ;;		wreg, status,2, status,0, prodl, prodh
  8667 ;; Tracked objects:
  8668 ;;		On entry : 0/0
  8669 ;;		On exit  : 0/0
  8670 ;;		Unchanged: 0/0
  8671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8673 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8674 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8675 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8676 ;;Total ram usage:        5 bytes
  8677 ;; Hardware stack levels used:    1
  8678 ;; Hardware stack levels required when called:    3
  8679 ;; This function calls:
  8680 ;;		Nothing
  8681 ;; This function is called by:
  8682 ;;		_Do_Setup_Alarm_Time
  8683 ;;		_Do_Setup_Time
  8684 ;; This function uses a non-reentrant model
  8685 ;;
  8686                           
  8687                           	psect	text40
  8688  0039EA                     __ptext40:
  8689                           	opt stack 0
  8690  0039EA                     _bcd_2_dec:
  8691                           	opt stack 26
  8692                           
  8693                           ;incstack = 0
  8694                           ;bcd_2_dec@bcd stored from wreg
  8695  0039EA  6E15               	movwf	bcd_2_dec@bcd,c
  8696                           
  8697                           ;utils.c: 48: int dec;
  8698                           ;utils.c: 49: dec = ((bcd>> 4) * 10) + (bcd & 0x0f);
  8699  0039EC  C015  F011         	movff	bcd_2_dec@bcd,??_bcd_2_dec
  8700  0039F0  0E0F               	movlw	15
  8701  0039F2  1611               	andwf	??_bcd_2_dec,f,c
  8702  0039F4  C015  F012         	movff	bcd_2_dec@bcd,??_bcd_2_dec+1
  8703  0039F8  3A12               	swapf	??_bcd_2_dec+1,f,c
  8704  0039FA  0E0F               	movlw	15
  8705  0039FC  1612               	andwf	??_bcd_2_dec+1,f,c
  8706  0039FE  5012               	movf	??_bcd_2_dec+1,w,c
  8707  003A00  0D0A               	mullw	10
  8708  003A02  5011               	movf	??_bcd_2_dec,w,c
  8709  003A04  24F3               	addwf	prodl,w,c
  8710  003A06  6E13               	movwf	bcd_2_dec@dec,c
  8711  003A08  0E00               	movlw	0
  8712  003A0A  20F4               	addwfc	prodh,w,c
  8713  003A0C  6E14               	movwf	bcd_2_dec@dec+1,c
  8714                           
  8715                           ;utils.c: 50: return dec;
  8716  003A0E  5013               	movf	bcd_2_dec@dec,w,c
  8717  003A10  D000               	goto	l1357
  8718  003A12                     l1357:
  8719  003A12  0012               	return		;funcret
  8720  003A14                     __end_of_bcd_2_dec:
  8721                           	opt stack 0
  8722                           tblptru	equ	0xFF8
  8723                           tblptrh	equ	0xFF7
  8724                           tblptrl	equ	0xFF6
  8725                           tablat	equ	0xFF5
  8726                           prodh	equ	0xFF4
  8727                           prodl	equ	0xFF3
  8728                           intcon	equ	0xFF2
  8729                           intcon2	equ	0xFF1
  8730                           postinc0	equ	0xFEE
  8731                           wreg	equ	0xFE8
  8732                           postdec1	equ	0xFE5
  8733                           plusw1	equ	0xFE3
  8734                           fsr1l	equ	0xFE1
  8735                           indf2	equ	0xFDF
  8736                           postinc2	equ	0xFDE
  8737                           plusw2	equ	0xFDB
  8738                           fsr2h	equ	0xFDA
  8739                           fsr2l	equ	0xFD9
  8740                           status	equ	0xFD8
  8741                           
  8742 ;; *************** function _Initialize_Setup_Alarm_Time_Screen *****************
  8743 ;; Defined at:
  8744 ;;		line 146 in file "Setup_Alarm_Time.c"
  8745 ;; Parameters:    Size  Location     Type
  8746 ;;		None
  8747 ;; Auto vars:     Size  Location     Type
  8748 ;;		None
  8749 ;; Return value:  Size  Location     Type
  8750 ;;		None               void
  8751 ;; Registers used:
  8752 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8753 ;; Tracked objects:
  8754 ;;		On entry : 0/0
  8755 ;;		On exit  : 0/0
  8756 ;;		Unchanged: 0/0
  8757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8762 ;;Total ram usage:        0 bytes
  8763 ;; Hardware stack levels used:    1
  8764 ;; Hardware stack levels required when called:   10
  8765 ;; This function calls:
  8766 ;;		_drawtext
  8767 ;;		_fillRect
  8768 ;;		_fillScreen
  8769 ;;		_strcpy
  8770 ;; This function is called by:
  8771 ;;		_Do_Setup_Alarm_Time
  8772 ;; This function uses a non-reentrant model
  8773 ;;
  8774                           
  8775                           	psect	text41
  8776  001D4C                     __ptext41:
  8777                           	opt stack 0
  8778  001D4C                     _Initialize_Setup_Alarm_Time_Screen:
  8779                           	opt stack 19
  8780                           
  8781                           ;Setup_Alarm_Time.c: 148: fillScreen(0x0000);
  8782                           
  8783                           ;incstack = 0
  8784  001D4C  0E00               	movlw	0
  8785  001D4E  6E25               	movwf	fillScreen@color+1,c
  8786  001D50  0E00               	movlw	0
  8787  001D52  6E24               	movwf	fillScreen@color,c
  8788  001D54  ECBE  F01D         	call	_fillScreen	;wreg free
  8789                           
  8790                           ;Setup_Alarm_Time.c: 150: strcpy(txt, "ECE3301L F'22 S4");
  8791  001D58  C04E  F011         	movff	_txt,strcpy@to
  8792  001D5C  C04F  F012         	movff	_txt+1,strcpy@to+1
  8793  001D60  0E4E               	movlw	low STR_23
  8794  001D62  6E13               	movwf	strcpy@from,c
  8795  001D64  0EFF               	movlw	high STR_23
  8796  001D66  6E14               	movwf	strcpy@from+1,c
  8797  001D68  ECC4  F01C         	call	_strcpy	;wreg free
  8798                           
  8799                           ;Setup_Alarm_Time.c: 151: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  8800  001D6C  0E01               	movlw	1
  8801  001D6E  6E39               	movwf	drawtext@y,c
  8802  001D70  C04E  F03A         	movff	_txt,drawtext@_text
  8803  001D74  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  8804  001D78  0EFF               	movlw	255
  8805  001D7A  6E3D               	movwf	drawtext@color+1,c
  8806  001D7C  683C               	setf	drawtext@color,c
  8807  001D7E  0E00               	movlw	0
  8808  001D80  6E3F               	movwf	drawtext@bg+1,c
  8809  001D82  0E00               	movlw	0
  8810  001D84  6E3E               	movwf	drawtext@bg,c
  8811  001D86  0E01               	movlw	1
  8812  001D88  6E40               	movwf	drawtext@size,c
  8813  001D8A  0E01               	movlw	1
  8814  001D8C  EC99  F00D         	call	_drawtext
  8815                           
  8816                           ;Setup_Alarm_Time.c: 154: strcpy(txt, "  Alarm");
  8817  001D90  C04E  F011         	movff	_txt,strcpy@to
  8818  001D94  C04F  F012         	movff	_txt+1,strcpy@to+1
  8819  001D98  0EC9               	movlw	low STR_24
  8820  001D9A  6E13               	movwf	strcpy@from,c
  8821  001D9C  0EFF               	movlw	high STR_24
  8822  001D9E  6E14               	movwf	strcpy@from+1,c
  8823  001DA0  ECC4  F01C         	call	_strcpy	;wreg free
  8824                           
  8825                           ;Setup_Alarm_Time.c: 155: drawtext(1+5 , 1+10, txt, 0xF81F, 0x0000, 2);
  8826  001DA4  0E0B               	movlw	11
  8827  001DA6  6E39               	movwf	drawtext@y,c
  8828  001DA8  C04E  F03A         	movff	_txt,drawtext@_text
  8829  001DAC  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  8830  001DB0  0EF8               	movlw	248
  8831  001DB2  6E3D               	movwf	drawtext@color+1,c
  8832  001DB4  0E1F               	movlw	31
  8833  001DB6  6E3C               	movwf	drawtext@color,c
  8834  001DB8  0E00               	movlw	0
  8835  001DBA  6E3F               	movwf	drawtext@bg+1,c
  8836  001DBC  0E00               	movlw	0
  8837  001DBE  6E3E               	movwf	drawtext@bg,c
  8838  001DC0  0E02               	movlw	2
  8839  001DC2  6E40               	movwf	drawtext@size,c
  8840  001DC4  0E06               	movlw	6
  8841  001DC6  EC99  F00D         	call	_drawtext
  8842                           
  8843                           ;Setup_Alarm_Time.c: 156: strcpy(txt, "  Setup");
  8844  001DCA  C04E  F011         	movff	_txt,strcpy@to
  8845  001DCE  C04F  F012         	movff	_txt+1,strcpy@to+1
  8846  001DD2  0ED1               	movlw	low STR_25
  8847  001DD4  6E13               	movwf	strcpy@from,c
  8848  001DD6  0EFF               	movlw	high STR_25
  8849  001DD8  6E14               	movwf	strcpy@from+1,c
  8850  001DDA  ECC4  F01C         	call	_strcpy	;wreg free
  8851                           
  8852                           ;Setup_Alarm_Time.c: 157: drawtext(1+5 , 1+25, txt, 0xF81F, 0x0000, 2);
  8853  001DDE  0E1A               	movlw	26
  8854  001DE0  6E39               	movwf	drawtext@y,c
  8855  001DE2  C04E  F03A         	movff	_txt,drawtext@_text
  8856  001DE6  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  8857  001DEA  0EF8               	movlw	248
  8858  001DEC  6E3D               	movwf	drawtext@color+1,c
  8859  001DEE  0E1F               	movlw	31
  8860  001DF0  6E3C               	movwf	drawtext@color,c
  8861  001DF2  0E00               	movlw	0
  8862  001DF4  6E3F               	movwf	drawtext@bg+1,c
  8863  001DF6  0E00               	movlw	0
  8864  001DF8  6E3E               	movwf	drawtext@bg,c
  8865  001DFA  0E02               	movlw	2
  8866  001DFC  6E40               	movwf	drawtext@size,c
  8867  001DFE  0E06               	movlw	6
  8868  001E00  EC99  F00D         	call	_drawtext
  8869                           
  8870                           ;Setup_Alarm_Time.c: 159: strcpy(txt, "Time");
  8871  001E04  C04E  F011         	movff	_txt,strcpy@to
  8872  001E08  C04F  F012         	movff	_txt+1,strcpy@to+1
  8873  001E0C  0EB1               	movlw	low (STR_11+6)
  8874  001E0E  6E13               	movwf	strcpy@from,c
  8875  001E10  0EFF               	movlw	high (STR_11+6)
  8876  001E12  6E14               	movwf	strcpy@from+1,c
  8877  001E14  ECC4  F01C         	call	_strcpy	;wreg free
  8878                           
  8879                           ;Setup_Alarm_Time.c: 160: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  8880  001E18  0E28               	movlw	40
  8881  001E1A  6E39               	movwf	drawtext@y,c
  8882  001E1C  C04E  F03A         	movff	_txt,drawtext@_text
  8883  001E20  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  8884  001E24  0E00               	movlw	0
  8885  001E26  6E3D               	movwf	drawtext@color+1,c
  8886  001E28  0E1F               	movlw	31
  8887  001E2A  6E3C               	movwf	drawtext@color,c
  8888  001E2C  0E00               	movlw	0
  8889  001E2E  6E3F               	movwf	drawtext@bg+1,c
  8890  001E30  0E00               	movlw	0
  8891  001E32  6E3E               	movwf	drawtext@bg,c
  8892  001E34  0E01               	movlw	1
  8893  001E36  6E40               	movwf	drawtext@size,c
  8894  001E38  0E32               	movlw	50
  8895  001E3A  EC99  F00D         	call	_drawtext
  8896                           
  8897                           ;Setup_Alarm_Time.c: 161: fillRect(15-1, 52+16, 25,2,0x07FF);
  8898  001E3E  0E44               	movlw	68
  8899  001E40  6E23               	movwf	fillRect@y,c
  8900  001E42  0E19               	movlw	25
  8901  001E44  6E24               	movwf	fillRect@w,c
  8902  001E46  0E02               	movlw	2
  8903  001E48  6E25               	movwf	fillRect@h,c
  8904  001E4A  0E07               	movlw	7
  8905  001E4C  6E27               	movwf	fillRect@color+1,c
  8906  001E4E  6826               	setf	fillRect@color,c
  8907  001E50  0E0E               	movlw	14
  8908  001E52  ECA6  F01B         	call	_fillRect
  8909  001E56  0012               	return		;funcret
  8910  001E58                     __end_of_Initialize_Setup_Alarm_Time_Screen:
  8911                           	opt stack 0
  8912                           tblptru	equ	0xFF8
  8913                           tblptrh	equ	0xFF7
  8914                           tblptrl	equ	0xFF6
  8915                           tablat	equ	0xFF5
  8916                           prodh	equ	0xFF4
  8917                           prodl	equ	0xFF3
  8918                           intcon	equ	0xFF2
  8919                           intcon2	equ	0xFF1
  8920                           postinc0	equ	0xFEE
  8921                           wreg	equ	0xFE8
  8922                           postdec1	equ	0xFE5
  8923                           plusw1	equ	0xFE3
  8924                           fsr1l	equ	0xFE1
  8925                           indf2	equ	0xFDF
  8926                           postinc2	equ	0xFDE
  8927                           plusw2	equ	0xFDB
  8928                           fsr2h	equ	0xFDA
  8929                           fsr2l	equ	0xFD9
  8930                           status	equ	0xFD8
  8931                           
  8932 ;; *************** function _Increase_Alarm_Time *****************
  8933 ;; Defined at:
  8934 ;;		line 65 in file "Setup_Alarm_Time.c"
  8935 ;; Parameters:    Size  Location     Type
  8936 ;;		None
  8937 ;; Auto vars:     Size  Location     Type
  8938 ;;		None
  8939 ;; Return value:  Size  Location     Type
  8940 ;;		None               void
  8941 ;; Registers used:
  8942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8943 ;; Tracked objects:
  8944 ;;		On entry : 0/0
  8945 ;;		On exit  : 0/0
  8946 ;;		Unchanged: 0/0
  8947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8952 ;;Total ram usage:        0 bytes
  8953 ;; Hardware stack levels used:    1
  8954 ;; Hardware stack levels required when called:   11
  8955 ;; This function calls:
  8956 ;;		_Update_Setup_Alarm_Time_Screen
  8957 ;; This function is called by:
  8958 ;;		_Do_Setup_Alarm_Time
  8959 ;; This function uses a non-reentrant model
  8960 ;;
  8961                           
  8962                           	psect	text42
  8963  0035CA                     __ptext42:
  8964                           	opt stack 0
  8965  0035CA                     _Increase_Alarm_Time:
  8966                           	opt stack 18
  8967                           
  8968                           ;Setup_Alarm_Time.c: 67: switch (Select_Alarm_Field)
  8969                           
  8970                           ;incstack = 0
  8971  0035CA  D018               	goto	l9291
  8972  0035CC                     l9271:
  8973                           
  8974                           ;Setup_Alarm_Time.c: 70: setup_alarm_hour++;
  8975  0035CC  2A64               	incf	_setup_alarm_hour,f,c
  8976                           
  8977                           ;Setup_Alarm_Time.c: 71: if (setup_alarm_hour == 24) setup_alarm_hour = 0;
  8978  0035CE  0E18               	movlw	24
  8979  0035D0  1864               	xorwf	_setup_alarm_hour,w,c
  8980  0035D2  A4D8               	btfss	status,2,c
  8981  0035D4  D01E               	goto	l9293
  8982  0035D6  0E00               	movlw	0
  8983  0035D8  6E64               	movwf	_setup_alarm_hour,c
  8984                           
  8985                           ;Setup_Alarm_Time.c: 72: break;
  8986  0035DA  D01B               	goto	l9293
  8987  0035DC                     l9277:
  8988                           
  8989                           ;Setup_Alarm_Time.c: 75: setup_alarm_minute++;
  8990  0035DC  2A65               	incf	_setup_alarm_minute,f,c
  8991                           
  8992                           ;Setup_Alarm_Time.c: 76: if (setup_alarm_minute == 60) setup_alarm_minute = 0;
  8993  0035DE  0E3C               	movlw	60
  8994  0035E0  1865               	xorwf	_setup_alarm_minute,w,c
  8995  0035E2  A4D8               	btfss	status,2,c
  8996  0035E4  D016               	goto	l9293
  8997  0035E6  0E00               	movlw	0
  8998  0035E8  6E65               	movwf	_setup_alarm_minute,c
  8999                           
  9000                           ;Setup_Alarm_Time.c: 77: break;
  9001  0035EA  D013               	goto	l9293
  9002  0035EC                     l9283:
  9003                           
  9004                           ;Setup_Alarm_Time.c: 80: setup_alarm_second++;
  9005  0035EC  2A66               	incf	_setup_alarm_second,f,c
  9006                           
  9007                           ;Setup_Alarm_Time.c: 81: if (setup_alarm_second == 60) setup_alarm_second = 0;
  9008  0035EE  0E3C               	movlw	60
  9009  0035F0  1866               	xorwf	_setup_alarm_second,w,c
  9010  0035F2  A4D8               	btfss	status,2,c
  9011  0035F4  D00E               	goto	l9293
  9012  0035F6  0E00               	movlw	0
  9013  0035F8  6E66               	movwf	_setup_alarm_second,c
  9014                           
  9015                           ;Setup_Alarm_Time.c: 86: }
  9016                           
  9017                           ;Setup_Alarm_Time.c: 85: break;
  9018                           
  9019                           ;Setup_Alarm_Time.c: 84: default:
  9020                           
  9021                           ;Setup_Alarm_Time.c: 82: break;
  9022  0035FA  D00B               	goto	l9293
  9023  0035FC                     l9291:
  9024  0035FC  5053               	movf	_Select_Alarm_Field,w,c
  9025                           
  9026                           ; Switch size 1, requested type "space"
  9027                           ; Number of cases is 3, Range of values is 0 to 2
  9028                           ; switch strategies available:
  9029                           ; Name         Instructions Cycles
  9030                           ; simple_byte           10     6 (average)
  9031                           ;	Chosen strategy is simple_byte
  9032  0035FE  0A00               	xorlw	0	; case 0
  9033  003600  B4D8               	btfsc	status,2,c
  9034  003602  D7E4               	goto	l9271
  9035  003604  0A01               	xorlw	1	; case 1
  9036  003606  B4D8               	btfsc	status,2,c
  9037  003608  D7E9               	goto	l9277
  9038  00360A  0A03               	xorlw	3	; case 2
  9039  00360C  B4D8               	btfsc	status,2,c
  9040  00360E  D7EE               	goto	l9283
  9041  003610  D000               	goto	l9293
  9042  003612                     l9293:
  9043                           
  9044                           ;Setup_Alarm_Time.c: 87: Update_Setup_Alarm_Time_Screen();
  9045  003612  EC9A  F010         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  9046  003616  0012               	return		;funcret
  9047  003618                     __end_of_Increase_Alarm_Time:
  9048                           	opt stack 0
  9049                           tblptru	equ	0xFF8
  9050                           tblptrh	equ	0xFF7
  9051                           tblptrl	equ	0xFF6
  9052                           tablat	equ	0xFF5
  9053                           prodh	equ	0xFF4
  9054                           prodl	equ	0xFF3
  9055                           intcon	equ	0xFF2
  9056                           intcon2	equ	0xFF1
  9057                           postinc0	equ	0xFEE
  9058                           wreg	equ	0xFE8
  9059                           postdec1	equ	0xFE5
  9060                           plusw1	equ	0xFE3
  9061                           fsr1l	equ	0xFE1
  9062                           indf2	equ	0xFDF
  9063                           postinc2	equ	0xFDE
  9064                           plusw2	equ	0xFDB
  9065                           fsr2h	equ	0xFDA
  9066                           fsr2l	equ	0xFD9
  9067                           status	equ	0xFD8
  9068                           
  9069 ;; *************** function _Go_Prev_Alarm_Field *****************
  9070 ;; Defined at:
  9071 ;;		line 122 in file "Setup_Alarm_Time.c"
  9072 ;; Parameters:    Size  Location     Type
  9073 ;;		None
  9074 ;; Auto vars:     Size  Location     Type
  9075 ;;		None
  9076 ;; Return value:  Size  Location     Type
  9077 ;;		None               void
  9078 ;; Registers used:
  9079 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9080 ;; Tracked objects:
  9081 ;;		On entry : 0/0
  9082 ;;		On exit  : 0/0
  9083 ;;		Unchanged: 0/0
  9084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9089 ;;Total ram usage:        0 bytes
  9090 ;; Hardware stack levels used:    1
  9091 ;; Hardware stack levels required when called:    9
  9092 ;; This function calls:
  9093 ;;		_Update_Setup_Screen_Cursor_Backward
  9094 ;; This function is called by:
  9095 ;;		_Do_Setup_Alarm_Time
  9096 ;; This function uses a non-reentrant model
  9097 ;;
  9098                           
  9099                           	psect	text43
  9100  003BFE                     __ptext43:
  9101                           	opt stack 0
  9102  003BFE                     _Go_Prev_Alarm_Field:
  9103                           	opt stack 20
  9104                           
  9105                           ;Setup_Alarm_Time.c: 124: if (Select_Alarm_Field == 0) Select_Alarm_Field = 2;
  9106                           
  9107                           ;incstack = 0
  9108  003BFE  5053               	movf	_Select_Alarm_Field,w,c
  9109  003C00  A4D8               	btfss	status,2,c
  9110  003C02  D003               	goto	l9225
  9111  003C04  0E02               	movlw	2
  9112  003C06  6E53               	movwf	_Select_Alarm_Field,c
  9113  003C08  D002               	goto	l9227
  9114  003C0A                     l9225:
  9115                           
  9116                           ;Setup_Alarm_Time.c: 125: else Select_Alarm_Field--;
  9117  003C0A  0653               	decf	_Select_Alarm_Field,f,c
  9118  003C0C  D000               	goto	l9227
  9119  003C0E                     l9227:
  9120                           
  9121                           ;Setup_Alarm_Time.c: 126: Update_Setup_Screen_Cursor_Backward(Select_Alarm_Field);
  9122  003C0E  5053               	movf	_Select_Alarm_Field,w,c
  9123  003C10  EC97  F008         	call	_Update_Setup_Screen_Cursor_Backward
  9124  003C14  0012               	return		;funcret
  9125  003C16                     __end_of_Go_Prev_Alarm_Field:
  9126                           	opt stack 0
  9127                           tblptru	equ	0xFF8
  9128                           tblptrh	equ	0xFF7
  9129                           tblptrl	equ	0xFF6
  9130                           tablat	equ	0xFF5
  9131                           prodh	equ	0xFF4
  9132                           prodl	equ	0xFF3
  9133                           intcon	equ	0xFF2
  9134                           intcon2	equ	0xFF1
  9135                           postinc0	equ	0xFEE
  9136                           wreg	equ	0xFE8
  9137                           postdec1	equ	0xFE5
  9138                           plusw1	equ	0xFE3
  9139                           fsr1l	equ	0xFE1
  9140                           indf2	equ	0xFDF
  9141                           postinc2	equ	0xFDE
  9142                           plusw2	equ	0xFDB
  9143                           fsr2h	equ	0xFDA
  9144                           fsr2l	equ	0xFD9
  9145                           status	equ	0xFD8
  9146                           
  9147 ;; *************** function _Update_Setup_Screen_Cursor_Backward *****************
  9148 ;; Defined at:
  9149 ;;		line 269 in file "Setup_Time.c"
  9150 ;; Parameters:    Size  Location     Type
  9151 ;;  field           1    wreg     unsigned char 
  9152 ;; Auto vars:     Size  Location     Type
  9153 ;;  field           1   45[COMRAM] unsigned char 
  9154 ;;  xinc            1   47[COMRAM] unsigned char 
  9155 ;;  yinc            1   46[COMRAM] unsigned char 
  9156 ;; Return value:  Size  Location     Type
  9157 ;;		None               void
  9158 ;; Registers used:
  9159 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9160 ;; Tracked objects:
  9161 ;;		On entry : 0/0
  9162 ;;		On exit  : 0/0
  9163 ;;		Unchanged: 0/0
  9164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9166 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9168 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9169 ;;Total ram usage:        3 bytes
  9170 ;; Hardware stack levels used:    1
  9171 ;; Hardware stack levels required when called:    8
  9172 ;; This function calls:
  9173 ;;		_fillRect
  9174 ;; This function is called by:
  9175 ;;		_Go_Prev_Alarm_Field
  9176 ;;		_Go_Prev_Field
  9177 ;; This function uses a non-reentrant model
  9178 ;;
  9179                           
  9180                           	psect	text44
  9181  00112E                     __ptext44:
  9182                           	opt stack 0
  9183  00112E                     _Update_Setup_Screen_Cursor_Backward:
  9184                           	opt stack 20
  9185                           
  9186                           ;incstack = 0
  9187                           ;Update_Setup_Screen_Cursor_Backward@field stored from wreg
  9188  00112E  6E2E               	movwf	Update_Setup_Screen_Cursor_Backward@field,c
  9189                           
  9190                           ;Setup_Time.c: 271: char xinc = 36;
  9191  001130  0E24               	movlw	36
  9192  001132  6E30               	movwf	Update_Setup_Screen_Cursor_Backward@xinc,c
  9193                           
  9194                           ;Setup_Time.c: 272: char yinc = 30;
  9195  001134  0E1E               	movlw	30
  9196  001136  6E2F               	movwf	Update_Setup_Screen_Cursor_Backward@yinc,c
  9197                           
  9198                           ;Setup_Time.c: 273: switch (field)
  9199  001138  D0BF               	goto	l9085
  9200  00113A                     l9063:
  9201                           
  9202                           ;Setup_Time.c: 276: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  9203  00113A  0E44               	movlw	68
  9204  00113C  6E23               	movwf	fillRect@y,c
  9205  00113E  0E19               	movlw	25
  9206  001140  6E24               	movwf	fillRect@w,c
  9207  001142  0E02               	movlw	2
  9208  001144  6E25               	movwf	fillRect@h,c
  9209  001146  0E00               	movlw	0
  9210  001148  6E27               	movwf	fillRect@color+1,c
  9211  00114A  0E00               	movlw	0
  9212  00114C  6E26               	movwf	fillRect@color,c
  9213  00114E  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9214  001150  0F0E               	addlw	14
  9215  001152  ECA6  F01B         	call	_fillRect
  9216                           
  9217                           ;Setup_Time.c: 277: fillRect(15-1, 52+16, 25,2,0x07FF);
  9218  001156  0E44               	movlw	68
  9219  001158  6E23               	movwf	fillRect@y,c
  9220  00115A  0E19               	movlw	25
  9221  00115C  6E24               	movwf	fillRect@w,c
  9222  00115E  0E02               	movlw	2
  9223  001160  6E25               	movwf	fillRect@h,c
  9224  001162  0E07               	movlw	7
  9225  001164  6E27               	movwf	fillRect@color+1,c
  9226  001166  6826               	setf	fillRect@color,c
  9227  001168  0E0E               	movlw	14
  9228  00116A  ECA6  F01B         	call	_fillRect
  9229                           
  9230                           ;Setup_Time.c: 278: break;
  9231  00116E  D0B8               	goto	l1287
  9232  001170                     l9065:
  9233                           
  9234                           ;Setup_Time.c: 281: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9235  001170  0E44               	movlw	68
  9236  001172  6E23               	movwf	fillRect@y,c
  9237  001174  0E19               	movlw	25
  9238  001176  6E24               	movwf	fillRect@w,c
  9239  001178  0E02               	movlw	2
  9240  00117A  6E25               	movwf	fillRect@h,c
  9241  00117C  0E00               	movlw	0
  9242  00117E  6E27               	movwf	fillRect@color+1,c
  9243  001180  0E00               	movlw	0
  9244  001182  6E26               	movwf	fillRect@color,c
  9245  001184  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9246  001186  0D02               	mullw	2
  9247  001188  50F3               	movf	prodl,w,c
  9248  00118A  0F0E               	addlw	14
  9249  00118C  ECA6  F01B         	call	_fillRect
  9250                           
  9251                           ;Setup_Time.c: 282: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  9252  001190  0E44               	movlw	68
  9253  001192  6E23               	movwf	fillRect@y,c
  9254  001194  0E19               	movlw	25
  9255  001196  6E24               	movwf	fillRect@w,c
  9256  001198  0E02               	movlw	2
  9257  00119A  6E25               	movwf	fillRect@h,c
  9258  00119C  0E07               	movlw	7
  9259  00119E  6E27               	movwf	fillRect@color+1,c
  9260  0011A0  6826               	setf	fillRect@color,c
  9261  0011A2  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9262  0011A4  0F0E               	addlw	14
  9263  0011A6  ECA6  F01B         	call	_fillRect
  9264                           
  9265                           ;Setup_Time.c: 283: break;
  9266  0011AA  D09A               	goto	l1287
  9267  0011AC                     l9069:
  9268                           
  9269                           ;Setup_Time.c: 286: fillRect(15-1, 52+16, 25,2,0x0000);
  9270  0011AC  0E44               	movlw	68
  9271  0011AE  6E23               	movwf	fillRect@y,c
  9272  0011B0  0E19               	movlw	25
  9273  0011B2  6E24               	movwf	fillRect@w,c
  9274  0011B4  0E02               	movlw	2
  9275  0011B6  6E25               	movwf	fillRect@h,c
  9276  0011B8  0E00               	movlw	0
  9277  0011BA  6E27               	movwf	fillRect@color+1,c
  9278  0011BC  0E00               	movlw	0
  9279  0011BE  6E26               	movwf	fillRect@color,c
  9280  0011C0  0E0E               	movlw	14
  9281  0011C2  ECA6  F01B         	call	_fillRect
  9282                           
  9283                           ;Setup_Time.c: 287: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  9284  0011C6  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9285  0011C8  0F44               	addlw	68
  9286  0011CA  6E23               	movwf	fillRect@y,c
  9287  0011CC  0E19               	movlw	25
  9288  0011CE  6E24               	movwf	fillRect@w,c
  9289  0011D0  0E02               	movlw	2
  9290  0011D2  6E25               	movwf	fillRect@h,c
  9291  0011D4  0E00               	movlw	0
  9292  0011D6  6E27               	movwf	fillRect@color+1,c
  9293  0011D8  0E00               	movlw	0
  9294  0011DA  6E26               	movwf	fillRect@color,c
  9295  0011DC  0E0E               	movlw	14
  9296  0011DE  ECA6  F01B         	call	_fillRect
  9297                           
  9298                           ;Setup_Time.c: 288: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  9299  0011E2  0E44               	movlw	68
  9300  0011E4  6E23               	movwf	fillRect@y,c
  9301  0011E6  0E19               	movlw	25
  9302  0011E8  6E24               	movwf	fillRect@w,c
  9303  0011EA  0E02               	movlw	2
  9304  0011EC  6E25               	movwf	fillRect@h,c
  9305  0011EE  0E07               	movlw	7
  9306  0011F0  6E27               	movwf	fillRect@color+1,c
  9307  0011F2  6826               	setf	fillRect@color,c
  9308  0011F4  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9309  0011F6  0D02               	mullw	2
  9310  0011F8  50F3               	movf	prodl,w,c
  9311  0011FA  0F0E               	addlw	14
  9312  0011FC  ECA6  F01B         	call	_fillRect
  9313                           
  9314                           ;Setup_Time.c: 289: break;
  9315  001200  D06F               	goto	l1287
  9316  001202                     l9073:
  9317                           
  9318                           ;Setup_Time.c: 292: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  9319  001202  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9320  001204  0F44               	addlw	68
  9321  001206  6E23               	movwf	fillRect@y,c
  9322  001208  0E19               	movlw	25
  9323  00120A  6E24               	movwf	fillRect@w,c
  9324  00120C  0E02               	movlw	2
  9325  00120E  6E25               	movwf	fillRect@h,c
  9326  001210  0E00               	movlw	0
  9327  001212  6E27               	movwf	fillRect@color+1,c
  9328  001214  0E00               	movlw	0
  9329  001216  6E26               	movwf	fillRect@color,c
  9330  001218  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9331  00121A  0F0E               	addlw	14
  9332  00121C  ECA6  F01B         	call	_fillRect
  9333                           
  9334                           ;Setup_Time.c: 293: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  9335  001220  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9336  001222  0F44               	addlw	68
  9337  001224  6E23               	movwf	fillRect@y,c
  9338  001226  0E19               	movlw	25
  9339  001228  6E24               	movwf	fillRect@w,c
  9340  00122A  0E02               	movlw	2
  9341  00122C  6E25               	movwf	fillRect@h,c
  9342  00122E  0E07               	movlw	7
  9343  001230  6E27               	movwf	fillRect@color+1,c
  9344  001232  6826               	setf	fillRect@color,c
  9345  001234  0E0E               	movlw	14
  9346  001236  ECA6  F01B         	call	_fillRect
  9347                           
  9348                           ;Setup_Time.c: 294: break;
  9349  00123A  D052               	goto	l1287
  9350  00123C                     l9075:
  9351                           
  9352                           ;Setup_Time.c: 297: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  9353  00123C  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9354  00123E  0F44               	addlw	68
  9355  001240  6E23               	movwf	fillRect@y,c
  9356  001242  0E19               	movlw	25
  9357  001244  6E24               	movwf	fillRect@w,c
  9358  001246  0E02               	movlw	2
  9359  001248  6E25               	movwf	fillRect@h,c
  9360  00124A  0E00               	movlw	0
  9361  00124C  6E27               	movwf	fillRect@color+1,c
  9362  00124E  0E00               	movlw	0
  9363  001250  6E26               	movwf	fillRect@color,c
  9364  001252  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9365  001254  0D02               	mullw	2
  9366  001256  50F3               	movf	prodl,w,c
  9367  001258  0F0E               	addlw	14
  9368  00125A  ECA6  F01B         	call	_fillRect
  9369                           
  9370                           ;Setup_Time.c: 298: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  9371  00125E  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9372  001260  0F44               	addlw	68
  9373  001262  6E23               	movwf	fillRect@y,c
  9374  001264  0E19               	movlw	25
  9375  001266  6E24               	movwf	fillRect@w,c
  9376  001268  0E02               	movlw	2
  9377  00126A  6E25               	movwf	fillRect@h,c
  9378  00126C  0E07               	movlw	7
  9379  00126E  6E27               	movwf	fillRect@color+1,c
  9380  001270  6826               	setf	fillRect@color,c
  9381  001272  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9382  001274  0F0E               	addlw	14
  9383  001276  ECA6  F01B         	call	_fillRect
  9384                           
  9385                           ;Setup_Time.c: 299: break;
  9386  00127A  D032               	goto	l1287
  9387  00127C                     l9079:
  9388                           
  9389                           ;Setup_Time.c: 302: fillRect(15-1, 52+16, 25,2,0x0000);
  9390  00127C  0E44               	movlw	68
  9391  00127E  6E23               	movwf	fillRect@y,c
  9392  001280  0E19               	movlw	25
  9393  001282  6E24               	movwf	fillRect@w,c
  9394  001284  0E02               	movlw	2
  9395  001286  6E25               	movwf	fillRect@h,c
  9396  001288  0E00               	movlw	0
  9397  00128A  6E27               	movwf	fillRect@color+1,c
  9398  00128C  0E00               	movlw	0
  9399  00128E  6E26               	movwf	fillRect@color,c
  9400  001290  0E0E               	movlw	14
  9401  001292  ECA6  F01B         	call	_fillRect
  9402                           
  9403                           ;Setup_Time.c: 303: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  9404  001296  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9405  001298  0F44               	addlw	68
  9406  00129A  6E23               	movwf	fillRect@y,c
  9407  00129C  0E19               	movlw	25
  9408  00129E  6E24               	movwf	fillRect@w,c
  9409  0012A0  0E02               	movlw	2
  9410  0012A2  6E25               	movwf	fillRect@h,c
  9411  0012A4  0E07               	movlw	7
  9412  0012A6  6E27               	movwf	fillRect@color+1,c
  9413  0012A8  6826               	setf	fillRect@color,c
  9414  0012AA  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9415  0012AC  0D02               	mullw	2
  9416  0012AE  50F3               	movf	prodl,w,c
  9417  0012B0  0F0E               	addlw	14
  9418  0012B2  ECA6  F01B         	call	_fillRect
  9419                           
  9420                           ;Setup_Time.c: 305: }
  9421                           
  9422                           ;Setup_Time.c: 304: break;
  9423  0012B6  D014               	goto	l1287
  9424  0012B8                     l9085:
  9425  0012B8  502E               	movf	Update_Setup_Screen_Cursor_Backward@field,w,c
  9426                           
  9427                           ; Switch size 1, requested type "space"
  9428                           ; Number of cases is 6, Range of values is 0 to 5
  9429                           ; switch strategies available:
  9430                           ; Name         Instructions Cycles
  9431                           ; simple_byte           19    10 (average)
  9432                           ;	Chosen strategy is simple_byte
  9433  0012BA  0A00               	xorlw	0	; case 0
  9434  0012BC  B4D8               	btfsc	status,2,c
  9435  0012BE  D73D               	goto	l9063
  9436  0012C0  0A01               	xorlw	1	; case 1
  9437  0012C2  B4D8               	btfsc	status,2,c
  9438  0012C4  D755               	goto	l9065
  9439  0012C6  0A03               	xorlw	3	; case 2
  9440  0012C8  B4D8               	btfsc	status,2,c
  9441  0012CA  D770               	goto	l9069
  9442  0012CC  0A01               	xorlw	1	; case 3
  9443  0012CE  B4D8               	btfsc	status,2,c
  9444  0012D0  D798               	goto	l9073
  9445  0012D2  0A07               	xorlw	7	; case 4
  9446  0012D4  B4D8               	btfsc	status,2,c
  9447  0012D6  D7B2               	goto	l9075
  9448  0012D8  0A01               	xorlw	1	; case 5
  9449  0012DA  B4D8               	btfsc	status,2,c
  9450  0012DC  D7CF               	goto	l9079
  9451  0012DE  D000               	goto	l1287
  9452  0012E0                     l1287:
  9453  0012E0  0012               	return		;funcret
  9454  0012E2                     __end_of_Update_Setup_Screen_Cursor_Backward:
  9455                           	opt stack 0
  9456                           tblptru	equ	0xFF8
  9457                           tblptrh	equ	0xFF7
  9458                           tblptrl	equ	0xFF6
  9459                           tablat	equ	0xFF5
  9460                           prodh	equ	0xFF4
  9461                           prodl	equ	0xFF3
  9462                           intcon	equ	0xFF2
  9463                           intcon2	equ	0xFF1
  9464                           postinc0	equ	0xFEE
  9465                           wreg	equ	0xFE8
  9466                           postdec1	equ	0xFE5
  9467                           plusw1	equ	0xFE3
  9468                           fsr1l	equ	0xFE1
  9469                           indf2	equ	0xFDF
  9470                           postinc2	equ	0xFDE
  9471                           plusw2	equ	0xFDB
  9472                           fsr2h	equ	0xFDA
  9473                           fsr2l	equ	0xFD9
  9474                           status	equ	0xFD8
  9475                           
  9476 ;; *************** function _Go_Next_Alarm_Field *****************
  9477 ;; Defined at:
  9478 ;;		line 113 in file "Setup_Alarm_Time.c"
  9479 ;; Parameters:    Size  Location     Type
  9480 ;;		None
  9481 ;; Auto vars:     Size  Location     Type
  9482 ;;		None
  9483 ;; Return value:  Size  Location     Type
  9484 ;;		None               void
  9485 ;; Registers used:
  9486 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9487 ;; Tracked objects:
  9488 ;;		On entry : 0/0
  9489 ;;		On exit  : 0/0
  9490 ;;		Unchanged: 0/0
  9491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9496 ;;Total ram usage:        0 bytes
  9497 ;; Hardware stack levels used:    1
  9498 ;; Hardware stack levels required when called:    9
  9499 ;; This function calls:
  9500 ;;		_Update_Setup_Screen_Cursor_Forward
  9501 ;; This function is called by:
  9502 ;;		_Do_Setup_Alarm_Time
  9503 ;; This function uses a non-reentrant model
  9504 ;;
  9505                           
  9506                           	psect	text45
  9507  003C16                     __ptext45:
  9508                           	opt stack 0
  9509  003C16                     _Go_Next_Alarm_Field:
  9510                           	opt stack 20
  9511                           
  9512                           ;Setup_Alarm_Time.c: 116: Select_Alarm_Field++;
  9513                           
  9514                           ;incstack = 0
  9515  003C16  2A53               	incf	_Select_Alarm_Field,f,c
  9516                           
  9517                           ;Setup_Alarm_Time.c: 117: if (Select_Alarm_Field == 3) Select_Alarm_Field = 0;
  9518  003C18  0E03               	movlw	3
  9519  003C1A  1853               	xorwf	_Select_Alarm_Field,w,c
  9520  003C1C  A4D8               	btfss	status,2,c
  9521  003C1E  D003               	goto	l9235
  9522  003C20  0E00               	movlw	0
  9523  003C22  6E53               	movwf	_Select_Alarm_Field,c
  9524  003C24  D000               	goto	l9235
  9525  003C26                     l9235:
  9526                           
  9527                           ;Setup_Alarm_Time.c: 118: Update_Setup_Screen_Cursor_Forward(Select_Alarm_Field);
  9528  003C26  5053               	movf	_Select_Alarm_Field,w,c
  9529  003C28  ECBA  F007         	call	_Update_Setup_Screen_Cursor_Forward
  9530  003C2C  0012               	return		;funcret
  9531  003C2E                     __end_of_Go_Next_Alarm_Field:
  9532                           	opt stack 0
  9533                           tblptru	equ	0xFF8
  9534                           tblptrh	equ	0xFF7
  9535                           tblptrl	equ	0xFF6
  9536                           tablat	equ	0xFF5
  9537                           prodh	equ	0xFF4
  9538                           prodl	equ	0xFF3
  9539                           intcon	equ	0xFF2
  9540                           intcon2	equ	0xFF1
  9541                           postinc0	equ	0xFEE
  9542                           wreg	equ	0xFE8
  9543                           postdec1	equ	0xFE5
  9544                           plusw1	equ	0xFE3
  9545                           fsr1l	equ	0xFE1
  9546                           indf2	equ	0xFDF
  9547                           postinc2	equ	0xFDE
  9548                           plusw2	equ	0xFDB
  9549                           fsr2h	equ	0xFDA
  9550                           fsr2l	equ	0xFD9
  9551                           status	equ	0xFD8
  9552                           
  9553 ;; *************** function _Update_Setup_Screen_Cursor_Forward *****************
  9554 ;; Defined at:
  9555 ;;		line 230 in file "Setup_Time.c"
  9556 ;; Parameters:    Size  Location     Type
  9557 ;;  field           1    wreg     unsigned char 
  9558 ;; Auto vars:     Size  Location     Type
  9559 ;;  field           1   45[COMRAM] unsigned char 
  9560 ;;  xinc            1   47[COMRAM] unsigned char 
  9561 ;;  yinc            1   46[COMRAM] unsigned char 
  9562 ;; Return value:  Size  Location     Type
  9563 ;;		None               void
  9564 ;; Registers used:
  9565 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9566 ;; Tracked objects:
  9567 ;;		On entry : 0/0
  9568 ;;		On exit  : 0/0
  9569 ;;		Unchanged: 0/0
  9570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9572 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9574 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9575 ;;Total ram usage:        3 bytes
  9576 ;; Hardware stack levels used:    1
  9577 ;; Hardware stack levels required when called:    8
  9578 ;; This function calls:
  9579 ;;		_fillRect
  9580 ;; This function is called by:
  9581 ;;		_Go_Next_Alarm_Field
  9582 ;;		_Go_Next_Field
  9583 ;; This function uses a non-reentrant model
  9584 ;;
  9585                           
  9586                           	psect	text46
  9587  000F74                     __ptext46:
  9588                           	opt stack 0
  9589  000F74                     _Update_Setup_Screen_Cursor_Forward:
  9590                           	opt stack 20
  9591                           
  9592                           ;incstack = 0
  9593                           ;Update_Setup_Screen_Cursor_Forward@field stored from wreg
  9594  000F74  6E2E               	movwf	Update_Setup_Screen_Cursor_Forward@field,c
  9595                           
  9596                           ;Setup_Time.c: 232: char xinc = 36;
  9597  000F76  0E24               	movlw	36
  9598  000F78  6E30               	movwf	Update_Setup_Screen_Cursor_Forward@xinc,c
  9599                           
  9600                           ;Setup_Time.c: 233: char yinc = 30;
  9601  000F7A  0E1E               	movlw	30
  9602  000F7C  6E2F               	movwf	Update_Setup_Screen_Cursor_Forward@yinc,c
  9603                           
  9604                           ;Setup_Time.c: 234: switch (field)
  9605  000F7E  D0C2               	goto	l9059
  9606  000F80                     l9037:
  9607                           
  9608                           ;Setup_Time.c: 237: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  9609  000F80  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9610  000F82  0F44               	addlw	68
  9611  000F84  6E23               	movwf	fillRect@y,c
  9612  000F86  0E19               	movlw	25
  9613  000F88  6E24               	movwf	fillRect@w,c
  9614  000F8A  0E02               	movlw	2
  9615  000F8C  6E25               	movwf	fillRect@h,c
  9616  000F8E  0E00               	movlw	0
  9617  000F90  6E27               	movwf	fillRect@color+1,c
  9618  000F92  0E00               	movlw	0
  9619  000F94  6E26               	movwf	fillRect@color,c
  9620  000F96  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9621  000F98  0D02               	mullw	2
  9622  000F9A  50F3               	movf	prodl,w,c
  9623  000F9C  0F0E               	addlw	14
  9624  000F9E  ECA6  F01B         	call	_fillRect
  9625                           
  9626                           ;Setup_Time.c: 238: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9627  000FA2  0E44               	movlw	68
  9628  000FA4  6E23               	movwf	fillRect@y,c
  9629  000FA6  0E19               	movlw	25
  9630  000FA8  6E24               	movwf	fillRect@w,c
  9631  000FAA  0E02               	movlw	2
  9632  000FAC  6E25               	movwf	fillRect@h,c
  9633  000FAE  0E00               	movlw	0
  9634  000FB0  6E27               	movwf	fillRect@color+1,c
  9635  000FB2  0E00               	movlw	0
  9636  000FB4  6E26               	movwf	fillRect@color,c
  9637  000FB6  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9638  000FB8  0D02               	mullw	2
  9639  000FBA  50F3               	movf	prodl,w,c
  9640  000FBC  0F0E               	addlw	14
  9641  000FBE  ECA6  F01B         	call	_fillRect
  9642                           
  9643                           ;Setup_Time.c: 239: fillRect(15-1, 52+16, 25,2,0x07FF);
  9644  000FC2  0E44               	movlw	68
  9645  000FC4  6E23               	movwf	fillRect@y,c
  9646  000FC6  0E19               	movlw	25
  9647  000FC8  6E24               	movwf	fillRect@w,c
  9648  000FCA  0E02               	movlw	2
  9649  000FCC  6E25               	movwf	fillRect@h,c
  9650  000FCE  0E07               	movlw	7
  9651  000FD0  6E27               	movwf	fillRect@color+1,c
  9652  000FD2  6826               	setf	fillRect@color,c
  9653  000FD4  0E0E               	movlw	14
  9654  000FD6  ECA6  F01B         	call	_fillRect
  9655                           
  9656                           ;Setup_Time.c: 240: break;
  9657  000FDA  D0A8               	goto	l1276
  9658  000FDC                     l9041:
  9659                           
  9660                           ;Setup_Time.c: 243: fillRect(15-1, 52+16, 25,2,0x0000);
  9661  000FDC  0E44               	movlw	68
  9662  000FDE  6E23               	movwf	fillRect@y,c
  9663  000FE0  0E19               	movlw	25
  9664  000FE2  6E24               	movwf	fillRect@w,c
  9665  000FE4  0E02               	movlw	2
  9666  000FE6  6E25               	movwf	fillRect@h,c
  9667  000FE8  0E00               	movlw	0
  9668  000FEA  6E27               	movwf	fillRect@color+1,c
  9669  000FEC  0E00               	movlw	0
  9670  000FEE  6E26               	movwf	fillRect@color,c
  9671  000FF0  0E0E               	movlw	14
  9672  000FF2  ECA6  F01B         	call	_fillRect
  9673                           
  9674                           ;Setup_Time.c: 244: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  9675  000FF6  0E44               	movlw	68
  9676  000FF8  6E23               	movwf	fillRect@y,c
  9677  000FFA  0E19               	movlw	25
  9678  000FFC  6E24               	movwf	fillRect@w,c
  9679  000FFE  0E02               	movlw	2
  9680  001000  6E25               	movwf	fillRect@h,c
  9681  001002  0E07               	movlw	7
  9682  001004  6E27               	movwf	fillRect@color+1,c
  9683  001006  6826               	setf	fillRect@color,c
  9684  001008  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9685  00100A  0F0E               	addlw	14
  9686  00100C  ECA6  F01B         	call	_fillRect
  9687                           
  9688                           ;Setup_Time.c: 245: break;
  9689  001010  D08D               	goto	l1276
  9690  001012                     l9043:
  9691                           
  9692                           ;Setup_Time.c: 248: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  9693  001012  0E44               	movlw	68
  9694  001014  6E23               	movwf	fillRect@y,c
  9695  001016  0E19               	movlw	25
  9696  001018  6E24               	movwf	fillRect@w,c
  9697  00101A  0E02               	movlw	2
  9698  00101C  6E25               	movwf	fillRect@h,c
  9699  00101E  0E00               	movlw	0
  9700  001020  6E27               	movwf	fillRect@color+1,c
  9701  001022  0E00               	movlw	0
  9702  001024  6E26               	movwf	fillRect@color,c
  9703  001026  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9704  001028  0F0E               	addlw	14
  9705  00102A  ECA6  F01B         	call	_fillRect
  9706                           
  9707                           ;Setup_Time.c: 249: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  9708  00102E  0E44               	movlw	68
  9709  001030  6E23               	movwf	fillRect@y,c
  9710  001032  0E19               	movlw	25
  9711  001034  6E24               	movwf	fillRect@w,c
  9712  001036  0E02               	movlw	2
  9713  001038  6E25               	movwf	fillRect@h,c
  9714  00103A  0E07               	movlw	7
  9715  00103C  6E27               	movwf	fillRect@color+1,c
  9716  00103E  6826               	setf	fillRect@color,c
  9717  001040  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9718  001042  0D02               	mullw	2
  9719  001044  50F3               	movf	prodl,w,c
  9720  001046  0F0E               	addlw	14
  9721  001048  ECA6  F01B         	call	_fillRect
  9722                           
  9723                           ;Setup_Time.c: 250: break;
  9724  00104C  D06F               	goto	l1276
  9725  00104E                     l9047:
  9726                           
  9727                           ;Setup_Time.c: 253: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9728  00104E  0E44               	movlw	68
  9729  001050  6E23               	movwf	fillRect@y,c
  9730  001052  0E19               	movlw	25
  9731  001054  6E24               	movwf	fillRect@w,c
  9732  001056  0E02               	movlw	2
  9733  001058  6E25               	movwf	fillRect@h,c
  9734  00105A  0E00               	movlw	0
  9735  00105C  6E27               	movwf	fillRect@color+1,c
  9736  00105E  0E00               	movlw	0
  9737  001060  6E26               	movwf	fillRect@color,c
  9738  001062  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9739  001064  0D02               	mullw	2
  9740  001066  50F3               	movf	prodl,w,c
  9741  001068  0F0E               	addlw	14
  9742  00106A  ECA6  F01B         	call	_fillRect
  9743                           
  9744                           ;Setup_Time.c: 254: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  9745  00106E  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9746  001070  0F44               	addlw	68
  9747  001072  6E23               	movwf	fillRect@y,c
  9748  001074  0E19               	movlw	25
  9749  001076  6E24               	movwf	fillRect@w,c
  9750  001078  0E02               	movlw	2
  9751  00107A  6E25               	movwf	fillRect@h,c
  9752  00107C  0E07               	movlw	7
  9753  00107E  6E27               	movwf	fillRect@color+1,c
  9754  001080  6826               	setf	fillRect@color,c
  9755  001082  0E0E               	movlw	14
  9756  001084  ECA6  F01B         	call	_fillRect
  9757                           
  9758                           ;Setup_Time.c: 255: break;
  9759  001088  D051               	goto	l1276
  9760  00108A                     l9051:
  9761                           
  9762                           ;Setup_Time.c: 258: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  9763  00108A  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9764  00108C  0F44               	addlw	68
  9765  00108E  6E23               	movwf	fillRect@y,c
  9766  001090  0E19               	movlw	25
  9767  001092  6E24               	movwf	fillRect@w,c
  9768  001094  0E02               	movlw	2
  9769  001096  6E25               	movwf	fillRect@h,c
  9770  001098  0E00               	movlw	0
  9771  00109A  6E27               	movwf	fillRect@color+1,c
  9772  00109C  0E00               	movlw	0
  9773  00109E  6E26               	movwf	fillRect@color,c
  9774  0010A0  0E0E               	movlw	14
  9775  0010A2  ECA6  F01B         	call	_fillRect
  9776                           
  9777                           ;Setup_Time.c: 259: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  9778  0010A6  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9779  0010A8  0F44               	addlw	68
  9780  0010AA  6E23               	movwf	fillRect@y,c
  9781  0010AC  0E19               	movlw	25
  9782  0010AE  6E24               	movwf	fillRect@w,c
  9783  0010B0  0E02               	movlw	2
  9784  0010B2  6E25               	movwf	fillRect@h,c
  9785  0010B4  0E07               	movlw	7
  9786  0010B6  6E27               	movwf	fillRect@color+1,c
  9787  0010B8  6826               	setf	fillRect@color,c
  9788  0010BA  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9789  0010BC  0F0E               	addlw	14
  9790  0010BE  ECA6  F01B         	call	_fillRect
  9791                           
  9792                           ;Setup_Time.c: 260: break;
  9793  0010C2  D034               	goto	l1276
  9794  0010C4                     l9053:
  9795                           
  9796                           ;Setup_Time.c: 263: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  9797  0010C4  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9798  0010C6  0F44               	addlw	68
  9799  0010C8  6E23               	movwf	fillRect@y,c
  9800  0010CA  0E19               	movlw	25
  9801  0010CC  6E24               	movwf	fillRect@w,c
  9802  0010CE  0E02               	movlw	2
  9803  0010D0  6E25               	movwf	fillRect@h,c
  9804  0010D2  0E00               	movlw	0
  9805  0010D4  6E27               	movwf	fillRect@color+1,c
  9806  0010D6  0E00               	movlw	0
  9807  0010D8  6E26               	movwf	fillRect@color,c
  9808  0010DA  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9809  0010DC  0F0E               	addlw	14
  9810  0010DE  ECA6  F01B         	call	_fillRect
  9811                           
  9812                           ;Setup_Time.c: 264: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  9813  0010E2  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9814  0010E4  0F44               	addlw	68
  9815  0010E6  6E23               	movwf	fillRect@y,c
  9816  0010E8  0E19               	movlw	25
  9817  0010EA  6E24               	movwf	fillRect@w,c
  9818  0010EC  0E02               	movlw	2
  9819  0010EE  6E25               	movwf	fillRect@h,c
  9820  0010F0  0E07               	movlw	7
  9821  0010F2  6E27               	movwf	fillRect@color+1,c
  9822  0010F4  6826               	setf	fillRect@color,c
  9823  0010F6  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9824  0010F8  0D02               	mullw	2
  9825  0010FA  50F3               	movf	prodl,w,c
  9826  0010FC  0F0E               	addlw	14
  9827  0010FE  ECA6  F01B         	call	_fillRect
  9828                           
  9829                           ;Setup_Time.c: 266: }
  9830                           
  9831                           ;Setup_Time.c: 265: break;
  9832  001102  D014               	goto	l1276
  9833  001104                     l9059:
  9834  001104  502E               	movf	Update_Setup_Screen_Cursor_Forward@field,w,c
  9835                           
  9836                           ; Switch size 1, requested type "space"
  9837                           ; Number of cases is 6, Range of values is 0 to 5
  9838                           ; switch strategies available:
  9839                           ; Name         Instructions Cycles
  9840                           ; simple_byte           19    10 (average)
  9841                           ;	Chosen strategy is simple_byte
  9842  001106  0A00               	xorlw	0	; case 0
  9843  001108  B4D8               	btfsc	status,2,c
  9844  00110A  D73A               	goto	l9037
  9845  00110C  0A01               	xorlw	1	; case 1
  9846  00110E  B4D8               	btfsc	status,2,c
  9847  001110  D765               	goto	l9041
  9848  001112  0A03               	xorlw	3	; case 2
  9849  001114  B4D8               	btfsc	status,2,c
  9850  001116  D77D               	goto	l9043
  9851  001118  0A01               	xorlw	1	; case 3
  9852  00111A  B4D8               	btfsc	status,2,c
  9853  00111C  D798               	goto	l9047
  9854  00111E  0A07               	xorlw	7	; case 4
  9855  001120  B4D8               	btfsc	status,2,c
  9856  001122  D7B3               	goto	l9051
  9857  001124  0A01               	xorlw	1	; case 5
  9858  001126  B4D8               	btfsc	status,2,c
  9859  001128  D7CD               	goto	l9053
  9860  00112A  D000               	goto	l1276
  9861  00112C                     l1276:
  9862  00112C  0012               	return		;funcret
  9863  00112E                     __end_of_Update_Setup_Screen_Cursor_Forward:
  9864                           	opt stack 0
  9865                           tblptru	equ	0xFF8
  9866                           tblptrh	equ	0xFF7
  9867                           tblptrl	equ	0xFF6
  9868                           tablat	equ	0xFF5
  9869                           prodh	equ	0xFF4
  9870                           prodl	equ	0xFF3
  9871                           intcon	equ	0xFF2
  9872                           intcon2	equ	0xFF1
  9873                           postinc0	equ	0xFEE
  9874                           wreg	equ	0xFE8
  9875                           postdec1	equ	0xFE5
  9876                           plusw1	equ	0xFE3
  9877                           fsr1l	equ	0xFE1
  9878                           indf2	equ	0xFDF
  9879                           postinc2	equ	0xFDE
  9880                           plusw2	equ	0xFDB
  9881                           fsr2h	equ	0xFDA
  9882                           fsr2l	equ	0xFD9
  9883                           status	equ	0xFD8
  9884                           
  9885 ;; *************** function _Exit_Setup_Alarm_Time *****************
  9886 ;; Defined at:
  9887 ;;		line 129 in file "Setup_Alarm_Time.c"
  9888 ;; Parameters:    Size  Location     Type
  9889 ;;		None
  9890 ;; Auto vars:     Size  Location     Type
  9891 ;;		None
  9892 ;; Return value:  Size  Location     Type
  9893 ;;		None               void
  9894 ;; Registers used:
  9895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9896 ;; Tracked objects:
  9897 ;;		On entry : 0/0
  9898 ;;		On exit  : 0/0
  9899 ;;		Unchanged: 0/0
  9900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9905 ;;Total ram usage:        0 bytes
  9906 ;; Hardware stack levels used:    1
  9907 ;; Hardware stack levels required when called:   11
  9908 ;; This function calls:
  9909 ;;		_DS3231_Read_Alarm_Time
  9910 ;;		_DS3231_Read_Time
  9911 ;;		_Initialize_Screen
  9912 ;; This function is called by:
  9913 ;;		_Do_Setup_Alarm_Time
  9914 ;; This function uses a non-reentrant model
  9915 ;;
  9916                           
  9917                           	psect	text47
  9918  003CAC                     __ptext47:
  9919                           	opt stack 0
  9920  003CAC                     _Exit_Setup_Alarm_Time:
  9921                           	opt stack 18
  9922                           
  9923                           ;Setup_Alarm_Time.c: 131: DS3231_Read_Time();
  9924                           
  9925                           ;incstack = 0
  9926  003CAC  EC00  F019         	call	_DS3231_Read_Time	;wreg free
  9927                           
  9928                           ;Setup_Alarm_Time.c: 132: DS3231_Read_Alarm_Time();
  9929  003CB0  EC5A  F01B         	call	_DS3231_Read_Alarm_Time	;wreg free
  9930                           
  9931                           ;Setup_Alarm_Time.c: 133: Initialize_Screen();
  9932  003CB4  EC43  F003         	call	_Initialize_Screen	;wreg free
  9933                           
  9934                           ;Setup_Alarm_Time.c: 134: In_Alarm_Time_Setup = 0;
  9935  003CB8  0E00               	movlw	0
  9936  003CBA  0100               	movlb	0	; () banked
  9937  003CBC  6FF8               	movwf	_In_Alarm_Time_Setup& (0+255),b
  9938                           
  9939                           ; BSR set to: 0
  9940  003CBE  0012               	return		;funcret
  9941  003CC0                     __end_of_Exit_Setup_Alarm_Time:
  9942                           	opt stack 0
  9943                           tblptru	equ	0xFF8
  9944                           tblptrh	equ	0xFF7
  9945                           tblptrl	equ	0xFF6
  9946                           tablat	equ	0xFF5
  9947                           prodh	equ	0xFF4
  9948                           prodl	equ	0xFF3
  9949                           intcon	equ	0xFF2
  9950                           intcon2	equ	0xFF1
  9951                           postinc0	equ	0xFEE
  9952                           wreg	equ	0xFE8
  9953                           postdec1	equ	0xFE5
  9954                           plusw1	equ	0xFE3
  9955                           fsr1l	equ	0xFE1
  9956                           indf2	equ	0xFDF
  9957                           postinc2	equ	0xFDE
  9958                           plusw2	equ	0xFDB
  9959                           fsr2h	equ	0xFDA
  9960                           fsr2l	equ	0xFD9
  9961                           status	equ	0xFD8
  9962                           
  9963 ;; *************** function _Do_Save_New_Alarm_Time *****************
  9964 ;; Defined at:
  9965 ;;		line 137 in file "Setup_Alarm_Time.c"
  9966 ;; Parameters:    Size  Location     Type
  9967 ;;		None
  9968 ;; Auto vars:     Size  Location     Type
  9969 ;;		None
  9970 ;; Return value:  Size  Location     Type
  9971 ;;		None               void
  9972 ;; Registers used:
  9973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9974 ;; Tracked objects:
  9975 ;;		On entry : 0/0
  9976 ;;		On exit  : 0/0
  9977 ;;		Unchanged: 0/0
  9978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9983 ;;Total ram usage:        0 bytes
  9984 ;; Hardware stack levels used:    1
  9985 ;; Hardware stack levels required when called:   11
  9986 ;; This function calls:
  9987 ;;		_DS3231_Read_Alarm_Time
  9988 ;;		_DS3231_Read_Time
  9989 ;;		_DS3231_Write_Alarm_Time
  9990 ;;		_Initialize_Screen
  9991 ;; This function is called by:
  9992 ;;		_Do_Setup_Alarm_Time
  9993 ;; This function uses a non-reentrant model
  9994 ;;
  9995                           
  9996                           	psect	text48
  9997  003C2E                     __ptext48:
  9998                           	opt stack 0
  9999  003C2E                     _Do_Save_New_Alarm_Time:
 10000                           	opt stack 18
 10001                           
 10002                           ;Setup_Alarm_Time.c: 139: DS3231_Write_Alarm_Time();
 10003                           
 10004                           ; BSR set to: 0
 10005                           ;incstack = 0
 10006  003C2E  ECE3  F017         	call	_DS3231_Write_Alarm_Time	;wreg free
 10007                           
 10008                           ;Setup_Alarm_Time.c: 140: DS3231_Read_Alarm_Time();
 10009  003C32  EC5A  F01B         	call	_DS3231_Read_Alarm_Time	;wreg free
 10010                           
 10011                           ;Setup_Alarm_Time.c: 141: DS3231_Read_Time();
 10012  003C36  EC00  F019         	call	_DS3231_Read_Time	;wreg free
 10013                           
 10014                           ;Setup_Alarm_Time.c: 142: Initialize_Screen();
 10015  003C3A  EC43  F003         	call	_Initialize_Screen	;wreg free
 10016                           
 10017                           ;Setup_Alarm_Time.c: 143: In_Alarm_Time_Setup = 0;
 10018  003C3E  0E00               	movlw	0
 10019  003C40  0100               	movlb	0	; () banked
 10020  003C42  6FF8               	movwf	_In_Alarm_Time_Setup& (0+255),b
 10021                           
 10022                           ; BSR set to: 0
 10023  003C44  0012               	return		;funcret
 10024  003C46                     __end_of_Do_Save_New_Alarm_Time:
 10025                           	opt stack 0
 10026                           tblptru	equ	0xFF8
 10027                           tblptrh	equ	0xFF7
 10028                           tblptrl	equ	0xFF6
 10029                           tablat	equ	0xFF5
 10030                           prodh	equ	0xFF4
 10031                           prodl	equ	0xFF3
 10032                           intcon	equ	0xFF2
 10033                           intcon2	equ	0xFF1
 10034                           postinc0	equ	0xFEE
 10035                           wreg	equ	0xFE8
 10036                           postdec1	equ	0xFE5
 10037                           plusw1	equ	0xFE3
 10038                           fsr1l	equ	0xFE1
 10039                           indf2	equ	0xFDF
 10040                           postinc2	equ	0xFDE
 10041                           plusw2	equ	0xFDB
 10042                           fsr2h	equ	0xFDA
 10043                           fsr2l	equ	0xFD9
 10044                           status	equ	0xFD8
 10045                           
 10046 ;; *************** function _Initialize_Screen *****************
 10047 ;; Defined at:
 10048 ;;		line 36 in file "Main_Screen.c"
 10049 ;; Parameters:    Size  Location     Type
 10050 ;;		None
 10051 ;; Auto vars:     Size  Location     Type
 10052 ;;		None
 10053 ;; Return value:  Size  Location     Type
 10054 ;;                  2  380[None  ] int 
 10055 ;; Registers used:
 10056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10057 ;; Tracked objects:
 10058 ;;		On entry : 0/0
 10059 ;;		On exit  : 0/0
 10060 ;;		Unchanged: 0/0
 10061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10066 ;;Total ram usage:        0 bytes
 10067 ;; Hardware stack levels used:    1
 10068 ;; Hardware stack levels required when called:   10
 10069 ;; This function calls:
 10070 ;;		_LCD_Reset
 10071 ;;		_TFT_GreenTab_Initialize
 10072 ;;		_drawCircle
 10073 ;;		_drawtext
 10074 ;;		_fillScreen
 10075 ;;		_strcpy
 10076 ;; This function is called by:
 10077 ;;		_main
 10078 ;;		_Exit_Setup_Alarm_Time
 10079 ;;		_Do_Save_New_Alarm_Time
 10080 ;;		_Exit_Setup_Heater_Temp
 10081 ;;		_Do_Save_New_Heater_Temp
 10082 ;;		_Do_Save_New_Time
 10083 ;;		_Exit_Time_Setup
 10084 ;; This function uses a non-reentrant model
 10085 ;;
 10086                           
 10087                           	psect	text49
 10088  000686                     __ptext49:
 10089                           	opt stack 0
 10090  000686                     _Initialize_Screen:
 10091                           	opt stack 20
 10092                           
 10093                           ;Main_Screen.c: 38: LCD_Reset();
 10094                           
 10095                           ; BSR set to: 0
 10096                           ;incstack = 0
 10097  000686  EC9A  F01E         	call	_LCD_Reset	;wreg free
 10098                           
 10099                           ;Main_Screen.c: 39: TFT_GreenTab_Initialize();
 10100  00068A  EC0A  F01D         	call	_TFT_GreenTab_Initialize	;wreg free
 10101                           
 10102                           ;Main_Screen.c: 40: fillScreen(0x0000);
 10103  00068E  0E00               	movlw	0
 10104  000690  6E25               	movwf	fillScreen@color+1,c
 10105  000692  0E00               	movlw	0
 10106  000694  6E24               	movwf	fillScreen@color,c
 10107  000696  ECBE  F01D         	call	_fillScreen	;wreg free
 10108                           
 10109                           ;Main_Screen.c: 42: strcpy(txt, "ECE3301L F'22 S1\0");
 10110  00069A  C04E  F011         	movff	_txt,strcpy@to
 10111  00069E  C04F  F012         	movff	_txt+1,strcpy@to+1
 10112  0006A2  0E2B               	movlw	low STR_5
 10113  0006A4  6E13               	movwf	strcpy@from,c
 10114  0006A6  0EFF               	movlw	high STR_5
 10115  0006A8  6E14               	movwf	strcpy@from+1,c
 10116  0006AA  ECC4  F01C         	call	_strcpy	;wreg free
 10117                           
 10118                           ;Main_Screen.c: 43: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
 10119  0006AE  0E01               	movlw	1
 10120  0006B0  6E39               	movwf	drawtext@y,c
 10121  0006B2  C04E  F03A         	movff	_txt,drawtext@_text
 10122  0006B6  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10123  0006BA  0EFF               	movlw	255
 10124  0006BC  6E3D               	movwf	drawtext@color+1,c
 10125  0006BE  683C               	setf	drawtext@color,c
 10126  0006C0  0E00               	movlw	0
 10127  0006C2  6E3F               	movwf	drawtext@bg+1,c
 10128  0006C4  0E00               	movlw	0
 10129  0006C6  6E3E               	movwf	drawtext@bg,c
 10130  0006C8  0E01               	movlw	1
 10131  0006CA  6E40               	movwf	drawtext@size,c
 10132  0006CC  0E01               	movlw	1
 10133  0006CE  EC99  F00D         	call	_drawtext
 10134                           
 10135                           ;Main_Screen.c: 44: strcpy(txt, "Temperature:");
 10136  0006D2  C04E  F011         	movff	_txt,strcpy@to
 10137  0006D6  C04F  F012         	movff	_txt+1,strcpy@to+1
 10138  0006DA  0E6F               	movlw	low STR_6
 10139  0006DC  6E13               	movwf	strcpy@from,c
 10140  0006DE  0EFF               	movlw	high STR_6
 10141  0006E0  6E14               	movwf	strcpy@from+1,c
 10142  0006E2  ECC4  F01C         	call	_strcpy	;wreg free
 10143                           
 10144                           ;Main_Screen.c: 45: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
 10145  0006E6  0E0B               	movlw	11
 10146  0006E8  6E39               	movwf	drawtext@y,c
 10147  0006EA  C04E  F03A         	movff	_txt,drawtext@_text
 10148  0006EE  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10149  0006F2  0EF8               	movlw	248
 10150  0006F4  6E3D               	movwf	drawtext@color+1,c
 10151  0006F6  0E1F               	movlw	31
 10152  0006F8  6E3C               	movwf	drawtext@color,c
 10153  0006FA  0E00               	movlw	0
 10154  0006FC  6E3F               	movwf	drawtext@bg+1,c
 10155  0006FE  0E00               	movlw	0
 10156  000700  6E3E               	movwf	drawtext@bg,c
 10157  000702  0E01               	movlw	1
 10158  000704  6E40               	movwf	drawtext@size,c
 10159  000706  0E18               	movlw	24
 10160  000708  EC99  F00D         	call	_drawtext
 10161                           
 10162                           ;Main_Screen.c: 46: drawCircle(40, 23 , 2 , 0xFFE0);
 10163  00070C  0E00               	movlw	0
 10164  00070E  6E1D               	movwf	drawCircle@x0+1,c
 10165  000710  0E28               	movlw	40
 10166  000712  6E1C               	movwf	drawCircle@x0,c
 10167  000714  0E00               	movlw	0
 10168  000716  6E1F               	movwf	drawCircle@y0+1,c
 10169  000718  0E17               	movlw	23
 10170  00071A  6E1E               	movwf	drawCircle@y0,c
 10171  00071C  0E00               	movlw	0
 10172  00071E  6E21               	movwf	drawCircle@r+1,c
 10173  000720  0E02               	movlw	2
 10174  000722  6E20               	movwf	drawCircle@r,c
 10175  000724  0EFF               	movlw	255
 10176  000726  6E23               	movwf	drawCircle@color+1,c
 10177  000728  0EE0               	movlw	224
 10178  00072A  6E22               	movwf	drawCircle@color,c
 10179  00072C  EC71  F009         	call	_drawCircle	;wreg free
 10180                           
 10181                           ;Main_Screen.c: 47: strcpy(txt, "C/");
 10182  000730  C04E  F011         	movff	_txt,strcpy@to
 10183  000734  C04F  F012         	movff	_txt+1,strcpy@to+1
 10184  000738  0EF6               	movlw	low STR_7
 10185  00073A  6E13               	movwf	strcpy@from,c
 10186  00073C  0EFF               	movlw	high STR_7
 10187  00073E  6E14               	movwf	strcpy@from+1,c
 10188  000740  ECC4  F01C         	call	_strcpy	;wreg free
 10189                           
 10190                           ;Main_Screen.c: 48: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
 10191  000744  0E17               	movlw	23
 10192  000746  6E39               	movwf	drawtext@y,c
 10193  000748  C04E  F03A         	movff	_txt,drawtext@_text
 10194  00074C  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10195  000750  0EFF               	movlw	255
 10196  000752  6E3D               	movwf	drawtext@color+1,c
 10197  000754  0EE0               	movlw	224
 10198  000756  6E3C               	movwf	drawtext@color,c
 10199  000758  0E00               	movlw	0
 10200  00075A  6E3F               	movwf	drawtext@bg+1,c
 10201  00075C  0E00               	movlw	0
 10202  00075E  6E3E               	movwf	drawtext@bg,c
 10203  000760  0E02               	movlw	2
 10204  000762  6E40               	movwf	drawtext@size,c
 10205  000764  0E2D               	movlw	45
 10206  000766  EC99  F00D         	call	_drawtext
 10207                           
 10208                           ;Main_Screen.c: 49: strcpy(txt, "F");
 10209  00076A  C04E  F011         	movff	_txt,strcpy@to
 10210  00076E  C04F  F012         	movff	_txt+1,strcpy@to+1
 10211  000772  0EF0               	movlw	low (STR_20+2)
 10212  000774  6E13               	movwf	strcpy@from,c
 10213  000776  0EFF               	movlw	high (STR_20+2)
 10214  000778  6E14               	movwf	strcpy@from+1,c
 10215  00077A  ECC4  F01C         	call	_strcpy	;wreg free
 10216                           
 10217                           ;Main_Screen.c: 50: drawCircle(110, 23 , 2 , 0xFFE0);
 10218  00077E  0E00               	movlw	0
 10219  000780  6E1D               	movwf	drawCircle@x0+1,c
 10220  000782  0E6E               	movlw	110
 10221  000784  6E1C               	movwf	drawCircle@x0,c
 10222  000786  0E00               	movlw	0
 10223  000788  6E1F               	movwf	drawCircle@y0+1,c
 10224  00078A  0E17               	movlw	23
 10225  00078C  6E1E               	movwf	drawCircle@y0,c
 10226  00078E  0E00               	movlw	0
 10227  000790  6E21               	movwf	drawCircle@r+1,c
 10228  000792  0E02               	movlw	2
 10229  000794  6E20               	movwf	drawCircle@r,c
 10230  000796  0EFF               	movlw	255
 10231  000798  6E23               	movwf	drawCircle@color+1,c
 10232  00079A  0EE0               	movlw	224
 10233  00079C  6E22               	movwf	drawCircle@color,c
 10234  00079E  EC71  F009         	call	_drawCircle	;wreg free
 10235                           
 10236                           ;Main_Screen.c: 51: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
 10237  0007A2  0E17               	movlw	23
 10238  0007A4  6E39               	movwf	drawtext@y,c
 10239  0007A6  C04E  F03A         	movff	_txt,drawtext@_text
 10240  0007AA  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10241  0007AE  0EFF               	movlw	255
 10242  0007B0  6E3D               	movwf	drawtext@color+1,c
 10243  0007B2  0EE0               	movlw	224
 10244  0007B4  6E3C               	movwf	drawtext@color,c
 10245  0007B6  0E00               	movlw	0
 10246  0007B8  6E3F               	movwf	drawtext@bg+1,c
 10247  0007BA  0E00               	movlw	0
 10248  0007BC  6E3E               	movwf	drawtext@bg,c
 10249  0007BE  0E02               	movlw	2
 10250  0007C0  6E40               	movwf	drawtext@size,c
 10251  0007C2  0E73               	movlw	115
 10252  0007C4  EC99  F00D         	call	_drawtext
 10253                           
 10254                           ;Main_Screen.c: 52: strcpy(txt, "Time");
 10255  0007C8  C04E  F011         	movff	_txt,strcpy@to
 10256  0007CC  C04F  F012         	movff	_txt+1,strcpy@to+1
 10257  0007D0  0EB1               	movlw	low (STR_11+6)
 10258  0007D2  6E13               	movwf	strcpy@from,c
 10259  0007D4  0EFF               	movlw	high (STR_11+6)
 10260  0007D6  6E14               	movwf	strcpy@from+1,c
 10261  0007D8  ECC4  F01C         	call	_strcpy	;wreg free
 10262                           
 10263                           ;Main_Screen.c: 53: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
 10264  0007DC  0E28               	movlw	40
 10265  0007DE  6E39               	movwf	drawtext@y,c
 10266  0007E0  C04E  F03A         	movff	_txt,drawtext@_text
 10267  0007E4  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10268  0007E8  0E00               	movlw	0
 10269  0007EA  6E3D               	movwf	drawtext@color+1,c
 10270  0007EC  0E1F               	movlw	31
 10271  0007EE  6E3C               	movwf	drawtext@color,c
 10272  0007F0  0E00               	movlw	0
 10273  0007F2  6E3F               	movwf	drawtext@bg+1,c
 10274  0007F4  0E00               	movlw	0
 10275  0007F6  6E3E               	movwf	drawtext@bg,c
 10276  0007F8  0E01               	movlw	1
 10277  0007FA  6E40               	movwf	drawtext@size,c
 10278  0007FC  0E32               	movlw	50
 10279  0007FE  EC99  F00D         	call	_drawtext
 10280                           
 10281                           ;Main_Screen.c: 54: strcpy(txt, "Date");
 10282  000802  C04E  F011         	movff	_txt,strcpy@to
 10283  000806  C04F  F012         	movff	_txt+1,strcpy@to+1
 10284  00080A  0EE0               	movlw	low STR_10
 10285  00080C  6E13               	movwf	strcpy@from,c
 10286  00080E  0EFF               	movlw	high STR_10
 10287  000810  6E14               	movwf	strcpy@from+1,c
 10288  000812  ECC4  F01C         	call	_strcpy	;wreg free
 10289                           
 10290                           ;Main_Screen.c: 55: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
 10291  000816  0E47               	movlw	71
 10292  000818  6E39               	movwf	drawtext@y,c
 10293  00081A  C04E  F03A         	movff	_txt,drawtext@_text
 10294  00081E  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10295  000822  0EF8               	movlw	248
 10296  000824  6E3D               	movwf	drawtext@color+1,c
 10297  000826  0E00               	movlw	0
 10298  000828  6E3C               	movwf	drawtext@color,c
 10299  00082A  0E00               	movlw	0
 10300  00082C  6E3F               	movwf	drawtext@bg+1,c
 10301  00082E  0E00               	movlw	0
 10302  000830  6E3E               	movwf	drawtext@bg,c
 10303  000832  0E01               	movlw	1
 10304  000834  6E40               	movwf	drawtext@size,c
 10305  000836  0E32               	movlw	50
 10306  000838  EC99  F00D         	call	_drawtext
 10307                           
 10308                           ;Main_Screen.c: 56: strcpy(txt, "Alarm Time");
 10309  00083C  C04E  F011         	movff	_txt,strcpy@to
 10310  000840  C04F  F012         	movff	_txt+1,strcpy@to+1
 10311  000844  0EAB               	movlw	low STR_11
 10312  000846  6E13               	movwf	strcpy@from,c
 10313  000848  0EFF               	movlw	high STR_11
 10314  00084A  6E14               	movwf	strcpy@from+1,c
 10315  00084C  ECC4  F01C         	call	_strcpy	;wreg free
 10316                           
 10317                           ;Main_Screen.c: 57: drawtext(4 , 100 , txt, 0xFFE0, 0x0000, 1);
 10318  000850  0E64               	movlw	100
 10319  000852  6E39               	movwf	drawtext@y,c
 10320  000854  C04E  F03A         	movff	_txt,drawtext@_text
 10321  000858  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10322  00085C  0EFF               	movlw	255
 10323  00085E  6E3D               	movwf	drawtext@color+1,c
 10324  000860  0EE0               	movlw	224
 10325  000862  6E3C               	movwf	drawtext@color,c
 10326  000864  0E00               	movlw	0
 10327  000866  6E3F               	movwf	drawtext@bg+1,c
 10328  000868  0E00               	movlw	0
 10329  00086A  6E3E               	movwf	drawtext@bg,c
 10330  00086C  0E01               	movlw	1
 10331  00086E  6E40               	movwf	drawtext@size,c
 10332  000870  0E04               	movlw	4
 10333  000872  EC99  F00D         	call	_drawtext
 10334                           
 10335                           ;Main_Screen.c: 58: strcpy(txt, "Alarm SW");
 10336  000876  C04E  F011         	movff	_txt,strcpy@to
 10337  00087A  C04F  F012         	movff	_txt+1,strcpy@to+1
 10338  00087E  0EC0               	movlw	low STR_12
 10339  000880  6E13               	movwf	strcpy@from,c
 10340  000882  0EFF               	movlw	high STR_12
 10341  000884  6E14               	movwf	strcpy@from+1,c
 10342  000886  ECC4  F01C         	call	_strcpy	;wreg free
 10343                           
 10344                           ;Main_Screen.c: 59: drawtext(77, 100, txt, 0xFFE0, 0x0000, 1);
 10345  00088A  0E64               	movlw	100
 10346  00088C  6E39               	movwf	drawtext@y,c
 10347  00088E  C04E  F03A         	movff	_txt,drawtext@_text
 10348  000892  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10349  000896  0EFF               	movlw	255
 10350  000898  6E3D               	movwf	drawtext@color+1,c
 10351  00089A  0EE0               	movlw	224
 10352  00089C  6E3C               	movwf	drawtext@color,c
 10353  00089E  0E00               	movlw	0
 10354  0008A0  6E3F               	movwf	drawtext@bg+1,c
 10355  0008A2  0E00               	movlw	0
 10356  0008A4  6E3E               	movwf	drawtext@bg,c
 10357  0008A6  0E01               	movlw	1
 10358  0008A8  6E40               	movwf	drawtext@size,c
 10359  0008AA  0E4D               	movlw	77
 10360  0008AC  EC99  F00D         	call	_drawtext
 10361                           
 10362                           ;Main_Screen.c: 60: strcpy(txt, "HTR Set Temp");
 10363  0008B0  C04E  F011         	movff	_txt,strcpy@to
 10364  0008B4  C04F  F012         	movff	_txt+1,strcpy@to+1
 10365  0008B8  0E7C               	movlw	low STR_13
 10366  0008BA  6E13               	movwf	strcpy@from,c
 10367  0008BC  0EFF               	movlw	high STR_13
 10368  0008BE  6E14               	movwf	strcpy@from+1,c
 10369  0008C0  ECC4  F01C         	call	_strcpy	;wreg free
 10370                           
 10371                           ;Main_Screen.c: 61: drawtext(6, 120, txt, 0x001F , 0x0000, 1);
 10372  0008C4  0E78               	movlw	120
 10373  0008C6  6E39               	movwf	drawtext@y,c
 10374  0008C8  C04E  F03A         	movff	_txt,drawtext@_text
 10375  0008CC  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10376  0008D0  0E00               	movlw	0
 10377  0008D2  6E3D               	movwf	drawtext@color+1,c
 10378  0008D4  0E1F               	movlw	31
 10379  0008D6  6E3C               	movwf	drawtext@color,c
 10380  0008D8  0E00               	movlw	0
 10381  0008DA  6E3F               	movwf	drawtext@bg+1,c
 10382  0008DC  0E00               	movlw	0
 10383  0008DE  6E3E               	movwf	drawtext@bg,c
 10384  0008E0  0E01               	movlw	1
 10385  0008E2  6E40               	movwf	drawtext@size,c
 10386  0008E4  0E06               	movlw	6
 10387  0008E6  EC99  F00D         	call	_drawtext
 10388                           
 10389                           ;Main_Screen.c: 62: strcpy(txt, "HTR SW");
 10390  0008EA  C04E  F011         	movff	_txt,strcpy@to
 10391  0008EE  C04F  F012         	movff	_txt+1,strcpy@to+1
 10392  0008F2  0ED9               	movlw	low STR_14
 10393  0008F4  6E13               	movwf	strcpy@from,c
 10394  0008F6  0EFF               	movlw	high STR_14
 10395  0008F8  6E14               	movwf	strcpy@from+1,c
 10396  0008FA  ECC4  F01C         	call	_strcpy	;wreg free
 10397                           
 10398                           ;Main_Screen.c: 63: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
 10399  0008FE  0E78               	movlw	120
 10400  000900  6E39               	movwf	drawtext@y,c
 10401  000902  C04E  F03A         	movff	_txt,drawtext@_text
 10402  000906  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10403  00090A  0E00               	movlw	0
 10404  00090C  6E3D               	movwf	drawtext@color+1,c
 10405  00090E  0E1F               	movlw	31
 10406  000910  6E3C               	movwf	drawtext@color,c
 10407  000912  0E00               	movlw	0
 10408  000914  6E3F               	movwf	drawtext@bg+1,c
 10409  000916  0E00               	movlw	0
 10410  000918  6E3E               	movwf	drawtext@bg,c
 10411  00091A  0E01               	movlw	1
 10412  00091C  6E40               	movwf	drawtext@size,c
 10413  00091E  0E55               	movlw	85
 10414  000920  EC99  F00D         	call	_drawtext
 10415                           
 10416                           ;Main_Screen.c: 64: strcpy(txt, "DC");
 10417  000924  C04E  F011         	movff	_txt,strcpy@to
 10418  000928  C04F  F012         	movff	_txt+1,strcpy@to+1
 10419  00092C  0EF9               	movlw	low STR_15
 10420  00092E  6E13               	movwf	strcpy@from,c
 10421  000930  0EFF               	movlw	high STR_15
 10422  000932  6E14               	movwf	strcpy@from+1,c
 10423  000934  ECC4  F01C         	call	_strcpy	;wreg free
 10424                           
 10425                           ;Main_Screen.c: 65: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
 10426  000938  0E8C               	movlw	140
 10427  00093A  6E39               	movwf	drawtext@y,c
 10428  00093C  C04E  F03A         	movff	_txt,drawtext@_text
 10429  000940  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10430  000944  0EFF               	movlw	255
 10431  000946  6E3D               	movwf	drawtext@color+1,c
 10432  000948  683C               	setf	drawtext@color,c
 10433  00094A  0E00               	movlw	0
 10434  00094C  6E3F               	movwf	drawtext@bg+1,c
 10435  00094E  0E00               	movlw	0
 10436  000950  6E3E               	movwf	drawtext@bg,c
 10437  000952  0E01               	movlw	1
 10438  000954  6E40               	movwf	drawtext@size,c
 10439  000956  0E0C               	movlw	12
 10440  000958  EC99  F00D         	call	_drawtext
 10441                           
 10442                           ;Main_Screen.c: 66: strcpy(txt, "RM");
 10443  00095C  C04E  F011         	movff	_txt,strcpy@to
 10444  000960  C04F  F012         	movff	_txt+1,strcpy@to+1
 10445  000964  0EFC               	movlw	low STR_16
 10446  000966  6E13               	movwf	strcpy@from,c
 10447  000968  0EFF               	movlw	high STR_16
 10448  00096A  6E14               	movwf	strcpy@from+1,c
 10449  00096C  ECC4  F01C         	call	_strcpy	;wreg free
 10450                           
 10451                           ;Main_Screen.c: 67: drawtext(33, 140, txt, 0xFFFF , 0x0000 , 1);
 10452  000970  0E8C               	movlw	140
 10453  000972  6E39               	movwf	drawtext@y,c
 10454  000974  C04E  F03A         	movff	_txt,drawtext@_text
 10455  000978  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10456  00097C  0EFF               	movlw	255
 10457  00097E  6E3D               	movwf	drawtext@color+1,c
 10458  000980  683C               	setf	drawtext@color,c
 10459  000982  0E00               	movlw	0
 10460  000984  6E3F               	movwf	drawtext@bg+1,c
 10461  000986  0E00               	movlw	0
 10462  000988  6E3E               	movwf	drawtext@bg,c
 10463  00098A  0E01               	movlw	1
 10464  00098C  6E40               	movwf	drawtext@size,c
 10465  00098E  0E21               	movlw	33
 10466  000990  EC99  F00D         	call	_drawtext
 10467                           
 10468                           ;Main_Screen.c: 68: strcpy(txt, "Volt");
 10469  000994  C04E  F011         	movff	_txt,strcpy@to
 10470  000998  C04F  F012         	movff	_txt+1,strcpy@to+1
 10471  00099C  0EE5               	movlw	low STR_17
 10472  00099E  6E13               	movwf	strcpy@from,c
 10473  0009A0  0EFF               	movlw	high STR_17
 10474  0009A2  6E14               	movwf	strcpy@from+1,c
 10475  0009A4  ECC4  F01C         	call	_strcpy	;wreg free
 10476                           
 10477                           ;Main_Screen.c: 69: drawtext(50, 140, txt, 0xFFFF , 0x0000 , 1);
 10478  0009A8  0E8C               	movlw	140
 10479  0009AA  6E39               	movwf	drawtext@y,c
 10480  0009AC  C04E  F03A         	movff	_txt,drawtext@_text
 10481  0009B0  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10482  0009B4  0EFF               	movlw	255
 10483  0009B6  6E3D               	movwf	drawtext@color+1,c
 10484  0009B8  683C               	setf	drawtext@color,c
 10485  0009BA  0E00               	movlw	0
 10486  0009BC  6E3F               	movwf	drawtext@bg+1,c
 10487  0009BE  0E00               	movlw	0
 10488  0009C0  6E3E               	movwf	drawtext@bg,c
 10489  0009C2  0E01               	movlw	1
 10490  0009C4  6E40               	movwf	drawtext@size,c
 10491  0009C6  0E32               	movlw	50
 10492  0009C8  EC99  F00D         	call	_drawtext
 10493                           
 10494                           ;Main_Screen.c: 70: strcpy(txt, "RPM");
 10495  0009CC  C04E  F011         	movff	_txt,strcpy@to
 10496  0009D0  C04F  F012         	movff	_txt+1,strcpy@to+1
 10497  0009D4  0EF2               	movlw	low STR_18
 10498  0009D6  6E13               	movwf	strcpy@from,c
 10499  0009D8  0EFF               	movlw	high STR_18
 10500  0009DA  6E14               	movwf	strcpy@from+1,c
 10501  0009DC  ECC4  F01C         	call	_strcpy	;wreg free
 10502                           
 10503                           ;Main_Screen.c: 71: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
 10504  0009E0  0E8C               	movlw	140
 10505  0009E2  6E39               	movwf	drawtext@y,c
 10506  0009E4  C04E  F03A         	movff	_txt,drawtext@_text
 10507  0009E8  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10508  0009EC  0EFF               	movlw	255
 10509  0009EE  6E3D               	movwf	drawtext@color+1,c
 10510  0009F0  683C               	setf	drawtext@color,c
 10511  0009F2  0E00               	movlw	0
 10512  0009F4  6E3F               	movwf	drawtext@bg+1,c
 10513  0009F6  0E00               	movlw	0
 10514  0009F8  6E3E               	movwf	drawtext@bg,c
 10515  0009FA  0E01               	movlw	1
 10516  0009FC  6E40               	movwf	drawtext@size,c
 10517  0009FE  0E5F               	movlw	95
 10518  000A00  EC99  F00D         	call	_drawtext
 10519  000A04  0012               	return		;funcret
 10520  000A06                     __end_of_Initialize_Screen:
 10521                           	opt stack 0
 10522                           tblptru	equ	0xFF8
 10523                           tblptrh	equ	0xFF7
 10524                           tblptrl	equ	0xFF6
 10525                           tablat	equ	0xFF5
 10526                           prodh	equ	0xFF4
 10527                           prodl	equ	0xFF3
 10528                           intcon	equ	0xFF2
 10529                           intcon2	equ	0xFF1
 10530                           postinc0	equ	0xFEE
 10531                           wreg	equ	0xFE8
 10532                           postdec1	equ	0xFE5
 10533                           plusw1	equ	0xFE3
 10534                           fsr1l	equ	0xFE1
 10535                           indf2	equ	0xFDF
 10536                           postinc2	equ	0xFDE
 10537                           plusw2	equ	0xFDB
 10538                           fsr2h	equ	0xFDA
 10539                           fsr2l	equ	0xFD9
 10540                           status	equ	0xFD8
 10541                           
 10542 ;; *************** function _strcpy *****************
 10543 ;; Defined at:
 10544 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strcpy.c"
 10545 ;; Parameters:    Size  Location     Type
 10546 ;;  to              2   16[COMRAM] PTR unsigned char 
 10547 ;;		 -> NULL(0), Heater_SW_Txt(4), Alarm_SW_Txt(4), 
 10548 ;;  from            2   18[COMRAM] PTR const unsigned char 
 10549 ;;		 -> STR_35(5), STR_34(5), STR_33(12), STR_32(18), 
 10550 ;;		 -> STR_31(16), STR_30(10), STR_29(11), STR_28(18), 
 10551 ;;		 -> STR_26(5), STR_25(8), STR_24(8), STR_23(17), 
 10552 ;;		 -> STR_22(4), STR_21(4), STR_20(4), STR_19(4), 
 10553 ;;		 -> STR_18(4), STR_17(5), STR_16(3), STR_15(3), 
 10554 ;;		 -> STR_14(7), STR_13(13), STR_12(9), STR_11(11), 
 10555 ;;		 -> STR_10(5), STR_9(5), STR_8(2), STR_7(3), 
 10556 ;;		 -> STR_6(13), STR_5(18), 
 10557 ;; Auto vars:     Size  Location     Type
 10558 ;;  cp              2   20[COMRAM] PTR unsigned char 
 10559 ;;		 -> NULL(0), Heater_SW_Txt(4), Alarm_SW_Txt(4), 
 10560 ;; Return value:  Size  Location     Type
 10561 ;;                  2   16[COMRAM] PTR unsigned char 
 10562 ;; Registers used:
 10563 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10564 ;; Tracked objects:
 10565 ;;		On entry : 0/0
 10566 ;;		On exit  : 0/0
 10567 ;;		Unchanged: 0/0
 10568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10569 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10570 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10572 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10573 ;;Total ram usage:        6 bytes
 10574 ;; Hardware stack levels used:    1
 10575 ;; Hardware stack levels required when called:    3
 10576 ;; This function calls:
 10577 ;;		Nothing
 10578 ;; This function is called by:
 10579 ;;		_Initialize_Screen
 10580 ;;		_Update_Screen
 10581 ;;		_Initialize_Setup_Alarm_Time_Screen
 10582 ;;		_Initialize_Setup_Heater_Screen
 10583 ;;		_Initialize_Setup_Time_Screen
 10584 ;; This function uses a non-reentrant model
 10585 ;;
 10586                           
 10587                           	psect	text50
 10588  003988                     __ptext50:
 10589                           	opt stack 0
 10590  003988                     _strcpy:
 10591                           	opt stack 26
 10592                           
 10593                           ;incstack = 0
 10594  003988  C011  F015         	movff	strcpy@to,strcpy@cp
 10595  00398C  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
 10596  003990  D005               	goto	l8577
 10597  003992                     l8575:
 10598  003992  4A15               	infsnz	strcpy@cp,f,c
 10599  003994  2A16               	incf	strcpy@cp+1,f,c
 10600  003996  4A13               	infsnz	strcpy@from,f,c
 10601  003998  2A14               	incf	strcpy@from+1,f,c
 10602  00399A  D000               	goto	l8577
 10603  00399C                     l8577:
 10604  00399C  C013  FFF6         	movff	strcpy@from,tblptrl
 10605  0039A0  C014  FFF7         	movff	strcpy@from+1,tblptrh
 10606  0039A4                     	if	0	;tblptru may be non-zero
 10607  0039A4                     	endif
 10608  0039A4                     	if	0	;tblptru may be non-zero
 10609  0039A4                     	endif
 10610  0039A4  C015  FFD9         	movff	strcpy@cp,fsr2l
 10611  0039A8  C016  FFDA         	movff	strcpy@cp+1,fsr2h
 10612  0039AC  0008               	tblrd		*
 10613  0039AE  CFF5 FFDF          	movff	tablat,indf2
 10614  0039B2  50DF               	movf	indf2,w,c
 10615  0039B4  A4D8               	btfss	status,2,c
 10616  0039B6  D7ED               	goto	l8575
 10617                           
 10618                           ;	Return value of _strcpy is never used
 10619  0039B8  0012               	return		;funcret
 10620  0039BA                     __end_of_strcpy:
 10621                           	opt stack 0
 10622                           tblptru	equ	0xFF8
 10623                           tblptrh	equ	0xFF7
 10624                           tblptrl	equ	0xFF6
 10625                           tablat	equ	0xFF5
 10626                           prodh	equ	0xFF4
 10627                           prodl	equ	0xFF3
 10628                           intcon	equ	0xFF2
 10629                           intcon2	equ	0xFF1
 10630                           postinc0	equ	0xFEE
 10631                           wreg	equ	0xFE8
 10632                           postdec1	equ	0xFE5
 10633                           plusw1	equ	0xFE3
 10634                           fsr1l	equ	0xFE1
 10635                           indf2	equ	0xFDF
 10636                           postinc2	equ	0xFDE
 10637                           plusw2	equ	0xFDB
 10638                           fsr2h	equ	0xFDA
 10639                           fsr2l	equ	0xFD9
 10640                           status	equ	0xFD8
 10641                           
 10642 ;; *************** function _fillScreen *****************
 10643 ;; Defined at:
 10644 ;;		line 619 in file "ST7735_TFT.c"
 10645 ;; Parameters:    Size  Location     Type
 10646 ;;  color           2   35[COMRAM] unsigned int 
 10647 ;; Auto vars:     Size  Location     Type
 10648 ;;		None
 10649 ;; Return value:  Size  Location     Type
 10650 ;;		None               void
 10651 ;; Registers used:
 10652 ;;		wreg, status,2, status,0, cstack
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10658 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10661 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10662 ;;Total ram usage:        2 bytes
 10663 ;; Hardware stack levels used:    1
 10664 ;; Hardware stack levels required when called:    7
 10665 ;; This function calls:
 10666 ;;		_fillRectangle
 10667 ;; This function is called by:
 10668 ;;		_Initialize_Screen
 10669 ;;		_Initialize_Setup_Alarm_Time_Screen
 10670 ;;		_Initialize_Setup_Heater_Screen
 10671 ;;		_Initialize_Setup_Time_Screen
 10672 ;; This function uses a non-reentrant model
 10673 ;;
 10674                           
 10675                           	psect	text51
 10676  003B7C                     __ptext51:
 10677                           	opt stack 0
 10678  003B7C                     _fillScreen:
 10679                           	opt stack 22
 10680                           
 10681                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
 10682                           
 10683                           ;incstack = 0
 10684  003B7C  0E00               	movlw	0
 10685  003B7E  6E18               	movwf	fillRectangle@y,c
 10686  003B80  0E80               	movlw	128
 10687  003B82  6E19               	movwf	fillRectangle@w,c
 10688  003B84  0EA0               	movlw	160
 10689  003B86  6E1A               	movwf	fillRectangle@h,c
 10690  003B88  C024  F01B         	movff	fillScreen@color,fillRectangle@color
 10691  003B8C  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
 10692  003B90  0E00               	movlw	0
 10693  003B92  ECF7  F011         	call	_fillRectangle
 10694  003B96  0012               	return		;funcret
 10695  003B98                     __end_of_fillScreen:
 10696                           	opt stack 0
 10697                           tblptru	equ	0xFF8
 10698                           tblptrh	equ	0xFF7
 10699                           tblptrl	equ	0xFF6
 10700                           tablat	equ	0xFF5
 10701                           prodh	equ	0xFF4
 10702                           prodl	equ	0xFF3
 10703                           intcon	equ	0xFF2
 10704                           intcon2	equ	0xFF1
 10705                           postinc0	equ	0xFEE
 10706                           wreg	equ	0xFE8
 10707                           postdec1	equ	0xFE5
 10708                           plusw1	equ	0xFE3
 10709                           fsr1l	equ	0xFE1
 10710                           indf2	equ	0xFDF
 10711                           postinc2	equ	0xFDE
 10712                           plusw2	equ	0xFDB
 10713                           fsr2h	equ	0xFDA
 10714                           fsr2l	equ	0xFD9
 10715                           status	equ	0xFD8
 10716                           
 10717 ;; *************** function _fillRectangle *****************
 10718 ;; Defined at:
 10719 ;;		line 503 in file "ST7735_TFT.c"
 10720 ;; Parameters:    Size  Location     Type
 10721 ;;  x               1    wreg     unsigned char 
 10722 ;;  y               1   23[COMRAM] unsigned char 
 10723 ;;  w               1   24[COMRAM] unsigned char 
 10724 ;;  h               1   25[COMRAM] unsigned char 
 10725 ;;  color           2   26[COMRAM] unsigned int 
 10726 ;; Auto vars:     Size  Location     Type
 10727 ;;  x               1   34[COMRAM] unsigned char 
 10728 ;;  lo              1   33[COMRAM] unsigned char 
 10729 ;;  hi              1   32[COMRAM] unsigned char 
 10730 ;; Return value:  Size  Location     Type
 10731 ;;		None               void
 10732 ;; Registers used:
 10733 ;;		wreg, status,2, status,0, cstack
 10734 ;; Tracked objects:
 10735 ;;		On entry : 0/0
 10736 ;;		On exit  : 0/0
 10737 ;;		Unchanged: 0/0
 10738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10739 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10740 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10741 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10742 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10743 ;;Total ram usage:       12 bytes
 10744 ;; Hardware stack levels used:    1
 10745 ;; Hardware stack levels required when called:    6
 10746 ;; This function calls:
 10747 ;;		_setAddrWindow
 10748 ;;		_spiwrite
 10749 ;; This function is called by:
 10750 ;;		_fillScreen
 10751 ;; This function uses a non-reentrant model
 10752 ;;
 10753                           
 10754                           	psect	text52
 10755  0023EE                     __ptext52:
 10756                           	opt stack 0
 10757  0023EE                     _fillRectangle:
 10758                           	opt stack 22
 10759                           
 10760                           ;incstack = 0
 10761                           ;fillRectangle@x stored from wreg
 10762  0023EE  6E23               	movwf	fillRectangle@x,c
 10763                           
 10764                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
 10765                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
 10766  0023F0  0E80               	movlw	128
 10767  0023F2  6023               	cpfslt	fillRectangle@x,c
 10768  0023F4  D069               	goto	l832
 10769  0023F6  0E9F               	movlw	159
 10770  0023F8  6418               	cpfsgt	fillRectangle@y,c
 10771  0023FA  D001               	goto	l8209
 10772                           
 10773                           ;ST7735_TFT.c: 507: return;
 10774  0023FC  D065               	goto	l832
 10775  0023FE                     l8209:
 10776                           
 10777                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
 10778  0023FE  0EFF               	movlw	255
 10779  002400  6E1D               	movwf	??_fillRectangle& (0+255),c
 10780  002402  0EFF               	movlw	255
 10781  002404  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10782  002406  5019               	movf	fillRectangle@w,w,c
 10783  002408  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
 10784  00240C  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 10785  00240E  261F               	addwf	??_fillRectangle+2,f,c
 10786  002410  0E00               	movlw	0
 10787  002412  2220               	addwfc	??_fillRectangle+3,f,c
 10788  002414  501D               	movf	??_fillRectangle,w,c
 10789  002416  261F               	addwf	??_fillRectangle+2,f,c
 10790  002418  501E               	movf	??_fillRectangle+1,w,c
 10791  00241A  2220               	addwfc	??_fillRectangle+3,f,c
 10792  00241C  BE20               	btfsc	??_fillRectangle+3,7,c
 10793  00241E  D00A               	goto	l833
 10794  002420  5020               	movf	??_fillRectangle+3,w,c
 10795  002422  E104               	bnz	u5740
 10796  002424  0E80               	movlw	128
 10797  002426  5C1F               	subwf	??_fillRectangle+2,w,c
 10798  002428  A0D8               	btfss	status,0,c
 10799  00242A  D004               	goto	l833
 10800  00242C                     u5740:
 10801                           
 10802                           ;ST7735_TFT.c: 509: w = 128 - x;
 10803  00242C  5023               	movf	fillRectangle@x,w,c
 10804  00242E  0800               	sublw	0
 10805  002430  0F80               	addlw	128
 10806  002432  6E19               	movwf	fillRectangle@w,c
 10807  002434                     l833:
 10808                           
 10809                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
 10810  002434  0EFF               	movlw	255
 10811  002436  6E1D               	movwf	??_fillRectangle& (0+255),c
 10812  002438  0EFF               	movlw	255
 10813  00243A  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10814  00243C  501A               	movf	fillRectangle@h,w,c
 10815  00243E  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
 10816  002442  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 10817  002444  261F               	addwf	??_fillRectangle+2,f,c
 10818  002446  0E00               	movlw	0
 10819  002448  2220               	addwfc	??_fillRectangle+3,f,c
 10820  00244A  501D               	movf	??_fillRectangle,w,c
 10821  00244C  261F               	addwf	??_fillRectangle+2,f,c
 10822  00244E  501E               	movf	??_fillRectangle+1,w,c
 10823  002450  2220               	addwfc	??_fillRectangle+3,f,c
 10824  002452  BE20               	btfsc	??_fillRectangle+3,7,c
 10825  002454  D00B               	goto	l8215
 10826  002456  5020               	movf	??_fillRectangle+3,w,c
 10827  002458  E104               	bnz	u5750
 10828  00245A  0EA0               	movlw	160
 10829  00245C  5C1F               	subwf	??_fillRectangle+2,w,c
 10830  00245E  A0D8               	btfss	status,0,c
 10831  002460  D005               	goto	l8215
 10832  002462                     u5750:
 10833                           
 10834                           ;ST7735_TFT.c: 511: h = 160 - y;
 10835  002462  5018               	movf	fillRectangle@y,w,c
 10836  002464  0800               	sublw	0
 10837  002466  0FA0               	addlw	160
 10838  002468  6E1A               	movwf	fillRectangle@h,c
 10839  00246A  D000               	goto	l8215
 10840  00246C                     l8215:
 10841                           
 10842                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
 10843  00246C  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
 10844  002470  5023               	movf	fillRectangle@x,w,c
 10845  002472  2419               	addwf	fillRectangle@w,w,c
 10846  002474  6E1D               	movwf	??_fillRectangle& (0+255),c
 10847  002476  041D               	decf	??_fillRectangle,w,c
 10848  002478  6E15               	movwf	setAddrWindow@x1,c
 10849  00247A  5018               	movf	fillRectangle@y,w,c
 10850  00247C  241A               	addwf	fillRectangle@h,w,c
 10851  00247E  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10852  002480  041E               	decf	??_fillRectangle+1,w,c
 10853  002482  6E16               	movwf	setAddrWindow@y1,c
 10854  002484  5023               	movf	fillRectangle@x,w,c
 10855  002486  EC33  F01B         	call	_setAddrWindow
 10856                           
 10857                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
 10858  00248A  501C               	movf	fillRectangle@color+1,w,c
 10859  00248C  6E21               	movwf	fillRectangle@hi,c
 10860  00248E  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
 10861                           
 10862                           ;ST7735_TFT.c: 514: PORTCbits.RC1 = 1;
 10863  002492  8282               	bsf	3970,1,c	;volatile
 10864                           
 10865                           ;ST7735_TFT.c: 515: PORTCbits.RC4 = 0;
 10866  002494  9882               	bcf	3970,4,c	;volatile
 10867                           
 10868                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
 10869  002496  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
 10870  00249A                     l8227:
 10871  00249A  5018               	movf	fillRectangle@y,w,c
 10872  00249C  B4D8               	btfsc	status,2,c
 10873  00249E  D013               	goto	l836
 10874  0024A0  D001               	goto	l835
 10875  0024A2  D011               	goto	l836
 10876  0024A4                     l835:
 10877                           
 10878                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
 10879  0024A4  C019  F023         	movff	fillRectangle@w,fillRectangle@x
 10880  0024A8                     l8231:
 10881  0024A8  5023               	movf	fillRectangle@x,w,c
 10882  0024AA  B4D8               	btfsc	status,2,c
 10883  0024AC  D00A               	goto	l8241
 10884  0024AE  D001               	goto	l8235
 10885  0024B0  D008               	goto	l8241
 10886  0024B2                     l8235:
 10887                           
 10888                           ;ST7735_TFT.c: 519: spiwrite(hi);
 10889  0024B2  5021               	movf	fillRectangle@hi,w,c
 10890  0024B4  EC74  F01E         	call	_spiwrite
 10891                           
 10892                           ;ST7735_TFT.c: 520: spiwrite(lo);
 10893  0024B8  5022               	movf	fillRectangle@lo,w,c
 10894  0024BA  EC74  F01E         	call	_spiwrite
 10895  0024BE  0623               	decf	fillRectangle@x,f,c
 10896  0024C0  D7F3               	goto	l8231
 10897  0024C2                     l8241:
 10898  0024C2  0618               	decf	fillRectangle@y,f,c
 10899  0024C4  D7EA               	goto	l8227
 10900  0024C6                     l836:
 10901                           
 10902                           ;ST7735_TFT.c: 521: }
 10903                           ;ST7735_TFT.c: 522: }
 10904                           ;ST7735_TFT.c: 523: PORTCbits.RC4 = 1;
 10905  0024C6  8882               	bsf	3970,4,c	;volatile
 10906  0024C8                     l832:
 10907  0024C8  0012               	return		;funcret
 10908  0024CA                     __end_of_fillRectangle:
 10909                           	opt stack 0
 10910                           tblptru	equ	0xFF8
 10911                           tblptrh	equ	0xFF7
 10912                           tblptrl	equ	0xFF6
 10913                           tablat	equ	0xFF5
 10914                           prodh	equ	0xFF4
 10915                           prodl	equ	0xFF3
 10916                           intcon	equ	0xFF2
 10917                           intcon2	equ	0xFF1
 10918                           postinc0	equ	0xFEE
 10919                           wreg	equ	0xFE8
 10920                           postdec1	equ	0xFE5
 10921                           plusw1	equ	0xFE3
 10922                           fsr1l	equ	0xFE1
 10923                           indf2	equ	0xFDF
 10924                           postinc2	equ	0xFDE
 10925                           plusw2	equ	0xFDB
 10926                           fsr2h	equ	0xFDA
 10927                           fsr2l	equ	0xFD9
 10928                           status	equ	0xFD8
 10929                           
 10930 ;; *************** function _drawCircle *****************
 10931 ;; Defined at:
 10932 ;;		line 528 in file "ST7735_TFT.c"
 10933 ;; Parameters:    Size  Location     Type
 10934 ;;  x0              2   27[COMRAM] int 
 10935 ;;  y0              2   29[COMRAM] int 
 10936 ;;  r               2   31[COMRAM] int 
 10937 ;;  color           2   33[COMRAM] unsigned int 
 10938 ;; Auto vars:     Size  Location     Type
 10939 ;;  y               2   45[COMRAM] int 
 10940 ;;  x               2   43[COMRAM] int 
 10941 ;;  f               2   41[COMRAM] int 
 10942 ;;  ddF_y           2   39[COMRAM] int 
 10943 ;;  ddF_x           2   37[COMRAM] int 
 10944 ;; Return value:  Size  Location     Type
 10945 ;;		None               void
 10946 ;; Registers used:
 10947 ;;		wreg, status,2, status,0, cstack
 10948 ;; Tracked objects:
 10949 ;;		On entry : 0/0
 10950 ;;		On exit  : 0/0
 10951 ;;		Unchanged: 0/0
 10952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10953 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10954 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10955 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10956 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10957 ;;Total ram usage:       20 bytes
 10958 ;; Hardware stack levels used:    1
 10959 ;; Hardware stack levels required when called:    7
 10960 ;; This function calls:
 10961 ;;		_drawPixel
 10962 ;; This function is called by:
 10963 ;;		_Initialize_Screen
 10964 ;; This function uses a non-reentrant model
 10965 ;;
 10966                           
 10967                           	psect	text53
 10968  0012E2                     __ptext53:
 10969                           	opt stack 0
 10970  0012E2                     _drawCircle:
 10971                           	opt stack 22
 10972                           
 10973                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
 10974                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 10975                           
 10976                           ;incstack = 0
 10977  0012E2  C020  F024         	movff	drawCircle@r,??_drawCircle
 10978  0012E6  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 10979  0012EA  1E24               	comf	??_drawCircle,f,c
 10980  0012EC  1E25               	comf	??_drawCircle+1,f,c
 10981  0012EE  4A24               	infsnz	??_drawCircle,f,c
 10982  0012F0  2A25               	incf	??_drawCircle+1,f,c
 10983  0012F2  0E01               	movlw	1
 10984  0012F4  2424               	addwf	??_drawCircle,w,c
 10985  0012F6  6E2A               	movwf	drawCircle@f,c
 10986  0012F8  0E00               	movlw	0
 10987  0012FA  2025               	addwfc	??_drawCircle+1,w,c
 10988  0012FC  6E2B               	movwf	drawCircle@f+1,c
 10989  0012FE  0E00               	movlw	0
 10990  001300  6E27               	movwf	drawCircle@ddF_x+1,c
 10991  001302  0E01               	movlw	1
 10992  001304  6E26               	movwf	drawCircle@ddF_x,c
 10993  001306  C020  F024         	movff	drawCircle@r,??_drawCircle
 10994  00130A  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 10995  00130E  90D8               	bcf	status,0,c
 10996  001310  3624               	rlcf	??_drawCircle,f,c
 10997  001312  3625               	rlcf	??_drawCircle+1,f,c
 10998  001314  1E24               	comf	??_drawCircle,f,c
 10999  001316  1E25               	comf	??_drawCircle+1,f,c
 11000  001318  4A24               	infsnz	??_drawCircle,f,c
 11001  00131A  2A25               	incf	??_drawCircle+1,f,c
 11002  00131C  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
 11003  001320  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 11004  001324  0E00               	movlw	0
 11005  001326  6E2D               	movwf	drawCircle@x+1,c
 11006  001328  0E00               	movlw	0
 11007  00132A  6E2C               	movwf	drawCircle@x,c
 11008  00132C  C020  F02E         	movff	drawCircle@r,drawCircle@y
 11009  001330  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
 11010                           
 11011                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
 11012  001334  501E               	movf	drawCircle@y0,w,c
 11013  001336  2420               	addwf	drawCircle@r,w,c
 11014  001338  6E18               	movwf	drawPixel@y,c
 11015  00133A  C022  F019         	movff	drawCircle@color,drawPixel@color
 11016  00133E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11017  001342  501C               	movf	drawCircle@x0,w,c
 11018  001344  ECDD  F01C         	call	_drawPixel
 11019                           
 11020                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
 11021  001348  5020               	movf	drawCircle@r,w,c
 11022  00134A  0800               	sublw	0
 11023  00134C  241E               	addwf	drawCircle@y0,w,c
 11024  00134E  6E18               	movwf	drawPixel@y,c
 11025  001350  C022  F019         	movff	drawCircle@color,drawPixel@color
 11026  001354  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11027  001358  501C               	movf	drawCircle@x0,w,c
 11028  00135A  ECDD  F01C         	call	_drawPixel
 11029                           
 11030                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
 11031  00135E  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 11032  001362  C022  F019         	movff	drawCircle@color,drawPixel@color
 11033  001366  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11034  00136A  501C               	movf	drawCircle@x0,w,c
 11035  00136C  2420               	addwf	drawCircle@r,w,c
 11036  00136E  ECDD  F01C         	call	_drawPixel
 11037                           
 11038                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
 11039  001372  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 11040  001376  C022  F019         	movff	drawCircle@color,drawPixel@color
 11041  00137A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11042  00137E  5020               	movf	drawCircle@r,w,c
 11043  001380  0800               	sublw	0
 11044  001382  241C               	addwf	drawCircle@x0,w,c
 11045  001384  ECDD  F01C         	call	_drawPixel
 11046                           
 11047                           ;ST7735_TFT.c: 536: while (x < y) {
 11048  001388  D078               	goto	l8661
 11049  00138A                     l8633:
 11050                           
 11051                           ;ST7735_TFT.c: 537: if (f >= 0) {
 11052  00138A  BE2B               	btfsc	drawCircle@f+1,7,c
 11053  00138C  D00B               	goto	l843
 11054                           
 11055                           ;ST7735_TFT.c: 538: y--;
 11056  00138E  062E               	decf	drawCircle@y,f,c
 11057  001390  A0D8               	btfss	status,0,c
 11058  001392  062F               	decf	drawCircle@y+1,f,c
 11059                           
 11060                           ;ST7735_TFT.c: 539: ddF_y += 2;
 11061  001394  0E02               	movlw	2
 11062  001396  2628               	addwf	drawCircle@ddF_y,f,c
 11063  001398  0E00               	movlw	0
 11064  00139A  2229               	addwfc	drawCircle@ddF_y+1,f,c
 11065                           
 11066                           ;ST7735_TFT.c: 540: f += ddF_y;
 11067  00139C  5028               	movf	drawCircle@ddF_y,w,c
 11068  00139E  262A               	addwf	drawCircle@f,f,c
 11069  0013A0  5029               	movf	drawCircle@ddF_y+1,w,c
 11070  0013A2  222B               	addwfc	drawCircle@f+1,f,c
 11071  0013A4                     l843:
 11072                           
 11073                           ;ST7735_TFT.c: 541: }
 11074                           ;ST7735_TFT.c: 542: x++;
 11075  0013A4  4A2C               	infsnz	drawCircle@x,f,c
 11076  0013A6  2A2D               	incf	drawCircle@x+1,f,c
 11077                           
 11078                           ;ST7735_TFT.c: 543: ddF_x += 2;
 11079  0013A8  0E02               	movlw	2
 11080  0013AA  2626               	addwf	drawCircle@ddF_x,f,c
 11081  0013AC  0E00               	movlw	0
 11082  0013AE  2227               	addwfc	drawCircle@ddF_x+1,f,c
 11083                           
 11084                           ;ST7735_TFT.c: 544: f += ddF_x;
 11085  0013B0  5026               	movf	drawCircle@ddF_x,w,c
 11086  0013B2  262A               	addwf	drawCircle@f,f,c
 11087  0013B4  5027               	movf	drawCircle@ddF_x+1,w,c
 11088  0013B6  222B               	addwfc	drawCircle@f+1,f,c
 11089                           
 11090                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
 11091  0013B8  501E               	movf	drawCircle@y0,w,c
 11092  0013BA  242E               	addwf	drawCircle@y,w,c
 11093  0013BC  6E18               	movwf	drawPixel@y,c
 11094  0013BE  C022  F019         	movff	drawCircle@color,drawPixel@color
 11095  0013C2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11096  0013C6  501C               	movf	drawCircle@x0,w,c
 11097  0013C8  242C               	addwf	drawCircle@x,w,c
 11098  0013CA  ECDD  F01C         	call	_drawPixel
 11099                           
 11100                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
 11101  0013CE  501E               	movf	drawCircle@y0,w,c
 11102  0013D0  242E               	addwf	drawCircle@y,w,c
 11103  0013D2  6E18               	movwf	drawPixel@y,c
 11104  0013D4  C022  F019         	movff	drawCircle@color,drawPixel@color
 11105  0013D8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11106  0013DC  502C               	movf	drawCircle@x,w,c
 11107  0013DE  0800               	sublw	0
 11108  0013E0  241C               	addwf	drawCircle@x0,w,c
 11109  0013E2  ECDD  F01C         	call	_drawPixel
 11110                           
 11111                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
 11112  0013E6  502E               	movf	drawCircle@y,w,c
 11113  0013E8  0800               	sublw	0
 11114  0013EA  241E               	addwf	drawCircle@y0,w,c
 11115  0013EC  6E18               	movwf	drawPixel@y,c
 11116  0013EE  C022  F019         	movff	drawCircle@color,drawPixel@color
 11117  0013F2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11118  0013F6  501C               	movf	drawCircle@x0,w,c
 11119  0013F8  242C               	addwf	drawCircle@x,w,c
 11120  0013FA  ECDD  F01C         	call	_drawPixel
 11121                           
 11122                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
 11123  0013FE  502E               	movf	drawCircle@y,w,c
 11124  001400  0800               	sublw	0
 11125  001402  241E               	addwf	drawCircle@y0,w,c
 11126  001404  6E18               	movwf	drawPixel@y,c
 11127  001406  C022  F019         	movff	drawCircle@color,drawPixel@color
 11128  00140A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11129  00140E  502C               	movf	drawCircle@x,w,c
 11130  001410  0800               	sublw	0
 11131  001412  241C               	addwf	drawCircle@x0,w,c
 11132  001414  ECDD  F01C         	call	_drawPixel
 11133                           
 11134                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
 11135  001418  501E               	movf	drawCircle@y0,w,c
 11136  00141A  242C               	addwf	drawCircle@x,w,c
 11137  00141C  6E18               	movwf	drawPixel@y,c
 11138  00141E  C022  F019         	movff	drawCircle@color,drawPixel@color
 11139  001422  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11140  001426  501C               	movf	drawCircle@x0,w,c
 11141  001428  242E               	addwf	drawCircle@y,w,c
 11142  00142A  ECDD  F01C         	call	_drawPixel
 11143                           
 11144                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
 11145  00142E  501E               	movf	drawCircle@y0,w,c
 11146  001430  242C               	addwf	drawCircle@x,w,c
 11147  001432  6E18               	movwf	drawPixel@y,c
 11148  001434  C022  F019         	movff	drawCircle@color,drawPixel@color
 11149  001438  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11150  00143C  502E               	movf	drawCircle@y,w,c
 11151  00143E  0800               	sublw	0
 11152  001440  241C               	addwf	drawCircle@x0,w,c
 11153  001442  ECDD  F01C         	call	_drawPixel
 11154                           
 11155                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
 11156  001446  502C               	movf	drawCircle@x,w,c
 11157  001448  0800               	sublw	0
 11158  00144A  241E               	addwf	drawCircle@y0,w,c
 11159  00144C  6E18               	movwf	drawPixel@y,c
 11160  00144E  C022  F019         	movff	drawCircle@color,drawPixel@color
 11161  001452  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11162  001456  501C               	movf	drawCircle@x0,w,c
 11163  001458  242E               	addwf	drawCircle@y,w,c
 11164  00145A  ECDD  F01C         	call	_drawPixel
 11165                           
 11166                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
 11167  00145E  502C               	movf	drawCircle@x,w,c
 11168  001460  0800               	sublw	0
 11169  001462  241E               	addwf	drawCircle@y0,w,c
 11170  001464  6E18               	movwf	drawPixel@y,c
 11171  001466  C022  F019         	movff	drawCircle@color,drawPixel@color
 11172  00146A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11173  00146E  502E               	movf	drawCircle@y,w,c
 11174  001470  0800               	sublw	0
 11175  001472  241C               	addwf	drawCircle@x0,w,c
 11176  001474  ECDD  F01C         	call	_drawPixel
 11177  001478  D000               	goto	l8661
 11178  00147A                     l8661:
 11179  00147A  502E               	movf	drawCircle@y,w,c
 11180  00147C  5C2C               	subwf	drawCircle@x,w,c
 11181  00147E  502D               	movf	drawCircle@x+1,w,c
 11182  001480  0A80               	xorlw	128
 11183  001482  6E24               	movwf	??_drawCircle& (0+255),c
 11184  001484  502F               	movf	drawCircle@y+1,w,c
 11185  001486  0A80               	xorlw	128
 11186  001488  5824               	subwfb	??_drawCircle& (0+255),w,c
 11187  00148A  A0D8               	btfss	status,0,c
 11188  00148C  D77E               	goto	l8633
 11189  00148E  0012               	return		;funcret
 11190  001490                     __end_of_drawCircle:
 11191                           	opt stack 0
 11192                           tblptru	equ	0xFF8
 11193                           tblptrh	equ	0xFF7
 11194                           tblptrl	equ	0xFF6
 11195                           tablat	equ	0xFF5
 11196                           prodh	equ	0xFF4
 11197                           prodl	equ	0xFF3
 11198                           intcon	equ	0xFF2
 11199                           intcon2	equ	0xFF1
 11200                           postinc0	equ	0xFEE
 11201                           wreg	equ	0xFE8
 11202                           postdec1	equ	0xFE5
 11203                           plusw1	equ	0xFE3
 11204                           fsr1l	equ	0xFE1
 11205                           indf2	equ	0xFDF
 11206                           postinc2	equ	0xFDE
 11207                           plusw2	equ	0xFDB
 11208                           fsr2h	equ	0xFDA
 11209                           fsr2l	equ	0xFD9
 11210                           status	equ	0xFD8
 11211                           
 11212 ;; *************** function _TFT_GreenTab_Initialize *****************
 11213 ;; Defined at:
 11214 ;;		line 644 in file "ST7735_TFT.c"
 11215 ;; Parameters:    Size  Location     Type
 11216 ;;		None
 11217 ;; Auto vars:     Size  Location     Type
 11218 ;;		None
 11219 ;; Return value:  Size  Location     Type
 11220 ;;		None               void
 11221 ;; Registers used:
 11222 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11223 ;; Tracked objects:
 11224 ;;		On entry : 0/0
 11225 ;;		On exit  : 0/0
 11226 ;;		Unchanged: 0/0
 11227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11232 ;;Total ram usage:        0 bytes
 11233 ;; Hardware stack levels used:    1
 11234 ;; Hardware stack levels required when called:    6
 11235 ;; This function calls:
 11236 ;;		_Rcmd1
 11237 ;;		_Rcmd2red
 11238 ;;		_Rcmd3
 11239 ;;		_write_command
 11240 ;;		_write_data
 11241 ;; This function is called by:
 11242 ;;		_Initialize_Screen
 11243 ;; This function uses a non-reentrant model
 11244 ;;
 11245                           
 11246                           	psect	text54
 11247  003A14                     __ptext54:
 11248                           	opt stack 0
 11249  003A14                     _TFT_GreenTab_Initialize:
 11250                           	opt stack 23
 11251                           
 11252                           ;ST7735_TFT.c: 646: PORTCbits.RC4 = 1;
 11253                           
 11254                           ;incstack = 0
 11255  003A14  8882               	bsf	3970,4,c	;volatile
 11256                           
 11257                           ;ST7735_TFT.c: 647: PORTCbits.RC1 = 0;
 11258  003A16  9282               	bcf	3970,1,c	;volatile
 11259                           
 11260                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
 11261  003A18  0E80               	movlw	128
 11262  003A1A  6EC7               	movwf	4039,c	;volatile
 11263                           
 11264                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
 11265  003A1C  0E30               	movlw	48
 11266  003A1E  6EC6               	movwf	4038,c	;volatile
 11267                           
 11268                           ;ST7735_TFT.c: 653: Rcmd1();
 11269  003A20  EC11  F00D         	call	_Rcmd1	;wreg free
 11270                           
 11271                           ;ST7735_TFT.c: 654: Rcmd2red();
 11272  003A24  EC30  F01C         	call	_Rcmd2red	;wreg free
 11273                           
 11274                           ;ST7735_TFT.c: 655: Rcmd3();
 11275  003A28  EC21  F010         	call	_Rcmd3	;wreg free
 11276                           
 11277                           ;ST7735_TFT.c: 656: write_command(0x36);
 11278  003A2C  0E36               	movlw	54
 11279  003A2E  ECF0  F01E         	call	_write_command
 11280                           
 11281                           ;ST7735_TFT.c: 657: write_data(0xC0);
 11282  003A32  0EC0               	movlw	192
 11283  003A34  ECE8  F01E         	call	_write_data
 11284                           
 11285                           ;ST7735_TFT.c: 658: _tft_type = 1;
 11286  003A38  0E01               	movlw	1
 11287  003A3A  6E55               	movwf	__tft_type,c
 11288  003A3C  0012               	return		;funcret
 11289  003A3E                     __end_of_TFT_GreenTab_Initialize:
 11290                           	opt stack 0
 11291                           tblptru	equ	0xFF8
 11292                           tblptrh	equ	0xFF7
 11293                           tblptrl	equ	0xFF6
 11294                           tablat	equ	0xFF5
 11295                           prodh	equ	0xFF4
 11296                           prodl	equ	0xFF3
 11297                           intcon	equ	0xFF2
 11298                           intcon2	equ	0xFF1
 11299                           postinc0	equ	0xFEE
 11300                           wreg	equ	0xFE8
 11301                           postdec1	equ	0xFE5
 11302                           plusw1	equ	0xFE3
 11303                           fsr1l	equ	0xFE1
 11304                           indf2	equ	0xFDF
 11305                           postinc2	equ	0xFDE
 11306                           plusw2	equ	0xFDB
 11307                           fsr2h	equ	0xFDA
 11308                           fsr2l	equ	0xFD9
 11309                           status	equ	0xFD8
 11310                           
 11311 ;; *************** function _Rcmd3 *****************
 11312 ;; Defined at:
 11313 ;;		line 338 in file "ST7735_TFT.c"
 11314 ;; Parameters:    Size  Location     Type
 11315 ;;		None
 11316 ;; Auto vars:     Size  Location     Type
 11317 ;;		None
 11318 ;; Return value:  Size  Location     Type
 11319 ;;		None               void
 11320 ;; Registers used:
 11321 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11322 ;; Tracked objects:
 11323 ;;		On entry : 0/0
 11324 ;;		On exit  : 0/0
 11325 ;;		Unchanged: 0/0
 11326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11331 ;;Total ram usage:        0 bytes
 11332 ;; Hardware stack levels used:    1
 11333 ;; Hardware stack levels required when called:    5
 11334 ;; This function calls:
 11335 ;;		_delay_ms
 11336 ;;		_write_command
 11337 ;;		_write_data
 11338 ;; This function is called by:
 11339 ;;		_TFT_GreenTab_Initialize
 11340 ;;		_TFT_BlackTab_Initialize
 11341 ;; This function uses a non-reentrant model
 11342 ;;
 11343                           
 11344                           	psect	text55
 11345  002042                     __ptext55:
 11346                           	opt stack 0
 11347  002042                     _Rcmd3:
 11348                           	opt stack 23
 11349                           
 11350                           ;ST7735_TFT.c: 340: write_command(0xE0);
 11351                           
 11352                           ;incstack = 0
 11353  002042  0EE0               	movlw	224
 11354  002044  ECF0  F01E         	call	_write_command
 11355                           
 11356                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
 11357  002048  0E02               	movlw	2
 11358  00204A  ECE8  F01E         	call	_write_data
 11359  00204E  0E1C               	movlw	28
 11360  002050  ECE8  F01E         	call	_write_data
 11361  002054  0E07               	movlw	7
 11362  002056  ECE8  F01E         	call	_write_data
 11363  00205A  0E12               	movlw	18
 11364  00205C  ECE8  F01E         	call	_write_data
 11365                           
 11366                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
 11367  002060  0E37               	movlw	55
 11368  002062  ECE8  F01E         	call	_write_data
 11369  002066  0E32               	movlw	50
 11370  002068  ECE8  F01E         	call	_write_data
 11371  00206C  0E29               	movlw	41
 11372  00206E  ECE8  F01E         	call	_write_data
 11373  002072  0E2D               	movlw	45
 11374  002074  ECE8  F01E         	call	_write_data
 11375                           
 11376                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
 11377  002078  0E29               	movlw	41
 11378  00207A  ECE8  F01E         	call	_write_data
 11379  00207E  0E25               	movlw	37
 11380  002080  ECE8  F01E         	call	_write_data
 11381  002084  0E2B               	movlw	43
 11382  002086  ECE8  F01E         	call	_write_data
 11383  00208A  0E39               	movlw	57
 11384  00208C  ECE8  F01E         	call	_write_data
 11385                           
 11386                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
 11387  002090  0E00               	movlw	0
 11388  002092  ECE8  F01E         	call	_write_data
 11389  002096  0E01               	movlw	1
 11390  002098  ECE8  F01E         	call	_write_data
 11391  00209C  0E03               	movlw	3
 11392  00209E  ECE8  F01E         	call	_write_data
 11393  0020A2  0E10               	movlw	16
 11394  0020A4  ECE8  F01E         	call	_write_data
 11395                           
 11396                           ;ST7735_TFT.c: 345: write_command(0xE1);
 11397  0020A8  0EE1               	movlw	225
 11398  0020AA  ECF0  F01E         	call	_write_command
 11399                           
 11400                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
 11401  0020AE  0E03               	movlw	3
 11402  0020B0  ECE8  F01E         	call	_write_data
 11403  0020B4  0E1D               	movlw	29
 11404  0020B6  ECE8  F01E         	call	_write_data
 11405  0020BA  0E07               	movlw	7
 11406  0020BC  ECE8  F01E         	call	_write_data
 11407  0020C0  0E06               	movlw	6
 11408  0020C2  ECE8  F01E         	call	_write_data
 11409                           
 11410                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
 11411  0020C6  0E2E               	movlw	46
 11412  0020C8  ECE8  F01E         	call	_write_data
 11413  0020CC  0E2C               	movlw	44
 11414  0020CE  ECE8  F01E         	call	_write_data
 11415  0020D2  0E29               	movlw	41
 11416  0020D4  ECE8  F01E         	call	_write_data
 11417  0020D8  0E2D               	movlw	45
 11418  0020DA  ECE8  F01E         	call	_write_data
 11419                           
 11420                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
 11421  0020DE  0E2E               	movlw	46
 11422  0020E0  ECE8  F01E         	call	_write_data
 11423  0020E4  0E2E               	movlw	46
 11424  0020E6  ECE8  F01E         	call	_write_data
 11425  0020EA  0E37               	movlw	55
 11426  0020EC  ECE8  F01E         	call	_write_data
 11427  0020F0  0E3F               	movlw	63
 11428  0020F2  ECE8  F01E         	call	_write_data
 11429                           
 11430                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
 11431  0020F6  0E00               	movlw	0
 11432  0020F8  ECE8  F01E         	call	_write_data
 11433  0020FC  0E00               	movlw	0
 11434  0020FE  ECE8  F01E         	call	_write_data
 11435  002102  0E02               	movlw	2
 11436  002104  ECE8  F01E         	call	_write_data
 11437  002108  0E10               	movlw	16
 11438  00210A  ECE8  F01E         	call	_write_data
 11439                           
 11440                           ;ST7735_TFT.c: 350: write_command(0x13);
 11441  00210E  0E13               	movlw	19
 11442  002110  ECF0  F01E         	call	_write_command
 11443                           
 11444                           ;ST7735_TFT.c: 351: delay_ms(10);
 11445  002114  0E00               	movlw	0
 11446  002116  6E18               	movwf	delay_ms@ms+1,c
 11447  002118  0E0A               	movlw	10
 11448  00211A  6E17               	movwf	delay_ms@ms,c
 11449  00211C  EC95  F01A         	call	_delay_ms	;wreg free
 11450                           
 11451                           ;ST7735_TFT.c: 352: write_command(0x29);
 11452  002120  0E29               	movlw	41
 11453  002122  ECF0  F01E         	call	_write_command
 11454                           
 11455                           ;ST7735_TFT.c: 353: delay_ms(100);
 11456  002126  0E00               	movlw	0
 11457  002128  6E18               	movwf	delay_ms@ms+1,c
 11458  00212A  0E64               	movlw	100
 11459  00212C  6E17               	movwf	delay_ms@ms,c
 11460  00212E  EC95  F01A         	call	_delay_ms	;wreg free
 11461  002132  0012               	return		;funcret
 11462  002134                     __end_of_Rcmd3:
 11463                           	opt stack 0
 11464                           tblptru	equ	0xFF8
 11465                           tblptrh	equ	0xFF7
 11466                           tblptrl	equ	0xFF6
 11467                           tablat	equ	0xFF5
 11468                           prodh	equ	0xFF4
 11469                           prodl	equ	0xFF3
 11470                           intcon	equ	0xFF2
 11471                           intcon2	equ	0xFF1
 11472                           postinc0	equ	0xFEE
 11473                           wreg	equ	0xFE8
 11474                           postdec1	equ	0xFE5
 11475                           plusw1	equ	0xFE3
 11476                           fsr1l	equ	0xFE1
 11477                           indf2	equ	0xFDF
 11478                           postinc2	equ	0xFDE
 11479                           plusw2	equ	0xFDB
 11480                           fsr2h	equ	0xFDA
 11481                           fsr2l	equ	0xFD9
 11482                           status	equ	0xFD8
 11483                           
 11484 ;; *************** function _Rcmd2red *****************
 11485 ;; Defined at:
 11486 ;;		line 328 in file "ST7735_TFT.c"
 11487 ;; Parameters:    Size  Location     Type
 11488 ;;		None
 11489 ;; Auto vars:     Size  Location     Type
 11490 ;;		None
 11491 ;; Return value:  Size  Location     Type
 11492 ;;		None               void
 11493 ;; Registers used:
 11494 ;;		wreg, status,2, cstack
 11495 ;; Tracked objects:
 11496 ;;		On entry : 0/0
 11497 ;;		On exit  : 0/0
 11498 ;;		Unchanged: 0/0
 11499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11504 ;;Total ram usage:        0 bytes
 11505 ;; Hardware stack levels used:    1
 11506 ;; Hardware stack levels required when called:    5
 11507 ;; This function calls:
 11508 ;;		_write_command
 11509 ;;		_write_data
 11510 ;; This function is called by:
 11511 ;;		_TFT_GreenTab_Initialize
 11512 ;; This function uses a non-reentrant model
 11513 ;;
 11514                           
 11515                           	psect	text56
 11516  003860                     __ptext56:
 11517                           	opt stack 0
 11518  003860                     _Rcmd2red:
 11519                           	opt stack 23
 11520                           
 11521                           ;ST7735_TFT.c: 330: write_command(0x2A);
 11522                           
 11523                           ;incstack = 0
 11524  003860  0E2A               	movlw	42
 11525  003862  ECF0  F01E         	call	_write_command
 11526                           
 11527                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
 11528  003866  0E00               	movlw	0
 11529  003868  ECE8  F01E         	call	_write_data
 11530  00386C  0E00               	movlw	0
 11531  00386E  ECE8  F01E         	call	_write_data
 11532                           
 11533                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
 11534  003872  0E00               	movlw	0
 11535  003874  ECE8  F01E         	call	_write_data
 11536  003878  0E7F               	movlw	127
 11537  00387A  ECE8  F01E         	call	_write_data
 11538                           
 11539                           ;ST7735_TFT.c: 333: write_command(0x2B);
 11540  00387E  0E2B               	movlw	43
 11541  003880  ECF0  F01E         	call	_write_command
 11542                           
 11543                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
 11544  003884  0E00               	movlw	0
 11545  003886  ECE8  F01E         	call	_write_data
 11546  00388A  0E00               	movlw	0
 11547  00388C  ECE8  F01E         	call	_write_data
 11548                           
 11549                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
 11550  003890  0E00               	movlw	0
 11551  003892  ECE8  F01E         	call	_write_data
 11552  003896  0E9F               	movlw	159
 11553  003898  ECE8  F01E         	call	_write_data
 11554  00389C  0012               	return		;funcret
 11555  00389E                     __end_of_Rcmd2red:
 11556                           	opt stack 0
 11557                           tblptru	equ	0xFF8
 11558                           tblptrh	equ	0xFF7
 11559                           tblptrl	equ	0xFF6
 11560                           tablat	equ	0xFF5
 11561                           prodh	equ	0xFF4
 11562                           prodl	equ	0xFF3
 11563                           intcon	equ	0xFF2
 11564                           intcon2	equ	0xFF1
 11565                           postinc0	equ	0xFEE
 11566                           wreg	equ	0xFE8
 11567                           postdec1	equ	0xFE5
 11568                           plusw1	equ	0xFE3
 11569                           fsr1l	equ	0xFE1
 11570                           indf2	equ	0xFDF
 11571                           postinc2	equ	0xFDE
 11572                           plusw2	equ	0xFDB
 11573                           fsr2h	equ	0xFDA
 11574                           fsr2l	equ	0xFD9
 11575                           status	equ	0xFD8
 11576                           
 11577 ;; *************** function _Rcmd1 *****************
 11578 ;; Defined at:
 11579 ;;		line 281 in file "ST7735_TFT.c"
 11580 ;; Parameters:    Size  Location     Type
 11581 ;;		None
 11582 ;; Auto vars:     Size  Location     Type
 11583 ;;		None
 11584 ;; Return value:  Size  Location     Type
 11585 ;;		None               void
 11586 ;; Registers used:
 11587 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11588 ;; Tracked objects:
 11589 ;;		On entry : 0/0
 11590 ;;		On exit  : 0/0
 11591 ;;		Unchanged: 0/0
 11592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11597 ;;Total ram usage:        0 bytes
 11598 ;; Hardware stack levels used:    1
 11599 ;; Hardware stack levels required when called:    5
 11600 ;; This function calls:
 11601 ;;		_delay_ms
 11602 ;;		_write_command
 11603 ;;		_write_data
 11604 ;; This function is called by:
 11605 ;;		_TFT_GreenTab_Initialize
 11606 ;;		_TFT_BlackTab_Initialize
 11607 ;; This function uses a non-reentrant model
 11608 ;;
 11609                           
 11610                           	psect	text57
 11611  001A22                     __ptext57:
 11612                           	opt stack 0
 11613  001A22                     _Rcmd1:
 11614                           	opt stack 23
 11615                           
 11616                           ;ST7735_TFT.c: 283: write_command(0x01);
 11617                           
 11618                           ;incstack = 0
 11619  001A22  0E01               	movlw	1
 11620  001A24  ECF0  F01E         	call	_write_command
 11621                           
 11622                           ;ST7735_TFT.c: 284: delay_ms(150);
 11623  001A28  0E00               	movlw	0
 11624  001A2A  6E18               	movwf	delay_ms@ms+1,c
 11625  001A2C  0E96               	movlw	150
 11626  001A2E  6E17               	movwf	delay_ms@ms,c
 11627  001A30  EC95  F01A         	call	_delay_ms	;wreg free
 11628                           
 11629                           ;ST7735_TFT.c: 285: write_command(0x11);
 11630  001A34  0E11               	movlw	17
 11631  001A36  ECF0  F01E         	call	_write_command
 11632                           
 11633                           ;ST7735_TFT.c: 286: delay_ms(500);
 11634  001A3A  0E01               	movlw	1
 11635  001A3C  6E18               	movwf	delay_ms@ms+1,c
 11636  001A3E  0EF4               	movlw	244
 11637  001A40  6E17               	movwf	delay_ms@ms,c
 11638  001A42  EC95  F01A         	call	_delay_ms	;wreg free
 11639                           
 11640                           ;ST7735_TFT.c: 287: write_command(0xB1);
 11641  001A46  0EB1               	movlw	177
 11642  001A48  ECF0  F01E         	call	_write_command
 11643                           
 11644                           ;ST7735_TFT.c: 288: write_data(0x01);
 11645  001A4C  0E01               	movlw	1
 11646  001A4E  ECE8  F01E         	call	_write_data
 11647                           
 11648                           ;ST7735_TFT.c: 289: write_data(0x2C);
 11649  001A52  0E2C               	movlw	44
 11650  001A54  ECE8  F01E         	call	_write_data
 11651                           
 11652                           ;ST7735_TFT.c: 290: write_data(0x2D);
 11653  001A58  0E2D               	movlw	45
 11654  001A5A  ECE8  F01E         	call	_write_data
 11655                           
 11656                           ;ST7735_TFT.c: 291: write_command(0xB2);
 11657  001A5E  0EB2               	movlw	178
 11658  001A60  ECF0  F01E         	call	_write_command
 11659                           
 11660                           ;ST7735_TFT.c: 292: write_data(0x01);
 11661  001A64  0E01               	movlw	1
 11662  001A66  ECE8  F01E         	call	_write_data
 11663                           
 11664                           ;ST7735_TFT.c: 293: write_data(0x2C);
 11665  001A6A  0E2C               	movlw	44
 11666  001A6C  ECE8  F01E         	call	_write_data
 11667                           
 11668                           ;ST7735_TFT.c: 294: write_data(0x2D);
 11669  001A70  0E2D               	movlw	45
 11670  001A72  ECE8  F01E         	call	_write_data
 11671                           
 11672                           ;ST7735_TFT.c: 295: write_command(0xB3);
 11673  001A76  0EB3               	movlw	179
 11674  001A78  ECF0  F01E         	call	_write_command
 11675                           
 11676                           ;ST7735_TFT.c: 296: write_data(0x01);
 11677  001A7C  0E01               	movlw	1
 11678  001A7E  ECE8  F01E         	call	_write_data
 11679                           
 11680                           ;ST7735_TFT.c: 297: write_data(0x2C);
 11681  001A82  0E2C               	movlw	44
 11682  001A84  ECE8  F01E         	call	_write_data
 11683                           
 11684                           ;ST7735_TFT.c: 298: write_data(0x2D);
 11685  001A88  0E2D               	movlw	45
 11686  001A8A  ECE8  F01E         	call	_write_data
 11687                           
 11688                           ;ST7735_TFT.c: 299: write_data(0x01);
 11689  001A8E  0E01               	movlw	1
 11690  001A90  ECE8  F01E         	call	_write_data
 11691                           
 11692                           ;ST7735_TFT.c: 300: write_data(0x2C);
 11693  001A94  0E2C               	movlw	44
 11694  001A96  ECE8  F01E         	call	_write_data
 11695                           
 11696                           ;ST7735_TFT.c: 301: write_data(0x2D);
 11697  001A9A  0E2D               	movlw	45
 11698  001A9C  ECE8  F01E         	call	_write_data
 11699                           
 11700                           ;ST7735_TFT.c: 302: write_command(0xB4);
 11701  001AA0  0EB4               	movlw	180
 11702  001AA2  ECF0  F01E         	call	_write_command
 11703                           
 11704                           ;ST7735_TFT.c: 303: write_data(0x07);
 11705  001AA6  0E07               	movlw	7
 11706  001AA8  ECE8  F01E         	call	_write_data
 11707                           
 11708                           ;ST7735_TFT.c: 304: write_command(0xC0);
 11709  001AAC  0EC0               	movlw	192
 11710  001AAE  ECF0  F01E         	call	_write_command
 11711                           
 11712                           ;ST7735_TFT.c: 305: write_data(0xA2);
 11713  001AB2  0EA2               	movlw	162
 11714  001AB4  ECE8  F01E         	call	_write_data
 11715                           
 11716                           ;ST7735_TFT.c: 306: write_data(0x02);
 11717  001AB8  0E02               	movlw	2
 11718  001ABA  ECE8  F01E         	call	_write_data
 11719                           
 11720                           ;ST7735_TFT.c: 307: write_data(0x84);
 11721  001ABE  0E84               	movlw	132
 11722  001AC0  ECE8  F01E         	call	_write_data
 11723                           
 11724                           ;ST7735_TFT.c: 308: write_command(0xC1);
 11725  001AC4  0EC1               	movlw	193
 11726  001AC6  ECF0  F01E         	call	_write_command
 11727                           
 11728                           ;ST7735_TFT.c: 309: write_data(0xC5);
 11729  001ACA  0EC5               	movlw	197
 11730  001ACC  ECE8  F01E         	call	_write_data
 11731                           
 11732                           ;ST7735_TFT.c: 310: write_command(0xC2);
 11733  001AD0  0EC2               	movlw	194
 11734  001AD2  ECF0  F01E         	call	_write_command
 11735                           
 11736                           ;ST7735_TFT.c: 311: write_data(0x0A);
 11737  001AD6  0E0A               	movlw	10
 11738  001AD8  ECE8  F01E         	call	_write_data
 11739                           
 11740                           ;ST7735_TFT.c: 312: write_data(0x00);
 11741  001ADC  0E00               	movlw	0
 11742  001ADE  ECE8  F01E         	call	_write_data
 11743                           
 11744                           ;ST7735_TFT.c: 313: write_command(0xC3);
 11745  001AE2  0EC3               	movlw	195
 11746  001AE4  ECF0  F01E         	call	_write_command
 11747                           
 11748                           ;ST7735_TFT.c: 314: write_data(0x8A);
 11749  001AE8  0E8A               	movlw	138
 11750  001AEA  ECE8  F01E         	call	_write_data
 11751                           
 11752                           ;ST7735_TFT.c: 315: write_data(0x2A);
 11753  001AEE  0E2A               	movlw	42
 11754  001AF0  ECE8  F01E         	call	_write_data
 11755                           
 11756                           ;ST7735_TFT.c: 316: write_command(0xC4);
 11757  001AF4  0EC4               	movlw	196
 11758  001AF6  ECF0  F01E         	call	_write_command
 11759                           
 11760                           ;ST7735_TFT.c: 317: write_data(0x8A);
 11761  001AFA  0E8A               	movlw	138
 11762  001AFC  ECE8  F01E         	call	_write_data
 11763                           
 11764                           ;ST7735_TFT.c: 318: write_data(0xEE);
 11765  001B00  0EEE               	movlw	238
 11766  001B02  ECE8  F01E         	call	_write_data
 11767                           
 11768                           ;ST7735_TFT.c: 319: write_command(0xC5);
 11769  001B06  0EC5               	movlw	197
 11770  001B08  ECF0  F01E         	call	_write_command
 11771                           
 11772                           ;ST7735_TFT.c: 320: write_data(0x0E);
 11773  001B0C  0E0E               	movlw	14
 11774  001B0E  ECE8  F01E         	call	_write_data
 11775                           
 11776                           ;ST7735_TFT.c: 321: write_command(0x20);
 11777  001B12  0E20               	movlw	32
 11778  001B14  ECF0  F01E         	call	_write_command
 11779                           
 11780                           ;ST7735_TFT.c: 322: write_command(0x36);
 11781  001B18  0E36               	movlw	54
 11782  001B1A  ECF0  F01E         	call	_write_command
 11783                           
 11784                           ;ST7735_TFT.c: 323: write_data(0xC8);
 11785  001B1E  0EC8               	movlw	200
 11786  001B20  ECE8  F01E         	call	_write_data
 11787                           
 11788                           ;ST7735_TFT.c: 324: write_command(0x3A);
 11789  001B24  0E3A               	movlw	58
 11790  001B26  ECF0  F01E         	call	_write_command
 11791                           
 11792                           ;ST7735_TFT.c: 325: write_data(0x05);
 11793  001B2A  0E05               	movlw	5
 11794  001B2C  ECE8  F01E         	call	_write_data
 11795  001B30  0012               	return		;funcret
 11796  001B32                     __end_of_Rcmd1:
 11797                           	opt stack 0
 11798                           tblptru	equ	0xFF8
 11799                           tblptrh	equ	0xFF7
 11800                           tblptrl	equ	0xFF6
 11801                           tablat	equ	0xFF5
 11802                           prodh	equ	0xFF4
 11803                           prodl	equ	0xFF3
 11804                           intcon	equ	0xFF2
 11805                           intcon2	equ	0xFF1
 11806                           postinc0	equ	0xFEE
 11807                           wreg	equ	0xFE8
 11808                           postdec1	equ	0xFE5
 11809                           plusw1	equ	0xFE3
 11810                           fsr1l	equ	0xFE1
 11811                           indf2	equ	0xFDF
 11812                           postinc2	equ	0xFDE
 11813                           plusw2	equ	0xFDB
 11814                           fsr2h	equ	0xFDA
 11815                           fsr2l	equ	0xFD9
 11816                           status	equ	0xFD8
 11817                           
 11818 ;; *************** function _LCD_Reset *****************
 11819 ;; Defined at:
 11820 ;;		line 217 in file "ST7735_TFT.c"
 11821 ;; Parameters:    Size  Location     Type
 11822 ;;		None
 11823 ;; Auto vars:     Size  Location     Type
 11824 ;;		None
 11825 ;; Return value:  Size  Location     Type
 11826 ;;		None               void
 11827 ;; Registers used:
 11828 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11829 ;; Tracked objects:
 11830 ;;		On entry : 0/0
 11831 ;;		On exit  : 0/0
 11832 ;;		Unchanged: 0/0
 11833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11838 ;;Total ram usage:        0 bytes
 11839 ;; Hardware stack levels used:    1
 11840 ;; Hardware stack levels required when called:    5
 11841 ;; This function calls:
 11842 ;;		_delay_ms
 11843 ;; This function is called by:
 11844 ;;		_Initialize_Screen
 11845 ;; This function uses a non-reentrant model
 11846 ;;
 11847                           
 11848                           	psect	text58
 11849  003D34                     __ptext58:
 11850                           	opt stack 0
 11851  003D34                     _LCD_Reset:
 11852                           	opt stack 24
 11853                           
 11854                           ;ST7735_TFT.c: 219: PORTBbits.RB4 = 0;
 11855                           
 11856                           ;incstack = 0
 11857  003D34  9881               	bcf	3969,4,c	;volatile
 11858                           
 11859                           ;ST7735_TFT.c: 220: delay_ms(100);
 11860  003D36  0E00               	movlw	0
 11861  003D38  6E18               	movwf	delay_ms@ms+1,c
 11862  003D3A  0E64               	movlw	100
 11863  003D3C  6E17               	movwf	delay_ms@ms,c
 11864  003D3E  EC95  F01A         	call	_delay_ms	;wreg free
 11865                           
 11866                           ;ST7735_TFT.c: 221: PORTBbits.RB4 = 1;
 11867  003D42  8881               	bsf	3969,4,c	;volatile
 11868  003D44  0012               	return		;funcret
 11869  003D46                     __end_of_LCD_Reset:
 11870                           	opt stack 0
 11871                           tblptru	equ	0xFF8
 11872                           tblptrh	equ	0xFF7
 11873                           tblptrl	equ	0xFF6
 11874                           tablat	equ	0xFF5
 11875                           prodh	equ	0xFF4
 11876                           prodl	equ	0xFF3
 11877                           intcon	equ	0xFF2
 11878                           intcon2	equ	0xFF1
 11879                           postinc0	equ	0xFEE
 11880                           wreg	equ	0xFE8
 11881                           postdec1	equ	0xFE5
 11882                           plusw1	equ	0xFE3
 11883                           fsr1l	equ	0xFE1
 11884                           indf2	equ	0xFDF
 11885                           postinc2	equ	0xFDE
 11886                           plusw2	equ	0xFDB
 11887                           fsr2h	equ	0xFDA
 11888                           fsr2l	equ	0xFD9
 11889                           status	equ	0xFD8
 11890                           
 11891 ;; *************** function _delay_ms *****************
 11892 ;; Defined at:
 11893 ;;		line 64 in file "ST7735_TFT.c"
 11894 ;; Parameters:    Size  Location     Type
 11895 ;;  ms              2   22[COMRAM] int 
 11896 ;; Auto vars:     Size  Location     Type
 11897 ;;  count           2   26[COMRAM] int 
 11898 ;; Return value:  Size  Location     Type
 11899 ;;		None               void
 11900 ;; Registers used:
 11901 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11902 ;; Tracked objects:
 11903 ;;		On entry : 0/0
 11904 ;;		On exit  : 0/0
 11905 ;;		Unchanged: 0/0
 11906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11907 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11908 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11909 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11910 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11911 ;;Total ram usage:        6 bytes
 11912 ;; Hardware stack levels used:    1
 11913 ;; Hardware stack levels required when called:    4
 11914 ;; This function calls:
 11915 ;;		___wmul
 11916 ;; This function is called by:
 11917 ;;		_LCD_Reset
 11918 ;;		_Rcmd1
 11919 ;;		_Rcmd3
 11920 ;;		_Bcmd
 11921 ;; This function uses a non-reentrant model
 11922 ;;
 11923                           
 11924                           	psect	text59
 11925  00352A                     __ptext59:
 11926                           	opt stack 0
 11927  00352A                     _delay_ms:
 11928                           	opt stack 23
 11929                           
 11930                           ;ST7735_TFT.c: 70: int count;
 11931                           ;ST7735_TFT.c: 71: count = 8000000/4000/16 * ms;
 11932                           
 11933                           ;incstack = 0
 11934  00352A  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
 11935  00352E  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
 11936  003532  0E00               	movlw	0
 11937  003534  6E14               	movwf	___wmul@multiplicand+1,c
 11938  003536  0E7D               	movlw	125
 11939  003538  6E13               	movwf	___wmul@multiplicand,c
 11940  00353A  EC1F  F01D         	call	___wmul	;wreg free
 11941  00353E  C011  F01B         	movff	?___wmul,delay_ms@count
 11942  003542  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
 11943                           
 11944                           ;ST7735_TFT.c: 72: count = (0xffff - count);
 11945  003546  C01B  F019         	movff	delay_ms@count,??_delay_ms
 11946  00354A  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
 11947  00354E  1E19               	comf	??_delay_ms,f,c
 11948  003550  1E1A               	comf	??_delay_ms+1,f,c
 11949  003552  4A19               	infsnz	??_delay_ms,f,c
 11950  003554  2A1A               	incf	??_delay_ms+1,f,c
 11951  003556  0EFF               	movlw	255
 11952  003558  2419               	addwf	??_delay_ms,w,c
 11953  00355A  6E1B               	movwf	delay_ms@count,c
 11954  00355C  0EFF               	movlw	255
 11955  00355E  201A               	addwfc	??_delay_ms+1,w,c
 11956  003560  6E1C               	movwf	delay_ms@count+1,c
 11957                           
 11958                           ;ST7735_TFT.c: 74: T0CON = 0x03;
 11959  003562  0E03               	movlw	3
 11960  003564  6ED5               	movwf	4053,c	;volatile
 11961                           
 11962                           ;ST7735_TFT.c: 76: TMR0L = count & 0x00ff;
 11963  003566  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
 11964                           
 11965                           ;ST7735_TFT.c: 77: TMR0H = count >> 8;
 11966  00356A  501C               	movf	delay_ms@count+1,w,c
 11967  00356C  6ED7               	movwf	4055,c	;volatile
 11968                           
 11969                           ;ST7735_TFT.c: 79: INTCONbits.TMR0IF = 0;
 11970  00356E  94F2               	bcf	intcon,2,c	;volatile
 11971                           
 11972                           ;ST7735_TFT.c: 80: T0CONbits.TMR0ON = 1;
 11973  003570  8ED5               	bsf	4053,7,c	;volatile
 11974                           
 11975                           ;ST7735_TFT.c: 82: while (INTCONbits.TMR0IF == 0);
 11976  003572  D000               	goto	l719
 11977  003574                     l719:
 11978  003574  A4F2               	btfss	intcon,2,c	;volatile
 11979  003576  D7FE               	goto	l719
 11980                           
 11981                           ;ST7735_TFT.c: 83: T0CONbits.TMR0ON = 0;
 11982  003578  9ED5               	bcf	4053,7,c	;volatile
 11983  00357A  0012               	return		;funcret
 11984  00357C                     __end_of_delay_ms:
 11985                           	opt stack 0
 11986                           tblptru	equ	0xFF8
 11987                           tblptrh	equ	0xFF7
 11988                           tblptrl	equ	0xFF6
 11989                           tablat	equ	0xFF5
 11990                           prodh	equ	0xFF4
 11991                           prodl	equ	0xFF3
 11992                           intcon	equ	0xFF2
 11993                           intcon2	equ	0xFF1
 11994                           postinc0	equ	0xFEE
 11995                           wreg	equ	0xFE8
 11996                           postdec1	equ	0xFE5
 11997                           plusw1	equ	0xFE3
 11998                           fsr1l	equ	0xFE1
 11999                           indf2	equ	0xFDF
 12000                           postinc2	equ	0xFDE
 12001                           plusw2	equ	0xFDB
 12002                           fsr2h	equ	0xFDA
 12003                           fsr2l	equ	0xFD9
 12004                           status	equ	0xFD8
 12005                           
 12006 ;; *************** function _DS3231_Write_Alarm_Time *****************
 12007 ;; Defined at:
 12008 ;;		line 169 in file "I2C_Support.c"
 12009 ;; Parameters:    Size  Location     Type
 12010 ;;		None
 12011 ;; Auto vars:     Size  Location     Type
 12012 ;;  Address         1   12[BANK1 ] unsigned char 
 12013 ;;  Device          1   11[BANK1 ] unsigned char 
 12014 ;; Return value:  Size  Location     Type
 12015 ;;		None               void
 12016 ;; Registers used:
 12017 ;;		wreg, status,2, status,0, cstack
 12018 ;; Tracked objects:
 12019 ;;		On entry : 0/0
 12020 ;;		On exit  : 0/0
 12021 ;;		Unchanged: 0/0
 12022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12024 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12026 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12027 ;;Total ram usage:        2 bytes
 12028 ;; Hardware stack levels used:    1
 12029 ;; Hardware stack levels required when called:    7
 12030 ;; This function calls:
 12031 ;;		_DS3231_Read_Time
 12032 ;;		_I2C_Start
 12033 ;;		_I2C_Stop
 12034 ;;		_I2C_Write
 12035 ;;		_dec_2_bcd
 12036 ;; This function is called by:
 12037 ;;		_Do_Save_New_Alarm_Time
 12038 ;; This function uses a non-reentrant model
 12039 ;;
 12040                           
 12041                           	psect	text60
 12042  002FC6                     __ptext60:
 12043                           	opt stack 0
 12044  002FC6                     _DS3231_Write_Alarm_Time:
 12045                           	opt stack 21
 12046                           
 12047                           ;I2C_Support.c: 171: DS3231_Read_Time();
 12048                           
 12049                           ;incstack = 0
 12050  002FC6  EC00  F019         	call	_DS3231_Read_Time	;wreg free
 12051                           
 12052                           ;I2C_Support.c: 172: alarm_date = day;
 12053  002FCA  C05B  F056         	movff	_day,_alarm_date
 12054                           
 12055                           ;I2C_Support.c: 173: char Device = 0x68;
 12056  002FCE  0E68               	movlw	104
 12057  002FD0  0101               	movlb	1	; () banked
 12058  002FD2  6F5E               	movwf	DS3231_Write_Alarm_Time@Device& (0+255),b
 12059                           
 12060                           ; BSR set to: 1
 12061                           ;I2C_Support.c: 174: char Address = 0x07;
 12062  002FD4  0E07               	movlw	7
 12063  002FD6  0101               	movlb	1	; () banked
 12064  002FD8  6F5F               	movwf	DS3231_Write_Alarm_Time@Address& (0+255),b
 12065                           
 12066                           ;I2C_Support.c: 175: alarm_hour = dec_2_bcd(setup_alarm_hour);
 12067  002FDA  5064               	movf	_setup_alarm_hour,w,c
 12068  002FDC  ECCC  F018         	call	_dec_2_bcd
 12069  002FE0  5041               	movf	?_dec_2_bcd,w,c
 12070  002FE2  6E57               	movwf	_alarm_hour,c
 12071                           
 12072                           ;I2C_Support.c: 176: alarm_minute = dec_2_bcd(setup_alarm_minute);
 12073  002FE4  5065               	movf	_setup_alarm_minute,w,c
 12074  002FE6  ECCC  F018         	call	_dec_2_bcd
 12075  002FEA  5041               	movf	?_dec_2_bcd,w,c
 12076  002FEC  6E58               	movwf	_alarm_minute,c
 12077                           
 12078                           ;I2C_Support.c: 177: alarm_second = dec_2_bcd(setup_alarm_second);
 12079  002FEE  5066               	movf	_setup_alarm_second,w,c
 12080  002FF0  ECCC  F018         	call	_dec_2_bcd
 12081  002FF4  5041               	movf	?_dec_2_bcd,w,c
 12082  002FF6  6E59               	movwf	_alarm_second,c
 12083                           
 12084                           ;I2C_Support.c: 178: alarm_second = alarm_second & 0x7f;
 12085  002FF8  5059               	movf	_alarm_second,w,c
 12086  002FFA  0B7F               	andlw	127
 12087  002FFC  6E59               	movwf	_alarm_second,c
 12088                           
 12089                           ;I2C_Support.c: 179: alarm_minute = alarm_minute & 0x7f;
 12090  002FFE  5058               	movf	_alarm_minute,w,c
 12091  003000  0B7F               	andlw	127
 12092  003002  6E58               	movwf	_alarm_minute,c
 12093                           
 12094                           ;I2C_Support.c: 180: alarm_hour = alarm_hour & 0x7f;
 12095  003004  5057               	movf	_alarm_hour,w,c
 12096  003006  0B7F               	andlw	127
 12097  003008  6E57               	movwf	_alarm_hour,c
 12098                           
 12099                           ;I2C_Support.c: 181: alarm_date = alarm_date | 0x80;
 12100  00300A  5056               	movf	_alarm_date,w,c
 12101  00300C  0980               	iorlw	128
 12102  00300E  6E56               	movwf	_alarm_date,c
 12103                           
 12104                           ;I2C_Support.c: 182: I2C_Start();
 12105  003010  ECBE  F01E         	call	_I2C_Start	;wreg free
 12106                           
 12107                           ;I2C_Support.c: 183: I2C_Write((Device << 1) | 0);
 12108  003014  0101               	movlb	1	; () banked
 12109  003016  515E               	movf	DS3231_Write_Alarm_Time@Device& (0+255),w,b
 12110  003018  255E               	addwf	DS3231_Write_Alarm_Time@Device& (0+255),w,b
 12111  00301A  EC6E  F01C         	call	_I2C_Write
 12112                           
 12113                           ;I2C_Support.c: 184: I2C_Write(Address);
 12114  00301E  0101               	movlb	1	; () banked
 12115  003020  515F               	movf	DS3231_Write_Alarm_Time@Address& (0+255),w,b
 12116  003022  EC6E  F01C         	call	_I2C_Write
 12117                           
 12118                           ;I2C_Support.c: 186: I2C_Write(alarm_second);
 12119  003026  5059               	movf	_alarm_second,w,c
 12120  003028  EC6E  F01C         	call	_I2C_Write
 12121                           
 12122                           ;I2C_Support.c: 187: I2C_Write(alarm_minute);
 12123  00302C  5058               	movf	_alarm_minute,w,c
 12124  00302E  EC6E  F01C         	call	_I2C_Write
 12125                           
 12126                           ;I2C_Support.c: 188: I2C_Write(alarm_hour);
 12127  003032  5057               	movf	_alarm_hour,w,c
 12128  003034  EC6E  F01C         	call	_I2C_Write
 12129                           
 12130                           ;I2C_Support.c: 189: I2C_Write(alarm_date);
 12131  003038  5056               	movf	_alarm_date,w,c
 12132  00303A  EC6E  F01C         	call	_I2C_Write
 12133                           
 12134                           ;I2C_Support.c: 190: I2C_Stop();
 12135  00303E  ECB5  F01E         	call	_I2C_Stop	;wreg free
 12136  003042  0012               	return		;funcret
 12137  003044                     __end_of_DS3231_Write_Alarm_Time:
 12138                           	opt stack 0
 12139                           tblptru	equ	0xFF8
 12140                           tblptrh	equ	0xFF7
 12141                           tblptrl	equ	0xFF6
 12142                           tablat	equ	0xFF5
 12143                           prodh	equ	0xFF4
 12144                           prodl	equ	0xFF3
 12145                           intcon	equ	0xFF2
 12146                           intcon2	equ	0xFF1
 12147                           postinc0	equ	0xFEE
 12148                           wreg	equ	0xFE8
 12149                           postdec1	equ	0xFE5
 12150                           plusw1	equ	0xFE3
 12151                           fsr1l	equ	0xFE1
 12152                           indf2	equ	0xFDF
 12153                           postinc2	equ	0xFDE
 12154                           plusw2	equ	0xFDB
 12155                           fsr2h	equ	0xFDA
 12156                           fsr2l	equ	0xFD9
 12157                           status	equ	0xFD8
 12158                           
 12159 ;; *************** function _dec_2_bcd *****************
 12160 ;; Defined at:
 12161 ;;		line 53 in file "utils.c"
 12162 ;; Parameters:    Size  Location     Type
 12163 ;;  dec             1    wreg     unsigned char 
 12164 ;; Auto vars:     Size  Location     Type
 12165 ;;  dec             1   10[BANK1 ] unsigned char 
 12166 ;;  bcd             2    8[BANK1 ] int 
 12167 ;; Return value:  Size  Location     Type
 12168 ;;                  2   64[COMRAM] int 
 12169 ;; Registers used:
 12170 ;;		wreg, status,2, status,0, cstack
 12171 ;; Tracked objects:
 12172 ;;		On entry : 0/0
 12173 ;;		On exit  : 0/0
 12174 ;;		Unchanged: 0/0
 12175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12176 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12177 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12178 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12179 ;;      Totals:         2       2       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12180 ;;Total ram usage:        7 bytes
 12181 ;; Hardware stack levels used:    1
 12182 ;; Hardware stack levels required when called:    4
 12183 ;; This function calls:
 12184 ;;		___awdiv
 12185 ;;		___awmod
 12186 ;; This function is called by:
 12187 ;;		_DS3231_Write_Time
 12188 ;;		_DS3231_Write_Alarm_Time
 12189 ;; This function uses a non-reentrant model
 12190 ;;
 12191                           
 12192                           	psect	text61
 12193  003198                     __ptext61:
 12194                           	opt stack 0
 12195  003198                     _dec_2_bcd:
 12196                           	opt stack 23
 12197                           
 12198                           ;incstack = 0
 12199                           ;dec_2_bcd@dec stored from wreg
 12200  003198  0101               	movlb	1	; () banked
 12201  00319A  6F5D               	movwf	dec_2_bcd@dec& (0+255),b
 12202                           
 12203                           ; BSR set to: 1
 12204                           ;utils.c: 55: int bcd;
 12205                           ;utils.c: 56: bcd = ((dec / 10) << 4) + (dec % 10);
 12206  00319C  C15D  F153         	movff	dec_2_bcd@dec,___awdiv@dividend
 12207  0031A0  0101               	movlb	1	; () banked
 12208  0031A2  6B54               	clrf	(___awdiv@dividend+1)& (0+255),b
 12209  0031A4  0E00               	movlw	0
 12210  0031A6  0101               	movlb	1	; () banked
 12211  0031A8  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
 12212  0031AA  0E0A               	movlw	10
 12213  0031AC  6F55               	movwf	___awdiv@divisor& (0+255),b
 12214  0031AE  ECCD  F012         	call	___awdiv	;wreg free
 12215  0031B2  C153  F0FD         	movff	?___awdiv,??_dec_2_bcd
 12216  0031B6  C154  F0FE         	movff	?___awdiv+1,??_dec_2_bcd+1
 12217  0031BA  0100               	movlb	0	; () banked
 12218  0031BC  3BFD               	swapf	??_dec_2_bcd& (0+255),f,b
 12219  0031BE  3BFE               	swapf	(??_dec_2_bcd+1)& (0+255),f,b
 12220  0031C0  0EF0               	movlw	240
 12221  0031C2  17FE               	andwf	(??_dec_2_bcd+1)& (0+255),f,b
 12222  0031C4  51FD               	movf	??_dec_2_bcd& (0+255),w,b
 12223  0031C6  0B0F               	andlw	15
 12224  0031C8  13FE               	iorwf	(??_dec_2_bcd+1)& (0+255),f,b
 12225  0031CA  0EF0               	movlw	240
 12226  0031CC  17FD               	andwf	??_dec_2_bcd& (0+255),f,b
 12227  0031CE  C15D  F03B         	movff	dec_2_bcd@dec,___awmod@dividend
 12228  0031D2  6A3C               	clrf	___awmod@dividend+1,c
 12229  0031D4  0E00               	movlw	0
 12230  0031D6  6E3E               	movwf	___awmod@divisor+1,c
 12231  0031D8  0E0A               	movlw	10
 12232  0031DA  6E3D               	movwf	___awmod@divisor,c
 12233  0031DC  EC63  F017         	call	___awmod	;wreg free
 12234  0031E0  503B               	movf	?___awmod,w,c
 12235  0031E2  0100               	movlb	0	; () banked
 12236  0031E4  25FD               	addwf	??_dec_2_bcd& (0+255),w,b
 12237  0031E6  0101               	movlb	1	; () banked
 12238  0031E8  6F5B               	movwf	dec_2_bcd@bcd& (0+255),b
 12239  0031EA  503C               	movf	?___awmod+1,w,c
 12240  0031EC  0100               	movlb	0	; () banked
 12241  0031EE  21FE               	addwfc	(??_dec_2_bcd+1)& (0+255),w,b
 12242  0031F0  0101               	movlb	1	; () banked
 12243  0031F2  6F5C               	movwf	(dec_2_bcd@bcd+1)& (0+255),b
 12244                           
 12245                           ; BSR set to: 1
 12246                           ;utils.c: 57: return bcd;
 12247  0031F4  C15B  F041         	movff	dec_2_bcd@bcd,?_dec_2_bcd
 12248  0031F8  C15C  F042         	movff	dec_2_bcd@bcd+1,?_dec_2_bcd+1
 12249  0031FC  D000               	goto	l1360
 12250  0031FE                     l1360:
 12251                           
 12252                           ; BSR set to: 1
 12253  0031FE  0012               	return		;funcret
 12254  003200                     __end_of_dec_2_bcd:
 12255                           	opt stack 0
 12256                           tblptru	equ	0xFF8
 12257                           tblptrh	equ	0xFF7
 12258                           tblptrl	equ	0xFF6
 12259                           tablat	equ	0xFF5
 12260                           prodh	equ	0xFF4
 12261                           prodl	equ	0xFF3
 12262                           intcon	equ	0xFF2
 12263                           intcon2	equ	0xFF1
 12264                           postinc0	equ	0xFEE
 12265                           wreg	equ	0xFE8
 12266                           postdec1	equ	0xFE5
 12267                           plusw1	equ	0xFE3
 12268                           fsr1l	equ	0xFE1
 12269                           indf2	equ	0xFDF
 12270                           postinc2	equ	0xFDE
 12271                           plusw2	equ	0xFDB
 12272                           fsr2h	equ	0xFDA
 12273                           fsr2l	equ	0xFD9
 12274                           status	equ	0xFD8
 12275                           
 12276 ;; *************** function _DS3231_Read_Time *****************
 12277 ;; Defined at:
 12278 ;;		line 45 in file "I2C_Support.c"
 12279 ;; Parameters:    Size  Location     Type
 12280 ;;		None
 12281 ;; Auto vars:     Size  Location     Type
 12282 ;;  Device          1   20[COMRAM] unsigned char 
 12283 ;;  Address         1   19[COMRAM] unsigned char 
 12284 ;; Return value:  Size  Location     Type
 12285 ;;		None               void
 12286 ;; Registers used:
 12287 ;;		wreg, status,2, status,0, cstack
 12288 ;; Tracked objects:
 12289 ;;		On entry : 0/0
 12290 ;;		On exit  : 0/0
 12291 ;;		Unchanged: 0/0
 12292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12294 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12296 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12297 ;;Total ram usage:        2 bytes
 12298 ;; Hardware stack levels used:    1
 12299 ;; Hardware stack levels required when called:    6
 12300 ;; This function calls:
 12301 ;;		_I2C_ReStart
 12302 ;;		_I2C_Read
 12303 ;;		_I2C_Start
 12304 ;;		_I2C_Stop
 12305 ;;		_I2C_Write
 12306 ;; This function is called by:
 12307 ;;		_DS3231_Write_Alarm_Time
 12308 ;;		_main
 12309 ;;		_Exit_Setup_Alarm_Time
 12310 ;;		_Do_Save_New_Alarm_Time
 12311 ;;		_Exit_Setup_Heater_Temp
 12312 ;;		_Do_Save_New_Heater_Temp
 12313 ;;		_Do_Setup_Time
 12314 ;;		_Do_Save_New_Time
 12315 ;;		_Exit_Time_Setup
 12316 ;; This function uses a non-reentrant model
 12317 ;;
 12318                           
 12319                           	psect	text62
 12320  003200                     __ptext62:
 12321                           	opt stack 0
 12322  003200                     _DS3231_Read_Time:
 12323                           	opt stack 22
 12324                           
 12325                           ;I2C_Support.c: 47: char Device = 0x68;
 12326                           
 12327                           ; BSR set to: 1
 12328                           ;incstack = 0
 12329  003200  0E68               	movlw	104
 12330  003202  6E15               	movwf	DS3231_Read_Time@Device,c
 12331                           
 12332                           ;I2C_Support.c: 48: char Address = 0x00;
 12333  003204  0E00               	movlw	0
 12334  003206  6E14               	movwf	DS3231_Read_Time@Address,c
 12335                           
 12336                           ;I2C_Support.c: 50: I2C_Start();
 12337  003208  ECBE  F01E         	call	_I2C_Start	;wreg free
 12338                           
 12339                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
 12340  00320C  5015               	movf	DS3231_Read_Time@Device,w,c
 12341  00320E  2415               	addwf	DS3231_Read_Time@Device,w,c
 12342  003210  EC6E  F01C         	call	_I2C_Write
 12343                           
 12344                           ;I2C_Support.c: 52: I2C_Write(Address);
 12345  003214  5014               	movf	DS3231_Read_Time@Address,w,c
 12346  003216  EC6E  F01C         	call	_I2C_Write
 12347                           
 12348                           ;I2C_Support.c: 53: I2C_ReStart();
 12349  00321A  EC23  F01E         	call	_I2C_ReStart	;wreg free
 12350                           
 12351                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
 12352  00321E  80D8               	bsf	status,0,c
 12353  003220  3415               	rlcf	DS3231_Read_Time@Device,w,c
 12354  003222  EC6E  F01C         	call	_I2C_Write
 12355                           
 12356                           ;I2C_Support.c: 55: second = I2C_Read(1);
 12357  003226  0E01               	movlw	1
 12358  003228  ECCB  F01B         	call	_I2C_Read
 12359  00322C  6E63               	movwf	_second,c
 12360                           
 12361                           ;I2C_Support.c: 56: minute = I2C_Read(1);
 12362  00322E  0E01               	movlw	1
 12363  003230  ECCB  F01B         	call	_I2C_Read
 12364  003234  6E60               	movwf	_minute,c
 12365                           
 12366                           ;I2C_Support.c: 57: hour = I2C_Read(1);
 12367  003236  0E01               	movlw	1
 12368  003238  ECCB  F01B         	call	_I2C_Read
 12369  00323C  6E5F               	movwf	_hour,c
 12370                           
 12371                           ;I2C_Support.c: 58: dow = I2C_Read(1);
 12372  00323E  0E01               	movlw	1
 12373  003240  ECCB  F01B         	call	_I2C_Read
 12374  003244  6E5C               	movwf	_dow,c
 12375                           
 12376                           ;I2C_Support.c: 59: day = I2C_Read(1);
 12377  003246  0E01               	movlw	1
 12378  003248  ECCB  F01B         	call	_I2C_Read
 12379  00324C  6E5B               	movwf	_day,c
 12380                           
 12381                           ;I2C_Support.c: 60: month = I2C_Read(1);
 12382  00324E  0E01               	movlw	1
 12383  003250  ECCB  F01B         	call	_I2C_Read
 12384  003254  6E61               	movwf	_month,c
 12385                           
 12386                           ;I2C_Support.c: 61: year = I2C_Read(0);
 12387  003256  0E00               	movlw	0
 12388  003258  ECCB  F01B         	call	_I2C_Read
 12389  00325C  6E6E               	movwf	_year,c
 12390                           
 12391                           ;I2C_Support.c: 62: I2C_Stop();
 12392  00325E  ECB5  F01E         	call	_I2C_Stop	;wreg free
 12393  003262  0012               	return		;funcret
 12394  003264                     __end_of_DS3231_Read_Time:
 12395                           	opt stack 0
 12396                           tblptru	equ	0xFF8
 12397                           tblptrh	equ	0xFF7
 12398                           tblptrl	equ	0xFF6
 12399                           tablat	equ	0xFF5
 12400                           prodh	equ	0xFF4
 12401                           prodl	equ	0xFF3
 12402                           intcon	equ	0xFF2
 12403                           intcon2	equ	0xFF1
 12404                           postinc0	equ	0xFEE
 12405                           wreg	equ	0xFE8
 12406                           postdec1	equ	0xFE5
 12407                           plusw1	equ	0xFE3
 12408                           fsr1l	equ	0xFE1
 12409                           indf2	equ	0xFDF
 12410                           postinc2	equ	0xFDE
 12411                           plusw2	equ	0xFDB
 12412                           fsr2h	equ	0xFDA
 12413                           fsr2l	equ	0xFD9
 12414                           status	equ	0xFD8
 12415                           
 12416 ;; *************** function _DS3231_Read_Alarm_Time *****************
 12417 ;; Defined at:
 12418 ;;		line 115 in file "I2C_Support.c"
 12419 ;; Parameters:    Size  Location     Type
 12420 ;;		None
 12421 ;; Auto vars:     Size  Location     Type
 12422 ;;  Device          1   20[COMRAM] unsigned char 
 12423 ;;  Address         1   19[COMRAM] unsigned char 
 12424 ;; Return value:  Size  Location     Type
 12425 ;;		None               void
 12426 ;; Registers used:
 12427 ;;		wreg, status,2, status,0, cstack
 12428 ;; Tracked objects:
 12429 ;;		On entry : 0/0
 12430 ;;		On exit  : 0/0
 12431 ;;		Unchanged: 0/0
 12432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12434 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12436 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12437 ;;Total ram usage:        2 bytes
 12438 ;; Hardware stack levels used:    1
 12439 ;; Hardware stack levels required when called:    6
 12440 ;; This function calls:
 12441 ;;		_I2C_ReStart
 12442 ;;		_I2C_Read
 12443 ;;		_I2C_Start
 12444 ;;		_I2C_Stop
 12445 ;;		_I2C_Write
 12446 ;; This function is called by:
 12447 ;;		_main
 12448 ;;		_Do_Setup_Alarm_Time
 12449 ;;		_Exit_Setup_Alarm_Time
 12450 ;;		_Do_Save_New_Alarm_Time
 12451 ;; This function uses a non-reentrant model
 12452 ;;
 12453                           
 12454                           	psect	text63
 12455  0036B4                     __ptext63:
 12456                           	opt stack 0
 12457  0036B4                     _DS3231_Read_Alarm_Time:
 12458                           	opt stack 22
 12459                           
 12460                           ;I2C_Support.c: 117: char Device = 0x68;
 12461                           
 12462                           ;incstack = 0
 12463  0036B4  0E68               	movlw	104
 12464  0036B6  6E15               	movwf	DS3231_Read_Alarm_Time@Device,c
 12465                           
 12466                           ;I2C_Support.c: 118: char Address = 0x07;
 12467  0036B8  0E07               	movlw	7
 12468  0036BA  6E14               	movwf	DS3231_Read_Alarm_Time@Address,c
 12469                           
 12470                           ;I2C_Support.c: 119: I2C_Start();
 12471  0036BC  ECBE  F01E         	call	_I2C_Start	;wreg free
 12472                           
 12473                           ;I2C_Support.c: 120: I2C_Write((Device << 1) | 0);
 12474  0036C0  5015               	movf	DS3231_Read_Alarm_Time@Device,w,c
 12475  0036C2  2415               	addwf	DS3231_Read_Alarm_Time@Device,w,c
 12476  0036C4  EC6E  F01C         	call	_I2C_Write
 12477                           
 12478                           ;I2C_Support.c: 121: I2C_Write(Address);
 12479  0036C8  5014               	movf	DS3231_Read_Alarm_Time@Address,w,c
 12480  0036CA  EC6E  F01C         	call	_I2C_Write
 12481                           
 12482                           ;I2C_Support.c: 122: I2C_ReStart();
 12483  0036CE  EC23  F01E         	call	_I2C_ReStart	;wreg free
 12484                           
 12485                           ;I2C_Support.c: 123: I2C_Write((Device << 1) | 1);
 12486  0036D2  80D8               	bsf	status,0,c
 12487  0036D4  3415               	rlcf	DS3231_Read_Alarm_Time@Device,w,c
 12488  0036D6  EC6E  F01C         	call	_I2C_Write
 12489                           
 12490                           ;I2C_Support.c: 124: alarm_second = I2C_Read(1);
 12491  0036DA  0E01               	movlw	1
 12492  0036DC  ECCB  F01B         	call	_I2C_Read
 12493  0036E0  6E59               	movwf	_alarm_second,c
 12494                           
 12495                           ;I2C_Support.c: 125: alarm_minute = I2C_Read(1);
 12496  0036E2  0E01               	movlw	1
 12497  0036E4  ECCB  F01B         	call	_I2C_Read
 12498  0036E8  6E58               	movwf	_alarm_minute,c
 12499                           
 12500                           ;I2C_Support.c: 126: alarm_hour = I2C_Read(1);
 12501  0036EA  0E01               	movlw	1
 12502  0036EC  ECCB  F01B         	call	_I2C_Read
 12503  0036F0  6E57               	movwf	_alarm_hour,c
 12504                           
 12505                           ;I2C_Support.c: 127: alarm_date = I2C_Read(0);
 12506  0036F2  0E00               	movlw	0
 12507  0036F4  ECCB  F01B         	call	_I2C_Read
 12508  0036F8  6E56               	movwf	_alarm_date,c
 12509                           
 12510                           ;I2C_Support.c: 128: I2C_Stop();
 12511  0036FA  ECB5  F01E         	call	_I2C_Stop	;wreg free
 12512  0036FE  0012               	return		;funcret
 12513  003700                     __end_of_DS3231_Read_Alarm_Time:
 12514                           	opt stack 0
 12515                           tblptru	equ	0xFF8
 12516                           tblptrh	equ	0xFF7
 12517                           tblptrl	equ	0xFF6
 12518                           tablat	equ	0xFF5
 12519                           prodh	equ	0xFF4
 12520                           prodl	equ	0xFF3
 12521                           intcon	equ	0xFF2
 12522                           intcon2	equ	0xFF1
 12523                           postinc0	equ	0xFEE
 12524                           wreg	equ	0xFE8
 12525                           postdec1	equ	0xFE5
 12526                           plusw1	equ	0xFE3
 12527                           fsr1l	equ	0xFE1
 12528                           indf2	equ	0xFDF
 12529                           postinc2	equ	0xFDE
 12530                           plusw2	equ	0xFDB
 12531                           fsr2h	equ	0xFDA
 12532                           fsr2l	equ	0xFD9
 12533                           status	equ	0xFD8
 12534                           
 12535 ;; *************** function _Do_Beep_Good *****************
 12536 ;; Defined at:
 12537 ;;		line 70 in file "utils.c"
 12538 ;; Parameters:    Size  Location     Type
 12539 ;;		None
 12540 ;; Auto vars:     Size  Location     Type
 12541 ;;		None
 12542 ;; Return value:  Size  Location     Type
 12543 ;;		None               void
 12544 ;; Registers used:
 12545 ;;		wreg, status,2, status,0, cstack
 12546 ;; Tracked objects:
 12547 ;;		On entry : 0/0
 12548 ;;		On exit  : 0/0
 12549 ;;		Unchanged: 0/0
 12550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12555 ;;Total ram usage:        0 bytes
 12556 ;; Hardware stack levels used:    1
 12557 ;; Hardware stack levels required when called:    6
 12558 ;; This function calls:
 12559 ;;		_Activate_Buzzer_2KHz
 12560 ;;		_Deactivate_Buzzer
 12561 ;;		_Wait_One_Sec
 12562 ;;		_do_update_pwm
 12563 ;; This function is called by:
 12564 ;;		_main
 12565 ;;		_Do_Setup_Alarm_Time
 12566 ;;		_Do_Setup_Heater_Temp
 12567 ;;		_Do_Setup_Time
 12568 ;; This function uses a non-reentrant model
 12569 ;;
 12570                           
 12571                           	psect	text64
 12572  003CC0                     __ptext64:
 12573                           	opt stack 0
 12574  003CC0                     _Do_Beep_Good:
 12575                           	opt stack 23
 12576                           
 12577                           ;utils.c: 74: Activate_Buzzer_2KHz();
 12578                           
 12579                           ;incstack = 0
 12580  003CC0  ECA3  F01E         	call	_Activate_Buzzer_2KHz	;wreg free
 12581                           
 12582                           ;utils.c: 75: Wait_One_Sec();
 12583  003CC4  ECCC  F01D         	call	_Wait_One_Sec	;wreg free
 12584                           
 12585                           ;utils.c: 77: Deactivate_Buzzer();
 12586  003CC8  EC30  F01F         	call	_Deactivate_Buzzer	;wreg free
 12587                           
 12588                           ;utils.c: 78: do_update_pwm(duty_cycle);
 12589  003CCC  505D               	movf	_duty_cycle,w,c
 12590  003CCE  ECB8  F014         	call	_do_update_pwm
 12591  003CD2  0012               	return		;funcret
 12592  003CD4                     __end_of_Do_Beep_Good:
 12593                           	opt stack 0
 12594                           tblptru	equ	0xFF8
 12595                           tblptrh	equ	0xFF7
 12596                           tblptrl	equ	0xFF6
 12597                           tablat	equ	0xFF5
 12598                           prodh	equ	0xFF4
 12599                           prodl	equ	0xFF3
 12600                           intcon	equ	0xFF2
 12601                           intcon2	equ	0xFF1
 12602                           postinc0	equ	0xFEE
 12603                           wreg	equ	0xFE8
 12604                           postdec1	equ	0xFE5
 12605                           plusw1	equ	0xFE3
 12606                           fsr1l	equ	0xFE1
 12607                           indf2	equ	0xFDF
 12608                           postinc2	equ	0xFDE
 12609                           plusw2	equ	0xFDB
 12610                           fsr2h	equ	0xFDA
 12611                           fsr2l	equ	0xFD9
 12612                           status	equ	0xFD8
 12613                           
 12614 ;; *************** function _Activate_Buzzer_2KHz *****************
 12615 ;; Defined at:
 12616 ;;		line 113 in file "utils.c"
 12617 ;; Parameters:    Size  Location     Type
 12618 ;;		None
 12619 ;; Auto vars:     Size  Location     Type
 12620 ;;		None
 12621 ;; Return value:  Size  Location     Type
 12622 ;;		None               void
 12623 ;; Registers used:
 12624 ;;		wreg, status,2
 12625 ;; Tracked objects:
 12626 ;;		On entry : 0/0
 12627 ;;		On exit  : 0/0
 12628 ;;		Unchanged: 0/0
 12629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12634 ;;Total ram usage:        0 bytes
 12635 ;; Hardware stack levels used:    1
 12636 ;; Hardware stack levels required when called:    3
 12637 ;; This function calls:
 12638 ;;		Nothing
 12639 ;; This function is called by:
 12640 ;;		_Do_Beep_Good
 12641 ;; This function uses a non-reentrant model
 12642 ;;
 12643                           
 12644                           	psect	text65
 12645  003D46                     __ptext65:
 12646                           	opt stack 0
 12647  003D46                     _Activate_Buzzer_2KHz:
 12648                           	opt stack 25
 12649                           
 12650                           ;utils.c: 115: PR2 = 0b11111001 ;
 12651                           
 12652                           ;incstack = 0
 12653  003D46  0EF9               	movlw	249
 12654  003D48  6ECB               	movwf	4043,c	;volatile
 12655                           
 12656                           ;utils.c: 116: T2CON = 0b00000101 ;
 12657  003D4A  0E05               	movlw	5
 12658  003D4C  6ECA               	movwf	4042,c	;volatile
 12659                           
 12660                           ;utils.c: 117: CCPR2L = 0b01111100 ;
 12661  003D4E  0E7C               	movlw	124
 12662  003D50  6EBB               	movwf	4027,c	;volatile
 12663                           
 12664                           ;utils.c: 118: CCP2CON = 0b00111100 ;
 12665  003D52  0E3C               	movlw	60
 12666  003D54  6EBA               	movwf	4026,c	;volatile
 12667  003D56  0012               	return		;funcret
 12668  003D58                     __end_of_Activate_Buzzer_2KHz:
 12669                           	opt stack 0
 12670                           tblptru	equ	0xFF8
 12671                           tblptrh	equ	0xFF7
 12672                           tblptrl	equ	0xFF6
 12673                           tablat	equ	0xFF5
 12674                           prodh	equ	0xFF4
 12675                           prodl	equ	0xFF3
 12676                           intcon	equ	0xFF2
 12677                           intcon2	equ	0xFF1
 12678                           postinc0	equ	0xFEE
 12679                           wreg	equ	0xFE8
 12680                           postdec1	equ	0xFE5
 12681                           plusw1	equ	0xFE3
 12682                           fsr1l	equ	0xFE1
 12683                           indf2	equ	0xFDF
 12684                           postinc2	equ	0xFDE
 12685                           plusw2	equ	0xFDB
 12686                           fsr2h	equ	0xFDA
 12687                           fsr2l	equ	0xFD9
 12688                           status	equ	0xFD8
 12689                           
 12690 ;; *************** function _Do_Beep_Bad *****************
 12691 ;; Defined at:
 12692 ;;		line 81 in file "utils.c"
 12693 ;; Parameters:    Size  Location     Type
 12694 ;;		None
 12695 ;; Auto vars:     Size  Location     Type
 12696 ;;		None
 12697 ;; Return value:  Size  Location     Type
 12698 ;;		None               void
 12699 ;; Registers used:
 12700 ;;		wreg, status,2, status,0, cstack
 12701 ;; Tracked objects:
 12702 ;;		On entry : 0/0
 12703 ;;		On exit  : 0/0
 12704 ;;		Unchanged: 0/0
 12705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12710 ;;Total ram usage:        0 bytes
 12711 ;; Hardware stack levels used:    1
 12712 ;; Hardware stack levels required when called:    6
 12713 ;; This function calls:
 12714 ;;		_Activate_Buzzer_500Hz
 12715 ;;		_Deactivate_Buzzer
 12716 ;;		_Wait_One_Sec
 12717 ;;		_do_update_pwm
 12718 ;; This function is called by:
 12719 ;;		_main
 12720 ;;		_Do_Setup_Alarm_Time
 12721 ;;		_Do_Setup_Heater_Temp
 12722 ;;		_Do_Setup_Time
 12723 ;; This function uses a non-reentrant model
 12724 ;;
 12725                           
 12726                           	psect	text66
 12727  003CD4                     __ptext66:
 12728                           	opt stack 0
 12729  003CD4                     _Do_Beep_Bad:
 12730                           	opt stack 23
 12731                           
 12732                           ;utils.c: 85: Activate_Buzzer_500Hz();
 12733                           
 12734                           ;incstack = 0
 12735  003CD4  ECAC  F01E         	call	_Activate_Buzzer_500Hz	;wreg free
 12736                           
 12737                           ;utils.c: 86: Wait_One_Sec();
 12738  003CD8  ECCC  F01D         	call	_Wait_One_Sec	;wreg free
 12739                           
 12740                           ;utils.c: 88: Deactivate_Buzzer();
 12741  003CDC  EC30  F01F         	call	_Deactivate_Buzzer	;wreg free
 12742                           
 12743                           ;utils.c: 89: do_update_pwm(duty_cycle);
 12744  003CE0  505D               	movf	_duty_cycle,w,c
 12745  003CE2  ECB8  F014         	call	_do_update_pwm
 12746  003CE6  0012               	return		;funcret
 12747  003CE8                     __end_of_Do_Beep_Bad:
 12748                           	opt stack 0
 12749                           tblptru	equ	0xFF8
 12750                           tblptrh	equ	0xFF7
 12751                           tblptrl	equ	0xFF6
 12752                           tablat	equ	0xFF5
 12753                           prodh	equ	0xFF4
 12754                           prodl	equ	0xFF3
 12755                           intcon	equ	0xFF2
 12756                           intcon2	equ	0xFF1
 12757                           postinc0	equ	0xFEE
 12758                           wreg	equ	0xFE8
 12759                           postdec1	equ	0xFE5
 12760                           plusw1	equ	0xFE3
 12761                           fsr1l	equ	0xFE1
 12762                           indf2	equ	0xFDF
 12763                           postinc2	equ	0xFDE
 12764                           plusw2	equ	0xFDB
 12765                           fsr2h	equ	0xFDA
 12766                           fsr2l	equ	0xFD9
 12767                           status	equ	0xFD8
 12768                           
 12769 ;; *************** function _do_update_pwm *****************
 12770 ;; Defined at:
 12771 ;;		line 135 in file "utils.c"
 12772 ;; Parameters:    Size  Location     Type
 12773 ;;  duty_cycle      1    wreg     unsigned char 
 12774 ;; Auto vars:     Size  Location     Type
 12775 ;;  duty_cycle      1   64[COMRAM] unsigned char 
 12776 ;;  dc_f            3   61[COMRAM] float 
 12777 ;;  dc_I            2   65[COMRAM] int 
 12778 ;; Return value:  Size  Location     Type
 12779 ;;		None               void
 12780 ;; Registers used:
 12781 ;;		wreg, status,2, status,0, cstack
 12782 ;; Tracked objects:
 12783 ;;		On entry : 0/0
 12784 ;;		On exit  : 0/0
 12785 ;;		Unchanged: 0/0
 12786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12788 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12789 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12790 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12791 ;;Total ram usage:        9 bytes
 12792 ;; Hardware stack levels used:    1
 12793 ;; Hardware stack levels required when called:    5
 12794 ;; This function calls:
 12795 ;;		___ftdiv
 12796 ;;		___ftmul
 12797 ;;		___fttol
 12798 ;;		___lbtoft
 12799 ;; This function is called by:
 12800 ;;		_Monitor_Heater
 12801 ;;		_Turn_On_Fan
 12802 ;;		_Test_Alarm
 12803 ;;		_Do_Beep_Good
 12804 ;;		_Do_Beep_Bad
 12805 ;;		_Decrease_Speed
 12806 ;;		_Do_Beep
 12807 ;; This function uses a non-reentrant model
 12808 ;;
 12809                           
 12810                           	psect	text67
 12811  002970                     __ptext67:
 12812                           	opt stack 0
 12813  002970                     _do_update_pwm:
 12814                           	opt stack 23
 12815                           
 12816                           ;incstack = 0
 12817                           ;do_update_pwm@duty_cycle stored from wreg
 12818  002970  6E41               	movwf	do_update_pwm@duty_cycle,c
 12819                           
 12820                           ;utils.c: 137: float dc_f;
 12821                           ;utils.c: 138: int dc_I;
 12822                           ;utils.c: 139: PR2 = 0b00000100 ;
 12823  002972  0E04               	movlw	4
 12824  002974  6ECB               	movwf	4043,c	;volatile
 12825                           
 12826                           ;utils.c: 140: T2CON = 0b00000111 ;
 12827  002976  0E07               	movlw	7
 12828  002978  6ECA               	movwf	4042,c	;volatile
 12829                           
 12830                           ;utils.c: 141: dc_f = ( 4.0 * duty_cycle / 20.0) ;
 12831  00297A  0E00               	movlw	0
 12832  00297C  6E20               	movwf	___ftmul@f2,c
 12833  00297E  0E80               	movlw	128
 12834  002980  6E21               	movwf	___ftmul@f2+1,c
 12835  002982  0E40               	movlw	64
 12836  002984  6E22               	movwf	___ftmul@f2+2,c
 12837  002986  5041               	movf	do_update_pwm@duty_cycle,w,c
 12838  002988  EC59  F01D         	call	___lbtoft
 12839  00298C  C019  F01D         	movff	?___lbtoft,___ftmul@f1
 12840  002990  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
 12841  002994  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
 12842  002998  EC2C  F00F         	call	___ftmul	;wreg free
 12843  00299C  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
 12844  0029A0  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
 12845  0029A4  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
 12846  0029A8  0E00               	movlw	0
 12847  0029AA  6E2F               	movwf	___ftdiv@f2,c
 12848  0029AC  0EA0               	movlw	160
 12849  0029AE  6E30               	movwf	___ftdiv@f2+1,c
 12850  0029B0  0E41               	movlw	65
 12851  0029B2  6E31               	movwf	___ftdiv@f2+2,c
 12852  0029B4  EC86  F011         	call	___ftdiv	;wreg free
 12853  0029B8  C02C  F03E         	movff	?___ftdiv,do_update_pwm@dc_f
 12854  0029BC  C02D  F03F         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
 12855  0029C0  C02E  F040         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
 12856                           
 12857                           ;utils.c: 142: dc_I = (int) dc_f;
 12858  0029C4  C03E  F02C         	movff	do_update_pwm@dc_f,___fttol@f1
 12859  0029C8  C03F  F02D         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
 12860  0029CC  C040  F02E         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
 12861  0029D0  EC13  F011         	call	___fttol	;wreg free
 12862  0029D4  C02C  F042         	movff	?___fttol,do_update_pwm@dc_I
 12863  0029D8  C02D  F043         	movff	?___fttol+1,do_update_pwm@dc_I+1
 12864                           
 12865                           ;utils.c: 143: if (dc_I > duty_cycle) dc_I++;
 12866  0029DC  5041               	movf	do_update_pwm@duty_cycle,w,c
 12867  0029DE  6E3B               	movwf	??_do_update_pwm& (0+255),c
 12868  0029E0  6A3C               	clrf	(??_do_update_pwm+1)& (0+255),c
 12869  0029E2  5042               	movf	do_update_pwm@dc_I,w,c
 12870  0029E4  5C3B               	subwf	??_do_update_pwm,w,c
 12871  0029E6  503C               	movf	??_do_update_pwm+1,w,c
 12872  0029E8  0A80               	xorlw	128
 12873  0029EA  6E3D               	movwf	(??_do_update_pwm+2)& (0+255),c
 12874  0029EC  5043               	movf	do_update_pwm@dc_I+1,w,c
 12875  0029EE  0A80               	xorlw	128
 12876  0029F0  583D               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
 12877  0029F2  B0D8               	btfsc	status,0,c
 12878  0029F4  D003               	goto	l8817
 12879  0029F6  4A42               	infsnz	do_update_pwm@dc_I,f,c
 12880  0029F8  2A43               	incf	do_update_pwm@dc_I+1,f,c
 12881  0029FA  D000               	goto	l8817
 12882  0029FC                     l8817:
 12883                           
 12884                           ;utils.c: 144: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
 12885  0029FC  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
 12886  002A00  0E03               	movlw	3
 12887  002A02  163B               	andwf	??_do_update_pwm,f,c
 12888  002A04  383B               	swapf	??_do_update_pwm,w,c
 12889  002A06  0BF0               	andlw	240
 12890  002A08  090C               	iorlw	12
 12891  002A0A  6EBD               	movwf	4029,c	;volatile
 12892                           
 12893                           ;utils.c: 145: CCPR1L = (dc_I) >> 2;
 12894  002A0C  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
 12895  002A10  C043  F03C         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
 12896  002A14  343C               	rlcf	??_do_update_pwm+1,w,c
 12897  002A16  323C               	rrcf	??_do_update_pwm+1,f,c
 12898  002A18  323B               	rrcf	??_do_update_pwm,f,c
 12899  002A1A  343C               	rlcf	??_do_update_pwm+1,w,c
 12900  002A1C  323C               	rrcf	??_do_update_pwm+1,f,c
 12901  002A1E  323B               	rrcf	??_do_update_pwm,f,c
 12902  002A20  503B               	movf	??_do_update_pwm,w,c
 12903  002A22  6EBE               	movwf	4030,c	;volatile
 12904  002A24  0012               	return		;funcret
 12905  002A26                     __end_of_do_update_pwm:
 12906                           	opt stack 0
 12907                           tblptru	equ	0xFF8
 12908                           tblptrh	equ	0xFF7
 12909                           tblptrl	equ	0xFF6
 12910                           tablat	equ	0xFF5
 12911                           prodh	equ	0xFF4
 12912                           prodl	equ	0xFF3
 12913                           intcon	equ	0xFF2
 12914                           intcon2	equ	0xFF1
 12915                           postinc0	equ	0xFEE
 12916                           wreg	equ	0xFE8
 12917                           postdec1	equ	0xFE5
 12918                           plusw1	equ	0xFE3
 12919                           fsr1l	equ	0xFE1
 12920                           indf2	equ	0xFDF
 12921                           postinc2	equ	0xFDE
 12922                           plusw2	equ	0xFDB
 12923                           fsr2h	equ	0xFDA
 12924                           fsr2l	equ	0xFD9
 12925                           status	equ	0xFD8
 12926                           
 12927 ;; *************** function ___lbtoft *****************
 12928 ;; Defined at:
 12929 ;;		line 27 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lbtoft.c"
 12930 ;; Parameters:    Size  Location     Type
 12931 ;;  c               1    wreg     unsigned char 
 12932 ;; Auto vars:     Size  Location     Type
 12933 ;;  c               1   27[COMRAM] unsigned char 
 12934 ;; Return value:  Size  Location     Type
 12935 ;;                  3   24[COMRAM] float 
 12936 ;; Registers used:
 12937 ;;		wreg, status,2, status,0, cstack
 12938 ;; Tracked objects:
 12939 ;;		On entry : 0/0
 12940 ;;		On exit  : 0/0
 12941 ;;		Unchanged: 0/0
 12942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12943 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12944 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12946 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12947 ;;Total ram usage:        4 bytes
 12948 ;; Hardware stack levels used:    1
 12949 ;; Hardware stack levels required when called:    4
 12950 ;; This function calls:
 12951 ;;		___ftpack
 12952 ;; This function is called by:
 12953 ;;		_do_update_pwm
 12954 ;; This function uses a non-reentrant model
 12955 ;;
 12956                           
 12957                           	psect	text68
 12958  003AB2                     __ptext68:
 12959                           	opt stack 0
 12960  003AB2                     ___lbtoft:
 12961                           	opt stack 23
 12962                           
 12963                           ;incstack = 0
 12964                           ;___lbtoft@c stored from wreg
 12965  003AB2  6E1C               	movwf	___lbtoft@c,c
 12966  003AB4  501C               	movf	___lbtoft@c,w,c
 12967  003AB6  6E11               	movwf	___ftpack@arg,c
 12968  003AB8  6A12               	clrf	___ftpack@arg+1,c
 12969  003ABA  6A13               	clrf	___ftpack@arg+2,c
 12970  003ABC  0E8E               	movlw	142
 12971  003ABE  6E14               	movwf	___ftpack@exp,c
 12972  003AC0  0E00               	movlw	0
 12973  003AC2  6E15               	movwf	___ftpack@sign,c
 12974  003AC4  EC9A  F013         	call	___ftpack	;wreg free
 12975  003AC8  C011  F019         	movff	?___ftpack,?___lbtoft
 12976  003ACC  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
 12977  003AD0  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
 12978  003AD4  D000               	goto	l1972
 12979  003AD6                     l1972:
 12980  003AD6  0012               	return		;funcret
 12981  003AD8                     __end_of___lbtoft:
 12982                           	opt stack 0
 12983                           tblptru	equ	0xFF8
 12984                           tblptrh	equ	0xFF7
 12985                           tblptrl	equ	0xFF6
 12986                           tablat	equ	0xFF5
 12987                           prodh	equ	0xFF4
 12988                           prodl	equ	0xFF3
 12989                           intcon	equ	0xFF2
 12990                           intcon2	equ	0xFF1
 12991                           postinc0	equ	0xFEE
 12992                           wreg	equ	0xFE8
 12993                           postdec1	equ	0xFE5
 12994                           plusw1	equ	0xFE3
 12995                           fsr1l	equ	0xFE1
 12996                           indf2	equ	0xFDF
 12997                           postinc2	equ	0xFDE
 12998                           plusw2	equ	0xFDB
 12999                           fsr2h	equ	0xFDA
 13000                           fsr2l	equ	0xFD9
 13001                           status	equ	0xFD8
 13002                           
 13003 ;; *************** function ___fttol *****************
 13004 ;; Defined at:
 13005 ;;		line 44 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fttol.c"
 13006 ;; Parameters:    Size  Location     Type
 13007 ;;  f1              3   43[COMRAM] float 
 13008 ;; Auto vars:     Size  Location     Type
 13009 ;;  lval            4   53[COMRAM] unsigned long 
 13010 ;;  exp1            1   57[COMRAM] unsigned char 
 13011 ;;  sign1           1   52[COMRAM] unsigned char 
 13012 ;; Return value:  Size  Location     Type
 13013 ;;                  4   43[COMRAM] long 
 13014 ;; Registers used:
 13015 ;;		wreg, status,2, status,0
 13016 ;; Tracked objects:
 13017 ;;		On entry : 0/0
 13018 ;;		On exit  : 0/0
 13019 ;;		Unchanged: 0/0
 13020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13021 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13022 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13023 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13024 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13025 ;;Total ram usage:       15 bytes
 13026 ;; Hardware stack levels used:    1
 13027 ;; Hardware stack levels required when called:    3
 13028 ;; This function calls:
 13029 ;;		Nothing
 13030 ;; This function is called by:
 13031 ;;		_Update_Screen
 13032 ;;		_do_update_pwm
 13033 ;; This function uses a non-reentrant model
 13034 ;;
 13035                           
 13036                           	psect	text69
 13037  002226                     __ptext69:
 13038                           	opt stack 0
 13039  002226                     ___fttol:
 13040                           	opt stack 26
 13041                           
 13042                           ;incstack = 0
 13043  002226  C02E  F030         	movff	___fttol@f1+2,??___fttol
 13044  00222A  6A31               	clrf	(??___fttol+1)& (0+255),c
 13045  00222C  6A32               	clrf	(??___fttol+2)& (0+255),c
 13046  00222E  342D               	rlcf	___fttol@f1+1,w,c
 13047  002230  3630               	rlcf	??___fttol& (0+255),f,c
 13048  002232  E301               	bnc	u6431
 13049  002234  8031               	bsf	(??___fttol+1)& (0+255),0,c
 13050  002236                     u6431:
 13051  002236  5030               	movf	??___fttol,w,c
 13052  002238  6E3A               	movwf	___fttol@exp1,c
 13053  00223A  503A               	movf	___fttol@exp1,w,c
 13054  00223C  A4D8               	btfss	status,2,c
 13055  00223E  D002               	goto	l8763
 13056  002240  D039               	goto	l8787
 13057  002242  D063               	goto	l1931
 13058  002244                     l8763:
 13059  002244  0E17               	movlw	23
 13060  002246  6E30               	movwf	??___fttol& (0+255),c
 13061  002248  C02C  F031         	movff	___fttol@f1,??___fttol+1
 13062  00224C  C02D  F032         	movff	___fttol@f1+1,??___fttol+2
 13063  002250  C02E  F033         	movff	___fttol@f1+2,??___fttol+3
 13064  002254  2830               	incf	??___fttol,w,c
 13065  002256  6E34               	movwf	(??___fttol+4)& (0+255),c
 13066  002258  D004               	goto	u6450
 13067  00225A                     u6455:
 13068  00225A  90D8               	bcf	status,0,c
 13069  00225C  3233               	rrcf	??___fttol+3,f,c
 13070  00225E  3232               	rrcf	??___fttol+2,f,c
 13071  002260  3231               	rrcf	??___fttol+1,f,c
 13072  002262                     u6450:
 13073  002262  2E34               	decfsz	(??___fttol+4)& (0+255),f,c
 13074  002264  D7FA               	goto	u6455
 13075  002266  5031               	movf	??___fttol+1,w,c
 13076  002268  6E35               	movwf	___fttol@sign1,c
 13077  00226A  8E2D               	bsf	___fttol@f1+1,7,c
 13078  00226C  0EFF               	movlw	255
 13079  00226E  162C               	andwf	___fttol@f1,f,c
 13080  002270  0EFF               	movlw	255
 13081  002272  162D               	andwf	___fttol@f1+1,f,c
 13082  002274  0E00               	movlw	0
 13083  002276  162E               	andwf	___fttol@f1+2,f,c
 13084  002278  502C               	movf	___fttol@f1,w,c
 13085  00227A  6E36               	movwf	___fttol@lval,c
 13086  00227C  502D               	movf	___fttol@f1+1,w,c
 13087  00227E  6E37               	movwf	___fttol@lval+1,c
 13088  002280  502E               	movf	___fttol@f1+2,w,c
 13089  002282  6E38               	movwf	___fttol@lval+2,c
 13090  002284  6A39               	clrf	___fttol@lval+3,c
 13091  002286  0E8E               	movlw	142
 13092  002288  5E3A               	subwf	___fttol@exp1,f,c
 13093  00228A  AE3A               	btfss	___fttol@exp1,7,c
 13094  00228C  D010               	goto	l8785
 13095  00228E  503A               	movf	___fttol@exp1,w,c
 13096  002290  0A80               	xorlw	128
 13097  002292  0F8F               	addlw	143
 13098  002294  B0D8               	btfsc	status,0,c
 13099  002296  D003               	goto	l8781
 13100  002298  D00D               	goto	l8787
 13101  00229A  D037               	goto	l1931
 13102  00229C  D000               	goto	l8781
 13103  00229E                     l8781:
 13104  00229E  90D8               	bcf	status,0,c
 13105  0022A0  3239               	rrcf	___fttol@lval+3,f,c
 13106  0022A2  3238               	rrcf	___fttol@lval+2,f,c
 13107  0022A4  3237               	rrcf	___fttol@lval+1,f,c
 13108  0022A6  3236               	rrcf	___fttol@lval,f,c
 13109  0022A8  3E3A               	incfsz	___fttol@exp1,f,c
 13110  0022AA  D7F9               	goto	l8781
 13111  0022AC  D019               	goto	l8795
 13112  0022AE                     l8785:
 13113  0022AE  0E17               	movlw	23
 13114  0022B0  643A               	cpfsgt	___fttol@exp1,c
 13115  0022B2  D011               	goto	l8793
 13116  0022B4                     l8787:
 13117  0022B4  0E00               	movlw	0
 13118  0022B6  6E2C               	movwf	?___fttol,c
 13119  0022B8  0E00               	movlw	0
 13120  0022BA  6E2D               	movwf	?___fttol+1,c
 13121  0022BC  0E00               	movlw	0
 13122  0022BE  6E2E               	movwf	?___fttol+2,c
 13123  0022C0  0E00               	movlw	0
 13124  0022C2  6E2F               	movwf	?___fttol+3,c
 13125  0022C4  D022               	goto	l1931
 13126  0022C6  D007               	goto	l8793
 13127  0022C8                     l8791:
 13128  0022C8  90D8               	bcf	status,0,c
 13129  0022CA  3636               	rlcf	___fttol@lval,f,c
 13130  0022CC  3637               	rlcf	___fttol@lval+1,f,c
 13131  0022CE  3638               	rlcf	___fttol@lval+2,f,c
 13132  0022D0  3639               	rlcf	___fttol@lval+3,f,c
 13133  0022D2  063A               	decf	___fttol@exp1,f,c
 13134  0022D4  D000               	goto	l8793
 13135  0022D6                     l8793:
 13136  0022D6  503A               	movf	___fttol@exp1,w,c
 13137  0022D8  B4D8               	btfsc	status,2,c
 13138  0022DA  D002               	goto	l8795
 13139  0022DC  D7F5               	goto	l8791
 13140  0022DE  D000               	goto	l8795
 13141  0022E0                     l8795:
 13142  0022E0  5035               	movf	___fttol@sign1,w,c
 13143  0022E2  B4D8               	btfsc	status,2,c
 13144  0022E4  D009               	goto	l8799
 13145  0022E6  1E39               	comf	___fttol@lval+3,f,c
 13146  0022E8  1E38               	comf	___fttol@lval+2,f,c
 13147  0022EA  1E37               	comf	___fttol@lval+1,f,c
 13148  0022EC  6C36               	negf	___fttol@lval,c
 13149  0022EE  0E00               	movlw	0
 13150  0022F0  2237               	addwfc	___fttol@lval+1,f,c
 13151  0022F2  2238               	addwfc	___fttol@lval+2,f,c
 13152  0022F4  2239               	addwfc	___fttol@lval+3,f,c
 13153  0022F6  D000               	goto	l8799
 13154  0022F8                     l8799:
 13155  0022F8  C036  F02C         	movff	___fttol@lval,?___fttol
 13156  0022FC  C037  F02D         	movff	___fttol@lval+1,?___fttol+1
 13157  002300  C038  F02E         	movff	___fttol@lval+2,?___fttol+2
 13158  002304  C039  F02F         	movff	___fttol@lval+3,?___fttol+3
 13159  002308  D000               	goto	l1931
 13160  00230A                     l1931:
 13161  00230A  0012               	return		;funcret
 13162  00230C                     __end_of___fttol:
 13163                           	opt stack 0
 13164                           tblptru	equ	0xFF8
 13165                           tblptrh	equ	0xFF7
 13166                           tblptrl	equ	0xFF6
 13167                           tablat	equ	0xFF5
 13168                           prodh	equ	0xFF4
 13169                           prodl	equ	0xFF3
 13170                           intcon	equ	0xFF2
 13171                           intcon2	equ	0xFF1
 13172                           postinc0	equ	0xFEE
 13173                           wreg	equ	0xFE8
 13174                           postdec1	equ	0xFE5
 13175                           plusw1	equ	0xFE3
 13176                           fsr1l	equ	0xFE1
 13177                           indf2	equ	0xFDF
 13178                           postinc2	equ	0xFDE
 13179                           plusw2	equ	0xFDB
 13180                           fsr2h	equ	0xFDA
 13181                           fsr2l	equ	0xFD9
 13182                           status	equ	0xFD8
 13183                           
 13184 ;; *************** function ___ftmul *****************
 13185 ;; Defined at:
 13186 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftmul.c"
 13187 ;; Parameters:    Size  Location     Type
 13188 ;;  f1              3   28[COMRAM] float 
 13189 ;;  f2              3   31[COMRAM] float 
 13190 ;; Auto vars:     Size  Location     Type
 13191 ;;  f3_as_produc    3   38[COMRAM] unsigned um
 13192 ;;  sign            1   42[COMRAM] unsigned char 
 13193 ;;  cntr            1   41[COMRAM] unsigned char 
 13194 ;;  exp             1   37[COMRAM] unsigned char 
 13195 ;; Return value:  Size  Location     Type
 13196 ;;                  3   28[COMRAM] float 
 13197 ;; Registers used:
 13198 ;;		wreg, status,2, status,0, cstack
 13199 ;; Tracked objects:
 13200 ;;		On entry : 0/0
 13201 ;;		On exit  : 0/0
 13202 ;;		Unchanged: 0/0
 13203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13204 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13205 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13206 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13207 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13208 ;;Total ram usage:       15 bytes
 13209 ;; Hardware stack levels used:    1
 13210 ;; Hardware stack levels required when called:    4
 13211 ;; This function calls:
 13212 ;;		___ftpack
 13213 ;; This function is called by:
 13214 ;;		_Update_Screen
 13215 ;;		_do_update_pwm
 13216 ;;		_read_volt
 13217 ;; This function uses a non-reentrant model
 13218 ;;
 13219                           
 13220                           	psect	text70
 13221  001E58                     __ptext70:
 13222                           	opt stack 0
 13223  001E58                     ___ftmul:
 13224                           	opt stack 25
 13225                           
 13226                           ;incstack = 0
 13227  001E58  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
 13228  001E5C  6A24               	clrf	(??___ftmul+1)& (0+255),c
 13229  001E5E  6A25               	clrf	(??___ftmul+2)& (0+255),c
 13230  001E60  341E               	rlcf	___ftmul@f1+1,w,c
 13231  001E62  3623               	rlcf	??___ftmul& (0+255),f,c
 13232  001E64  E301               	bnc	u6371
 13233  001E66  8024               	bsf	(??___ftmul+1)& (0+255),0,c
 13234  001E68                     u6371:
 13235  001E68  5023               	movf	??___ftmul,w,c
 13236  001E6A  6E26               	movwf	___ftmul@exp,c
 13237  001E6C  5026               	movf	___ftmul@exp,w,c
 13238  001E6E  A4D8               	btfss	status,2,c
 13239  001E70  D002               	goto	l8715
 13240  001E72  D00E               	goto	l8717
 13241  001E74  D06C               	goto	l1910
 13242  001E76                     l8715:
 13243  001E76  C022  F023         	movff	___ftmul@f2+2,??___ftmul
 13244  001E7A  6A24               	clrf	(??___ftmul+1)& (0+255),c
 13245  001E7C  6A25               	clrf	(??___ftmul+2)& (0+255),c
 13246  001E7E  3421               	rlcf	___ftmul@f2+1,w,c
 13247  001E80  3623               	rlcf	??___ftmul& (0+255),f,c
 13248  001E82  E301               	bnc	u6391
 13249  001E84  8024               	bsf	(??___ftmul+1)& (0+255),0,c
 13250  001E86                     u6391:
 13251  001E86  5023               	movf	??___ftmul,w,c
 13252  001E88  6E2B               	movwf	___ftmul@sign,c
 13253  001E8A  502B               	movf	___ftmul@sign,w,c
 13254  001E8C  A4D8               	btfss	status,2,c
 13255  001E8E  D007               	goto	l8721
 13256  001E90                     l8717:
 13257  001E90  0E00               	movlw	0
 13258  001E92  6E1D               	movwf	?___ftmul,c
 13259  001E94  0E00               	movlw	0
 13260  001E96  6E1E               	movwf	?___ftmul+1,c
 13261  001E98  0E00               	movlw	0
 13262  001E9A  6E1F               	movwf	?___ftmul+2,c
 13263  001E9C  D058               	goto	l1910
 13264  001E9E                     l8721:
 13265  001E9E  502B               	movf	___ftmul@sign,w,c
 13266  001EA0  0F7B               	addlw	123
 13267  001EA2  2626               	addwf	___ftmul@exp,f,c
 13268  001EA4  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
 13269  001EA8  5022               	movf	___ftmul@f2+2,w,c
 13270  001EAA  1A2B               	xorwf	___ftmul@sign,f,c
 13271  001EAC  0E80               	movlw	128
 13272  001EAE  162B               	andwf	___ftmul@sign,f,c
 13273  001EB0  8E1E               	bsf	___ftmul@f1+1,7,c
 13274  001EB2  8E21               	bsf	___ftmul@f2+1,7,c
 13275  001EB4  0EFF               	movlw	255
 13276  001EB6  1620               	andwf	___ftmul@f2,f,c
 13277  001EB8  0EFF               	movlw	255
 13278  001EBA  1621               	andwf	___ftmul@f2+1,f,c
 13279  001EBC  0E00               	movlw	0
 13280  001EBE  1622               	andwf	___ftmul@f2+2,f,c
 13281  001EC0  0E00               	movlw	0
 13282  001EC2  6E27               	movwf	___ftmul@f3_as_product,c
 13283  001EC4  0E00               	movlw	0
 13284  001EC6  6E28               	movwf	___ftmul@f3_as_product+1,c
 13285  001EC8  0E00               	movlw	0
 13286  001ECA  6E29               	movwf	___ftmul@f3_as_product+2,c
 13287  001ECC  0E07               	movlw	7
 13288  001ECE  6E2A               	movwf	___ftmul@cntr,c
 13289  001ED0  D000               	goto	l8735
 13290  001ED2                     l8735:
 13291  001ED2  A01D               	btfss	___ftmul@f1,0,c
 13292  001ED4  D007               	goto	l8739
 13293  001ED6  5020               	movf	___ftmul@f2,w,c
 13294  001ED8  2627               	addwf	___ftmul@f3_as_product,f,c
 13295  001EDA  5021               	movf	___ftmul@f2+1,w,c
 13296  001EDC  2228               	addwfc	___ftmul@f3_as_product+1,f,c
 13297  001EDE  5022               	movf	___ftmul@f2+2,w,c
 13298  001EE0  2229               	addwfc	___ftmul@f3_as_product+2,f,c
 13299  001EE2  D000               	goto	l8739
 13300  001EE4                     l8739:
 13301  001EE4  90D8               	bcf	status,0,c
 13302  001EE6  321F               	rrcf	___ftmul@f1+2,f,c
 13303  001EE8  321E               	rrcf	___ftmul@f1+1,f,c
 13304  001EEA  321D               	rrcf	___ftmul@f1,f,c
 13305  001EEC  90D8               	bcf	status,0,c
 13306  001EEE  3620               	rlcf	___ftmul@f2,f,c
 13307  001EF0  3621               	rlcf	___ftmul@f2+1,f,c
 13308  001EF2  3622               	rlcf	___ftmul@f2+2,f,c
 13309  001EF4  2E2A               	decfsz	___ftmul@cntr,f,c
 13310  001EF6  D7ED               	goto	l8735
 13311  001EF8  D000               	goto	l8743
 13312  001EFA                     l8743:
 13313  001EFA  0E09               	movlw	9
 13314  001EFC  6E2A               	movwf	___ftmul@cntr,c
 13315  001EFE  D000               	goto	l8745
 13316  001F00                     l8745:
 13317  001F00  A01D               	btfss	___ftmul@f1,0,c
 13318  001F02  D007               	goto	l8749
 13319  001F04  5020               	movf	___ftmul@f2,w,c
 13320  001F06  2627               	addwf	___ftmul@f3_as_product,f,c
 13321  001F08  5021               	movf	___ftmul@f2+1,w,c
 13322  001F0A  2228               	addwfc	___ftmul@f3_as_product+1,f,c
 13323  001F0C  5022               	movf	___ftmul@f2+2,w,c
 13324  001F0E  2229               	addwfc	___ftmul@f3_as_product+2,f,c
 13325  001F10  D000               	goto	l8749
 13326  001F12                     l8749:
 13327  001F12  90D8               	bcf	status,0,c
 13328  001F14  321F               	rrcf	___ftmul@f1+2,f,c
 13329  001F16  321E               	rrcf	___ftmul@f1+1,f,c
 13330  001F18  321D               	rrcf	___ftmul@f1,f,c
 13331  001F1A  90D8               	bcf	status,0,c
 13332  001F1C  3229               	rrcf	___ftmul@f3_as_product+2,f,c
 13333  001F1E  3228               	rrcf	___ftmul@f3_as_product+1,f,c
 13334  001F20  3227               	rrcf	___ftmul@f3_as_product,f,c
 13335  001F22  2E2A               	decfsz	___ftmul@cntr,f,c
 13336  001F24  D7ED               	goto	l8745
 13337  001F26  D000               	goto	l8753
 13338  001F28                     l8753:
 13339  001F28  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
 13340  001F2C  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 13341  001F30  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 13342  001F34  C026  F014         	movff	___ftmul@exp,___ftpack@exp
 13343  001F38  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
 13344  001F3C  EC9A  F013         	call	___ftpack	;wreg free
 13345  001F40  C011  F01D         	movff	?___ftpack,?___ftmul
 13346  001F44  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
 13347  001F48  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
 13348  001F4C  D000               	goto	l1910
 13349  001F4E                     l1910:
 13350  001F4E  0012               	return		;funcret
 13351  001F50                     __end_of___ftmul:
 13352                           	opt stack 0
 13353                           tblptru	equ	0xFF8
 13354                           tblptrh	equ	0xFF7
 13355                           tblptrl	equ	0xFF6
 13356                           tablat	equ	0xFF5
 13357                           prodh	equ	0xFF4
 13358                           prodl	equ	0xFF3
 13359                           intcon	equ	0xFF2
 13360                           intcon2	equ	0xFF1
 13361                           postinc0	equ	0xFEE
 13362                           wreg	equ	0xFE8
 13363                           postdec1	equ	0xFE5
 13364                           plusw1	equ	0xFE3
 13365                           fsr1l	equ	0xFE1
 13366                           indf2	equ	0xFDF
 13367                           postinc2	equ	0xFDE
 13368                           plusw2	equ	0xFDB
 13369                           fsr2h	equ	0xFDA
 13370                           fsr2l	equ	0xFD9
 13371                           status	equ	0xFD8
 13372                           
 13373 ;; *************** function ___ftdiv *****************
 13374 ;; Defined at:
 13375 ;;		line 54 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 13376 ;; Parameters:    Size  Location     Type
 13377 ;;  f1              3   43[COMRAM] float 
 13378 ;;  f2              3   46[COMRAM] float 
 13379 ;; Auto vars:     Size  Location     Type
 13380 ;;  f3              3   53[COMRAM] float 
 13381 ;;  sign            1   57[COMRAM] unsigned char 
 13382 ;;  exp             1   56[COMRAM] unsigned char 
 13383 ;;  cntr            1   52[COMRAM] unsigned char 
 13384 ;; Return value:  Size  Location     Type
 13385 ;;                  3   43[COMRAM] float 
 13386 ;; Registers used:
 13387 ;;		wreg, status,2, status,0, cstack
 13388 ;; Tracked objects:
 13389 ;;		On entry : 0/0
 13390 ;;		On exit  : 0/0
 13391 ;;		Unchanged: 0/0
 13392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13393 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13394 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13395 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13396 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13397 ;;Total ram usage:       15 bytes
 13398 ;; Hardware stack levels used:    1
 13399 ;; Hardware stack levels required when called:    4
 13400 ;; This function calls:
 13401 ;;		___ftpack
 13402 ;; This function is called by:
 13403 ;;		_do_update_pwm
 13404 ;;		_read_volt
 13405 ;; This function uses a non-reentrant model
 13406 ;;
 13407                           
 13408                           	psect	text71
 13409  00230C                     __ptext71:
 13410                           	opt stack 0
 13411  00230C                     ___ftdiv:
 13412                           	opt stack 25
 13413                           
 13414                           ;incstack = 0
 13415  00230C  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
 13416  002310  6A33               	clrf	(??___ftdiv+1)& (0+255),c
 13417  002312  6A34               	clrf	(??___ftdiv+2)& (0+255),c
 13418  002314  342D               	rlcf	___ftdiv@f1+1,w,c
 13419  002316  3632               	rlcf	??___ftdiv& (0+255),f,c
 13420  002318  E301               	bnc	u6321
 13421  00231A  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
 13422  00231C                     u6321:
 13423  00231C  5032               	movf	??___ftdiv,w,c
 13424  00231E  6E39               	movwf	___ftdiv@exp,c
 13425  002320  5039               	movf	___ftdiv@exp,w,c
 13426  002322  A4D8               	btfss	status,2,c
 13427  002324  D002               	goto	l8669
 13428  002326  D00E               	goto	l8671
 13429  002328  D061               	goto	l1895
 13430  00232A                     l8669:
 13431  00232A  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
 13432  00232E  6A33               	clrf	(??___ftdiv+1)& (0+255),c
 13433  002330  6A34               	clrf	(??___ftdiv+2)& (0+255),c
 13434  002332  3430               	rlcf	___ftdiv@f2+1,w,c
 13435  002334  3632               	rlcf	??___ftdiv& (0+255),f,c
 13436  002336  E301               	bnc	u6341
 13437  002338  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
 13438  00233A                     u6341:
 13439  00233A  5032               	movf	??___ftdiv,w,c
 13440  00233C  6E3A               	movwf	___ftdiv@sign,c
 13441  00233E  503A               	movf	___ftdiv@sign,w,c
 13442  002340  A4D8               	btfss	status,2,c
 13443  002342  D007               	goto	l8675
 13444  002344                     l8671:
 13445  002344  0E00               	movlw	0
 13446  002346  6E2C               	movwf	?___ftdiv,c
 13447  002348  0E00               	movlw	0
 13448  00234A  6E2D               	movwf	?___ftdiv+1,c
 13449  00234C  0E00               	movlw	0
 13450  00234E  6E2E               	movwf	?___ftdiv+2,c
 13451  002350  D04D               	goto	l1895
 13452  002352                     l8675:
 13453  002352  0E00               	movlw	0
 13454  002354  6E36               	movwf	___ftdiv@f3,c
 13455  002356  0E00               	movlw	0
 13456  002358  6E37               	movwf	___ftdiv@f3+1,c
 13457  00235A  0E00               	movlw	0
 13458  00235C  6E38               	movwf	___ftdiv@f3+2,c
 13459  00235E  503A               	movf	___ftdiv@sign,w,c
 13460  002360  0F89               	addlw	137
 13461  002362  5E39               	subwf	___ftdiv@exp,f,c
 13462  002364  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
 13463  002368  5031               	movf	___ftdiv@f2+2,w,c
 13464  00236A  1A3A               	xorwf	___ftdiv@sign,f,c
 13465  00236C  0E80               	movlw	128
 13466  00236E  163A               	andwf	___ftdiv@sign,f,c
 13467  002370  8E2D               	bsf	___ftdiv@f1+1,7,c
 13468  002372  0EFF               	movlw	255
 13469  002374  162C               	andwf	___ftdiv@f1,f,c
 13470  002376  0EFF               	movlw	255
 13471  002378  162D               	andwf	___ftdiv@f1+1,f,c
 13472  00237A  0E00               	movlw	0
 13473  00237C  162E               	andwf	___ftdiv@f1+2,f,c
 13474  00237E  8E30               	bsf	___ftdiv@f2+1,7,c
 13475  002380  0EFF               	movlw	255
 13476  002382  162F               	andwf	___ftdiv@f2,f,c
 13477  002384  0EFF               	movlw	255
 13478  002386  1630               	andwf	___ftdiv@f2+1,f,c
 13479  002388  0E00               	movlw	0
 13480  00238A  1631               	andwf	___ftdiv@f2+2,f,c
 13481  00238C  0E18               	movlw	24
 13482  00238E  6E35               	movwf	___ftdiv@cntr,c
 13483  002390  D000               	goto	l8695
 13484  002392                     l8695:
 13485  002392  90D8               	bcf	status,0,c
 13486  002394  3636               	rlcf	___ftdiv@f3,f,c
 13487  002396  3637               	rlcf	___ftdiv@f3+1,f,c
 13488  002398  3638               	rlcf	___ftdiv@f3+2,f,c
 13489  00239A  502F               	movf	___ftdiv@f2,w,c
 13490  00239C  5C2C               	subwf	___ftdiv@f1,w,c
 13491  00239E  5030               	movf	___ftdiv@f2+1,w,c
 13492  0023A0  582D               	subwfb	___ftdiv@f1+1,w,c
 13493  0023A2  5031               	movf	___ftdiv@f2+2,w,c
 13494  0023A4  582E               	subwfb	___ftdiv@f1+2,w,c
 13495  0023A6  A0D8               	btfss	status,0,c
 13496  0023A8  D007               	goto	l1898
 13497  0023AA  502F               	movf	___ftdiv@f2,w,c
 13498  0023AC  5E2C               	subwf	___ftdiv@f1,f,c
 13499  0023AE  5030               	movf	___ftdiv@f2+1,w,c
 13500  0023B0  5A2D               	subwfb	___ftdiv@f1+1,f,c
 13501  0023B2  5031               	movf	___ftdiv@f2+2,w,c
 13502  0023B4  5A2E               	subwfb	___ftdiv@f1+2,f,c
 13503  0023B6  8036               	bsf	___ftdiv@f3,0,c
 13504  0023B8                     l1898:
 13505  0023B8  90D8               	bcf	status,0,c
 13506  0023BA  362C               	rlcf	___ftdiv@f1,f,c
 13507  0023BC  362D               	rlcf	___ftdiv@f1+1,f,c
 13508  0023BE  362E               	rlcf	___ftdiv@f1+2,f,c
 13509  0023C0  2E35               	decfsz	___ftdiv@cntr,f,c
 13510  0023C2  D7E7               	goto	l8695
 13511  0023C4  D000               	goto	l8705
 13512  0023C6                     l8705:
 13513  0023C6  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
 13514  0023CA  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 13515  0023CE  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 13516  0023D2  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
 13517  0023D6  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
 13518  0023DA  EC9A  F013         	call	___ftpack	;wreg free
 13519  0023DE  C011  F02C         	movff	?___ftpack,?___ftdiv
 13520  0023E2  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
 13521  0023E6  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
 13522  0023EA  D000               	goto	l1895
 13523  0023EC                     l1895:
 13524  0023EC  0012               	return		;funcret
 13525  0023EE                     __end_of___ftdiv:
 13526                           	opt stack 0
 13527                           tblptru	equ	0xFF8
 13528                           tblptrh	equ	0xFF7
 13529                           tblptrl	equ	0xFF6
 13530                           tablat	equ	0xFF5
 13531                           prodh	equ	0xFF4
 13532                           prodl	equ	0xFF3
 13533                           intcon	equ	0xFF2
 13534                           intcon2	equ	0xFF1
 13535                           postinc0	equ	0xFEE
 13536                           wreg	equ	0xFE8
 13537                           postdec1	equ	0xFE5
 13538                           plusw1	equ	0xFE3
 13539                           fsr1l	equ	0xFE1
 13540                           indf2	equ	0xFDF
 13541                           postinc2	equ	0xFDE
 13542                           plusw2	equ	0xFDB
 13543                           fsr2h	equ	0xFDA
 13544                           fsr2l	equ	0xFD9
 13545                           status	equ	0xFD8
 13546                           
 13547 ;; *************** function ___ftpack *****************
 13548 ;; Defined at:
 13549 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\float.c"
 13550 ;; Parameters:    Size  Location     Type
 13551 ;;  arg             3   16[COMRAM] unsigned um
 13552 ;;  exp             1   19[COMRAM] unsigned char 
 13553 ;;  sign            1   20[COMRAM] unsigned char 
 13554 ;; Auto vars:     Size  Location     Type
 13555 ;;		None
 13556 ;; Return value:  Size  Location     Type
 13557 ;;                  3   16[COMRAM] float 
 13558 ;; Registers used:
 13559 ;;		wreg, status,2, status,0
 13560 ;; Tracked objects:
 13561 ;;		On entry : 0/0
 13562 ;;		On exit  : 0/0
 13563 ;;		Unchanged: 0/0
 13564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13565 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13567 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13568 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13569 ;;Total ram usage:        8 bytes
 13570 ;; Hardware stack levels used:    1
 13571 ;; Hardware stack levels required when called:    3
 13572 ;; This function calls:
 13573 ;;		Nothing
 13574 ;; This function is called by:
 13575 ;;		___ftdiv
 13576 ;;		___ftmul
 13577 ;;		___lbtoft
 13578 ;;		___lwtoft
 13579 ;; This function uses a non-reentrant model
 13580 ;;
 13581                           
 13582                           	psect	text72
 13583  002734                     __ptext72:
 13584                           	opt stack 0
 13585  002734                     ___ftpack:
 13586                           	opt stack 25
 13587                           
 13588                           ;incstack = 0
 13589  002734  5014               	movf	___ftpack@exp,w,c
 13590  002736  B4D8               	btfsc	status,2,c
 13591  002738  D005               	goto	l8249
 13592  00273A  5011               	movf	___ftpack@arg,w,c
 13593  00273C  1012               	iorwf	___ftpack@arg+1,w,c
 13594  00273E  1013               	iorwf	___ftpack@arg+2,w,c
 13595  002740  A4D8               	btfss	status,2,c
 13596  002742  D00E               	goto	l8255
 13597  002744                     l8249:
 13598  002744  0E00               	movlw	0
 13599  002746  6E11               	movwf	?___ftpack,c
 13600  002748  0E00               	movlw	0
 13601  00274A  6E12               	movwf	?___ftpack+1,c
 13602  00274C  0E00               	movlw	0
 13603  00274E  6E13               	movwf	?___ftpack+2,c
 13604  002750  D053               	goto	l1823
 13605  002752  D006               	goto	l8255
 13606  002754                     l8253:
 13607  002754  2A14               	incf	___ftpack@exp,f,c
 13608  002756  90D8               	bcf	status,0,c
 13609  002758  3213               	rrcf	___ftpack@arg+2,f,c
 13610  00275A  3212               	rrcf	___ftpack@arg+1,f,c
 13611  00275C  3211               	rrcf	___ftpack@arg,f,c
 13612  00275E  D000               	goto	l8255
 13613  002760                     l8255:
 13614  002760  0E00               	movlw	0
 13615  002762  1411               	andwf	___ftpack@arg,w,c
 13616  002764  6E16               	movwf	??___ftpack& (0+255),c
 13617  002766  0E00               	movlw	0
 13618  002768  1412               	andwf	___ftpack@arg+1,w,c
 13619  00276A  6E17               	movwf	(??___ftpack+1)& (0+255),c
 13620  00276C  0EFE               	movlw	254
 13621  00276E  1413               	andwf	___ftpack@arg+2,w,c
 13622  002770  6E18               	movwf	(??___ftpack+2)& (0+255),c
 13623  002772  5016               	movf	??___ftpack,w,c
 13624  002774  1017               	iorwf	??___ftpack+1,w,c
 13625  002776  1018               	iorwf	??___ftpack+2,w,c
 13626  002778  B4D8               	btfsc	status,2,c
 13627  00277A  D00E               	goto	l8261
 13628  00277C  D7EB               	goto	l8253
 13629  00277E  D00C               	goto	l8261
 13630  002780                     l8257:
 13631  002780  2A14               	incf	___ftpack@exp,f,c
 13632  002782  0E01               	movlw	1
 13633  002784  2611               	addwf	___ftpack@arg,f,c
 13634  002786  0E00               	movlw	0
 13635  002788  2212               	addwfc	___ftpack@arg+1,f,c
 13636  00278A  0E00               	movlw	0
 13637  00278C  2213               	addwfc	___ftpack@arg+2,f,c
 13638  00278E  90D8               	bcf	status,0,c
 13639  002790  3213               	rrcf	___ftpack@arg+2,f,c
 13640  002792  3212               	rrcf	___ftpack@arg+1,f,c
 13641  002794  3211               	rrcf	___ftpack@arg,f,c
 13642  002796  D000               	goto	l8261
 13643  002798                     l8261:
 13644  002798  0E00               	movlw	0
 13645  00279A  1411               	andwf	___ftpack@arg,w,c
 13646  00279C  6E16               	movwf	??___ftpack& (0+255),c
 13647  00279E  0E00               	movlw	0
 13648  0027A0  1412               	andwf	___ftpack@arg+1,w,c
 13649  0027A2  6E17               	movwf	(??___ftpack+1)& (0+255),c
 13650  0027A4  0EFF               	movlw	255
 13651  0027A6  1413               	andwf	___ftpack@arg+2,w,c
 13652  0027A8  6E18               	movwf	(??___ftpack+2)& (0+255),c
 13653  0027AA  5016               	movf	??___ftpack,w,c
 13654  0027AC  1017               	iorwf	??___ftpack+1,w,c
 13655  0027AE  1018               	iorwf	??___ftpack+2,w,c
 13656  0027B0  B4D8               	btfsc	status,2,c
 13657  0027B2  D008               	goto	l8265
 13658  0027B4  D7E5               	goto	l8257
 13659  0027B6  D006               	goto	l8265
 13660  0027B8                     l8263:
 13661  0027B8  0614               	decf	___ftpack@exp,f,c
 13662  0027BA  90D8               	bcf	status,0,c
 13663  0027BC  3611               	rlcf	___ftpack@arg,f,c
 13664  0027BE  3612               	rlcf	___ftpack@arg+1,f,c
 13665  0027C0  3613               	rlcf	___ftpack@arg+2,f,c
 13666  0027C2  D000               	goto	l8265
 13667  0027C4                     l8265:
 13668  0027C4  BE12               	btfsc	___ftpack@arg+1,7,c
 13669  0027C6  D004               	goto	l1834
 13670  0027C8  0E02               	movlw	2
 13671  0027CA  6014               	cpfslt	___ftpack@exp,c
 13672  0027CC  D7F5               	goto	l8263
 13673  0027CE  D000               	goto	l1834
 13674  0027D0                     l1834:
 13675  0027D0  B014               	btfsc	___ftpack@exp,0,c
 13676  0027D2  D002               	goto	l8271
 13677  0027D4  9E12               	bcf	___ftpack@arg+1,7,c
 13678  0027D6  D000               	goto	l8271
 13679  0027D8                     l8271:
 13680  0027D8  90D8               	bcf	status,0,c
 13681  0027DA  3214               	rrcf	___ftpack@exp,f,c
 13682  0027DC  5014               	movf	___ftpack@exp,w,c
 13683  0027DE  1213               	iorwf	___ftpack@arg+2,f,c
 13684  0027E0  5015               	movf	___ftpack@sign,w,c
 13685  0027E2  B4D8               	btfsc	status,2,c
 13686  0027E4  D002               	goto	l8277
 13687  0027E6  8E13               	bsf	___ftpack@arg+2,7,c
 13688  0027E8  D000               	goto	l8277
 13689  0027EA                     l8277:
 13690  0027EA  C011  F011         	movff	___ftpack@arg,?___ftpack
 13691  0027EE  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 13692  0027F2  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 13693  0027F6  D000               	goto	l1823
 13694  0027F8                     l1823:
 13695  0027F8  0012               	return		;funcret
 13696  0027FA                     __end_of___ftpack:
 13697                           	opt stack 0
 13698                           tblptru	equ	0xFF8
 13699                           tblptrh	equ	0xFF7
 13700                           tblptrl	equ	0xFF6
 13701                           tablat	equ	0xFF5
 13702                           prodh	equ	0xFF4
 13703                           prodl	equ	0xFF3
 13704                           intcon	equ	0xFF2
 13705                           intcon2	equ	0xFF1
 13706                           postinc0	equ	0xFEE
 13707                           wreg	equ	0xFE8
 13708                           postdec1	equ	0xFE5
 13709                           plusw1	equ	0xFE3
 13710                           fsr1l	equ	0xFE1
 13711                           indf2	equ	0xFDF
 13712                           postinc2	equ	0xFDE
 13713                           plusw2	equ	0xFDB
 13714                           fsr2h	equ	0xFDA
 13715                           fsr2l	equ	0xFD9
 13716                           status	equ	0xFD8
 13717                           
 13718 ;; *************** function _Wait_One_Sec *****************
 13719 ;; Defined at:
 13720 ;;		line 92 in file "utils.c"
 13721 ;; Parameters:    Size  Location     Type
 13722 ;;		None
 13723 ;; Auto vars:     Size  Location     Type
 13724 ;;  k               2   16[COMRAM] int 
 13725 ;; Return value:  Size  Location     Type
 13726 ;;		None               void
 13727 ;; Registers used:
 13728 ;;		wreg, status,2, status,0
 13729 ;; Tracked objects:
 13730 ;;		On entry : 0/0
 13731 ;;		On exit  : 0/0
 13732 ;;		Unchanged: 0/0
 13733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13735 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13737 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13738 ;;Total ram usage:        2 bytes
 13739 ;; Hardware stack levels used:    1
 13740 ;; Hardware stack levels required when called:    3
 13741 ;; This function calls:
 13742 ;;		Nothing
 13743 ;; This function is called by:
 13744 ;;		_Do_Beep_Good
 13745 ;;		_Do_Beep_Bad
 13746 ;;		_Set_RGB_Color
 13747 ;;		_Do_Beep
 13748 ;; This function uses a non-reentrant model
 13749 ;;
 13750                           
 13751                           	psect	text73
 13752  003B98                     __ptext73:
 13753                           	opt stack 0
 13754  003B98                     _Wait_One_Sec:
 13755                           	opt stack 25
 13756                           
 13757                           ;utils.c: 94: for (int k=0;k<0x8000;k++);
 13758                           
 13759                           ;incstack = 0
 13760  003B98  0E00               	movlw	0
 13761  003B9A  6E12               	movwf	Wait_One_Sec@k+1,c
 13762  003B9C  0E00               	movlw	0
 13763  003B9E  6E11               	movwf	Wait_One_Sec@k,c
 13764  003BA0                     l6357:
 13765  003BA0  0E80               	movlw	128
 13766  003BA2  5C12               	subwf	Wait_One_Sec@k+1,w,c
 13767  003BA4  B0D8               	btfsc	status,0,c
 13768  003BA6  D005               	goto	l1374
 13769  003BA8  D001               	goto	l6361
 13770  003BAA  D003               	goto	l1374
 13771  003BAC                     l6361:
 13772  003BAC  4A11               	infsnz	Wait_One_Sec@k,f,c
 13773  003BAE  2A12               	incf	Wait_One_Sec@k+1,f,c
 13774  003BB0  D7F7               	goto	l6357
 13775  003BB2                     l1374:
 13776  003BB2  0012               	return		;funcret
 13777  003BB4                     __end_of_Wait_One_Sec:
 13778                           	opt stack 0
 13779                           tblptru	equ	0xFF8
 13780                           tblptrh	equ	0xFF7
 13781                           tblptrl	equ	0xFF6
 13782                           tablat	equ	0xFF5
 13783                           prodh	equ	0xFF4
 13784                           prodl	equ	0xFF3
 13785                           intcon	equ	0xFF2
 13786                           intcon2	equ	0xFF1
 13787                           postinc0	equ	0xFEE
 13788                           wreg	equ	0xFE8
 13789                           postdec1	equ	0xFE5
 13790                           plusw1	equ	0xFE3
 13791                           fsr1l	equ	0xFE1
 13792                           indf2	equ	0xFDF
 13793                           postinc2	equ	0xFDE
 13794                           plusw2	equ	0xFDB
 13795                           fsr2h	equ	0xFDA
 13796                           fsr2l	equ	0xFD9
 13797                           status	equ	0xFD8
 13798                           
 13799 ;; *************** function _Deactivate_Buzzer *****************
 13800 ;; Defined at:
 13801 ;;		line 129 in file "utils.c"
 13802 ;; Parameters:    Size  Location     Type
 13803 ;;		None
 13804 ;; Auto vars:     Size  Location     Type
 13805 ;;		None
 13806 ;; Return value:  Size  Location     Type
 13807 ;;		None               void
 13808 ;; Registers used:
 13809 ;;		wreg, status,2
 13810 ;; Tracked objects:
 13811 ;;		On entry : 0/0
 13812 ;;		On exit  : 0/0
 13813 ;;		Unchanged: 0/0
 13814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13819 ;;Total ram usage:        0 bytes
 13820 ;; Hardware stack levels used:    1
 13821 ;; Hardware stack levels required when called:    3
 13822 ;; This function calls:
 13823 ;;		Nothing
 13824 ;; This function is called by:
 13825 ;;		_Test_Alarm
 13826 ;;		_Do_Beep_Good
 13827 ;;		_Do_Beep_Bad
 13828 ;;		_Do_Beep
 13829 ;; This function uses a non-reentrant model
 13830 ;;
 13831                           
 13832                           	psect	text74
 13833  003E60                     __ptext74:
 13834                           	opt stack 0
 13835  003E60                     _Deactivate_Buzzer:
 13836                           	opt stack 26
 13837                           
 13838                           ;utils.c: 131: CCP2CON = 0x0;
 13839                           
 13840                           ;incstack = 0
 13841  003E60  0E00               	movlw	0
 13842  003E62  6EBA               	movwf	4026,c	;volatile
 13843                           
 13844                           ;utils.c: 132: PORTBbits.RB3 = 0;
 13845  003E64  9681               	bcf	3969,3,c	;volatile
 13846  003E66  0012               	return		;funcret
 13847  003E68                     __end_of_Deactivate_Buzzer:
 13848                           	opt stack 0
 13849                           tblptru	equ	0xFF8
 13850                           tblptrh	equ	0xFF7
 13851                           tblptrl	equ	0xFF6
 13852                           tablat	equ	0xFF5
 13853                           prodh	equ	0xFF4
 13854                           prodl	equ	0xFF3
 13855                           intcon	equ	0xFF2
 13856                           intcon2	equ	0xFF1
 13857                           postinc0	equ	0xFEE
 13858                           wreg	equ	0xFE8
 13859                           postdec1	equ	0xFE5
 13860                           plusw1	equ	0xFE3
 13861                           fsr1l	equ	0xFE1
 13862                           indf2	equ	0xFDF
 13863                           postinc2	equ	0xFDE
 13864                           plusw2	equ	0xFDB
 13865                           fsr2h	equ	0xFDA
 13866                           fsr2l	equ	0xFD9
 13867                           status	equ	0xFD8
 13868                           
 13869 ;; *************** function _Activate_Buzzer_500Hz *****************
 13870 ;; Defined at:
 13871 ;;		line 105 in file "utils.c"
 13872 ;; Parameters:    Size  Location     Type
 13873 ;;		None
 13874 ;; Auto vars:     Size  Location     Type
 13875 ;;		None
 13876 ;; Return value:  Size  Location     Type
 13877 ;;		None               void
 13878 ;; Registers used:
 13879 ;;		wreg, status,2
 13880 ;; Tracked objects:
 13881 ;;		On entry : 0/0
 13882 ;;		On exit  : 0/0
 13883 ;;		Unchanged: 0/0
 13884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13889 ;;Total ram usage:        0 bytes
 13890 ;; Hardware stack levels used:    1
 13891 ;; Hardware stack levels required when called:    3
 13892 ;; This function calls:
 13893 ;;		Nothing
 13894 ;; This function is called by:
 13895 ;;		_Do_Beep_Bad
 13896 ;; This function uses a non-reentrant model
 13897 ;;
 13898                           
 13899                           	psect	text75
 13900  003D58                     __ptext75:
 13901                           	opt stack 0
 13902  003D58                     _Activate_Buzzer_500Hz:
 13903                           	opt stack 25
 13904                           
 13905                           ;utils.c: 107: PR2 = 0b11111001 ;
 13906                           
 13907                           ;incstack = 0
 13908  003D58  0EF9               	movlw	249
 13909  003D5A  6ECB               	movwf	4043,c	;volatile
 13910                           
 13911                           ;utils.c: 108: T2CON = 0b00000111 ;
 13912  003D5C  0E07               	movlw	7
 13913  003D5E  6ECA               	movwf	4042,c	;volatile
 13914                           
 13915                           ;utils.c: 109: CCPR2L = 0b01111100 ;
 13916  003D60  0E7C               	movlw	124
 13917  003D62  6EBB               	movwf	4027,c	;volatile
 13918                           
 13919                           ;utils.c: 110: CCP2CON = 0b00111100 ;
 13920  003D64  0E3C               	movlw	60
 13921  003D66  6EBA               	movwf	4026,c	;volatile
 13922  003D68  0012               	return		;funcret
 13923  003D6A                     __end_of_Activate_Buzzer_500Hz:
 13924                           	opt stack 0
 13925                           tblptru	equ	0xFF8
 13926                           tblptrh	equ	0xFF7
 13927                           tblptrl	equ	0xFF6
 13928                           tablat	equ	0xFF5
 13929                           prodh	equ	0xFF4
 13930                           prodl	equ	0xFF3
 13931                           intcon	equ	0xFF2
 13932                           intcon2	equ	0xFF1
 13933                           postinc0	equ	0xFEE
 13934                           wreg	equ	0xFE8
 13935                           postdec1	equ	0xFE5
 13936                           plusw1	equ	0xFE3
 13937                           fsr1l	equ	0xFE1
 13938                           indf2	equ	0xFDF
 13939                           postinc2	equ	0xFDE
 13940                           plusw2	equ	0xFDB
 13941                           fsr2h	equ	0xFDA
 13942                           fsr2l	equ	0xFD9
 13943                           status	equ	0xFD8
 13944                           
 13945 ;; *************** function _Decrease_Alarm_Time *****************
 13946 ;; Defined at:
 13947 ;;		line 90 in file "Setup_Alarm_Time.c"
 13948 ;; Parameters:    Size  Location     Type
 13949 ;;		None
 13950 ;; Auto vars:     Size  Location     Type
 13951 ;;		None
 13952 ;; Return value:  Size  Location     Type
 13953 ;;		None               void
 13954 ;; Registers used:
 13955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13956 ;; Tracked objects:
 13957 ;;		On entry : 0/0
 13958 ;;		On exit  : 0/0
 13959 ;;		Unchanged: 0/0
 13960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13965 ;;Total ram usage:        0 bytes
 13966 ;; Hardware stack levels used:    1
 13967 ;; Hardware stack levels required when called:   11
 13968 ;; This function calls:
 13969 ;;		_Update_Setup_Alarm_Time_Screen
 13970 ;; This function is called by:
 13971 ;;		_Do_Setup_Alarm_Time
 13972 ;; This function uses a non-reentrant model
 13973 ;;
 13974                           
 13975                           	psect	text76
 13976  003618                     __ptext76:
 13977                           	opt stack 0
 13978  003618                     _Decrease_Alarm_Time:
 13979                           	opt stack 18
 13980                           
 13981                           ;Setup_Alarm_Time.c: 92: switch (Select_Alarm_Field)
 13982                           
 13983                           ;incstack = 0
 13984  003618  D018               	goto	l9265
 13985  00361A                     l9245:
 13986                           
 13987                           ;Setup_Alarm_Time.c: 95: if (setup_alarm_hour == 0) setup_alarm_hour = 23;
 13988  00361A  5064               	movf	_setup_alarm_hour,w,c
 13989  00361C  A4D8               	btfss	status,2,c
 13990  00361E  D003               	goto	l9249
 13991  003620  0E17               	movlw	23
 13992  003622  6E64               	movwf	_setup_alarm_hour,c
 13993  003624  D01D               	goto	l9267
 13994  003626                     l9249:
 13995                           
 13996                           ;Setup_Alarm_Time.c: 96: else --setup_alarm_hour;
 13997  003626  0664               	decf	_setup_alarm_hour,f,c
 13998                           
 13999                           ;Setup_Alarm_Time.c: 97: break;
 14000  003628  D01B               	goto	l9267
 14001  00362A                     l9251:
 14002                           
 14003                           ;Setup_Alarm_Time.c: 99: if (setup_alarm_minute == 0) setup_alarm_minute = 59;
 14004  00362A  5065               	movf	_setup_alarm_minute,w,c
 14005  00362C  A4D8               	btfss	status,2,c
 14006  00362E  D003               	goto	l9255
 14007  003630  0E3B               	movlw	59
 14008  003632  6E65               	movwf	_setup_alarm_minute,c
 14009  003634  D015               	goto	l9267
 14010  003636                     l9255:
 14011                           
 14012                           ;Setup_Alarm_Time.c: 100: else --setup_alarm_minute;
 14013  003636  0665               	decf	_setup_alarm_minute,f,c
 14014                           
 14015                           ;Setup_Alarm_Time.c: 101: break;
 14016  003638  D013               	goto	l9267
 14017  00363A                     l9257:
 14018                           
 14019                           ;Setup_Alarm_Time.c: 103: if (setup_alarm_second == 0) setup_alarm_second = 59;
 14020  00363A  5066               	movf	_setup_alarm_second,w,c
 14021  00363C  A4D8               	btfss	status,2,c
 14022  00363E  D003               	goto	l9261
 14023  003640  0E3B               	movlw	59
 14024  003642  6E66               	movwf	_setup_alarm_second,c
 14025  003644  D00D               	goto	l9267
 14026  003646                     l9261:
 14027                           
 14028                           ;Setup_Alarm_Time.c: 104: else --setup_alarm_second;
 14029  003646  0666               	decf	_setup_alarm_second,f,c
 14030                           
 14031                           ;Setup_Alarm_Time.c: 108: }
 14032                           
 14033                           ;Setup_Alarm_Time.c: 107: break;
 14034                           
 14035                           ;Setup_Alarm_Time.c: 106: default:
 14036                           
 14037                           ;Setup_Alarm_Time.c: 105: break;
 14038  003648  D00B               	goto	l9267
 14039  00364A                     l9265:
 14040  00364A  5053               	movf	_Select_Alarm_Field,w,c
 14041                           
 14042                           ; Switch size 1, requested type "space"
 14043                           ; Number of cases is 3, Range of values is 0 to 2
 14044                           ; switch strategies available:
 14045                           ; Name         Instructions Cycles
 14046                           ; simple_byte           10     6 (average)
 14047                           ;	Chosen strategy is simple_byte
 14048  00364C  0A00               	xorlw	0	; case 0
 14049  00364E  B4D8               	btfsc	status,2,c
 14050  003650  D7E4               	goto	l9245
 14051  003652  0A01               	xorlw	1	; case 1
 14052  003654  B4D8               	btfsc	status,2,c
 14053  003656  D7E9               	goto	l9251
 14054  003658  0A03               	xorlw	3	; case 2
 14055  00365A  B4D8               	btfsc	status,2,c
 14056  00365C  D7EE               	goto	l9257
 14057  00365E  D000               	goto	l9267
 14058  003660                     l9267:
 14059                           
 14060                           ;Setup_Alarm_Time.c: 109: Update_Setup_Alarm_Time_Screen();
 14061  003660  EC9A  F010         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
 14062  003664  0012               	return		;funcret
 14063  003666                     __end_of_Decrease_Alarm_Time:
 14064                           	opt stack 0
 14065                           tblptru	equ	0xFF8
 14066                           tblptrh	equ	0xFF7
 14067                           tblptrl	equ	0xFF6
 14068                           tablat	equ	0xFF5
 14069                           prodh	equ	0xFF4
 14070                           prodl	equ	0xFF3
 14071                           intcon	equ	0xFF2
 14072                           intcon2	equ	0xFF1
 14073                           postinc0	equ	0xFEE
 14074                           wreg	equ	0xFE8
 14075                           postdec1	equ	0xFE5
 14076                           plusw1	equ	0xFE3
 14077                           fsr1l	equ	0xFE1
 14078                           indf2	equ	0xFDF
 14079                           postinc2	equ	0xFDE
 14080                           plusw2	equ	0xFDB
 14081                           fsr2h	equ	0xFDA
 14082                           fsr2l	equ	0xFD9
 14083                           status	equ	0xFD8
 14084                           
 14085 ;; *************** function _Update_Setup_Alarm_Time_Screen *****************
 14086 ;; Defined at:
 14087 ;;		line 164 in file "Setup_Alarm_Time.c"
 14088 ;; Parameters:    Size  Location     Type
 14089 ;;		None
 14090 ;; Auto vars:     Size  Location     Type
 14091 ;;		None
 14092 ;; Return value:  Size  Location     Type
 14093 ;;		None               void
 14094 ;; Registers used:
 14095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14096 ;; Tracked objects:
 14097 ;;		On entry : 0/0
 14098 ;;		On exit  : 0/0
 14099 ;;		Unchanged: 0/0
 14100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14105 ;;Total ram usage:        0 bytes
 14106 ;; Hardware stack levels used:    1
 14107 ;; Hardware stack levels required when called:   10
 14108 ;; This function calls:
 14109 ;;		___awdiv
 14110 ;;		___awmod
 14111 ;;		_drawtext
 14112 ;;		_printf
 14113 ;; This function is called by:
 14114 ;;		_Do_Setup_Alarm_Time
 14115 ;;		_Increase_Alarm_Time
 14116 ;;		_Decrease_Alarm_Time
 14117 ;; This function uses a non-reentrant model
 14118 ;;
 14119                           
 14120                           	psect	text77
 14121  002134                     __ptext77:
 14122                           	opt stack 0
 14123  002134                     _Update_Setup_Alarm_Time_Screen:
 14124                           	opt stack 19
 14125                           
 14126                           ;Setup_Alarm_Time.c: 166: printf ("%x:%x:%x\r\n", setup_alarm_hour,setup_alarm_minute,se
      +                          tup_alarm_second);
 14127                           
 14128                           ;incstack = 0
 14129  002134  0EA0               	movlw	low STR_27
 14130  002136  6E1D               	movwf	printf@f,c
 14131  002138  0EFF               	movlw	high STR_27
 14132  00213A  6E1E               	movwf	printf@f+1,c
 14133  00213C  C064  F01F         	movff	_setup_alarm_hour,?_printf+2
 14134  002140  6A20               	clrf	?_printf+3,c
 14135  002142  C065  F021         	movff	_setup_alarm_minute,?_printf+4
 14136  002146  6A22               	clrf	?_printf+5,c
 14137  002148  C066  F023         	movff	_setup_alarm_second,?_printf+6
 14138  00214C  6A24               	clrf	?_printf+7,c
 14139  00214E  EC03  F005         	call	_printf	;wreg free
 14140                           
 14141                           ;Setup_Alarm_Time.c: 167: setup_alarm_time[0] = (setup_alarm_hour/10) + '0';
 14142  002152  C064  F153         	movff	_setup_alarm_hour,___awdiv@dividend
 14143  002156  0101               	movlb	1	; () banked
 14144  002158  6B54               	clrf	(___awdiv@dividend+1)& (0+255),b
 14145  00215A  0E00               	movlw	0
 14146  00215C  0101               	movlb	1	; () banked
 14147  00215E  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
 14148  002160  0E0A               	movlw	10
 14149  002162  6F55               	movwf	___awdiv@divisor& (0+255),b
 14150  002164  ECCD  F012         	call	___awdiv	;wreg free
 14151  002168  0101               	movlb	1	; () banked
 14152  00216A  5153               	movf	?___awdiv& (0+255),w,b
 14153  00216C  0F30               	addlw	48
 14154  00216E  0100               	movlb	0	; () banked
 14155  002170  6F94               	movwf	_setup_alarm_time& (0+255),b
 14156                           
 14157                           ; BSR set to: 0
 14158                           ;Setup_Alarm_Time.c: 168: setup_alarm_time[1] = (setup_alarm_hour%10) + '0';
 14159  002172  C064  F03B         	movff	_setup_alarm_hour,___awmod@dividend
 14160  002176  6A3C               	clrf	___awmod@dividend+1,c
 14161  002178  0E00               	movlw	0
 14162  00217A  6E3E               	movwf	___awmod@divisor+1,c
 14163  00217C  0E0A               	movlw	10
 14164  00217E  6E3D               	movwf	___awmod@divisor,c
 14165  002180  EC63  F017         	call	___awmod	;wreg free
 14166  002184  503B               	movf	?___awmod,w,c
 14167  002186  0F30               	addlw	48
 14168  002188  0100               	movlb	0	; () banked
 14169  00218A  6F95               	movwf	(_setup_alarm_time+1)& (0+255),b
 14170                           
 14171                           ; BSR set to: 0
 14172                           ;Setup_Alarm_Time.c: 169: setup_alarm_time[3] = (setup_alarm_minute/10) + '0';
 14173  00218C  C065  F153         	movff	_setup_alarm_minute,___awdiv@dividend
 14174  002190  0101               	movlb	1	; () banked
 14175  002192  6B54               	clrf	(___awdiv@dividend+1)& (0+255),b
 14176  002194  0E00               	movlw	0
 14177  002196  0101               	movlb	1	; () banked
 14178  002198  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
 14179  00219A  0E0A               	movlw	10
 14180  00219C  6F55               	movwf	___awdiv@divisor& (0+255),b
 14181  00219E  ECCD  F012         	call	___awdiv	;wreg free
 14182  0021A2  0101               	movlb	1	; () banked
 14183  0021A4  5153               	movf	?___awdiv& (0+255),w,b
 14184  0021A6  0F30               	addlw	48
 14185  0021A8  0100               	movlb	0	; () banked
 14186  0021AA  6F97               	movwf	(_setup_alarm_time+3)& (0+255),b
 14187                           
 14188                           ; BSR set to: 0
 14189                           ;Setup_Alarm_Time.c: 170: setup_alarm_time[4] = (setup_alarm_minute%10) + '0';
 14190  0021AC  C065  F03B         	movff	_setup_alarm_minute,___awmod@dividend
 14191  0021B0  6A3C               	clrf	___awmod@dividend+1,c
 14192  0021B2  0E00               	movlw	0
 14193  0021B4  6E3E               	movwf	___awmod@divisor+1,c
 14194  0021B6  0E0A               	movlw	10
 14195  0021B8  6E3D               	movwf	___awmod@divisor,c
 14196  0021BA  EC63  F017         	call	___awmod	;wreg free
 14197  0021BE  503B               	movf	?___awmod,w,c
 14198  0021C0  0F30               	addlw	48
 14199  0021C2  0100               	movlb	0	; () banked
 14200  0021C4  6F98               	movwf	(_setup_alarm_time+4)& (0+255),b
 14201                           
 14202                           ; BSR set to: 0
 14203                           ;Setup_Alarm_Time.c: 171: setup_alarm_time[6] = (setup_alarm_second/10) + '0';
 14204  0021C6  C066  F153         	movff	_setup_alarm_second,___awdiv@dividend
 14205  0021CA  0101               	movlb	1	; () banked
 14206  0021CC  6B54               	clrf	(___awdiv@dividend+1)& (0+255),b
 14207  0021CE  0E00               	movlw	0
 14208  0021D0  0101               	movlb	1	; () banked
 14209  0021D2  6F56               	movwf	(___awdiv@divisor+1)& (0+255),b
 14210  0021D4  0E0A               	movlw	10
 14211  0021D6  6F55               	movwf	___awdiv@divisor& (0+255),b
 14212  0021D8  ECCD  F012         	call	___awdiv	;wreg free
 14213  0021DC  0101               	movlb	1	; () banked
 14214  0021DE  5153               	movf	?___awdiv& (0+255),w,b
 14215  0021E0  0F30               	addlw	48
 14216  0021E2  0100               	movlb	0	; () banked
 14217  0021E4  6F9A               	movwf	(_setup_alarm_time+6)& (0+255),b
 14218                           
 14219                           ; BSR set to: 0
 14220                           ;Setup_Alarm_Time.c: 172: setup_alarm_time[7] = (setup_alarm_second%10) + '0';
 14221  0021E6  C066  F03B         	movff	_setup_alarm_second,___awmod@dividend
 14222  0021EA  6A3C               	clrf	___awmod@dividend+1,c
 14223  0021EC  0E00               	movlw	0
 14224  0021EE  6E3E               	movwf	___awmod@divisor+1,c
 14225  0021F0  0E0A               	movlw	10
 14226  0021F2  6E3D               	movwf	___awmod@divisor,c
 14227  0021F4  EC63  F017         	call	___awmod	;wreg free
 14228  0021F8  503B               	movf	?___awmod,w,c
 14229  0021FA  0F30               	addlw	48
 14230  0021FC  0100               	movlb	0	; () banked
 14231  0021FE  6F9B               	movwf	(_setup_alarm_time+7)& (0+255),b
 14232                           
 14233                           ;Setup_Alarm_Time.c: 173: drawtext(15, 52, setup_alarm_time, 0x07FF, 0x0000, 2);
 14234  002200  0E34               	movlw	52
 14235  002202  6E39               	movwf	drawtext@y,c
 14236  002204  0E94               	movlw	low _setup_alarm_time
 14237  002206  6E3A               	movwf	drawtext@_text,c
 14238  002208  0E00               	movlw	high _setup_alarm_time
 14239  00220A  6E3B               	movwf	drawtext@_text+1,c
 14240  00220C  0E07               	movlw	7
 14241  00220E  6E3D               	movwf	drawtext@color+1,c
 14242  002210  683C               	setf	drawtext@color,c
 14243  002212  0E00               	movlw	0
 14244  002214  6E3F               	movwf	drawtext@bg+1,c
 14245  002216  0E00               	movlw	0
 14246  002218  6E3E               	movwf	drawtext@bg,c
 14247  00221A  0E02               	movlw	2
 14248  00221C  6E40               	movwf	drawtext@size,c
 14249  00221E  0E0F               	movlw	15
 14250  002220  EC99  F00D         	call	_drawtext
 14251  002224  0012               	return		;funcret
 14252  002226                     __end_of_Update_Setup_Alarm_Time_Screen:
 14253                           	opt stack 0
 14254                           tblptru	equ	0xFF8
 14255                           tblptrh	equ	0xFF7
 14256                           tblptrl	equ	0xFF6
 14257                           tablat	equ	0xFF5
 14258                           prodh	equ	0xFF4
 14259                           prodl	equ	0xFF3
 14260                           intcon	equ	0xFF2
 14261                           intcon2	equ	0xFF1
 14262                           postinc0	equ	0xFEE
 14263                           wreg	equ	0xFE8
 14264                           postdec1	equ	0xFE5
 14265                           plusw1	equ	0xFE3
 14266                           fsr1l	equ	0xFE1
 14267                           indf2	equ	0xFDF
 14268                           postinc2	equ	0xFDE
 14269                           plusw2	equ	0xFDB
 14270                           fsr2h	equ	0xFDA
 14271                           fsr2l	equ	0xFD9
 14272                           status	equ	0xFD8
 14273                           
 14274 ;; *************** function _printf *****************
 14275 ;; Defined at:
 14276 ;;		line 464 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
 14277 ;; Parameters:    Size  Location     Type
 14278 ;;  f               2   28[COMRAM] PTR const unsigned char 
 14279 ;;		 -> STR_36(22), STR_27(11), STR_4(20), STR_3(24), 
 14280 ;;		 -> STR_2(21), STR_1(30), 
 14281 ;; Auto vars:     Size  Location     Type
 14282 ;;  idx             1   46[COMRAM] unsigned char 
 14283 ;;  tmpval          4    0        struct .
 14284 ;;  cp              3    0        PTR const unsigned char 
 14285 ;;  width           2   53[COMRAM] int 
 14286 ;;  val             2   50[COMRAM] unsigned int 
 14287 ;;  ap              2   47[COMRAM] PTR void [1]
 14288 ;;		 -> ?_printf(2), 
 14289 ;;  len             2    0        unsigned int 
 14290 ;;  c               1   55[COMRAM] char 
 14291 ;;  flag            1   52[COMRAM] unsigned char 
 14292 ;;  prec            1   49[COMRAM] char 
 14293 ;; Return value:  Size  Location     Type
 14294 ;;                  2   28[COMRAM] int 
 14295 ;; Registers used:
 14296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14297 ;; Tracked objects:
 14298 ;;		On entry : 0/0
 14299 ;;		On exit  : 0/0
 14300 ;;		Unchanged: 0/0
 14301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14302 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14303 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14304 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14305 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14306 ;;Total ram usage:       28 bytes
 14307 ;; Hardware stack levels used:    1
 14308 ;; Hardware stack levels required when called:    4
 14309 ;; This function calls:
 14310 ;;		___lwdiv
 14311 ;;		___lwmod
 14312 ;;		___wmul
 14313 ;;		_isdigit
 14314 ;;		_putch
 14315 ;; This function is called by:
 14316 ;;		_main
 14317 ;;		_Update_Setup_Alarm_Time_Screen
 14318 ;;		_check_for_button_input
 14319 ;; This function uses a non-reentrant model
 14320 ;;
 14321                           
 14322                           	psect	text78
 14323  000A06                     __ptext78:
 14324                           	opt stack 0
 14325  000A06                     _printf:
 14326                           	opt stack 26
 14327                           
 14328                           ;doprnt.c: 466: va_list ap;
 14329                           ;doprnt.c: 499: signed char c;
 14330                           ;doprnt.c: 501: int width;
 14331                           ;doprnt.c: 506: signed char prec;
 14332                           ;doprnt.c: 508: unsigned char flag;
 14333                           ;doprnt.c: 523: union {
 14334                           ;doprnt.c: 524: unsigned long vd;
 14335                           ;doprnt.c: 525: double integ;
 14336                           ;doprnt.c: 526: } tmpval;
 14337                           ;doprnt.c: 528: unsigned int val;
 14338                           ;doprnt.c: 529: unsigned len;
 14339                           ;doprnt.c: 530: const char * cp;
 14340                           ;doprnt.c: 533: *ap = __va_start();
 14341                           
 14342                           ;incstack = 0
 14343  000A06  0E1F               	movlw	low (?_printf+2)
 14344  000A08  6E30               	movwf	printf@ap,c
 14345  000A0A  0E00               	movlw	high (?_printf+2)
 14346  000A0C  6E31               	movwf	printf@ap+1,c
 14347                           
 14348                           ;doprnt.c: 536: while(c = *f++) {
 14349  000A0E  D199               	goto	l8547
 14350  000A10                     l8421:
 14351                           
 14352                           ;doprnt.c: 538: if(c != '%')
 14353  000A10  0E25               	movlw	37
 14354  000A12  1838               	xorwf	printf@c,w,c
 14355  000A14  B4D8               	btfsc	status,2,c
 14356  000A16  D004               	goto	l8425
 14357                           
 14358                           ;doprnt.c: 540: {
 14359                           ;doprnt.c: 541: (putch(c) );
 14360  000A18  5038               	movf	printf@c,w,c
 14361  000A1A  ECF8  F01E         	call	_putch
 14362                           
 14363                           ;doprnt.c: 542: continue;
 14364  000A1E  D191               	goto	l8547
 14365  000A20                     l8425:
 14366                           
 14367                           ;doprnt.c: 543: }
 14368                           ;doprnt.c: 546: width = 0;
 14369  000A20  0E00               	movlw	0
 14370  000A22  6E37               	movwf	printf@width+1,c
 14371  000A24  0E00               	movlw	0
 14372  000A26  6E36               	movwf	printf@width,c
 14373                           
 14374                           ;doprnt.c: 548: flag = 0;
 14375  000A28  0E00               	movlw	0
 14376  000A2A  6E35               	movwf	printf@flag,c
 14377                           
 14378                           ;doprnt.c: 551: switch(*f) {
 14379                           
 14380                           ;doprnt.c: 550: for(;;) {
 14381  000A2C  D005               	goto	l8431
 14382  000A2E                     l8427:
 14383                           
 14384                           ;doprnt.c: 580: flag |= 0x04;
 14385  000A2E  8435               	bsf	printf@flag,2,c
 14386                           
 14387                           ;doprnt.c: 581: f++;
 14388  000A30  4A1D               	infsnz	printf@f,f,c
 14389  000A32  2A1E               	incf	printf@f+1,f,c
 14390                           
 14391                           ;doprnt.c: 582: continue;
 14392  000A34  D001               	goto	l8431
 14393                           
 14394                           ;doprnt.c: 584: }
 14395  000A36  D00B               	goto	l8433
 14396  000A38                     l8431:
 14397  000A38  C01D  FFF6         	movff	printf@f,tblptrl
 14398  000A3C  C01E  FFF7         	movff	printf@f+1,tblptrh
 14399  000A40                     	if	0	;tblptru may be non-zero
 14400  000A40                     	endif
 14401  000A40                     	if	0	;tblptru may be non-zero
 14402  000A40                     	endif
 14403  000A40  0008               	tblrd		*
 14404  000A42  50F5               	movf	tablat,w,c
 14405                           
 14406                           ; Switch size 1, requested type "space"
 14407                           ; Number of cases is 1, Range of values is 48 to 48
 14408                           ; switch strategies available:
 14409                           ; Name         Instructions Cycles
 14410                           ; simple_byte            4     3 (average)
 14411                           ;	Chosen strategy is simple_byte
 14412  000A44  0A30               	xorlw	48	; case 48
 14413  000A46  B4D8               	btfsc	status,2,c
 14414  000A48  D7F2               	goto	l8427
 14415                           
 14416                           ;doprnt.c: 585: break;
 14417  000A4A  D001               	goto	l8433
 14418                           
 14419                           ;doprnt.c: 586: }
 14420  000A4C  D7F5               	goto	l8431
 14421  000A4E                     l8433:
 14422                           
 14423                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14424  000A4E  C01D  FFF6         	movff	printf@f,tblptrl
 14425  000A52  C01E  FFF7         	movff	printf@f+1,tblptrh
 14426  000A56                     	if	0	;tblptru may be non-zero
 14427  000A56                     	endif
 14428  000A56                     	if	0	;tblptru may be non-zero
 14429  000A56                     	endif
 14430  000A56  0008               	tblrd		*
 14431  000A58  50F5               	movf	tablat,w,c
 14432  000A5A  EC7E  F01D         	call	_isdigit
 14433  000A5E  A0D8               	btfss	status,0,c
 14434  000A60  D03B               	goto	l8449
 14435                           
 14436                           ;doprnt.c: 598: width = 0;
 14437  000A62  0E00               	movlw	0
 14438  000A64  6E37               	movwf	printf@width+1,c
 14439  000A66  0E00               	movlw	0
 14440  000A68  6E36               	movwf	printf@width,c
 14441  000A6A  D000               	goto	l8437
 14442  000A6C                     l8437:
 14443                           
 14444                           ;doprnt.c: 600: width *= 10;
 14445  000A6C  C036  F011         	movff	printf@width,___wmul@multiplier
 14446  000A70  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
 14447  000A74  0E00               	movlw	0
 14448  000A76  6E14               	movwf	___wmul@multiplicand+1,c
 14449  000A78  0E0A               	movlw	10
 14450  000A7A  6E13               	movwf	___wmul@multiplicand,c
 14451  000A7C  EC1F  F01D         	call	___wmul	;wreg free
 14452  000A80  C011  F036         	movff	?___wmul,printf@width
 14453  000A84  C012  F037         	movff	?___wmul+1,printf@width+1
 14454                           
 14455                           ;doprnt.c: 601: width += *f++ - '0';
 14456  000A88  0ED0               	movlw	208
 14457  000A8A  6E2B               	movwf	??_printf& (0+255),c
 14458  000A8C  0EFF               	movlw	255
 14459  000A8E  6E2C               	movwf	(??_printf+1)& (0+255),c
 14460  000A90  C01D  FFF6         	movff	printf@f,tblptrl
 14461  000A94  C01E  FFF7         	movff	printf@f+1,tblptrh
 14462  000A98                     	if	0	;tblptru may be non-zero
 14463  000A98                     	endif
 14464  000A98                     	if	0	;tblptru may be non-zero
 14465  000A98                     	endif
 14466  000A98  0008               	tblrd		*
 14467  000A9A  50F5               	movf	tablat,w,c
 14468  000A9C  6E2D               	movwf	(??_printf+2)& (0+255),c
 14469  000A9E  6A2E               	clrf	(??_printf+3)& (0+255),c
 14470  000AA0  502B               	movf	??_printf,w,c
 14471  000AA2  262D               	addwf	??_printf+2,f,c
 14472  000AA4  502C               	movf	??_printf+1,w,c
 14473  000AA6  222E               	addwfc	??_printf+3,f,c
 14474  000AA8  502D               	movf	??_printf+2,w,c
 14475  000AAA  2636               	addwf	printf@width,f,c
 14476  000AAC  502E               	movf	??_printf+3,w,c
 14477  000AAE  2237               	addwfc	printf@width+1,f,c
 14478  000AB0  4A1D               	infsnz	printf@f,f,c
 14479  000AB2  2A1E               	incf	printf@f+1,f,c
 14480                           
 14481                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14482  000AB4  C01D  FFF6         	movff	printf@f,tblptrl
 14483  000AB8  C01E  FFF7         	movff	printf@f+1,tblptrh
 14484  000ABC                     	if	0	;tblptru may be non-zero
 14485  000ABC                     	endif
 14486  000ABC                     	if	0	;tblptru may be non-zero
 14487  000ABC                     	endif
 14488  000ABC  0008               	tblrd		*
 14489  000ABE  50F5               	movf	tablat,w,c
 14490  000AC0  EC7E  F01D         	call	_isdigit
 14491  000AC4  A0D8               	btfss	status,0,c
 14492  000AC6  D008               	goto	l8449
 14493  000AC8  D7D1               	goto	l8437
 14494                           
 14495                           ;doprnt.c: 608: }
 14496                           ;doprnt.c: 635: switch(c = *f++) {
 14497  000ACA  D006               	goto	l8449
 14498                           
 14499                           ;doprnt.c: 638: goto alldone;
 14500                           
 14501                           ;doprnt.c: 637: case 0:
 14502  000ACC  D148               	goto	l1479
 14503                           
 14504                           ;doprnt.c: 698: case 'i':
 14505                           ;doprnt.c: 699: break;
 14506                           
 14507                           ;doprnt.c: 697: case 'd':
 14508  000ACE  D01B               	goto	l1442
 14509  000AD0                     l8445:
 14510                           
 14511                           ;doprnt.c: 721: flag |= 0x80;
 14512  000AD0  8E35               	bsf	printf@flag,7,c
 14513                           
 14514                           ;doprnt.c: 723: break;
 14515  000AD2  D019               	goto	l1442
 14516                           
 14517                           ;doprnt.c: 813: continue;
 14518                           
 14519                           ;doprnt.c: 802: default:
 14520  000AD4  D136               	goto	l8547
 14521                           
 14522                           ;doprnt.c: 822: }
 14523  000AD6  D017               	goto	l1442
 14524  000AD8                     l8449:
 14525  000AD8  C01D  FFF6         	movff	printf@f,tblptrl
 14526  000ADC  C01E  FFF7         	movff	printf@f+1,tblptrh
 14527  000AE0  4A1D               	infsnz	printf@f,f,c
 14528  000AE2  2A1E               	incf	printf@f+1,f,c
 14529  000AE4                     	if	0	;tblptru may be non-zero
 14530  000AE4                     	endif
 14531  000AE4                     	if	0	;tblptru may be non-zero
 14532  000AE4                     	endif
 14533  000AE4  0008               	tblrd		*
 14534  000AE6  CFF5 F038          	movff	tablat,printf@c
 14535  000AEA  5038               	movf	printf@c,w,c
 14536                           
 14537                           ; Switch size 1, requested type "space"
 14538                           ; Number of cases is 4, Range of values is 0 to 120
 14539                           ; switch strategies available:
 14540                           ; Name         Instructions Cycles
 14541                           ; simple_byte           13     7 (average)
 14542                           ;	Chosen strategy is simple_byte
 14543  000AEC  0A00               	xorlw	0	; case 0
 14544  000AEE  B4D8               	btfsc	status,2,c
 14545  000AF0  D136               	goto	l1479
 14546  000AF2  0A64               	xorlw	100	; case 100
 14547  000AF4  B4D8               	btfsc	status,2,c
 14548  000AF6  D007               	goto	l1442
 14549  000AF8  0A0D               	xorlw	13	; case 105
 14550  000AFA  B4D8               	btfsc	status,2,c
 14551  000AFC  D004               	goto	l1442
 14552  000AFE  0A11               	xorlw	17	; case 120
 14553  000B00  B4D8               	btfsc	status,2,c
 14554  000B02  D7E6               	goto	l8445
 14555  000B04  D11E               	goto	l8547
 14556  000B06                     l1442:
 14557                           
 14558                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 14559  000B06  BE35               	btfsc	printf@flag,7,c
 14560  000B08  D015               	goto	l8461
 14561                           
 14562                           ;doprnt.c: 1253: {
 14563                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14564  000B0A  C030  FFD9         	movff	printf@ap,fsr2l
 14565  000B0E  C031  FFDA         	movff	printf@ap+1,fsr2h
 14566  000B12  CFDE F033          	movff	postinc2,printf@val
 14567  000B16  CFDD F034          	movff	postdec2,printf@val+1
 14568  000B1A  0E02               	movlw	2
 14569  000B1C  2630               	addwf	printf@ap,f,c
 14570  000B1E  0E00               	movlw	0
 14571  000B20  2231               	addwfc	printf@ap+1,f,c
 14572                           
 14573                           ;doprnt.c: 1261: if((int)val < 0) {
 14574  000B22  AE34               	btfss	printf@val+1,7,c
 14575  000B24  D04E               	goto	l8495
 14576                           
 14577                           ;doprnt.c: 1262: flag |= 0x03;
 14578  000B26  0E03               	movlw	3
 14579  000B28  1235               	iorwf	printf@flag,f,c
 14580                           
 14581                           ;doprnt.c: 1263: val = -val;
 14582  000B2A  6C33               	negf	printf@val,c
 14583  000B2C  1E34               	comf	printf@val+1,f,c
 14584  000B2E  B0D8               	btfsc	status,0,c
 14585  000B30  2A34               	incf	printf@val+1,f,c
 14586                           
 14587                           ;doprnt.c: 1264: }
 14588                           ;doprnt.c: 1266: }
 14589  000B32  D047               	goto	l8495
 14590  000B34                     l8461:
 14591                           
 14592                           ;doprnt.c: 1268: else
 14593                           ;doprnt.c: 1273: {
 14594                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14595  000B34  C030  FFD9         	movff	printf@ap,fsr2l
 14596  000B38  C031  FFDA         	movff	printf@ap+1,fsr2h
 14597  000B3C  CFDE F033          	movff	postinc2,printf@val
 14598  000B40  CFDD F034          	movff	postdec2,printf@val+1
 14599  000B44  0E02               	movlw	2
 14600  000B46  2630               	addwf	printf@ap,f,c
 14601  000B48  0E00               	movlw	0
 14602  000B4A  2231               	addwfc	printf@ap+1,f,c
 14603                           
 14604                           ;doprnt.c: 1287: }
 14605                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 14606  000B4C  D03A               	goto	l8495
 14607  000B4E                     l8465:
 14608                           
 14609                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14610  000B4E  0E01               	movlw	1
 14611  000B50  6E38               	movwf	printf@c,c
 14612  000B52                     l8467:
 14613  000B52  0E05               	movlw	5
 14614  000B54  1838               	xorwf	printf@c,w,c
 14615  000B56  B4D8               	btfsc	status,2,c
 14616  000B58  D03D               	goto	l8497
 14617  000B5A  D001               	goto	l8471
 14618  000B5C  D03B               	goto	l8497
 14619  000B5E                     l8471:
 14620                           
 14621                           ;doprnt.c: 1306: if(val < dpowers[c])
 14622  000B5E  5038               	movf	printf@c,w,c
 14623  000B60  0D02               	mullw	2
 14624  000B62  0EA4               	movlw	low _dpowers
 14625  000B64  24F3               	addwf	prodl,w,c
 14626  000B66  6EF6               	movwf	tblptrl,c
 14627  000B68  0EFE               	movlw	high _dpowers
 14628  000B6A  20F4               	addwfc	prodh,w,c
 14629  000B6C  6EF7               	movwf	tblptrh,c
 14630  000B6E                     	if	0	;There are less than 3 active tblptr bytes
 14631  000B6E                     	endif
 14632  000B6E  0009               	tblrd		*+
 14633  000B70  50F5               	movf	tablat,w,c
 14634  000B72  5C33               	subwf	printf@val,w,c
 14635  000B74  0009               	tblrd		*+
 14636  000B76  50F5               	movf	tablat,w,c
 14637  000B78  5834               	subwfb	printf@val+1,w,c
 14638  000B7A  A0D8               	btfss	status,0,c
 14639  000B7C  D02B               	goto	l8497
 14640  000B7E  D001               	goto	l8475
 14641                           
 14642                           ;doprnt.c: 1307: break;
 14643  000B80  D029               	goto	l8497
 14644  000B82                     l8475:
 14645  000B82  2A38               	incf	printf@c,f,c
 14646  000B84  D7E6               	goto	l8467
 14647                           
 14648                           ;doprnt.c: 1309: break;
 14649  000B86  D026               	goto	l8497
 14650  000B88                     l8479:
 14651                           
 14652                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 14653  000B88  0E01               	movlw	1
 14654  000B8A  6E38               	movwf	printf@c,c
 14655  000B8C                     l8481:
 14656  000B8C  0E04               	movlw	4
 14657  000B8E  1838               	xorwf	printf@c,w,c
 14658  000B90  B4D8               	btfsc	status,2,c
 14659  000B92  D020               	goto	l8497
 14660  000B94  D001               	goto	l8485
 14661  000B96  D01E               	goto	l8497
 14662  000B98                     l8485:
 14663                           
 14664                           ;doprnt.c: 1317: if(val < hexpowers[c])
 14665  000B98  5038               	movf	printf@c,w,c
 14666  000B9A  0D02               	mullw	2
 14667  000B9C  0EAE               	movlw	low _hexpowers
 14668  000B9E  24F3               	addwf	prodl,w,c
 14669  000BA0  6EF6               	movwf	tblptrl,c
 14670  000BA2  0EFE               	movlw	high _hexpowers
 14671  000BA4  20F4               	addwfc	prodh,w,c
 14672  000BA6  6EF7               	movwf	tblptrh,c
 14673  000BA8                     	if	0	;There are less than 3 active tblptr bytes
 14674  000BA8                     	endif
 14675  000BA8  0009               	tblrd		*+
 14676  000BAA  50F5               	movf	tablat,w,c
 14677  000BAC  5C33               	subwf	printf@val,w,c
 14678  000BAE  0009               	tblrd		*+
 14679  000BB0  50F5               	movf	tablat,w,c
 14680  000BB2  5834               	subwfb	printf@val+1,w,c
 14681  000BB4  A0D8               	btfss	status,0,c
 14682  000BB6  D00E               	goto	l8497
 14683  000BB8  D001               	goto	l8489
 14684                           
 14685                           ;doprnt.c: 1318: break;
 14686  000BBA  D00C               	goto	l8497
 14687  000BBC                     l8489:
 14688  000BBC  2A38               	incf	printf@c,f,c
 14689  000BBE  D7E6               	goto	l8481
 14690                           
 14691                           ;doprnt.c: 1336: }
 14692                           
 14693                           ;doprnt.c: 1320: break;
 14694  000BC0  D009               	goto	l8497
 14695  000BC2                     l8495:
 14696  000BC2  5035               	movf	printf@flag,w,c
 14697  000BC4  0B80               	andlw	128
 14698                           
 14699                           ; Switch size 1, requested type "space"
 14700                           ; Number of cases is 2, Range of values is 0 to 128
 14701                           ; switch strategies available:
 14702                           ; Name         Instructions Cycles
 14703                           ; simple_byte            7     4 (average)
 14704                           ;	Chosen strategy is simple_byte
 14705  000BC6  0A00               	xorlw	0	; case 0
 14706  000BC8  B4D8               	btfsc	status,2,c
 14707  000BCA  D7C1               	goto	l8465
 14708  000BCC  0A80               	xorlw	128	; case 128
 14709  000BCE  B4D8               	btfsc	status,2,c
 14710  000BD0  D7DB               	goto	l8479
 14711  000BD2  D000               	goto	l8497
 14712  000BD4                     l8497:
 14713                           
 14714                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14715  000BD4  5036               	movf	printf@width,w,c
 14716  000BD6  1037               	iorwf	printf@width+1,w,c
 14717  000BD8  B4D8               	btfsc	status,2,c
 14718  000BDA  D00A               	goto	l8503
 14719  000BDC  C035  F02B         	movff	printf@flag,??_printf
 14720  000BE0  0E03               	movlw	3
 14721  000BE2  162B               	andwf	??_printf,f,c
 14722  000BE4  B4D8               	btfsc	status,2,c
 14723  000BE6  D004               	goto	l8503
 14724                           
 14725                           ;doprnt.c: 1346: width--;
 14726  000BE8  0636               	decf	printf@width,f,c
 14727  000BEA  A0D8               	btfss	status,0,c
 14728  000BEC  0637               	decf	printf@width+1,f,c
 14729  000BEE  D000               	goto	l8503
 14730  000BF0                     l8503:
 14731                           
 14732                           ;doprnt.c: 1381: if(width > c)
 14733  000BF0  0E80               	movlw	128
 14734  000BF2  BE38               	btfsc	printf@c,7,c
 14735  000BF4  0E7F               	movlw	127
 14736  000BF6  6E2B               	movwf	??_printf& (0+255),c
 14737  000BF8  5036               	movf	printf@width,w,c
 14738  000BFA  5C38               	subwf	printf@c,w,c
 14739  000BFC  5037               	movf	printf@width+1,w,c
 14740  000BFE  0A80               	xorlw	128
 14741  000C00  582B               	subwfb	??_printf& (0+255),w,c
 14742  000C02  B0D8               	btfsc	status,0,c
 14743  000C04  D007               	goto	l8507
 14744                           
 14745                           ;doprnt.c: 1382: width -= c;
 14746  000C06  5038               	movf	printf@c,w,c
 14747  000C08  5E36               	subwf	printf@width,f,c
 14748  000C0A  0E00               	movlw	0
 14749  000C0C  BE38               	btfsc	printf@c,7,c
 14750  000C0E  0EFF               	movlw	255
 14751  000C10  5A37               	subwfb	printf@width+1,f,c
 14752  000C12  D005               	goto	l8509
 14753  000C14                     l8507:
 14754                           
 14755                           ;doprnt.c: 1383: else
 14756                           ;doprnt.c: 1384: width = 0;
 14757  000C14  0E00               	movlw	0
 14758  000C16  6E37               	movwf	printf@width+1,c
 14759  000C18  0E00               	movlw	0
 14760  000C1A  6E36               	movwf	printf@width,c
 14761  000C1C  D000               	goto	l8509
 14762  000C1E                     l8509:
 14763                           
 14764                           ;doprnt.c: 1387: if(flag & 0x04) {
 14765  000C1E  A435               	btfss	printf@flag,2,c
 14766  000C20  D01A               	goto	l8521
 14767                           
 14768                           ;doprnt.c: 1392: if(flag & 0x03)
 14769  000C22  C035  F02B         	movff	printf@flag,??_printf
 14770  000C26  0E03               	movlw	3
 14771  000C28  162B               	andwf	??_printf,f,c
 14772  000C2A  B4D8               	btfsc	status,2,c
 14773  000C2C  D004               	goto	l8515
 14774                           
 14775                           ;doprnt.c: 1393: (putch('-') );
 14776  000C2E  0E2D               	movlw	45
 14777  000C30  ECF8  F01E         	call	_putch
 14778  000C34  D000               	goto	l8515
 14779  000C36                     l8515:
 14780                           
 14781                           ;doprnt.c: 1415: if(width)
 14782  000C36  5036               	movf	printf@width,w,c
 14783  000C38  1037               	iorwf	printf@width+1,w,c
 14784  000C3A  B4D8               	btfsc	status,2,c
 14785  000C3C  D026               	goto	l8531
 14786  000C3E                     l8517:
 14787                           
 14788                           ;doprnt.c: 1417: (putch('0') );
 14789  000C3E  0E30               	movlw	48
 14790  000C40  ECF8  F01E         	call	_putch
 14791                           
 14792                           ;doprnt.c: 1418: while(--width);
 14793  000C44  0636               	decf	printf@width,f,c
 14794  000C46  A0D8               	btfss	status,0,c
 14795  000C48  0637               	decf	printf@width+1,f,c
 14796  000C4A  5036               	movf	printf@width,w,c
 14797  000C4C  1037               	iorwf	printf@width+1,w,c
 14798  000C4E  B4D8               	btfsc	status,2,c
 14799  000C50  D01C               	goto	l8531
 14800  000C52  D7F5               	goto	l8517
 14801                           
 14802                           ;doprnt.c: 1420: } else
 14803  000C54  D01A               	goto	l8531
 14804  000C56                     l8521:
 14805                           
 14806                           ;doprnt.c: 1422: {
 14807                           ;doprnt.c: 1424: if(width
 14808                           ;doprnt.c: 1428: )
 14809  000C56  5036               	movf	printf@width,w,c
 14810  000C58  1037               	iorwf	printf@width+1,w,c
 14811  000C5A  B4D8               	btfsc	status,2,c
 14812  000C5C  D00C               	goto	l8527
 14813  000C5E                     l8523:
 14814                           
 14815                           ;doprnt.c: 1430: (putch(' ') );
 14816  000C5E  0E20               	movlw	32
 14817  000C60  ECF8  F01E         	call	_putch
 14818                           
 14819                           ;doprnt.c: 1431: while(--width);
 14820  000C64  0636               	decf	printf@width,f,c
 14821  000C66  A0D8               	btfss	status,0,c
 14822  000C68  0637               	decf	printf@width+1,f,c
 14823  000C6A  5036               	movf	printf@width,w,c
 14824  000C6C  1037               	iorwf	printf@width+1,w,c
 14825  000C6E  B4D8               	btfsc	status,2,c
 14826  000C70  D002               	goto	l8527
 14827  000C72  D7F5               	goto	l8523
 14828  000C74  D000               	goto	l8527
 14829  000C76                     l8527:
 14830                           
 14831                           ;doprnt.c: 1438: if(flag & 0x03)
 14832  000C76  C035  F02B         	movff	printf@flag,??_printf
 14833  000C7A  0E03               	movlw	3
 14834  000C7C  162B               	andwf	??_printf,f,c
 14835  000C7E  B4D8               	btfsc	status,2,c
 14836  000C80  D004               	goto	l8531
 14837                           
 14838                           ;doprnt.c: 1439: (putch('-') );
 14839  000C82  0E2D               	movlw	45
 14840  000C84  ECF8  F01E         	call	_putch
 14841  000C88  D000               	goto	l8531
 14842  000C8A                     l8531:
 14843                           
 14844                           ;doprnt.c: 1469: }
 14845                           ;doprnt.c: 1472: prec = c;
 14846  000C8A  C038  F032         	movff	printf@c,printf@prec
 14847                           
 14848                           ;doprnt.c: 1474: while(prec--) {
 14849  000C8E  D053               	goto	l8545
 14850                           
 14851                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 14852  000C90  D045               	goto	l8541
 14853  000C92                     l8533:
 14854                           
 14855                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14856  000C92  5032               	movf	printf@prec,w,c
 14857  000C94  0D02               	mullw	2
 14858  000C96  0EA4               	movlw	low _dpowers
 14859  000C98  24F3               	addwf	prodl,w,c
 14860  000C9A  6EF6               	movwf	tblptrl,c
 14861  000C9C  0EFE               	movlw	high _dpowers
 14862  000C9E  20F4               	addwfc	prodh,w,c
 14863  000CA0  6EF7               	movwf	tblptrh,c
 14864  000CA2                     	if	0	;There are less than 3 active tblptr bytes
 14865  000CA2                     	endif
 14866  000CA2  0009               	tblrd		*+
 14867  000CA4  CFF5 F013          	movff	tablat,___lwdiv@divisor
 14868  000CA8  000A               	tblrd		*-
 14869  000CAA  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
 14870  000CAE  C033  F011         	movff	printf@val,___lwdiv@dividend
 14871  000CB2  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
 14872  000CB6  EC93  F019         	call	___lwdiv	;wreg free
 14873  000CBA  C011  F018         	movff	?___lwdiv,___lwmod@dividend
 14874  000CBE  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
 14875  000CC2  0E00               	movlw	0
 14876  000CC4  6E1B               	movwf	___lwmod@divisor+1,c
 14877  000CC6  0E0A               	movlw	10
 14878  000CC8  6E1A               	movwf	___lwmod@divisor,c
 14879  000CCA  EC80  F01B         	call	___lwmod	;wreg free
 14880  000CCE  5018               	movf	?___lwmod,w,c
 14881  000CD0  0F30               	addlw	48
 14882  000CD2  6E38               	movwf	printf@c,c
 14883                           
 14884                           ;doprnt.c: 1491: break;
 14885  000CD4  D02C               	goto	l8543
 14886  000CD6                     l8535:
 14887                           
 14888                           ;doprnt.c: 1499: {
 14889                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 14890  000CD6  C033  F011         	movff	printf@val,___lwdiv@dividend
 14891  000CDA  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
 14892  000CDE  5032               	movf	printf@prec,w,c
 14893  000CE0  0D02               	mullw	2
 14894  000CE2  0EAE               	movlw	low _hexpowers
 14895  000CE4  24F3               	addwf	prodl,w,c
 14896  000CE6  6EF6               	movwf	tblptrl,c
 14897  000CE8  0EFE               	movlw	high _hexpowers
 14898  000CEA  20F4               	addwfc	prodh,w,c
 14899  000CEC  6EF7               	movwf	tblptrh,c
 14900  000CEE                     	if	0	;There are less than 3 active tblptr bytes
 14901  000CEE                     	endif
 14902  000CEE  0009               	tblrd		*+
 14903  000CF0  CFF5 F013          	movff	tablat,___lwdiv@divisor
 14904  000CF4  000A               	tblrd		*-
 14905  000CF6  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
 14906  000CFA  EC93  F019         	call	___lwdiv	;wreg free
 14907  000CFE  5011               	movf	?___lwdiv,w,c
 14908  000D00  0B0F               	andlw	15
 14909  000D02  6E2F               	movwf	printf@idx,c
 14910                           
 14911                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 14912  000D04  502F               	movf	printf@idx,w,c
 14913  000D06  0D01               	mullw	1
 14914  000D08  0E3D               	movlw	low STR_37
 14915  000D0A  24F3               	addwf	prodl,w,c
 14916  000D0C  6EF6               	movwf	tblptrl,c
 14917  000D0E  0EFF               	movlw	high STR_37
 14918  000D10  20F4               	addwfc	prodh,w,c
 14919  000D12  6EF7               	movwf	tblptrh,c
 14920  000D14                     	if	0	;There are less than 3 active tblptr bytes
 14921  000D14                     	endif
 14922  000D14  0008               	tblrd		*
 14923  000D16  CFF5 F038          	movff	tablat,printf@c
 14924                           
 14925                           ;doprnt.c: 1523: }
 14926                           
 14927                           ;doprnt.c: 1508: }
 14928                           ;doprnt.c: 1510: break;
 14929  000D1A  D009               	goto	l8543
 14930  000D1C                     l8541:
 14931  000D1C  5035               	movf	printf@flag,w,c
 14932  000D1E  0B80               	andlw	128
 14933                           
 14934                           ; Switch size 1, requested type "space"
 14935                           ; Number of cases is 2, Range of values is 0 to 128
 14936                           ; switch strategies available:
 14937                           ; Name         Instructions Cycles
 14938                           ; simple_byte            7     4 (average)
 14939                           ;	Chosen strategy is simple_byte
 14940  000D20  0A00               	xorlw	0	; case 0
 14941  000D22  B4D8               	btfsc	status,2,c
 14942  000D24  D7B6               	goto	l8533
 14943  000D26  0A80               	xorlw	128	; case 128
 14944  000D28  B4D8               	btfsc	status,2,c
 14945  000D2A  D7D5               	goto	l8535
 14946  000D2C  D000               	goto	l8543
 14947  000D2E                     l8543:
 14948                           
 14949                           ;doprnt.c: 1524: (putch(c) );
 14950  000D2E  5038               	movf	printf@c,w,c
 14951  000D30  ECF8  F01E         	call	_putch
 14952  000D34  D000               	goto	l8545
 14953  000D36                     l8545:
 14954  000D36  0632               	decf	printf@prec,f,c
 14955  000D38  2832               	incf	printf@prec,w,c
 14956  000D3A  B4D8               	btfsc	status,2,c
 14957  000D3C  D002               	goto	l8547
 14958  000D3E  D7EE               	goto	l8541
 14959  000D40  D000               	goto	l8547
 14960  000D42                     l8547:
 14961  000D42  C01D  FFF6         	movff	printf@f,tblptrl
 14962  000D46  C01E  FFF7         	movff	printf@f+1,tblptrh
 14963  000D4A  4A1D               	infsnz	printf@f,f,c
 14964  000D4C  2A1E               	incf	printf@f+1,f,c
 14965  000D4E                     	if	0	;tblptru may be non-zero
 14966  000D4E                     	endif
 14967  000D4E                     	if	0	;tblptru may be non-zero
 14968  000D4E                     	endif
 14969  000D4E  0008               	tblrd		*
 14970  000D50  CFF5 F038          	movff	tablat,printf@c
 14971  000D54  5038               	movf	printf@c,w,c
 14972  000D56  B4D8               	btfsc	status,2,c
 14973  000D58  D002               	goto	l1479
 14974  000D5A  D65A               	goto	l8421
 14975  000D5C  D000               	goto	l1479
 14976  000D5E                     l1479:
 14977  000D5E  0012               	return		;funcret
 14978  000D60                     __end_of_printf:
 14979                           	opt stack 0
 14980                           tblptru	equ	0xFF8
 14981                           tblptrh	equ	0xFF7
 14982                           tblptrl	equ	0xFF6
 14983                           tablat	equ	0xFF5
 14984                           prodh	equ	0xFF4
 14985                           prodl	equ	0xFF3
 14986                           intcon	equ	0xFF2
 14987                           intcon2	equ	0xFF1
 14988                           postinc0	equ	0xFEE
 14989                           wreg	equ	0xFE8
 14990                           postdec1	equ	0xFE5
 14991                           plusw1	equ	0xFE3
 14992                           fsr1l	equ	0xFE1
 14993                           indf2	equ	0xFDF
 14994                           postinc2	equ	0xFDE
 14995                           postdec2	equ	0xFDD
 14996                           plusw2	equ	0xFDB
 14997                           fsr2h	equ	0xFDA
 14998                           fsr2l	equ	0xFD9
 14999                           status	equ	0xFD8
 15000                           
 15001 ;; *************** function _putch *****************
 15002 ;; Defined at:
 15003 ;;		line 82 in file "Main.c"
 15004 ;; Parameters:    Size  Location     Type
 15005 ;;  c               1    wreg     unsigned char 
 15006 ;; Auto vars:     Size  Location     Type
 15007 ;;  c               1   16[COMRAM] unsigned char 
 15008 ;; Return value:  Size  Location     Type
 15009 ;;		None               void
 15010 ;; Registers used:
 15011 ;;		wreg
 15012 ;; Tracked objects:
 15013 ;;		On entry : 0/0
 15014 ;;		On exit  : 0/0
 15015 ;;		Unchanged: 0/0
 15016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15018 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15020 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15021 ;;Total ram usage:        1 bytes
 15022 ;; Hardware stack levels used:    1
 15023 ;; Hardware stack levels required when called:    3
 15024 ;; This function calls:
 15025 ;;		Nothing
 15026 ;; This function is called by:
 15027 ;;		_printf
 15028 ;; This function uses a non-reentrant model
 15029 ;;
 15030                           
 15031                           	psect	text79
 15032  003DF0                     __ptext79:
 15033                           	opt stack 0
 15034  003DF0                     _putch:
 15035                           	opt stack 26
 15036                           
 15037                           ;incstack = 0
 15038                           ;putch@c stored from wreg
 15039  003DF0  6E11               	movwf	putch@c,c
 15040                           
 15041                           ;Main.c: 84: while (!TRMT);
 15042  003DF2  D000               	goto	l551
 15043  003DF4                     l551:
 15044  003DF4  A2AC               	btfss	4012,1,c	;volatile
 15045  003DF6  D7FE               	goto	l551
 15046                           
 15047                           ;Main.c: 85: TXREG = c;
 15048  003DF8  C011  FFAD         	movff	putch@c,4013	;volatile
 15049  003DFC  0012               	return		;funcret
 15050  003DFE                     __end_of_putch:
 15051                           	opt stack 0
 15052                           tblptru	equ	0xFF8
 15053                           tblptrh	equ	0xFF7
 15054                           tblptrl	equ	0xFF6
 15055                           tablat	equ	0xFF5
 15056                           prodh	equ	0xFF4
 15057                           prodl	equ	0xFF3
 15058                           intcon	equ	0xFF2
 15059                           intcon2	equ	0xFF1
 15060                           postinc0	equ	0xFEE
 15061                           wreg	equ	0xFE8
 15062                           postdec1	equ	0xFE5
 15063                           plusw1	equ	0xFE3
 15064                           fsr1l	equ	0xFE1
 15065                           indf2	equ	0xFDF
 15066                           postinc2	equ	0xFDE
 15067                           postdec2	equ	0xFDD
 15068                           plusw2	equ	0xFDB
 15069                           fsr2h	equ	0xFDA
 15070                           fsr2l	equ	0xFD9
 15071                           status	equ	0xFD8
 15072                           
 15073 ;; *************** function _isdigit *****************
 15074 ;; Defined at:
 15075 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\isdigit.c"
 15076 ;; Parameters:    Size  Location     Type
 15077 ;;  c               1    wreg     unsigned char 
 15078 ;; Auto vars:     Size  Location     Type
 15079 ;;  c               1   18[COMRAM] unsigned char 
 15080 ;; Return value:  Size  Location     Type
 15081 ;;		None               void
 15082 ;; Registers used:
 15083 ;;		wreg, status,2, status,0
 15084 ;; Tracked objects:
 15085 ;;		On entry : 0/0
 15086 ;;		On exit  : 0/0
 15087 ;;		Unchanged: 0/0
 15088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15090 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15091 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15092 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15093 ;;Total ram usage:        3 bytes
 15094 ;; Hardware stack levels used:    1
 15095 ;; Hardware stack levels required when called:    3
 15096 ;; This function calls:
 15097 ;;		Nothing
 15098 ;; This function is called by:
 15099 ;;		_printf
 15100 ;; This function uses a non-reentrant model
 15101 ;;
 15102                           
 15103                           	psect	text80
 15104  003AFC                     __ptext80:
 15105                           	opt stack 0
 15106  003AFC                     _isdigit:
 15107                           	opt stack 26
 15108                           
 15109                           ;incstack = 0
 15110                           ;isdigit@c stored from wreg
 15111  003AFC  6E13               	movwf	isdigit@c,c
 15112  003AFE  0E00               	movlw	0
 15113  003B00  6E12               	movwf	_isdigit$3067,c
 15114  003B02  0E3A               	movlw	58
 15115  003B04  6013               	cpfslt	isdigit@c,c
 15116  003B06  D006               	goto	l5401
 15117  003B08  0E2F               	movlw	47
 15118  003B0A  6413               	cpfsgt	isdigit@c,c
 15119  003B0C  D003               	goto	l5401
 15120  003B0E  0E01               	movlw	1
 15121  003B10  6E12               	movwf	_isdigit$3067,c
 15122  003B12  D000               	goto	l5401
 15123  003B14                     l5401:
 15124  003B14  C012  F011         	movff	_isdigit$3067,??_isdigit
 15125  003B18  3011               	rrcf	??_isdigit,w,c
 15126  003B1A  D000               	goto	l1946
 15127  003B1C                     l1946:
 15128  003B1C  0012               	return		;funcret
 15129  003B1E                     __end_of_isdigit:
 15130                           	opt stack 0
 15131                           tblptru	equ	0xFF8
 15132                           tblptrh	equ	0xFF7
 15133                           tblptrl	equ	0xFF6
 15134                           tablat	equ	0xFF5
 15135                           prodh	equ	0xFF4
 15136                           prodl	equ	0xFF3
 15137                           intcon	equ	0xFF2
 15138                           intcon2	equ	0xFF1
 15139                           postinc0	equ	0xFEE
 15140                           wreg	equ	0xFE8
 15141                           postdec1	equ	0xFE5
 15142                           plusw1	equ	0xFE3
 15143                           fsr1l	equ	0xFE1
 15144                           indf2	equ	0xFDF
 15145                           postinc2	equ	0xFDE
 15146                           postdec2	equ	0xFDD
 15147                           plusw2	equ	0xFDB
 15148                           fsr2h	equ	0xFDA
 15149                           fsr2l	equ	0xFD9
 15150                           status	equ	0xFD8
 15151                           
 15152 ;; *************** function ___lwmod *****************
 15153 ;; Defined at:
 15154 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lwmod.c"
 15155 ;; Parameters:    Size  Location     Type
 15156 ;;  dividend        2   23[COMRAM] unsigned int 
 15157 ;;  divisor         2   25[COMRAM] unsigned int 
 15158 ;; Auto vars:     Size  Location     Type
 15159 ;;  counter         1   27[COMRAM] unsigned char 
 15160 ;; Return value:  Size  Location     Type
 15161 ;;                  2   23[COMRAM] unsigned int 
 15162 ;; Registers used:
 15163 ;;		wreg, status,2, status,0
 15164 ;; Tracked objects:
 15165 ;;		On entry : 0/0
 15166 ;;		On exit  : 0/0
 15167 ;;		Unchanged: 0/0
 15168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15169 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15170 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15172 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15173 ;;Total ram usage:        5 bytes
 15174 ;; Hardware stack levels used:    1
 15175 ;; Hardware stack levels required when called:    3
 15176 ;; This function calls:
 15177 ;;		Nothing
 15178 ;; This function is called by:
 15179 ;;		_printf
 15180 ;; This function uses a non-reentrant model
 15181 ;;
 15182                           
 15183                           	psect	text81
 15184  003700                     __ptext81:
 15185                           	opt stack 0
 15186  003700                     ___lwmod:
 15187                           	opt stack 26
 15188                           
 15189                           ;incstack = 0
 15190  003700  501A               	movf	___lwmod@divisor,w,c
 15191  003702  101B               	iorwf	___lwmod@divisor+1,w,c
 15192  003704  B4D8               	btfsc	status,2,c
 15193  003706  D01D               	goto	l2048
 15194  003708  0E01               	movlw	1
 15195  00370A  6E1C               	movwf	___lwmod@counter,c
 15196  00370C  D005               	goto	l5549
 15197  00370E                     l5547:
 15198  00370E  90D8               	bcf	status,0,c
 15199  003710  361A               	rlcf	___lwmod@divisor,f,c
 15200  003712  361B               	rlcf	___lwmod@divisor+1,f,c
 15201  003714  2A1C               	incf	___lwmod@counter,f,c
 15202  003716  D000               	goto	l5549
 15203  003718                     l5549:
 15204  003718  BE1B               	btfsc	___lwmod@divisor+1,7,c
 15205  00371A  D002               	goto	l5551
 15206  00371C  D7F8               	goto	l5547
 15207  00371E  D000               	goto	l5551
 15208  003720                     l5551:
 15209  003720  501A               	movf	___lwmod@divisor,w,c
 15210  003722  5C18               	subwf	___lwmod@dividend,w,c
 15211  003724  501B               	movf	___lwmod@divisor+1,w,c
 15212  003726  5819               	subwfb	___lwmod@dividend+1,w,c
 15213  003728  A0D8               	btfss	status,0,c
 15214  00372A  D005               	goto	l5555
 15215  00372C  501A               	movf	___lwmod@divisor,w,c
 15216  00372E  5E18               	subwf	___lwmod@dividend,f,c
 15217  003730  501B               	movf	___lwmod@divisor+1,w,c
 15218  003732  5A19               	subwfb	___lwmod@dividend+1,f,c
 15219  003734  D000               	goto	l5555
 15220  003736                     l5555:
 15221  003736  90D8               	bcf	status,0,c
 15222  003738  321B               	rrcf	___lwmod@divisor+1,f,c
 15223  00373A  321A               	rrcf	___lwmod@divisor,f,c
 15224  00373C  2E1C               	decfsz	___lwmod@counter,f,c
 15225  00373E  D7F0               	goto	l5551
 15226  003740  D000               	goto	l2048
 15227  003742                     l2048:
 15228  003742  C018  F018         	movff	___lwmod@dividend,?___lwmod
 15229  003746  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
 15230  00374A  0012               	return		;funcret
 15231  00374C                     __end_of___lwmod:
 15232                           	opt stack 0
 15233                           tblptru	equ	0xFF8
 15234                           tblptrh	equ	0xFF7
 15235                           tblptrl	equ	0xFF6
 15236                           tablat	equ	0xFF5
 15237                           prodh	equ	0xFF4
 15238                           prodl	equ	0xFF3
 15239                           intcon	equ	0xFF2
 15240                           intcon2	equ	0xFF1
 15241                           postinc0	equ	0xFEE
 15242                           wreg	equ	0xFE8
 15243                           postdec1	equ	0xFE5
 15244                           plusw1	equ	0xFE3
 15245                           fsr1l	equ	0xFE1
 15246                           indf2	equ	0xFDF
 15247                           postinc2	equ	0xFDE
 15248                           postdec2	equ	0xFDD
 15249                           plusw2	equ	0xFDB
 15250                           fsr2h	equ	0xFDA
 15251                           fsr2l	equ	0xFD9
 15252                           status	equ	0xFD8
 15253                           
 15254 ;; *************** function ___lwdiv *****************
 15255 ;; Defined at:
 15256 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 15257 ;; Parameters:    Size  Location     Type
 15258 ;;  dividend        2   16[COMRAM] unsigned int 
 15259 ;;  divisor         2   18[COMRAM] unsigned int 
 15260 ;; Auto vars:     Size  Location     Type
 15261 ;;  quotient        2   20[COMRAM] unsigned int 
 15262 ;;  counter         1   22[COMRAM] unsigned char 
 15263 ;; Return value:  Size  Location     Type
 15264 ;;                  2   16[COMRAM] unsigned int 
 15265 ;; Registers used:
 15266 ;;		wreg, status,2, status,0
 15267 ;; Tracked objects:
 15268 ;;		On entry : 0/0
 15269 ;;		On exit  : 0/0
 15270 ;;		Unchanged: 0/0
 15271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15272 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15273 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15275 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15276 ;;Total ram usage:        7 bytes
 15277 ;; Hardware stack levels used:    1
 15278 ;; Hardware stack levels required when called:    3
 15279 ;; This function calls:
 15280 ;;		Nothing
 15281 ;; This function is called by:
 15282 ;;		_printf
 15283 ;; This function uses a non-reentrant model
 15284 ;;
 15285                           
 15286                           	psect	text82
 15287  003326                     __ptext82:
 15288                           	opt stack 0
 15289  003326                     ___lwdiv:
 15290                           	opt stack 26
 15291                           
 15292                           ;incstack = 0
 15293  003326  0E00               	movlw	0
 15294  003328  6E16               	movwf	___lwdiv@quotient+1,c
 15295  00332A  0E00               	movlw	0
 15296  00332C  6E15               	movwf	___lwdiv@quotient,c
 15297  00332E  5013               	movf	___lwdiv@divisor,w,c
 15298  003330  1014               	iorwf	___lwdiv@divisor+1,w,c
 15299  003332  B4D8               	btfsc	status,2,c
 15300  003334  D021               	goto	l2038
 15301  003336  0E01               	movlw	1
 15302  003338  6E17               	movwf	___lwdiv@counter,c
 15303  00333A  D005               	goto	l5529
 15304  00333C                     l5527:
 15305  00333C  90D8               	bcf	status,0,c
 15306  00333E  3613               	rlcf	___lwdiv@divisor,f,c
 15307  003340  3614               	rlcf	___lwdiv@divisor+1,f,c
 15308  003342  2A17               	incf	___lwdiv@counter,f,c
 15309  003344  D000               	goto	l5529
 15310  003346                     l5529:
 15311  003346  BE14               	btfsc	___lwdiv@divisor+1,7,c
 15312  003348  D002               	goto	l5531
 15313  00334A  D7F8               	goto	l5527
 15314  00334C  D000               	goto	l5531
 15315  00334E                     l5531:
 15316  00334E  90D8               	bcf	status,0,c
 15317  003350  3615               	rlcf	___lwdiv@quotient,f,c
 15318  003352  3616               	rlcf	___lwdiv@quotient+1,f,c
 15319  003354  5013               	movf	___lwdiv@divisor,w,c
 15320  003356  5C11               	subwf	___lwdiv@dividend,w,c
 15321  003358  5014               	movf	___lwdiv@divisor+1,w,c
 15322  00335A  5812               	subwfb	___lwdiv@dividend+1,w,c
 15323  00335C  A0D8               	btfss	status,0,c
 15324  00335E  D006               	goto	l5539
 15325  003360  5013               	movf	___lwdiv@divisor,w,c
 15326  003362  5E11               	subwf	___lwdiv@dividend,f,c
 15327  003364  5014               	movf	___lwdiv@divisor+1,w,c
 15328  003366  5A12               	subwfb	___lwdiv@dividend+1,f,c
 15329  003368  8015               	bsf	___lwdiv@quotient,0,c
 15330  00336A  D000               	goto	l5539
 15331  00336C                     l5539:
 15332  00336C  90D8               	bcf	status,0,c
 15333  00336E  3214               	rrcf	___lwdiv@divisor+1,f,c
 15334  003370  3213               	rrcf	___lwdiv@divisor,f,c
 15335  003372  2E17               	decfsz	___lwdiv@counter,f,c
 15336  003374  D7EC               	goto	l5531
 15337  003376  D000               	goto	l2038
 15338  003378                     l2038:
 15339  003378  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
 15340  00337C  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
 15341  003380  0012               	return		;funcret
 15342  003382                     __end_of___lwdiv:
 15343                           	opt stack 0
 15344                           tblptru	equ	0xFF8
 15345                           tblptrh	equ	0xFF7
 15346                           tblptrl	equ	0xFF6
 15347                           tablat	equ	0xFF5
 15348                           prodh	equ	0xFF4
 15349                           prodl	equ	0xFF3
 15350                           intcon	equ	0xFF2
 15351                           intcon2	equ	0xFF1
 15352                           postinc0	equ	0xFEE
 15353                           wreg	equ	0xFE8
 15354                           postdec1	equ	0xFE5
 15355                           plusw1	equ	0xFE3
 15356                           fsr1l	equ	0xFE1
 15357                           indf2	equ	0xFDF
 15358                           postinc2	equ	0xFDE
 15359                           postdec2	equ	0xFDD
 15360                           plusw2	equ	0xFDB
 15361                           fsr2h	equ	0xFDA
 15362                           fsr2l	equ	0xFD9
 15363                           status	equ	0xFD8
 15364                           
 15365 ;; *************** function _drawtext *****************
 15366 ;; Defined at:
 15367 ;;		line 474 in file "ST7735_TFT.c"
 15368 ;; Parameters:    Size  Location     Type
 15369 ;;  x               1    wreg     unsigned char 
 15370 ;;  y               1   56[COMRAM] unsigned char 
 15371 ;;  _text           2   57[COMRAM] PTR unsigned char 
 15372 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 15373 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 15374 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 15375 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 15376 ;;		 -> tempC(4), 
 15377 ;;  color           2   59[COMRAM] unsigned int 
 15378 ;;  bg              2   61[COMRAM] unsigned int 
 15379 ;;  size            1   63[COMRAM] unsigned char 
 15380 ;; Auto vars:     Size  Location     Type
 15381 ;;  x               1    0[BANK1 ] unsigned char 
 15382 ;;  i               2    3[BANK1 ] unsigned int 
 15383 ;;  textsize        2    1[BANK1 ] unsigned int 
 15384 ;;  cursor_x        1    6[BANK1 ] unsigned char 
 15385 ;;  cursor_y        1    5[BANK1 ] unsigned char 
 15386 ;; Return value:  Size  Location     Type
 15387 ;;		None               void
 15388 ;; Registers used:
 15389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15390 ;; Tracked objects:
 15391 ;;		On entry : 0/0
 15392 ;;		On exit  : 0/0
 15393 ;;		Unchanged: 0/0
 15394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15395 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15396 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15397 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15398 ;;      Totals:        10       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15399 ;;Total ram usage:       17 bytes
 15400 ;; Hardware stack levels used:    1
 15401 ;; Hardware stack levels required when called:    9
 15402 ;; This function calls:
 15403 ;;		_drawChar
 15404 ;;		_strlen
 15405 ;; This function is called by:
 15406 ;;		_Initialize_Screen
 15407 ;;		_Update_Screen
 15408 ;;		_Initialize_Setup_Alarm_Time_Screen
 15409 ;;		_Update_Setup_Alarm_Time_Screen
 15410 ;;		_Initialize_Setup_Heater_Screen
 15411 ;;		_Update_Setup_Heater_Screen
 15412 ;;		_Initialize_Setup_Time_Screen
 15413 ;;		_Update_Setup_Time_Screen
 15414 ;; This function uses a non-reentrant model
 15415 ;;
 15416                           
 15417                           	psect	text83
 15418  001B32                     __ptext83:
 15419                           	opt stack 0
 15420  001B32                     _drawtext:
 15421                           	opt stack 20
 15422                           
 15423                           ;incstack = 0
 15424                           ;drawtext@x stored from wreg
 15425  001B32  0101               	movlb	1	; () banked
 15426  001B34  6F53               	movwf	drawtext@x& (0+255),b
 15427                           
 15428                           ; BSR set to: 1
 15429                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
 15430                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
 15431                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
 15432  001B36  C153  F159         	movff	drawtext@x,drawtext@cursor_x
 15433                           
 15434                           ; BSR set to: 1
 15435  001B3A  C039  F158         	movff	drawtext@y,drawtext@cursor_y
 15436                           
 15437                           ; BSR set to: 1
 15438                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
 15439  001B3E  C03A  F011         	movff	drawtext@_text,strlen@s
 15440  001B42  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
 15441  001B46  EC4F  F01C         	call	_strlen	;wreg free
 15442  001B4A  C011  F154         	movff	?_strlen,drawtext@textsize
 15443  001B4E  C012  F155         	movff	?_strlen+1,drawtext@textsize+1
 15444                           
 15445                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
 15446  001B52  0E00               	movlw	0
 15447  001B54  0101               	movlb	1	; () banked
 15448  001B56  6F57               	movwf	(drawtext@i+1)& (0+255),b
 15449  001B58  0E00               	movlw	0
 15450  001B5A  6F56               	movwf	drawtext@i& (0+255),b
 15451  001B5C  D066               	goto	l8613
 15452  001B5E                     l8587:
 15453                           
 15454                           ; BSR set to: 1
 15455                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
 15456  001B5E  0100               	movlb	0	; () banked
 15457  001B60  5181               	movf	_wrap& (0+255),w,b
 15458  001B62  0100               	movlb	0	; () banked
 15459  001B64  B4D8               	btfsc	status,2,c
 15460  001B66  D034               	goto	l8603
 15461                           
 15462                           ; BSR set to: 0
 15463  001B68  5040               	movf	drawtext@size,w,c
 15464  001B6A  0D05               	mullw	5
 15465  001B6C  0101               	movlb	1	; () banked
 15466  001B6E  5159               	movf	drawtext@cursor_x& (0+255),w,b
 15467  001B70  6E41               	movwf	??_drawtext& (0+255),c
 15468  001B72  6A42               	clrf	(??_drawtext+1)& (0+255),c
 15469  001B74  50F3               	movf	prodl,w,c
 15470  001B76  2641               	addwf	??_drawtext,f,c
 15471  001B78  50F4               	movf	prodh,w,c
 15472  001B7A  2242               	addwfc	??_drawtext+1,f,c
 15473  001B7C  BE42               	btfsc	??_drawtext+1,7,c
 15474  001B7E  D028               	goto	l8603
 15475  001B80  5042               	movf	??_drawtext+1,w,c
 15476  001B82  E104               	bnz	u6250
 15477  001B84  0E81               	movlw	129
 15478  001B86  5C41               	subwf	??_drawtext,w,c
 15479  001B88  A0D8               	btfss	status,0,c
 15480  001B8A  D022               	goto	l8603
 15481  001B8C                     u6250:
 15482                           
 15483                           ; BSR set to: 1
 15484                           ;ST7735_TFT.c: 482: cursor_x = 0;
 15485  001B8C  0E00               	movlw	0
 15486  001B8E  0101               	movlb	1	; () banked
 15487  001B90  6F59               	movwf	drawtext@cursor_x& (0+255),b
 15488                           
 15489                           ; BSR set to: 1
 15490                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
 15491  001B92  5040               	movf	drawtext@size,w,c
 15492  001B94  0D07               	mullw	7
 15493  001B96  50F3               	movf	prodl,w,c
 15494  001B98  0101               	movlb	1	; () banked
 15495  001B9A  2558               	addwf	drawtext@cursor_y& (0+255),w,b
 15496  001B9C  0F03               	addlw	3
 15497  001B9E  0101               	movlb	1	; () banked
 15498  001BA0  6F58               	movwf	drawtext@cursor_y& (0+255),b
 15499                           
 15500                           ; BSR set to: 1
 15501                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
 15502  001BA2  0EA0               	movlw	160
 15503  001BA4  0101               	movlb	1	; () banked
 15504  001BA6  6558               	cpfsgt	drawtext@cursor_y& (0+255),b
 15505  001BA8  D004               	goto	l8599
 15506                           
 15507                           ; BSR set to: 1
 15508  001BAA  0EA0               	movlw	160
 15509  001BAC  0101               	movlb	1	; () banked
 15510  001BAE  6F58               	movwf	drawtext@cursor_y& (0+255),b
 15511  001BB0  D000               	goto	l8599
 15512  001BB2                     l8599:
 15513                           
 15514                           ; BSR set to: 1
 15515                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
 15516  001BB2  0101               	movlb	1	; () banked
 15517  001BB4  5156               	movf	drawtext@i& (0+255),w,b
 15518  001BB6  243A               	addwf	drawtext@_text,w,c
 15519  001BB8  6ED9               	movwf	fsr2l,c
 15520  001BBA  0101               	movlb	1	; () banked
 15521  001BBC  5157               	movf	(drawtext@i+1)& (0+255),w,b
 15522  001BBE  203B               	addwfc	drawtext@_text+1,w,c
 15523  001BC0  6EDA               	movwf	fsr2h,c
 15524  001BC2  0E20               	movlw	32
 15525  001BC4  18DE               	xorwf	postinc2,w,c
 15526  001BC6  B4D8               	btfsc	status,2,c
 15527  001BC8  D02C               	goto	l8611
 15528  001BCA  D002               	goto	l8603
 15529                           
 15530                           ; BSR set to: 1
 15531  001BCC  D02A               	goto	l8611
 15532                           
 15533                           ; BSR set to: 1
 15534  001BCE  D000               	goto	l8603
 15535  001BD0                     l8603:
 15536                           
 15537                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 15538  001BD0  C158  F02E         	movff	drawtext@cursor_y,drawChar@y
 15539  001BD4  0101               	movlb	1	; () banked
 15540  001BD6  5156               	movf	drawtext@i& (0+255),w,b
 15541  001BD8  243A               	addwf	drawtext@_text,w,c
 15542  001BDA  6ED9               	movwf	fsr2l,c
 15543  001BDC  0101               	movlb	1	; () banked
 15544  001BDE  5157               	movf	(drawtext@i+1)& (0+255),w,b
 15545  001BE0  203B               	addwfc	drawtext@_text+1,w,c
 15546  001BE2  6EDA               	movwf	fsr2h,c
 15547  001BE4  50DF               	movf	indf2,w,c
 15548  001BE6  6E2F               	movwf	drawChar@c,c
 15549  001BE8  C03C  F030         	movff	drawtext@color,drawChar@color
 15550  001BEC  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
 15551  001BF0  C03E  F032         	movff	drawtext@bg,drawChar@bg
 15552  001BF4  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
 15553  001BF8  C040  F034         	movff	drawtext@size,drawChar@size
 15554  001BFC  0101               	movlb	1	; () banked
 15555  001BFE  5159               	movf	drawtext@cursor_x& (0+255),w,b
 15556  001C00  ECD6  F00B         	call	_drawChar
 15557                           
 15558                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
 15559  001C04  5040               	movf	drawtext@size,w,c
 15560  001C06  0D06               	mullw	6
 15561  001C08  50F3               	movf	prodl,w,c
 15562  001C0A  0101               	movlb	1	; () banked
 15563  001C0C  2559               	addwf	drawtext@cursor_x& (0+255),w,b
 15564  001C0E  0101               	movlb	1	; () banked
 15565  001C10  6F59               	movwf	drawtext@cursor_x& (0+255),b
 15566                           
 15567                           ; BSR set to: 1
 15568                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
 15569  001C12  0E80               	movlw	128
 15570  001C14  0101               	movlb	1	; () banked
 15571  001C16  6559               	cpfsgt	drawtext@cursor_x& (0+255),b
 15572  001C18  D004               	goto	l8611
 15573                           
 15574                           ; BSR set to: 1
 15575  001C1A  0E80               	movlw	128
 15576  001C1C  0101               	movlb	1	; () banked
 15577  001C1E  6F59               	movwf	drawtext@cursor_x& (0+255),b
 15578                           
 15579                           ; BSR set to: 1
 15580  001C20  D000               	goto	l8611
 15581  001C22                     l8611:
 15582                           
 15583                           ; BSR set to: 1
 15584  001C22  0101               	movlb	1	; () banked
 15585  001C24  4B56               	infsnz	drawtext@i& (0+255),f,b
 15586  001C26  2B57               	incf	(drawtext@i+1)& (0+255),f,b
 15587  001C28  D000               	goto	l8613
 15588  001C2A                     l8613:
 15589                           
 15590                           ; BSR set to: 1
 15591  001C2A  0101               	movlb	1	; () banked
 15592  001C2C  5154               	movf	drawtext@textsize& (0+255),w,b
 15593  001C2E  0101               	movlb	1	; () banked
 15594  001C30  5D56               	subwf	drawtext@i& (0+255),w,b
 15595  001C32  0101               	movlb	1	; () banked
 15596  001C34  5155               	movf	(drawtext@textsize+1)& (0+255),w,b
 15597  001C36  0101               	movlb	1	; () banked
 15598  001C38  5957               	subwfb	(drawtext@i+1)& (0+255),w,b
 15599  001C3A  A0D8               	btfss	status,0,c
 15600  001C3C  D790               	goto	l8587
 15601                           
 15602                           ; BSR set to: 1
 15603                           
 15604                           ; BSR set to: 1
 15605  001C3E  0012               	return		;funcret
 15606  001C40                     __end_of_drawtext:
 15607                           	opt stack 0
 15608                           tblptru	equ	0xFF8
 15609                           tblptrh	equ	0xFF7
 15610                           tblptrl	equ	0xFF6
 15611                           tablat	equ	0xFF5
 15612                           prodh	equ	0xFF4
 15613                           prodl	equ	0xFF3
 15614                           intcon	equ	0xFF2
 15615                           intcon2	equ	0xFF1
 15616                           postinc0	equ	0xFEE
 15617                           wreg	equ	0xFE8
 15618                           postdec1	equ	0xFE5
 15619                           plusw1	equ	0xFE3
 15620                           fsr1l	equ	0xFE1
 15621                           indf2	equ	0xFDF
 15622                           postinc2	equ	0xFDE
 15623                           postdec2	equ	0xFDD
 15624                           plusw2	equ	0xFDB
 15625                           fsr2h	equ	0xFDA
 15626                           fsr2l	equ	0xFD9
 15627                           status	equ	0xFD8
 15628                           
 15629 ;; *************** function _strlen *****************
 15630 ;; Defined at:
 15631 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\strlen.c"
 15632 ;; Parameters:    Size  Location     Type
 15633 ;;  s               2   16[COMRAM] PTR const unsigned char 
 15634 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 15635 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 15636 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 15637 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 15638 ;;		 -> tempC(4), 
 15639 ;; Auto vars:     Size  Location     Type
 15640 ;;  cp              2   20[COMRAM] PTR const unsigned char 
 15641 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 15642 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 15643 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 15644 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 15645 ;;		 -> tempC(4), 
 15646 ;; Return value:  Size  Location     Type
 15647 ;;                  2   16[COMRAM] unsigned int 
 15648 ;; Registers used:
 15649 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15650 ;; Tracked objects:
 15651 ;;		On entry : 0/0
 15652 ;;		On exit  : 0/0
 15653 ;;		Unchanged: 0/0
 15654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15655 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15656 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15657 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15658 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15659 ;;Total ram usage:        6 bytes
 15660 ;; Hardware stack levels used:    1
 15661 ;; Hardware stack levels required when called:    3
 15662 ;; This function calls:
 15663 ;;		Nothing
 15664 ;; This function is called by:
 15665 ;;		_drawtext
 15666 ;; This function uses a non-reentrant model
 15667 ;;
 15668                           
 15669                           	psect	text84
 15670  00389E                     __ptext84:
 15671                           	opt stack 0
 15672  00389E                     _strlen:
 15673                           	opt stack 25
 15674                           
 15675                           ; BSR set to: 1
 15676                           ;incstack = 0
 15677  00389E  C011  F015         	movff	strlen@s,strlen@cp
 15678  0038A2  C012  F016         	movff	strlen@s+1,strlen@cp+1
 15679  0038A6  D003               	goto	l8199
 15680  0038A8                     l8197:
 15681  0038A8  4A15               	infsnz	strlen@cp,f,c
 15682  0038AA  2A16               	incf	strlen@cp+1,f,c
 15683  0038AC  D000               	goto	l8199
 15684  0038AE                     l8199:
 15685  0038AE  C015  FFD9         	movff	strlen@cp,fsr2l
 15686  0038B2  C016  FFDA         	movff	strlen@cp+1,fsr2h
 15687  0038B6  50DF               	movf	indf2,w,c
 15688  0038B8  A4D8               	btfss	status,2,c
 15689  0038BA  D7F6               	goto	l8197
 15690  0038BC  C011  F013         	movff	strlen@s,??_strlen
 15691  0038C0  C012  F014         	movff	strlen@s+1,??_strlen+1
 15692  0038C4  1E13               	comf	??_strlen,f,c
 15693  0038C6  1E14               	comf	??_strlen+1,f,c
 15694  0038C8  4A13               	infsnz	??_strlen,f,c
 15695  0038CA  2A14               	incf	??_strlen+1,f,c
 15696  0038CC  5015               	movf	strlen@cp,w,c
 15697  0038CE  2413               	addwf	??_strlen,w,c
 15698  0038D0  6E11               	movwf	?_strlen,c
 15699  0038D2  5016               	movf	strlen@cp+1,w,c
 15700  0038D4  2014               	addwfc	??_strlen+1,w,c
 15701  0038D6  6E12               	movwf	?_strlen+1,c
 15702  0038D8  D000               	goto	l2077
 15703  0038DA                     l2077:
 15704  0038DA  0012               	return		;funcret
 15705  0038DC                     __end_of_strlen:
 15706                           	opt stack 0
 15707                           tblptru	equ	0xFF8
 15708                           tblptrh	equ	0xFF7
 15709                           tblptrl	equ	0xFF6
 15710                           tablat	equ	0xFF5
 15711                           prodh	equ	0xFF4
 15712                           prodl	equ	0xFF3
 15713                           intcon	equ	0xFF2
 15714                           intcon2	equ	0xFF1
 15715                           postinc0	equ	0xFEE
 15716                           wreg	equ	0xFE8
 15717                           postdec1	equ	0xFE5
 15718                           plusw1	equ	0xFE3
 15719                           fsr1l	equ	0xFE1
 15720                           indf2	equ	0xFDF
 15721                           postinc2	equ	0xFDE
 15722                           postdec2	equ	0xFDD
 15723                           plusw2	equ	0xFDB
 15724                           fsr2h	equ	0xFDA
 15725                           fsr2l	equ	0xFD9
 15726                           status	equ	0xFD8
 15727                           
 15728 ;; *************** function _drawChar *****************
 15729 ;; Defined at:
 15730 ;;		line 447 in file "ST7735_TFT.c"
 15731 ;; Parameters:    Size  Location     Type
 15732 ;;  x               1    wreg     unsigned char 
 15733 ;;  y               1   45[COMRAM] unsigned char 
 15734 ;;  c               1   46[COMRAM] unsigned char 
 15735 ;;  color           2   47[COMRAM] unsigned int 
 15736 ;;  bg              2   49[COMRAM] unsigned int 
 15737 ;;  size            1   51[COMRAM] unsigned char 
 15738 ;; Auto vars:     Size  Location     Type
 15739 ;;  x               1   53[COMRAM] unsigned char 
 15740 ;;  line            1   52[COMRAM] unsigned char 
 15741 ;;  i               1   55[COMRAM] unsigned char 
 15742 ;;  j               1   54[COMRAM] unsigned char 
 15743 ;; Return value:  Size  Location     Type
 15744 ;;		None               void
 15745 ;; Registers used:
 15746 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15747 ;; Tracked objects:
 15748 ;;		On entry : 0/0
 15749 ;;		On exit  : 0/0
 15750 ;;		Unchanged: 0/0
 15751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15752 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15753 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15755 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15756 ;;Total ram usage:       11 bytes
 15757 ;; Hardware stack levels used:    1
 15758 ;; Hardware stack levels required when called:    8
 15759 ;; This function calls:
 15760 ;;		___wmul
 15761 ;;		_drawPixel
 15762 ;;		_fillRect
 15763 ;; This function is called by:
 15764 ;;		_drawtext
 15765 ;; This function uses a non-reentrant model
 15766 ;;
 15767                           
 15768                           	psect	text85
 15769  0017AC                     __ptext85:
 15770                           	opt stack 0
 15771  0017AC                     _drawChar:
 15772                           	opt stack 20
 15773                           
 15774                           ;incstack = 0
 15775                           ;drawChar@x stored from wreg
 15776  0017AC  6E36               	movwf	drawChar@x,c
 15777                           
 15778                           ;ST7735_TFT.c: 449: char i, j;
 15779                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
 15780  0017AE  0E80               	movlw	128
 15781  0017B0  6036               	cpfslt	drawChar@x,c
 15782  0017B2  D0A6               	goto	l795
 15783  0017B4  0E9F               	movlw	159
 15784  0017B6  642E               	cpfsgt	drawChar@y,c
 15785  0017B8  D001               	goto	l8145
 15786                           
 15787                           ;ST7735_TFT.c: 451: return;
 15788  0017BA  D0A2               	goto	l795
 15789  0017BC                     l8145:
 15790                           
 15791                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
 15792  0017BC  5034               	movf	drawChar@size,w,c
 15793  0017BE  A4D8               	btfss	status,2,c
 15794  0017C0  D003               	goto	l8149
 15795  0017C2  0E01               	movlw	1
 15796  0017C4  6E34               	movwf	drawChar@size,c
 15797  0017C6  D000               	goto	l8149
 15798  0017C8                     l8149:
 15799                           
 15800                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
 15801  0017C8  0E1F               	movlw	31
 15802  0017CA  642F               	cpfsgt	drawChar@c,c
 15803  0017CC  D004               	goto	l8153
 15804  0017CE  0E7E               	movlw	126
 15805  0017D0  642F               	cpfsgt	drawChar@c,c
 15806  0017D2  D003               	goto	l797
 15807  0017D4  D000               	goto	l8153
 15808  0017D6                     l8153:
 15809                           
 15810                           ;ST7735_TFT.c: 454: c = '?';
 15811  0017D6  0E3F               	movlw	63
 15812  0017D8  6E2F               	movwf	drawChar@c,c
 15813  0017DA                     l797:
 15814                           
 15815                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
 15816  0017DA  0E00               	movlw	0
 15817  0017DC  6E38               	movwf	drawChar@i,c
 15818  0017DE                     l8155:
 15819  0017DE  0E04               	movlw	4
 15820  0017E0  6438               	cpfsgt	drawChar@i,c
 15821  0017E2  D001               	goto	l8159
 15822  0017E4  D08D               	goto	l795
 15823  0017E6                     l8159:
 15824                           
 15825                           ;ST7735_TFT.c: 456: unsigned char line;
 15826                           ;ST7735_TFT.c: 457: if(c < 'S')
 15827  0017E6  0E53               	movlw	83
 15828  0017E8  602F               	cpfslt	drawChar@c,c
 15829  0017EA  D015               	goto	l8163
 15830                           
 15831                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
 15832  0017EC  0EE0               	movlw	224
 15833  0017EE  242F               	addwf	drawChar@c,w,c
 15834  0017F0  6E11               	movwf	___wmul@multiplier,c
 15835  0017F2  6A12               	clrf	___wmul@multiplier+1,c
 15836  0017F4  0EFF               	movlw	255
 15837  0017F6  2212               	addwfc	___wmul@multiplier+1,f,c
 15838  0017F8  0E00               	movlw	0
 15839  0017FA  6E14               	movwf	___wmul@multiplicand+1,c
 15840  0017FC  0E05               	movlw	5
 15841  0017FE  6E13               	movwf	___wmul@multiplicand,c
 15842  001800  EC1F  F01D         	call	___wmul	;wreg free
 15843  001804  5038               	movf	drawChar@i,w,c
 15844  001806  2611               	addwf	?___wmul,f,c
 15845  001808  0E00               	movlw	0
 15846  00180A  2212               	addwfc	?___wmul+1,f,c
 15847  00180C  0EC9               	movlw	low _font
 15848  00180E  2411               	addwf	?___wmul,w,c
 15849  001810  6EF6               	movwf	tblptrl,c
 15850  001812  0EFC               	movlw	high _font
 15851  001814  D014               	goto	L7
 15852  001816                     l8163:
 15853                           
 15854                           ;ST7735_TFT.c: 459: else
 15855                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
 15856  001816  0EAD               	movlw	173
 15857  001818  242F               	addwf	drawChar@c,w,c
 15858  00181A  6E11               	movwf	___wmul@multiplier,c
 15859  00181C  6A12               	clrf	___wmul@multiplier+1,c
 15860  00181E  0EFF               	movlw	255
 15861  001820  2212               	addwfc	___wmul@multiplier+1,f,c
 15862  001822  0E00               	movlw	0
 15863  001824  6E14               	movwf	___wmul@multiplicand+1,c
 15864  001826  0E05               	movlw	5
 15865  001828  6E13               	movwf	___wmul@multiplicand,c
 15866  00182A  EC1F  F01D         	call	___wmul	;wreg free
 15867  00182E  5038               	movf	drawChar@i,w,c
 15868  001830  2611               	addwf	?___wmul,f,c
 15869  001832  0E00               	movlw	0
 15870  001834  2212               	addwfc	?___wmul+1,f,c
 15871  001836  0EC8               	movlw	low _font2
 15872  001838  2411               	addwf	?___wmul,w,c
 15873  00183A  6EF6               	movwf	tblptrl,c
 15874  00183C  0EFD               	movlw	high _font2
 15875  00183E                     L7:
 15876  00183E  2012               	addwfc	?___wmul+1,w,c
 15877  001840  6EF7               	movwf	tblptrh,c
 15878  001842                     	if	0	;There are less than 3 active tblptr bytes
 15879  001842                     	endif
 15880  001842  0008               	tblrd		*
 15881  001844  CFF5 F035          	movff	tablat,drawChar@line
 15882  001848  D000               	goto	l8165
 15883  00184A                     l8165:
 15884                           
 15885                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
 15886  00184A  0E00               	movlw	0
 15887  00184C  6E37               	movwf	drawChar@j,c
 15888  00184E                     l8167:
 15889  00184E  0E06               	movlw	6
 15890  001850  6437               	cpfsgt	drawChar@j,c
 15891  001852  D001               	goto	l804
 15892  001854  D053               	goto	l8191
 15893  001856                     l804:
 15894                           
 15895                           ;ST7735_TFT.c: 462: if(line & 0x01) {
 15896  001856  A035               	btfss	drawChar@line,0,c
 15897  001858  D023               	goto	l8177
 15898                           
 15899                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
 15900  00185A  0434               	decf	drawChar@size,w,c
 15901  00185C  A4D8               	btfss	status,2,c
 15902  00185E  D00C               	goto	l8175
 15903  001860  502E               	movf	drawChar@y,w,c
 15904  001862  2437               	addwf	drawChar@j,w,c
 15905  001864  6E18               	movwf	drawPixel@y,c
 15906  001866  C030  F019         	movff	drawChar@color,drawPixel@color
 15907  00186A  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
 15908  00186E  5036               	movf	drawChar@x,w,c
 15909  001870  2438               	addwf	drawChar@i,w,c
 15910  001872  ECDD  F01C         	call	_drawPixel
 15911  001876  D03E               	goto	l8185
 15912  001878                     l8175:
 15913                           
 15914                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
 15915  001878  5037               	movf	drawChar@j,w,c
 15916  00187A  0234               	mulwf	drawChar@size,c
 15917  00187C  50F3               	movf	prodl,w,c
 15918  00187E  242E               	addwf	drawChar@y,w,c
 15919  001880  6E23               	movwf	fillRect@y,c
 15920  001882  C034  F024         	movff	drawChar@size,fillRect@w
 15921  001886  C034  F025         	movff	drawChar@size,fillRect@h
 15922  00188A  C030  F026         	movff	drawChar@color,fillRect@color
 15923  00188E  C031  F027         	movff	drawChar@color+1,fillRect@color+1
 15924  001892  5038               	movf	drawChar@i,w,c
 15925  001894  0234               	mulwf	drawChar@size,c
 15926  001896  50F3               	movf	prodl,w,c
 15927  001898  2436               	addwf	drawChar@x,w,c
 15928  00189A  ECA6  F01B         	call	_fillRect
 15929                           
 15930                           ;ST7735_TFT.c: 465: }
 15931  00189E  D02A               	goto	l8185
 15932  0018A0                     l8177:
 15933                           
 15934                           ;ST7735_TFT.c: 466: else if(bg != color) {
 15935  0018A0  5030               	movf	drawChar@color,w,c
 15936  0018A2  1832               	xorwf	drawChar@bg,w,c
 15937  0018A4  E104               	bnz	u5670
 15938  0018A6  5031               	movf	drawChar@color+1,w,c
 15939  0018A8  1833               	xorwf	drawChar@bg+1,w,c
 15940  0018AA  B4D8               	btfsc	status,2,c
 15941  0018AC  D023               	goto	l8185
 15942  0018AE                     u5670:
 15943                           
 15944                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
 15945  0018AE  0434               	decf	drawChar@size,w,c
 15946  0018B0  A4D8               	btfss	status,2,c
 15947  0018B2  D00C               	goto	l8183
 15948  0018B4  502E               	movf	drawChar@y,w,c
 15949  0018B6  2437               	addwf	drawChar@j,w,c
 15950  0018B8  6E18               	movwf	drawPixel@y,c
 15951  0018BA  C032  F019         	movff	drawChar@bg,drawPixel@color
 15952  0018BE  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
 15953  0018C2  5036               	movf	drawChar@x,w,c
 15954  0018C4  2438               	addwf	drawChar@i,w,c
 15955  0018C6  ECDD  F01C         	call	_drawPixel
 15956  0018CA  D014               	goto	l8185
 15957  0018CC                     l8183:
 15958                           
 15959                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
 15960  0018CC  5037               	movf	drawChar@j,w,c
 15961  0018CE  0234               	mulwf	drawChar@size,c
 15962  0018D0  50F3               	movf	prodl,w,c
 15963  0018D2  242E               	addwf	drawChar@y,w,c
 15964  0018D4  6E23               	movwf	fillRect@y,c
 15965  0018D6  C034  F024         	movff	drawChar@size,fillRect@w
 15966  0018DA  C034  F025         	movff	drawChar@size,fillRect@h
 15967  0018DE  C032  F026         	movff	drawChar@bg,fillRect@color
 15968  0018E2  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
 15969  0018E6  5038               	movf	drawChar@i,w,c
 15970  0018E8  0234               	mulwf	drawChar@size,c
 15971  0018EA  50F3               	movf	prodl,w,c
 15972  0018EC  2436               	addwf	drawChar@x,w,c
 15973  0018EE  ECA6  F01B         	call	_fillRect
 15974  0018F2  D000               	goto	l8185
 15975  0018F4                     l8185:
 15976  0018F4  2A37               	incf	drawChar@j,f,c
 15977  0018F6  90D8               	bcf	status,0,c
 15978  0018F8  3235               	rrcf	drawChar@line,f,c
 15979  0018FA  D7A9               	goto	l8167
 15980  0018FC                     l8191:
 15981  0018FC  2A38               	incf	drawChar@i,f,c
 15982  0018FE  D76F               	goto	l8155
 15983  001900                     l795:
 15984  001900  0012               	return		;funcret
 15985  001902                     __end_of_drawChar:
 15986                           	opt stack 0
 15987                           tblptru	equ	0xFF8
 15988                           tblptrh	equ	0xFF7
 15989                           tblptrl	equ	0xFF6
 15990                           tablat	equ	0xFF5
 15991                           prodh	equ	0xFF4
 15992                           prodl	equ	0xFF3
 15993                           intcon	equ	0xFF2
 15994                           intcon2	equ	0xFF1
 15995                           postinc0	equ	0xFEE
 15996                           wreg	equ	0xFE8
 15997                           postdec1	equ	0xFE5
 15998                           plusw1	equ	0xFE3
 15999                           fsr1l	equ	0xFE1
 16000                           indf2	equ	0xFDF
 16001                           postinc2	equ	0xFDE
 16002                           postdec2	equ	0xFDD
 16003                           plusw2	equ	0xFDB
 16004                           fsr2h	equ	0xFDA
 16005                           fsr2l	equ	0xFD9
 16006                           status	equ	0xFD8
 16007                           
 16008 ;; *************** function _fillRect *****************
 16009 ;; Defined at:
 16010 ;;		line 437 in file "ST7735_TFT.c"
 16011 ;; Parameters:    Size  Location     Type
 16012 ;;  x               1    wreg     unsigned char 
 16013 ;;  y               1   34[COMRAM] unsigned char 
 16014 ;;  w               1   35[COMRAM] unsigned char 
 16015 ;;  h               1   36[COMRAM] unsigned char 
 16016 ;;  color           2   37[COMRAM] unsigned int 
 16017 ;; Auto vars:     Size  Location     Type
 16018 ;;  x               1   42[COMRAM] unsigned char 
 16019 ;;  i               2   43[COMRAM] int 
 16020 ;; Return value:  Size  Location     Type
 16021 ;;		None               void
 16022 ;; Registers used:
 16023 ;;		wreg, status,2, status,0, cstack
 16024 ;; Tracked objects:
 16025 ;;		On entry : 0/0
 16026 ;;		On exit  : 0/0
 16027 ;;		Unchanged: 0/0
 16028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16029 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16030 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16031 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16032 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16033 ;;Total ram usage:       11 bytes
 16034 ;; Hardware stack levels used:    1
 16035 ;; Hardware stack levels required when called:    7
 16036 ;; This function calls:
 16037 ;;		_drawFastVLine
 16038 ;; This function is called by:
 16039 ;;		_drawChar
 16040 ;;		_Initialize_Setup_Alarm_Time_Screen
 16041 ;;		_Initialize_Setup_Time_Screen
 16042 ;;		_Update_Setup_Screen_Cursor_Forward
 16043 ;;		_Update_Setup_Screen_Cursor_Backward
 16044 ;; This function uses a non-reentrant model
 16045 ;;
 16046                           
 16047                           	psect	text86
 16048  00374C                     __ptext86:
 16049                           	opt stack 0
 16050  00374C                     _fillRect:
 16051                           	opt stack 20
 16052                           
 16053                           ;incstack = 0
 16054                           ;fillRect@x stored from wreg
 16055  00374C  6E2B               	movwf	fillRect@x,c
 16056                           
 16057                           ;ST7735_TFT.c: 439: signed int i;
 16058                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
 16059  00374E  C02B  F02C         	movff	fillRect@x,fillRect@i
 16060  003752  6A2D               	clrf	fillRect@i+1,c
 16061  003754  D00E               	goto	l7967
 16062  003756                     l7963:
 16063                           
 16064                           ;ST7735_TFT.c: 442: {
 16065                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
 16066  003756  C023  F018         	movff	fillRect@y,drawFastVLine@y
 16067  00375A  C025  F019         	movff	fillRect@h,drawFastVLine@h
 16068  00375E  C026  F01A         	movff	fillRect@color,drawFastVLine@color
 16069  003762  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
 16070  003766  502C               	movf	fillRect@i,w,c
 16071  003768  EC1F  F017         	call	_drawFastVLine
 16072  00376C  4A2C               	infsnz	fillRect@i,f,c
 16073  00376E  2A2D               	incf	fillRect@i+1,f,c
 16074  003770  D000               	goto	l7967
 16075  003772                     l7967:
 16076  003772  5024               	movf	fillRect@w,w,c
 16077  003774  C02B  F028         	movff	fillRect@x,??_fillRect
 16078  003778  6A29               	clrf	(??_fillRect+1)& (0+255),c
 16079  00377A  2628               	addwf	??_fillRect,f,c
 16080  00377C  0E00               	movlw	0
 16081  00377E  2229               	addwfc	??_fillRect+1,f,c
 16082  003780  5028               	movf	??_fillRect,w,c
 16083  003782  5C2C               	subwf	fillRect@i,w,c
 16084  003784  502D               	movf	fillRect@i+1,w,c
 16085  003786  0A80               	xorlw	128
 16086  003788  6E2A               	movwf	(??_fillRect+2)& (0+255),c
 16087  00378A  5029               	movf	??_fillRect+1,w,c
 16088  00378C  0A80               	xorlw	128
 16089  00378E  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
 16090  003790  A0D8               	btfss	status,0,c
 16091  003792  D7E1               	goto	l7963
 16092  003794  0012               	return		;funcret
 16093  003796                     __end_of_fillRect:
 16094                           	opt stack 0
 16095                           tblptru	equ	0xFF8
 16096                           tblptrh	equ	0xFF7
 16097                           tblptrl	equ	0xFF6
 16098                           tablat	equ	0xFF5
 16099                           prodh	equ	0xFF4
 16100                           prodl	equ	0xFF3
 16101                           intcon	equ	0xFF2
 16102                           intcon2	equ	0xFF1
 16103                           postinc0	equ	0xFEE
 16104                           wreg	equ	0xFE8
 16105                           postdec1	equ	0xFE5
 16106                           plusw1	equ	0xFE3
 16107                           fsr1l	equ	0xFE1
 16108                           indf2	equ	0xFDF
 16109                           postinc2	equ	0xFDE
 16110                           postdec2	equ	0xFDD
 16111                           plusw2	equ	0xFDB
 16112                           fsr2h	equ	0xFDA
 16113                           fsr2l	equ	0xFD9
 16114                           status	equ	0xFD8
 16115                           
 16116 ;; *************** function _drawFastVLine *****************
 16117 ;; Defined at:
 16118 ;;		line 416 in file "ST7735_TFT.c"
 16119 ;; Parameters:    Size  Location     Type
 16120 ;;  x               1    wreg     unsigned char 
 16121 ;;  y               1   23[COMRAM] unsigned char 
 16122 ;;  h               1   24[COMRAM] unsigned char 
 16123 ;;  color           2   25[COMRAM] unsigned int 
 16124 ;; Auto vars:     Size  Location     Type
 16125 ;;  x               1   33[COMRAM] unsigned char 
 16126 ;;  lo              1   32[COMRAM] unsigned char 
 16127 ;;  hi              1   31[COMRAM] unsigned char 
 16128 ;; Return value:  Size  Location     Type
 16129 ;;		None               void
 16130 ;; Registers used:
 16131 ;;		wreg, status,2, status,0, cstack
 16132 ;; Tracked objects:
 16133 ;;		On entry : 0/0
 16134 ;;		On exit  : 0/0
 16135 ;;		Unchanged: 0/0
 16136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16137 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16138 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16139 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16140 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16141 ;;Total ram usage:       11 bytes
 16142 ;; Hardware stack levels used:    1
 16143 ;; Hardware stack levels required when called:    6
 16144 ;; This function calls:
 16145 ;;		_setAddrWindow
 16146 ;;		_spiwrite
 16147 ;; This function is called by:
 16148 ;;		_fillRect
 16149 ;;		_fillCircleHelper
 16150 ;;		_fillCircle
 16151 ;;		_drawRect
 16152 ;; This function uses a non-reentrant model
 16153 ;;
 16154                           
 16155                           	psect	text87
 16156  002E3E                     __ptext87:
 16157                           	opt stack 0
 16158  002E3E                     _drawFastVLine:
 16159                           	opt stack 20
 16160                           
 16161                           ;incstack = 0
 16162                           ;drawFastVLine@x stored from wreg
 16163  002E3E  6E22               	movwf	drawFastVLine@x,c
 16164                           
 16165                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
 16166                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
 16167  002E40  0E80               	movlw	128
 16168  002E42  6022               	cpfslt	drawFastVLine@x,c
 16169  002E44  D03F               	goto	l779
 16170  002E46  0E9F               	movlw	159
 16171  002E48  6418               	cpfsgt	drawFastVLine@y,c
 16172  002E4A  D001               	goto	l7901
 16173                           
 16174                           ;ST7735_TFT.c: 420: return;
 16175  002E4C  D03B               	goto	l779
 16176  002E4E                     l7901:
 16177                           
 16178                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
 16179  002E4E  0EFF               	movlw	255
 16180  002E50  6E1C               	movwf	??_drawFastVLine& (0+255),c
 16181  002E52  0EFF               	movlw	255
 16182  002E54  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
 16183  002E56  5019               	movf	drawFastVLine@h,w,c
 16184  002E58  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
 16185  002E5C  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
 16186  002E5E  261E               	addwf	??_drawFastVLine+2,f,c
 16187  002E60  0E00               	movlw	0
 16188  002E62  221F               	addwfc	??_drawFastVLine+3,f,c
 16189  002E64  501C               	movf	??_drawFastVLine,w,c
 16190  002E66  261E               	addwf	??_drawFastVLine+2,f,c
 16191  002E68  501D               	movf	??_drawFastVLine+1,w,c
 16192  002E6A  221F               	addwfc	??_drawFastVLine+3,f,c
 16193  002E6C  BE1F               	btfsc	??_drawFastVLine+3,7,c
 16194  002E6E  D00B               	goto	l7905
 16195  002E70  501F               	movf	??_drawFastVLine+3,w,c
 16196  002E72  E104               	bnz	u5440
 16197  002E74  0EA0               	movlw	160
 16198  002E76  5C1E               	subwf	??_drawFastVLine+2,w,c
 16199  002E78  A0D8               	btfss	status,0,c
 16200  002E7A  D005               	goto	l7905
 16201  002E7C                     u5440:
 16202                           
 16203                           ;ST7735_TFT.c: 422: h = 160 - y;
 16204  002E7C  5018               	movf	drawFastVLine@y,w,c
 16205  002E7E  0800               	sublw	0
 16206  002E80  0FA0               	addlw	160
 16207  002E82  6E19               	movwf	drawFastVLine@h,c
 16208  002E84  D000               	goto	l7905
 16209  002E86                     l7905:
 16210                           
 16211                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
 16212  002E86  501B               	movf	drawFastVLine@color+1,w,c
 16213  002E88  6E20               	movwf	drawFastVLine@hi,c
 16214  002E8A  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
 16215                           
 16216                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
 16217  002E8E  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
 16218  002E92  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
 16219  002E96  5018               	movf	drawFastVLine@y,w,c
 16220  002E98  2419               	addwf	drawFastVLine@h,w,c
 16221  002E9A  6E1C               	movwf	??_drawFastVLine& (0+255),c
 16222  002E9C  041C               	decf	??_drawFastVLine,w,c
 16223  002E9E  6E16               	movwf	setAddrWindow@y1,c
 16224  002EA0  5022               	movf	drawFastVLine@x,w,c
 16225  002EA2  EC33  F01B         	call	_setAddrWindow
 16226                           
 16227                           ;ST7735_TFT.c: 425: PORTCbits.RC1 = 1;
 16228  002EA6  8282               	bsf	3970,1,c	;volatile
 16229                           
 16230                           ;ST7735_TFT.c: 426: PORTCbits.RC4 = 0;
 16231  002EA8  9882               	bcf	3970,4,c	;volatile
 16232                           
 16233                           ;ST7735_TFT.c: 428: while (h--) {
 16234  002EAA  D007               	goto	l7917
 16235  002EAC                     l7915:
 16236                           
 16237                           ;ST7735_TFT.c: 429: spiwrite(hi);
 16238  002EAC  5020               	movf	drawFastVLine@hi,w,c
 16239  002EAE  EC74  F01E         	call	_spiwrite
 16240                           
 16241                           ;ST7735_TFT.c: 430: spiwrite(lo);
 16242  002EB2  5021               	movf	drawFastVLine@lo,w,c
 16243  002EB4  EC74  F01E         	call	_spiwrite
 16244  002EB8  D000               	goto	l7917
 16245  002EBA                     l7917:
 16246  002EBA  0619               	decf	drawFastVLine@h,f,c
 16247  002EBC  2819               	incf	drawFastVLine@h,w,c
 16248  002EBE  A4D8               	btfss	status,2,c
 16249  002EC0  D7F5               	goto	l7915
 16250                           
 16251                           ;ST7735_TFT.c: 431: }
 16252                           ;ST7735_TFT.c: 432: PORTCbits.RC4 = 1;
 16253  002EC2  8882               	bsf	3970,4,c	;volatile
 16254  002EC4                     l779:
 16255  002EC4  0012               	return		;funcret
 16256  002EC6                     __end_of_drawFastVLine:
 16257                           	opt stack 0
 16258                           tblptru	equ	0xFF8
 16259                           tblptrh	equ	0xFF7
 16260                           tblptrl	equ	0xFF6
 16261                           tablat	equ	0xFF5
 16262                           prodh	equ	0xFF4
 16263                           prodl	equ	0xFF3
 16264                           intcon	equ	0xFF2
 16265                           intcon2	equ	0xFF1
 16266                           postinc0	equ	0xFEE
 16267                           wreg	equ	0xFE8
 16268                           postdec1	equ	0xFE5
 16269                           plusw1	equ	0xFE3
 16270                           fsr1l	equ	0xFE1
 16271                           indf2	equ	0xFDF
 16272                           postinc2	equ	0xFDE
 16273                           postdec2	equ	0xFDD
 16274                           plusw2	equ	0xFDB
 16275                           fsr2h	equ	0xFDA
 16276                           fsr2l	equ	0xFD9
 16277                           status	equ	0xFD8
 16278                           
 16279 ;; *************** function _drawPixel *****************
 16280 ;; Defined at:
 16281 ;;		line 407 in file "ST7735_TFT.c"
 16282 ;; Parameters:    Size  Location     Type
 16283 ;;  x               1    wreg     unsigned char 
 16284 ;;  y               1   23[COMRAM] unsigned char 
 16285 ;;  color           2   24[COMRAM] unsigned int 
 16286 ;; Auto vars:     Size  Location     Type
 16287 ;;  x               1   26[COMRAM] unsigned char 
 16288 ;; Return value:  Size  Location     Type
 16289 ;;		None               void
 16290 ;; Registers used:
 16291 ;;		wreg, status,2, status,0, cstack
 16292 ;; Tracked objects:
 16293 ;;		On entry : 0/0
 16294 ;;		On exit  : 0/0
 16295 ;;		Unchanged: 0/0
 16296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16297 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16300 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16301 ;;Total ram usage:        4 bytes
 16302 ;; Hardware stack levels used:    1
 16303 ;; Hardware stack levels required when called:    6
 16304 ;; This function calls:
 16305 ;;		_setAddrWindow
 16306 ;;		_write_data
 16307 ;; This function is called by:
 16308 ;;		_drawChar
 16309 ;;		_drawCircle
 16310 ;;		_drawCircleHelper
 16311 ;; This function uses a non-reentrant model
 16312 ;;
 16313                           
 16314                           	psect	text88
 16315  0039BA                     __ptext88:
 16316                           	opt stack 0
 16317  0039BA                     _drawPixel:
 16318                           	opt stack 21
 16319                           
 16320                           ;incstack = 0
 16321                           ;drawPixel@x stored from wreg
 16322  0039BA  6E1B               	movwf	drawPixel@x,c
 16323                           
 16324                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
 16325  0039BC  0E80               	movlw	128
 16326  0039BE  601B               	cpfslt	drawPixel@x,c
 16327  0039C0  D013               	goto	l773
 16328  0039C2  0E9F               	movlw	159
 16329  0039C4  6418               	cpfsgt	drawPixel@y,c
 16330  0039C6  D001               	goto	l7955
 16331                           
 16332                           ;ST7735_TFT.c: 410: return;
 16333  0039C8  D00F               	goto	l773
 16334  0039CA                     l7955:
 16335                           
 16336                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
 16337  0039CA  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
 16338  0039CE  281B               	incf	drawPixel@x,w,c
 16339  0039D0  6E15               	movwf	setAddrWindow@x1,c
 16340  0039D2  2818               	incf	drawPixel@y,w,c
 16341  0039D4  6E16               	movwf	setAddrWindow@y1,c
 16342  0039D6  501B               	movf	drawPixel@x,w,c
 16343  0039D8  EC33  F01B         	call	_setAddrWindow
 16344                           
 16345                           ;ST7735_TFT.c: 412: write_data(color >> 8);
 16346  0039DC  501A               	movf	drawPixel@color+1,w,c
 16347  0039DE  ECE8  F01E         	call	_write_data
 16348                           
 16349                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
 16350  0039E2  5019               	movf	drawPixel@color,w,c
 16351  0039E4  ECE8  F01E         	call	_write_data
 16352  0039E8                     l773:
 16353  0039E8  0012               	return		;funcret
 16354  0039EA                     __end_of_drawPixel:
 16355                           	opt stack 0
 16356                           tblptru	equ	0xFF8
 16357                           tblptrh	equ	0xFF7
 16358                           tblptrl	equ	0xFF6
 16359                           tablat	equ	0xFF5
 16360                           prodh	equ	0xFF4
 16361                           prodl	equ	0xFF3
 16362                           intcon	equ	0xFF2
 16363                           intcon2	equ	0xFF1
 16364                           postinc0	equ	0xFEE
 16365                           wreg	equ	0xFE8
 16366                           postdec1	equ	0xFE5
 16367                           plusw1	equ	0xFE3
 16368                           fsr1l	equ	0xFE1
 16369                           indf2	equ	0xFDF
 16370                           postinc2	equ	0xFDE
 16371                           postdec2	equ	0xFDD
 16372                           plusw2	equ	0xFDB
 16373                           fsr2h	equ	0xFDA
 16374                           fsr2l	equ	0xFD9
 16375                           status	equ	0xFD8
 16376                           
 16377 ;; *************** function _setAddrWindow *****************
 16378 ;; Defined at:
 16379 ;;		line 392 in file "ST7735_TFT.c"
 16380 ;; Parameters:    Size  Location     Type
 16381 ;;  x0              1    wreg     unsigned char 
 16382 ;;  y0              1   19[COMRAM] unsigned char 
 16383 ;;  x1              1   20[COMRAM] unsigned char 
 16384 ;;  y1              1   21[COMRAM] unsigned char 
 16385 ;; Auto vars:     Size  Location     Type
 16386 ;;  x0              1   22[COMRAM] unsigned char 
 16387 ;; Return value:  Size  Location     Type
 16388 ;;		None               void
 16389 ;; Registers used:
 16390 ;;		wreg, status,2, status,0, cstack
 16391 ;; Tracked objects:
 16392 ;;		On entry : 0/0
 16393 ;;		On exit  : 0/0
 16394 ;;		Unchanged: 0/0
 16395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16396 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16397 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16399 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16400 ;;Total ram usage:        4 bytes
 16401 ;; Hardware stack levels used:    1
 16402 ;; Hardware stack levels required when called:    5
 16403 ;; This function calls:
 16404 ;;		_write_command
 16405 ;;		_write_data
 16406 ;; This function is called by:
 16407 ;;		_drawPixel
 16408 ;;		_drawFastVLine
 16409 ;;		_fillRectangle
 16410 ;;		_drawFastHLine
 16411 ;; This function uses a non-reentrant model
 16412 ;;
 16413                           
 16414                           	psect	text89
 16415  003666                     __ptext89:
 16416                           	opt stack 0
 16417  003666                     _setAddrWindow:
 16418                           	opt stack 20
 16419                           
 16420                           ;incstack = 0
 16421                           ;setAddrWindow@x0 stored from wreg
 16422  003666  6E17               	movwf	setAddrWindow@x0,c
 16423                           
 16424                           ;ST7735_TFT.c: 394: write_command(0x2A);
 16425  003668  0E2A               	movlw	42
 16426  00366A  ECF0  F01E         	call	_write_command
 16427                           
 16428                           ;ST7735_TFT.c: 395: write_data(0);
 16429  00366E  0E00               	movlw	0
 16430  003670  ECE8  F01E         	call	_write_data
 16431                           
 16432                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
 16433  003674  5017               	movf	setAddrWindow@x0,w,c
 16434  003676  245A               	addwf	_colstart,w,c
 16435  003678  ECE8  F01E         	call	_write_data
 16436                           
 16437                           ;ST7735_TFT.c: 397: write_data(0);
 16438  00367C  0E00               	movlw	0
 16439  00367E  ECE8  F01E         	call	_write_data
 16440                           
 16441                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
 16442  003682  5015               	movf	setAddrWindow@x1,w,c
 16443  003684  245A               	addwf	_colstart,w,c
 16444  003686  ECE8  F01E         	call	_write_data
 16445                           
 16446                           ;ST7735_TFT.c: 399: write_command(0x2B);
 16447  00368A  0E2B               	movlw	43
 16448  00368C  ECF0  F01E         	call	_write_command
 16449                           
 16450                           ;ST7735_TFT.c: 400: write_data(0);
 16451  003690  0E00               	movlw	0
 16452  003692  ECE8  F01E         	call	_write_data
 16453                           
 16454                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
 16455  003696  5014               	movf	setAddrWindow@y0,w,c
 16456  003698  2462               	addwf	_rowstart,w,c
 16457  00369A  ECE8  F01E         	call	_write_data
 16458                           
 16459                           ;ST7735_TFT.c: 402: write_data(0);
 16460  00369E  0E00               	movlw	0
 16461  0036A0  ECE8  F01E         	call	_write_data
 16462                           
 16463                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
 16464  0036A4  5016               	movf	setAddrWindow@y1,w,c
 16465  0036A6  2462               	addwf	_rowstart,w,c
 16466  0036A8  ECE8  F01E         	call	_write_data
 16467                           
 16468                           ;ST7735_TFT.c: 404: write_command(0x2C);
 16469  0036AC  0E2C               	movlw	44
 16470  0036AE  ECF0  F01E         	call	_write_command
 16471  0036B2  0012               	return		;funcret
 16472  0036B4                     __end_of_setAddrWindow:
 16473                           	opt stack 0
 16474                           tblptru	equ	0xFF8
 16475                           tblptrh	equ	0xFF7
 16476                           tblptrl	equ	0xFF6
 16477                           tablat	equ	0xFF5
 16478                           prodh	equ	0xFF4
 16479                           prodl	equ	0xFF3
 16480                           intcon	equ	0xFF2
 16481                           intcon2	equ	0xFF1
 16482                           postinc0	equ	0xFEE
 16483                           wreg	equ	0xFE8
 16484                           postdec1	equ	0xFE5
 16485                           plusw1	equ	0xFE3
 16486                           fsr1l	equ	0xFE1
 16487                           indf2	equ	0xFDF
 16488                           postinc2	equ	0xFDE
 16489                           postdec2	equ	0xFDD
 16490                           plusw2	equ	0xFDB
 16491                           fsr2h	equ	0xFDA
 16492                           fsr2l	equ	0xFD9
 16493                           status	equ	0xFD8
 16494                           
 16495 ;; *************** function _write_data *****************
 16496 ;; Defined at:
 16497 ;;		line 209 in file "ST7735_TFT.c"
 16498 ;; Parameters:    Size  Location     Type
 16499 ;;  data_           1    wreg     unsigned char 
 16500 ;; Auto vars:     Size  Location     Type
 16501 ;;  data_           1   18[COMRAM] unsigned char 
 16502 ;; Return value:  Size  Location     Type
 16503 ;;		None               void
 16504 ;; Registers used:
 16505 ;;		wreg, status,2, cstack
 16506 ;; Tracked objects:
 16507 ;;		On entry : 0/0
 16508 ;;		On exit  : 0/0
 16509 ;;		Unchanged: 0/0
 16510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16512 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16514 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16515 ;;Total ram usage:        1 bytes
 16516 ;; Hardware stack levels used:    1
 16517 ;; Hardware stack levels required when called:    4
 16518 ;; This function calls:
 16519 ;;		_spiwrite
 16520 ;; This function is called by:
 16521 ;;		_Rcmd1
 16522 ;;		_Rcmd2red
 16523 ;;		_Rcmd3
 16524 ;;		_setAddrWindow
 16525 ;;		_drawPixel
 16526 ;;		_TFT_GreenTab_Initialize
 16527 ;;		_Bcmd
 16528 ;;		_setScrollDefinition
 16529 ;;		_Rcmd2green
 16530 ;;		_VerticalScroll
 16531 ;; This function uses a non-reentrant model
 16532 ;;
 16533                           
 16534                           	psect	text90
 16535  003DD0                     __ptext90:
 16536                           	opt stack 0
 16537  003DD0                     _write_data:
 16538                           	opt stack 20
 16539                           
 16540                           ;incstack = 0
 16541                           ;write_data@data_ stored from wreg
 16542  003DD0  6E13               	movwf	write_data@data_,c
 16543                           
 16544                           ;ST7735_TFT.c: 211: PORTCbits.RC4 = 0;
 16545  003DD2  9882               	bcf	3970,4,c	;volatile
 16546                           
 16547                           ;ST7735_TFT.c: 212: PORTCbits.RC1 = 1;
 16548  003DD4  8282               	bsf	3970,1,c	;volatile
 16549                           
 16550                           ;ST7735_TFT.c: 213: spiwrite(data_);
 16551  003DD6  5013               	movf	write_data@data_,w,c
 16552  003DD8  EC74  F01E         	call	_spiwrite
 16553                           
 16554                           ;ST7735_TFT.c: 214: PORTCbits.RC4 = 1;
 16555  003DDC  8882               	bsf	3970,4,c	;volatile
 16556  003DDE  0012               	return		;funcret
 16557  003DE0                     __end_of_write_data:
 16558                           	opt stack 0
 16559                           tblptru	equ	0xFF8
 16560                           tblptrh	equ	0xFF7
 16561                           tblptrl	equ	0xFF6
 16562                           tablat	equ	0xFF5
 16563                           prodh	equ	0xFF4
 16564                           prodl	equ	0xFF3
 16565                           intcon	equ	0xFF2
 16566                           intcon2	equ	0xFF1
 16567                           postinc0	equ	0xFEE
 16568                           wreg	equ	0xFE8
 16569                           postdec1	equ	0xFE5
 16570                           plusw1	equ	0xFE3
 16571                           fsr1l	equ	0xFE1
 16572                           indf2	equ	0xFDF
 16573                           postinc2	equ	0xFDE
 16574                           postdec2	equ	0xFDD
 16575                           plusw2	equ	0xFDB
 16576                           fsr2h	equ	0xFDA
 16577                           fsr2l	equ	0xFD9
 16578                           status	equ	0xFD8
 16579                           
 16580 ;; *************** function _write_command *****************
 16581 ;; Defined at:
 16582 ;;		line 198 in file "ST7735_TFT.c"
 16583 ;; Parameters:    Size  Location     Type
 16584 ;;  cmd_            1    wreg     unsigned char 
 16585 ;; Auto vars:     Size  Location     Type
 16586 ;;  cmd_            1   18[COMRAM] unsigned char 
 16587 ;; Return value:  Size  Location     Type
 16588 ;;		None               void
 16589 ;; Registers used:
 16590 ;;		wreg, status,2, cstack
 16591 ;; Tracked objects:
 16592 ;;		On entry : 0/0
 16593 ;;		On exit  : 0/0
 16594 ;;		Unchanged: 0/0
 16595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16597 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16599 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16600 ;;Total ram usage:        1 bytes
 16601 ;; Hardware stack levels used:    1
 16602 ;; Hardware stack levels required when called:    4
 16603 ;; This function calls:
 16604 ;;		_spiwrite
 16605 ;; This function is called by:
 16606 ;;		_Rcmd1
 16607 ;;		_Rcmd2red
 16608 ;;		_Rcmd3
 16609 ;;		_setAddrWindow
 16610 ;;		_TFT_GreenTab_Initialize
 16611 ;;		_Bcmd
 16612 ;;		_setScrollDefinition
 16613 ;;		_Rcmd2green
 16614 ;;		_VerticalScroll
 16615 ;; This function uses a non-reentrant model
 16616 ;;
 16617                           
 16618                           	psect	text91
 16619  003DE0                     __ptext91:
 16620                           	opt stack 0
 16621  003DE0                     _write_command:
 16622                           	opt stack 20
 16623                           
 16624                           ;incstack = 0
 16625                           ;write_command@cmd_ stored from wreg
 16626  003DE0  6E13               	movwf	write_command@cmd_,c
 16627                           
 16628                           ;ST7735_TFT.c: 200: PORTCbits.RC4 = 0;
 16629  003DE2  9882               	bcf	3970,4,c	;volatile
 16630                           
 16631                           ;ST7735_TFT.c: 202: PORTCbits.RC1 = 0;
 16632  003DE4  9282               	bcf	3970,1,c	;volatile
 16633                           
 16634                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
 16635  003DE6  5013               	movf	write_command@cmd_,w,c
 16636  003DE8  EC74  F01E         	call	_spiwrite
 16637                           
 16638                           ;ST7735_TFT.c: 205: PORTCbits.RC4 = 1;
 16639  003DEC  8882               	bsf	3970,4,c	;volatile
 16640  003DEE  0012               	return		;funcret
 16641  003DF0                     __end_of_write_command:
 16642                           	opt stack 0
 16643                           tblptru	equ	0xFF8
 16644                           tblptrh	equ	0xFF7
 16645                           tblptrl	equ	0xFF6
 16646                           tablat	equ	0xFF5
 16647                           prodh	equ	0xFF4
 16648                           prodl	equ	0xFF3
 16649                           intcon	equ	0xFF2
 16650                           intcon2	equ	0xFF1
 16651                           postinc0	equ	0xFEE
 16652                           wreg	equ	0xFE8
 16653                           postdec1	equ	0xFE5
 16654                           plusw1	equ	0xFE3
 16655                           fsr1l	equ	0xFE1
 16656                           indf2	equ	0xFDF
 16657                           postinc2	equ	0xFDE
 16658                           postdec2	equ	0xFDD
 16659                           plusw2	equ	0xFDB
 16660                           fsr2h	equ	0xFDA
 16661                           fsr2l	equ	0xFD9
 16662                           status	equ	0xFD8
 16663                           
 16664 ;; *************** function _spiwrite *****************
 16665 ;; Defined at:
 16666 ;;		line 189 in file "ST7735_TFT.c"
 16667 ;; Parameters:    Size  Location     Type
 16668 ;;  spidata         1    wreg     unsigned char 
 16669 ;; Auto vars:     Size  Location     Type
 16670 ;;  spidata         1   17[COMRAM] unsigned char 
 16671 ;;  x               1   16[COMRAM] unsigned char 
 16672 ;; Return value:  Size  Location     Type
 16673 ;;		None               void
 16674 ;; Registers used:
 16675 ;;		wreg
 16676 ;; Tracked objects:
 16677 ;;		On entry : 0/0
 16678 ;;		On exit  : 0/0
 16679 ;;		Unchanged: 0/0
 16680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16682 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16684 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16685 ;;Total ram usage:        2 bytes
 16686 ;; Hardware stack levels used:    1
 16687 ;; Hardware stack levels required when called:    3
 16688 ;; This function calls:
 16689 ;;		Nothing
 16690 ;; This function is called by:
 16691 ;;		_write_command
 16692 ;;		_write_data
 16693 ;;		_drawFastVLine
 16694 ;;		_fillRectangle
 16695 ;;		_drawFastHLine
 16696 ;; This function uses a non-reentrant model
 16697 ;;
 16698                           
 16699                           	psect	text92
 16700  003CE8                     __ptext92:
 16701                           	opt stack 0
 16702  003CE8                     _spiwrite:
 16703                           	opt stack 22
 16704                           
 16705                           ;incstack = 0
 16706                           ;spiwrite@spidata stored from wreg
 16707  003CE8  6E12               	movwf	spiwrite@spidata,c
 16708                           
 16709                           ;ST7735_TFT.c: 191: char x;
 16710                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
 16711  003CEA  969E               	bcf	3998,3,c	;volatile
 16712                           
 16713                           ;ST7735_TFT.c: 193: x = SSPBUF;
 16714  003CEC  CFC9 F011          	movff	4041,spiwrite@x	;volatile
 16715                           
 16716                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
 16717  003CF0  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
 16718                           
 16719                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
 16720  003CF4  D000               	goto	l729
 16721  003CF6                     l729:
 16722  003CF6  A0C7               	btfss	4039,0,c	;volatile
 16723  003CF8  D7FE               	goto	l729
 16724  003CFA  0012               	return		;funcret
 16725  003CFC                     __end_of_spiwrite:
 16726                           	opt stack 0
 16727                           tblptru	equ	0xFF8
 16728                           tblptrh	equ	0xFF7
 16729                           tblptrl	equ	0xFF6
 16730                           tablat	equ	0xFF5
 16731                           prodh	equ	0xFF4
 16732                           prodl	equ	0xFF3
 16733                           intcon	equ	0xFF2
 16734                           intcon2	equ	0xFF1
 16735                           postinc0	equ	0xFEE
 16736                           wreg	equ	0xFE8
 16737                           postdec1	equ	0xFE5
 16738                           plusw1	equ	0xFE3
 16739                           fsr1l	equ	0xFE1
 16740                           indf2	equ	0xFDF
 16741                           postinc2	equ	0xFDE
 16742                           postdec2	equ	0xFDD
 16743                           plusw2	equ	0xFDB
 16744                           fsr2h	equ	0xFDA
 16745                           fsr2l	equ	0xFD9
 16746                           status	equ	0xFD8
 16747                           
 16748 ;; *************** function ___wmul *****************
 16749 ;; Defined at:
 16750 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
 16751 ;; Parameters:    Size  Location     Type
 16752 ;;  multiplier      2   16[COMRAM] unsigned int 
 16753 ;;  multiplicand    2   18[COMRAM] unsigned int 
 16754 ;; Auto vars:     Size  Location     Type
 16755 ;;  product         2   20[COMRAM] unsigned int 
 16756 ;; Return value:  Size  Location     Type
 16757 ;;                  2   16[COMRAM] unsigned int 
 16758 ;; Registers used:
 16759 ;;		wreg, status,2, status,0, prodl, prodh
 16760 ;; Tracked objects:
 16761 ;;		On entry : 0/0
 16762 ;;		On exit  : 0/0
 16763 ;;		Unchanged: 0/0
 16764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16765 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16766 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16768 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16769 ;;Total ram usage:        6 bytes
 16770 ;; Hardware stack levels used:    1
 16771 ;; Hardware stack levels required when called:    3
 16772 ;; This function calls:
 16773 ;;		Nothing
 16774 ;; This function is called by:
 16775 ;;		_get_RPM
 16776 ;;		_main
 16777 ;;		_delay_ms
 16778 ;;		_drawChar
 16779 ;;		_printf
 16780 ;; This function uses a non-reentrant model
 16781 ;;
 16782                           
 16783                           	psect	text93
 16784  003A3E                     __ptext93:
 16785                           	opt stack 0
 16786  003A3E                     ___wmul:
 16787                           	opt stack 26
 16788                           
 16789                           ;incstack = 0
 16790  003A3E  5011               	movf	___wmul@multiplier,w,c
 16791  003A40  0213               	mulwf	___wmul@multiplicand,c
 16792  003A42  CFF3 F015          	movff	prodl,___wmul@product
 16793  003A46  CFF4 F016          	movff	prodh,___wmul@product+1
 16794  003A4A  5011               	movf	___wmul@multiplier,w,c
 16795  003A4C  0214               	mulwf	___wmul@multiplicand+1,c
 16796  003A4E  50F3               	movf	prodl,w,c
 16797  003A50  2616               	addwf	___wmul@product+1,f,c
 16798  003A52  5012               	movf	___wmul@multiplier+1,w,c
 16799  003A54  0213               	mulwf	___wmul@multiplicand,c
 16800  003A56  50F3               	movf	prodl,w,c
 16801  003A58  2616               	addwf	___wmul@product+1,f,c
 16802  003A5A  C015  F011         	movff	___wmul@product,?___wmul
 16803  003A5E  C016  F012         	movff	___wmul@product+1,?___wmul+1
 16804  003A62  D000               	goto	l1515
 16805  003A64                     l1515:
 16806  003A64  0012               	return		;funcret
 16807  003A66                     __end_of___wmul:
 16808                           	opt stack 0
 16809                           tblptru	equ	0xFF8
 16810                           tblptrh	equ	0xFF7
 16811                           tblptrl	equ	0xFF6
 16812                           tablat	equ	0xFF5
 16813                           prodh	equ	0xFF4
 16814                           prodl	equ	0xFF3
 16815                           intcon	equ	0xFF2
 16816                           intcon2	equ	0xFF1
 16817                           postinc0	equ	0xFEE
 16818                           wreg	equ	0xFE8
 16819                           postdec1	equ	0xFE5
 16820                           plusw1	equ	0xFE3
 16821                           fsr1l	equ	0xFE1
 16822                           indf2	equ	0xFDF
 16823                           postinc2	equ	0xFDE
 16824                           postdec2	equ	0xFDD
 16825                           plusw2	equ	0xFDB
 16826                           fsr2h	equ	0xFDA
 16827                           fsr2l	equ	0xFD9
 16828                           status	equ	0xFD8
 16829                           
 16830 ;; *************** function ___awmod *****************
 16831 ;; Defined at:
 16832 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awmod.c"
 16833 ;; Parameters:    Size  Location     Type
 16834 ;;  dividend        2   58[COMRAM] int 
 16835 ;;  divisor         2   60[COMRAM] int 
 16836 ;; Auto vars:     Size  Location     Type
 16837 ;;  sign            1   63[COMRAM] unsigned char 
 16838 ;;  counter         1   62[COMRAM] unsigned char 
 16839 ;; Return value:  Size  Location     Type
 16840 ;;                  2   58[COMRAM] int 
 16841 ;; Registers used:
 16842 ;;		wreg, status,2, status,0
 16843 ;; Tracked objects:
 16844 ;;		On entry : 0/0
 16845 ;;		On exit  : 0/0
 16846 ;;		Unchanged: 0/0
 16847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16848 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16849 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16851 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16852 ;;Total ram usage:        6 bytes
 16853 ;; Hardware stack levels used:    1
 16854 ;; Hardware stack levels required when called:    3
 16855 ;; This function calls:
 16856 ;;		Nothing
 16857 ;; This function is called by:
 16858 ;;		_Update_Screen
 16859 ;;		_Update_Setup_Alarm_Time_Screen
 16860 ;;		_Update_Setup_Heater_Screen
 16861 ;;		_Update_Setup_Time_Screen
 16862 ;;		_dec_2_bcd
 16863 ;; This function uses a non-reentrant model
 16864 ;;
 16865                           
 16866                           	psect	text94
 16867  002EC6                     __ptext94:
 16868                           	opt stack 0
 16869  002EC6                     ___awmod:
 16870                           	opt stack 26
 16871                           
 16872                           ;incstack = 0
 16873  002EC6  0E00               	movlw	0
 16874  002EC8  6E40               	movwf	___awmod@sign,c
 16875  002ECA  AE3C               	btfss	___awmod@dividend+1,7,c
 16876  002ECC  D007               	goto	l8333
 16877  002ECE  6C3B               	negf	___awmod@dividend,c
 16878  002ED0  1E3C               	comf	___awmod@dividend+1,f,c
 16879  002ED2  B0D8               	btfsc	status,0,c
 16880  002ED4  2A3C               	incf	___awmod@dividend+1,f,c
 16881  002ED6  0E01               	movlw	1
 16882  002ED8  6E40               	movwf	___awmod@sign,c
 16883  002EDA  D000               	goto	l8333
 16884  002EDC                     l8333:
 16885  002EDC  AE3E               	btfss	___awmod@divisor+1,7,c
 16886  002EDE  D005               	goto	l8337
 16887  002EE0  6C3D               	negf	___awmod@divisor,c
 16888  002EE2  1E3E               	comf	___awmod@divisor+1,f,c
 16889  002EE4  B0D8               	btfsc	status,0,c
 16890  002EE6  2A3E               	incf	___awmod@divisor+1,f,c
 16891  002EE8  D000               	goto	l8337
 16892  002EEA                     l8337:
 16893  002EEA  503D               	movf	___awmod@divisor,w,c
 16894  002EEC  103E               	iorwf	___awmod@divisor+1,w,c
 16895  002EEE  B4D8               	btfsc	status,2,c
 16896  002EF0  D01D               	goto	l8353
 16897  002EF2  0E01               	movlw	1
 16898  002EF4  6E3F               	movwf	___awmod@counter,c
 16899  002EF6  D005               	goto	l8343
 16900  002EF8                     l8341:
 16901  002EF8  90D8               	bcf	status,0,c
 16902  002EFA  363D               	rlcf	___awmod@divisor,f,c
 16903  002EFC  363E               	rlcf	___awmod@divisor+1,f,c
 16904  002EFE  2A3F               	incf	___awmod@counter,f,c
 16905  002F00  D000               	goto	l8343
 16906  002F02                     l8343:
 16907  002F02  BE3E               	btfsc	___awmod@divisor+1,7,c
 16908  002F04  D002               	goto	l8345
 16909  002F06  D7F8               	goto	l8341
 16910  002F08  D000               	goto	l8345
 16911  002F0A                     l8345:
 16912  002F0A  503D               	movf	___awmod@divisor,w,c
 16913  002F0C  5C3B               	subwf	___awmod@dividend,w,c
 16914  002F0E  503E               	movf	___awmod@divisor+1,w,c
 16915  002F10  583C               	subwfb	___awmod@dividend+1,w,c
 16916  002F12  A0D8               	btfss	status,0,c
 16917  002F14  D005               	goto	l8349
 16918  002F16  503D               	movf	___awmod@divisor,w,c
 16919  002F18  5E3B               	subwf	___awmod@dividend,f,c
 16920  002F1A  503E               	movf	___awmod@divisor+1,w,c
 16921  002F1C  5A3C               	subwfb	___awmod@dividend+1,f,c
 16922  002F1E  D000               	goto	l8349
 16923  002F20                     l8349:
 16924  002F20  90D8               	bcf	status,0,c
 16925  002F22  323E               	rrcf	___awmod@divisor+1,f,c
 16926  002F24  323D               	rrcf	___awmod@divisor,f,c
 16927  002F26  2E3F               	decfsz	___awmod@counter,f,c
 16928  002F28  D7F0               	goto	l8345
 16929  002F2A  D000               	goto	l8353
 16930  002F2C                     l8353:
 16931  002F2C  5040               	movf	___awmod@sign,w,c
 16932  002F2E  B4D8               	btfsc	status,2,c
 16933  002F30  D005               	goto	l8357
 16934  002F32  6C3B               	negf	___awmod@dividend,c
 16935  002F34  1E3C               	comf	___awmod@dividend+1,f,c
 16936  002F36  B0D8               	btfsc	status,0,c
 16937  002F38  2A3C               	incf	___awmod@dividend+1,f,c
 16938  002F3A  D000               	goto	l8357
 16939  002F3C                     l8357:
 16940  002F3C  C03B  F03B         	movff	___awmod@dividend,?___awmod
 16941  002F40  C03C  F03C         	movff	___awmod@dividend+1,?___awmod+1
 16942  002F44  D000               	goto	l1721
 16943  002F46                     l1721:
 16944  002F46  0012               	return		;funcret
 16945  002F48                     __end_of___awmod:
 16946                           	opt stack 0
 16947                           tblptru	equ	0xFF8
 16948                           tblptrh	equ	0xFF7
 16949                           tblptrl	equ	0xFF6
 16950                           tablat	equ	0xFF5
 16951                           prodh	equ	0xFF4
 16952                           prodl	equ	0xFF3
 16953                           intcon	equ	0xFF2
 16954                           intcon2	equ	0xFF1
 16955                           postinc0	equ	0xFEE
 16956                           wreg	equ	0xFE8
 16957                           postdec1	equ	0xFE5
 16958                           plusw1	equ	0xFE3
 16959                           fsr1l	equ	0xFE1
 16960                           indf2	equ	0xFDF
 16961                           postinc2	equ	0xFDE
 16962                           postdec2	equ	0xFDD
 16963                           plusw2	equ	0xFDB
 16964                           fsr2h	equ	0xFDA
 16965                           fsr2l	equ	0xFD9
 16966                           status	equ	0xFD8
 16967                           
 16968 ;; *************** function ___awdiv *****************
 16969 ;; Defined at:
 16970 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awdiv.c"
 16971 ;; Parameters:    Size  Location     Type
 16972 ;;  dividend        2    0[BANK1 ] int 
 16973 ;;  divisor         2    2[BANK1 ] int 
 16974 ;; Auto vars:     Size  Location     Type
 16975 ;;  quotient        2    6[BANK1 ] int 
 16976 ;;  sign            1    5[BANK1 ] unsigned char 
 16977 ;;  counter         1    4[BANK1 ] unsigned char 
 16978 ;; Return value:  Size  Location     Type
 16979 ;;                  2    0[BANK1 ] int 
 16980 ;; Registers used:
 16981 ;;		wreg, status,2, status,0
 16982 ;; Tracked objects:
 16983 ;;		On entry : 0/0
 16984 ;;		On exit  : 0/0
 16985 ;;		Unchanged: 0/0
 16986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16987 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16988 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16990 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16991 ;;Total ram usage:        8 bytes
 16992 ;; Hardware stack levels used:    1
 16993 ;; Hardware stack levels required when called:    3
 16994 ;; This function calls:
 16995 ;;		Nothing
 16996 ;; This function is called by:
 16997 ;;		_get_RPM
 16998 ;;		_Set_DC_RGB
 16999 ;;		_Set_RPM_RGB
 17000 ;;		_main
 17001 ;;		_Update_Screen
 17002 ;;		_Update_Setup_Alarm_Time_Screen
 17003 ;;		_Update_Setup_Heater_Screen
 17004 ;;		_Update_Setup_Time_Screen
 17005 ;;		_dec_2_bcd
 17006 ;; This function uses a non-reentrant model
 17007 ;;
 17008                           
 17009                           	psect	text95
 17010  00259A                     __ptext95:
 17011                           	opt stack 0
 17012  00259A                     ___awdiv:
 17013                           	opt stack 26
 17014                           
 17015                           ;incstack = 0
 17016  00259A  0E00               	movlw	0
 17017  00259C  0101               	movlb	1	; () banked
 17018  00259E  6F58               	movwf	___awdiv@sign& (0+255),b
 17019                           
 17020                           ; BSR set to: 1
 17021  0025A0  0101               	movlb	1	; () banked
 17022  0025A2  AF56               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 17023  0025A4  D009               	goto	l8289
 17024                           
 17025                           ; BSR set to: 1
 17026  0025A6  0101               	movlb	1	; () banked
 17027  0025A8  6D55               	negf	___awdiv@divisor& (0+255),b
 17028  0025AA  1F56               	comf	(___awdiv@divisor+1)& (0+255),f,b
 17029  0025AC  B0D8               	btfsc	status,0,c
 17030  0025AE  2B56               	incf	(___awdiv@divisor+1)& (0+255),f,b
 17031                           
 17032                           ; BSR set to: 1
 17033  0025B0  0E01               	movlw	1
 17034  0025B2  0101               	movlb	1	; () banked
 17035  0025B4  6F58               	movwf	___awdiv@sign& (0+255),b
 17036  0025B6  D000               	goto	l8289
 17037  0025B8                     l8289:
 17038                           
 17039                           ; BSR set to: 1
 17040  0025B8  0101               	movlb	1	; () banked
 17041  0025BA  AF54               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 17042  0025BC  D009               	goto	l8295
 17043                           
 17044                           ; BSR set to: 1
 17045  0025BE  0101               	movlb	1	; () banked
 17046  0025C0  6D53               	negf	___awdiv@dividend& (0+255),b
 17047  0025C2  1F54               	comf	(___awdiv@dividend+1)& (0+255),f,b
 17048  0025C4  B0D8               	btfsc	status,0,c
 17049  0025C6  2B54               	incf	(___awdiv@dividend+1)& (0+255),f,b
 17050                           
 17051                           ; BSR set to: 1
 17052  0025C8  0E01               	movlw	1
 17053  0025CA  0101               	movlb	1	; () banked
 17054  0025CC  1B58               	xorwf	___awdiv@sign& (0+255),f,b
 17055  0025CE  D000               	goto	l8295
 17056  0025D0                     l8295:
 17057                           
 17058                           ; BSR set to: 1
 17059  0025D0  0E00               	movlw	0
 17060  0025D2  0101               	movlb	1	; () banked
 17061  0025D4  6F5A               	movwf	(___awdiv@quotient+1)& (0+255),b
 17062  0025D6  0E00               	movlw	0
 17063  0025D8  6F59               	movwf	___awdiv@quotient& (0+255),b
 17064                           
 17065                           ; BSR set to: 1
 17066  0025DA  0101               	movlb	1	; () banked
 17067  0025DC  5155               	movf	___awdiv@divisor& (0+255),w,b
 17068  0025DE  0101               	movlb	1	; () banked
 17069  0025E0  1156               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 17070  0025E2  B4D8               	btfsc	status,2,c
 17071  0025E4  D031               	goto	l8317
 17072                           
 17073                           ; BSR set to: 1
 17074  0025E6  0E01               	movlw	1
 17075  0025E8  0101               	movlb	1	; () banked
 17076  0025EA  6F57               	movwf	___awdiv@counter& (0+255),b
 17077  0025EC  D007               	goto	l8303
 17078  0025EE                     l8301:
 17079                           
 17080                           ; BSR set to: 1
 17081  0025EE  0101               	movlb	1	; () banked
 17082  0025F0  90D8               	bcf	status,0,c
 17083  0025F2  3755               	rlcf	___awdiv@divisor& (0+255),f,b
 17084  0025F4  3756               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 17085  0025F6  0101               	movlb	1	; () banked
 17086  0025F8  2B57               	incf	___awdiv@counter& (0+255),f,b
 17087  0025FA  D000               	goto	l8303
 17088  0025FC                     l8303:
 17089                           
 17090                           ; BSR set to: 1
 17091  0025FC  0101               	movlb	1	; () banked
 17092  0025FE  BF56               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
 17093  002600  D002               	goto	l8305
 17094  002602  D7F5               	goto	l8301
 17095                           
 17096                           ; BSR set to: 1
 17097  002604  D000               	goto	l8305
 17098  002606                     l8305:
 17099                           
 17100                           ; BSR set to: 1
 17101  002606  0101               	movlb	1	; () banked
 17102  002608  90D8               	bcf	status,0,c
 17103  00260A  3759               	rlcf	___awdiv@quotient& (0+255),f,b
 17104  00260C  375A               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 17105                           
 17106                           ; BSR set to: 1
 17107  00260E  0101               	movlb	1	; () banked
 17108  002610  5155               	movf	___awdiv@divisor& (0+255),w,b
 17109  002612  0101               	movlb	1	; () banked
 17110  002614  5D53               	subwf	___awdiv@dividend& (0+255),w,b
 17111  002616  0101               	movlb	1	; () banked
 17112  002618  5156               	movf	(___awdiv@divisor+1)& (0+255),w,b
 17113  00261A  0101               	movlb	1	; () banked
 17114  00261C  5954               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 17115  00261E  A0D8               	btfss	status,0,c
 17116  002620  D00B               	goto	l8313
 17117                           
 17118                           ; BSR set to: 1
 17119  002622  0101               	movlb	1	; () banked
 17120  002624  5155               	movf	___awdiv@divisor& (0+255),w,b
 17121  002626  0101               	movlb	1	; () banked
 17122  002628  5F53               	subwf	___awdiv@dividend& (0+255),f,b
 17123  00262A  0101               	movlb	1	; () banked
 17124  00262C  5156               	movf	(___awdiv@divisor+1)& (0+255),w,b
 17125  00262E  0101               	movlb	1	; () banked
 17126  002630  5B54               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 17127                           
 17128                           ; BSR set to: 1
 17129  002632  0101               	movlb	1	; () banked
 17130  002634  8159               	bsf	___awdiv@quotient& (0+255),0,b
 17131  002636  D000               	goto	l8313
 17132  002638                     l8313:
 17133                           
 17134                           ; BSR set to: 1
 17135  002638  0101               	movlb	1	; () banked
 17136  00263A  90D8               	bcf	status,0,c
 17137  00263C  3356               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 17138  00263E  3355               	rrcf	___awdiv@divisor& (0+255),f,b
 17139                           
 17140                           ; BSR set to: 1
 17141  002640  0101               	movlb	1	; () banked
 17142  002642  2F57               	decfsz	___awdiv@counter& (0+255),f,b
 17143  002644  D7E0               	goto	l8305
 17144                           
 17145                           ; BSR set to: 1
 17146  002646  D000               	goto	l8317
 17147  002648                     l8317:
 17148                           
 17149                           ; BSR set to: 1
 17150  002648  0101               	movlb	1	; () banked
 17151  00264A  5158               	movf	___awdiv@sign& (0+255),w,b
 17152  00264C  0101               	movlb	1	; () banked
 17153  00264E  B4D8               	btfsc	status,2,c
 17154  002650  D006               	goto	l8321
 17155                           
 17156                           ; BSR set to: 1
 17157  002652  0101               	movlb	1	; () banked
 17158  002654  6D59               	negf	___awdiv@quotient& (0+255),b
 17159  002656  1F5A               	comf	(___awdiv@quotient+1)& (0+255),f,b
 17160  002658  B0D8               	btfsc	status,0,c
 17161  00265A  2B5A               	incf	(___awdiv@quotient+1)& (0+255),f,b
 17162  00265C  D000               	goto	l8321
 17163  00265E                     l8321:
 17164                           
 17165                           ; BSR set to: 1
 17166  00265E  C159  F153         	movff	___awdiv@quotient,?___awdiv
 17167  002662  C15A  F154         	movff	___awdiv@quotient+1,?___awdiv+1
 17168  002666  D000               	goto	l1708
 17169  002668                     l1708:
 17170                           
 17171                           ; BSR set to: 1
 17172  002668  0012               	return		;funcret
 17173  00266A                     __end_of___awdiv:
 17174                           	opt stack 0
 17175                           tblptru	equ	0xFF8
 17176                           tblptrh	equ	0xFF7
 17177                           tblptrl	equ	0xFF6
 17178                           tablat	equ	0xFF5
 17179                           prodh	equ	0xFF4
 17180                           prodl	equ	0xFF3
 17181                           intcon	equ	0xFF2
 17182                           intcon2	equ	0xFF1
 17183                           postinc0	equ	0xFEE
 17184                           wreg	equ	0xFE8
 17185                           postdec1	equ	0xFE5
 17186                           plusw1	equ	0xFE3
 17187                           fsr1l	equ	0xFE1
 17188                           indf2	equ	0xFDF
 17189                           postinc2	equ	0xFDE
 17190                           postdec2	equ	0xFDD
 17191                           plusw2	equ	0xFDB
 17192                           fsr2h	equ	0xFDA
 17193                           fsr2l	equ	0xFD9
 17194                           status	equ	0xFD8
 17195                           
 17196 ;; *************** function _Do_Init *****************
 17197 ;; Defined at:
 17198 ;;		line 96 in file "Main.c"
 17199 ;; Parameters:    Size  Location     Type
 17200 ;;		None
 17201 ;; Auto vars:     Size  Location     Type
 17202 ;;		None
 17203 ;; Return value:  Size  Location     Type
 17204 ;;		None               void
 17205 ;; Registers used:
 17206 ;;		wreg, status,2, status,0, cstack
 17207 ;; Tracked objects:
 17208 ;;		On entry : 0/0
 17209 ;;		On exit  : 0/0
 17210 ;;		Unchanged: 0/0
 17211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17216 ;;Total ram usage:        0 bytes
 17217 ;; Hardware stack levels used:    1
 17218 ;; Hardware stack levels required when called:    7
 17219 ;; This function calls:
 17220 ;;		_DS1621_Init
 17221 ;;		_I2C_Init
 17222 ;;		_Init_ADC
 17223 ;;		_Init_Interrupt
 17224 ;;		_Turn_Off_Fan
 17225 ;;		_init_UART
 17226 ;; This function is called by:
 17227 ;;		_main
 17228 ;; This function uses a non-reentrant model
 17229 ;;
 17230                           
 17231                           	psect	text96
 17232  003382                     __ptext96:
 17233                           	opt stack 0
 17234  003382                     _Do_Init:
 17235                           	opt stack 23
 17236                           
 17237                           ;Main.c: 98: init_UART();
 17238                           
 17239                           ; BSR set to: 1
 17240                           ;incstack = 0
 17241  003382  EC7E  F01E         	call	_init_UART	;wreg free
 17242                           
 17243                           ;Main.c: 99: Init_ADC();
 17244  003386  ECFF  F01E         	call	_Init_ADC	;wreg free
 17245                           
 17246                           ;Main.c: 100: OSCCON=0x70;
 17247  00338A  0E70               	movlw	112
 17248  00338C  6ED3               	movwf	4051,c	;volatile
 17249                           
 17250                           ;Main.c: 102: ADCON1=0x0D;
 17251  00338E  0E0D               	movlw	13
 17252  003390  6EC1               	movwf	4033,c	;volatile
 17253                           
 17254                           ;Main.c: 103: TRISA = 0x03;
 17255  003392  0E03               	movlw	3
 17256  003394  6E92               	movwf	3986,c	;volatile
 17257                           
 17258                           ;Main.c: 104: TRISB = 0x27;
 17259  003396  0E27               	movlw	39
 17260  003398  6E93               	movwf	3987,c	;volatile
 17261                           
 17262                           ;Main.c: 105: TRISC = 0x01;
 17263  00339A  0E01               	movlw	1
 17264  00339C  6E94               	movwf	3988,c	;volatile
 17265                           
 17266                           ;Main.c: 106: TRISD = 0x00;
 17267  00339E  0E00               	movlw	0
 17268  0033A0  6E95               	movwf	3989,c	;volatile
 17269                           
 17270                           ;Main.c: 107: TRISE = 0x00;
 17271  0033A2  0E00               	movlw	0
 17272  0033A4  6E96               	movwf	3990,c	;volatile
 17273                           
 17274                           ;Main.c: 108: PORTE = 0x00;
 17275  0033A6  0E00               	movlw	0
 17276  0033A8  6E84               	movwf	3972,c	;volatile
 17277                           
 17278                           ;Main.c: 110: HEATER = 0;
 17279  0033AA  0E00               	movlw	0
 17280  0033AC  6E50               	movwf	_HEATER,c
 17281                           
 17282                           ;Main.c: 111: RBPU=0;
 17283  0033AE  9EF1               	bcf	intcon2,7,c	;volatile
 17284                           
 17285                           ;Main.c: 113: TMR3L = 0x00;
 17286  0033B0  0E00               	movlw	0
 17287  0033B2  6EB2               	movwf	4018,c	;volatile
 17288                           
 17289                           ;Main.c: 114: T3CON = 0x03;
 17290  0033B4  0E03               	movlw	3
 17291  0033B6  6EB1               	movwf	4017,c	;volatile
 17292                           
 17293                           ;Main.c: 115: I2C_Init(100000);
 17294  0033B8  0EA0               	movlw	160
 17295  0033BA  6E11               	movwf	I2C_Init@c,c
 17296  0033BC  0E86               	movlw	134
 17297  0033BE  6E12               	movwf	I2C_Init@c+1,c
 17298  0033C0  0E01               	movlw	1
 17299  0033C2  6E13               	movwf	I2C_Init@c+2,c
 17300  0033C4  0E00               	movlw	0
 17301  0033C6  6E14               	movwf	I2C_Init@c+3,c
 17302  0033C8  EC17  F01F         	call	_I2C_Init	;wreg free
 17303                           
 17304                           ;Main.c: 117: DS1621_Init();
 17305  0033CC  ECAF  F01D         	call	_DS1621_Init	;wreg free
 17306                           
 17307                           ;Main.c: 118: Init_Interrupt();
 17308  0033D0  EC6C  F01D         	call	_Init_Interrupt	;wreg free
 17309                           
 17310                           ;Main.c: 119: Turn_Off_Fan();
 17311  0033D4  EC12  F01F         	call	_Turn_Off_Fan	;wreg free
 17312                           
 17313                           ;Main.c: 120: heater_set_temp = 99;
 17314  0033D8  0E63               	movlw	99
 17315  0033DA  6E6F               	movwf	_heater_set_temp,c
 17316  0033DC  0012               	return		;funcret
 17317  0033DE                     __end_of_Do_Init:
 17318                           	opt stack 0
 17319                           tblptru	equ	0xFF8
 17320                           tblptrh	equ	0xFF7
 17321                           tblptrl	equ	0xFF6
 17322                           tablat	equ	0xFF5
 17323                           prodh	equ	0xFF4
 17324                           prodl	equ	0xFF3
 17325                           intcon	equ	0xFF2
 17326                           intcon2	equ	0xFF1
 17327                           postinc0	equ	0xFEE
 17328                           wreg	equ	0xFE8
 17329                           postdec1	equ	0xFE5
 17330                           plusw1	equ	0xFE3
 17331                           fsr1l	equ	0xFE1
 17332                           indf2	equ	0xFDF
 17333                           postinc2	equ	0xFDE
 17334                           postdec2	equ	0xFDD
 17335                           plusw2	equ	0xFDB
 17336                           fsr2h	equ	0xFDA
 17337                           fsr2l	equ	0xFD9
 17338                           status	equ	0xFD8
 17339                           
 17340 ;; *************** function _init_UART *****************
 17341 ;; Defined at:
 17342 ;;		line 88 in file "Main.c"
 17343 ;; Parameters:    Size  Location     Type
 17344 ;;		None
 17345 ;; Auto vars:     Size  Location     Type
 17346 ;;		None
 17347 ;; Return value:  Size  Location     Type
 17348 ;;		None               void
 17349 ;; Registers used:
 17350 ;;		wreg, status,2, cstack
 17351 ;; Tracked objects:
 17352 ;;		On entry : 0/0
 17353 ;;		On exit  : 0/0
 17354 ;;		Unchanged: 0/0
 17355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17360 ;;Total ram usage:        0 bytes
 17361 ;; Hardware stack levels used:    1
 17362 ;; Hardware stack levels required when called:    4
 17363 ;; This function calls:
 17364 ;;		_OpenUSART
 17365 ;; This function is called by:
 17366 ;;		_Do_Init
 17367 ;; This function uses a non-reentrant model
 17368 ;;
 17369                           
 17370                           	psect	text97
 17371  003CFC                     __ptext97:
 17372                           	opt stack 0
 17373  003CFC                     _init_UART:
 17374                           	opt stack 25
 17375                           
 17376                           ;Main.c: 90: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111111 &
      +                           0b11111111, 25);
 17377                           
 17378                           ;incstack = 0
 17379  003CFC  0E00               	movlw	0
 17380  003CFE  6E12               	movwf	OpenUSART@spbrg+1,c
 17381  003D00  0E19               	movlw	25
 17382  003D02  6E11               	movwf	OpenUSART@spbrg,c
 17383  003D04  0E3C               	movlw	60
 17384  003D06  EC94  F018         	call	_OpenUSART
 17385                           
 17386                           ;Main.c: 91: OSCCON = 0x70;
 17387  003D0A  0E70               	movlw	112
 17388  003D0C  6ED3               	movwf	4051,c	;volatile
 17389  003D0E  0012               	return		;funcret
 17390  003D10                     __end_of_init_UART:
 17391                           	opt stack 0
 17392                           tblptru	equ	0xFF8
 17393                           tblptrh	equ	0xFF7
 17394                           tblptrl	equ	0xFF6
 17395                           tablat	equ	0xFF5
 17396                           prodh	equ	0xFF4
 17397                           prodl	equ	0xFF3
 17398                           intcon	equ	0xFF2
 17399                           intcon2	equ	0xFF1
 17400                           postinc0	equ	0xFEE
 17401                           wreg	equ	0xFE8
 17402                           postdec1	equ	0xFE5
 17403                           plusw1	equ	0xFE3
 17404                           fsr1l	equ	0xFE1
 17405                           indf2	equ	0xFDF
 17406                           postinc2	equ	0xFDE
 17407                           postdec2	equ	0xFDD
 17408                           plusw2	equ	0xFDB
 17409                           fsr2h	equ	0xFDA
 17410                           fsr2l	equ	0xFD9
 17411                           status	equ	0xFD8
 17412                           
 17413 ;; *************** function _OpenUSART *****************
 17414 ;; Defined at:
 17415 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 17416 ;; Parameters:    Size  Location     Type
 17417 ;;  config          1    wreg     unsigned char 
 17418 ;;  spbrg           2   16[COMRAM] unsigned int 
 17419 ;; Auto vars:     Size  Location     Type
 17420 ;;  config          1   18[COMRAM] unsigned char 
 17421 ;; Return value:  Size  Location     Type
 17422 ;;		None               void
 17423 ;; Registers used:
 17424 ;;		wreg, status,2
 17425 ;; Tracked objects:
 17426 ;;		On entry : 0/0
 17427 ;;		On exit  : 0/0
 17428 ;;		Unchanged: 0/0
 17429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17430 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17431 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17433 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17434 ;;Total ram usage:        3 bytes
 17435 ;; Hardware stack levels used:    1
 17436 ;; Hardware stack levels required when called:    3
 17437 ;; This function calls:
 17438 ;;		Nothing
 17439 ;; This function is called by:
 17440 ;;		_init_UART
 17441 ;; This function uses a non-reentrant model
 17442 ;;
 17443                           
 17444                           	psect	text98
 17445  003128                     __ptext98:
 17446                           	opt stack 0
 17447  003128                     _OpenUSART:
 17448                           	opt stack 25
 17449                           
 17450                           ;incstack = 0
 17451                           ;OpenUSART@config stored from wreg
 17452  003128  6E13               	movwf	OpenUSART@config,c
 17453  00312A  0E00               	movlw	0
 17454  00312C  6EAC               	movwf	4012,c	;volatile
 17455  00312E  0E00               	movlw	0
 17456  003130  6EAB               	movwf	4011,c	;volatile
 17457  003132  A013               	btfss	OpenUSART@config,0,c
 17458  003134  D002               	goto	l6177
 17459  003136  88AC               	bsf	4012,4,c	;volatile
 17460  003138  D000               	goto	l6177
 17461  00313A                     l6177:
 17462  00313A  A213               	btfss	OpenUSART@config,1,c
 17463  00313C  D003               	goto	l6181
 17464  00313E  8CAC               	bsf	4012,6,c	;volatile
 17465  003140  8CAB               	bsf	4011,6,c	;volatile
 17466  003142  D000               	goto	l6181
 17467  003144                     l6181:
 17468  003144  A413               	btfss	OpenUSART@config,2,c
 17469  003146  D002               	goto	l6185
 17470  003148  8EAC               	bsf	4012,7,c	;volatile
 17471  00314A  D000               	goto	l6185
 17472  00314C                     l6185:
 17473  00314C  A613               	btfss	OpenUSART@config,3,c
 17474  00314E  D002               	goto	l1503
 17475  003150  88AB               	bsf	4011,4,c	;volatile
 17476  003152  D002               	goto	l6189
 17477  003154                     l1503:
 17478  003154  8AAB               	bsf	4011,5,c	;volatile
 17479  003156  D000               	goto	l6189
 17480  003158                     l6189:
 17481  003158  B813               	btfsc	OpenUSART@config,4,c
 17482  00315A  84AC               	bsf	4012,2,c	;volatile
 17483  00315C  989E               	bcf	3998,4,c	;volatile
 17484  00315E  AA13               	btfss	OpenUSART@config,5,c
 17485  003160  D002               	goto	l6197
 17486  003162  86AB               	bsf	4011,3,c	;volatile
 17487  003164  D000               	goto	l6197
 17488  003166                     l6197:
 17489  003166  AC13               	btfss	OpenUSART@config,6,c
 17490  003168  D002               	goto	l1507
 17491  00316A  8A9D               	bsf	3997,5,c	;volatile
 17492  00316C  D001               	goto	l1508
 17493  00316E                     l1507:
 17494  00316E  9A9D               	bcf	3997,5,c	;volatile
 17495  003170                     l1508:
 17496  003170  9A9E               	bcf	3998,5,c	;volatile
 17497  003172  AE13               	btfss	OpenUSART@config,7,c
 17498  003174  D002               	goto	l1509
 17499  003176  889D               	bsf	3997,4,c	;volatile
 17500  003178  D001               	goto	l1510
 17501  00317A                     l1509:
 17502  00317A  989D               	bcf	3997,4,c	;volatile
 17503  00317C                     l1510:
 17504  00317C  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 17505  003180  5012               	movf	OpenUSART@spbrg+1,w,c
 17506  003182  6EB0               	movwf	4016,c	;volatile
 17507  003184  8AAC               	bsf	4012,5,c	;volatile
 17508  003186  8EAB               	bsf	4011,7,c	;volatile
 17509  003188  9C94               	bcf	3988,6,c	;volatile
 17510  00318A  8E94               	bsf	3988,7,c	;volatile
 17511  00318C  B8AC               	btfsc	4012,4,c	;volatile
 17512  00318E  BEAC               	btfsc	4012,7,c	;volatile
 17513  003190  D002               	goto	l1512
 17514  003192  8C94               	bsf	3988,6,c	;volatile
 17515  003194  D000               	goto	l1512
 17516  003196                     l1512:
 17517  003196  0012               	return		;funcret
 17518  003198                     __end_of_OpenUSART:
 17519                           	opt stack 0
 17520                           tblptru	equ	0xFF8
 17521                           tblptrh	equ	0xFF7
 17522                           tblptrl	equ	0xFF6
 17523                           tablat	equ	0xFF5
 17524                           prodh	equ	0xFF4
 17525                           prodl	equ	0xFF3
 17526                           intcon	equ	0xFF2
 17527                           intcon2	equ	0xFF1
 17528                           postinc0	equ	0xFEE
 17529                           wreg	equ	0xFE8
 17530                           postdec1	equ	0xFE5
 17531                           plusw1	equ	0xFE3
 17532                           fsr1l	equ	0xFE1
 17533                           indf2	equ	0xFDF
 17534                           postinc2	equ	0xFDE
 17535                           postdec2	equ	0xFDD
 17536                           plusw2	equ	0xFDB
 17537                           fsr2h	equ	0xFDA
 17538                           fsr2l	equ	0xFD9
 17539                           status	equ	0xFD8
 17540                           
 17541 ;; *************** function _Turn_Off_Fan *****************
 17542 ;; Defined at:
 17543 ;;		line 50 in file "Fan_Support.c"
 17544 ;; Parameters:    Size  Location     Type
 17545 ;;		None
 17546 ;; Auto vars:     Size  Location     Type
 17547 ;;		None
 17548 ;; Return value:  Size  Location     Type
 17549 ;;		None               void
 17550 ;; Registers used:
 17551 ;;		wreg, status,2
 17552 ;; Tracked objects:
 17553 ;;		On entry : 0/0
 17554 ;;		On exit  : 0/0
 17555 ;;		Unchanged: 0/0
 17556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17561 ;;Total ram usage:        0 bytes
 17562 ;; Hardware stack levels used:    1
 17563 ;; Hardware stack levels required when called:    3
 17564 ;; This function calls:
 17565 ;;		Nothing
 17566 ;; This function is called by:
 17567 ;;		_Monitor_Heater
 17568 ;;		_Toggle_Heater
 17569 ;;		_Do_Init
 17570 ;; This function uses a non-reentrant model
 17571 ;;
 17572                           
 17573                           	psect	text99
 17574  003E24                     __ptext99:
 17575                           	opt stack 0
 17576  003E24                     _Turn_Off_Fan:
 17577                           	opt stack 26
 17578                           
 17579                           ;Fan_Support.c: 52: HEATER = 0;
 17580                           
 17581                           ;incstack = 0
 17582  003E24  0E00               	movlw	0
 17583  003E26  6E50               	movwf	_HEATER,c
 17584                           
 17585                           ;Fan_Support.c: 53: PORTDbits.RD7 = 0;
 17586  003E28  9E83               	bcf	3971,7,c	;volatile
 17587                           
 17588                           ;Fan_Support.c: 54: PORTEbits.RE0=0;
 17589  003E2A  9084               	bcf	3972,0,c	;volatile
 17590  003E2C  0012               	return		;funcret
 17591  003E2E                     __end_of_Turn_Off_Fan:
 17592                           	opt stack 0
 17593                           tblptru	equ	0xFF8
 17594                           tblptrh	equ	0xFF7
 17595                           tblptrl	equ	0xFF6
 17596                           tablat	equ	0xFF5
 17597                           prodh	equ	0xFF4
 17598                           prodl	equ	0xFF3
 17599                           intcon	equ	0xFF2
 17600                           intcon2	equ	0xFF1
 17601                           postinc0	equ	0xFEE
 17602                           wreg	equ	0xFE8
 17603                           postdec1	equ	0xFE5
 17604                           plusw1	equ	0xFE3
 17605                           fsr1l	equ	0xFE1
 17606                           indf2	equ	0xFDF
 17607                           postinc2	equ	0xFDE
 17608                           postdec2	equ	0xFDD
 17609                           plusw2	equ	0xFDB
 17610                           fsr2h	equ	0xFDA
 17611                           fsr2l	equ	0xFD9
 17612                           status	equ	0xFD8
 17613                           
 17614 ;; *************** function _Init_Interrupt *****************
 17615 ;; Defined at:
 17616 ;;		line 17 in file "Interrupt.c"
 17617 ;; Parameters:    Size  Location     Type
 17618 ;;		None
 17619 ;; Auto vars:     Size  Location     Type
 17620 ;;		None
 17621 ;; Return value:  Size  Location     Type
 17622 ;;		None               void
 17623 ;; Registers used:
 17624 ;;		wreg, status,2
 17625 ;; Tracked objects:
 17626 ;;		On entry : 0/0
 17627 ;;		On exit  : 0/0
 17628 ;;		Unchanged: 0/0
 17629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17634 ;;Total ram usage:        0 bytes
 17635 ;; Hardware stack levels used:    1
 17636 ;; Hardware stack levels required when called:    3
 17637 ;; This function calls:
 17638 ;;		Nothing
 17639 ;; This function is called by:
 17640 ;;		_Do_Init
 17641 ;; This function uses a non-reentrant model
 17642 ;;
 17643                           
 17644                           	psect	text100
 17645  003AD8                     __ptext100:
 17646                           	opt stack 0
 17647  003AD8                     _Init_Interrupt:
 17648                           	opt stack 26
 17649                           
 17650                           ;Interrupt.c: 20: INTCONbits.INT0IF = 0 ;
 17651                           
 17652                           ;incstack = 0
 17653  003AD8  92F2               	bcf	intcon,1,c	;volatile
 17654                           
 17655                           ;Interrupt.c: 21: INTCON3bits.INT1IF = 0;
 17656  003ADA  90F0               	bcf	intcon3,0,c	;volatile
 17657                           
 17658                           ;Interrupt.c: 22: INTCON3bits.INT2IF = 0;
 17659  003ADC  92F0               	bcf	intcon3,1,c	;volatile
 17660                           
 17661                           ;Interrupt.c: 23: INTCONbits.INT0IE = 1;
 17662  003ADE  88F2               	bsf	intcon,4,c	;volatile
 17663                           
 17664                           ;Interrupt.c: 24: INTCON3bits.INT1IE = 1;
 17665  003AE0  86F0               	bsf	intcon3,3,c	;volatile
 17666                           
 17667                           ;Interrupt.c: 25: INTCON3bits.INT2IE = 1;
 17668  003AE2  88F0               	bsf	intcon3,4,c	;volatile
 17669                           
 17670                           ;Interrupt.c: 26: INTCON2bits.INTEDG0 = 0;
 17671  003AE4  9CF1               	bcf	intcon2,6,c	;volatile
 17672                           
 17673                           ;Interrupt.c: 27: INTCON2bits.INTEDG1 = 0;
 17674  003AE6  9AF1               	bcf	intcon2,5,c	;volatile
 17675                           
 17676                           ;Interrupt.c: 28: INTCON2bits.INTEDG2 = 0;
 17677  003AE8  98F1               	bcf	intcon2,4,c	;volatile
 17678                           
 17679                           ;Interrupt.c: 29: TMR1H = 0;
 17680  003AEA  0E00               	movlw	0
 17681  003AEC  6ECF               	movwf	4047,c	;volatile
 17682                           
 17683                           ;Interrupt.c: 30: TMR1L = 0;
 17684  003AEE  0E00               	movlw	0
 17685  003AF0  6ECE               	movwf	4046,c	;volatile
 17686                           
 17687                           ;Interrupt.c: 31: PIR1bits.TMR1IF = 0;
 17688  003AF2  909E               	bcf	3998,0,c	;volatile
 17689                           
 17690                           ;Interrupt.c: 32: PIE1bits.TMR1IE = 1;
 17691  003AF4  809D               	bsf	3997,0,c	;volatile
 17692                           
 17693                           ;Interrupt.c: 33: INTCONbits.PEIE = 1;
 17694  003AF6  8CF2               	bsf	intcon,6,c	;volatile
 17695                           
 17696                           ;Interrupt.c: 34: INTCONbits.GIE = 1;
 17697  003AF8  8EF2               	bsf	intcon,7,c	;volatile
 17698  003AFA  0012               	return		;funcret
 17699  003AFC                     __end_of_Init_Interrupt:
 17700                           	opt stack 0
 17701                           tblptru	equ	0xFF8
 17702                           tblptrh	equ	0xFF7
 17703                           tblptrl	equ	0xFF6
 17704                           tablat	equ	0xFF5
 17705                           prodh	equ	0xFF4
 17706                           prodl	equ	0xFF3
 17707                           intcon	equ	0xFF2
 17708                           intcon2	equ	0xFF1
 17709                           intcon3	equ	0xFF0
 17710                           postinc0	equ	0xFEE
 17711                           wreg	equ	0xFE8
 17712                           postdec1	equ	0xFE5
 17713                           plusw1	equ	0xFE3
 17714                           fsr1l	equ	0xFE1
 17715                           indf2	equ	0xFDF
 17716                           postinc2	equ	0xFDE
 17717                           postdec2	equ	0xFDD
 17718                           plusw2	equ	0xFDB
 17719                           fsr2h	equ	0xFDA
 17720                           fsr2l	equ	0xFD9
 17721                           status	equ	0xFD8
 17722                           
 17723 ;; *************** function _Init_ADC *****************
 17724 ;; Defined at:
 17725 ;;		line 172 in file "utils.c"
 17726 ;; Parameters:    Size  Location     Type
 17727 ;;		None
 17728 ;; Auto vars:     Size  Location     Type
 17729 ;;		None
 17730 ;; Return value:  Size  Location     Type
 17731 ;;		None               void
 17732 ;; Registers used:
 17733 ;;		wreg, status,2
 17734 ;; Tracked objects:
 17735 ;;		On entry : 0/0
 17736 ;;		On exit  : 0/0
 17737 ;;		Unchanged: 0/0
 17738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17743 ;;Total ram usage:        0 bytes
 17744 ;; Hardware stack levels used:    1
 17745 ;; Hardware stack levels required when called:    3
 17746 ;; This function calls:
 17747 ;;		Nothing
 17748 ;; This function is called by:
 17749 ;;		_Do_Init
 17750 ;; This function uses a non-reentrant model
 17751 ;;
 17752                           
 17753                           	psect	text101
 17754  003DFE                     __ptext101:
 17755                           	opt stack 0
 17756  003DFE                     _Init_ADC:
 17757                           	opt stack 26
 17758                           
 17759                           ;utils.c: 173: ADCON0 = 0b00000111;
 17760                           
 17761                           ;incstack = 0
 17762  003DFE  0E07               	movlw	7
 17763  003E00  6EC2               	movwf	4034,c	;volatile
 17764                           
 17765                           ;utils.c: 174: ADCON1 = 0x0D;
 17766  003E02  0E0D               	movlw	13
 17767  003E04  6EC1               	movwf	4033,c	;volatile
 17768                           
 17769                           ;utils.c: 175: ADCON2 = 0xA9;
 17770  003E06  0EA9               	movlw	169
 17771  003E08  6EC0               	movwf	4032,c	;volatile
 17772  003E0A  0012               	return		;funcret
 17773  003E0C                     __end_of_Init_ADC:
 17774                           	opt stack 0
 17775                           tblptru	equ	0xFF8
 17776                           tblptrh	equ	0xFF7
 17777                           tblptrl	equ	0xFF6
 17778                           tablat	equ	0xFF5
 17779                           prodh	equ	0xFF4
 17780                           prodl	equ	0xFF3
 17781                           intcon	equ	0xFF2
 17782                           intcon2	equ	0xFF1
 17783                           intcon3	equ	0xFF0
 17784                           postinc0	equ	0xFEE
 17785                           wreg	equ	0xFE8
 17786                           postdec1	equ	0xFE5
 17787                           plusw1	equ	0xFE3
 17788                           fsr1l	equ	0xFE1
 17789                           indf2	equ	0xFDF
 17790                           postinc2	equ	0xFDE
 17791                           postdec2	equ	0xFDD
 17792                           plusw2	equ	0xFDB
 17793                           fsr2h	equ	0xFDA
 17794                           fsr2l	equ	0xFD9
 17795                           status	equ	0xFD8
 17796                           
 17797 ;; *************** function _I2C_Init *****************
 17798 ;; Defined at:
 17799 ;;		line 10 in file "I2C_Soft.c"
 17800 ;; Parameters:    Size  Location     Type
 17801 ;;  c               4   16[COMRAM] unsigned long 
 17802 ;; Auto vars:     Size  Location     Type
 17803 ;;		None
 17804 ;; Return value:  Size  Location     Type
 17805 ;;		None               void
 17806 ;; Registers used:
 17807 ;;		wreg, cstack
 17808 ;; Tracked objects:
 17809 ;;		On entry : 0/0
 17810 ;;		On exit  : 0/0
 17811 ;;		Unchanged: 0/0
 17812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17813 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17816 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17817 ;;Total ram usage:        4 bytes
 17818 ;; Hardware stack levels used:    1
 17819 ;; Hardware stack levels required when called:    4
 17820 ;; This function calls:
 17821 ;;		_i2cHighScl
 17822 ;;		_i2cHighSda
 17823 ;; This function is called by:
 17824 ;;		_Do_Init
 17825 ;; This function uses a non-reentrant model
 17826 ;;
 17827                           
 17828                           	psect	text102
 17829  003E2E                     __ptext102:
 17830                           	opt stack 0
 17831  003E2E                     _I2C_Init:
 17832                           	opt stack 25
 17833                           
 17834                           ;I2C_Soft.c: 12: i2cHighScl();
 17835                           
 17836                           ;incstack = 0
 17837  003E2E  EC06  F01F         	call	_i2cHighScl	;wreg free
 17838                           
 17839                           ;I2C_Soft.c: 13: i2cHighSda();
 17840  003E32  EC38  F01F         	call	_i2cHighSda	;wreg free
 17841  003E36  0012               	return		;funcret
 17842  003E38                     __end_of_I2C_Init:
 17843                           	opt stack 0
 17844                           tblptru	equ	0xFF8
 17845                           tblptrh	equ	0xFF7
 17846                           tblptrl	equ	0xFF6
 17847                           tablat	equ	0xFF5
 17848                           prodh	equ	0xFF4
 17849                           prodl	equ	0xFF3
 17850                           intcon	equ	0xFF2
 17851                           intcon2	equ	0xFF1
 17852                           intcon3	equ	0xFF0
 17853                           postinc0	equ	0xFEE
 17854                           wreg	equ	0xFE8
 17855                           postdec1	equ	0xFE5
 17856                           plusw1	equ	0xFE3
 17857                           fsr1l	equ	0xFE1
 17858                           indf2	equ	0xFDF
 17859                           postinc2	equ	0xFDE
 17860                           postdec2	equ	0xFDD
 17861                           plusw2	equ	0xFDB
 17862                           fsr2h	equ	0xFDA
 17863                           fsr2l	equ	0xFD9
 17864                           status	equ	0xFD8
 17865                           
 17866 ;; *************** function _DS1621_Init *****************
 17867 ;; Defined at:
 17868 ;;		line 22 in file "I2C_Support.c"
 17869 ;; Parameters:    Size  Location     Type
 17870 ;;		None
 17871 ;; Auto vars:     Size  Location     Type
 17872 ;;  Device          1   21[COMRAM] unsigned char 
 17873 ;; Return value:  Size  Location     Type
 17874 ;;		None               void
 17875 ;; Registers used:
 17876 ;;		wreg, status,2, status,0, cstack
 17877 ;; Tracked objects:
 17878 ;;		On entry : 0/0
 17879 ;;		On exit  : 0/0
 17880 ;;		Unchanged: 0/0
 17881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17883 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17885 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17886 ;;Total ram usage:        1 bytes
 17887 ;; Hardware stack levels used:    1
 17888 ;; Hardware stack levels required when called:    6
 17889 ;; This function calls:
 17890 ;;		_I2C_Write_Cmd_Only
 17891 ;;		_I2C_Write_Cmd_Write_Data
 17892 ;; This function is called by:
 17893 ;;		_Do_Init
 17894 ;; This function uses a non-reentrant model
 17895 ;;
 17896                           
 17897                           	psect	text103
 17898  003B5E                     __ptext103:
 17899                           	opt stack 0
 17900  003B5E                     _DS1621_Init:
 17901                           	opt stack 23
 17902                           
 17903                           ;I2C_Support.c: 24: char Device = 0x48;
 17904                           
 17905                           ;incstack = 0
 17906  003B5E  0E48               	movlw	72
 17907  003B60  6E16               	movwf	DS1621_Init@Device,c
 17908                           
 17909                           ;I2C_Support.c: 25: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
 17910  003B62  0EAC               	movlw	172
 17911  003B64  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
 17912  003B66  0E02               	movlw	2
 17913  003B68  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
 17914  003B6A  5016               	movf	DS1621_Init@Device,w,c
 17915  003B6C  EC9F  F01D         	call	_I2C_Write_Cmd_Write_Data
 17916                           
 17917                           ;I2C_Support.c: 26: I2C_Write_Cmd_Only(Device, 0xEE);
 17918  003B70  0EEE               	movlw	238
 17919  003B72  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
 17920  003B74  5016               	movf	DS1621_Init@Device,w,c
 17921  003B76  ECDA  F01D         	call	_I2C_Write_Cmd_Only
 17922  003B7A  0012               	return		;funcret
 17923  003B7C                     __end_of_DS1621_Init:
 17924                           	opt stack 0
 17925                           tblptru	equ	0xFF8
 17926                           tblptrh	equ	0xFF7
 17927                           tblptrl	equ	0xFF6
 17928                           tablat	equ	0xFF5
 17929                           prodh	equ	0xFF4
 17930                           prodl	equ	0xFF3
 17931                           intcon	equ	0xFF2
 17932                           intcon2	equ	0xFF1
 17933                           intcon3	equ	0xFF0
 17934                           postinc0	equ	0xFEE
 17935                           wreg	equ	0xFE8
 17936                           postdec1	equ	0xFE5
 17937                           plusw1	equ	0xFE3
 17938                           fsr1l	equ	0xFE1
 17939                           indf2	equ	0xFDF
 17940                           postinc2	equ	0xFDE
 17941                           postdec2	equ	0xFDD
 17942                           plusw2	equ	0xFDB
 17943                           fsr2h	equ	0xFDA
 17944                           fsr2l	equ	0xFD9
 17945                           status	equ	0xFD8
 17946                           
 17947 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
 17948 ;; Defined at:
 17949 ;;		line 148 in file "I2C_Soft.c"
 17950 ;; Parameters:    Size  Location     Type
 17951 ;;  Device          1    wreg     unsigned char 
 17952 ;;  Cmd             1   18[COMRAM] unsigned char 
 17953 ;;  Data_Out        1   19[COMRAM] unsigned char 
 17954 ;; Auto vars:     Size  Location     Type
 17955 ;;  Device          1   20[COMRAM] unsigned char 
 17956 ;; Return value:  Size  Location     Type
 17957 ;;		None               void
 17958 ;; Registers used:
 17959 ;;		wreg, status,2, status,0, cstack
 17960 ;; Tracked objects:
 17961 ;;		On entry : 0/0
 17962 ;;		On exit  : 0/0
 17963 ;;		Unchanged: 0/0
 17964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17965 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17966 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17968 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17969 ;;Total ram usage:        3 bytes
 17970 ;; Hardware stack levels used:    1
 17971 ;; Hardware stack levels required when called:    5
 17972 ;; This function calls:
 17973 ;;		_I2C_Start
 17974 ;;		_I2C_Stop
 17975 ;;		_I2C_Write
 17976 ;; This function is called by:
 17977 ;;		_DS1621_Init
 17978 ;; This function uses a non-reentrant model
 17979 ;;
 17980                           
 17981                           	psect	text104
 17982  003B3E                     __ptext104:
 17983                           	opt stack 0
 17984  003B3E                     _I2C_Write_Cmd_Write_Data:
 17985                           	opt stack 23
 17986                           
 17987                           ;incstack = 0
 17988                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
 17989  003B3E  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
 17990                           
 17991                           ;I2C_Soft.c: 150: I2C_Start();
 17992  003B40  ECBE  F01E         	call	_I2C_Start	;wreg free
 17993                           
 17994                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
 17995  003B44  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
 17996  003B46  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
 17997  003B48  EC6E  F01C         	call	_I2C_Write
 17998                           
 17999                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
 18000  003B4C  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
 18001  003B4E  EC6E  F01C         	call	_I2C_Write
 18002                           
 18003                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
 18004  003B52  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
 18005  003B54  EC6E  F01C         	call	_I2C_Write
 18006                           
 18007                           ;I2C_Soft.c: 154: I2C_Stop();
 18008  003B58  ECB5  F01E         	call	_I2C_Stop	;wreg free
 18009  003B5C  0012               	return		;funcret
 18010  003B5E                     __end_of_I2C_Write_Cmd_Write_Data:
 18011                           	opt stack 0
 18012                           tblptru	equ	0xFF8
 18013                           tblptrh	equ	0xFF7
 18014                           tblptrl	equ	0xFF6
 18015                           tablat	equ	0xFF5
 18016                           prodh	equ	0xFF4
 18017                           prodl	equ	0xFF3
 18018                           intcon	equ	0xFF2
 18019                           intcon2	equ	0xFF1
 18020                           intcon3	equ	0xFF0
 18021                           postinc0	equ	0xFEE
 18022                           wreg	equ	0xFE8
 18023                           postdec1	equ	0xFE5
 18024                           plusw1	equ	0xFE3
 18025                           fsr1l	equ	0xFE1
 18026                           indf2	equ	0xFDF
 18027                           postinc2	equ	0xFDE
 18028                           postdec2	equ	0xFDD
 18029                           plusw2	equ	0xFDB
 18030                           fsr2h	equ	0xFDA
 18031                           fsr2l	equ	0xFD9
 18032                           status	equ	0xFD8
 18033                           
 18034 ;; *************** function _I2C_Write_Cmd_Only *****************
 18035 ;; Defined at:
 18036 ;;		line 140 in file "I2C_Soft.c"
 18037 ;; Parameters:    Size  Location     Type
 18038 ;;  Device          1    wreg     unsigned char 
 18039 ;;  Cmd             1   18[COMRAM] unsigned char 
 18040 ;; Auto vars:     Size  Location     Type
 18041 ;;  Device          1   19[COMRAM] unsigned char 
 18042 ;; Return value:  Size  Location     Type
 18043 ;;		None               void
 18044 ;; Registers used:
 18045 ;;		wreg, status,2, status,0, cstack
 18046 ;; Tracked objects:
 18047 ;;		On entry : 0/0
 18048 ;;		On exit  : 0/0
 18049 ;;		Unchanged: 0/0
 18050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18051 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18052 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18054 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18055 ;;Total ram usage:        2 bytes
 18056 ;; Hardware stack levels used:    1
 18057 ;; Hardware stack levels required when called:    5
 18058 ;; This function calls:
 18059 ;;		_I2C_Start
 18060 ;;		_I2C_Stop
 18061 ;;		_I2C_Write
 18062 ;; This function is called by:
 18063 ;;		_DS1621_Init
 18064 ;; This function uses a non-reentrant model
 18065 ;;
 18066                           
 18067                           	psect	text105
 18068  003BB4                     __ptext105:
 18069                           	opt stack 0
 18070  003BB4                     _I2C_Write_Cmd_Only:
 18071                           	opt stack 23
 18072                           
 18073                           ;incstack = 0
 18074                           ;I2C_Write_Cmd_Only@Device stored from wreg
 18075  003BB4  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
 18076                           
 18077                           ;I2C_Soft.c: 142: I2C_Start();
 18078  003BB6  ECBE  F01E         	call	_I2C_Start	;wreg free
 18079                           
 18080                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
 18081  003BBA  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
 18082  003BBC  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
 18083  003BBE  EC6E  F01C         	call	_I2C_Write
 18084                           
 18085                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
 18086  003BC2  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
 18087  003BC4  EC6E  F01C         	call	_I2C_Write
 18088                           
 18089                           ;I2C_Soft.c: 145: I2C_Stop();
 18090  003BC8  ECB5  F01E         	call	_I2C_Stop	;wreg free
 18091  003BCC  0012               	return		;funcret
 18092  003BCE                     __end_of_I2C_Write_Cmd_Only:
 18093                           	opt stack 0
 18094                           tblptru	equ	0xFF8
 18095                           tblptrh	equ	0xFF7
 18096                           tblptrl	equ	0xFF6
 18097                           tablat	equ	0xFF5
 18098                           prodh	equ	0xFF4
 18099                           prodl	equ	0xFF3
 18100                           intcon	equ	0xFF2
 18101                           intcon2	equ	0xFF1
 18102                           intcon3	equ	0xFF0
 18103                           postinc0	equ	0xFEE
 18104                           wreg	equ	0xFE8
 18105                           postdec1	equ	0xFE5
 18106                           plusw1	equ	0xFE3
 18107                           fsr1l	equ	0xFE1
 18108                           indf2	equ	0xFDF
 18109                           postinc2	equ	0xFDE
 18110                           postdec2	equ	0xFDD
 18111                           plusw2	equ	0xFDB
 18112                           fsr2h	equ	0xFDA
 18113                           fsr2l	equ	0xFD9
 18114                           status	equ	0xFD8
 18115                           
 18116 ;; *************** function _DS1621_Read_Temp *****************
 18117 ;; Defined at:
 18118 ;;		line 29 in file "I2C_Support.c"
 18119 ;; Parameters:    Size  Location     Type
 18120 ;;		None
 18121 ;; Auto vars:     Size  Location     Type
 18122 ;;  Device          1   23[COMRAM] unsigned char 
 18123 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 18124 ;;  Cmd             1   21[COMRAM] unsigned char 
 18125 ;; Return value:  Size  Location     Type
 18126 ;;                  2   19[COMRAM] int 
 18127 ;; Registers used:
 18128 ;;		wreg, status,2, status,0, cstack
 18129 ;; Tracked objects:
 18130 ;;		On entry : 0/0
 18131 ;;		On exit  : 0/0
 18132 ;;		Unchanged: 0/0
 18133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18134 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18135 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18137 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18138 ;;Total ram usage:        5 bytes
 18139 ;; Hardware stack levels used:    1
 18140 ;; Hardware stack levels required when called:    6
 18141 ;; This function calls:
 18142 ;;		_I2C_ReStart
 18143 ;;		_I2C_Read
 18144 ;;		_I2C_Start
 18145 ;;		_I2C_Stop
 18146 ;;		_I2C_Write
 18147 ;; This function is called by:
 18148 ;;		_main
 18149 ;; This function uses a non-reentrant model
 18150 ;;
 18151                           
 18152                           	psect	text106
 18153  00391A                     __ptext106:
 18154                           	opt stack 0
 18155  00391A                     _DS1621_Read_Temp:
 18156                           	opt stack 24
 18157                           
 18158                           ;I2C_Support.c: 32: char Device = 0x48;
 18159                           
 18160                           ;incstack = 0
 18161  00391A  0E48               	movlw	72
 18162  00391C  6E18               	movwf	DS1621_Read_Temp@Device,c
 18163                           
 18164                           ;I2C_Support.c: 33: char Cmd = 0xAA;
 18165  00391E  0EAA               	movlw	170
 18166  003920  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 18167                           
 18168                           ;I2C_Support.c: 34: char Data_Ret;
 18169                           ;I2C_Support.c: 35: I2C_Start();
 18170  003922  ECBE  F01E         	call	_I2C_Start	;wreg free
 18171                           
 18172                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
 18173  003926  5018               	movf	DS1621_Read_Temp@Device,w,c
 18174  003928  2418               	addwf	DS1621_Read_Temp@Device,w,c
 18175  00392A  EC6E  F01C         	call	_I2C_Write
 18176                           
 18177                           ;I2C_Support.c: 37: I2C_Write(Cmd);
 18178  00392E  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 18179  003930  EC6E  F01C         	call	_I2C_Write
 18180                           
 18181                           ;I2C_Support.c: 38: I2C_ReStart();
 18182  003934  EC23  F01E         	call	_I2C_ReStart	;wreg free
 18183                           
 18184                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
 18185  003938  80D8               	bsf	status,0,c
 18186  00393A  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 18187  00393C  EC6E  F01C         	call	_I2C_Write
 18188                           
 18189                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
 18190  003940  0E00               	movlw	0
 18191  003942  ECCB  F01B         	call	_I2C_Read
 18192  003946  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 18193                           
 18194                           ;I2C_Support.c: 41: I2C_Stop();
 18195  003948  ECB5  F01E         	call	_I2C_Stop	;wreg free
 18196                           
 18197                           ;I2C_Support.c: 42: return Data_Ret;
 18198  00394C  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 18199  003950  6A15               	clrf	?_DS1621_Read_Temp+1,c
 18200  003952  D000               	goto	l231
 18201  003954                     l231:
 18202  003954  0012               	return		;funcret
 18203  003956                     __end_of_DS1621_Read_Temp:
 18204                           	opt stack 0
 18205                           tblptru	equ	0xFF8
 18206                           tblptrh	equ	0xFF7
 18207                           tblptrl	equ	0xFF6
 18208                           tablat	equ	0xFF5
 18209                           prodh	equ	0xFF4
 18210                           prodl	equ	0xFF3
 18211                           intcon	equ	0xFF2
 18212                           intcon2	equ	0xFF1
 18213                           intcon3	equ	0xFF0
 18214                           postinc0	equ	0xFEE
 18215                           wreg	equ	0xFE8
 18216                           postdec1	equ	0xFE5
 18217                           plusw1	equ	0xFE3
 18218                           fsr1l	equ	0xFE1
 18219                           indf2	equ	0xFDF
 18220                           postinc2	equ	0xFDE
 18221                           postdec2	equ	0xFDD
 18222                           plusw2	equ	0xFDB
 18223                           fsr2h	equ	0xFDA
 18224                           fsr2l	equ	0xFD9
 18225                           status	equ	0xFD8
 18226                           
 18227 ;; *************** function _I2C_Write *****************
 18228 ;; Defined at:
 18229 ;;		line 37 in file "I2C_Soft.c"
 18230 ;; Parameters:    Size  Location     Type
 18231 ;;  outByte         1    wreg     unsigned char 
 18232 ;; Auto vars:     Size  Location     Type
 18233 ;;  outByte         1   16[COMRAM] unsigned char 
 18234 ;;  n               1   17[COMRAM] unsigned char 
 18235 ;; Return value:  Size  Location     Type
 18236 ;;		None               void
 18237 ;; Registers used:
 18238 ;;		wreg, status,2, status,0, cstack
 18239 ;; Tracked objects:
 18240 ;;		On entry : 0/0
 18241 ;;		On exit  : 0/0
 18242 ;;		Unchanged: 0/0
 18243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18245 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18247 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18248 ;;Total ram usage:        2 bytes
 18249 ;; Hardware stack levels used:    1
 18250 ;; Hardware stack levels required when called:    4
 18251 ;; This function calls:
 18252 ;;		_i2cHighScl
 18253 ;;		_i2cHighSda
 18254 ;;		_i2cLowScl
 18255 ;;		_i2cLowSda
 18256 ;; This function is called by:
 18257 ;;		_I2C_Write_Address_Read_One_Byte
 18258 ;;		_I2C_Write_Address_Write_One_Byte
 18259 ;;		_I2C_Write_Cmd_Only
 18260 ;;		_I2C_Write_Cmd_Write_Data
 18261 ;;		_DS1621_Read_Temp
 18262 ;;		_DS3231_Read_Time
 18263 ;;		_DS3231_Write_Time
 18264 ;;		_DS3231_Read_Alarm_Time
 18265 ;;		_DS3231_Init
 18266 ;;		_DS3231_Write_Alarm_Time
 18267 ;;		_I2C_Write_Cmd_Read_One_Byte
 18268 ;;		_DS3231_Setup_Time
 18269 ;; This function uses a non-reentrant model
 18270 ;;
 18271                           
 18272                           	psect	text107
 18273  0038DC                     __ptext107:
 18274                           	opt stack 0
 18275  0038DC                     _I2C_Write:
 18276                           	opt stack 23
 18277                           
 18278                           ;incstack = 0
 18279                           ;I2C_Write@outByte stored from wreg
 18280  0038DC  6E11               	movwf	I2C_Write@outByte,c
 18281                           
 18282                           ;I2C_Soft.c: 39: unsigned char n;
 18283                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
 18284  0038DE  0E00               	movlw	0
 18285  0038E0  6E12               	movwf	I2C_Write@n,c
 18286  0038E2                     l8003:
 18287  0038E2  0E07               	movlw	7
 18288  0038E4  6412               	cpfsgt	I2C_Write@n,c
 18289  0038E6  D001               	goto	l119
 18290  0038E8  D011               	goto	l8021
 18291  0038EA                     l119:
 18292                           
 18293                           ;I2C_Soft.c: 41: {
 18294                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
 18295  0038EA  AE11               	btfss	I2C_Write@outByte,7,c
 18296  0038EC  D003               	goto	l8009
 18297  0038EE  EC38  F01F         	call	_i2cHighSda	;wreg free
 18298  0038F2  D003               	goto	l8011
 18299  0038F4                     l8009:
 18300                           
 18301                           ;I2C_Soft.c: 43: else i2cLowSda();
 18302  0038F4  EC21  F01F         	call	_i2cLowSda	;wreg free
 18303  0038F8  D000               	goto	l8011
 18304  0038FA                     l8011:
 18305                           
 18306                           ;I2C_Soft.c: 44: i2cHighScl();
 18307  0038FA  EC06  F01F         	call	_i2cHighScl	;wreg free
 18308                           
 18309                           ;I2C_Soft.c: 45: i2cLowScl();
 18310  0038FE  EC34  F01F         	call	_i2cLowScl	;wreg free
 18311                           
 18312                           ;I2C_Soft.c: 46: outByte = outByte << 1;
 18313  003902  5011               	movf	I2C_Write@outByte,w,c
 18314  003904  2411               	addwf	I2C_Write@outByte,w,c
 18315  003906  6E11               	movwf	I2C_Write@outByte,c
 18316  003908  2A12               	incf	I2C_Write@n,f,c
 18317  00390A  D7EB               	goto	l8003
 18318  00390C                     l8021:
 18319                           
 18320                           ;I2C_Soft.c: 47: }
 18321                           ;I2C_Soft.c: 48: i2cHighSda();
 18322  00390C  EC38  F01F         	call	_i2cHighSda	;wreg free
 18323                           
 18324                           ;I2C_Soft.c: 49: i2cHighScl();
 18325  003910  EC06  F01F         	call	_i2cHighScl	;wreg free
 18326                           
 18327                           ;I2C_Soft.c: 50: i2cLowScl();
 18328  003914  EC34  F01F         	call	_i2cLowScl	;wreg free
 18329  003918  0012               	return		;funcret
 18330  00391A                     __end_of_I2C_Write:
 18331                           	opt stack 0
 18332                           tblptru	equ	0xFF8
 18333                           tblptrh	equ	0xFF7
 18334                           tblptrl	equ	0xFF6
 18335                           tablat	equ	0xFF5
 18336                           prodh	equ	0xFF4
 18337                           prodl	equ	0xFF3
 18338                           intcon	equ	0xFF2
 18339                           intcon2	equ	0xFF1
 18340                           intcon3	equ	0xFF0
 18341                           postinc0	equ	0xFEE
 18342                           wreg	equ	0xFE8
 18343                           postdec1	equ	0xFE5
 18344                           plusw1	equ	0xFE3
 18345                           fsr1l	equ	0xFE1
 18346                           indf2	equ	0xFDF
 18347                           postinc2	equ	0xFDE
 18348                           postdec2	equ	0xFDD
 18349                           plusw2	equ	0xFDB
 18350                           fsr2h	equ	0xFDA
 18351                           fsr2l	equ	0xFD9
 18352                           status	equ	0xFD8
 18353                           
 18354 ;; *************** function _I2C_Stop *****************
 18355 ;; Defined at:
 18356 ;;		line 84 in file "I2C_Soft.c"
 18357 ;; Parameters:    Size  Location     Type
 18358 ;;		None
 18359 ;; Auto vars:     Size  Location     Type
 18360 ;;		None
 18361 ;; Return value:  Size  Location     Type
 18362 ;;		None               void
 18363 ;; Registers used:
 18364 ;;		wreg, cstack
 18365 ;; Tracked objects:
 18366 ;;		On entry : 0/0
 18367 ;;		On exit  : 0/0
 18368 ;;		Unchanged: 0/0
 18369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18374 ;;Total ram usage:        0 bytes
 18375 ;; Hardware stack levels used:    1
 18376 ;; Hardware stack levels required when called:    4
 18377 ;; This function calls:
 18378 ;;		_i2cHighScl
 18379 ;;		_i2cHighSda
 18380 ;;		_i2cLowScl
 18381 ;;		_i2cLowSda
 18382 ;; This function is called by:
 18383 ;;		_I2C_Write_Address_Read_One_Byte
 18384 ;;		_I2C_Write_Address_Write_One_Byte
 18385 ;;		_I2C_Write_Cmd_Only
 18386 ;;		_I2C_Write_Cmd_Write_Data
 18387 ;;		_DS1621_Read_Temp
 18388 ;;		_DS3231_Read_Time
 18389 ;;		_DS3231_Write_Time
 18390 ;;		_DS3231_Read_Alarm_Time
 18391 ;;		_DS3231_Init
 18392 ;;		_DS3231_Write_Alarm_Time
 18393 ;;		_I2C_Write_Cmd_Read_One_Byte
 18394 ;;		_DS3231_Setup_Time
 18395 ;; This function uses a non-reentrant model
 18396 ;;
 18397                           
 18398                           	psect	text108
 18399  003D6A                     __ptext108:
 18400                           	opt stack 0
 18401  003D6A                     _I2C_Stop:
 18402                           	opt stack 23
 18403                           
 18404                           ;I2C_Soft.c: 86: i2cLowScl();
 18405                           
 18406                           ;incstack = 0
 18407  003D6A  EC34  F01F         	call	_i2cLowScl	;wreg free
 18408                           
 18409                           ;I2C_Soft.c: 87: i2cLowSda();
 18410  003D6E  EC21  F01F         	call	_i2cLowSda	;wreg free
 18411                           
 18412                           ;I2C_Soft.c: 88: i2cHighScl();
 18413  003D72  EC06  F01F         	call	_i2cHighScl	;wreg free
 18414                           
 18415                           ;I2C_Soft.c: 89: i2cHighSda();
 18416  003D76  EC38  F01F         	call	_i2cHighSda	;wreg free
 18417  003D7A  0012               	return		;funcret
 18418  003D7C                     __end_of_I2C_Stop:
 18419                           	opt stack 0
 18420                           tblptru	equ	0xFF8
 18421                           tblptrh	equ	0xFF7
 18422                           tblptrl	equ	0xFF6
 18423                           tablat	equ	0xFF5
 18424                           prodh	equ	0xFF4
 18425                           prodl	equ	0xFF3
 18426                           intcon	equ	0xFF2
 18427                           intcon2	equ	0xFF1
 18428                           intcon3	equ	0xFF0
 18429                           postinc0	equ	0xFEE
 18430                           wreg	equ	0xFE8
 18431                           postdec1	equ	0xFE5
 18432                           plusw1	equ	0xFE3
 18433                           fsr1l	equ	0xFE1
 18434                           indf2	equ	0xFDF
 18435                           postinc2	equ	0xFDE
 18436                           postdec2	equ	0xFDD
 18437                           plusw2	equ	0xFDB
 18438                           fsr2h	equ	0xFDA
 18439                           fsr2l	equ	0xFD9
 18440                           status	equ	0xFD8
 18441                           
 18442 ;; *************** function _I2C_Start *****************
 18443 ;; Defined at:
 18444 ;;		line 67 in file "I2C_Soft.c"
 18445 ;; Parameters:    Size  Location     Type
 18446 ;;		None
 18447 ;; Auto vars:     Size  Location     Type
 18448 ;;		None
 18449 ;; Return value:  Size  Location     Type
 18450 ;;		None               void
 18451 ;; Registers used:
 18452 ;;		wreg, cstack
 18453 ;; Tracked objects:
 18454 ;;		On entry : 0/0
 18455 ;;		On exit  : 0/0
 18456 ;;		Unchanged: 0/0
 18457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18462 ;;Total ram usage:        0 bytes
 18463 ;; Hardware stack levels used:    1
 18464 ;; Hardware stack levels required when called:    4
 18465 ;; This function calls:
 18466 ;;		_i2cHighScl
 18467 ;;		_i2cHighSda
 18468 ;;		_i2cLowScl
 18469 ;;		_i2cLowSda
 18470 ;; This function is called by:
 18471 ;;		_I2C_Write_Address_Read_One_Byte
 18472 ;;		_I2C_Write_Address_Write_One_Byte
 18473 ;;		_I2C_Write_Cmd_Only
 18474 ;;		_I2C_Write_Cmd_Write_Data
 18475 ;;		_DS1621_Read_Temp
 18476 ;;		_DS3231_Read_Time
 18477 ;;		_DS3231_Write_Time
 18478 ;;		_DS3231_Read_Alarm_Time
 18479 ;;		_DS3231_Init
 18480 ;;		_DS3231_Write_Alarm_Time
 18481 ;;		_I2C_Write_Cmd_Read_One_Byte
 18482 ;;		_DS3231_Setup_Time
 18483 ;; This function uses a non-reentrant model
 18484 ;;
 18485                           
 18486                           	psect	text109
 18487  003D7C                     __ptext109:
 18488                           	opt stack 0
 18489  003D7C                     _I2C_Start:
 18490                           	opt stack 23
 18491                           
 18492                           ;I2C_Soft.c: 69: i2cHighSda();
 18493                           
 18494                           ;incstack = 0
 18495  003D7C  EC38  F01F         	call	_i2cHighSda	;wreg free
 18496                           
 18497                           ;I2C_Soft.c: 70: i2cHighScl();
 18498  003D80  EC06  F01F         	call	_i2cHighScl	;wreg free
 18499                           
 18500                           ;I2C_Soft.c: 71: i2cLowSda();
 18501  003D84  EC21  F01F         	call	_i2cLowSda	;wreg free
 18502                           
 18503                           ;I2C_Soft.c: 72: i2cLowScl();
 18504  003D88  EC34  F01F         	call	_i2cLowScl	;wreg free
 18505  003D8C  0012               	return		;funcret
 18506  003D8E                     __end_of_I2C_Start:
 18507                           	opt stack 0
 18508                           tblptru	equ	0xFF8
 18509                           tblptrh	equ	0xFF7
 18510                           tblptrl	equ	0xFF6
 18511                           tablat	equ	0xFF5
 18512                           prodh	equ	0xFF4
 18513                           prodl	equ	0xFF3
 18514                           intcon	equ	0xFF2
 18515                           intcon2	equ	0xFF1
 18516                           intcon3	equ	0xFF0
 18517                           postinc0	equ	0xFEE
 18518                           wreg	equ	0xFE8
 18519                           postdec1	equ	0xFE5
 18520                           plusw1	equ	0xFE3
 18521                           fsr1l	equ	0xFE1
 18522                           indf2	equ	0xFDF
 18523                           postinc2	equ	0xFDE
 18524                           postdec2	equ	0xFDD
 18525                           plusw2	equ	0xFDB
 18526                           fsr2h	equ	0xFDA
 18527                           fsr2l	equ	0xFD9
 18528                           status	equ	0xFD8
 18529                           
 18530 ;; *************** function _I2C_Read *****************
 18531 ;; Defined at:
 18532 ;;		line 16 in file "I2C_Soft.c"
 18533 ;; Parameters:    Size  Location     Type
 18534 ;;  ack             1    wreg     unsigned char 
 18535 ;; Auto vars:     Size  Location     Type
 18536 ;;  ack             1   16[COMRAM] unsigned char 
 18537 ;;  inByte          1   18[COMRAM] unsigned char 
 18538 ;;  n               1   17[COMRAM] unsigned char 
 18539 ;; Return value:  Size  Location     Type
 18540 ;;                  1    wreg      unsigned char 
 18541 ;; Registers used:
 18542 ;;		wreg, status,2, status,0, cstack
 18543 ;; Tracked objects:
 18544 ;;		On entry : 0/0
 18545 ;;		On exit  : 0/0
 18546 ;;		Unchanged: 0/0
 18547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18549 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18551 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18552 ;;Total ram usage:        3 bytes
 18553 ;; Hardware stack levels used:    1
 18554 ;; Hardware stack levels required when called:    5
 18555 ;; This function calls:
 18556 ;;		_i2cAck
 18557 ;;		_i2cHighScl
 18558 ;;		_i2cHighSda
 18559 ;;		_i2cLowScl
 18560 ;;		_i2cNack
 18561 ;; This function is called by:
 18562 ;;		_I2C_Write_Address_Read_One_Byte
 18563 ;;		_DS1621_Read_Temp
 18564 ;;		_DS3231_Read_Time
 18565 ;;		_DS3231_Read_Alarm_Time
 18566 ;;		_DS3231_Init
 18567 ;;		_I2C_Write_Cmd_Read_One_Byte
 18568 ;; This function uses a non-reentrant model
 18569 ;;
 18570                           
 18571                           	psect	text110
 18572  003796                     __ptext110:
 18573                           	opt stack 0
 18574  003796                     _I2C_Read:
 18575                           	opt stack 22
 18576                           
 18577                           ;incstack = 0
 18578                           ;I2C_Read@ack stored from wreg
 18579  003796  6E11               	movwf	I2C_Read@ack,c
 18580                           
 18581                           ;I2C_Soft.c: 18: unsigned char inByte, n;
 18582                           ;I2C_Soft.c: 19: i2cHighSda();
 18583  003798  EC38  F01F         	call	_i2cHighSda	;wreg free
 18584                           
 18585                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
 18586  00379C  0E00               	movlw	0
 18587  00379E  6E12               	movwf	I2C_Read@n,c
 18588  0037A0                     l7973:
 18589  0037A0  0E07               	movlw	7
 18590  0037A2  6412               	cpfsgt	I2C_Read@n,c
 18591  0037A4  D001               	goto	l7977
 18592  0037A6  D00F               	goto	l7991
 18593  0037A8                     l7977:
 18594                           
 18595                           ;I2C_Soft.c: 21: {
 18596                           ;I2C_Soft.c: 22: i2cHighScl();
 18597  0037A8  EC06  F01F         	call	_i2cHighScl	;wreg free
 18598                           
 18599                           ;I2C_Soft.c: 24: if (PORTAbits.RA5)
 18600  0037AC  AA80               	btfss	3968,5,c	;volatile
 18601  0037AE  D003               	goto	l7983
 18602                           
 18603                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
 18604  0037B0  80D8               	bsf	status,0,c
 18605  0037B2  3613               	rlcf	I2C_Read@inByte,f,c
 18606  0037B4  D004               	goto	l7985
 18607  0037B6                     l7983:
 18608                           
 18609                           ;I2C_Soft.c: 26: else
 18610                           ;I2C_Soft.c: 27: inByte = inByte << 1;
 18611  0037B6  5013               	movf	I2C_Read@inByte,w,c
 18612  0037B8  2413               	addwf	I2C_Read@inByte,w,c
 18613  0037BA  6E13               	movwf	I2C_Read@inByte,c
 18614  0037BC  D000               	goto	l7985
 18615  0037BE                     l7985:
 18616                           
 18617                           ;I2C_Soft.c: 28: i2cLowScl();
 18618  0037BE  EC34  F01F         	call	_i2cLowScl	;wreg free
 18619  0037C2  2A12               	incf	I2C_Read@n,f,c
 18620  0037C4  D7ED               	goto	l7973
 18621  0037C6                     l7991:
 18622                           
 18623                           ;I2C_Soft.c: 29: }
 18624                           ;I2C_Soft.c: 30: if (ack) i2cAck();
 18625  0037C6  5011               	movf	I2C_Read@ack,w,c
 18626  0037C8  B4D8               	btfsc	status,2,c
 18627  0037CA  D003               	goto	l7995
 18628  0037CC  ECC7  F01E         	call	_i2cAck	;wreg free
 18629  0037D0  D003               	goto	l7997
 18630  0037D2                     l7995:
 18631                           
 18632                           ;I2C_Soft.c: 31: else i2cNack();
 18633  0037D2  EC1C  F01F         	call	_i2cNack	;wreg free
 18634  0037D6  D000               	goto	l7997
 18635  0037D8                     l7997:
 18636                           
 18637                           ;I2C_Soft.c: 34: return(inByte);
 18638  0037D8  5013               	movf	I2C_Read@inByte,w,c
 18639  0037DA  D000               	goto	l116
 18640  0037DC                     l116:
 18641  0037DC  0012               	return		;funcret
 18642  0037DE                     __end_of_I2C_Read:
 18643                           	opt stack 0
 18644                           tblptru	equ	0xFF8
 18645                           tblptrh	equ	0xFF7
 18646                           tblptrl	equ	0xFF6
 18647                           tablat	equ	0xFF5
 18648                           prodh	equ	0xFF4
 18649                           prodl	equ	0xFF3
 18650                           intcon	equ	0xFF2
 18651                           intcon2	equ	0xFF1
 18652                           intcon3	equ	0xFF0
 18653                           postinc0	equ	0xFEE
 18654                           wreg	equ	0xFE8
 18655                           postdec1	equ	0xFE5
 18656                           plusw1	equ	0xFE3
 18657                           fsr1l	equ	0xFE1
 18658                           indf2	equ	0xFDF
 18659                           postinc2	equ	0xFDE
 18660                           postdec2	equ	0xFDD
 18661                           plusw2	equ	0xFDB
 18662                           fsr2h	equ	0xFDA
 18663                           fsr2l	equ	0xFD9
 18664                           status	equ	0xFD8
 18665                           
 18666 ;; *************** function _i2cNack *****************
 18667 ;; Defined at:
 18668 ;;		line 53 in file "I2C_Soft.c"
 18669 ;; Parameters:    Size  Location     Type
 18670 ;;		None
 18671 ;; Auto vars:     Size  Location     Type
 18672 ;;		None
 18673 ;; Return value:  Size  Location     Type
 18674 ;;		None               void
 18675 ;; Registers used:
 18676 ;;		wreg, cstack
 18677 ;; Tracked objects:
 18678 ;;		On entry : 0/0
 18679 ;;		On exit  : 0/0
 18680 ;;		Unchanged: 0/0
 18681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18686 ;;Total ram usage:        0 bytes
 18687 ;; Hardware stack levels used:    1
 18688 ;; Hardware stack levels required when called:    4
 18689 ;; This function calls:
 18690 ;;		_i2cHighScl
 18691 ;;		_i2cLowScl
 18692 ;; This function is called by:
 18693 ;;		_I2C_Read
 18694 ;; This function uses a non-reentrant model
 18695 ;;
 18696                           
 18697                           	psect	text111
 18698  003E38                     __ptext111:
 18699                           	opt stack 0
 18700  003E38                     _i2cNack:
 18701                           	opt stack 22
 18702                           
 18703                           ;I2C_Soft.c: 55: i2cHighScl();
 18704                           
 18705                           ;incstack = 0
 18706  003E38  EC06  F01F         	call	_i2cHighScl	;wreg free
 18707                           
 18708                           ;I2C_Soft.c: 56: i2cLowScl();
 18709  003E3C  EC34  F01F         	call	_i2cLowScl	;wreg free
 18710  003E40  0012               	return		;funcret
 18711  003E42                     __end_of_i2cNack:
 18712                           	opt stack 0
 18713                           tblptru	equ	0xFF8
 18714                           tblptrh	equ	0xFF7
 18715                           tblptrl	equ	0xFF6
 18716                           tablat	equ	0xFF5
 18717                           prodh	equ	0xFF4
 18718                           prodl	equ	0xFF3
 18719                           intcon	equ	0xFF2
 18720                           intcon2	equ	0xFF1
 18721                           intcon3	equ	0xFF0
 18722                           postinc0	equ	0xFEE
 18723                           wreg	equ	0xFE8
 18724                           postdec1	equ	0xFE5
 18725                           plusw1	equ	0xFE3
 18726                           fsr1l	equ	0xFE1
 18727                           indf2	equ	0xFDF
 18728                           postinc2	equ	0xFDE
 18729                           postdec2	equ	0xFDD
 18730                           plusw2	equ	0xFDB
 18731                           fsr2h	equ	0xFDA
 18732                           fsr2l	equ	0xFD9
 18733                           status	equ	0xFD8
 18734                           
 18735 ;; *************** function _i2cAck *****************
 18736 ;; Defined at:
 18737 ;;		line 59 in file "I2C_Soft.c"
 18738 ;; Parameters:    Size  Location     Type
 18739 ;;		None
 18740 ;; Auto vars:     Size  Location     Type
 18741 ;;		None
 18742 ;; Return value:  Size  Location     Type
 18743 ;;		None               void
 18744 ;; Registers used:
 18745 ;;		wreg, cstack
 18746 ;; Tracked objects:
 18747 ;;		On entry : 0/0
 18748 ;;		On exit  : 0/0
 18749 ;;		Unchanged: 0/0
 18750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18755 ;;Total ram usage:        0 bytes
 18756 ;; Hardware stack levels used:    1
 18757 ;; Hardware stack levels required when called:    4
 18758 ;; This function calls:
 18759 ;;		_i2cHighScl
 18760 ;;		_i2cHighSda
 18761 ;;		_i2cLowScl
 18762 ;;		_i2cLowSda
 18763 ;; This function is called by:
 18764 ;;		_I2C_Read
 18765 ;; This function uses a non-reentrant model
 18766 ;;
 18767                           
 18768                           	psect	text112
 18769  003D8E                     __ptext112:
 18770                           	opt stack 0
 18771  003D8E                     _i2cAck:
 18772                           	opt stack 22
 18773                           
 18774                           ;I2C_Soft.c: 61: i2cLowSda();
 18775                           
 18776                           ;incstack = 0
 18777  003D8E  EC21  F01F         	call	_i2cLowSda	;wreg free
 18778                           
 18779                           ;I2C_Soft.c: 62: i2cHighScl();
 18780  003D92  EC06  F01F         	call	_i2cHighScl	;wreg free
 18781                           
 18782                           ;I2C_Soft.c: 63: i2cLowScl();
 18783  003D96  EC34  F01F         	call	_i2cLowScl	;wreg free
 18784                           
 18785                           ;I2C_Soft.c: 64: i2cHighSda();
 18786  003D9A  EC38  F01F         	call	_i2cHighSda	;wreg free
 18787  003D9E  0012               	return		;funcret
 18788  003DA0                     __end_of_i2cAck:
 18789                           	opt stack 0
 18790                           tblptru	equ	0xFF8
 18791                           tblptrh	equ	0xFF7
 18792                           tblptrl	equ	0xFF6
 18793                           tablat	equ	0xFF5
 18794                           prodh	equ	0xFF4
 18795                           prodl	equ	0xFF3
 18796                           intcon	equ	0xFF2
 18797                           intcon2	equ	0xFF1
 18798                           intcon3	equ	0xFF0
 18799                           postinc0	equ	0xFEE
 18800                           wreg	equ	0xFE8
 18801                           postdec1	equ	0xFE5
 18802                           plusw1	equ	0xFE3
 18803                           fsr1l	equ	0xFE1
 18804                           indf2	equ	0xFDF
 18805                           postinc2	equ	0xFDE
 18806                           postdec2	equ	0xFDD
 18807                           plusw2	equ	0xFDB
 18808                           fsr2h	equ	0xFDA
 18809                           fsr2l	equ	0xFD9
 18810                           status	equ	0xFD8
 18811                           
 18812 ;; *************** function _I2C_ReStart *****************
 18813 ;; Defined at:
 18814 ;;		line 75 in file "I2C_Soft.c"
 18815 ;; Parameters:    Size  Location     Type
 18816 ;;		None
 18817 ;; Auto vars:     Size  Location     Type
 18818 ;;		None
 18819 ;; Return value:  Size  Location     Type
 18820 ;;		None               void
 18821 ;; Registers used:
 18822 ;;		wreg, cstack
 18823 ;; Tracked objects:
 18824 ;;		On entry : 0/0
 18825 ;;		On exit  : 0/0
 18826 ;;		Unchanged: 0/0
 18827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18832 ;;Total ram usage:        0 bytes
 18833 ;; Hardware stack levels used:    1
 18834 ;; Hardware stack levels required when called:    4
 18835 ;; This function calls:
 18836 ;;		_i2cHighScl
 18837 ;;		_i2cHighSda
 18838 ;;		_i2cLowScl
 18839 ;;		_i2cLowSda
 18840 ;; This function is called by:
 18841 ;;		_I2C_Write_Address_Read_One_Byte
 18842 ;;		_DS1621_Read_Temp
 18843 ;;		_DS3231_Read_Time
 18844 ;;		_DS3231_Read_Alarm_Time
 18845 ;;		_DS3231_Init
 18846 ;;		_I2C_Write_Cmd_Read_One_Byte
 18847 ;; This function uses a non-reentrant model
 18848 ;;
 18849                           
 18850                           	psect	text113
 18851  003C46                     __ptext113:
 18852                           	opt stack 0
 18853  003C46                     _I2C_ReStart:
 18854                           	opt stack 23
 18855                           
 18856                           ;I2C_Soft.c: 77: i2cLowScl();
 18857                           
 18858                           ;incstack = 0
 18859  003C46  EC34  F01F         	call	_i2cLowScl	;wreg free
 18860                           
 18861                           ;I2C_Soft.c: 78: i2cHighSda();
 18862  003C4A  EC38  F01F         	call	_i2cHighSda	;wreg free
 18863                           
 18864                           ;I2C_Soft.c: 79: i2cHighScl();
 18865  003C4E  EC06  F01F         	call	_i2cHighScl	;wreg free
 18866                           
 18867                           ;I2C_Soft.c: 80: i2cLowSda();
 18868  003C52  EC21  F01F         	call	_i2cLowSda	;wreg free
 18869                           
 18870                           ;I2C_Soft.c: 81: i2cLowScl();
 18871  003C56  EC34  F01F         	call	_i2cLowScl	;wreg free
 18872  003C5A  0012               	return		;funcret
 18873  003C5C                     __end_of_I2C_ReStart:
 18874                           	opt stack 0
 18875                           tblptru	equ	0xFF8
 18876                           tblptrh	equ	0xFF7
 18877                           tblptrl	equ	0xFF6
 18878                           tablat	equ	0xFF5
 18879                           prodh	equ	0xFF4
 18880                           prodl	equ	0xFF3
 18881                           intcon	equ	0xFF2
 18882                           intcon2	equ	0xFF1
 18883                           intcon3	equ	0xFF0
 18884                           postinc0	equ	0xFEE
 18885                           wreg	equ	0xFE8
 18886                           postdec1	equ	0xFE5
 18887                           plusw1	equ	0xFE3
 18888                           fsr1l	equ	0xFE1
 18889                           indf2	equ	0xFDF
 18890                           postinc2	equ	0xFDE
 18891                           postdec2	equ	0xFDD
 18892                           plusw2	equ	0xFDB
 18893                           fsr2h	equ	0xFDA
 18894                           fsr2l	equ	0xFD9
 18895                           status	equ	0xFD8
 18896                           
 18897 ;; *************** function _i2cLowSda *****************
 18898 ;; Defined at:
 18899 ;;		line 98 in file "I2C_Soft.c"
 18900 ;; Parameters:    Size  Location     Type
 18901 ;;		None
 18902 ;; Auto vars:     Size  Location     Type
 18903 ;;		None
 18904 ;; Return value:  Size  Location     Type
 18905 ;;		None               void
 18906 ;; Registers used:
 18907 ;;		None
 18908 ;; Tracked objects:
 18909 ;;		On entry : 0/0
 18910 ;;		On exit  : 0/0
 18911 ;;		Unchanged: 0/0
 18912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18917 ;;Total ram usage:        0 bytes
 18918 ;; Hardware stack levels used:    1
 18919 ;; Hardware stack levels required when called:    3
 18920 ;; This function calls:
 18921 ;;		Nothing
 18922 ;; This function is called by:
 18923 ;;		_I2C_Write
 18924 ;;		_i2cAck
 18925 ;;		_I2C_Start
 18926 ;;		_I2C_ReStart
 18927 ;;		_I2C_Stop
 18928 ;; This function uses a non-reentrant model
 18929 ;;
 18930                           
 18931                           	psect	text114
 18932  003E42                     __ptext114:
 18933                           	opt stack 0
 18934  003E42                     _i2cLowSda:
 18935                           	opt stack 23
 18936                           
 18937                           ;I2C_Soft.c: 100: PORTAbits.RA5 = 0;
 18938                           
 18939                           ;incstack = 0
 18940  003E42  9A80               	bcf	3968,5,c	;volatile
 18941                           
 18942                           ;I2C_Soft.c: 101: TRISAbits.RA5 = 0;
 18943  003E44  9A92               	bcf	3986,5,c	;volatile
 18944                           
 18945                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
 18946  003E46  D000               	nop2		;2 cycle nop
 18947  003E48  D000               	nop2		;2 cycle nop
 18948  003E4A  0012               	return		;funcret
 18949  003E4C                     __end_of_i2cLowSda:
 18950                           	opt stack 0
 18951                           tblptru	equ	0xFF8
 18952                           tblptrh	equ	0xFF7
 18953                           tblptrl	equ	0xFF6
 18954                           tablat	equ	0xFF5
 18955                           prodh	equ	0xFF4
 18956                           prodl	equ	0xFF3
 18957                           intcon	equ	0xFF2
 18958                           intcon2	equ	0xFF1
 18959                           intcon3	equ	0xFF0
 18960                           postinc0	equ	0xFEE
 18961                           wreg	equ	0xFE8
 18962                           postdec1	equ	0xFE5
 18963                           plusw1	equ	0xFE3
 18964                           fsr1l	equ	0xFE1
 18965                           indf2	equ	0xFDF
 18966                           postinc2	equ	0xFDE
 18967                           postdec2	equ	0xFDD
 18968                           plusw2	equ	0xFDB
 18969                           fsr2h	equ	0xFDA
 18970                           fsr2l	equ	0xFD9
 18971                           status	equ	0xFD8
 18972                           
 18973 ;; *************** function _i2cLowScl *****************
 18974 ;; Defined at:
 18975 ;;		line 111 in file "I2C_Soft.c"
 18976 ;; Parameters:    Size  Location     Type
 18977 ;;		None
 18978 ;; Auto vars:     Size  Location     Type
 18979 ;;		None
 18980 ;; Return value:  Size  Location     Type
 18981 ;;		None               void
 18982 ;; Registers used:
 18983 ;;		None
 18984 ;; Tracked objects:
 18985 ;;		On entry : 0/0
 18986 ;;		On exit  : 0/0
 18987 ;;		Unchanged: 0/0
 18988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18993 ;;Total ram usage:        0 bytes
 18994 ;; Hardware stack levels used:    1
 18995 ;; Hardware stack levels required when called:    3
 18996 ;; This function calls:
 18997 ;;		Nothing
 18998 ;; This function is called by:
 18999 ;;		_I2C_Read
 19000 ;;		_I2C_Write
 19001 ;;		_i2cNack
 19002 ;;		_i2cAck
 19003 ;;		_I2C_Start
 19004 ;;		_I2C_ReStart
 19005 ;;		_I2C_Stop
 19006 ;; This function uses a non-reentrant model
 19007 ;;
 19008                           
 19009                           	psect	text115
 19010  003E68                     __ptext115:
 19011                           	opt stack 0
 19012  003E68                     _i2cLowScl:
 19013                           	opt stack 23
 19014                           
 19015                           ;I2C_Soft.c: 113: PORTBbits.RB5 = 0;
 19016                           
 19017                           ;incstack = 0
 19018  003E68  9A81               	bcf	3969,5,c	;volatile
 19019                           
 19020                           ;I2C_Soft.c: 114: TRISBbits.RB5 = 0;
 19021  003E6A  9A93               	bcf	3987,5,c	;volatile
 19022                           
 19023                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
 19024  003E6C  D000               	nop2		;2 cycle nop
 19025  003E6E  0012               	return		;funcret
 19026  003E70                     __end_of_i2cLowScl:
 19027                           	opt stack 0
 19028                           tblptru	equ	0xFF8
 19029                           tblptrh	equ	0xFF7
 19030                           tblptrl	equ	0xFF6
 19031                           tablat	equ	0xFF5
 19032                           prodh	equ	0xFF4
 19033                           prodl	equ	0xFF3
 19034                           intcon	equ	0xFF2
 19035                           intcon2	equ	0xFF1
 19036                           intcon3	equ	0xFF0
 19037                           postinc0	equ	0xFEE
 19038                           wreg	equ	0xFE8
 19039                           postdec1	equ	0xFE5
 19040                           plusw1	equ	0xFE3
 19041                           fsr1l	equ	0xFE1
 19042                           indf2	equ	0xFDF
 19043                           postinc2	equ	0xFDE
 19044                           postdec2	equ	0xFDD
 19045                           plusw2	equ	0xFDB
 19046                           fsr2h	equ	0xFDA
 19047                           fsr2l	equ	0xFD9
 19048                           status	equ	0xFD8
 19049                           
 19050 ;; *************** function _i2cHighSda *****************
 19051 ;; Defined at:
 19052 ;;		line 92 in file "I2C_Soft.c"
 19053 ;; Parameters:    Size  Location     Type
 19054 ;;		None
 19055 ;; Auto vars:     Size  Location     Type
 19056 ;;		None
 19057 ;; Return value:  Size  Location     Type
 19058 ;;		None               void
 19059 ;; Registers used:
 19060 ;;		None
 19061 ;; Tracked objects:
 19062 ;;		On entry : 0/0
 19063 ;;		On exit  : 0/0
 19064 ;;		Unchanged: 0/0
 19065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19070 ;;Total ram usage:        0 bytes
 19071 ;; Hardware stack levels used:    1
 19072 ;; Hardware stack levels required when called:    3
 19073 ;; This function calls:
 19074 ;;		Nothing
 19075 ;; This function is called by:
 19076 ;;		_I2C_Init
 19077 ;;		_I2C_Read
 19078 ;;		_I2C_Write
 19079 ;;		_i2cAck
 19080 ;;		_I2C_Start
 19081 ;;		_I2C_ReStart
 19082 ;;		_I2C_Stop
 19083 ;; This function uses a non-reentrant model
 19084 ;;
 19085                           
 19086                           	psect	text116
 19087  003E70                     __ptext116:
 19088                           	opt stack 0
 19089  003E70                     _i2cHighSda:
 19090                           	opt stack 23
 19091                           
 19092                           ;I2C_Soft.c: 94: TRISAbits.RA5 = 1;
 19093                           
 19094                           ;incstack = 0
 19095  003E70  8A92               	bsf	3986,5,c	;volatile
 19096                           
 19097                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
 19098  003E72  D000               	nop2		;2 cycle nop
 19099  003E74  D000               	nop2		;2 cycle nop
 19100  003E76  0012               	return		;funcret
 19101  003E78                     __end_of_i2cHighSda:
 19102                           	opt stack 0
 19103                           tblptru	equ	0xFF8
 19104                           tblptrh	equ	0xFF7
 19105                           tblptrl	equ	0xFF6
 19106                           tablat	equ	0xFF5
 19107                           prodh	equ	0xFF4
 19108                           prodl	equ	0xFF3
 19109                           intcon	equ	0xFF2
 19110                           intcon2	equ	0xFF1
 19111                           intcon3	equ	0xFF0
 19112                           postinc0	equ	0xFEE
 19113                           wreg	equ	0xFE8
 19114                           postdec1	equ	0xFE5
 19115                           plusw1	equ	0xFE3
 19116                           fsr1l	equ	0xFE1
 19117                           indf2	equ	0xFDF
 19118                           postinc2	equ	0xFDE
 19119                           postdec2	equ	0xFDD
 19120                           plusw2	equ	0xFDB
 19121                           fsr2h	equ	0xFDA
 19122                           fsr2l	equ	0xFD9
 19123                           status	equ	0xFD8
 19124                           
 19125 ;; *************** function _i2cHighScl *****************
 19126 ;; Defined at:
 19127 ;;		line 105 in file "I2C_Soft.c"
 19128 ;; Parameters:    Size  Location     Type
 19129 ;;		None
 19130 ;; Auto vars:     Size  Location     Type
 19131 ;;		None
 19132 ;; Return value:  Size  Location     Type
 19133 ;;		None               void
 19134 ;; Registers used:
 19135 ;;		wreg
 19136 ;; Tracked objects:
 19137 ;;		On entry : 0/0
 19138 ;;		On exit  : 0/0
 19139 ;;		Unchanged: 0/0
 19140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19145 ;;Total ram usage:        0 bytes
 19146 ;; Hardware stack levels used:    1
 19147 ;; Hardware stack levels required when called:    3
 19148 ;; This function calls:
 19149 ;;		Nothing
 19150 ;; This function is called by:
 19151 ;;		_I2C_Init
 19152 ;;		_I2C_Read
 19153 ;;		_I2C_Write
 19154 ;;		_i2cNack
 19155 ;;		_i2cAck
 19156 ;;		_I2C_Start
 19157 ;;		_I2C_ReStart
 19158 ;;		_I2C_Stop
 19159 ;; This function uses a non-reentrant model
 19160 ;;
 19161                           
 19162                           	psect	text117
 19163  003E0C                     __ptext117:
 19164                           	opt stack 0
 19165  003E0C                     _i2cHighScl:
 19166                           	opt stack 23
 19167                           
 19168                           ;I2C_Soft.c: 107: TRISBbits.RB5 = 1;
 19169                           
 19170                           ;incstack = 0
 19171  003E0C  8A93               	bsf	3987,5,c	;volatile
 19172                           
 19173                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
 19174  003E0E  0E06               	movlw	6
 19175  003E10                     u7617:
 19176  003E10  2EE8               	decfsz	wreg,f,c
 19177  003E12  D7FE               	goto	u7617
 19178  003E14  D000               	nop2		;nop
 19179  003E16  0012               	return		;funcret
 19180  003E18                     __end_of_i2cHighScl:
 19181                           	opt stack 0
 19182                           tblptru	equ	0xFF8
 19183                           tblptrh	equ	0xFF7
 19184                           tblptrl	equ	0xFF6
 19185                           tablat	equ	0xFF5
 19186                           prodh	equ	0xFF4
 19187                           prodl	equ	0xFF3
 19188                           intcon	equ	0xFF2
 19189                           intcon2	equ	0xFF1
 19190                           intcon3	equ	0xFF0
 19191                           postinc0	equ	0xFEE
 19192                           wreg	equ	0xFE8
 19193                           postdec1	equ	0xFE5
 19194                           plusw1	equ	0xFE3
 19195                           fsr1l	equ	0xFE1
 19196                           indf2	equ	0xFDF
 19197                           postinc2	equ	0xFDE
 19198                           postdec2	equ	0xFDD
 19199                           plusw2	equ	0xFDB
 19200                           fsr2h	equ	0xFDA
 19201                           fsr2l	equ	0xFD9
 19202                           status	equ	0xFD8
 19203                           
 19204 ;; *************** function _chkisr *****************
 19205 ;; Defined at:
 19206 ;;		line 38 in file "Interrupt.c"
 19207 ;; Parameters:    Size  Location     Type
 19208 ;;		None
 19209 ;; Auto vars:     Size  Location     Type
 19210 ;;		None
 19211 ;; Return value:  Size  Location     Type
 19212 ;;		None               void
 19213 ;; Registers used:
 19214 ;;		wreg, status,2, status,0, cstack
 19215 ;; Tracked objects:
 19216 ;;		On entry : 0/0
 19217 ;;		On exit  : 0/0
 19218 ;;		Unchanged: 0/0
 19219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19222 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19223 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19224 ;;Total ram usage:       14 bytes
 19225 ;; Hardware stack levels used:    1
 19226 ;; Hardware stack levels required when called:    2
 19227 ;; This function calls:
 19228 ;;		_INT0_isr
 19229 ;;		_INT1_isr
 19230 ;;		_INT2_isr
 19231 ;;		_TIMER1_isr
 19232 ;; This function is called by:
 19233 ;;		Interrupt level 2
 19234 ;; This function uses a non-reentrant model
 19235 ;;
 19236                           
 19237                           	psect	intcode
 19238  000008                     __pintcode:
 19239                           	opt stack 0
 19240  000008                     _chkisr:
 19241                           	opt stack 18
 19242                           
 19243                           ;incstack = 0
 19244  000008  CFFA F003          	movff	pclath,??_chkisr
 19245  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 19246  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 19247  000014  EDD7  F016         	call	int_func,f	;refresh shadow registers
 19248                           pclatu	equ	0xFFB
 19249                           pclath	equ	0xFFA
 19250                           tblptru	equ	0xFF8
 19251                           tblptrh	equ	0xFF7
 19252                           tblptrl	equ	0xFF6
 19253                           tablat	equ	0xFF5
 19254                           prodh	equ	0xFF4
 19255                           prodl	equ	0xFF3
 19256                           intcon	equ	0xFF2
 19257                           intcon2	equ	0xFF1
 19258                           intcon3	equ	0xFF0
 19259                           postinc0	equ	0xFEE
 19260                           fsr0l	equ	0xFE9
 19261                           wreg	equ	0xFE8
 19262                           postdec1	equ	0xFE5
 19263                           plusw1	equ	0xFE3
 19264                           fsr1l	equ	0xFE1
 19265                           indf2	equ	0xFDF
 19266                           postinc2	equ	0xFDE
 19267                           postdec2	equ	0xFDD
 19268                           plusw2	equ	0xFDB
 19269                           fsr2h	equ	0xFDA
 19270                           fsr2l	equ	0xFD9
 19271                           status	equ	0xFD8
 19272                           
 19273                           	psect	intcode_body
 19274  002DAE                     __pintcode_body:
 19275                           	opt stack 18
 19276  002DAE                     int_func:
 19277                           	opt stack 18
 19278  002DAE  0006               	pop		; remove dummy address from shadow register refresh
 19279  002DB0  CFEA F006          	movff	fsr0h,??_chkisr+3
 19280  002DB4  CFE1 F007          	movff	fsr1l,??_chkisr+4
 19281  002DB8  CFE2 F008          	movff	fsr1h,??_chkisr+5
 19282  002DBC  CFD9 F009          	movff	fsr2l,??_chkisr+6
 19283  002DC0  CFDA F00A          	movff	fsr2h,??_chkisr+7
 19284  002DC4  CFF3 F00B          	movff	prodl,??_chkisr+8
 19285  002DC8  CFF4 F00C          	movff	prodh,??_chkisr+9
 19286  002DCC  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 19287  002DD0  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 19288  002DD4  CFF8 F00F          	movff	tblptru,??_chkisr+12
 19289  002DD8  CFF5 F010          	movff	tablat,??_chkisr+13
 19290                           
 19291                           ;Interrupt.c: 40: if (PIR1bits.TMR1IF == 1)
 19292  002DDC  A09E               	btfss	3998,0,c	;volatile
 19293  002DDE  D003               	goto	i2l7525
 19294                           
 19295                           ;Interrupt.c: 41: TIMER1_isr();
 19296  002DE0  EC0C  F01F         	call	_TIMER1_isr	;wreg free
 19297  002DE4  D000               	goto	i2l7525
 19298  002DE6                     i2l7525:
 19299                           
 19300                           ;Interrupt.c: 42: if (INTCONbits.INT0IF == 1)
 19301  002DE6  A2F2               	btfss	intcon,1,c	;volatile
 19302  002DE8  D003               	goto	i2l7529
 19303                           
 19304                           ;Interrupt.c: 43: INT0_isr();
 19305  002DEA  EC1C  F00B         	call	_INT0_isr	;wreg free
 19306  002DEE  D000               	goto	i2l7529
 19307  002DF0                     i2l7529:
 19308                           
 19309                           ;Interrupt.c: 44: if (INTCON3bits.INT1IF == 1)
 19310  002DF0  A0F0               	btfss	intcon3,0,c	;volatile
 19311  002DF2  D003               	goto	i2l7533
 19312                           
 19313                           ;Interrupt.c: 45: INT1_isr();
 19314  002DF4  EC2B  F01F         	call	_INT1_isr	;wreg free
 19315  002DF8  D000               	goto	i2l7533
 19316  002DFA                     i2l7533:
 19317                           
 19318                           ;Interrupt.c: 46: if (INTCON3bits.INT2IF == 1)
 19319  002DFA  A2F0               	btfss	intcon3,1,c	;volatile
 19320  002DFC  D003               	goto	i2l307
 19321                           
 19322                           ;Interrupt.c: 47: INT2_isr();
 19323  002DFE  EC26  F01F         	call	_INT2_isr	;wreg free
 19324  002E02  D000               	goto	i2l307
 19325  002E04                     i2l307:
 19326  002E04  C010  FFF5         	movff	??_chkisr+13,tablat
 19327  002E08  C00F  FFF8         	movff	??_chkisr+12,tblptru
 19328  002E0C  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 19329  002E10  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 19330  002E14  C00C  FFF4         	movff	??_chkisr+9,prodh
 19331  002E18  C00B  FFF3         	movff	??_chkisr+8,prodl
 19332  002E1C  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 19333  002E20  C009  FFD9         	movff	??_chkisr+6,fsr2l
 19334  002E24  C008  FFE2         	movff	??_chkisr+5,fsr1h
 19335  002E28  C007  FFE1         	movff	??_chkisr+4,fsr1l
 19336  002E2C  C006  FFEA         	movff	??_chkisr+3,fsr0h
 19337  002E30  C005  FFE9         	movff	??_chkisr+2,fsr0l
 19338  002E34  C004  FFFB         	movff	??_chkisr+1,pclatu
 19339  002E38  C003  FFFA         	movff	??_chkisr,pclath
 19340  002E3C  0011               	retfie		f
 19341  002E3E                     __end_of_chkisr:
 19342                           	opt stack 0
 19343                           pclatu	equ	0xFFB
 19344                           pclath	equ	0xFFA
 19345                           tblptru	equ	0xFF8
 19346                           tblptrh	equ	0xFF7
 19347                           tblptrl	equ	0xFF6
 19348                           tablat	equ	0xFF5
 19349                           prodh	equ	0xFF4
 19350                           prodl	equ	0xFF3
 19351                           intcon	equ	0xFF2
 19352                           intcon2	equ	0xFF1
 19353                           intcon3	equ	0xFF0
 19354                           postinc0	equ	0xFEE
 19355                           fsr0h	equ	0xFEA
 19356                           fsr0l	equ	0xFE9
 19357                           wreg	equ	0xFE8
 19358                           postdec1	equ	0xFE5
 19359                           plusw1	equ	0xFE3
 19360                           fsr1h	equ	0xFE2
 19361                           fsr1l	equ	0xFE1
 19362                           indf2	equ	0xFDF
 19363                           postinc2	equ	0xFDE
 19364                           postdec2	equ	0xFDD
 19365                           plusw2	equ	0xFDB
 19366                           fsr2h	equ	0xFDA
 19367                           fsr2l	equ	0xFD9
 19368                           status	equ	0xFD8
 19369                           
 19370 ;; *************** function _TIMER1_isr *****************
 19371 ;; Defined at:
 19372 ;;		line 50 in file "Interrupt.c"
 19373 ;; Parameters:    Size  Location     Type
 19374 ;;		None
 19375 ;; Auto vars:     Size  Location     Type
 19376 ;;		None
 19377 ;; Return value:  Size  Location     Type
 19378 ;;		None               void
 19379 ;; Registers used:
 19380 ;;		wreg, status,2
 19381 ;; Tracked objects:
 19382 ;;		On entry : 0/0
 19383 ;;		On exit  : 0/0
 19384 ;;		Unchanged: 0/0
 19385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19390 ;;Total ram usage:        0 bytes
 19391 ;; Hardware stack levels used:    1
 19392 ;; This function calls:
 19393 ;;		Nothing
 19394 ;; This function is called by:
 19395 ;;		_chkisr
 19396 ;; This function uses a non-reentrant model
 19397 ;;
 19398                           
 19399                           	psect	text119
 19400  003E18                     __ptext119:
 19401                           	opt stack 0
 19402  003E18                     _TIMER1_isr:
 19403                           	opt stack 19
 19404                           
 19405                           ;Interrupt.c: 52: Nec_state = 0;
 19406                           
 19407                           ;incstack = 0
 19408  003E18  0E00               	movlw	0
 19409  003E1A  6E52               	movwf	_Nec_state,c
 19410                           
 19411                           ;Interrupt.c: 53: INTCON2bits.INTEDG0 = 0;
 19412  003E1C  9CF1               	bcf	intcon2,6,c	;volatile
 19413                           
 19414                           ;Interrupt.c: 54: T1CONbits.TMR1ON = 0;
 19415  003E1E  90CD               	bcf	4045,0,c	;volatile
 19416                           
 19417                           ;Interrupt.c: 55: PIR1bits.TMR1IF = 0;
 19418  003E20  909E               	bcf	3998,0,c	;volatile
 19419  003E22  0012               	return		;funcret
 19420  003E24                     __end_of_TIMER1_isr:
 19421                           	opt stack 0
 19422                           pclatu	equ	0xFFB
 19423                           pclath	equ	0xFFA
 19424                           tblptru	equ	0xFF8
 19425                           tblptrh	equ	0xFF7
 19426                           tblptrl	equ	0xFF6
 19427                           tablat	equ	0xFF5
 19428                           prodh	equ	0xFF4
 19429                           prodl	equ	0xFF3
 19430                           intcon	equ	0xFF2
 19431                           intcon2	equ	0xFF1
 19432                           intcon3	equ	0xFF0
 19433                           postinc0	equ	0xFEE
 19434                           fsr0h	equ	0xFEA
 19435                           fsr0l	equ	0xFE9
 19436                           wreg	equ	0xFE8
 19437                           postdec1	equ	0xFE5
 19438                           plusw1	equ	0xFE3
 19439                           fsr1h	equ	0xFE2
 19440                           fsr1l	equ	0xFE1
 19441                           indf2	equ	0xFDF
 19442                           postinc2	equ	0xFDE
 19443                           postdec2	equ	0xFDD
 19444                           plusw2	equ	0xFDB
 19445                           fsr2h	equ	0xFDA
 19446                           fsr2l	equ	0xFD9
 19447                           status	equ	0xFD8
 19448                           
 19449 ;; *************** function _INT2_isr *****************
 19450 ;; Defined at:
 19451 ;;		line 154 in file "Interrupt.c"
 19452 ;; Parameters:    Size  Location     Type
 19453 ;;		None
 19454 ;; Auto vars:     Size  Location     Type
 19455 ;;		None
 19456 ;; Return value:  Size  Location     Type
 19457 ;;		None               void
 19458 ;; Registers used:
 19459 ;;		wreg, status,2
 19460 ;; Tracked objects:
 19461 ;;		On entry : 0/0
 19462 ;;		On exit  : 0/0
 19463 ;;		Unchanged: 0/0
 19464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19469 ;;Total ram usage:        0 bytes
 19470 ;; Hardware stack levels used:    1
 19471 ;; This function calls:
 19472 ;;		Nothing
 19473 ;; This function is called by:
 19474 ;;		_chkisr
 19475 ;; This function uses a non-reentrant model
 19476 ;;
 19477                           
 19478                           	psect	text120
 19479  003E4C                     __ptext120:
 19480                           	opt stack 0
 19481  003E4C                     _INT2_isr:
 19482                           	opt stack 19
 19483                           
 19484                           ;Interrupt.c: 156: INTCON3bits.INT2IF = 0;
 19485                           
 19486                           ;incstack = 0
 19487  003E4C  92F0               	bcf	intcon3,1,c	;volatile
 19488                           
 19489                           ;Interrupt.c: 157: INT2_flag = 1;
 19490  003E4E  0E01               	movlw	1
 19491  003E50  0100               	movlb	0	; () banked
 19492  003E52  6FF7               	movwf	_INT2_flag& (0+255),b
 19493                           
 19494                           ; BSR set to: 0
 19495  003E54  0012               	return		;funcret
 19496  003E56                     __end_of_INT2_isr:
 19497                           	opt stack 0
 19498                           pclatu	equ	0xFFB
 19499                           pclath	equ	0xFFA
 19500                           tblptru	equ	0xFF8
 19501                           tblptrh	equ	0xFF7
 19502                           tblptrl	equ	0xFF6
 19503                           tablat	equ	0xFF5
 19504                           prodh	equ	0xFF4
 19505                           prodl	equ	0xFF3
 19506                           intcon	equ	0xFF2
 19507                           intcon2	equ	0xFF1
 19508                           intcon3	equ	0xFF0
 19509                           postinc0	equ	0xFEE
 19510                           fsr0h	equ	0xFEA
 19511                           fsr0l	equ	0xFE9
 19512                           wreg	equ	0xFE8
 19513                           postdec1	equ	0xFE5
 19514                           plusw1	equ	0xFE3
 19515                           fsr1h	equ	0xFE2
 19516                           fsr1l	equ	0xFE1
 19517                           indf2	equ	0xFDF
 19518                           postinc2	equ	0xFDE
 19519                           postdec2	equ	0xFDD
 19520                           plusw2	equ	0xFDB
 19521                           fsr2h	equ	0xFDA
 19522                           fsr2l	equ	0xFD9
 19523                           status	equ	0xFD8
 19524                           
 19525 ;; *************** function _INT1_isr *****************
 19526 ;; Defined at:
 19527 ;;		line 148 in file "Interrupt.c"
 19528 ;; Parameters:    Size  Location     Type
 19529 ;;		None
 19530 ;; Auto vars:     Size  Location     Type
 19531 ;;		None
 19532 ;; Return value:  Size  Location     Type
 19533 ;;		None               void
 19534 ;; Registers used:
 19535 ;;		wreg, status,2
 19536 ;; Tracked objects:
 19537 ;;		On entry : 0/0
 19538 ;;		On exit  : 0/0
 19539 ;;		Unchanged: 0/0
 19540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19545 ;;Total ram usage:        0 bytes
 19546 ;; Hardware stack levels used:    1
 19547 ;; This function calls:
 19548 ;;		Nothing
 19549 ;; This function is called by:
 19550 ;;		_chkisr
 19551 ;; This function uses a non-reentrant model
 19552 ;;
 19553                           
 19554                           	psect	text121
 19555  003E56                     __ptext121:
 19556                           	opt stack 0
 19557  003E56                     _INT1_isr:
 19558                           	opt stack 19
 19559                           
 19560                           ;Interrupt.c: 150: INTCON3bits.INT1IF = 0;
 19561                           
 19562                           ; BSR set to: 0
 19563                           ;incstack = 0
 19564  003E56  90F0               	bcf	intcon3,0,c	;volatile
 19565                           
 19566                           ;Interrupt.c: 151: INT1_flag = 1;
 19567  003E58  0E01               	movlw	1
 19568  003E5A  0100               	movlb	0	; () banked
 19569  003E5C  6FF6               	movwf	_INT1_flag& (0+255),b
 19570                           
 19571                           ; BSR set to: 0
 19572  003E5E  0012               	return		;funcret
 19573  003E60                     __end_of_INT1_isr:
 19574                           	opt stack 0
 19575                           pclatu	equ	0xFFB
 19576                           pclath	equ	0xFFA
 19577                           tblptru	equ	0xFF8
 19578                           tblptrh	equ	0xFF7
 19579                           tblptrl	equ	0xFF6
 19580                           tablat	equ	0xFF5
 19581                           prodh	equ	0xFF4
 19582                           prodl	equ	0xFF3
 19583                           intcon	equ	0xFF2
 19584                           intcon2	equ	0xFF1
 19585                           intcon3	equ	0xFF0
 19586                           postinc0	equ	0xFEE
 19587                           fsr0h	equ	0xFEA
 19588                           fsr0l	equ	0xFE9
 19589                           wreg	equ	0xFE8
 19590                           postdec1	equ	0xFE5
 19591                           plusw1	equ	0xFE3
 19592                           fsr1h	equ	0xFE2
 19593                           fsr1l	equ	0xFE1
 19594                           indf2	equ	0xFDF
 19595                           postinc2	equ	0xFDE
 19596                           postdec2	equ	0xFDD
 19597                           plusw2	equ	0xFDB
 19598                           fsr2h	equ	0xFDA
 19599                           fsr2l	equ	0xFD9
 19600                           status	equ	0xFD8
 19601                           
 19602 ;; *************** function _INT0_isr *****************
 19603 ;; Defined at:
 19604 ;;		line 64 in file "Interrupt.c"
 19605 ;; Parameters:    Size  Location     Type
 19606 ;;		None
 19607 ;; Auto vars:     Size  Location     Type
 19608 ;;		None
 19609 ;; Return value:  Size  Location     Type
 19610 ;;		None               void
 19611 ;; Registers used:
 19612 ;;		wreg, status,2, status,0, cstack
 19613 ;; Tracked objects:
 19614 ;;		On entry : 0/0
 19615 ;;		On exit  : 0/0
 19616 ;;		Unchanged: 0/0
 19617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19620 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19621 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19622 ;;Total ram usage:        2 bytes
 19623 ;; Hardware stack levels used:    1
 19624 ;; Hardware stack levels required when called:    1
 19625 ;; This function calls:
 19626 ;;		_force_nec_state0
 19627 ;; This function is called by:
 19628 ;;		_chkisr
 19629 ;; This function uses a non-reentrant model
 19630 ;;
 19631                           
 19632                           	psect	text122
 19633  001638                     __ptext122:
 19634                           	opt stack 0
 19635  001638                     _INT0_isr:
 19636                           	opt stack 18
 19637                           
 19638                           ;Interrupt.c: 67: INTCONbits.INT0IF = 0;
 19639                           
 19640                           ; BSR set to: 0
 19641                           ;incstack = 0
 19642  001638  92F2               	bcf	intcon,1,c	;volatile
 19643                           
 19644                           ;Interrupt.c: 68: if (Nec_state != 0)
 19645  00163A  5052               	movf	_Nec_state,w,c
 19646  00163C  B4D8               	btfsc	status,2,c
 19647  00163E  D0A4               	goto	i2l7007
 19648                           
 19649                           ;Interrupt.c: 69: {
 19650                           ;Interrupt.c: 70: Time_Elapsed = (TMR1H << 8) | TMR1L;
 19651  001640  50CE               	movf	4046,w,c	;volatile
 19652  001642  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 19653  001646  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 19654  001648  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 19655  00164C  6A01               	clrf	??_INT0_isr,c
 19656  00164E  1001               	iorwf	??_INT0_isr,w,c
 19657  001650  6E4A               	movwf	_Time_Elapsed,c
 19658  001652  5002               	movf	??_INT0_isr+1,w,c
 19659  001654  6E4B               	movwf	_Time_Elapsed+1,c
 19660                           
 19661                           ;Interrupt.c: 71: TMR1H = 0;
 19662  001656  0E00               	movlw	0
 19663  001658  6ECF               	movwf	4047,c	;volatile
 19664                           
 19665                           ;Interrupt.c: 72: TMR1L = 0;
 19666  00165A  0E00               	movlw	0
 19667  00165C  6ECE               	movwf	4046,c	;volatile
 19668                           
 19669                           ;Interrupt.c: 73: }
 19670                           ;Interrupt.c: 75: switch(Nec_state)
 19671  00165E  D094               	goto	i2l7007
 19672  001660                     i2l6935:
 19673                           
 19674                           ;Interrupt.c: 78: {
 19675                           ;Interrupt.c: 80: TMR1H = 0;
 19676  001660  0E00               	movlw	0
 19677  001662  6ECF               	movwf	4047,c	;volatile
 19678                           
 19679                           ;Interrupt.c: 81: TMR1L = 0;
 19680  001664  0E00               	movlw	0
 19681  001666  6ECE               	movwf	4046,c	;volatile
 19682                           
 19683                           ;Interrupt.c: 82: PIR1bits.TMR1IF = 0;
 19684  001668  909E               	bcf	3998,0,c	;volatile
 19685                           
 19686                           ;Interrupt.c: 83: T1CON= 0x90;
 19687  00166A  0E90               	movlw	144
 19688  00166C  6ECD               	movwf	4045,c	;volatile
 19689                           
 19690                           ;Interrupt.c: 84: T1CONbits.TMR1ON = 1;
 19691  00166E  80CD               	bsf	4045,0,c	;volatile
 19692                           
 19693                           ;Interrupt.c: 85: bit_count = 0;
 19694  001670  0E00               	movlw	0
 19695  001672  0100               	movlb	0	; () banked
 19696  001674  6FFC               	movwf	_bit_count& (0+255),b
 19697                           
 19698                           ;Interrupt.c: 86: Nec_code = 0;
 19699  001676  0E00               	movlw	0
 19700  001678  0100               	movlb	0	; () banked
 19701  00167A  6FE3               	movwf	_Nec_code& (0+255),b
 19702  00167C  0E00               	movlw	0
 19703  00167E  6FE4               	movwf	(_Nec_code+1)& (0+255),b
 19704  001680  0E00               	movlw	0
 19705  001682  6FE5               	movwf	(_Nec_code+2)& (0+255),b
 19706  001684  0E00               	movlw	0
 19707  001686  6FE6               	movwf	(_Nec_code+3)& (0+255),b
 19708                           
 19709                           ;Interrupt.c: 87: Nec_state = 1;
 19710  001688  0E01               	movlw	1
 19711  00168A  6E52               	movwf	_Nec_state,c
 19712  00168C  D07B               	goto	i2l7001
 19713                           
 19714                           ; BSR set to: 0
 19715                           ;Interrupt.c: 89: return;
 19716                           
 19717                           ; BSR set to: 0
 19718                           ;Interrupt.c: 88: INTCON2bits.INTEDG0 = 1;
 19719  00168E  D08D               	goto	i2l319
 19720  001690                     i2l6945:
 19721                           
 19722                           ;Interrupt.c: 93: {
 19723                           ;Interrupt.c: 94: if ((Time_Elapsed > 8500) && (Time_Elapsed < 9500))
 19724  001690  0E35               	movlw	53
 19725  001692  5C4A               	subwf	_Time_Elapsed,w,c
 19726  001694  0E21               	movlw	33
 19727  001696  584B               	subwfb	_Time_Elapsed+1,w,c
 19728  001698  A0D8               	btfss	status,0,c
 19729  00169A  D009               	goto	i2l6951
 19730  00169C  0E1C               	movlw	28
 19731  00169E  5C4A               	subwf	_Time_Elapsed,w,c
 19732  0016A0  0E25               	movlw	37
 19733  0016A2  584B               	subwfb	_Time_Elapsed+1,w,c
 19734  0016A4  B0D8               	btfsc	status,0,c
 19735  0016A6  D003               	goto	i2l6951
 19736                           
 19737                           ;Interrupt.c: 95: Nec_state = 2;
 19738  0016A8  0E02               	movlw	2
 19739  0016AA  6E52               	movwf	_Nec_state,c
 19740  0016AC  D02A               	goto	i2l6977
 19741  0016AE                     i2l6951:
 19742                           
 19743                           ;Interrupt.c: 96: else
 19744                           ;Interrupt.c: 97: force_nec_state0();
 19745  0016AE  EC3C  F01F         	call	_force_nec_state0	;wreg free
 19746  0016B2  D027               	goto	i2l6977
 19747  0016B4  D026               	goto	i2l6977
 19748                           
 19749                           ;Interrupt.c: 99: return;
 19750                           
 19751                           ;Interrupt.c: 98: INTCON2bits.INTEDG0 = 0;
 19752  0016B6  D079               	goto	i2l319
 19753  0016B8                     i2l6957:
 19754                           
 19755                           ;Interrupt.c: 103: {
 19756                           ;Interrupt.c: 104: if ((Time_Elapsed > 4000) && (Time_Elapsed < 5000))
 19757  0016B8  0EA1               	movlw	161
 19758  0016BA  5C4A               	subwf	_Time_Elapsed,w,c
 19759  0016BC  0E0F               	movlw	15
 19760  0016BE  584B               	subwfb	_Time_Elapsed+1,w,c
 19761  0016C0  A0D8               	btfss	status,0,c
 19762  0016C2  D009               	goto	i2l6963
 19763  0016C4  0E88               	movlw	136
 19764  0016C6  5C4A               	subwf	_Time_Elapsed,w,c
 19765  0016C8  0E13               	movlw	19
 19766  0016CA  584B               	subwfb	_Time_Elapsed+1,w,c
 19767  0016CC  B0D8               	btfsc	status,0,c
 19768  0016CE  D003               	goto	i2l6963
 19769  0016D0                     
 19770                           ;Interrupt.c: 105: Nec_state = 3;
 19771  0016D0  0E03               	movlw	3
 19772  0016D2  6E52               	movwf	_Nec_state,c
 19773  0016D4  D057               	goto	i2l7001
 19774  0016D6                     i2l6963:
 19775                           
 19776                           ;Interrupt.c: 106: else
 19777                           ;Interrupt.c: 107: force_nec_state0();
 19778  0016D6  EC3C  F01F         	call	_force_nec_state0	;wreg free
 19779  0016DA  D054               	goto	i2l7001
 19780  0016DC  D053               	goto	i2l7001
 19781                           
 19782                           ;Interrupt.c: 109: return;
 19783                           
 19784                           ;Interrupt.c: 108: INTCON2bits.INTEDG0 = 1;
 19785  0016DE  D065               	goto	i2l319
 19786  0016E0                     i2l6969:
 19787                           
 19788                           ;Interrupt.c: 113: {
 19789                           ;Interrupt.c: 114: if ((Time_Elapsed > 400) && (Time_Elapsed < 700))
 19790  0016E0  0E91               	movlw	145
 19791  0016E2  5C4A               	subwf	_Time_Elapsed,w,c
 19792  0016E4  0E01               	movlw	1
 19793  0016E6  584B               	subwfb	_Time_Elapsed+1,w,c
 19794  0016E8  A0D8               	btfss	status,0,c
 19795  0016EA  D008               	goto	i2l6975
 19796  0016EC  0EBC               	movlw	188
 19797  0016EE  5C4A               	subwf	_Time_Elapsed,w,c
 19798  0016F0  0E02               	movlw	2
 19799  0016F2  584B               	subwfb	_Time_Elapsed+1,w,c
 19800  0016F4  B0D8               	btfsc	status,0,c
 19801  0016F6  D002               	goto	i2l6975
 19802                           
 19803                           ;Interrupt.c: 115: Nec_state = 4;
 19804  0016F8  0E04               	movlw	4
 19805  0016FA  D7D7               	goto	L8
 19806  0016FC                     i2l6975:
 19807                           
 19808                           ;Interrupt.c: 116: else
 19809                           ;Interrupt.c: 117: force_nec_state0();
 19810  0016FC  EC3C  F01F         	call	_force_nec_state0	;wreg free
 19811  001700  D000               	goto	i2l6977
 19812  001702                     i2l6977:
 19813                           
 19814                           ;Interrupt.c: 118: INTCON2bits.INTEDG0 = 0;
 19815  001702  9CF1               	bcf	intcon2,6,c	;volatile
 19816                           
 19817                           ;Interrupt.c: 119: return;
 19818  001704  D052               	goto	i2l319
 19819  001706                     i2l6981:
 19820                           
 19821                           ;Interrupt.c: 123: {
 19822                           ;Interrupt.c: 124: if (Time_Elapsed > 400 && Time_Elapsed < 1800)
 19823  001706  0E91               	movlw	145
 19824  001708  5C4A               	subwf	_Time_Elapsed,w,c
 19825  00170A  0E01               	movlw	1
 19826  00170C  584B               	subwfb	_Time_Elapsed+1,w,c
 19827  00170E  A0D8               	btfss	status,0,c
 19828  001710  D036               	goto	i2l6999
 19829  001712  0E08               	movlw	8
 19830  001714  5C4A               	subwf	_Time_Elapsed,w,c
 19831  001716  0E07               	movlw	7
 19832  001718  584B               	subwfb	_Time_Elapsed+1,w,c
 19833  00171A  B0D8               	btfsc	status,0,c
 19834  00171C  D030               	goto	i2l6999
 19835                           
 19836                           ;Interrupt.c: 125: {
 19837                           ;Interrupt.c: 126: Nec_code = Nec_code << 1;
 19838  00171E  90D8               	bcf	status,0,c
 19839  001720  0100               	movlb	0	; () banked
 19840  001722  35E3               	rlcf	_Nec_code& (0+255),w,b
 19841  001724  0100               	movlb	0	; () banked
 19842  001726  6FE3               	movwf	_Nec_code& (0+255),b
 19843  001728  0100               	movlb	0	; () banked
 19844  00172A  35E4               	rlcf	(_Nec_code+1)& (0+255),w,b
 19845  00172C  0100               	movlb	0	; () banked
 19846  00172E  6FE4               	movwf	(_Nec_code+1)& (0+255),b
 19847  001730  0100               	movlb	0	; () banked
 19848  001732  35E5               	rlcf	(_Nec_code+2)& (0+255),w,b
 19849  001734  0100               	movlb	0	; () banked
 19850  001736  6FE5               	movwf	(_Nec_code+2)& (0+255),b
 19851  001738  0100               	movlb	0	; () banked
 19852  00173A  35E6               	rlcf	(_Nec_code+3)& (0+255),w,b
 19853  00173C  0100               	movlb	0	; () banked
 19854  00173E  6FE6               	movwf	(_Nec_code+3)& (0+255),b
 19855                           
 19856                           ;Interrupt.c: 127: if (Time_Elapsed > 1000)
 19857  001740  0EE9               	movlw	233
 19858  001742  5C4A               	subwf	_Time_Elapsed,w,c
 19859  001744  0E03               	movlw	3
 19860  001746  584B               	subwfb	_Time_Elapsed+1,w,c
 19861  001748  A0D8               	btfss	status,0,c
 19862  00174A  D008               	goto	i2l6989
 19863                           
 19864                           ; BSR set to: 0
 19865                           ;Interrupt.c: 128: Nec_code++;
 19866  00174C  0E01               	movlw	1
 19867  00174E  0100               	movlb	0	; () banked
 19868  001750  27E3               	addwf	_Nec_code& (0+255),f,b
 19869  001752  0E00               	movlw	0
 19870  001754  23E4               	addwfc	(_Nec_code+1)& (0+255),f,b
 19871  001756  23E5               	addwfc	(_Nec_code+2)& (0+255),f,b
 19872  001758  23E6               	addwfc	(_Nec_code+3)& (0+255),f,b
 19873  00175A  D000               	goto	i2l6989
 19874  00175C                     i2l6989:
 19875                           
 19876                           ; BSR set to: 0
 19877                           ;Interrupt.c: 130: bit_count++;
 19878  00175C  0100               	movlb	0	; () banked
 19879  00175E  2BFC               	incf	_bit_count& (0+255),f,b
 19880                           
 19881                           ; BSR set to: 0
 19882                           ;Interrupt.c: 131: if (bit_count > 31)
 19883  001760  0E1F               	movlw	31
 19884  001762  0100               	movlb	0	; () banked
 19885  001764  65FC               	cpfsgt	_bit_count& (0+255),b
 19886  001766  D7B4               	goto	L9
 19887                           
 19888                           ; BSR set to: 0
 19889                           ;Interrupt.c: 132: {
 19890                           ;Interrupt.c: 133: nec_ok = 1;
 19891  001768  0E00               	movlw	0
 19892  00176A  0100               	movlb	0	; () banked
 19893  00176C  6FF3               	movwf	(_nec_ok+1)& (0+255),b
 19894  00176E  0E01               	movlw	1
 19895  001770  6FF2               	movwf	_nec_ok& (0+255),b
 19896                           
 19897                           ; BSR set to: 0
 19898                           ;Interrupt.c: 134: Nec_code1 = (char) ((Nec_code >> 8));
 19899  001772  C0E4  F051         	movff	_Nec_code+1,_Nec_code1
 19900                           
 19901                           ; BSR set to: 0
 19902                           ;Interrupt.c: 135: INTCONbits.INT0IE = 0;
 19903  001776  98F2               	bcf	intcon,4,c	;volatile
 19904                           
 19905                           ;Interrupt.c: 136: Nec_state = 0;
 19906  001778  0E00               	movlw	0
 19907  00177A  6E52               	movwf	_Nec_state,c
 19908  00177C  D7A9               	goto	L9
 19909  00177E                     i2l6999:
 19910                           
 19911                           ;Interrupt.c: 140: else
 19912                           ;Interrupt.c: 141: force_nec_state0();
 19913  00177E  EC3C  F01F         	call	_force_nec_state0	;wreg free
 19914  001782  D000               	goto	i2l7001
 19915  001784                     i2l7001:
 19916                           
 19917                           ;Interrupt.c: 142: INTCON2bits.INTEDG0 = 1;
 19918  001784  8CF1               	bsf	intcon2,6,c	;volatile
 19919                           
 19920                           ;Interrupt.c: 144: }
 19921                           ;Interrupt.c: 145: }
 19922                           
 19923                           ;Interrupt.c: 143: return;
 19924  001786  D011               	goto	i2l319
 19925  001788                     i2l7007:
 19926  001788  5052               	movf	_Nec_state,w,c
 19927                           
 19928                           ; Switch size 1, requested type "space"
 19929                           ; Number of cases is 5, Range of values is 0 to 4
 19930                           ; switch strategies available:
 19931                           ; Name         Instructions Cycles
 19932                           ; simple_byte           16     9 (average)
 19933                           ;	Chosen strategy is simple_byte
 19934  00178A  0A00               	xorlw	0	; case 0
 19935  00178C  B4D8               	btfsc	status,2,c
 19936  00178E  D768               	goto	i2l6935
 19937  001790  0A01               	xorlw	1	; case 1
 19938  001792  B4D8               	btfsc	status,2,c
 19939  001794  D77D               	goto	i2l6945
 19940  001796  0A03               	xorlw	3	; case 2
 19941  001798  B4D8               	btfsc	status,2,c
 19942  00179A  D78E               	goto	i2l6957
 19943  00179C  0A01               	xorlw	1	; case 3
 19944  00179E  B4D8               	btfsc	status,2,c
 19945  0017A0  D79F               	goto	i2l6969
 19946  0017A2  0A07               	xorlw	7	; case 4
 19947  0017A4  B4D8               	btfsc	status,2,c
 19948  0017A6  D7AF               	goto	i2l6981
 19949  0017A8  D000               	goto	i2l319
 19950  0017AA                     i2l319:
 19951  0017AA  0012               	return		;funcret
 19952  0017AC                     __end_of_INT0_isr:
 19953                           	opt stack 0
 19954                           pclatu	equ	0xFFB
 19955                           pclath	equ	0xFFA
 19956                           tblptru	equ	0xFF8
 19957                           tblptrh	equ	0xFF7
 19958                           tblptrl	equ	0xFF6
 19959                           tablat	equ	0xFF5
 19960                           prodh	equ	0xFF4
 19961                           prodl	equ	0xFF3
 19962                           intcon	equ	0xFF2
 19963                           intcon2	equ	0xFF1
 19964                           intcon3	equ	0xFF0
 19965                           postinc0	equ	0xFEE
 19966                           fsr0h	equ	0xFEA
 19967                           fsr0l	equ	0xFE9
 19968                           wreg	equ	0xFE8
 19969                           postdec1	equ	0xFE5
 19970                           plusw1	equ	0xFE3
 19971                           fsr1h	equ	0xFE2
 19972                           fsr1l	equ	0xFE1
 19973                           indf2	equ	0xFDF
 19974                           postinc2	equ	0xFDE
 19975                           postdec2	equ	0xFDD
 19976                           plusw2	equ	0xFDB
 19977                           fsr2h	equ	0xFDA
 19978                           fsr2l	equ	0xFD9
 19979                           status	equ	0xFD8
 19980                           
 19981 ;; *************** function _force_nec_state0 *****************
 19982 ;; Defined at:
 19983 ;;		line 58 in file "Interrupt.c"
 19984 ;; Parameters:    Size  Location     Type
 19985 ;;		None
 19986 ;; Auto vars:     Size  Location     Type
 19987 ;;		None
 19988 ;; Return value:  Size  Location     Type
 19989 ;;		None               void
 19990 ;; Registers used:
 19991 ;;		wreg, status,2
 19992 ;; Tracked objects:
 19993 ;;		On entry : 0/0
 19994 ;;		On exit  : 0/0
 19995 ;;		Unchanged: 0/0
 19996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20001 ;;Total ram usage:        0 bytes
 20002 ;; Hardware stack levels used:    1
 20003 ;; This function calls:
 20004 ;;		Nothing
 20005 ;; This function is called by:
 20006 ;;		_INT0_isr
 20007 ;; This function uses a non-reentrant model
 20008 ;;
 20009                           
 20010                           	psect	text123
 20011  003E78                     __ptext123:
 20012                           	opt stack 0
 20013  003E78                     _force_nec_state0:
 20014                           	opt stack 18
 20015                           
 20016                           ;Interrupt.c: 60: Nec_state=0;
 20017                           
 20018                           ;incstack = 0
 20019  003E78  0E00               	movlw	0
 20020  003E7A  6E52               	movwf	_Nec_state,c
 20021                           
 20022                           ;Interrupt.c: 61: T1CONbits.TMR1ON = 0;
 20023  003E7C  90CD               	bcf	4045,0,c	;volatile
 20024  003E7E  0012               	return		;funcret
 20025  003E80                     __end_of_force_nec_state0:
 20026                           	opt stack 0
 20027                           pclatu	equ	0xFFB
 20028                           pclath	equ	0xFFA
 20029                           tblptru	equ	0xFF8
 20030                           tblptrh	equ	0xFF7
 20031                           tblptrl	equ	0xFF6
 20032                           tablat	equ	0xFF5
 20033                           prodh	equ	0xFF4
 20034                           prodl	equ	0xFF3
 20035                           intcon	equ	0xFF2
 20036                           intcon2	equ	0xFF1
 20037                           intcon3	equ	0xFF0
 20038                           postinc0	equ	0xFEE
 20039                           fsr0h	equ	0xFEA
 20040                           fsr0l	equ	0xFE9
 20041                           wreg	equ	0xFE8
 20042                           postdec1	equ	0xFE5
 20043                           plusw1	equ	0xFE3
 20044                           fsr1h	equ	0xFE2
 20045                           fsr1l	equ	0xFE1
 20046                           indf2	equ	0xFDF
 20047                           postinc2	equ	0xFDE
 20048                           postdec2	equ	0xFDD
 20049                           plusw2	equ	0xFDB
 20050                           fsr2h	equ	0xFDA
 20051                           fsr2l	equ	0xFD9
 20052                           status	equ	0xFD8
 20053                           pclatu	equ	0xFFB
 20054                           pclath	equ	0xFFA
 20055                           tblptru	equ	0xFF8
 20056                           tblptrh	equ	0xFF7
 20057                           tblptrl	equ	0xFF6
 20058                           tablat	equ	0xFF5
 20059                           prodh	equ	0xFF4
 20060                           prodl	equ	0xFF3
 20061                           intcon	equ	0xFF2
 20062                           intcon2	equ	0xFF1
 20063                           intcon3	equ	0xFF0
 20064                           postinc0	equ	0xFEE
 20065                           fsr0h	equ	0xFEA
 20066                           fsr0l	equ	0xFE9
 20067                           wreg	equ	0xFE8
 20068                           postdec1	equ	0xFE5
 20069                           plusw1	equ	0xFE3
 20070                           fsr1h	equ	0xFE2
 20071                           fsr1l	equ	0xFE1
 20072                           indf2	equ	0xFDF
 20073                           postinc2	equ	0xFDE
 20074                           postdec2	equ	0xFDD
 20075                           plusw2	equ	0xFDB
 20076                           fsr2h	equ	0xFDA
 20077                           fsr2l	equ	0xFD9
 20078                           status	equ	0xFD8
 20079                           
 20080                           	psect	rparam
 20081  0000                     pclatu	equ	0xFFB
 20082                           pclath	equ	0xFFA
 20083                           tblptru	equ	0xFF8
 20084                           tblptrh	equ	0xFF7
 20085                           tblptrl	equ	0xFF6
 20086                           tablat	equ	0xFF5
 20087                           prodh	equ	0xFF4
 20088                           prodl	equ	0xFF3
 20089                           intcon	equ	0xFF2
 20090                           intcon2	equ	0xFF1
 20091                           intcon3	equ	0xFF0
 20092                           postinc0	equ	0xFEE
 20093                           fsr0h	equ	0xFEA
 20094                           fsr0l	equ	0xFE9
 20095                           wreg	equ	0xFE8
 20096                           postdec1	equ	0xFE5
 20097                           plusw1	equ	0xFE3
 20098                           fsr1h	equ	0xFE2
 20099                           fsr1l	equ	0xFE1
 20100                           indf2	equ	0xFDF
 20101                           postinc2	equ	0xFDE
 20102                           postdec2	equ	0xFDD
 20103                           plusw2	equ	0xFDB
 20104                           fsr2h	equ	0xFDA
 20105                           fsr2l	equ	0xFD9
 20106                           status	equ	0xFD8


Data Sizes:
    Strings     329
    Constant    493
    Data        183
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     111
    BANK0           128      3     128
    BANK1           256     15      98
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK0[9]), setup_time(BANK0[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK0[9]), setup_time(BANK0[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_35(CODE[5]), STR_34(CODE[5]), STR_33(CODE[12]), STR_32(CODE[18]), 
		 -> STR_31(CODE[16]), STR_30(CODE[10]), STR_29(CODE[11]), STR_28(CODE[18]), 
		 -> STR_26(CODE[5]), STR_25(CODE[8]), STR_24(CODE[8]), STR_23(CODE[17]), 
		 -> STR_22(CODE[4]), STR_21(CODE[4]), STR_20(CODE[4]), STR_19(CODE[4]), 
		 -> STR_18(CODE[4]), STR_17(CODE[5]), STR_16(CODE[3]), STR_15(CODE[3]), 
		 -> STR_14(CODE[7]), STR_13(CODE[13]), STR_12(CODE[9]), STR_11(CODE[11]), 
		 -> STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[2]), STR_7(CODE[3]), 
		 -> STR_6(CODE[13]), STR_5(CODE[18]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_36(CODE[22]), STR_27(CODE[11]), STR_4(CODE[20]), STR_3(CODE[24]), 
		 -> STR_2(CODE[21]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK0[9]), setup_time(BANK0[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    txt	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_read_volt
    _read_volt->___ftdiv
    ___lwtoft->___ftpack
    _Update_Screen->_drawtext
    _Test_Alarm->_do_update_pwm
    _Set_RGB_Color->_Wait_One_Sec
    _DS3231_Turn_On_Alarm->_DS3231_Init
    _DS3231_Turn_Off_Alarm->_DS3231_Init
    _DS3231_Init->_I2C_Write_Address_Read_One_Byte
    _I2C_Write_Address_Write_One_Byte->_I2C_Write
    _I2C_Write_Address_Read_One_Byte->_I2C_Read
    _Monitor_Heater->_do_update_pwm
    _Turn_On_Fan->_do_update_pwm
    _Initialize_Setup_Time_Screen->_drawtext
    _Go_Prev_Field->_Update_Setup_Screen_Cursor_Backward
    _Go_Next_Field->_Update_Setup_Screen_Cursor_Forward
    _DS3231_Write_Time->_dec_2_bcd
    _Update_Setup_Time_Screen->_drawtext
    _Initialize_Setup_Heater_Screen->_drawtext
    _Update_Setup_Heater_Screen->_drawtext
    _check_for_button_input->_printf
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Go_Prev_Alarm_Field->_Update_Setup_Screen_Cursor_Backward
    _Update_Setup_Screen_Cursor_Backward->_fillRect
    _Go_Next_Alarm_Field->_Update_Setup_Screen_Cursor_Forward
    _Update_Setup_Screen_Cursor_Forward->_fillRect
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawCircle->_drawPixel
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS3231_Write_Alarm_Time->_dec_2_bcd
    _dec_2_bcd->___awmod
    _DS3231_Read_Time->_I2C_Read
    _DS3231_Read_Alarm_Time->_I2C_Read
    _Do_Beep_Good->_do_update_pwm
    _Do_Beep_Bad->_do_update_pwm
    _do_update_pwm->___ftdiv
    _do_update_pwm->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _Update_Setup_Alarm_Time_Screen->_drawtext
    _printf->___lwmod
    ___lwmod->___lwdiv
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___awmod->___fttol
    ___awdiv->___awmod
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_Monitor_Heater
    _DS3231_Write_Time->_dec_2_bcd
    _Do_Setup_Heater_Temp->_Update_Setup_Heater_Screen
    _Increase_Heater_Temp->_Update_Setup_Heater_Screen
    _Decrease_Heater_Temp->_Update_Setup_Heater_Screen
    _DS3231_Write_Alarm_Time->_dec_2_bcd

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _get_RPM->___awdiv
    _Update_Screen->___awdiv
    _Set_RPM_RGB->___awdiv
    _Set_DC_RGB->___awdiv
    _Initialize_Setup_Time_Screen->_drawtext
    _Do_Save_New_Time->_DS3231_Write_Time
    _DS3231_Write_Time->_dec_2_bcd
    _Update_Setup_Time_Screen->___awdiv
    _Initialize_Setup_Heater_Screen->_drawtext
    _Update_Setup_Heater_Screen->___awdiv
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Do_Save_New_Alarm_Time->_DS3231_Write_Alarm_Time
    _Initialize_Screen->_drawtext
    _DS3231_Write_Alarm_Time->_dec_2_bcd
    _dec_2_bcd->___awdiv
    _Update_Setup_Alarm_Time_Screen->___awdiv

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1168852
                                             13 BANK1      2     2      0
                   _DS1621_Read_Temp
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
              _DS3231_Turn_Off_Alarm
                        _Do_Beep_Bad
                       _Do_Beep_Good
                            _Do_Init
                _Do_Setup_Alarm_Time
               _Do_Setup_Heater_Temp
                      _Do_Setup_Time
                  _Initialize_Screen
                     _Monitor_Heater
                         _Set_DC_RGB
                        _Set_RPM_RGB
                         _Test_Alarm
                      _Toggle_Heater
                      _Update_Screen
                            ___awdiv
                             ___wmul
             _check_for_button_input
                            _get_RPM
                             _printf
                          _read_volt
 ---------------------------------------------------------------------------------
 (1) _read_volt                                            9     6      3    8259
                                             58 COMRAM     9     6      3
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (2) _get_full_ADC                                         6     4      2      23
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2164
                                             24 COMRAM     3     0      3
                           ___ftpack
                       _get_full_ADC (ARG)
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    5131
                                             64 COMRAM     2     0      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        5     5      0   48445
                                              0 BANK0      2     2      0
                                              8 BANK1      3     3      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Toggle_Heater                                        0     0      0    8929
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (1) _Test_Alarm                                           0     0      0   18173
                    _Activate_Buzzer
              _DS3231_Turn_Off_Alarm
               _DS3231_Turn_On_Alarm
                  _Deactivate_Buzzer
                      _Set_RGB_Color
                             ___ftge
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     242
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _Set_RGB_Color                                       20    20      0     138
                                             18 COMRAM    20    20      0
                       _Wait_One_Sec
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_On_Alarm                                 5     5      0    4432
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_Off_Alarm                                5     5      0    4432
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _DS3231_Init                                          4     4      0    2380
                                             22 COMRAM     4     4      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Write_One_Byte                     3     1      2     876
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Read_One_Byte                      3     2      1     783
                                             19 COMRAM     3     2      1
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                          6     4      2    4345
                                             64 COMRAM     2     0      2
                                              8 BANK1      4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Set_DC_RGB                                           4     2      2    4320
                                             64 COMRAM     2     0      2
                                              0 BANK0      2     2      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Monitor_Heater                                       3     3      0   18317
                                              0 BANK0      3     3      0
                       _Turn_Off_Fan
                        _Turn_On_Fan
                      _do_update_pwm
                     _get_duty_cycle
 ---------------------------------------------------------------------------------
 (2) _get_duty_cycle                                       8     4      4     459
                                             16 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0    8929
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Time                                        0     0      0  331306
                   _DS3231_Read_Time
                      _Decrease_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
                   _Do_Save_New_Time
                    _Exit_Time_Setup
                      _Go_Next_Field
                      _Go_Prev_Field
                      _Increase_Time
       _Initialize_Setup_Time_Screen
           _Update_Setup_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Time_Screen                         0     0      0   50293
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Time                                        0     0      0   40509
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Field                                        0     0      0   11627
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Field                                        0     0      0   11658
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (2) _Exit_Time_Setup                                      0     0      0   52987
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Time                                     0     0      0   61052
                   _DS3231_Read_Time
                  _DS3231_Write_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Time                                    2     2      0    8065
                                             11 BANK1      2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (2) _Decrease_Time                                        0     0      0   40509
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Time_Screen                             0     0      0   40509
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Heater_Temp                                 2     2      0  288609
                                              8 BANK1      2     2      0
               _Decrease_Heater_Temp
                        _Do_Beep_Bad
                       _Do_Beep_Good
            _Do_Save_New_Heater_Temp
             _Exit_Setup_Heater_Temp
               _Increase_Heater_Temp
     _Initialize_Setup_Heater_Screen
         _Update_Setup_Heater_Screen
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Heater_Screen                       0     0      0   39137
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Heater_Temp                                 0     0      0   40611
         _Update_Setup_Heater_Screen
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Heater_Temp                               0     0      0   52987
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Heater_Temp                              0     0      0   52987
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Decrease_Heater_Temp                                 0     0      0   40611
         _Update_Setup_Heater_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Heater_Screen                           3     3      0   40611
                                              0 BANK0      3     3      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Alarm_Time                                  0     0      0  343342
             _DS3231_Read_Alarm_Time
                _Decrease_Alarm_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
             _Do_Save_New_Alarm_Time
              _Exit_Setup_Alarm_Time
                _Go_Next_Alarm_Field
                _Go_Prev_Alarm_Field
                _Increase_Alarm_Time
 _Initialize_Setup_Alarm_Time_Screen
     _Update_Setup_Alarm_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (1) _check_for_button_input                               3     3      0    3715
                                             56 COMRAM     3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _bcd_2_dec                                            5     5      0      67
                                             16 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Alarm_Time_Screen                   0     0      0   50293
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Alarm_Time                                  0     0      0   44091
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Alarm_Field                                  0     0      0   11627
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Backward                  3     3      0   11627
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Alarm_Field                                  0     0      0   11658
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Forward                   3     3      0   11658
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Alarm_Time                                0     0      0   53417
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Alarm_Time                               0     0      0   61912
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
            _DS3231_Write_Alarm_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   52557
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    4009
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2387
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Alarm_Time                              2     2      0    8495
                                             11 BANK1      2     2      0
                   _DS3231_Read_Time
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (4) _dec_2_bcd                                            7     5      2    7864
                                             64 COMRAM     2     0      2
                                              0 BANK0      2     2      0
                                              8 BANK1      3     3      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Time                                     2     2      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Alarm_Time                               2     2      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Good                                         0     0      0    8975
               _Activate_Buzzer_2KHz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_2KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Bad                                          0     0      0    8975
              _Activate_Buzzer_500Hz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _do_update_pwm                                        9     9      0    8929
                                             58 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2099
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     631
                                             43 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3166
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2838
                                             43 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2068
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Sec                                         2     2      0      46
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_500Hz                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Decrease_Alarm_Time                                  0     0      0   44091
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Alarm_Time_Screen                       0     0      0   44091
                            ___awdiv
                            ___awmod
                           _drawtext
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3582
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     374
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   32741
                                             56 COMRAM    10     2      8
                                              0 BANK1      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   18184
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5   11156
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3683
                                             58 COMRAM     6     2      4
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    4085
                                              0 BANK1      8     4      4
                            ___awmod (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1019
                        _DS1621_Init
                           _I2C_Init
                           _Init_ADC
                     _Init_Interrupt
                       _Turn_Off_Fan
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (5) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (5) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _chkisr                                             14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                           _INT1_isr
                           _INT2_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (12) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT2_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT1_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (13) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Alarm_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Turn_Off_Alarm
     _DS3231_Init
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Write_Address_Read_One_Byte
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _I2C_Write_Address_Write_One_Byte
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
   _Do_Beep_Bad
     _Activate_Buzzer_500Hz
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
       ___lbtoft
         ___ftpack
   _Do_Beep_Good
     _Activate_Buzzer_2KHz
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
       ___lbtoft
         ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Init_ADC
     _Init_Interrupt
     _Turn_Off_Fan
     _init_UART
       _OpenUSART
   _Do_Setup_Alarm_Time
     _DS3231_Read_Alarm_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Save_New_Alarm_Time
       _DS3231_Read_Alarm_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Alarm_Time
         _DS3231_Read_Time
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
             ___wmul (ARG)
           ___awmod
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Alarm_Time
       _DS3231_Read_Alarm_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Alarm_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Alarm_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
     _Initialize_Setup_Alarm_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Alarm_Time_Screen
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___wmul (ARG)
       ___awmod
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Do_Setup_Heater_Temp
     _Decrease_Heater_Temp
       _Update_Setup_Heater_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Save_New_Heater_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Heater_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Increase_Heater_Temp
       _Update_Setup_Heater_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Heater_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Heater_Screen
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___wmul (ARG)
       ___awmod
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Do_Setup_Time
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Save_New_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Time
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
             ___wmul (ARG)
           ___awmod
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Time_Setup
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Time_Screen
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___wmul (ARG)
       ___awmod
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Monitor_Heater
     _Turn_Off_Fan
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
       ___lbtoft
         ___ftpack
     _get_duty_cycle
   _Set_DC_RGB
     ___awdiv
       ___awmod (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
       ___wmul (ARG)
   _Set_RPM_RGB
     ___awdiv
       ___awmod (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
       ___wmul (ARG)
   _Test_Alarm
     _Activate_Buzzer
     _DS3231_Turn_Off_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _DS3231_Turn_On_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _Deactivate_Buzzer
     _Set_RGB_Color
       _Wait_One_Sec
     ___ftge
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
       ___lbtoft
         ___ftpack
   _Toggle_Heater
     _Turn_Off_Fan
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
   _Update_Screen
     ___awdiv
       ___awmod (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
       ___wmul (ARG)
     ___awmod
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___awmod (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
     ___ftmul (ARG)
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
     ___wmul (ARG)
   ___wmul
   _check_for_button_input
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _get_RPM
     ___awdiv
       ___awmod (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _read_volt
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
       _get_full_ADC (ARG)
     _get_full_ADC

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _INT1_isr
   _INT2_isr
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      F      62       7       38.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      3      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     151      34        0.0%
DATA                 0      0     151       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Dec 08 16:11:34 2022

                                 drawCircle@f 002A                                   drawCircle@r 0020  
                                 drawCircle@x 002C                                   drawCircle@y 002E  
                          __size_of_I2C_Start 0012                                   _SSPSTATbits 000FC7  
                          __size_of_I2C_Write 003E                                  drawCircle@x0 001C  
                                drawCircle@y0 001E                                            _D1 0144  
                                          _D2 014C                                            l34 2592  
                                          l54 3D20                                            l49 3430  
                                          l57 381E                                            l82 3324  
                __size_of_Do_Setup_Alarm_Time 00BE                                  ___awdiv@sign 0158  
                        __size_of_Turn_On_Fan 0010                           ___wmul@multiplicand 0013  
                             ??_Update_Screen 00FD                                           l116 37DC  
                                         l119 38EA                                           l231 3954  
                                         l153 3986                                           l551 3DF4  
                                         l804 1856                                           l719 3574  
                                         l832 24C8                                           l592 1A20  
                                         l729 3CF6                                           l833 2434  
                                         l586 1988                                           l843 13A4  
                                         l835 24A4                                           l836 24C6  
                                         l773 39E8                                           l779 2EC4  
                                         l795 1900                                           l797 17DA  
                                         _PR2 000FCB                          DS3231_Init@Address_7 0017  
                        DS3231_Init@Address_E 0018                                           _day 005B  
                           _Deactivate_Buzzer 3E60                          __size_of_I2C_ReStart 0016  
                   __size_of_Do_Save_New_Time 0014                                           _dow 005C  
                                         _nbr 00F0                                           _rpm 004C  
                       __size_of_Turn_Off_Fan 000A                                           _rps 00F4  
                                         _txt 004E                                  ___awmod@sign 0040  
                                         prod 000FF3                                           wreg 000FE8  
                               _Increase_Time 2C8E                  __size_of_Go_Next_Alarm_Field 0018  
                          ?_Deactivate_Buzzer 0001                   __end_of_Decrease_Alarm_Time 3666  
      Update_Setup_Screen_Cursor_Forward@xinc 0030        Update_Setup_Screen_Cursor_Forward@yinc 002F  
                             ??_fillRectangle 001D                                  __CFG_LVP$OFF 000000  
                     _TFT_GreenTab_Initialize 3A14                                  ___ftdiv@cntr 0035  
                                ___ftdiv@sign 003A                                  __CFG_WDT$OFF 000000  
                              drawFastVLine@h 0019                                          l1402 3A8A  
                                        l1510 317C                                          l2038 3378  
                                        l1503 3154                                          l1512 3196  
                                        l2048 3742                                          l1360 31FE  
                                        l1353 2FC4                                          l2065 3AB0  
                                        l1442 0B06                                          l1507 316E  
                                        l1515 3A64                                          l1508 3170  
                                        l1276 112C                                drawFastVLine@x 0022  
                                        l1509 317A                                          l2077 38DA  
                                        l1357 3A12                                drawFastVLine@y 0018  
                                        l1374 3BB2                                          l1287 12E0  
                                        l1721 2F46                                          l1708 2668  
                                        l1396 3126                                          l1910 1F4E  
                                        l1479 0D5E                                          l1823 27F8  
                                        l1399 3A6A                                          l1904 2B66  
                                        l1834 27D0                                          l1931 230A  
                                        l5401 3B14                                          l1946 3B1C  
                                        l1972 3AD6                                          l1895 23EC  
                                        l1898 23B8                                          l8011 38FA  
                                        l8003 38E2                                          l5531 334E  
                                        l8021 390C                                          l6181 3144  
              I2C_Write_Cmd_Write_Data@Device 0015                                          l5527 333C  
                                        l5551 3720                                          l8009 38F4  
                                        l6185 314C                                          l6177 313A  
                                        l5529 3346                                          l6361 3BAC  
                                        l5539 336C                                          l5555 3736  
                                        l5547 370E                                          l6197 3166  
                                        l6189 3158                                          l8301 25EE  
                                        l5549 3718                                          l6357 3BA0  
                                        l6373 24E2                                          l8303 25FC  
                                        l8231 24A8                                          l8215 246C  
                                        l6391 2578                                          l6383 2546  
                                        l8321 265E                                          l8313 2638  
                                        l8305 2606                                          l8153 17D6  
                                        l8145 17BC                                          l8241 24C2  
                                        l8209 23FE                                          l9041 0FDC  
                                        l6385 254E                                          l8163 1816  
                                        l8155 17DE                                          l8235 24B2  
                                        l8227 249A                                          l9051 108A  
                                        l9043 1012                                          l6395 258C  
                                        l6379 2526                                          l8317 2648  
                                        l8341 2EF8                                          l8333 2EDC  
                                        l8165 184A                                          l8149 17C8  
                                        l8421 0A10                                          l8261 2798  
                                        l8253 2754                                          l9053 10C4  
                                        l9037 0F80                                          l6389 256E  
                                        l8343 2F02                                          l8183 18CC  
                                        l8175 1878                                          l8191 18FC  
                                        l8167 184E                                          l8159 17E6  
                                        l8503 0BF0                                          l8431 0A38  
                                        l8271 27D8                                          l8263 27B8  
                                        l8255 2760                                          l9047 104E  
                                        l9063 113A                                          l8345 2F0A  
                                        l8353 2F2C                                          l8337 2EEA  
                                        l8185 18F4                                          l8177 18A0  
                                        l8521 0C56                                          l8433 0A4E  
                                        l8425 0A20                                          l8265 27C4  
                                        l8257 2780                                          l8249 2744  
                                        l9073 1202                                          l9065 1170  
                                        l9225 3C0A                                          l9401 2D3C  
                                        l8611 1C22                                          l8603 1BD0  
                                        l8523 0C5E                                          l8531 0C8A  
                                        l8515 0C36                                          l8507 0C14  
                                        l8427 0A2E                                          l9251 362A  
                                        l9059 1104                                          l9235 3C26  
                                        l9075 123C                                          l9227 3C0E  
                                        l9163 2F6C                                          l9403 2D40  
                                        l6835 2B04                                          l8357 2F3C  
                                        l8349 2F20                                          l7901 2E4E  
                                        l8197 38A8                                          l8613 1C2A  
                                        l8533 0C92                                          l8541 0D1C  
                                        l8517 0C3E                                          l8509 0C1E  
                                        l8461 0B34                                          l8445 0AD0  
                                        l8437 0A6C                                          l9261 3646  
                                        l9245 361A                                          l8277 27EA  
                                        l9069 11AC                                          l9085 12B8  
                                        l9173 2FA2                                          l9333 3CA6  
                                        l9341 3C7E                                          l9421 2D70  
                                        l9413 2D5C                                          l6845 2B62  
                                        l8295 25D0                                          l8199 38AE  
                                        l8535 0CD6                                          l8543 0D2E  
                                        l8527 0C76                                          l8471 0B5E  
                                        l9255 3636                                          l9079 127C  
                                        l9271 35CC                                          l9167 2F80  
                                        l9415 2D60                                          l9407 2D4C  
                                        l9431 2DA8                                          l6839 2B36  
                                        l9503 3D1A                                          l8289 25B8  
                                        l7905 2E86                                          l8545 0D36  
                                        l8481 0B8C                                          l8465 0B4E  
                                        l8449 0AD8                                          l9257 363A  
                                        l9249 3626                                          l9265 364A  
                                        l8705 23C6                                          l8721 1E9E  
                                        l8633 138A                                          l9177 2FAA  
                                        l9425 2D7C                                          l9409 2D50  
                                        l9441 2CA0                                          l7915 2EAC  
                                        l8475 0B82                                          l8467 0B52  
                                        l8547 0D42                                          l9267 3660  
                                        l8715 1E76                                          l9283 35EC  
                                        l9291 35FC                                          l9187 2FC0  
                                        l9419 2D6C                                          l9371 3BDA  
                                        l9435 2C90                                          l9523 35BA  
                                        l7917 2EBA                                          l8485 0B98  
                                        l8717 1E90                                          l8661 147A  
                                        l9277 35DC                                          l9293 3612  
                                        l9429 2D80                                          l9381 3BF6  
                                        l9373 3BDE                                          l9453 2CC0  
                                        l8479 0B88                                          l8495 0BC2  
                                        l8671 2344                                          l8743 1EFA  
                                        l8735 1ED2                                          l8575 3992  
                                        l9391 2D20                                          l9447 2CB0  
                                        l9535 3304                                          l9623 195C  
                                        l8489 0BBC                                          l8497 0BD4  
                                        l8753 1F28                                          l8745 1F00  
                                        l8817 29FC                                          l8577 399C  
                                        l9465 2CE0                                          l9473 2CF0  
                                        l9537 330A                                          l9609 1924  
                                        l7955 39CA                                          l7963 3756  
                                        l8587 1B5E                                          l8675 2352  
                                        l8739 1EE4                                          l8763 2244  
                                        l9395 2D2C                                          l9459 2CD0  
                                        l9475 2D18                                          l9731 022E  
                                        l7973 37A0                                          l8669 232A  
                                        l8749 1F12                                          l8781 229E  
                                        l9397 2D30                                          l9645 19C8  
                                        l9733 0244                                          l7983 37B6  
                                        l7991 37C6                                          l7967 3772  
                                        l8599 1BB2                                          l8695 2392  
                                        l8791 22C8                                          l9903 2896  
                                        l9911 28AE                                          l9751 02F2  
                                        l9743 02CC                                          l7985 37BE  
                                        l7977 37A8                                          l8793 22D6  
                                        l8785 22AE                                          l9921 2B7C  
                                        l9841 2704                                          l9833 26E8  
                                        l9817 26B2                                          l9497 342A  
                                        l9649 19F0                                          l9745 02E2  
                                        l7995 37D2                                          l8787 22B4  
                                        l8795 22E0                                          l9907 28A4  
                                        l9851 2724                                          l9691 015C  
                                        l9675 00AA                                          l7997 37D8  
                                        l9909 28A8                                          l9845 2712  
                                        l9837 26F6                                          l9829 26DA  
                                        l9853 272A                                          l9749 02EA  
                                        l9685 0118                                          l9669 0066  
                                        l8799 22F8                                          l9943 2BDA  
                                        l9935 2BBE                                          l9951 2BF2  
                                        STR_1 FEB6                                          STR_2 FF02  
                                        l9849 2720                                          STR_3 FED4  
                                        STR_4 FF17                                          l9891 286C  
                                        l9875 2836                                          l9939 2BCC  
                                        l9947 2BE8                                          STR_5 FF2B  
                                        STR_6 FF6F                                          l9949 2BEC  
                                        STR_7 FFF6                                          STR_8 FFF0  
                                        l9895 287A                                          l9887 285E  
                                        STR_9 FFB1                                          l9899 2888  
                                        u4050 2522                                          u4060 2536  
                                        u4080 255E                                          u4171 3836  
                                        u5440 2E7C                                          u6321 231C  
                                        u6250 1B8C                                          u6341 233A  
                                        u6431 2236                                          u6450 2262  
                                        u6371 1E68                                          u5740 242C  
                                        u7420 0E88                                          u5670 18AE  
                                        u5750 2462                                          u6391 1E86  
                                        u6455 225A                  __end_of_Activate_Buzzer_2KHz 3D58  
                                        u7450 0F52                                          u7460 0F54  
                                        u7428 0E8C                                          u7617 3E10  
                                        u6940 19BC                                          _RBPU 007F8F  
                                        _TRMT 007D61                      ??_Do_Save_New_Alarm_Time 0043  
                       _setup_heater_set_temp 0068                                  _DS1621_tempC 0046  
                                _DS1621_tempF 0048                         _setup_heater_set_text 00C8  
                         ??_Deactivate_Buzzer 0011                                          _date 008B  
                                        _main 0D60                                          _font FCC9  
     Update_Setup_Screen_Cursor_Backward@xinc 0030                                  ___ftpack@arg 0011  
     Update_Setup_Screen_Cursor_Backward@yinc 002F                                          _hour 005F  
                                ___ftpack@exp 0014                              __end_of_I2C_Init 3E38  
                            __end_of_I2C_Read 37DE                                          _time 00AF  
                                        _year 006E                                          fsr0h 000FEA  
                                        fsr1h 000FE2                                ??_get_full_ADC 0013  
                                        fsr0l 000FE9                                          fsr2h 000FDA  
                                        fsr1l 000FE1                                          indf2 000FDF  
                                        fsr2l 000FD9                                          _wrap 0081  
                                        _volt 00E7                              __end_of_I2C_Stop 3D7C  
                      ?_DS3231_Turn_Off_Alarm 0001                                          pclat 000FFA  
                       Set_RGB_Color@masked_d 0026                            __size_of_LCD_Reset 0012  
                                        prodh 000FF4                                          prodl 000FF3  
                                        start 0018                   __size_of_I2C_Write_Cmd_Only 001A  
                              _Monitor_Heater 33DE                               __end_of_Do_Init 33DE  
                                 _Do_Beep_Bad 3CD4                               ??_drawFastVLine 001C  
                                ___ftmul@cntr 002A                               __end_of_i2cNack 3E42  
                                ___param_bank 000010                                  ___ftmul@sign 002B  
     Update_Setup_Screen_Cursor_Forward@field 002E                                  ___fttol@exp1 003A  
                   ??_DS3231_Write_Alarm_Time 0043                         __size_of_Do_Beep_Good 0014  
                                _Turn_Off_Fan 3E24                                  ___fttol@lval 0036  
             __size_of_Exit_Setup_Heater_Temp 0010                                   ?_TIMER1_isr 0001  
                            __end_of_INT0_isr 17AC                              __end_of_INT1_isr 3E60  
                                       l10121 0F06                                         l10113 0EF2  
                            __end_of_INT2_isr 3E56                                         l10131 0F20  
                                       l10125 0F10                                         l10117 0EFC  
                                       l10133 0F3E                                         l10109 0EDC  
                                       l10127 0F1A                                         l10073 0D76  
                                       l10139 0F60                                         l10089 0DEE  
              __size_of_Activate_Buzzer_500Hz 0012                     __end_of_Deactivate_Buzzer 3E68  
                             ??_do_update_pwm 003B                               drawFastVLine@hi 0020  
                             drawFastVLine@lo 0021                 __end_of_Activate_Buzzer_500Hz 3D6A  
                                       ?_main 0001                               __end_of___awdiv 266A  
                             drawCircle@ddF_x 0026                                         STR_10 FFE0  
                             drawCircle@ddF_y 0028                                         STR_11 FFAB  
                                       STR_20 FFEE                                         STR_12 FFC0  
                                       STR_21 FFEA                                         STR_13 FF7C  
                                       STR_22 FFEE                                         STR_14 FFD9  
                                       STR_30 FFB6                                         STR_15 FFF9  
                                       STR_31 FF5F                                         STR_23 FF4E  
                                       STR_32 FF2B                                         STR_16 FFFC  
                                       STR_24 FFC9                                         STR_17 FFE5  
                                       STR_25 FFD1                                         STR_33 FF89  
                                       STR_34 FFB1                                         STR_26 FFB1  
                                       STR_18 FFF2                                         STR_35 FFE0  
                                       STR_19 FFEA                                         STR_27 FFA0  
                                       STR_28 FF2B                                         STR_36 FEEC  
                             __end_of___awmod 2F48                                         STR_29 FF95  
                                       STR_37 FF3D                               __end_of___ftdiv 23EE  
                             __end_of___ftmul 1F50                                         _T0CON 000FD5  
                             ___awdiv@divisor 0155                                         _T1CON 000FCD  
                             __end_of___fttol 230C                                         _T2CON 000FCA  
                                       _T3CON 000FB1                 __size_of_Do_Setup_Heater_Temp 0094  
                             __end_of___lwdiv 3382                               __end_of___lwmod 374C  
                                       i2l307 2E04                                         i2l319 17AA  
                             ___awdiv@counter 0157                               drawCircle@color 0022  
                                       _RCSTA 000FAB                                         _TMR0H 000FD7  
                                       _TMR1H 000FCF                                         _TMR0L 000FD6  
                                       _TMR1L 000FCE                                         _TMR3L 000FB2  
                                       _SPBRG 000FAF                                         _PORTA 000F80  
                                       _PORTD 000F83                                         _PORTE 000F84  
                              ?_Increase_Time 0001                                         _TRISA 000F92  
                                       _TRISB 000F93                                         _TRISC 000F94  
                                       _TRISD 000F95                                         _TRISE 000F96  
                                       _TXREG 000FAD                                         _TXSTA 000FAC  
                             __end_of_get_RPM 3820                                         _Rcmd1 1A22  
                                       _Rcmd3 2042      Update_Setup_Screen_Cursor_Backward@field 002E  
                                  _i2cHighSda 3E70                                    _i2cHighScl 3E0C  
                                bcd_2_dec@bcd 0015                                  bcd_2_dec@dec 0013  
                             __end_of_dpowers FEAE                                         _color 00EE  
                                       _font2 FDC8                                         _found 005E  
                             __end_of_isdigit 3B1E                                         _tempC 00D9  
                                       _tempF 00DD                                         _month 0061  
                               ___ftpack@sign 0015                            Set_RGB_Color@F4250 0134  
                                       _putch 3DF0                             __end_of_I2C_Start 3D8E  
                           __end_of_I2C_Write 391A                                __CFG_BOREN$OFF 000000  
                                       tablat 000FF5                                         plusw1 000FE3  
                                       plusw2 000FDB                        __end_of_Monitor_Heater 3432  
                                       status 000FD8                             ?_DS1621_Read_Temp 0014  
                                _Do_Beep_Good 3CC0               __size_of_check_for_button_input 007E  
                       __end_of_Go_Next_Field 3BFE                               write_data@data_ 0013  
                          ??_DS1621_Read_Temp 0016                            Set_RGB_Color@color 0024  
                             __initialization 3044                                 ??_Set_RPM_RGB 0043  
                                __end_of_main 0F74                                  __end_of_font FDC8  
                    ?_Do_Save_New_Heater_Temp 0001                  __end_of_Decrease_Heater_Temp 3CAC  
                            __end_of_Init_ADC 3E0C                              __end_of_Rcmd2red 389E  
                          _Select_Alarm_Field 0053                                        ??_main 0160  
                               ___fttol@sign1 0035                                 __activetblptr 000002  
                           ?_DS3231_Read_Time 0001                             __end_of_LCD_Reset 3D46  
     I2C_Write_Address_Write_One_Byte@Address 0013                                    _Set_DC_RGB 357C  
                       __end_of_Go_Prev_Field 3BE6                     ??_TFT_GreenTab_Initialize 001D  
                 ?_Update_Setup_Heater_Screen 0001                    ??_Update_Setup_Time_Screen 0043  
                              _Init_Interrupt 3AD8                            ??_DS3231_Read_Time 0014  
                                      ?_Rcmd1 0001                                        ?_Rcmd3 0001  
                                   I2C_Init@c 0011                           _In_Alarm_Time_Setup 00F8  
                                   I2C_Read@n 0012                   DS3231_Turn_Off_Alarm@Device 001F  
                                      _ADCON0 000FC2                                        _ADCON1 000FC1  
                                      _ADCON2 000FC0                           DS1621_Read_Temp@Cmd 0016  
                                      _ADRESH 000FC4                                        _ADRESL 000FC3  
                                      _CCPR1L 000FBE                                        _CCPR2L 000FBB  
                            ___awdiv@dividend 0153                        _Exit_Setup_Heater_Temp 3DC0  
                          __size_of_i2cLowSda 000A                            __size_of_i2cLowScl 0008  
                                      _HEATER 0050                                        ?_putch 0001  
                            __end_of___ftpack 27FA                              __end_of___lbtoft 3AD8  
                                      _DC_Txt 00D1                 __size_of_Increase_Heater_Temp 0014  
                                      i2l7001 1784                                     ??_Do_Init 0017  
                                      i2l7007 1788                                        i2l7533 2DFA  
                                      i2l7525 2DE6                                        i2l7529 2DF0  
                                      i2l6951 16AE                                        i2l6935 1660  
                                      i2l6945 1690                                        i2l6963 16D6  
                                      i2l6981 1706                                        i2l6957 16B8  
                                      i2l6975 16FC                                        i2l6977 1702  
                                      i2l6969 16E0                                        i2l6989 175C  
                                      i2l6999 177E                              __end_of___lwtoft 3AB2  
                                      _OSCCON 000FD3               __size_of_Do_Save_New_Alarm_Time 0018  
                         __size_of_TIMER1_isr 000C                                        _SPBRGH 000FB0  
                             ?_Monitor_Heater 0001                                        _SSPBUF 000FC9  
                                   ??_i2cNack 0011                                  _Alarm_SW_Txt 00CD  
                            _force_nec_state0 3E78                              __end_of_delay_ms 357C  
                                      _i2cAck 3D8E              ??_Initialize_Setup_Heater_Screen 0043  
             ?_Initialize_Setup_Heater_Screen 0001                  __size_of_Go_Prev_Alarm_Field 0018  
                            __end_of_fillRect 3796                              __end_of_drawChar 1902  
                          __size_of_OpenUSART 0070                                        ___ftge 2AD2  
                 __end_of_Increase_Alarm_Time 3618                          DS3231_Init@control_E 0019  
                    __size_of_Activate_Buzzer 0012                                        ___wmul 3A3E  
                                   ??___awdiv 0041                              __end_of_drawtext 1C40  
                                   ??___awmod 003F                                     ??___ftdiv 0032  
                                  _Test_Alarm 1902                                     ??___ftmul 0023  
                                   ??___fttol 0030                                        _chkisr 0008  
                                   ??___lwdiv 0015                                        _array1 011F  
                                   ??___lwmod 001C                                        _buffer 0100  
              __size_of_Exit_Setup_Alarm_Time 0014                                        _nec_ok 00F2  
               __end_of_Exit_Setup_Alarm_Time 3CC0                                        clear_0 304A  
                                      clear_1 3056                              ___awdiv@quotient 0159  
                                      _minute 0060                                        _second 0063  
                             ___awmod@divisor 003D                          _Activate_Buzzer_2KHz 3D46  
                           read_volt@num_step 003E                                     ??_get_RPM 0043  
                  __size_of_Deactivate_Buzzer 0008                               ___awmod@counter 003F  
                                      _printf 0A06                                  drawtext@size 0040  
                             ??_Increase_Time 0043                                        _strcpy 3988  
                                      _strlen 389E                         ___ftmul@f3_as_product 0027  
                      __end_of_Init_Interrupt 3AFC                           __end_of_Set_RPM_RGB 3326  
                        __end_of_get_full_ADC 3A8C                        _check_for_button_input 2F48  
                            _Do_Save_New_Time 3C5C                                  __pdataCOMRAM 006F  
                                   ??_isdigit 0011                                     ?_I2C_Init 0011  
                                   ?_I2C_Read 0001                        get_duty_cycle@set_temp 0013  
                                   ?_I2C_Stop 0001                                  __mediumconst FCC8  
                                      tblptrh 000FF7                                        tblptrl 000FF6  
                                      tblptru 000FF8              __end_of_I2C_Write_Cmd_Write_Data 3B5E  
                                 ?_i2cHighSda 0001                                   ?_i2cHighScl 0001  
                                      putch@c 0011                        __size_of_Set_RGB_Color 0040  
                            __end_of_spiwrite 3CFC                      __size_of_Exit_Time_Setup 0010  
                          __size_of_bcd_2_dec 002A                           _Do_Setup_Alarm_Time 27FA  
                                  __accesstop 0080                       __end_of__initialization 30AE  
                            ??_get_duty_cycle 0015         I2C_Write_Address_Read_One_Byte@Device 0016  
                          __size_of_dec_2_bcd 0068                                    ___ftge@ff1 0011  
                                  ___ftge@ff2 0014                                     ?_INT0_isr 0001  
                                   ?_INT1_isr 0001                                     ?_INT2_isr 0001  
                          _setup_alarm_minute 0065                            _setup_alarm_second 0066  
                               ___rparam_used 000001                                    ___ftdiv@f1 002C  
             __end_of_Do_Save_New_Heater_Temp 3C98                                    ___ftdiv@f2 002F  
                                  ___ftdiv@f3 0036                                    ___lbtoft@c 001C  
                         Set_RGB_Color@masked 0025                           _Go_Next_Alarm_Field 3C16  
                                  ___ftmul@f1 001D                                    ___ftmul@f2 0020  
                                  ___fttol@f1 002C                                 __end_of_Rcmd1 1B32  
                               __end_of_Rcmd3 2134                                __pcstackCOMRAM 0001  
               DS3231_Turn_On_Alarm@Address_E 001B                 DS3231_Turn_On_Alarm@Address_F 001C  
                                __pidataBANK0 3264                                  __pidataBANK1 3432  
                               __end_of_font2 FEA4                             __end_of_i2cLowSda 3E4C  
                           __end_of_i2cLowScl 3E70                          ?_Do_Setup_Alarm_Time 0001  
                               __end_of_putch 3DFE                         ?_Activate_Buzzer_2KHz 0001  
                      _Do_Save_New_Alarm_Time 3C2E                                    ___lwtoft@c 0019  
                              drawPixel@color 0019                                  dec_2_bcd@bcd 015B  
                                dec_2_bcd@dec 015D                        __size_of_Decrease_Time 0090  
                             ?_Init_Interrupt 0001                        __size_of_write_command 0010  
                                  ??_I2C_Init 0015                                   ?_Set_DC_RGB 0041  
                                  ??_I2C_Read 0011                                  _alarm_minute 0058  
                                _alarm_second 0059              ??_Update_Setup_Alarm_Time_Screen 0043  
             ?_Update_Setup_Alarm_Time_Screen 0001                  __end_of_DS3231_Turn_On_Alarm 34D8  
                                  ??_I2C_Stop 0011                          ?_Go_Next_Alarm_Field 0001  
                                     ??_Rcmd1 001D                                       ??_Rcmd3 001D  
                          __size_of_drawPixel 0030                             __end_of_OpenUSART 3198  
                                     ??_putch 0011                          _Decrease_Heater_Temp 3C98  
                     ??_DS3231_Turn_Off_Alarm 001B                                    __pbssBANK0 00E3  
                            _setup_alarm_hour 0064                                     ?_Init_ADC 0001  
                            _setup_alarm_time 0094          __end_of_Initialize_Setup_Time_Screen 1D4C  
       __size_of_Initialize_Setup_Time_Screen 010C                  _Initialize_Setup_Time_Screen 1C40  
                               ??_DS1621_Init 0016                                 ??_DS3231_Init 0017  
                                   ?_Rcmd2red 0001                         __end_of_Toggle_Heater 3D22  
                          __size_of_init_UART 0014                               spiwrite@spidata 0012  
                                  _alarm_date 0056                                    ??_INT0_isr 0001  
                                  ??_INT1_isr 0001                                    ??_INT2_isr 0001  
                                  _alarm_mode 00EC                                    _alarm_hour 0057  
                                  _alarm_time 0082                                 ?_Wait_One_Sec 0001  
    I2C_Write_Address_Write_One_Byte@Data_Out 0014                                       ?_i2cAck 0001  
                                ?_Do_Beep_Bad 0001                            __size_of_read_volt 0070  
                        Set_DC_RGB@duty_cycle 0041                            __CFG_CCP2MX$PORTBE 000000  
                               _Set_RGB_Color 3820                                 ??_Turn_On_Fan 0044  
                              I2C_Read@inByte 0013                                       ?___ftge 0011  
         __size_of_Update_Setup_Heater_Screen 00AC                    DS3231_Turn_On_Alarm@Device 001F  
                                     ?___wmul 0011                           __size_of_i2cHighSda 0008  
                         __size_of_i2cHighScl 000C                                   _Set_RPM_RGB 32C8  
                                 ?_Test_Alarm 0001                         ??_Do_Setup_Alarm_Time 0044  
                                     ?_chkisr 0001                               _heater_set_temp 006F  
                      __size_of_setAddrWindow 004E                             __end_of_bcd_2_dec 3A14  
                                     _CCP1CON 000FBD              I2C_Write_Cmd_Write_Data@Data_Out 0014  
                                     _CCP2CON 000FBA                        __size_of_Do_Setup_Time 00CA  
                                ??_TIMER1_isr 0001                                 ??_I2C_ReStart 0011  
                                     _ALARMEN 0044                                     ?___ftpack 0011  
                                   ?___lbtoft 0019                                    I2C_Write@n 0012  
                                     ?_printf 001D                                       ?_strcpy 0011  
                                     ?_strlen 0011                                     ?___lwtoft 0019  
                           __end_of_dec_2_bcd 3200                             ??_Activate_Buzzer 0011  
                                  _fillScreen 3B7C                                       _MATCHED 00EA  
                       __end_of_Update_Screen 0686                      ??_DS3231_Read_Alarm_Time 0014  
                                  _drawCircle 12E2                         ??_Go_Next_Alarm_Field 0031  
                                   ?_delay_ms 0017                                     ?_fillRect 0023  
                                   ?_drawChar 002E                                       _SSPCON1 000FC6  
                       ?_Decrease_Heater_Temp 0001                                       _SSPSTAT 000FC7  
                                     _RPM_Txt 00C3                         __end_of_fillRectangle 24CA  
                                   ?_drawtext 0039                                    ??_Init_ADC 0011  
                                     _Do_Init 3382                      _I2C_Write_Cmd_Write_Data 3B3E  
                  __end_of_I2C_Write_Cmd_Only 3BCE                                    ??_Rcmd2red 0014  
                __end_of_Do_Setup_Heater_Temp 2BFC                        DS1621_Read_Temp@Device 0018  
                               _Decrease_Time 2D1E                                ??_Wait_One_Sec 0011  
                                     _i2cNack 3E38                            __end_of_TIMER1_isr 3E24  
               ?_Initialize_Setup_Time_Screen 0001                  __size_of_Decrease_Alarm_Time 004E  
                               _write_command 3DE0                                     _I2C_Start 3D7C  
                                   _I2C_Write 38DC                             ??_Exit_Time_Setup 0043  
                             __size_of_i2cAck 0012                                       __Hparam 0000  
                                     __Lparam 0000                           __size_of_Set_DC_RGB 004E  
                              ?_Set_RGB_Color 0001                           __end_of_DS1621_Init 3B7C  
                         __end_of_DS3231_Init 2970                             __end_of_drawPixel 39EA  
                       __end_of_drawFastVLine 2EC6                               __size_of___ftge 0096  
                                     ___awdiv 259A                                       ___awmod 2EC6  
                                     ___ftdiv 230C                               __size_of___wmul 0028  
                      ??_Activate_Buzzer_2KHz 0011                                       ___ftmul 1E58  
                                     ___fttol 2226                                       ___lwdiv 3326  
                                     ___lwmod 3700                         __size_of_get_full_ADC 0026  
                             __size_of_chkisr 2E36                                     ?_spiwrite 0001  
                                     __pcinit 3044                                    ??___ftpack 0016  
                                  ??___lbtoft 001C                                       __ramtop 1000  
                                     _get_RPM 37DE                                       __ptext0 0D60  
                                     __ptext1 30B8                                       __ptext2 3A66  
                                     __ptext3 3A8C                                       __ptext4 37DE  
                                     __ptext5 001C                     __size_of_DS1621_Read_Temp 003C  
                                     __ptext6 3D10                                       __ptext7 1902  
                                     __ptext8 2AD2                                       __ptext9 3820  
                             __size_of_printf 035A                             __end_of_init_UART 3D10  
                         __end_of_Turn_On_Fan 3DB0                                    ??___lwtoft 001C  
                                   _T0CONbits 000FD5                               __size_of_strcpy 0032  
                             __size_of_strlen 003E                             __end_of_hexpowers FEB6  
                    __end_of_force_nec_state0 3E80                                     _T1CONbits 000FCD  
                                     _dpowers FEA4                         __end_of_do_update_pwm 2A26  
                                     _isdigit 3AFC                         _Activate_Buzzer_500Hz 3D58  
                            ___awmod@dividend 003B                                    _duty_cycle 005D  
                     ?_Exit_Setup_Heater_Temp 0001                           _Go_Prev_Alarm_Field 3BFE  
                           __end_of_read_volt 3128                                    ??_delay_ms 0019  
                         __end_of_I2C_ReStart 3C5C              __size_of_Do_Save_New_Heater_Temp 0014  
                               drawtext@_text 003A                                 drawtext@color 003C  
                            ??_Monitor_Heater 00FD                                    ??_fillRect 0028  
                                  ??_drawChar 0035                                     _LCD_Reset 3D34  
                           _DS3231_Write_Time 2BFC                                 _setAddrWindow 3666  
                              __pintcode_body 2DAE                                 Wait_One_Sec@k 0011  
                                  delay_ms@ms 0017                          end_of_initialization 30AE  
                               _Do_Setup_Time 266A                                     _INT1_flag 00F6  
                         __size_of_Test_Alarm 0120                                     _INT2_flag 00F7  
                                  ??_drawtext 0041                            ?_DS3231_Write_Time 0001  
                              ?_Decrease_Time 0001                 DS3231_Turn_On_Alarm@control_E 001D  
               DS3231_Turn_On_Alarm@control_F 001E                                ?_write_command 0001  
                               __Lmediumconst FCC8                     __size_of_DS3231_Read_Time 0064  
                                     int_func 2DAE                       DS3231_Read_Time@Address 0014  
                    DS3231_Write_Time@Address 015F                                    ?_I2C_Start 0001  
                          read_volt@voltage_v 0041                                    ?_I2C_Write 0001  
                                  get_RPM@RPS 00FD                      __end_of_Do_Save_New_Time 3C70  
                                _get_full_ADC 3A66                           ??_DS3231_Write_Time 0043  
                        ?_Go_Prev_Alarm_Field 0001                       check_for_button_input@j 003A  
                    ?_DS3231_Write_Alarm_Time 0001                                    _tempSecond 0080  
                        _DS3231_Turn_On_Alarm 3486                                     _RCSTAbits 000FAB  
                                     printf@c 0038                                       printf@f 001D  
                                     postdec1 000FE5                                       postdec2 000FDD  
                                     postinc0 000FEE                                       postinc2 000FDE  
                __end_of_Increase_Heater_Temp 3C84                                    ??_spiwrite 0011  
                     ?_check_for_button_input 0001                                       strlen@s 0011  
                 I2C_Write_Cmd_Write_Data@Cmd 0013                                     _PORTAbits 000F80  
                            drawtext@cursor_x 0159                              drawtext@cursor_y 0158  
                                   _PORTBbits 000F81                                     _PORTCbits 000F82  
                                   _PORTDbits 000F83                                     _PORTEbits 000F84  
                            I2C_Write@outByte 0011        __end_of_Initialize_Setup_Heater_Screen 2042  
     __size_of_Initialize_Setup_Heater_Screen 00F2                _Initialize_Setup_Heater_Screen 1F50  
                                  _setup_date 009D                                   ?_fillScreen 0024  
              __end_of_Exit_Setup_Heater_Temp 3DD0                                    _setup_hour 0069  
                                  _setup_time 00A6                                    _setup_year 006D  
                                 ?_drawCircle 001C               __size_of_DS3231_Read_Alarm_Time 004C  
                                  drawChar@bg 0032                     __end_of_DS3231_Write_Time 2C8E  
                                   _TRISAbits 000F92                DS3231_Turn_Off_Alarm@Address_E 001B  
              DS3231_Turn_Off_Alarm@Address_F 001C                                     _TRISBbits 000F93  
                                   _TRISCbits 000F94                        __size_of_Go_Next_Field 0018  
      I2C_Write_Address_Read_One_Byte@Address 0014                                  ??_i2cHighSda 0011  
                                ??_i2cHighScl 0011                           Set_DC_RGB@d1color_C 00FD  
                         Set_DC_RGB@d1color_I 00FE                        ??_Decrease_Heater_Temp 0043  
                           __size_of_I2C_Init 000A                             __size_of_I2C_Read 0048  
                           __size_of_I2C_Stop 0012                                ?_setAddrWindow 0014  
                                  ?_LCD_Reset 0001                                ?_Do_Setup_Time 0001  
                        _In_Heater_Temp_Setup 00F9                              drawtext@textsize 0154  
                                  drawPixel@x 001B                                    drawPixel@y 0018  
                                 _DS1621_Init 3B5E                                   _DS3231_Init 28B8  
                                 ___ftdiv@exp 0039                                   printf@width 0036  
                                   _TXSTAbits 000FAC                               ??_Set_RGB_Color 0013  
                       ??_Go_Prev_Alarm_Field 0031             __size_of_Update_Setup_Time_Screen 01A8  
                          get_full_ADC@result 0015                     ?_Update_Setup_Time_Screen 0001  
                       ?_DS3231_Turn_On_Alarm 0001                             __size_of_INT0_isr 0174  
                           __size_of_INT1_isr 000A                             __size_of_INT2_isr 000A  
                              __end_of_i2cAck 3DA0                                   ___ftmul@exp 0026  
                      __size_of_Go_Prev_Field 0018                ??_Initialize_Setup_Time_Screen 0043  
                     ?_Do_Save_New_Alarm_Time 0001                          __size_of_Do_Beep_Bad 0014  
                    DS1621_Read_Temp@Data_Ret 0017                                   _Turn_On_Fan 3DA0  
              __end_of_check_for_button_input 2FC6                              ??_Init_Interrupt 0011  
          Update_Setup_Heater_Screen@dc_char1 00FD            Update_Setup_Heater_Screen@dc_char2 00FE  
          Update_Setup_Heater_Screen@dc_char3 00FF                            __end_of_i2cHighSda 3E78  
                              __end_of___ftge 2B68                            __end_of_i2cHighScl 3E18  
                              __end_of___wmul 3A66                                 delay_ms@count 001B  
                                  _write_data 3DD0                                 __pidataCOMRAM 3E80  
                              __end_of_chkisr 2E3E                      ?_TFT_GreenTab_Initialize 0001  
                                 _I2C_ReStart 3C46                                    drawtext@bg 003E  
                       _Exit_Setup_Alarm_Time 3CAC                        ?_Activate_Buzzer_500Hz 0001  
                                   _Nec_code1 0051                                     _i2cLowSda 3E42  
                        _Do_Setup_Heater_Temp 2B68                                     _i2cLowScl 3E68  
                __size_of_Increase_Alarm_Time 004E                          __end_of_Wait_One_Sec 3BB4  
                              __end_of_printf 0D60                                  ??_Set_DC_RGB 0043  
                       __end_of_Increase_Time 2D1E                                __end_of_strcpy 39BA  
                              __end_of_strlen 38DC                                     _Nec_state 0052  
                         start_initialization 3044                        Update_Screen@neg_tempF 015B  
                          get_duty_cycle@diff 0017                               ??_Decrease_Time 0043  
                          get_duty_cycle@temp 0011                               ??_write_command 0013  
             __end_of_DS3231_Write_Alarm_Time 3044                                     _OpenUSART 3128  
              __size_of_DS3231_Turn_Off_Alarm 0052                  DS3231_Read_Alarm_Time@Device 0015  
               __end_of_DS3231_Turn_Off_Alarm 352A                              __CFG_OSC$INTIO67 000000  
                                 ??_I2C_Start 0011                             __size_of_Init_ADC 000E  
                                 ??_I2C_Write 0011                        _DS3231_Read_Alarm_Time 36B4  
                                    ??_i2cAck 0011                             __size_of_Rcmd2red 003E  
                         __size_of_fillScreen 001C       I2C_Write_Address_Read_One_Byte@Data_Ret 0015  
              __end_of_Do_Save_New_Alarm_Time 3C46                           __size_of_drawCircle 01AE  
                               _Go_Next_Field 3BE6                               _Activate_Buzzer 3D22  
                          __end_of_Set_DC_RGB 35CA                                      ??___ftge 0017  
                                    ??___wmul 0015                                  ?_Set_RPM_RGB 0041  
                                ??_Test_Alarm 0044                                 ?_Turn_Off_Fan 0001  
                                    ??_chkisr 0003                                   __pdataBANK0 0080  
                                 __pdataBANK1 0100                               setAddrWindow@x0 0017  
                             setAddrWindow@x1 0015                               setAddrWindow@y0 0014  
                             setAddrWindow@y1 0016                                      ??_printf 002B  
                            _DS1621_Read_Temp 391A                         ?_Do_Setup_Heater_Temp 0001  
                                    ??_strcpy 0015                                      ??_strlen 0013  
                                  ?_i2cLowSda 0001                                    ?_i2cLowScl 0001  
                         _Decrease_Alarm_Time 3618                                     _bcd_2_dec 39EA  
                           __size_of___ftpack 00C6                             __size_of___lbtoft 0026  
                     _Do_Save_New_Heater_Temp 3C84                                   __pbssCOMRAM 0044  
                  ??_I2C_Write_Cmd_Write_Data 0015                    __size_of_DS3231_Write_Time 0092  
                           __size_of___lwtoft 0026                               ??_setAddrWindow 0017  
                               __pcstackBANK0 00FD                                 __pcstackBANK1 0153  
                               _Go_Prev_Field 3BCE                               ??_Do_Setup_Time 0044  
                                   _dec_2_bcd 3198                               _Exit_Time_Setup 3DB0  
                                 ??_LCD_Reset 001D                                  _isdigit$3067 0012  
                           __size_of_delay_ms 0052                                 _Heater_SW_Txt 00D5  
                        _Increase_Heater_Temp 3C70                                      ?_Do_Init 0001  
                           __size_of_fillRect 004A                             __size_of_drawChar 0156  
                          __end_of_Test_Alarm 1A22                                    ?_OpenUSART 0011  
                            _DS3231_Read_Time 3200                           _Heater_Set_Temp_Txt 00BE  
                                    ?_i2cNack 0001                          ?_Decrease_Alarm_Time 0001  
                           __size_of_drawtext 010E                                 ?_Do_Beep_Good 0001  
                      ??_DS3231_Turn_On_Alarm 001B   __end_of_Update_Setup_Screen_Cursor_Backward 12E2  
__size_of_Update_Setup_Screen_Cursor_Backward 01B4         ??_Update_Setup_Screen_Cursor_Backward 002E  
        ?_Update_Setup_Screen_Cursor_Backward 0001           _Update_Setup_Screen_Cursor_Backward 112E  
                 __end_of_Do_Setup_Alarm_Time 28B8                                ?_Go_Next_Field 0001  
                            ___lwdiv@dividend 0011                                   I2C_Read@ack 0011  
                                   _bit_count 00FC                                     __pintcode 0008  
             __end_of_TFT_GreenTab_Initialize 3A3E                                ??_Turn_Off_Fan 0011  
                               __pmediumconst FCC8                                      ?___awdiv 0153  
                                   __ptext100 3AD8                                     __ptext101 3DFE  
                                   __ptext110 3796                                     __ptext102 3E2E  
                                   __ptext111 3E38                                     __ptext103 3B5E  
                                   __ptext120 3E4C                                     __ptext112 3D8E  
                                   __ptext104 3B3E                                     __ptext121 3E56  
                                   __ptext113 3C46                                     __ptext105 3BB4  
                                   __ptext122 1638                                     __ptext114 3E42  
                                   __ptext106 391A                                     __ptext123 3E78  
                                   __ptext115 3E68                                     __ptext107 38DC  
                                   __ptext116 3E70                                     __ptext108 3D6A  
                                   __ptext117 3E0C                                     __ptext109 3D7C  
                                   __ptext119 3E18                                      ?___awmod 003B  
                                    ?___ftdiv 002C                                      ?___ftmul 001D  
                                    ?___fttol 002C                       __size_of_get_duty_cycle 00D0  
                                   __tft_type 0055                                      ?___lwdiv 0011  
                          _I2C_Write_Cmd_Only 3BB4                                      ?___lwmod 0018  
                 __end_of_Go_Next_Alarm_Field 3C2E                DS3231_Turn_Off_Alarm@control_E 001D  
              DS3231_Turn_Off_Alarm@control_F 001E                            drawFastVLine@color 001A  
                                 ?_write_data 0001                        ?_Exit_Setup_Alarm_Time 0001  
                                   _drawPixel 39BA                                      ?_get_RPM 0041  
                           __size_of_spiwrite 0014                                    ?_bcd_2_dec 0001  
                      __size_of_Toggle_Heater 0012                           ?_I2C_Write_Cmd_Only 0013  
                           ?_force_nec_state0 0001                                      ?_isdigit 0001  
                                    _I2C_Init 3E2E                                      _I2C_Read 3796  
                              ?_Go_Prev_Field 0001                                      _I2C_Stop 3D6A  
                           _Initialize_Screen 0686                                __size_of_Rcmd1 0110  
                              __size_of_Rcmd3 00F2                  ??_Update_Setup_Heater_Screen 0043  
                                   _init_UART 3CFC                                    ?_dec_2_bcd 0041  
                          ??_force_nec_state0 0001                      I2C_Write_Cmd_Only@Device 0014  
                                   _hexpowers FEAE                            ?_Initialize_Screen 0001  
                            ___lwdiv@quotient 0015                                __size_of_putch 000E  
                                   _read_volt 30B8                         ?_Increase_Heater_Temp 0001  
    __end_of_I2C_Write_Address_Write_One_Byte 3B3E     __size_of_I2C_Write_Address_Write_One_Byte 0020  
          ??_I2C_Write_Address_Write_One_Byte 0015             ?_I2C_Write_Address_Write_One_Byte 0013  
            _I2C_Write_Address_Write_One_Byte 3B1E                       __end_of_Activate_Buzzer 3D34  
                       ??_Decrease_Alarm_Time 0043                                ___wmul@product 0015  
                              ??_Do_Beep_Good 0044                           ??_Initialize_Screen 0043  
                                _Select_Field 0054                                      _INT0_isr 1638  
                                    _INT1_isr 3E56                                      _INT2_isr 3E4C  
                        ??_I2C_Write_Cmd_Only 0014                                      _PIE1bits 000F9D  
                           ?_Do_Save_New_Time 0001                        __size_of_Update_Screen 066A  
                      DS3231_Read_Time@Device 0015                       DS3231_Write_Time@Device 015E  
                                    _PIR1bits 000F9E                                 _In_Time_Setup 00FA  
                          ??_Do_Save_New_Time 0043                         __size_of_Wait_One_Sec 001C  
                                   _setup_day 0067                             DS1621_Init@Device 0016  
                                   fillRect@h 0025                                     fillRect@i 002C  
                                   fillRect@w 0024                                     fillRect@x 002B  
                                   fillRect@y 0023                        ??_Do_Setup_Heater_Temp 015B  
                                   drawChar@c 002F                                     drawChar@i 0038  
                                   drawChar@j 0037                                     drawChar@x 0036  
                                   drawChar@y 002E                 __size_of_Activate_Buzzer_2KHz 0012  
                                  ?_drawPixel 0018                        __size_of_fillRectangle 00DC  
                   ??_Do_Save_New_Heater_Temp 0043                                    _ADCON0bits 000FC2  
                     __end_of_Exit_Time_Setup 3DC0                             ___wmul@multiplier 0011  
                   __end_of_Initialize_Screen 0A06                                   ??_i2cLowSda 0011  
                                 ??_i2cLowScl 0011                 DS3231_Read_Alarm_Time@Address 0014  
                                ??_fillScreen 0026              __size_of_DS3231_Write_Alarm_Time 007E  
                                ??_drawCircle 0024                                    printf@flag 0035  
                                  printf@prec 0032                               Set_RGB_Color@D3 0014  
                                  ?_init_UART 0001              __end_of_Update_Setup_Time_Screen 1638  
                                 _INTCON2bits 000FF1       __end_of_I2C_Write_Address_Read_One_Byte 3988  
    __size_of_I2C_Write_Address_Read_One_Byte 0032             ??_I2C_Write_Address_Read_One_Byte 0015  
            ?_I2C_Write_Address_Read_One_Byte 0014               _I2C_Write_Address_Read_One_Byte 3956  
                                 _INTCON3bits 000FF0                                     copy_data0 3070  
                                   copy_data1 3090                                     drawtext@i 0156  
                      __size_of_drawFastVLine 0088                                     drawtext@x 0153  
                                   drawtext@y 0039                                    ?_read_volt 003B  
                                    _Nec_code 00E3                                      _Init_ADC 3DFE  
                           write_command@cmd_ 0013    __end_of_Initialize_Setup_Alarm_Time_Screen 1E58  
 __size_of_Initialize_Setup_Alarm_Time_Screen 010C          ??_Initialize_Setup_Alarm_Time_Screen 0043  
         ?_Initialize_Setup_Alarm_Time_Screen 0001            _Initialize_Setup_Alarm_Time_Screen 1D4C  
                                 ??_OpenUSART 0013                                  ?_DS1621_Init 0001  
                                    _Rcmd2red 3860                              __size_of_Do_Init 005C  
                         __size_of_write_data 0010                                  ?_DS3231_Init 0001  
                             ??_Go_Next_Field 0031                               OpenUSART@config 0013  
      I2C_Write_Address_Write_One_Byte@Device 0015                                 _Toggle_Heater 3D10  
                                _Time_Elapsed 004A                           _Increase_Alarm_Time 35CA  
                            __size_of_i2cNack 000A                                 _RTC_ALARM_Txt 00E1  
                                _Wait_One_Sec 3B98                                      __Hrparam 0000  
                      __size_of_do_update_pwm 00B6                            __end_of_fillScreen 3B98  
                                    __Lrparam 0000                            __end_of_drawCircle 1490  
                                ?_Turn_On_Fan 0001                       ??_Activate_Buzzer_500Hz 0011  
                            __size_of___awdiv 00D0                              __size_of___awmod 0082  
                            __size_of___ftdiv 00E2                              __size_of___ftmul 00F8  
                            __size_of___fttol 00E6                              __size_of___lwdiv 005C  
                                    _Volt_Txt 00B8                              __size_of___lwmod 004C  
                        __size_of_Set_RPM_RGB 005E                                      ___ftpack 2734  
                                    ___lbtoft 3AB2                                  ?_I2C_ReStart 0001  
                             ??_Go_Prev_Field 0031                                      ___lwtoft 3A8C  
                            __size_of_get_RPM 0042                                   ??_bcd_2_dec 0011  
                        ?_Increase_Alarm_Time 0001                                 _Update_Screen 001C  
                            __size_of_isdigit 0022                                      _delay_ms 352A  
                             ___lwdiv@divisor 0013                                   ??_dec_2_bcd 00FD  
                             ___lwdiv@counter 0017                                      __ptext10 3486  
                                    __ptext11 34D8                                      __ptext20 3DA0  
                                    __ptext12 28B8                                      __ptext21 266A  
                                    __ptext13 3B1E                                      __ptext30 1490  
                                    __ptext22 1C40                                      __ptext14 3956  
                                    __ptext31 2B68                                      __ptext23 2C8E  
                                    __ptext15 3D22                                      __ptext40 39EA  
                                    __ptext32 1F50                                      __ptext24 3BCE  
                                    __ptext16 32C8                                      __ptext41 1D4C  
                                    __ptext33 3C70                                      __ptext25 3BE6  
                                    __ptext17 357C                                      __ptext50 3988  
                                    __ptext42 35CA                                      __ptext34 3DC0  
                                    __ptext26 3DB0                                      __ptext18 33DE  
                                    __ptext51 3B7C                                      __ptext43 3BFE  
                                    __ptext35 3C84                                      __ptext27 3C5C  
                                    __ptext19 24CA                                      __ptext60 2FC6  
                                    __ptext52 23EE                                      __ptext44 112E  
                                    __ptext36 3C98                                      __ptext28 2BFC  
                                    __ptext61 3198                                      __ptext53 12E2  
                                    __ptext45 3C16                                      __ptext37 2A26  
                                    __ptext29 2D1E                                      __ptext70 1E58  
                                    __ptext62 3200                                      __ptext54 3A14  
                                    __ptext46 0F74                                      __ptext38 27FA  
                                    __ptext71 230C                                      __ptext63 36B4  
                                    __ptext55 2042                                      __ptext47 3CAC  
                                    __ptext39 2F48                                      __ptext80 3AFC  
                                    __ptext72 2734                                      __ptext64 3CC0  
                                    __ptext56 3860                                      __ptext48 3C2E  
                                    __ptext81 3700                                      __ptext73 3B98  
                                    __ptext65 3D46                                      __ptext57 1A22  
                                    __ptext49 0686                                      __ptext90 3DD0  
                                    __ptext82 3326                                      __ptext74 3E60  
                                    __ptext66 3CD4                                      __ptext58 3D34  
                                    __ptext91 3DE0                                      __ptext83 1B32  
                                    __ptext75 3D58                                      __ptext67 2970  
                                    __ptext59 352A                                      __ptext92 3CE8  
                                    __ptext84 389E                                      __ptext76 3618  
                                    __ptext68 3AB2                                      __ptext93 3A3E  
                                    __ptext85 17AC                                      __ptext77 2134  
                                    __ptext69 2226                                      __ptext94 2EC6  
                                    __ptext86 374C                                      __ptext78 0A06  
                                    __ptext95 259A                                      __ptext87 2E3E  
                                    __ptext79 3DF0                                      __ptext96 3382  
                                    __ptext88 39BA                                      __ptext97 3CFC  
                                    __ptext89 3666                                      __ptext98 3128  
                                    __ptext99 3E24                        ??_Increase_Heater_Temp 0043  
                                    _fillRect 374C                                      _drawChar 17AC  
                        __end_of_Turn_Off_Fan 3E2E              __size_of_TFT_GreenTab_Initialize 002A  
               __size_of_Decrease_Heater_Temp 0014    __end_of_Update_Setup_Screen_Cursor_Forward 112E  
 __size_of_Update_Setup_Screen_Cursor_Forward 01BA          ??_Update_Setup_Screen_Cursor_Forward 002E  
         ?_Update_Setup_Screen_Cursor_Forward 0001            _Update_Setup_Screen_Cursor_Forward 0F74  
                                    _colstart 005A                   __end_of_Go_Prev_Alarm_Field 3C16  
                                    _drawtext 1B32                                    strcpy@from 0013  
                     ?_DS3231_Read_Alarm_Time 0001                                 _fillRectangle 23EE  
              DS3231_Write_Alarm_Time@Address 015F                                ?_Toggle_Heater 0001  
                    __end_of_DS1621_Read_Temp 3956                              ?_Activate_Buzzer 0001  
                               __size_of_main 0214                                 ??_Do_Beep_Bad 0044  
                     __size_of_Monitor_Heater 0054                         __end_of_Set_RGB_Color 3860  
                             fillRectangle@hi 0021                               fillRectangle@lo 0022  
               Update_Screen@neg_DS1621_tempC 015D                                _get_duty_cycle 24CA  
                               _drawFastVLine 2E3E                                     printf@idx 002F  
                                    _spiwrite 3CE8                                     printf@val 0033  
                           DS3231_Init@Device 001A                                   ??_drawPixel 001B  
                                    _rowstart 0062                      __end_of_DS3231_Read_Time 3264  
                       ??_Increase_Alarm_Time 0043                    __size_of_Initialize_Screen 0380  
                            ?_Exit_Time_Setup 0001                          __end_of_Do_Beep_Good 3CD4  
                              ?_Update_Screen 0001                                    _INTCONbits 000FF2  
          __end_of_Update_Setup_Heater_Screen 2AD2                    _Update_Setup_Heater_Screen 2A26  
                               _do_update_pwm 2970                                OpenUSART@spbrg 0011  
                                 ??_init_UART 0014                                      isdigit@c 0013  
              __end_of_DS3231_Read_Alarm_Time 3700                                   ??_read_volt 003E  
                                   spiwrite@x 0011                                      intlevel2 0000  
                              ?_fillRectangle 0018                         __end_of_Decrease_Time 2DAE  
                    _Update_Setup_Time_Screen 1490                              ___lwmod@dividend 0018  
                       __end_of_write_command 3DF0                               fillScreen@color 0024  
                       _DS3231_Turn_Off_Alarm 34D8                 DS3231_Write_Alarm_Time@Device 015E  
                     do_update_pwm@duty_cycle 0041                        __end_of_get_duty_cycle 259A  
                      __size_of_Increase_Time 0090                      _Select_Heater_Temp_Field 00FB  
                              fillRectangle@h 001A                                fillRectangle@w 0019  
                              fillRectangle@x 0023                                fillRectangle@y 0018  
                     ??_Exit_Setup_Alarm_Time 0043                                ?_drawFastVLine 0018  
                                    printf@ap 0030                      ??_Exit_Setup_Heater_Temp 0043  
                         __end_of_Do_Beep_Bad 3CE8                                  ??_write_data 0013  
                                  _TIMER1_isr 3E18                                 fillRect@color 0026  
                     _DS3231_Write_Alarm_Time 2FC6                                ?_do_update_pwm 0001  
                             ___lwmod@divisor 001A                                      strcpy@cp 0015  
                                    strlen@cp 0015                                      strcpy@to 0011  
                       I2C_Write_Cmd_Only@Cmd 0013                               ___lwmod@counter 001C  
                      Set_RPM_RGB@maskedValue 015E                                  _setup_minute 006A  
                                _setup_second 006C                       __size_of_Init_Interrupt 0024  
                             Set_RPM_RGB@mask 015D                         __end_of_setAddrWindow 36B4  
                       __end_of_Do_Setup_Time 2734                            fillRectangle@color 001B  
                             ??_Toggle_Heater 0044                             do_update_pwm@dc_I 0042  
                           do_update_pwm@dc_f 003E                                Set_RPM_RGB@RPM 015B  
                               drawChar@color 0030                                   _setup_month 006B  
                              Set_RPM_RGB@rpm 0041                            __end_of_write_data 3DE0  
                   __size_of_force_nec_state0 0008                                  drawChar@line 0035  
                               ?_get_full_ADC 0011                      ??_check_for_button_input 0039  
                                drawChar@size 0034             __size_of_I2C_Write_Cmd_Write_Data 0020  
                        __size_of_DS1621_Init 001E                     ?_I2C_Write_Cmd_Write_Data 0013  
                        __size_of_DS3231_Init 00B8                               ?_get_duty_cycle 0011  
               __size_of_DS3231_Turn_On_Alarm 0052        __end_of_Update_Setup_Alarm_Time_Screen 2226  
     __size_of_Update_Setup_Alarm_Time_Screen 00F2                _Update_Setup_Alarm_Time_Screen 2134  
