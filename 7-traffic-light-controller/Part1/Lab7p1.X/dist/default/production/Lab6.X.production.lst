

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Oct 16 23:12:26 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    45  0000                     
    46                           	psect	idataCOMRAM
    47  002F36                     __pidataCOMRAM:
    48                           	opt stack 0
    49                           
    50                           ;initializer for _array
    51  002F36  40                 	db	64
    52  002F37  79                 	db	121
    53  002F38  24                 	db	36
    54  002F39  30                 	db	48
    55  002F3A  19                 	db	25
    56  002F3B  12                 	db	18
    57  002F3C  02                 	db	2
    58  002F3D  78                 	db	120
    59  002F3E  00                 	db	0
    60  002F3F  10                 	db	16
    61                           
    62                           	psect	smallconst
    63  001000                     __psmallconst:
    64                           	opt stack 0
    65  001000  00                 	db	0
    66  001001                     _dpowers:
    67                           	opt stack 0
    68  001001  0001               	dw	1
    69  001003  0000               	dw	0
    70  001005  000A               	dw	10
    71  001007  0000               	dw	0
    72  001009  0064               	dw	100
    73  00100B  0000               	dw	0
    74  00100D  03E8               	dw	1000
    75  00100F  0000               	dw	0
    76  001011  2710               	dw	10000
    77  001013  0000               	dw	0
    78  001015  86A0               	dw	34464
    79  001017  0001               	dw	1
    80  001019  4240               	dw	16960
    81  00101B  000F               	dw	15
    82  00101D  9680               	dw	38528
    83  00101F  0098               	dw	152
    84  001021  E100               	dw	57600
    85  001023  05F5               	dw	1525
    86  001025  CA00               	dw	51712
    87  001027  3B9A               	dw	15258
    88  001029                     __end_of_dpowers:
    89                           	opt stack 0
    90  001029                     __npowers_:
    91                           	opt stack 0
    92  001029  00                 	db	0
    93  00102A  80                 	db	128
    94  00102B  3F                 	db	63
    95  00102C  CD                 	db	205
    96  00102D  CC                 	db	204
    97  00102E  3D                 	db	61
    98  00102F  D7                 	db	215
    99  001030  23                 	db	35
   100  001031  3C                 	db	60
   101  001032  12                 	db	18
   102  001033  83                 	db	131
   103  001034  3A                 	db	58
   104  001035  B7                 	db	183
   105  001036  D1                 	db	209
   106  001037  38                 	db	56
   107  001038  C6                 	db	198
   108  001039  27                 	db	39
   109  00103A  37                 	db	55
   110  00103B  38                 	db	56
   111  00103C  86                 	db	134
   112  00103D  35                 	db	53
   113  00103E  C0                 	db	192
   114  00103F  D6                 	db	214
   115  001040  33                 	db	51
   116  001041  CC                 	db	204
   117  001042  2B                 	db	43
   118  001043  32                 	db	50
   119  001044  70                 	db	112
   120  001045  89                 	db	137
   121  001046  30                 	db	48
   122  001047  E7                 	db	231
   123  001048  DB                 	db	219
   124  001049  2E                 	db	46
   125  00104A  E5                 	db	229
   126  00104B  3C                 	db	60
   127  00104C  1E                 	db	30
   128  00104D  42                 	db	66
   129  00104E  A2                 	db	162
   130  00104F  0D                 	db	13
   131  001050                     __end_of__npowers_:
   132                           	opt stack 0
   133  001050                     __powers_:
   134                           	opt stack 0
   135  001050  00                 	db	0
   136  001051  80                 	db	128
   137  001052  3F                 	db	63
   138  001053  00                 	db	0
   139  001054  20                 	db	32
   140  001055  41                 	db	65
   141  001056  00                 	db	0
   142  001057  C8                 	db	200
   143  001058  42                 	db	66
   144  001059  00                 	db	0
   145  00105A  7A                 	db	122
   146  00105B  44                 	db	68
   147  00105C  40                 	db	64
   148  00105D  1C                 	db	28
   149  00105E  46                 	db	70
   150  00105F  50                 	db	80
   151  001060  C3                 	db	195
   152  001061  47                 	db	71
   153  001062  24                 	db	36
   154  001063  74                 	db	116
   155  001064  49                 	db	73
   156  001065  97                 	db	151
   157  001066  18                 	db	24
   158  001067  4B                 	db	75
   159  001068  BC                 	db	188
   160  001069  BE                 	db	190
   161  00106A  4C                 	db	76
   162  00106B  6B                 	db	107
   163  00106C  6E                 	db	110
   164  00106D  4E                 	db	78
   165  00106E  03                 	db	3
   166  00106F  15                 	db	21
   167  001070  50                 	db	80
   168  001071  79                 	db	121
   169  001072  AD                 	db	173
   170  001073  60                 	db	96
   171  001074  F3                 	db	243
   172  001075  49                 	db	73
   173  001076  71                 	db	113
   174  001077                     __end_of__powers_:
   175                           	opt stack 0
   176  0000                     _ADCON0	set	4034
   177  0000                     _ADCON0bits	set	4034
   178  0000                     _ADCON1	set	4033
   179  0000                     _ADCON2	set	4032
   180  0000                     _ADRESH	set	4036
   181  0000                     _ADRESL	set	4035
   182  0000                     _INTCONbits	set	4082
   183  0000                     _OSCCON	set	4051
   184  0000                     _PIE1bits	set	3997
   185  0000                     _PIR1bits	set	3998
   186  0000                     _PORTB	set	3969
   187  0000                     _PORTC	set	3970
   188  0000                     _PORTD	set	3971
   189  0000                     _PORTDbits	set	3971
   190  0000                     _PORTE	set	3972
   191  0000                     _RCSTA	set	4011
   192  0000                     _RCSTAbits	set	4011
   193  0000                     _SPBRG	set	4015
   194  0000                     _SPBRGH	set	4016
   195  0000                     _T0CON	set	4053
   196  0000                     _T0CONbits	set	4053
   197  0000                     _TMR0H	set	4055
   198  0000                     _TMR0L	set	4054
   199  0000                     _TRISA	set	3986
   200  0000                     _TRISB	set	3987
   201  0000                     _TRISC	set	3988
   202  0000                     _TRISCbits	set	3988
   203  0000                     _TRISD	set	3989
   204  0000                     _TRISE	set	3990
   205  0000                     _TXREG	set	4013
   206  0000                     _TXSTA	set	4012
   207  0000                     _TXSTAbits	set	4012
   208  0000                     _TRMT	set	32097
   209  001077                     STR_1:
   210  001077  54                 	db	84	;'T'
   211  001078  68                 	db	104	;'h'
   212  001079  65                 	db	101	;'e'
   213  00107A  20                 	db	32
   214  00107B  56                 	db	86	;'V'
   215  00107C  6F                 	db	111	;'o'
   216  00107D  6C                 	db	108	;'l'
   217  00107E  74                 	db	116	;'t'
   218  00107F  61                 	db	97	;'a'
   219  001080  67                 	db	103	;'g'
   220  001081  65                 	db	101	;'e'
   221  001082  20                 	db	32
   222  001083  69                 	db	105	;'i'
   223  001084  73                 	db	115	;'s'
   224  001085  20                 	db	32
   225  001086  25                 	db	37
   226  001087  30                 	db	48	;'0'
   227  001088  2E                 	db	46
   228  001089  33                 	db	51	;'3'
   229  00108A  66                 	db	102	;'f'
   230  00108B  0D                 	db	13
   231  00108C  0A                 	db	10
   232  00108D  00                 	db	0
   233  00108E                     STR_2:
   234  00108E  72                 	db	114	;'r'
   235  00108F  6F                 	db	111	;'o'
   236  001090  6F                 	db	111	;'o'
   237  001091  74                 	db	116	;'t'
   238  001092  20                 	db	32
   239  001093  25                 	db	37
   240  001094  64                 	db	100	;'d'
   241  001095  0D                 	db	13
   242  001096  0A                 	db	10
   243  001097  0A                 	db	10
   244  001098  00                 	db	0
   245                           
   246                           ; #config settings
   247  001099  00                 	db	0	; dummy byte at the end
   248  0000                     
   249                           	psect	cinit
   250  002DDA                     __pcinit:
   251                           	opt stack 0
   252  002DDA                     start_initialization:
   253                           	opt stack 0
   254  002DDA                     __initialization:
   255                           	opt stack 0
   256                           
   257                           ; Initialize objects allocated to COMRAM (10 bytes)
   258                           ; load TBLPTR registers with __pidataCOMRAM
   259  002DDA  0E36               	movlw	low __pidataCOMRAM
   260  002DDC  6EF6               	movwf	tblptrl,c
   261  002DDE  0E2F               	movlw	high __pidataCOMRAM
   262  002DE0  6EF7               	movwf	tblptrh,c
   263  002DE2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   264  002DE4  6EF8               	movwf	tblptru,c
   265  002DE6  EE00  F06A         	lfsr	0,__pdataCOMRAM
   266  002DEA  EE10 F00A          	lfsr	1,10
   267  002DEE                     copy_data0:
   268  002DEE  0009               	tblrd		*+
   269  002DF0  CFF5 FFEE          	movff	tablat,postinc0
   270  002DF4  50E5               	movf	postdec1,w,c
   271  002DF6  50E1               	movf	fsr1l,w,c
   272  002DF8  E1FA               	bnz	copy_data0
   273  002DFA                     end_of_initialization:
   274                           	opt stack 0
   275  002DFA                     __end_of__initialization:
   276                           	opt stack 0
   277  002DFA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   278  002DFC  6EF8               	movwf	tblptru,c
   279  002DFE  0100               	movlb	0
   280  002E00  EF6F  F011         	goto	_main	;jump to C main() function
   281                           tblptru	equ	0xFF8
   282                           tblptrh	equ	0xFF7
   283                           tblptrl	equ	0xFF6
   284                           tablat	equ	0xFF5
   285                           postinc0	equ	0xFEE
   286                           postdec1	equ	0xFE5
   287                           fsr1l	equ	0xFE1
   288                           
   289                           	psect	dataCOMRAM
   290  00006A                     __pdataCOMRAM:
   291                           	opt stack 0
   292  00006A                     _array:
   293                           	opt stack 0
   294  00006A                     	ds	10
   295                           tblptru	equ	0xFF8
   296                           tblptrh	equ	0xFF7
   297                           tblptrl	equ	0xFF6
   298                           tablat	equ	0xFF5
   299                           postinc0	equ	0xFEE
   300                           postdec1	equ	0xFE5
   301                           fsr1l	equ	0xFE1
   302                           
   303                           	psect	cstackCOMRAM
   304  000001                     __pcstackCOMRAM:
   305                           	opt stack 0
   306  000001                     ??_BCD_DP:
   307  000001                     ??_isdigit:
   308  000001                     ?_get_full_ADC:
   309                           	opt stack 0
   310  000001                     ?___awdiv:
   311                           	opt stack 0
   312  000001                     ?___ftpack:
   313                           	opt stack 0
   314  000001                     ?___ftneg:
   315                           	opt stack 0
   316  000001                     ?__tdiv_to_l_:
   317                           	opt stack 0
   318  000001                     ?__div_to_l_:
   319                           	opt stack 0
   320  000001                     ?___lldiv:
   321                           	opt stack 0
   322  000001                     putch@c:
   323                           	opt stack 0
   324  000001                     Select_ADC_Channel@channel:
   325                           	opt stack 0
   326  000001                     BCD_Upper_Digit@Port_E:
   327                           	opt stack 0
   328  000001                     BCD_Lower_Digit@digit:
   329                           	opt stack 0
   330  000001                     OpenUSART@spbrg:
   331                           	opt stack 0
   332  000001                     ___awdiv@dividend:
   333                           	opt stack 0
   334  000001                     __div_to_l_@f1:
   335                           	opt stack 0
   336  000001                     ___ftpack@arg:
   337                           	opt stack 0
   338  000001                     __tdiv_to_l_@f1:
   339                           	opt stack 0
   340  000001                     ___ftge@ff1:
   341                           	opt stack 0
   342  000001                     ___ftneg@f1:
   343                           	opt stack 0
   344  000001                     ___lldiv@dividend:
   345                           	opt stack 0
   346                           
   347                           ; 4 bytes @ 0x0
   348  000001                     	ds	1
   349  000002                     BCD_Upper_Digit@digit:
   350                           	opt stack 0
   351  000002                     BCD_DP@dp:
   352                           	opt stack 0
   353  000002                     _isdigit$1032:
   354                           	opt stack 0
   355                           
   356                           ; 1 bytes @ 0x1
   357  000002                     	ds	1
   358  000003                     ??_get_full_ADC:
   359  000003                     OpenUSART@config:
   360                           	opt stack 0
   361  000003                     isdigit@c:
   362                           	opt stack 0
   363  000003                     ___awdiv@divisor:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x2
   367  000003                     	ds	1
   368  000004                     ___ftpack@exp:
   369                           	opt stack 0
   370  000004                     __div_to_l_@f2:
   371                           	opt stack 0
   372  000004                     __tdiv_to_l_@f2:
   373                           	opt stack 0
   374  000004                     ___ftge@ff2:
   375                           	opt stack 0
   376                           
   377                           ; 3 bytes @ 0x3
   378  000004                     	ds	1
   379  000005                     ___awdiv@counter:
   380                           	opt stack 0
   381  000005                     ___ftpack@sign:
   382                           	opt stack 0
   383  000005                     get_full_ADC@result:
   384                           	opt stack 0
   385  000005                     ___lldiv@divisor:
   386                           	opt stack 0
   387                           
   388                           ; 4 bytes @ 0x4
   389  000005                     	ds	1
   390  000006                     ??___ftpack:
   391  000006                     ___awdiv@sign:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x5
   395  000006                     	ds	1
   396  000007                     ??__tdiv_to_l_:
   397  000007                     ??___ftge:
   398  000007                     ___awdiv@quotient:
   399                           	opt stack 0
   400  000007                     __div_to_l_@quot:
   401                           	opt stack 0
   402                           
   403                           ; 4 bytes @ 0x6
   404  000007                     	ds	2
   405  000009                     ?___awmod:
   406                           	opt stack 0
   407  000009                     ?___awtoft:
   408                           	opt stack 0
   409  000009                     ?___lltoft:
   410                           	opt stack 0
   411  000009                     ___awmod@dividend:
   412                           	opt stack 0
   413  000009                     ___awtoft@c:
   414                           	opt stack 0
   415  000009                     ___lldiv@quotient:
   416                           	opt stack 0
   417  000009                     ___lltoft@c:
   418                           	opt stack 0
   419                           
   420                           ; 4 bytes @ 0x8
   421  000009                     	ds	1
   422  00000A                     __tdiv_to_l_@quot:
   423                           	opt stack 0
   424                           
   425                           ; 4 bytes @ 0x9
   426  00000A                     	ds	1
   427  00000B                     __div_to_l_@cntr:
   428                           	opt stack 0
   429  00000B                     ___awmod@divisor:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0xA
   433  00000B                     	ds	1
   434  00000C                     ___awtoft@sign:
   435                           	opt stack 0
   436  00000C                     __div_to_l_@exp1:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0xB
   440  00000C                     	ds	1
   441  00000D                     ??___lltoft:
   442  00000D                     ?___ftdiv:
   443                           	opt stack 0
   444  00000D                     ___awmod@counter:
   445                           	opt stack 0
   446  00000D                     ___lldiv@counter:
   447                           	opt stack 0
   448  00000D                     ___ftdiv@f1:
   449                           	opt stack 0
   450                           
   451                           ; 3 bytes @ 0xC
   452  00000D                     	ds	1
   453  00000E                     ?___llmod:
   454                           	opt stack 0
   455  00000E                     ___awmod@sign:
   456                           	opt stack 0
   457  00000E                     __tdiv_to_l_@cntr:
   458                           	opt stack 0
   459  00000E                     ___llmod@dividend:
   460                           	opt stack 0
   461                           
   462                           ; 4 bytes @ 0xD
   463  00000E                     	ds	1
   464  00000F                     ?___wmul:
   465                           	opt stack 0
   466  00000F                     __tdiv_to_l_@exp1:
   467                           	opt stack 0
   468  00000F                     ___wmul@multiplier:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0xE
   472  00000F                     	ds	1
   473  000010                     ___ftdiv@f2:
   474                           	opt stack 0
   475                           
   476                           ; 3 bytes @ 0xF
   477  000010                     	ds	1
   478  000011                     ___lltoft@exp:
   479                           	opt stack 0
   480  000011                     ___wmul@multiplicand:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x10
   484  000011                     	ds	1
   485  000012                     ___llmod@divisor:
   486                           	opt stack 0
   487                           
   488                           ; 4 bytes @ 0x11
   489  000012                     	ds	1
   490  000013                     ??___ftdiv:
   491  000013                     ___wmul@product:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x12
   495  000013                     	ds	2
   496  000015                     ?___ftmul:
   497                           	opt stack 0
   498  000015                     ___ftmul@f1:
   499                           	opt stack 0
   500                           
   501                           ; 3 bytes @ 0x14
   502  000015                     	ds	1
   503  000016                     ___ftdiv@cntr:
   504                           	opt stack 0
   505  000016                     ___llmod@counter:
   506                           	opt stack 0
   507                           
   508                           ; 1 bytes @ 0x15
   509  000016                     	ds	1
   510  000017                     ___ftdiv@f3:
   511                           	opt stack 0
   512                           
   513                           ; 3 bytes @ 0x16
   514  000017                     	ds	1
   515  000018                     ___ftmul@f2:
   516                           	opt stack 0
   517                           
   518                           ; 3 bytes @ 0x17
   519  000018                     	ds	2
   520  00001A                     ___ftdiv@exp:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x19
   524  00001A                     	ds	1
   525  00001B                     ??___ftmul:
   526  00001B                     ___ftdiv@sign:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x1A
   530  00001B                     	ds	3
   531  00001E                     ___ftmul@exp:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x1D
   535  00001E                     	ds	1
   536  00001F                     ___ftmul@f3_as_product:
   537                           	opt stack 0
   538                           
   539                           ; 3 bytes @ 0x1E
   540  00001F                     	ds	3
   541  000022                     ___ftmul@cntr:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0x21
   545  000022                     	ds	1
   546  000023                     ___ftmul@sign:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0x22
   550  000023                     	ds	1
   551  000024                     ?_fround:
   552                           	opt stack 0
   553  000024                     ?_scale:
   554                           	opt stack 0
   555                           
   556                           ; 3 bytes @ 0x23
   557  000024                     	ds	3
   558  000027                     _fround$1262:
   559                           	opt stack 0
   560  000027                     _scale$1263:
   561                           	opt stack 0
   562                           
   563                           ; 3 bytes @ 0x26
   564  000027                     	ds	3
   565  00002A                     scale@scl:
   566                           	opt stack 0
   567  00002A                     _fround$1261:
   568                           	opt stack 0
   569                           
   570                           ; 3 bytes @ 0x29
   571  00002A                     	ds	1
   572  00002B                     ?___fttol:
   573                           	opt stack 0
   574  00002B                     ___fttol@f1:
   575                           	opt stack 0
   576                           
   577                           ; 3 bytes @ 0x2A
   578  00002B                     	ds	2
   579  00002D                     fround@prec:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x2C
   583  00002D                     	ds	1
   584  00002E                     ?___ftadd:
   585                           	opt stack 0
   586  00002E                     ___ftadd@f1:
   587                           	opt stack 0
   588                           
   589                           ; 3 bytes @ 0x2D
   590  00002E                     	ds	1
   591  00002F                     ??___fttol:
   592                           
   593                           ; 0 bytes @ 0x2E
   594  00002F                     	ds	2
   595  000031                     ___ftadd@f2:
   596                           	opt stack 0
   597                           
   598                           ; 3 bytes @ 0x30
   599  000031                     	ds	3
   600  000034                     ??___ftadd:
   601  000034                     ___fttol@sign1:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0x33
   605  000034                     	ds	1
   606  000035                     ___fttol@lval:
   607                           	opt stack 0
   608                           
   609                           ; 4 bytes @ 0x34
   610  000035                     	ds	2
   611  000037                     ___ftadd@sign:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x36
   615  000037                     	ds	1
   616  000038                     ___ftadd@exp2:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x37
   620  000038                     	ds	1
   621  000039                     ___ftadd@exp1:
   622                           	opt stack 0
   623  000039                     ___fttol@exp1:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0x38
   627  000039                     	ds	1
   628  00003A                     ?___ftsub:
   629                           	opt stack 0
   630  00003A                     ___ftsub@f1:
   631                           	opt stack 0
   632                           
   633                           ; 3 bytes @ 0x39
   634  00003A                     	ds	3
   635  00003D                     ___ftsub@f2:
   636                           	opt stack 0
   637                           
   638                           ; 3 bytes @ 0x3C
   639  00003D                     	ds	3
   640  000040                     ?_printf:
   641                           	opt stack 0
   642  000040                     printf@f:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x3F
   646  000040                     	ds	5
   647  000045                     ??_printf:
   648                           
   649                           ; 0 bytes @ 0x44
   650  000045                     	ds	6
   651  00004B                     _printf$1264:
   652                           	opt stack 0
   653                           
   654                           ; 3 bytes @ 0x4A
   655  00004B                     	ds	3
   656  00004E                     printf@ap:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x4D
   660  00004E                     	ds	2
   661  000050                     printf@tmpval:
   662                           	opt stack 0
   663                           
   664                           ; 4 bytes @ 0x4F
   665  000050                     	ds	4
   666  000054                     printf@val:
   667                           	opt stack 0
   668                           
   669                           ; 4 bytes @ 0x53
   670  000054                     	ds	4
   671  000058                     printf@exp:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x57
   675  000058                     	ds	2
   676  00005A                     printf@flag:
   677                           	opt stack 0
   678                           
   679                           ; 2 bytes @ 0x59
   680  00005A                     	ds	2
   681  00005C                     printf@width:
   682                           	opt stack 0
   683                           
   684                           ; 2 bytes @ 0x5B
   685  00005C                     	ds	2
   686  00005E                     printf@fval:
   687                           	opt stack 0
   688                           
   689                           ; 3 bytes @ 0x5D
   690  00005E                     	ds	3
   691  000061                     printf@prec:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x60
   695  000061                     	ds	2
   696  000063                     printf@c:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0x62
   700  000063                     	ds	1
   701  000064                     ??_main:
   702                           
   703                           ; 0 bytes @ 0x63
   704  000064                     	ds	2
   705  000066                     main@num_step:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x65
   709  000066                     	ds	2
   710  000068                     main@voltage_mv:
   711                           	opt stack 0
   712                           
   713                           ; 2 bytes @ 0x67
   714  000068                     	ds	2
   715                           tblptru	equ	0xFF8
   716                           tblptrh	equ	0xFF7
   717                           tblptrl	equ	0xFF6
   718                           tablat	equ	0xFF5
   719                           postinc0	equ	0xFEE
   720                           postdec1	equ	0xFE5
   721                           fsr1l	equ	0xFE1
   722                           
   723 ;;
   724 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   725 ;;
   726 ;; *************** function _main *****************
   727 ;; Defined at:
   728 ;;		line 29 in file "Lab6pA.c"
   729 ;; Parameters:    Size  Location     Type
   730 ;;		None
   731 ;; Auto vars:     Size  Location     Type
   732 ;;  voltage_mv      2  103[COMRAM] int 
   733 ;;  num_step        2  101[COMRAM] int 
   734 ;; Return value:  Size  Location     Type
   735 ;;		None               void
   736 ;; Registers used:
   737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   738 ;; Tracked objects:
   739 ;;		On entry : 0/0
   740 ;;		On exit  : 0/0
   741 ;;		Unchanged: 0/0
   742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   744 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   745 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   746 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   747 ;;Total ram usage:        6 bytes
   748 ;; Hardware stack levels required when called:    4
   749 ;; This function calls:
   750 ;;		_BCD_DP
   751 ;;		_BCD_Lower_Digit
   752 ;;		_BCD_Upper_Digit
   753 ;;		_Init_ADC
   754 ;;		_Init_TRIS
   755 ;;		_Select_ADC_Channel
   756 ;;		_WAIT_HALF_SEC
   757 ;;		___awdiv
   758 ;;		___awmod
   759 ;;		___awtoft
   760 ;;		___ftdiv
   761 ;;		_get_full_ADC
   762 ;;		_init_UART
   763 ;;		_printf
   764 ;; This function is called by:
   765 ;;		Startup code after reset
   766 ;; This function uses a non-reentrant model
   767 ;;
   768                           
   769                           	psect	text0
   770  0022DE                     __ptext0:
   771                           	opt stack 0
   772  0022DE                     _main:
   773                           	opt stack 27
   774                           
   775                           ;Lab6pA.c: 31: OSCCON = 0x60;
   776                           
   777                           ;incstack = 0
   778  0022DE  0E60               	movlw	96
   779  0022E0  6ED3               	movwf	4051,c	;volatile
   780                           
   781                           ;Lab6pA.c: 33: PORTB = 0x00;
   782  0022E2  0E00               	movlw	0
   783  0022E4  6E81               	movwf	3969,c	;volatile
   784                           
   785                           ;Lab6pA.c: 34: PORTC = 0xFF;
   786  0022E6  6882               	setf	3970,c	;volatile
   787                           
   788                           ;Lab6pA.c: 35: PORTD = 0xFF;
   789  0022E8  6883               	setf	3971,c	;volatile
   790                           
   791                           ;Lab6pA.c: 36: PORTE = 0xFF;
   792  0022EA  6884               	setf	3972,c	;volatile
   793                           
   794                           ;Lab6pA.c: 38: Init_ADC();
   795  0022EC  EC8E  F017         	call	_Init_ADC	;wreg free
   796                           
   797                           ;Lab6pA.c: 39: init_UART();
   798  0022F0  EC7D  F017         	call	_init_UART	;wreg free
   799                           
   800                           ;Lab6pA.c: 40: Init_TRIS();
   801  0022F4  EC72  F017         	call	_Init_TRIS	;wreg free
   802                           
   803                           ;Lab6pA.c: 42: Select_ADC_Channel(0);
   804  0022F8  0E00               	movlw	0
   805  0022FA  EC95  F017         	call	_Select_ADC_Channel
   806  0022FE  D000               	goto	l2977
   807  002300                     l2977:
   808                           
   809                           ;Lab6pA.c: 45: {
   810                           ;Lab6pA.c: 46: int num_step = get_full_ADC();
   811  002300  EC16  F017         	call	_get_full_ADC	;wreg free
   812  002304  C001  F066         	movff	?_get_full_ADC,main@num_step
   813  002308  C002  F067         	movff	?_get_full_ADC+1,main@num_step+1
   814                           
   815                           ;Lab6pA.c: 47: int voltage_mv = num_step * 4;
   816  00230C  C066  F064         	movff	main@num_step,??_main
   817  002310  C067  F065         	movff	main@num_step+1,??_main+1
   818  002314  90D8               	bcf	status,0,c
   819  002316  3664               	rlcf	??_main,f,c
   820  002318  3665               	rlcf	??_main+1,f,c
   821  00231A  90D8               	bcf	status,0,c
   822  00231C  3664               	rlcf	??_main,f,c
   823  00231E  3665               	rlcf	??_main+1,f,c
   824  002320  C064  F068         	movff	??_main,main@voltage_mv
   825  002324  C065  F069         	movff	??_main+1,main@voltage_mv+1
   826                           
   827                           ;Lab6pA.c: 49: printf ("The Voltage is %0.3f\r\n", voltage_mv/1000.0 );
   828  002328  0E77               	movlw	low STR_1
   829  00232A  6E40               	movwf	printf@f,c
   830  00232C  0E10               	movlw	high STR_1
   831  00232E  6E41               	movwf	printf@f+1,c
   832  002330  C068  F009         	movff	main@voltage_mv,___awtoft@c
   833  002334  C069  F00A         	movff	main@voltage_mv+1,___awtoft@c+1
   834  002338  ECCF  F016         	call	___awtoft	;wreg free
   835  00233C  C009  F00D         	movff	?___awtoft,___ftdiv@f1
   836  002340  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
   837  002344  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
   838  002348  0E00               	movlw	0
   839  00234A  6E10               	movwf	___ftdiv@f2,c
   840  00234C  0E7A               	movlw	122
   841  00234E  6E11               	movwf	___ftdiv@f2+1,c
   842  002350  0E44               	movlw	68
   843  002352  6E12               	movwf	___ftdiv@f2+2,c
   844  002354  ECFD  F013         	call	___ftdiv	;wreg free
   845  002358  C00D  F042         	movff	?___ftdiv,?_printf+2
   846  00235C  C00E  F043         	movff	?___ftdiv+1,?_printf+3
   847  002360  C00F  F044         	movff	?___ftdiv+2,?_printf+4
   848  002364  EC4D  F008         	call	_printf	;wreg free
   849                           
   850                           ;Lab6pA.c: 52: printf ("root %d\r\n\n", voltage_mv );
   851  002368  0E8E               	movlw	low STR_2
   852  00236A  6E40               	movwf	printf@f,c
   853  00236C  0E10               	movlw	high STR_2
   854  00236E  6E41               	movwf	printf@f+1,c
   855  002370  C068  F042         	movff	main@voltage_mv,?_printf+2
   856  002374  C069  F043         	movff	main@voltage_mv+1,?_printf+3
   857  002378  EC4D  F008         	call	_printf	;wreg free
   858                           
   859                           ;Lab6pA.c: 54: BCD_Upper_Digit(voltage_mv/1000);
   860  00237C  C068  F001         	movff	main@voltage_mv,___awdiv@dividend
   861  002380  C069  F002         	movff	main@voltage_mv+1,___awdiv@dividend+1
   862  002384  0E03               	movlw	3
   863  002386  6E04               	movwf	___awdiv@divisor+1,c
   864  002388  0EE8               	movlw	232
   865  00238A  6E03               	movwf	___awdiv@divisor,c
   866  00238C  ECD1  F014         	call	___awdiv	;wreg free
   867  002390  5001               	movf	?___awdiv,w,c
   868  002392  ECB0  F016         	call	_BCD_Upper_Digit
   869                           
   870                           ;Lab6pA.c: 56: if (voltage_mv < 1000)
   871  002396  BE69               	btfsc	main@voltage_mv+1,7,c
   872  002398  D006               	goto	l2989
   873  00239A  0EE8               	movlw	232
   874  00239C  5C68               	subwf	main@voltage_mv,w,c
   875  00239E  0E03               	movlw	3
   876  0023A0  5869               	subwfb	main@voltage_mv+1,w,c
   877  0023A2  B0D8               	btfsc	status,0,c
   878  0023A4  D00E               	goto	l2991
   879  0023A6                     l2989:
   880                           
   881                           ;Lab6pA.c: 57: {
   882                           ;Lab6pA.c: 58: BCD_Lower_Digit(voltage_mv/100);
   883  0023A6  C068  F001         	movff	main@voltage_mv,___awdiv@dividend
   884  0023AA  C069  F002         	movff	main@voltage_mv+1,___awdiv@dividend+1
   885  0023AE  0E00               	movlw	0
   886  0023B0  6E04               	movwf	___awdiv@divisor+1,c
   887  0023B2  0E64               	movlw	100
   888  0023B4  6E03               	movwf	___awdiv@divisor,c
   889  0023B6  ECD1  F014         	call	___awdiv	;wreg free
   890  0023BA  5001               	movf	?___awdiv,w,c
   891  0023BC  EC59  F017         	call	_BCD_Lower_Digit
   892                           
   893                           ;Lab6pA.c: 59: }
   894  0023C0  D018               	goto	l2993
   895  0023C2                     l2991:
   896                           
   897                           ;Lab6pA.c: 60: else BCD_Lower_Digit((voltage_mv/100)%10);
   898  0023C2  0E00               	movlw	0
   899  0023C4  6E04               	movwf	___awdiv@divisor+1,c
   900  0023C6  0E64               	movlw	100
   901  0023C8  6E03               	movwf	___awdiv@divisor,c
   902  0023CA  C068  F001         	movff	main@voltage_mv,___awdiv@dividend
   903  0023CE  C069  F002         	movff	main@voltage_mv+1,___awdiv@dividend+1
   904  0023D2  ECD1  F014         	call	___awdiv	;wreg free
   905  0023D6  C001  F009         	movff	?___awdiv,___awmod@dividend
   906  0023DA  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
   907  0023DE  0E00               	movlw	0
   908  0023E0  6E0C               	movwf	___awmod@divisor+1,c
   909  0023E2  0E0A               	movlw	10
   910  0023E4  6E0B               	movwf	___awmod@divisor,c
   911  0023E6  ECAD  F015         	call	___awmod	;wreg free
   912  0023EA  5009               	movf	?___awmod,w,c
   913  0023EC  EC59  F017         	call	_BCD_Lower_Digit
   914  0023F0  D000               	goto	l2993
   915  0023F2                     l2993:
   916                           
   917                           ;Lab6pA.c: 61: BCD_DP (1);
   918  0023F2  0E01               	movlw	1
   919  0023F4  EC66  F017         	call	_BCD_DP
   920                           
   921                           ;Lab6pA.c: 62: WAIT_HALF_SEC();
   922  0023F8  EC4C  F017         	call	_WAIT_HALF_SEC	;wreg free
   923  0023FC  D781               	goto	l2977
   924  0023FE  EF00  F000         	goto	start
   925  002402                     __end_of_main:
   926                           	opt stack 0
   927                           tblptru	equ	0xFF8
   928                           tblptrh	equ	0xFF7
   929                           tblptrl	equ	0xFF6
   930                           tablat	equ	0xFF5
   931                           postinc0	equ	0xFEE
   932                           postdec1	equ	0xFE5
   933                           fsr1l	equ	0xFE1
   934                           status	equ	0xFD8
   935                           
   936 ;; *************** function _printf *****************
   937 ;; Defined at:
   938 ;;		line 464 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;  f               2   63[COMRAM] PTR const unsigned char 
   941 ;;		 -> STR_2(11), STR_1(23), 
   942 ;; Auto vars:     Size  Location     Type
   943 ;;  val             4   83[COMRAM] unsigned long 
   944 ;;  tmpval          4   79[COMRAM] struct .
   945 ;;  fval            3   93[COMRAM] struct .
   946 ;;  cp              3    0        PTR const unsigned char 
   947 ;;  prec            2   96[COMRAM] int 
   948 ;;  width           2   91[COMRAM] int 
   949 ;;  flag            2   89[COMRAM] unsigned short 
   950 ;;  exp             2   87[COMRAM] int 
   951 ;;  ap              2   77[COMRAM] PTR void [1]
   952 ;;		 -> ?_printf(2), 
   953 ;;  len             2    0        unsigned int 
   954 ;;  c               1   98[COMRAM] char 
   955 ;;  d               1    0        unsigned char 
   956 ;; Return value:  Size  Location     Type
   957 ;;                  2   63[COMRAM] int 
   958 ;; Registers used:
   959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   960 ;; Tracked objects:
   961 ;;		On entry : 0/0
   962 ;;		On exit  : 0/0
   963 ;;		Unchanged: 0/0
   964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   965 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   966 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   967 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   968 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   969 ;;Total ram usage:       36 bytes
   970 ;; Hardware stack levels used:    1
   971 ;; Hardware stack levels required when called:    3
   972 ;; This function calls:
   973 ;;		___awdiv
   974 ;;		___ftadd
   975 ;;		___ftge
   976 ;;		___ftmul
   977 ;;		___ftneg
   978 ;;		___ftsub
   979 ;;		___fttol
   980 ;;		___lldiv
   981 ;;		___llmod
   982 ;;		___lltoft
   983 ;;		___wmul
   984 ;;		__div_to_l_
   985 ;;		__tdiv_to_l_
   986 ;;		_fround
   987 ;;		_isdigit
   988 ;;		_putch
   989 ;;		_scale
   990 ;; This function is called by:
   991 ;;		_main
   992 ;; This function uses a non-reentrant model
   993 ;;
   994                           
   995                           	psect	text1
   996  00109A                     __ptext1:
   997                           	opt stack 0
   998  00109A                     _printf:
   999                           	opt stack 27
  1000                           
  1001                           ;doprnt.c: 466: va_list ap;
  1002                           ;doprnt.c: 499: signed char c;
  1003                           ;doprnt.c: 501: int width;
  1004                           ;doprnt.c: 504: int prec;
  1005                           ;doprnt.c: 508: unsigned short flag;
  1006                           ;doprnt.c: 515: char d;
  1007                           ;doprnt.c: 516: double fval;
  1008                           ;doprnt.c: 517: int exp;
  1009                           ;doprnt.c: 523: union {
  1010                           ;doprnt.c: 524: unsigned long vd;
  1011                           ;doprnt.c: 525: double integ;
  1012                           ;doprnt.c: 526: } tmpval;
  1013                           ;doprnt.c: 528: unsigned long val;
  1014                           ;doprnt.c: 529: unsigned len;
  1015                           ;doprnt.c: 530: const char * cp;
  1016                           ;doprnt.c: 533: *ap = __va_start();
  1017                           
  1018                           ;incstack = 0
  1019  00109A  0E42               	movlw	low (?_printf+2)
  1020  00109C  6E4E               	movwf	printf@ap,c
  1021  00109E  0E00               	movlw	high (?_printf+2)
  1022  0010A0  6E4F               	movwf	printf@ap+1,c
  1023                           
  1024                           ;doprnt.c: 536: while(c = *f++) {
  1025  0010A2  EF6B  F00D         	goto	l2901
  1026  0010A6                     l2609:
  1027                           
  1028                           ;doprnt.c: 538: if(c != '%')
  1029  0010A6  0E25               	movlw	37
  1030  0010A8  1863               	xorwf	printf@c,w,c
  1031  0010AA  B4D8               	btfsc	status,2,c
  1032  0010AC  D005               	goto	l2613
  1033                           
  1034                           ;doprnt.c: 540: {
  1035                           ;doprnt.c: 541: (putch(c) );
  1036  0010AE  5063               	movf	printf@c,w,c
  1037  0010B0  EC87  F017         	call	_putch
  1038                           
  1039                           ;doprnt.c: 542: continue;
  1040  0010B4  EF6B  F00D         	goto	l2901
  1041  0010B8                     l2613:
  1042                           
  1043                           ;doprnt.c: 543: }
  1044                           ;doprnt.c: 546: width = 0;
  1045  0010B8  0E00               	movlw	0
  1046  0010BA  6E5D               	movwf	printf@width+1,c
  1047  0010BC  0E00               	movlw	0
  1048  0010BE  6E5C               	movwf	printf@width,c
  1049                           
  1050                           ;doprnt.c: 548: flag = 0;
  1051  0010C0  0E00               	movlw	0
  1052  0010C2  6E5B               	movwf	printf@flag+1,c
  1053  0010C4  0E00               	movlw	0
  1054  0010C6  6E5A               	movwf	printf@flag,c
  1055                           
  1056                           ;doprnt.c: 551: switch(*f) {
  1057                           
  1058                           ;doprnt.c: 550: for(;;) {
  1059  0010C8  D005               	goto	l2619
  1060  0010CA                     l2615:
  1061                           
  1062                           ;doprnt.c: 580: flag |= 0x04;
  1063  0010CA  845A               	bsf	printf@flag,2,c
  1064                           
  1065                           ;doprnt.c: 581: f++;
  1066  0010CC  4A40               	infsnz	printf@f,f,c
  1067  0010CE  2A41               	incf	printf@f+1,f,c
  1068                           
  1069                           ;doprnt.c: 582: continue;
  1070  0010D0  D001               	goto	l2619
  1071                           
  1072                           ;doprnt.c: 584: }
  1073  0010D2  D00B               	goto	l2621
  1074  0010D4                     l2619:
  1075  0010D4  C040  FFF6         	movff	printf@f,tblptrl
  1076  0010D8  C041  FFF7         	movff	printf@f+1,tblptrh
  1077  0010DC                     	if	0	;tblptru may be non-zero
  1078  0010DC                     	endif
  1079  0010DC                     	if	0	;tblptru may be non-zero
  1080  0010DC                     	endif
  1081  0010DC  0008               	tblrd		*
  1082  0010DE  50F5               	movf	tablat,w,c
  1083                           
  1084                           ; Switch size 1, requested type "space"
  1085                           ; Number of cases is 1, Range of values is 48 to 48
  1086                           ; switch strategies available:
  1087                           ; Name         Instructions Cycles
  1088                           ; simple_byte            4     3 (average)
  1089                           ;	Chosen strategy is simple_byte
  1090  0010E0  0A30               	xorlw	48	; case 48
  1091  0010E2  B4D8               	btfsc	status,2,c
  1092  0010E4  D7F2               	goto	l2615
  1093                           
  1094                           ;doprnt.c: 585: break;
  1095  0010E6  D001               	goto	l2621
  1096                           
  1097                           ;doprnt.c: 586: }
  1098  0010E8  D7F5               	goto	l2619
  1099  0010EA                     l2621:
  1100                           
  1101                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1102  0010EA  C040  FFF6         	movff	printf@f,tblptrl
  1103  0010EE  C041  FFF7         	movff	printf@f+1,tblptrh
  1104  0010F2                     	if	0	;tblptru may be non-zero
  1105  0010F2                     	endif
  1106  0010F2                     	if	0	;tblptru may be non-zero
  1107  0010F2                     	endif
  1108  0010F2  0008               	tblrd		*
  1109  0010F4  50F5               	movf	tablat,w,c
  1110  0010F6  EC3B  F017         	call	_isdigit
  1111  0010FA  A0D8               	btfss	status,0,c
  1112  0010FC  D035               	goto	l2633
  1113                           
  1114                           ;doprnt.c: 598: width = 0;
  1115  0010FE  0E00               	movlw	0
  1116  001100  6E5D               	movwf	printf@width+1,c
  1117  001102  0E00               	movlw	0
  1118  001104  6E5C               	movwf	printf@width,c
  1119  001106  D000               	goto	l2625
  1120  001108                     l2625:
  1121                           
  1122                           ;doprnt.c: 600: width *= 10;
  1123  001108  C05C  F00F         	movff	printf@width,___wmul@multiplier
  1124  00110C  C05D  F010         	movff	printf@width+1,___wmul@multiplier+1
  1125  001110  0E00               	movlw	0
  1126  001112  6E12               	movwf	___wmul@multiplicand+1,c
  1127  001114  0E0A               	movlw	10
  1128  001116  6E11               	movwf	___wmul@multiplicand,c
  1129  001118  EC02  F017         	call	___wmul	;wreg free
  1130  00111C  C00F  F05C         	movff	?___wmul,printf@width
  1131  001120  C010  F05D         	movff	?___wmul+1,printf@width+1
  1132                           
  1133                           ;doprnt.c: 601: width += *f++ - '0';
  1134  001124  0ED0               	movlw	208
  1135  001126  6E45               	movwf	??_printf& (0+255),c
  1136  001128  0EFF               	movlw	255
  1137  00112A  6E46               	movwf	(??_printf+1)& (0+255),c
  1138  00112C  C040  FFF6         	movff	printf@f,tblptrl
  1139  001130  C041  FFF7         	movff	printf@f+1,tblptrh
  1140  001134                     	if	0	;tblptru may be non-zero
  1141  001134                     	endif
  1142  001134                     	if	0	;tblptru may be non-zero
  1143  001134                     	endif
  1144  001134  0008               	tblrd		*
  1145  001136  50F5               	movf	tablat,w,c
  1146  001138  6E47               	movwf	(??_printf+2)& (0+255),c
  1147  00113A  6A48               	clrf	(??_printf+3)& (0+255),c
  1148  00113C  5045               	movf	??_printf,w,c
  1149  00113E  2647               	addwf	??_printf+2,f,c
  1150  001140  5046               	movf	??_printf+1,w,c
  1151  001142  2248               	addwfc	??_printf+3,f,c
  1152  001144  5047               	movf	??_printf+2,w,c
  1153  001146  265C               	addwf	printf@width,f,c
  1154  001148  5048               	movf	??_printf+3,w,c
  1155  00114A  225D               	addwfc	printf@width+1,f,c
  1156  00114C  4A40               	infsnz	printf@f,f,c
  1157  00114E  2A41               	incf	printf@f+1,f,c
  1158                           
  1159                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1160  001150  C040  FFF6         	movff	printf@f,tblptrl
  1161  001154  C041  FFF7         	movff	printf@f+1,tblptrh
  1162  001158                     	if	0	;tblptru may be non-zero
  1163  001158                     	endif
  1164  001158                     	if	0	;tblptru may be non-zero
  1165  001158                     	endif
  1166  001158  0008               	tblrd		*
  1167  00115A  50F5               	movf	tablat,w,c
  1168  00115C  EC3B  F017         	call	_isdigit
  1169  001160  A0D8               	btfss	status,0,c
  1170  001162  D002               	goto	l2633
  1171  001164  D7D1               	goto	l2625
  1172  001166  D000               	goto	l2633
  1173  001168                     l2633:
  1174                           
  1175                           ;doprnt.c: 608: }
  1176                           ;doprnt.c: 611: if(*f == '.') {
  1177  001168  C040  FFF6         	movff	printf@f,tblptrl
  1178  00116C  C041  FFF7         	movff	printf@f+1,tblptrh
  1179  001170                     	if	0	;tblptru may be non-zero
  1180  001170                     	endif
  1181  001170                     	if	0	;tblptru may be non-zero
  1182  001170                     	endif
  1183  001170  0008               	tblrd		*
  1184  001172  50F5               	movf	tablat,w,c
  1185  001174  0A2E               	xorlw	46
  1186  001176  A4D8               	btfss	status,2,c
  1187  001178  D030               	goto	l2645
  1188                           
  1189                           ;doprnt.c: 612: flag |= 0x4000;
  1190  00117A  8C5B               	bsf	printf@flag+1,6,c
  1191                           
  1192                           ;doprnt.c: 613: f++;
  1193  00117C  4A40               	infsnz	printf@f,f,c
  1194  00117E  2A41               	incf	printf@f+1,f,c
  1195                           
  1196                           ;doprnt.c: 620: {
  1197                           ;doprnt.c: 621: prec = 0;
  1198  001180  0E00               	movlw	0
  1199  001182  6E62               	movwf	printf@prec+1,c
  1200  001184  0E00               	movlw	0
  1201  001186  6E61               	movwf	printf@prec,c
  1202                           
  1203                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1204  001188  D01C               	goto	l2643
  1205  00118A                     l2639:
  1206                           
  1207                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1208  00118A  C061  F00F         	movff	printf@prec,___wmul@multiplier
  1209  00118E  C062  F010         	movff	printf@prec+1,___wmul@multiplier+1
  1210  001192  0E00               	movlw	0
  1211  001194  6E12               	movwf	___wmul@multiplicand+1,c
  1212  001196  0E0A               	movlw	10
  1213  001198  6E11               	movwf	___wmul@multiplicand,c
  1214  00119A  EC02  F017         	call	___wmul	;wreg free
  1215  00119E  C040  FFF6         	movff	printf@f,tblptrl
  1216  0011A2  C041  FFF7         	movff	printf@f+1,tblptrh
  1217  0011A6                     	if	0	;tblptru may be non-zero
  1218  0011A6                     	endif
  1219  0011A6                     	if	0	;tblptru may be non-zero
  1220  0011A6                     	endif
  1221  0011A6  0008               	tblrd		*
  1222  0011A8  50F5               	movf	tablat,w,c
  1223  0011AA  260F               	addwf	?___wmul,f,c
  1224  0011AC  0E00               	movlw	0
  1225  0011AE  2210               	addwfc	?___wmul+1,f,c
  1226  0011B0  0ED0               	movlw	208
  1227  0011B2  240F               	addwf	?___wmul,w,c
  1228  0011B4  6E61               	movwf	printf@prec,c
  1229  0011B6  0EFF               	movlw	255
  1230  0011B8  2010               	addwfc	?___wmul+1,w,c
  1231  0011BA  6E62               	movwf	printf@prec+1,c
  1232  0011BC  4A40               	infsnz	printf@f,f,c
  1233  0011BE  2A41               	incf	printf@f+1,f,c
  1234  0011C0  D000               	goto	l2643
  1235  0011C2                     l2643:
  1236  0011C2  C040  FFF6         	movff	printf@f,tblptrl
  1237  0011C6  C041  FFF7         	movff	printf@f+1,tblptrh
  1238  0011CA                     	if	0	;tblptru may be non-zero
  1239  0011CA                     	endif
  1240  0011CA                     	if	0	;tblptru may be non-zero
  1241  0011CA                     	endif
  1242  0011CA  0008               	tblrd		*
  1243  0011CC  50F5               	movf	tablat,w,c
  1244  0011CE  EC3B  F017         	call	_isdigit
  1245  0011D2  A0D8               	btfss	status,0,c
  1246  0011D4  D00F               	goto	l2653
  1247  0011D6  D7D9               	goto	l2639
  1248                           
  1249                           ;doprnt.c: 624: }
  1250                           ;doprnt.c: 625: } else {
  1251  0011D8  D00D               	goto	l2653
  1252  0011DA                     l2645:
  1253                           
  1254                           ;doprnt.c: 626: prec = 0;
  1255  0011DA  0E00               	movlw	0
  1256  0011DC  6E62               	movwf	printf@prec+1,c
  1257  0011DE  0E00               	movlw	0
  1258  0011E0  6E61               	movwf	printf@prec,c
  1259                           
  1260                           ;doprnt.c: 628: flag |= 0x1000;
  1261  0011E2  885B               	bsf	printf@flag+1,4,c
  1262                           
  1263                           ;doprnt.c: 630: }
  1264                           ;doprnt.c: 635: switch(c = *f++) {
  1265  0011E4  D007               	goto	l2653
  1266                           
  1267                           ;doprnt.c: 638: goto alldone;
  1268                           
  1269                           ;doprnt.c: 637: case 0:
  1270  0011E6  EF7A  F00D         	goto	l263
  1271  0011EA                     l2649:
  1272                           
  1273                           ;doprnt.c: 663: flag |= 0x400;
  1274  0011EA  845B               	bsf	printf@flag+1,2,c
  1275                           
  1276                           ;doprnt.c: 698: case 'i':
  1277                           ;doprnt.c: 699: break;
  1278                           
  1279                           ;doprnt.c: 697: case 'd':
  1280                           
  1281                           ;doprnt.c: 664: break;
  1282  0011EC  D01B               	goto	l2655
  1283                           
  1284                           ;doprnt.c: 813: continue;
  1285                           
  1286                           ;doprnt.c: 802: default:
  1287  0011EE  EF6B  F00D         	goto	l2901
  1288                           
  1289                           ;doprnt.c: 822: }
  1290  0011F2  D018               	goto	l2655
  1291  0011F4                     l2653:
  1292  0011F4  C040  FFF6         	movff	printf@f,tblptrl
  1293  0011F8  C041  FFF7         	movff	printf@f+1,tblptrh
  1294  0011FC  4A40               	infsnz	printf@f,f,c
  1295  0011FE  2A41               	incf	printf@f+1,f,c
  1296  001200                     	if	0	;tblptru may be non-zero
  1297  001200                     	endif
  1298  001200                     	if	0	;tblptru may be non-zero
  1299  001200                     	endif
  1300  001200  0008               	tblrd		*
  1301  001202  CFF5 F063          	movff	tablat,printf@c
  1302  001206  5063               	movf	printf@c,w,c
  1303                           
  1304                           ; Switch size 1, requested type "space"
  1305                           ; Number of cases is 4, Range of values is 0 to 105
  1306                           ; switch strategies available:
  1307                           ; Name         Instructions Cycles
  1308                           ; simple_byte           13     7 (average)
  1309                           ;	Chosen strategy is simple_byte
  1310  001208  0A00               	xorlw	0	; case 0
  1311  00120A  B4D8               	btfsc	status,2,c
  1312  00120C  EF7A  F00D         	goto	l263
  1313  001210  0A64               	xorlw	100	; case 100
  1314  001212  B4D8               	btfsc	status,2,c
  1315  001214  D007               	goto	l2655
  1316  001216  0A02               	xorlw	2	; case 102
  1317  001218  B4D8               	btfsc	status,2,c
  1318  00121A  D7E7               	goto	l2649
  1319  00121C  0A0F               	xorlw	15	; case 105
  1320  00121E  A4D8               	btfss	status,2,c
  1321  001220  EF6B  F00D         	goto	l2901
  1322  001224                     l2655:
  1323                           
  1324                           ;doprnt.c: 825: if(flag & (0x700)) {
  1325  001224  0E07               	movlw	7
  1326  001226  145B               	andwf	printf@flag+1,w,c
  1327  001228  B4D8               	btfsc	status,2,c
  1328  00122A  D323               	goto	l2815
  1329                           
  1330                           ;doprnt.c: 827: if(flag & 0x1000)
  1331  00122C  A85B               	btfss	printf@flag+1,4,c
  1332  00122E  D005               	goto	l2661
  1333                           
  1334                           ;doprnt.c: 829: prec = 6;
  1335  001230  0E00               	movlw	0
  1336  001232  6E62               	movwf	printf@prec+1,c
  1337  001234  0E06               	movlw	6
  1338  001236  6E61               	movwf	printf@prec,c
  1339  001238  D000               	goto	l2661
  1340  00123A                     l2661:
  1341                           
  1342                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1343  00123A  C04E  FFD9         	movff	printf@ap,fsr2l
  1344  00123E  C04F  FFDA         	movff	printf@ap+1,fsr2h
  1345  001242  CFDE F05E          	movff	postinc2,printf@fval
  1346  001246  CFDE F05F          	movff	postinc2,printf@fval+1
  1347  00124A  CFDD F060          	movff	postdec2,printf@fval+2
  1348  00124E  0E03               	movlw	3
  1349  001250  264E               	addwf	printf@ap,f,c
  1350  001252  0E00               	movlw	0
  1351  001254  224F               	addwfc	printf@ap+1,f,c
  1352                           
  1353                           ;doprnt.c: 831: if(fval < 0.0) {
  1354  001256  AE60               	btfss	printf@fval+2,7,c
  1355  001258  D011               	goto	l2671
  1356                           
  1357                           ;doprnt.c: 832: fval = -fval;
  1358  00125A  C05E  F001         	movff	printf@fval,___ftneg@f1
  1359  00125E  C05F  F002         	movff	printf@fval+1,___ftneg@f1+1
  1360  001262  C060  F003         	movff	printf@fval+2,___ftneg@f1+2
  1361  001266  EC29  F017         	call	___ftneg	;wreg free
  1362  00126A  C001  F05E         	movff	?___ftneg,printf@fval
  1363  00126E  C002  F05F         	movff	?___ftneg+1,printf@fval+1
  1364  001272  C003  F060         	movff	?___ftneg+2,printf@fval+2
  1365                           
  1366                           ;doprnt.c: 833: flag |= 0x03;
  1367  001276  0E03               	movlw	3
  1368  001278  125A               	iorwf	printf@flag,f,c
  1369  00127A  D000               	goto	l2671
  1370  00127C                     l2671:
  1371                           
  1372                           ;doprnt.c: 834: }
  1373                           ;doprnt.c: 835: exp = 0;
  1374  00127C  0E00               	movlw	0
  1375  00127E  6E59               	movwf	printf@exp+1,c
  1376  001280  0E00               	movlw	0
  1377  001282  6E58               	movwf	printf@exp,c
  1378                           
  1379                           ;doprnt.c: 836: if( fval!=0) {
  1380  001284  505E               	movf	printf@fval,w,c
  1381  001286  105F               	iorwf	printf@fval+1,w,c
  1382  001288  1060               	iorwf	printf@fval+2,w,c
  1383  00128A  B4D8               	btfsc	status,2,c
  1384  00128C  D085               	goto	l2699
  1385                           
  1386                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1387  00128E  0E82               	movlw	130
  1388  001290  6E45               	movwf	??_printf& (0+255),c
  1389  001292  0EFF               	movlw	255
  1390  001294  6E46               	movwf	(??_printf+1)& (0+255),c
  1391  001296  C05E  F047         	movff	printf@fval,??_printf+2
  1392  00129A  C05F  F048         	movff	printf@fval+1,??_printf+3
  1393  00129E  C060  F049         	movff	printf@fval+2,??_printf+4
  1394  0012A2  C061  F04A         	movff	printf@fval+3,??_printf+5
  1395  0012A6  0E10               	movlw	16
  1396  0012A8  D005               	goto	u2840
  1397  0012AA                     u2845:
  1398  0012AA  90D8               	bcf	status,0,c
  1399  0012AC  324A               	rrcf	??_printf+5,f,c
  1400  0012AE  3249               	rrcf	??_printf+4,f,c
  1401  0012B0  3248               	rrcf	??_printf+3,f,c
  1402  0012B2  3247               	rrcf	??_printf+2,f,c
  1403  0012B4                     u2840:
  1404  0012B4  2EE8               	decfsz	wreg,f,c
  1405  0012B6  D7F9               	goto	u2845
  1406  0012B8  5047               	movf	??_printf+2,w,c
  1407  0012BA  2445               	addwf	??_printf,w,c
  1408  0012BC  6E58               	movwf	printf@exp,c
  1409  0012BE  0E00               	movlw	0
  1410  0012C0  2046               	addwfc	??_printf+1,w,c
  1411  0012C2  6E59               	movwf	printf@exp+1,c
  1412                           
  1413                           ;doprnt.c: 838: exp--;
  1414  0012C4  0658               	decf	printf@exp,f,c
  1415  0012C6  A0D8               	btfss	status,0,c
  1416  0012C8  0659               	decf	printf@exp+1,f,c
  1417                           
  1418                           ;doprnt.c: 839: exp *= 3;
  1419  0012CA  C058  F00F         	movff	printf@exp,___wmul@multiplier
  1420  0012CE  C059  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1421  0012D2  0E00               	movlw	0
  1422  0012D4  6E12               	movwf	___wmul@multiplicand+1,c
  1423  0012D6  0E03               	movlw	3
  1424  0012D8  6E11               	movwf	___wmul@multiplicand,c
  1425  0012DA  EC02  F017         	call	___wmul	;wreg free
  1426  0012DE  C00F  F058         	movff	?___wmul,printf@exp
  1427  0012E2  C010  F059         	movff	?___wmul+1,printf@exp+1
  1428                           
  1429                           ;doprnt.c: 840: exp /= 10;
  1430  0012E6  C058  F001         	movff	printf@exp,___awdiv@dividend
  1431  0012EA  C059  F002         	movff	printf@exp+1,___awdiv@dividend+1
  1432  0012EE  0E00               	movlw	0
  1433  0012F0  6E04               	movwf	___awdiv@divisor+1,c
  1434  0012F2  0E0A               	movlw	10
  1435  0012F4  6E03               	movwf	___awdiv@divisor,c
  1436  0012F6  ECD1  F014         	call	___awdiv	;wreg free
  1437  0012FA  C001  F058         	movff	?___awdiv,printf@exp
  1438  0012FE  C002  F059         	movff	?___awdiv+1,printf@exp+1
  1439                           
  1440                           ;doprnt.c: 841: if(exp < 0)
  1441  001302  AE59               	btfss	printf@exp+1,7,c
  1442  001304  D004               	goto	l2687
  1443                           
  1444                           ;doprnt.c: 842: exp--;
  1445  001306  0658               	decf	printf@exp,f,c
  1446  001308  A0D8               	btfss	status,0,c
  1447  00130A  0659               	decf	printf@exp+1,f,c
  1448  00130C  D000               	goto	l2687
  1449  00130E                     l2687:
  1450                           
  1451                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1452  00130E  5058               	movf	printf@exp,w,c
  1453  001310  0800               	sublw	0
  1454  001312  EC7B  F00D         	call	_scale
  1455  001316  C024  F050         	movff	?_scale,printf@tmpval
  1456  00131A  C025  F051         	movff	?_scale+1,printf@tmpval+1
  1457  00131E  C026  F052         	movff	?_scale+2,printf@tmpval+2
  1458                           
  1459                           ;doprnt.c: 847: tmpval.integ *= fval;
  1460  001322  C050  F015         	movff	printf@tmpval,___ftmul@f1
  1461  001326  C051  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  1462  00132A  C052  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  1463  00132E  C05E  F018         	movff	printf@fval,___ftmul@f2
  1464  001332  C05F  F019         	movff	printf@fval+1,___ftmul@f2+1
  1465  001336  C060  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1466  00133A  EC0E  F013         	call	___ftmul	;wreg free
  1467  00133E  C015  F050         	movff	?___ftmul,printf@tmpval
  1468  001342  C016  F051         	movff	?___ftmul+1,printf@tmpval+1
  1469  001346  C017  F052         	movff	?___ftmul+2,printf@tmpval+2
  1470                           
  1471                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1472  00134A  C050  F001         	movff	printf@tmpval,___ftge@ff1
  1473  00134E  C051  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1474  001352  C052  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1475  001356  0E00               	movlw	0
  1476  001358  6E04               	movwf	___ftge@ff2,c
  1477  00135A  0E80               	movlw	128
  1478  00135C  6E05               	movwf	___ftge@ff2+1,c
  1479  00135E  0E3F               	movlw	63
  1480  001360  6E06               	movwf	___ftge@ff2+2,c
  1481  001362  EC1C  F015         	call	___ftge	;wreg free
  1482  001366  B0D8               	btfsc	status,0,c
  1483  001368  D004               	goto	l2695
  1484                           
  1485                           ;doprnt.c: 849: exp--;
  1486  00136A  0658               	decf	printf@exp,f,c
  1487  00136C  A0D8               	btfss	status,0,c
  1488  00136E  0659               	decf	printf@exp+1,f,c
  1489  001370  D013               	goto	l2699
  1490  001372                     l2695:
  1491                           
  1492                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1493  001372  C050  F001         	movff	printf@tmpval,___ftge@ff1
  1494  001376  C051  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1495  00137A  C052  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1496  00137E  0E00               	movlw	0
  1497  001380  6E04               	movwf	___ftge@ff2,c
  1498  001382  0E20               	movlw	32
  1499  001384  6E05               	movwf	___ftge@ff2+1,c
  1500  001386  0E41               	movlw	65
  1501  001388  6E06               	movwf	___ftge@ff2+2,c
  1502  00138A  EC1C  F015         	call	___ftge	;wreg free
  1503  00138E  A0D8               	btfss	status,0,c
  1504  001390  D003               	goto	l2699
  1505                           
  1506                           ;doprnt.c: 851: exp++;
  1507  001392  4A58               	infsnz	printf@exp,f,c
  1508  001394  2A59               	incf	printf@exp+1,f,c
  1509  001396  D000               	goto	l2699
  1510  001398                     l2699:
  1511                           
  1512                           ;doprnt.c: 852: }
  1513                           ;doprnt.c: 1112: if(prec <= 12)
  1514  001398  BE62               	btfsc	printf@prec+1,7,c
  1515  00139A  D006               	goto	l2701
  1516  00139C  5062               	movf	printf@prec+1,w,c
  1517  00139E  E11C               	bnz	l2703
  1518  0013A0  0E0D               	movlw	13
  1519  0013A2  5C61               	subwf	printf@prec,w,c
  1520  0013A4  B0D8               	btfsc	status,0,c
  1521  0013A6  D018               	goto	l2703
  1522  0013A8                     l2701:
  1523                           
  1524                           ;doprnt.c: 1113: fval += fround(prec);
  1525  0013A8  C05E  F02E         	movff	printf@fval,___ftadd@f1
  1526  0013AC  C05F  F02F         	movff	printf@fval+1,___ftadd@f1+1
  1527  0013B0  C060  F030         	movff	printf@fval+2,___ftadd@f1+2
  1528  0013B4  5061               	movf	printf@prec,w,c
  1529  0013B6  EC6B  F00F         	call	_fround
  1530  0013BA  C024  F031         	movff	?_fround,___ftadd@f2
  1531  0013BE  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1532  0013C2  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1533  0013C6  EC8D  F010         	call	___ftadd	;wreg free
  1534  0013CA  C02E  F05E         	movff	?___ftadd,printf@fval
  1535  0013CE  C02F  F05F         	movff	?___ftadd+1,printf@fval+1
  1536  0013D2  C030  F060         	movff	?___ftadd+2,printf@fval+2
  1537  0013D6  D000               	goto	l2703
  1538  0013D8                     l2703:
  1539                           
  1540                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1541  0013D8  BE59               	btfsc	printf@exp+1,7,c
  1542  0013DA  D006               	goto	l2705
  1543  0013DC  5059               	movf	printf@exp+1,w,c
  1544  0013DE  E120               	bnz	l2711
  1545  0013E0  0E0A               	movlw	10
  1546  0013E2  5C58               	subwf	printf@exp,w,c
  1547  0013E4  B0D8               	btfsc	status,0,c
  1548  0013E6  D01C               	goto	l2711
  1549  0013E8                     l2705:
  1550  0013E8  505E               	movf	printf@fval,w,c
  1551  0013EA  105F               	iorwf	printf@fval+1,w,c
  1552  0013EC  1060               	iorwf	printf@fval+2,w,c
  1553  0013EE  B4D8               	btfsc	status,2,c
  1554  0013F0  D06D               	goto	l2725
  1555  0013F2  C05E  F02B         	movff	printf@fval,___fttol@f1
  1556  0013F6  C05F  F02C         	movff	printf@fval+1,___fttol@f1+1
  1557  0013FA  C060  F02D         	movff	printf@fval+2,___fttol@f1+2
  1558  0013FE  EC8A  F013         	call	___fttol	;wreg free
  1559  001402  502B               	movf	?___fttol,w,c
  1560  001404  102C               	iorwf	?___fttol+1,w,c
  1561  001406  102D               	iorwf	?___fttol+2,w,c
  1562  001408  102E               	iorwf	?___fttol+3,w,c
  1563  00140A  B4D8               	btfsc	status,2,c
  1564  00140C  BE59               	btfsc	printf@exp+1,7,c
  1565  00140E  D05E               	goto	l2725
  1566  001410  5059               	movf	printf@exp+1,w,c
  1567  001412  E106               	bnz	l2711
  1568  001414  0E02               	movlw	2
  1569  001416  5C58               	subwf	printf@exp,w,c
  1570  001418  B0D8               	btfsc	status,0,c
  1571  00141A  D002               	goto	l2711
  1572  00141C  D057               	goto	l2725
  1573  00141E  D000               	goto	l2711
  1574  001420                     l2711:
  1575                           
  1576                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1577  001420  C050  F001         	movff	printf@tmpval,___ftge@ff1
  1578  001424  C051  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1579  001428  C052  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1580  00142C  0E70               	movlw	112
  1581  00142E  6E04               	movwf	___ftge@ff2,c
  1582  001430  0E89               	movlw	137
  1583  001432  6E05               	movwf	___ftge@ff2+1,c
  1584  001434  0E40               	movlw	64
  1585  001436  6E06               	movwf	___ftge@ff2+2,c
  1586  001438  EC1C  F015         	call	___ftge	;wreg free
  1587  00143C  B0D8               	btfsc	status,0,c
  1588  00143E  D002               	goto	l2715
  1589                           
  1590                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1591  001440  0EF7               	movlw	247
  1592  001442  D001               	goto	L1
  1593  001444                     l2715:
  1594                           
  1595                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1596  001444  0EF8               	movlw	248
  1597  001446                     L1:
  1598  001446  2658               	addwf	printf@exp,f,c
  1599  001448  0EFF               	movlw	255
  1600  00144A  2259               	addwfc	printf@exp+1,f,c
  1601  00144C  D000               	goto	l2717
  1602  00144E                     l2717:
  1603                           
  1604                           ;doprnt.c: 1124: }
  1605                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1606  00144E  5058               	movf	printf@exp,w,c
  1607  001450  EC7B  F00D         	call	_scale
  1608  001454  C024  F050         	movff	?_scale,printf@tmpval
  1609  001458  C025  F051         	movff	?_scale+1,printf@tmpval+1
  1610  00145C  C026  F052         	movff	?_scale+2,printf@tmpval+2
  1611                           
  1612                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1613  001460  D017               	goto	l2721
  1614  001462  C05E  F001         	movff	printf@fval,__div_to_l_@f1
  1615  001466  C05F  F002         	movff	printf@fval+1,__div_to_l_@f1+1
  1616  00146A  C060  F003         	movff	printf@fval+2,__div_to_l_@f1+2
  1617  00146E  C050  F004         	movff	printf@tmpval,__div_to_l_@f2
  1618  001472  C051  F005         	movff	printf@tmpval+1,__div_to_l_@f2+1
  1619  001476  C052  F006         	movff	printf@tmpval+2,__div_to_l_@f2+2
  1620  00147A  EC89  F012         	call	__div_to_l_	;wreg free
  1621  00147E  C001  F054         	movff	?__div_to_l_,printf@val
  1622  001482  C002  F055         	movff	?__div_to_l_+1,printf@val+1
  1623  001486  C003  F056         	movff	?__div_to_l_+2,printf@val+2
  1624  00148A  C004  F057         	movff	?__div_to_l_+3,printf@val+3
  1625  00148E  D017               	goto	l2723
  1626  001490                     l2721:
  1627  001490  C05E  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1628  001494  C05F  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1629  001498  C060  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1630  00149C  C050  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1631  0014A0  C051  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1632  0014A4  C052  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1633  0014A8  EC01  F012         	call	__tdiv_to_l_	;wreg free
  1634  0014AC  C001  F054         	movff	?__tdiv_to_l_,printf@val
  1635  0014B0  C002  F055         	movff	?__tdiv_to_l_+1,printf@val+1
  1636  0014B4  C003  F056         	movff	?__tdiv_to_l_+2,printf@val+2
  1637  0014B8  C004  F057         	movff	?__tdiv_to_l_+3,printf@val+3
  1638  0014BC  D000               	goto	l2723
  1639  0014BE                     l2723:
  1640                           
  1641                           ;doprnt.c: 1129: fval = 0.0;
  1642  0014BE  0E00               	movlw	0
  1643  0014C0  6E5E               	movwf	printf@fval,c
  1644  0014C2  0E00               	movlw	0
  1645  0014C4  6E5F               	movwf	printf@fval+1,c
  1646  0014C6  0E00               	movlw	0
  1647  0014C8  6E60               	movwf	printf@fval+2,c
  1648                           
  1649                           ;doprnt.c: 1130: } else {
  1650  0014CA  D033               	goto	l2729
  1651  0014CC                     l2725:
  1652                           
  1653                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1654  0014CC  C05E  F02B         	movff	printf@fval,___fttol@f1
  1655  0014D0  C05F  F02C         	movff	printf@fval+1,___fttol@f1+1
  1656  0014D4  C060  F02D         	movff	printf@fval+2,___fttol@f1+2
  1657  0014D8  EC8A  F013         	call	___fttol	;wreg free
  1658  0014DC  C02B  F054         	movff	?___fttol,printf@val
  1659  0014E0  C02C  F055         	movff	?___fttol+1,printf@val+1
  1660  0014E4  C02D  F056         	movff	?___fttol+2,printf@val+2
  1661  0014E8  C02E  F057         	movff	?___fttol+3,printf@val+3
  1662                           
  1663                           ;doprnt.c: 1132: fval -= (double)val;
  1664  0014EC  C05E  F03A         	movff	printf@fval,___ftsub@f1
  1665  0014F0  C05F  F03B         	movff	printf@fval+1,___ftsub@f1+1
  1666  0014F4  C060  F03C         	movff	printf@fval+2,___ftsub@f1+2
  1667  0014F8  C054  F009         	movff	printf@val,___lltoft@c
  1668  0014FC  C055  F00A         	movff	printf@val+1,___lltoft@c+1
  1669  001500  C056  F00B         	movff	printf@val+2,___lltoft@c+2
  1670  001504  C057  F00C         	movff	printf@val+3,___lltoft@c+3
  1671  001508  EC5E  F016         	call	___lltoft	;wreg free
  1672  00150C  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1673  001510  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1674  001514  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1675  001518  EC8E  F016         	call	___ftsub	;wreg free
  1676  00151C  C03A  F05E         	movff	?___ftsub,printf@fval
  1677  001520  C03B  F05F         	movff	?___ftsub+1,printf@fval+1
  1678  001524  C03C  F060         	movff	?___ftsub+2,printf@fval+2
  1679                           
  1680                           ;doprnt.c: 1133: exp = 0;
  1681  001528  0E00               	movlw	0
  1682  00152A  6E59               	movwf	printf@exp+1,c
  1683  00152C  0E00               	movlw	0
  1684  00152E  6E58               	movwf	printf@exp,c
  1685  001530  D000               	goto	l2729
  1686  001532                     l2729:
  1687                           
  1688                           ;doprnt.c: 1134: }
  1689                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1690  001532  0E01               	movlw	1
  1691  001534  6E63               	movwf	printf@c,c
  1692  001536                     l2731:
  1693  001536  0E0A               	movlw	10
  1694  001538  1863               	xorwf	printf@c,w,c
  1695  00153A  B4D8               	btfsc	status,2,c
  1696  00153C  D01C               	goto	l2743
  1697  00153E  D001               	goto	l2735
  1698  001540  D01A               	goto	l2743
  1699  001542                     l2735:
  1700                           
  1701                           ;doprnt.c: 1137: if(val < dpowers[c])
  1702  001542  5063               	movf	printf@c,w,c
  1703  001544  0D04               	mullw	4
  1704  001546  0E01               	movlw	low _dpowers
  1705  001548  24F3               	addwf	prodl,w,c
  1706  00154A  6EF6               	movwf	tblptrl,c
  1707  00154C  0E10               	movlw	high _dpowers
  1708  00154E  20F4               	addwfc	prodh,w,c
  1709  001550  6EF7               	movwf	tblptrh,c
  1710  001552                     	if	0	;There are less than 3 active tblptr bytes
  1711  001552                     	endif
  1712  001552  0009               	tblrd		*+
  1713  001554  50F5               	movf	tablat,w,c
  1714  001556  5C54               	subwf	printf@val,w,c
  1715  001558  0009               	tblrd		*+
  1716  00155A  50F5               	movf	tablat,w,c
  1717  00155C  5855               	subwfb	printf@val+1,w,c
  1718  00155E  0009               	tblrd		*+
  1719  001560  50F5               	movf	tablat,w,c
  1720  001562  5856               	subwfb	printf@val+2,w,c
  1721  001564  0009               	tblrd		*+
  1722  001566  50F5               	movf	tablat,w,c
  1723  001568  5857               	subwfb	printf@val+3,w,c
  1724  00156A  A0D8               	btfss	status,0,c
  1725  00156C  D004               	goto	l2743
  1726  00156E  D001               	goto	l2739
  1727                           
  1728                           ;doprnt.c: 1138: break;
  1729  001570  D002               	goto	l2743
  1730  001572                     l2739:
  1731  001572  2A63               	incf	printf@c,f,c
  1732  001574  D7E0               	goto	l2731
  1733  001576                     l2743:
  1734                           
  1735                           ;doprnt.c: 1142: width -= prec + c + exp;
  1736  001576  C063  F045         	movff	printf@c,??_printf
  1737  00157A  6A46               	clrf	(??_printf+1)& (0+255),c
  1738  00157C  BE45               	btfsc	??_printf& (0+255),7,c
  1739  00157E  0646               	decf	(??_printf+1)& (0+255),f,c
  1740  001580  5061               	movf	printf@prec,w,c
  1741  001582  2645               	addwf	??_printf,f,c
  1742  001584  5062               	movf	printf@prec+1,w,c
  1743  001586  2246               	addwfc	??_printf+1,f,c
  1744  001588  5058               	movf	printf@exp,w,c
  1745  00158A  2645               	addwf	??_printf,f,c
  1746  00158C  5059               	movf	printf@exp+1,w,c
  1747  00158E  2246               	addwfc	??_printf+1,f,c
  1748  001590  5045               	movf	??_printf,w,c
  1749  001592  5E5C               	subwf	printf@width,f,c
  1750  001594  5046               	movf	??_printf+1,w,c
  1751  001596  5A5D               	subwfb	printf@width+1,f,c
  1752                           
  1753                           ;doprnt.c: 1143: if(
  1754                           ;doprnt.c: 1147: prec)
  1755  001598  5061               	movf	printf@prec,w,c
  1756  00159A  1062               	iorwf	printf@prec+1,w,c
  1757  00159C  B4D8               	btfsc	status,2,c
  1758  00159E  D004               	goto	l2747
  1759                           
  1760                           ;doprnt.c: 1148: width--;
  1761  0015A0  065C               	decf	printf@width,f,c
  1762  0015A2  A0D8               	btfss	status,0,c
  1763  0015A4  065D               	decf	printf@width+1,f,c
  1764  0015A6  D000               	goto	l2747
  1765  0015A8                     l2747:
  1766                           
  1767                           ;doprnt.c: 1149: if(flag & 0x03)
  1768  0015A8  0E03               	movlw	3
  1769  0015AA  145A               	andwf	printf@flag,w,c
  1770  0015AC  6E45               	movwf	??_printf& (0+255),c
  1771  0015AE  0E00               	movlw	0
  1772  0015B0  145B               	andwf	printf@flag+1,w,c
  1773  0015B2  6E46               	movwf	(??_printf+1)& (0+255),c
  1774  0015B4  5045               	movf	??_printf,w,c
  1775  0015B6  1046               	iorwf	??_printf+1,w,c
  1776  0015B8  B4D8               	btfsc	status,2,c
  1777  0015BA  D004               	goto	l2751
  1778                           
  1779                           ;doprnt.c: 1150: width--;
  1780  0015BC  065C               	decf	printf@width,f,c
  1781  0015BE  A0D8               	btfss	status,0,c
  1782  0015C0  065D               	decf	printf@width+1,f,c
  1783  0015C2  D000               	goto	l2751
  1784  0015C4                     l2751:
  1785                           
  1786                           ;doprnt.c: 1153: if(flag & 0x04) {
  1787  0015C4  A45A               	btfss	printf@flag,2,c
  1788  0015C6  D026               	goto	l2767
  1789                           
  1790                           ;doprnt.c: 1157: if(flag & 0x03)
  1791  0015C8  0E03               	movlw	3
  1792  0015CA  145A               	andwf	printf@flag,w,c
  1793  0015CC  6E45               	movwf	??_printf& (0+255),c
  1794  0015CE  0E00               	movlw	0
  1795  0015D0  145B               	andwf	printf@flag+1,w,c
  1796  0015D2  6E46               	movwf	(??_printf+1)& (0+255),c
  1797  0015D4  5045               	movf	??_printf,w,c
  1798  0015D6  1046               	iorwf	??_printf+1,w,c
  1799  0015D8  B4D8               	btfsc	status,2,c
  1800  0015DA  D00B               	goto	l2761
  1801                           
  1802                           ;doprnt.c: 1159: (putch('-') );
  1803  0015DC  0E2D               	movlw	45
  1804  0015DE  EC87  F017         	call	_putch
  1805                           
  1806                           ;doprnt.c: 1168: while(width > 0) {
  1807  0015E2  D007               	goto	l2761
  1808  0015E4                     l2757:
  1809                           
  1810                           ;doprnt.c: 1169: (putch('0') );
  1811  0015E4  0E30               	movlw	48
  1812  0015E6  EC87  F017         	call	_putch
  1813                           
  1814                           ;doprnt.c: 1170: width--;
  1815  0015EA  065C               	decf	printf@width,f,c
  1816  0015EC  A0D8               	btfss	status,0,c
  1817  0015EE  065D               	decf	printf@width+1,f,c
  1818  0015F0  D000               	goto	l2761
  1819  0015F2                     l2761:
  1820  0015F2  BE5D               	btfsc	printf@width+1,7,c
  1821  0015F4  D069               	goto	l2779
  1822  0015F6  505D               	movf	printf@width+1,w,c
  1823  0015F8  E1F5               	bnz	l2757
  1824  0015FA  045C               	decf	printf@width,w,c
  1825  0015FC  A0D8               	btfss	status,0,c
  1826  0015FE  D064               	goto	l2779
  1827  001600  D7F1               	goto	l2757
  1828                           
  1829                           ;doprnt.c: 1171: }
  1830                           ;doprnt.c: 1173: } else
  1831  001602  D062               	goto	l2779
  1832                           
  1833                           ;doprnt.c: 1175: {
  1834                           ;doprnt.c: 1180: while(width > 0) {
  1835  001604  D007               	goto	l2767
  1836  001606                     l2763:
  1837                           
  1838                           ;doprnt.c: 1181: (putch(' ') );
  1839  001606  0E20               	movlw	32
  1840  001608  EC87  F017         	call	_putch
  1841                           
  1842                           ;doprnt.c: 1182: width--;
  1843  00160C  065C               	decf	printf@width,f,c
  1844  00160E  A0D8               	btfss	status,0,c
  1845  001610  065D               	decf	printf@width+1,f,c
  1846  001612  D000               	goto	l2767
  1847  001614                     l2767:
  1848  001614  BE5D               	btfsc	printf@width+1,7,c
  1849  001616  D005               	goto	l2769
  1850  001618  505D               	movf	printf@width+1,w,c
  1851  00161A  E1F5               	bnz	l2763
  1852  00161C  045C               	decf	printf@width,w,c
  1853  00161E  B0D8               	btfsc	status,0,c
  1854  001620  D7F2               	goto	l2763
  1855  001622                     l2769:
  1856                           
  1857                           ;doprnt.c: 1183: }
  1858                           ;doprnt.c: 1188: if(flag & 0x03)
  1859  001622  0E03               	movlw	3
  1860  001624  145A               	andwf	printf@flag,w,c
  1861  001626  6E45               	movwf	??_printf& (0+255),c
  1862  001628  0E00               	movlw	0
  1863  00162A  145B               	andwf	printf@flag+1,w,c
  1864  00162C  6E46               	movwf	(??_printf+1)& (0+255),c
  1865  00162E  5045               	movf	??_printf,w,c
  1866  001630  1046               	iorwf	??_printf+1,w,c
  1867  001632  B4D8               	btfsc	status,2,c
  1868  001634  D049               	goto	l2779
  1869                           
  1870                           ;doprnt.c: 1190: (putch('-') );
  1871  001636  0E2D               	movlw	45
  1872  001638  EC87  F017         	call	_putch
  1873                           
  1874                           ;doprnt.c: 1195: }
  1875                           ;doprnt.c: 1196: while(c--) {
  1876  00163C  D045               	goto	l2779
  1877  00163E                     l2773:
  1878                           
  1879                           ;doprnt.c: 1200: {
  1880                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1881  00163E  C054  F001         	movff	printf@val,___lldiv@dividend
  1882  001642  C055  F002         	movff	printf@val+1,___lldiv@dividend+1
  1883  001646  C056  F003         	movff	printf@val+2,___lldiv@dividend+2
  1884  00164A  C057  F004         	movff	printf@val+3,___lldiv@dividend+3
  1885  00164E  5063               	movf	printf@c,w,c
  1886  001650  0D04               	mullw	4
  1887  001652  0E01               	movlw	low _dpowers
  1888  001654  24F3               	addwf	prodl,w,c
  1889  001656  6EF6               	movwf	tblptrl,c
  1890  001658  0E10               	movlw	high _dpowers
  1891  00165A  20F4               	addwfc	prodh,w,c
  1892  00165C  6EF7               	movwf	tblptrh,c
  1893  00165E                     	if	0	;There are less than 3 active tblptr bytes
  1894  00165E                     	endif
  1895  00165E  0009               	tblrd		*+
  1896  001660  CFF5 F005          	movff	tablat,___lldiv@divisor
  1897  001664  0009               	tblrd		*+
  1898  001666  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1899  00166A  0009               	tblrd		*+
  1900  00166C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1901  001670  000A               	tblrd		*-
  1902  001672  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1903  001676  EC67  F015         	call	___lldiv	;wreg free
  1904  00167A  C001  F050         	movff	?___lldiv,printf@tmpval
  1905  00167E  C002  F051         	movff	?___lldiv+1,printf@tmpval+1
  1906  001682  C003  F052         	movff	?___lldiv+2,printf@tmpval+2
  1907  001686  C004  F053         	movff	?___lldiv+3,printf@tmpval+3
  1908                           
  1909                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1910  00168A  C050  F00E         	movff	printf@tmpval,___llmod@dividend
  1911  00168E  C051  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  1912  001692  C052  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  1913  001696  C053  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  1914  00169A  0E0A               	movlw	10
  1915  00169C  6E12               	movwf	___llmod@divisor,c
  1916  00169E  0E00               	movlw	0
  1917  0016A0  6E13               	movwf	___llmod@divisor+1,c
  1918  0016A2  0E00               	movlw	0
  1919  0016A4  6E14               	movwf	___llmod@divisor+2,c
  1920  0016A6  0E00               	movlw	0
  1921  0016A8  6E15               	movwf	___llmod@divisor+3,c
  1922  0016AA  ECEE  F015         	call	___llmod	;wreg free
  1923  0016AE  C00E  F050         	movff	?___llmod,printf@tmpval
  1924  0016B2  C00F  F051         	movff	?___llmod+1,printf@tmpval+1
  1925  0016B6  C010  F052         	movff	?___llmod+2,printf@tmpval+2
  1926  0016BA  C011  F053         	movff	?___llmod+3,printf@tmpval+3
  1927                           
  1928                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1929  0016BE  5050               	movf	printf@tmpval,w,c
  1930  0016C0  0F30               	addlw	48
  1931  0016C2  EC87  F017         	call	_putch
  1932  0016C6  D000               	goto	l2779
  1933  0016C8                     l2779:
  1934  0016C8  0663               	decf	printf@c,f,c
  1935  0016CA  2863               	incf	printf@c,w,c
  1936  0016CC  B4D8               	btfsc	status,2,c
  1937  0016CE  D009               	goto	l2785
  1938  0016D0  D7B6               	goto	l2773
  1939                           
  1940                           ;doprnt.c: 1204: }
  1941                           ;doprnt.c: 1206: }
  1942                           ;doprnt.c: 1207: while(exp > 0) {
  1943  0016D2  D007               	goto	l2785
  1944  0016D4                     l2781:
  1945                           
  1946                           ;doprnt.c: 1208: (putch('0') );
  1947  0016D4  0E30               	movlw	48
  1948  0016D6  EC87  F017         	call	_putch
  1949                           
  1950                           ;doprnt.c: 1209: exp--;
  1951  0016DA  0658               	decf	printf@exp,f,c
  1952  0016DC  A0D8               	btfss	status,0,c
  1953  0016DE  0659               	decf	printf@exp+1,f,c
  1954  0016E0  D000               	goto	l2785
  1955  0016E2                     l2785:
  1956  0016E2  BE59               	btfsc	printf@exp+1,7,c
  1957  0016E4  D005               	goto	l2787
  1958  0016E6  5059               	movf	printf@exp+1,w,c
  1959  0016E8  E1F5               	bnz	l2781
  1960  0016EA  0458               	decf	printf@exp,w,c
  1961  0016EC  B0D8               	btfsc	status,0,c
  1962  0016EE  D7F2               	goto	l2781
  1963  0016F0                     l2787:
  1964                           
  1965                           ;doprnt.c: 1210: }
  1966                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1967  0016F0  BE62               	btfsc	printf@prec+1,7,c
  1968  0016F2  D009               	goto	l226
  1969  0016F4  5062               	movf	printf@prec+1,w,c
  1970  0016F6  E104               	bnz	u3060
  1971  0016F8  0E09               	movlw	9
  1972  0016FA  5C61               	subwf	printf@prec,w,c
  1973  0016FC  A0D8               	btfss	status,0,c
  1974  0016FE  D003               	goto	l226
  1975  001700                     u3060:
  1976                           
  1977                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1978  001700  0E08               	movlw	8
  1979  001702  6E63               	movwf	printf@c,c
  1980  001704  D003               	goto	l2791
  1981  001706                     l226:
  1982                           
  1983                           ;doprnt.c: 1213: else
  1984                           ;doprnt.c: 1214: c = prec;
  1985  001706  C061  F063         	movff	printf@prec,printf@c
  1986  00170A  D000               	goto	l2791
  1987  00170C                     l2791:
  1988                           
  1989                           ;doprnt.c: 1215: prec -= c;
  1990  00170C  5063               	movf	printf@c,w,c
  1991  00170E  5E61               	subwf	printf@prec,f,c
  1992  001710  0E00               	movlw	0
  1993  001712  BE63               	btfsc	printf@c,7,c
  1994  001714  0EFF               	movlw	255
  1995  001716  5A62               	subwfb	printf@prec+1,f,c
  1996                           
  1997                           ;doprnt.c: 1219: if(c)
  1998  001718  5063               	movf	printf@c,w,c
  1999  00171A  B4D8               	btfsc	status,2,c
  2000  00171C  D004               	goto	l2797
  2001                           
  2002                           ;doprnt.c: 1221: (putch('.') );
  2003  00171E  0E2E               	movlw	46
  2004  001720  EC87  F017         	call	_putch
  2005  001724  D000               	goto	l2797
  2006  001726                     l2797:
  2007                           
  2008                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2009  001726  5063               	movf	printf@c,w,c
  2010  001728  EC7B  F00D         	call	_scale
  2011  00172C  C024  F04B         	movff	?_scale,_printf$1264
  2012  001730  C025  F04C         	movff	?_scale+1,_printf$1264+1
  2013  001734  C026  F04D         	movff	?_scale+2,_printf$1264+2
  2014                           
  2015                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2016  001738  C05E  F018         	movff	printf@fval,___ftmul@f2
  2017  00173C  C05F  F019         	movff	printf@fval+1,___ftmul@f2+1
  2018  001740  C060  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2019  001744  C04B  F015         	movff	_printf$1264,___ftmul@f1
  2020  001748  C04C  F016         	movff	_printf$1264+1,___ftmul@f1+1
  2021  00174C  C04D  F017         	movff	_printf$1264+2,___ftmul@f1+2
  2022  001750  EC0E  F013         	call	___ftmul	;wreg free
  2023  001754  C015  F02B         	movff	?___ftmul,___fttol@f1
  2024  001758  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2025  00175C  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2026  001760  EC8A  F013         	call	___fttol	;wreg free
  2027  001764  C02B  F054         	movff	?___fttol,printf@val
  2028  001768  C02C  F055         	movff	?___fttol+1,printf@val+1
  2029  00176C  C02D  F056         	movff	?___fttol+2,printf@val+2
  2030  001770  C02E  F057         	movff	?___fttol+3,printf@val+3
  2031                           
  2032                           ;doprnt.c: 1228: while(c--) {
  2033  001774  D06B               	goto	l2807
  2034  001776                     l2801:
  2035                           
  2036                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2037  001776  C054  F001         	movff	printf@val,___lldiv@dividend
  2038  00177A  C055  F002         	movff	printf@val+1,___lldiv@dividend+1
  2039  00177E  C056  F003         	movff	printf@val+2,___lldiv@dividend+2
  2040  001782  C057  F004         	movff	printf@val+3,___lldiv@dividend+3
  2041  001786  5063               	movf	printf@c,w,c
  2042  001788  0D04               	mullw	4
  2043  00178A  0E01               	movlw	low _dpowers
  2044  00178C  24F3               	addwf	prodl,w,c
  2045  00178E  6EF6               	movwf	tblptrl,c
  2046  001790  0E10               	movlw	high _dpowers
  2047  001792  20F4               	addwfc	prodh,w,c
  2048  001794  6EF7               	movwf	tblptrh,c
  2049  001796                     	if	0	;There are less than 3 active tblptr bytes
  2050  001796                     	endif
  2051  001796  0009               	tblrd		*+
  2052  001798  CFF5 F005          	movff	tablat,___lldiv@divisor
  2053  00179C  0009               	tblrd		*+
  2054  00179E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2055  0017A2  0009               	tblrd		*+
  2056  0017A4  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2057  0017A8  000A               	tblrd		*-
  2058  0017AA  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2059  0017AE  EC67  F015         	call	___lldiv	;wreg free
  2060  0017B2  C001  F050         	movff	?___lldiv,printf@tmpval
  2061  0017B6  C002  F051         	movff	?___lldiv+1,printf@tmpval+1
  2062  0017BA  C003  F052         	movff	?___lldiv+2,printf@tmpval+2
  2063  0017BE  C004  F053         	movff	?___lldiv+3,printf@tmpval+3
  2064                           
  2065                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2066  0017C2  C050  F00E         	movff	printf@tmpval,___llmod@dividend
  2067  0017C6  C051  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2068  0017CA  C052  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2069  0017CE  C053  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2070  0017D2  0E0A               	movlw	10
  2071  0017D4  6E12               	movwf	___llmod@divisor,c
  2072  0017D6  0E00               	movlw	0
  2073  0017D8  6E13               	movwf	___llmod@divisor+1,c
  2074  0017DA  0E00               	movlw	0
  2075  0017DC  6E14               	movwf	___llmod@divisor+2,c
  2076  0017DE  0E00               	movlw	0
  2077  0017E0  6E15               	movwf	___llmod@divisor+3,c
  2078  0017E2  ECEE  F015         	call	___llmod	;wreg free
  2079  0017E6  C00E  F050         	movff	?___llmod,printf@tmpval
  2080  0017EA  C00F  F051         	movff	?___llmod+1,printf@tmpval+1
  2081  0017EE  C010  F052         	movff	?___llmod+2,printf@tmpval+2
  2082  0017F2  C011  F053         	movff	?___llmod+3,printf@tmpval+3
  2083                           
  2084                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2085  0017F6  5050               	movf	printf@tmpval,w,c
  2086  0017F8  0F30               	addlw	48
  2087  0017FA  EC87  F017         	call	_putch
  2088                           
  2089                           ;doprnt.c: 1232: val %= dpowers[c];
  2090  0017FE  C054  F00E         	movff	printf@val,___llmod@dividend
  2091  001802  C055  F00F         	movff	printf@val+1,___llmod@dividend+1
  2092  001806  C056  F010         	movff	printf@val+2,___llmod@dividend+2
  2093  00180A  C057  F011         	movff	printf@val+3,___llmod@dividend+3
  2094  00180E  5063               	movf	printf@c,w,c
  2095  001810  0D04               	mullw	4
  2096  001812  0E01               	movlw	low _dpowers
  2097  001814  24F3               	addwf	prodl,w,c
  2098  001816  6EF6               	movwf	tblptrl,c
  2099  001818  0E10               	movlw	high _dpowers
  2100  00181A  20F4               	addwfc	prodh,w,c
  2101  00181C  6EF7               	movwf	tblptrh,c
  2102  00181E                     	if	0	;There are less than 3 active tblptr bytes
  2103  00181E                     	endif
  2104  00181E  0009               	tblrd		*+
  2105  001820  CFF5 F012          	movff	tablat,___llmod@divisor
  2106  001824  0009               	tblrd		*+
  2107  001826  CFF5 F013          	movff	tablat,___llmod@divisor+1
  2108  00182A  0009               	tblrd		*+
  2109  00182C  CFF5 F014          	movff	tablat,___llmod@divisor+2
  2110  001830  000A               	tblrd		*-
  2111  001832  CFF5 F015          	movff	tablat,___llmod@divisor+3
  2112  001836  ECEE  F015         	call	___llmod	;wreg free
  2113  00183A  C00E  F054         	movff	?___llmod,printf@val
  2114  00183E  C00F  F055         	movff	?___llmod+1,printf@val+1
  2115  001842  C010  F056         	movff	?___llmod+2,printf@val+2
  2116  001846  C011  F057         	movff	?___llmod+3,printf@val+3
  2117  00184A  D000               	goto	l2807
  2118  00184C                     l2807:
  2119  00184C  0663               	decf	printf@c,f,c
  2120  00184E  2863               	incf	printf@c,w,c
  2121  001850  B4D8               	btfsc	status,2,c
  2122  001852  D009               	goto	l2813
  2123  001854  D790               	goto	l2801
  2124                           
  2125                           ;doprnt.c: 1233: }
  2126                           ;doprnt.c: 1235: while(prec) {
  2127  001856  D007               	goto	l2813
  2128  001858                     l2809:
  2129                           
  2130                           ;doprnt.c: 1236: (putch('0') );
  2131  001858  0E30               	movlw	48
  2132  00185A  EC87  F017         	call	_putch
  2133                           
  2134                           ;doprnt.c: 1237: prec--;
  2135  00185E  0661               	decf	printf@prec,f,c
  2136  001860  A0D8               	btfss	status,0,c
  2137  001862  0662               	decf	printf@prec+1,f,c
  2138  001864  D000               	goto	l2813
  2139  001866                     l2813:
  2140  001866  5061               	movf	printf@prec,w,c
  2141  001868  1062               	iorwf	printf@prec+1,w,c
  2142  00186A  B4D8               	btfsc	status,2,c
  2143  00186C  D134               	goto	l2901
  2144  00186E  D7F4               	goto	l2809
  2145                           
  2146                           ;doprnt.c: 1238: }
  2147                           ;doprnt.c: 1245: continue;
  2148  001870  D132               	goto	l2901
  2149  001872                     l2815:
  2150                           
  2151                           ;doprnt.c: 1246: }
  2152                           ;doprnt.c: 1253: {
  2153                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2154  001872  C04E  FFD9         	movff	printf@ap,fsr2l
  2155  001876  C04F  FFDA         	movff	printf@ap+1,fsr2h
  2156  00187A  CFDE F054          	movff	postinc2,printf@val
  2157  00187E  CFDD F055          	movff	postdec2,printf@val+1
  2158  001882  0E00               	movlw	0
  2159  001884  BE55               	btfsc	printf@val+1,7,c
  2160  001886  0EFF               	movlw	-1
  2161  001888  6E56               	movwf	printf@val+2,c
  2162  00188A  6E57               	movwf	printf@val+3,c
  2163  00188C  0E02               	movlw	2
  2164  00188E  264E               	addwf	printf@ap,f,c
  2165  001890  0E00               	movlw	0
  2166  001892  224F               	addwfc	printf@ap+1,f,c
  2167                           
  2168                           ;doprnt.c: 1261: if((long)val < 0) {
  2169  001894  AE57               	btfss	printf@val+3,7,c
  2170  001896  D00B               	goto	l2825
  2171                           
  2172                           ;doprnt.c: 1262: flag |= 0x03;
  2173  001898  0E03               	movlw	3
  2174  00189A  125A               	iorwf	printf@flag,f,c
  2175                           
  2176                           ;doprnt.c: 1263: val = -val;
  2177  00189C  1E57               	comf	printf@val+3,f,c
  2178  00189E  1E56               	comf	printf@val+2,f,c
  2179  0018A0  1E55               	comf	printf@val+1,f,c
  2180  0018A2  6C54               	negf	printf@val,c
  2181  0018A4  0E00               	movlw	0
  2182  0018A6  2255               	addwfc	printf@val+1,f,c
  2183  0018A8  2256               	addwfc	printf@val+2,f,c
  2184  0018AA  2257               	addwfc	printf@val+3,f,c
  2185  0018AC  D000               	goto	l2825
  2186  0018AE                     l2825:
  2187                           
  2188                           ;doprnt.c: 1264: }
  2189                           ;doprnt.c: 1266: }
  2190                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2191  0018AE  5061               	movf	printf@prec,w,c
  2192  0018B0  1062               	iorwf	printf@prec+1,w,c
  2193  0018B2  A4D8               	btfss	status,2,c
  2194  0018B4  D009               	goto	l2831
  2195  0018B6  5054               	movf	printf@val,w,c
  2196  0018B8  1055               	iorwf	printf@val+1,w,c
  2197  0018BA  1056               	iorwf	printf@val+2,w,c
  2198  0018BC  1057               	iorwf	printf@val+3,w,c
  2199  0018BE  A4D8               	btfss	status,2,c
  2200  0018C0  D003               	goto	l2831
  2201                           
  2202                           ;doprnt.c: 1291: prec++;
  2203  0018C2  4A61               	infsnz	printf@prec,f,c
  2204  0018C4  2A62               	incf	printf@prec+1,f,c
  2205  0018C6  D000               	goto	l2831
  2206  0018C8                     l2831:
  2207                           
  2208                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2209  0018C8  0E01               	movlw	1
  2210  0018CA  6E63               	movwf	printf@c,c
  2211  0018CC                     l2833:
  2212  0018CC  0E0A               	movlw	10
  2213  0018CE  1863               	xorwf	printf@c,w,c
  2214  0018D0  B4D8               	btfsc	status,2,c
  2215  0018D2  D01C               	goto	l2845
  2216  0018D4  D001               	goto	l2837
  2217  0018D6  D01A               	goto	l2845
  2218  0018D8                     l2837:
  2219                           
  2220                           ;doprnt.c: 1306: if(val < dpowers[c])
  2221  0018D8  5063               	movf	printf@c,w,c
  2222  0018DA  0D04               	mullw	4
  2223  0018DC  0E01               	movlw	low _dpowers
  2224  0018DE  24F3               	addwf	prodl,w,c
  2225  0018E0  6EF6               	movwf	tblptrl,c
  2226  0018E2  0E10               	movlw	high _dpowers
  2227  0018E4  20F4               	addwfc	prodh,w,c
  2228  0018E6  6EF7               	movwf	tblptrh,c
  2229  0018E8                     	if	0	;There are less than 3 active tblptr bytes
  2230  0018E8                     	endif
  2231  0018E8  0009               	tblrd		*+
  2232  0018EA  50F5               	movf	tablat,w,c
  2233  0018EC  5C54               	subwf	printf@val,w,c
  2234  0018EE  0009               	tblrd		*+
  2235  0018F0  50F5               	movf	tablat,w,c
  2236  0018F2  5855               	subwfb	printf@val+1,w,c
  2237  0018F4  0009               	tblrd		*+
  2238  0018F6  50F5               	movf	tablat,w,c
  2239  0018F8  5856               	subwfb	printf@val+2,w,c
  2240  0018FA  0009               	tblrd		*+
  2241  0018FC  50F5               	movf	tablat,w,c
  2242  0018FE  5857               	subwfb	printf@val+3,w,c
  2243  001900  A0D8               	btfss	status,0,c
  2244  001902  D004               	goto	l2845
  2245  001904  D001               	goto	l2841
  2246                           
  2247                           ;doprnt.c: 1307: break;
  2248  001906  D002               	goto	l2845
  2249  001908                     l2841:
  2250  001908  2A63               	incf	printf@c,f,c
  2251  00190A  D7E0               	goto	l2833
  2252  00190C                     l2845:
  2253                           
  2254                           ;doprnt.c: 1339: if(c < prec)
  2255  00190C  0E80               	movlw	128
  2256  00190E  BE63               	btfsc	printf@c,7,c
  2257  001910  0E7F               	movlw	127
  2258  001912  6E45               	movwf	??_printf& (0+255),c
  2259  001914  5061               	movf	printf@prec,w,c
  2260  001916  5C63               	subwf	printf@c,w,c
  2261  001918  5062               	movf	printf@prec+1,w,c
  2262  00191A  0A80               	xorlw	128
  2263  00191C  5845               	subwfb	??_printf& (0+255),w,c
  2264  00191E  B0D8               	btfsc	status,0,c
  2265  001920  D003               	goto	l2849
  2266                           
  2267                           ;doprnt.c: 1340: c = prec;
  2268  001922  C061  F063         	movff	printf@prec,printf@c
  2269  001926  D011               	goto	l2853
  2270  001928                     l2849:
  2271                           
  2272                           ;doprnt.c: 1341: else if(prec < c)
  2273  001928  5062               	movf	printf@prec+1,w,c
  2274  00192A  0A80               	xorlw	128
  2275  00192C  6E45               	movwf	??_printf& (0+255),c
  2276  00192E  5063               	movf	printf@c,w,c
  2277  001930  5C61               	subwf	printf@prec,w,c
  2278  001932  0E80               	movlw	128
  2279  001934  BE63               	btfsc	printf@c,7,c
  2280  001936  0E7F               	movlw	127
  2281  001938  5845               	subwfb	??_printf& (0+255),w,c
  2282  00193A  B0D8               	btfsc	status,0,c
  2283  00193C  D006               	goto	l2853
  2284                           
  2285                           ;doprnt.c: 1342: prec = c;
  2286  00193E  5063               	movf	printf@c,w,c
  2287  001940  6E61               	movwf	printf@prec,c
  2288  001942  6A62               	clrf	printf@prec+1,c
  2289  001944  BE61               	btfsc	printf@prec,7,c
  2290  001946  0662               	decf	printf@prec+1,f,c
  2291  001948  D000               	goto	l2853
  2292  00194A                     l2853:
  2293                           
  2294                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2295  00194A  505C               	movf	printf@width,w,c
  2296  00194C  105D               	iorwf	printf@width+1,w,c
  2297  00194E  B4D8               	btfsc	status,2,c
  2298  001950  D00E               	goto	l2859
  2299  001952  0E03               	movlw	3
  2300  001954  145A               	andwf	printf@flag,w,c
  2301  001956  6E45               	movwf	??_printf& (0+255),c
  2302  001958  0E00               	movlw	0
  2303  00195A  145B               	andwf	printf@flag+1,w,c
  2304  00195C  6E46               	movwf	(??_printf+1)& (0+255),c
  2305  00195E  5045               	movf	??_printf,w,c
  2306  001960  1046               	iorwf	??_printf+1,w,c
  2307  001962  B4D8               	btfsc	status,2,c
  2308  001964  D004               	goto	l2859
  2309                           
  2310                           ;doprnt.c: 1346: width--;
  2311  001966  065C               	decf	printf@width,f,c
  2312  001968  A0D8               	btfss	status,0,c
  2313  00196A  065D               	decf	printf@width+1,f,c
  2314  00196C  D000               	goto	l2859
  2315  00196E                     l2859:
  2316                           
  2317                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2318  00196E  AC5B               	btfss	printf@flag+1,6,c
  2319  001970  D014               	goto	l2867
  2320                           
  2321                           ;doprnt.c: 1349: if(width > prec)
  2322  001972  505C               	movf	printf@width,w,c
  2323  001974  5C61               	subwf	printf@prec,w,c
  2324  001976  5062               	movf	printf@prec+1,w,c
  2325  001978  0A80               	xorlw	128
  2326  00197A  6E45               	movwf	??_printf& (0+255),c
  2327  00197C  505D               	movf	printf@width+1,w,c
  2328  00197E  0A80               	xorlw	128
  2329  001980  5845               	subwfb	??_printf& (0+255),w,c
  2330  001982  B0D8               	btfsc	status,0,c
  2331  001984  D005               	goto	l2865
  2332                           
  2333                           ;doprnt.c: 1350: width -= prec;
  2334  001986  5061               	movf	printf@prec,w,c
  2335  001988  5E5C               	subwf	printf@width,f,c
  2336  00198A  5062               	movf	printf@prec+1,w,c
  2337  00198C  5A5D               	subwfb	printf@width+1,f,c
  2338  00198E  D005               	goto	l2867
  2339  001990                     l2865:
  2340                           
  2341                           ;doprnt.c: 1351: else
  2342                           ;doprnt.c: 1352: width = 0;
  2343  001990  0E00               	movlw	0
  2344  001992  6E5D               	movwf	printf@width+1,c
  2345  001994  0E00               	movlw	0
  2346  001996  6E5C               	movwf	printf@width,c
  2347  001998  D000               	goto	l2867
  2348  00199A                     l2867:
  2349                           
  2350                           ;doprnt.c: 1353: }
  2351                           ;doprnt.c: 1381: if(width > c)
  2352  00199A  0E80               	movlw	128
  2353  00199C  BE63               	btfsc	printf@c,7,c
  2354  00199E  0E7F               	movlw	127
  2355  0019A0  6E45               	movwf	??_printf& (0+255),c
  2356  0019A2  505C               	movf	printf@width,w,c
  2357  0019A4  5C63               	subwf	printf@c,w,c
  2358  0019A6  505D               	movf	printf@width+1,w,c
  2359  0019A8  0A80               	xorlw	128
  2360  0019AA  5845               	subwfb	??_printf& (0+255),w,c
  2361  0019AC  B0D8               	btfsc	status,0,c
  2362  0019AE  D007               	goto	l2871
  2363                           
  2364                           ;doprnt.c: 1382: width -= c;
  2365  0019B0  5063               	movf	printf@c,w,c
  2366  0019B2  5E5C               	subwf	printf@width,f,c
  2367  0019B4  0E00               	movlw	0
  2368  0019B6  BE63               	btfsc	printf@c,7,c
  2369  0019B8  0EFF               	movlw	255
  2370  0019BA  5A5D               	subwfb	printf@width+1,f,c
  2371  0019BC  D005               	goto	l2873
  2372  0019BE                     l2871:
  2373                           
  2374                           ;doprnt.c: 1383: else
  2375                           ;doprnt.c: 1384: width = 0;
  2376  0019BE  0E00               	movlw	0
  2377  0019C0  6E5D               	movwf	printf@width+1,c
  2378  0019C2  0E00               	movlw	0
  2379  0019C4  6E5C               	movwf	printf@width,c
  2380  0019C6  D000               	goto	l2873
  2381  0019C8                     l2873:
  2382                           
  2383                           ;doprnt.c: 1387: if(flag & 0x04) {
  2384  0019C8  A45A               	btfss	printf@flag,2,c
  2385  0019CA  D01E               	goto	l2885
  2386                           
  2387                           ;doprnt.c: 1392: if(flag & 0x03)
  2388  0019CC  0E03               	movlw	3
  2389  0019CE  145A               	andwf	printf@flag,w,c
  2390  0019D0  6E45               	movwf	??_printf& (0+255),c
  2391  0019D2  0E00               	movlw	0
  2392  0019D4  145B               	andwf	printf@flag+1,w,c
  2393  0019D6  6E46               	movwf	(??_printf+1)& (0+255),c
  2394  0019D8  5045               	movf	??_printf,w,c
  2395  0019DA  1046               	iorwf	??_printf+1,w,c
  2396  0019DC  B4D8               	btfsc	status,2,c
  2397  0019DE  D004               	goto	l2879
  2398                           
  2399                           ;doprnt.c: 1393: (putch('-') );
  2400  0019E0  0E2D               	movlw	45
  2401  0019E2  EC87  F017         	call	_putch
  2402  0019E6  D000               	goto	l2879
  2403  0019E8                     l2879:
  2404                           
  2405                           ;doprnt.c: 1415: if(width)
  2406  0019E8  505C               	movf	printf@width,w,c
  2407  0019EA  105D               	iorwf	printf@width+1,w,c
  2408  0019EC  B4D8               	btfsc	status,2,c
  2409  0019EE  D069               	goto	l2899
  2410  0019F0                     l2881:
  2411                           
  2412                           ;doprnt.c: 1417: (putch('0') );
  2413  0019F0  0E30               	movlw	48
  2414  0019F2  EC87  F017         	call	_putch
  2415                           
  2416                           ;doprnt.c: 1418: while(--width);
  2417  0019F6  065C               	decf	printf@width,f,c
  2418  0019F8  A0D8               	btfss	status,0,c
  2419  0019FA  065D               	decf	printf@width+1,f,c
  2420  0019FC  505C               	movf	printf@width,w,c
  2421  0019FE  105D               	iorwf	printf@width+1,w,c
  2422  001A00  B4D8               	btfsc	status,2,c
  2423  001A02  D05F               	goto	l2899
  2424  001A04  D7F5               	goto	l2881
  2425                           
  2426                           ;doprnt.c: 1420: } else
  2427  001A06  D05D               	goto	l2899
  2428  001A08                     l2885:
  2429                           
  2430                           ;doprnt.c: 1422: {
  2431                           ;doprnt.c: 1424: if(width
  2432                           ;doprnt.c: 1428: )
  2433  001A08  505C               	movf	printf@width,w,c
  2434  001A0A  105D               	iorwf	printf@width+1,w,c
  2435  001A0C  B4D8               	btfsc	status,2,c
  2436  001A0E  D00C               	goto	l2891
  2437  001A10                     l2887:
  2438                           
  2439                           ;doprnt.c: 1430: (putch(' ') );
  2440  001A10  0E20               	movlw	32
  2441  001A12  EC87  F017         	call	_putch
  2442                           
  2443                           ;doprnt.c: 1431: while(--width);
  2444  001A16  065C               	decf	printf@width,f,c
  2445  001A18  A0D8               	btfss	status,0,c
  2446  001A1A  065D               	decf	printf@width+1,f,c
  2447  001A1C  505C               	movf	printf@width,w,c
  2448  001A1E  105D               	iorwf	printf@width+1,w,c
  2449  001A20  B4D8               	btfsc	status,2,c
  2450  001A22  D002               	goto	l2891
  2451  001A24  D7F5               	goto	l2887
  2452  001A26  D000               	goto	l2891
  2453  001A28                     l2891:
  2454                           
  2455                           ;doprnt.c: 1438: if(flag & 0x03)
  2456  001A28  0E03               	movlw	3
  2457  001A2A  145A               	andwf	printf@flag,w,c
  2458  001A2C  6E45               	movwf	??_printf& (0+255),c
  2459  001A2E  0E00               	movlw	0
  2460  001A30  145B               	andwf	printf@flag+1,w,c
  2461  001A32  6E46               	movwf	(??_printf+1)& (0+255),c
  2462  001A34  5045               	movf	??_printf,w,c
  2463  001A36  1046               	iorwf	??_printf+1,w,c
  2464  001A38  B4D8               	btfsc	status,2,c
  2465  001A3A  D043               	goto	l2899
  2466                           
  2467                           ;doprnt.c: 1439: (putch('-') );
  2468  001A3C  0E2D               	movlw	45
  2469  001A3E  EC87  F017         	call	_putch
  2470                           
  2471                           ;doprnt.c: 1469: }
  2472                           ;doprnt.c: 1474: while(prec--) {
  2473  001A42  D03F               	goto	l2899
  2474  001A44                     l2895:
  2475                           
  2476                           ;doprnt.c: 1478: {
  2477                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2478  001A44  C061  F045         	movff	printf@prec,??_printf
  2479  001A48  C062  F046         	movff	printf@prec+1,??_printf+1
  2480  001A4C  90D8               	bcf	status,0,c
  2481  001A4E  3645               	rlcf	??_printf,f,c
  2482  001A50  3646               	rlcf	??_printf+1,f,c
  2483  001A52  90D8               	bcf	status,0,c
  2484  001A54  3645               	rlcf	??_printf,f,c
  2485  001A56  3646               	rlcf	??_printf+1,f,c
  2486  001A58  0E01               	movlw	low _dpowers
  2487  001A5A  2445               	addwf	??_printf,w,c
  2488  001A5C  6EF6               	movwf	tblptrl,c
  2489  001A5E  0E10               	movlw	high _dpowers
  2490  001A60  2046               	addwfc	??_printf+1,w,c
  2491  001A62  6EF7               	movwf	tblptrh,c
  2492  001A64                     	if	0	;There are less than 3 active tblptr bytes
  2493  001A64                     	endif
  2494  001A64  0009               	tblrd		*+
  2495  001A66  CFF5 F005          	movff	tablat,___lldiv@divisor
  2496  001A6A  0009               	tblrd		*+
  2497  001A6C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2498  001A70  0009               	tblrd		*+
  2499  001A72  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2500  001A76  000A               	tblrd		*-
  2501  001A78  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2502  001A7C  C054  F001         	movff	printf@val,___lldiv@dividend
  2503  001A80  C055  F002         	movff	printf@val+1,___lldiv@dividend+1
  2504  001A84  C056  F003         	movff	printf@val+2,___lldiv@dividend+2
  2505  001A88  C057  F004         	movff	printf@val+3,___lldiv@dividend+3
  2506  001A8C  EC67  F015         	call	___lldiv	;wreg free
  2507  001A90  C001  F00E         	movff	?___lldiv,___llmod@dividend
  2508  001A94  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  2509  001A98  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  2510  001A9C  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  2511  001AA0  0E0A               	movlw	10
  2512  001AA2  6E12               	movwf	___llmod@divisor,c
  2513  001AA4  0E00               	movlw	0
  2514  001AA6  6E13               	movwf	___llmod@divisor+1,c
  2515  001AA8  0E00               	movlw	0
  2516  001AAA  6E14               	movwf	___llmod@divisor+2,c
  2517  001AAC  0E00               	movlw	0
  2518  001AAE  6E15               	movwf	___llmod@divisor+3,c
  2519  001AB0  ECEE  F015         	call	___llmod	;wreg free
  2520  001AB4  500E               	movf	?___llmod,w,c
  2521  001AB6  0F30               	addlw	48
  2522  001AB8  6E63               	movwf	printf@c,c
  2523                           
  2524                           ;doprnt.c: 1523: }
  2525                           ;doprnt.c: 1524: (putch(c) );
  2526  001ABA  5063               	movf	printf@c,w,c
  2527  001ABC  EC87  F017         	call	_putch
  2528  001AC0  D000               	goto	l2899
  2529  001AC2                     l2899:
  2530  001AC2  0661               	decf	printf@prec,f,c
  2531  001AC4  A0D8               	btfss	status,0,c
  2532  001AC6  0662               	decf	printf@prec+1,f,c
  2533  001AC8  2861               	incf	printf@prec,w,c
  2534  001ACA  E1BC               	bnz	l2895
  2535  001ACC  2862               	incf	printf@prec+1,w,c
  2536  001ACE  B4D8               	btfsc	status,2,c
  2537  001AD0  D002               	goto	l2901
  2538  001AD2  D7B8               	goto	l2895
  2539  001AD4  D000               	goto	l2901
  2540  001AD6                     l2901:
  2541  001AD6  C040  FFF6         	movff	printf@f,tblptrl
  2542  001ADA  C041  FFF7         	movff	printf@f+1,tblptrh
  2543  001ADE  4A40               	infsnz	printf@f,f,c
  2544  001AE0  2A41               	incf	printf@f+1,f,c
  2545  001AE2                     	if	0	;tblptru may be non-zero
  2546  001AE2                     	endif
  2547  001AE2                     	if	0	;tblptru may be non-zero
  2548  001AE2                     	endif
  2549  001AE2  0008               	tblrd		*
  2550  001AE4  CFF5 F063          	movff	tablat,printf@c
  2551  001AE8  5063               	movf	printf@c,w,c
  2552  001AEA  B4D8               	btfsc	status,2,c
  2553  001AEC  D003               	goto	l263
  2554  001AEE  EF53  F008         	goto	l2609
  2555  001AF2  D000               	goto	l263
  2556  001AF4                     l263:
  2557  001AF4  0012               	return		;funcret
  2558  001AF6                     __end_of_printf:
  2559                           	opt stack 0
  2560                           tblptru	equ	0xFF8
  2561                           tblptrh	equ	0xFF7
  2562                           tblptrl	equ	0xFF6
  2563                           tablat	equ	0xFF5
  2564                           prodh	equ	0xFF4
  2565                           prodl	equ	0xFF3
  2566                           postinc0	equ	0xFEE
  2567                           wreg	equ	0xFE8
  2568                           postdec1	equ	0xFE5
  2569                           fsr1l	equ	0xFE1
  2570                           postinc2	equ	0xFDE
  2571                           postdec2	equ	0xFDD
  2572                           fsr2h	equ	0xFDA
  2573                           fsr2l	equ	0xFD9
  2574                           status	equ	0xFD8
  2575                           
  2576 ;; *************** function _scale *****************
  2577 ;; Defined at:
  2578 ;;		line 425 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2579 ;; Parameters:    Size  Location     Type
  2580 ;;  scl             1    wreg     char 
  2581 ;; Auto vars:     Size  Location     Type
  2582 ;;  scl             1   41[COMRAM] char 
  2583 ;; Return value:  Size  Location     Type
  2584 ;;                  3   35[COMRAM] char 
  2585 ;; Registers used:
  2586 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2587 ;; Tracked objects:
  2588 ;;		On entry : 0/0
  2589 ;;		On exit  : 0/0
  2590 ;;		Unchanged: 0/0
  2591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2592 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2595 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2596 ;;Total ram usage:        7 bytes
  2597 ;; Hardware stack levels used:    1
  2598 ;; Hardware stack levels required when called:    2
  2599 ;; This function calls:
  2600 ;;		___awdiv
  2601 ;;		___awmod
  2602 ;;		___ftmul
  2603 ;;		___wmul
  2604 ;; This function is called by:
  2605 ;;		_printf
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text2
  2610  001AF6                     __ptext2:
  2611                           	opt stack 0
  2612  001AF6                     _scale:
  2613                           	opt stack 27
  2614                           
  2615                           ;incstack = 0
  2616                           ;scale@scl stored from wreg
  2617  001AF6  6E2A               	movwf	scale@scl,c
  2618                           
  2619                           ;doprnt.c: 428: if(scl < 0) {
  2620  001AF8  AE2A               	btfss	scale@scl,7,c
  2621  001AFA  D0EF               	goto	l2325
  2622                           
  2623                           ;doprnt.c: 429: scl = -scl;
  2624  001AFC  6C2A               	negf	scale@scl,c
  2625                           
  2626                           ;doprnt.c: 430: if(scl>=110)
  2627  001AFE  502A               	movf	scale@scl,w,c
  2628  001B00  0A80               	xorlw	128
  2629  001B02  0F12               	addlw	-238
  2630  001B04  A0D8               	btfss	status,0,c
  2631  001B06  D08D               	goto	l2315
  2632                           
  2633                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2634  001B08  0E00               	movlw	0
  2635  001B0A  6E12               	movwf	___wmul@multiplicand+1,c
  2636  001B0C  0E03               	movlw	3
  2637  001B0E  6E11               	movwf	___wmul@multiplicand,c
  2638  001B10  0E00               	movlw	0
  2639  001B12  6E04               	movwf	___awdiv@divisor+1,c
  2640  001B14  0E0A               	movlw	10
  2641  001B16  6E03               	movwf	___awdiv@divisor,c
  2642  001B18  0E00               	movlw	0
  2643  001B1A  6E0C               	movwf	___awmod@divisor+1,c
  2644  001B1C  0E64               	movlw	100
  2645  001B1E  6E0B               	movwf	___awmod@divisor,c
  2646  001B20  502A               	movf	scale@scl,w,c
  2647  001B22  6E09               	movwf	___awmod@dividend,c
  2648  001B24  6A0A               	clrf	___awmod@dividend+1,c
  2649  001B26  BE09               	btfsc	___awmod@dividend,7,c
  2650  001B28  060A               	decf	___awmod@dividend+1,f,c
  2651  001B2A  ECAD  F015         	call	___awmod	;wreg free
  2652  001B2E  C009  F001         	movff	?___awmod,___awdiv@dividend
  2653  001B32  C00A  F002         	movff	?___awmod+1,___awdiv@dividend+1
  2654  001B36  ECD1  F014         	call	___awdiv	;wreg free
  2655  001B3A  0E09               	movlw	9
  2656  001B3C  2401               	addwf	?___awdiv,w,c
  2657  001B3E  6E0F               	movwf	___wmul@multiplier,c
  2658  001B40  0E00               	movlw	0
  2659  001B42  2002               	addwfc	?___awdiv+1,w,c
  2660  001B44  6E10               	movwf	___wmul@multiplier+1,c
  2661  001B46  EC02  F017         	call	___wmul	;wreg free
  2662  001B4A  0E29               	movlw	low __npowers_
  2663  001B4C  240F               	addwf	?___wmul,w,c
  2664  001B4E  6EF6               	movwf	tblptrl,c
  2665  001B50  0E10               	movlw	high __npowers_
  2666  001B52  2010               	addwfc	?___wmul+1,w,c
  2667  001B54  6EF7               	movwf	tblptrh,c
  2668  001B56                     	if	0	;There are less than 3 active tblptr bytes
  2669  001B56                     	endif
  2670  001B56  0009               	tblrd		*+
  2671  001B58  CFF5 F018          	movff	tablat,___ftmul@f2
  2672  001B5C  0009               	tblrd		*+
  2673  001B5E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2674  001B62  000A               	tblrd		*-
  2675  001B64  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2676  001B68  0E00               	movlw	0
  2677  001B6A  6E04               	movwf	___awdiv@divisor+1,c
  2678  001B6C  0E64               	movlw	100
  2679  001B6E  6E03               	movwf	___awdiv@divisor,c
  2680  001B70  502A               	movf	scale@scl,w,c
  2681  001B72  6E01               	movwf	___awdiv@dividend,c
  2682  001B74  6A02               	clrf	___awdiv@dividend+1,c
  2683  001B76  BE01               	btfsc	___awdiv@dividend,7,c
  2684  001B78  0602               	decf	___awdiv@dividend+1,f,c
  2685  001B7A  ECD1  F014         	call	___awdiv	;wreg free
  2686  001B7E  0E12               	movlw	18
  2687  001B80  2401               	addwf	?___awdiv,w,c
  2688  001B82  6E0F               	movwf	___wmul@multiplier,c
  2689  001B84  0E00               	movlw	0
  2690  001B86  2002               	addwfc	?___awdiv+1,w,c
  2691  001B88  6E10               	movwf	___wmul@multiplier+1,c
  2692  001B8A  0E00               	movlw	0
  2693  001B8C  6E12               	movwf	___wmul@multiplicand+1,c
  2694  001B8E  0E03               	movlw	3
  2695  001B90  6E11               	movwf	___wmul@multiplicand,c
  2696  001B92  EC02  F017         	call	___wmul	;wreg free
  2697  001B96  0E29               	movlw	low __npowers_
  2698  001B98  240F               	addwf	?___wmul,w,c
  2699  001B9A  6EF6               	movwf	tblptrl,c
  2700  001B9C  0E10               	movlw	high __npowers_
  2701  001B9E  2010               	addwfc	?___wmul+1,w,c
  2702  001BA0  6EF7               	movwf	tblptrh,c
  2703  001BA2                     	if	0	;There are less than 3 active tblptr bytes
  2704  001BA2                     	endif
  2705  001BA2  0009               	tblrd		*+
  2706  001BA4  CFF5 F015          	movff	tablat,___ftmul@f1
  2707  001BA8  0009               	tblrd		*+
  2708  001BAA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2709  001BAE  000A               	tblrd		*-
  2710  001BB0  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2711  001BB4  EC0E  F013         	call	___ftmul	;wreg free
  2712  001BB8  C015  F027         	movff	?___ftmul,_scale$1263
  2713  001BBC  C016  F028         	movff	?___ftmul+1,_scale$1263+1
  2714  001BC0  C017  F029         	movff	?___ftmul+2,_scale$1263+2
  2715                           
  2716                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2717  001BC4  C027  F015         	movff	_scale$1263,___ftmul@f1
  2718  001BC8  C028  F016         	movff	_scale$1263+1,___ftmul@f1+1
  2719  001BCC  C029  F017         	movff	_scale$1263+2,___ftmul@f1+2
  2720  001BD0  0E00               	movlw	0
  2721  001BD2  6E12               	movwf	___wmul@multiplicand+1,c
  2722  001BD4  0E03               	movlw	3
  2723  001BD6  6E11               	movwf	___wmul@multiplicand,c
  2724  001BD8  0E00               	movlw	0
  2725  001BDA  6E0C               	movwf	___awmod@divisor+1,c
  2726  001BDC  0E0A               	movlw	10
  2727  001BDE  6E0B               	movwf	___awmod@divisor,c
  2728  001BE0  502A               	movf	scale@scl,w,c
  2729  001BE2  6E09               	movwf	___awmod@dividend,c
  2730  001BE4  6A0A               	clrf	___awmod@dividend+1,c
  2731  001BE6  BE09               	btfsc	___awmod@dividend,7,c
  2732  001BE8  060A               	decf	___awmod@dividend+1,f,c
  2733  001BEA  ECAD  F015         	call	___awmod	;wreg free
  2734  001BEE  C009  F00F         	movff	?___awmod,___wmul@multiplier
  2735  001BF2  C00A  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2736  001BF6  EC02  F017         	call	___wmul	;wreg free
  2737  001BFA  0E29               	movlw	low __npowers_
  2738  001BFC  240F               	addwf	?___wmul,w,c
  2739  001BFE  6EF6               	movwf	tblptrl,c
  2740  001C00  0E10               	movlw	high __npowers_
  2741  001C02  2010               	addwfc	?___wmul+1,w,c
  2742  001C04  6EF7               	movwf	tblptrh,c
  2743  001C06                     	if	0	;There are less than 3 active tblptr bytes
  2744  001C06                     	endif
  2745  001C06  0009               	tblrd		*+
  2746  001C08  CFF5 F018          	movff	tablat,___ftmul@f2
  2747  001C0C  0009               	tblrd		*+
  2748  001C0E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2749  001C12  000A               	tblrd		*-
  2750  001C14  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2751  001C18  EC0E  F013         	call	___ftmul	;wreg free
  2752  001C1C  D141               	goto	L5
  2753  001C1E  D15A               	goto	l153
  2754  001C20  D054               	goto	l2321
  2755  001C22                     l2315:
  2756                           
  2757                           ;doprnt.c: 432: else if(scl > 10)
  2758  001C22  502A               	movf	scale@scl,w,c
  2759  001C24  0A80               	xorlw	128
  2760  001C26  0F75               	addlw	-139
  2761  001C28  A0D8               	btfss	status,0,c
  2762  001C2A  D04F               	goto	l2321
  2763                           
  2764                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2765  001C2C  0E00               	movlw	0
  2766  001C2E  6E04               	movwf	___awdiv@divisor+1,c
  2767  001C30  0E0A               	movlw	10
  2768  001C32  6E03               	movwf	___awdiv@divisor,c
  2769  001C34  502A               	movf	scale@scl,w,c
  2770  001C36  6E01               	movwf	___awdiv@dividend,c
  2771  001C38  6A02               	clrf	___awdiv@dividend+1,c
  2772  001C3A  BE01               	btfsc	___awdiv@dividend,7,c
  2773  001C3C  0602               	decf	___awdiv@dividend+1,f,c
  2774  001C3E  ECD1  F014         	call	___awdiv	;wreg free
  2775  001C42  0E09               	movlw	9
  2776  001C44  2401               	addwf	?___awdiv,w,c
  2777  001C46  6E0F               	movwf	___wmul@multiplier,c
  2778  001C48  0E00               	movlw	0
  2779  001C4A  2002               	addwfc	?___awdiv+1,w,c
  2780  001C4C  6E10               	movwf	___wmul@multiplier+1,c
  2781  001C4E  0E00               	movlw	0
  2782  001C50  6E12               	movwf	___wmul@multiplicand+1,c
  2783  001C52  0E03               	movlw	3
  2784  001C54  6E11               	movwf	___wmul@multiplicand,c
  2785  001C56  EC02  F017         	call	___wmul	;wreg free
  2786  001C5A  0E29               	movlw	low __npowers_
  2787  001C5C  240F               	addwf	?___wmul,w,c
  2788  001C5E  6EF6               	movwf	tblptrl,c
  2789  001C60  0E10               	movlw	high __npowers_
  2790  001C62  2010               	addwfc	?___wmul+1,w,c
  2791  001C64  6EF7               	movwf	tblptrh,c
  2792  001C66                     	if	0	;There are less than 3 active tblptr bytes
  2793  001C66                     	endif
  2794  001C66  0009               	tblrd		*+
  2795  001C68  CFF5 F015          	movff	tablat,___ftmul@f1
  2796  001C6C  0009               	tblrd		*+
  2797  001C6E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2798  001C72  000A               	tblrd		*-
  2799  001C74  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2800  001C78  0E00               	movlw	0
  2801  001C7A  6E12               	movwf	___wmul@multiplicand+1,c
  2802  001C7C  0E03               	movlw	3
  2803  001C7E  6E11               	movwf	___wmul@multiplicand,c
  2804  001C80  0E00               	movlw	0
  2805  001C82  6E0C               	movwf	___awmod@divisor+1,c
  2806  001C84  0E0A               	movlw	10
  2807  001C86  6E0B               	movwf	___awmod@divisor,c
  2808  001C88  502A               	movf	scale@scl,w,c
  2809  001C8A  6E09               	movwf	___awmod@dividend,c
  2810  001C8C  6A0A               	clrf	___awmod@dividend+1,c
  2811  001C8E  BE09               	btfsc	___awmod@dividend,7,c
  2812  001C90  060A               	decf	___awmod@dividend+1,f,c
  2813  001C92  ECAD  F015         	call	___awmod	;wreg free
  2814  001C96  C009  F00F         	movff	?___awmod,___wmul@multiplier
  2815  001C9A  C00A  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2816  001C9E  EC02  F017         	call	___wmul	;wreg free
  2817  001CA2  0E29               	movlw	low __npowers_
  2818  001CA4  240F               	addwf	?___wmul,w,c
  2819  001CA6  6EF6               	movwf	tblptrl,c
  2820  001CA8  0E10               	movlw	high __npowers_
  2821  001CAA  2010               	addwfc	?___wmul+1,w,c
  2822  001CAC  6EF7               	movwf	tblptrh,c
  2823  001CAE                     	if	0	;There are less than 3 active tblptr bytes
  2824  001CAE                     	endif
  2825  001CAE  0009               	tblrd		*+
  2826  001CB0  CFF5 F018          	movff	tablat,___ftmul@f2
  2827  001CB4  0009               	tblrd		*+
  2828  001CB6  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2829  001CBA  000A               	tblrd		*-
  2830  001CBC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2831  001CC0  EC0E  F013         	call	___ftmul	;wreg free
  2832  001CC4  D0ED               	goto	L5
  2833  001CC6  D106               	goto	l153
  2834  001CC8  D000               	goto	l2321
  2835  001CCA                     l2321:
  2836                           
  2837                           ;doprnt.c: 434: return _npowers_[scl];
  2838  001CCA  502A               	movf	scale@scl,w,c
  2839  001CCC  0D03               	mullw	3
  2840  001CCE  0E29               	movlw	low __npowers_
  2841  001CD0  24F3               	addwf	prodl,w,c
  2842  001CD2  6EF6               	movwf	tblptrl,c
  2843  001CD4  0E10               	movlw	high __npowers_
  2844  001CD6  D0F2               	goto	L4
  2845  001CD8  D0FD               	goto	l153
  2846  001CDA                     l2325:
  2847                           
  2848                           ;doprnt.c: 435: }
  2849                           ;doprnt.c: 436: if(scl>=110)
  2850  001CDA  502A               	movf	scale@scl,w,c
  2851  001CDC  0A80               	xorlw	128
  2852  001CDE  0F12               	addlw	-238
  2853  001CE0  A0D8               	btfss	status,0,c
  2854  001CE2  D08D               	goto	l2333
  2855                           
  2856                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2857  001CE4  0E00               	movlw	0
  2858  001CE6  6E12               	movwf	___wmul@multiplicand+1,c
  2859  001CE8  0E03               	movlw	3
  2860  001CEA  6E11               	movwf	___wmul@multiplicand,c
  2861  001CEC  0E00               	movlw	0
  2862  001CEE  6E04               	movwf	___awdiv@divisor+1,c
  2863  001CF0  0E0A               	movlw	10
  2864  001CF2  6E03               	movwf	___awdiv@divisor,c
  2865  001CF4  0E00               	movlw	0
  2866  001CF6  6E0C               	movwf	___awmod@divisor+1,c
  2867  001CF8  0E64               	movlw	100
  2868  001CFA  6E0B               	movwf	___awmod@divisor,c
  2869  001CFC  502A               	movf	scale@scl,w,c
  2870  001CFE  6E09               	movwf	___awmod@dividend,c
  2871  001D00  6A0A               	clrf	___awmod@dividend+1,c
  2872  001D02  BE09               	btfsc	___awmod@dividend,7,c
  2873  001D04  060A               	decf	___awmod@dividend+1,f,c
  2874  001D06  ECAD  F015         	call	___awmod	;wreg free
  2875  001D0A  C009  F001         	movff	?___awmod,___awdiv@dividend
  2876  001D0E  C00A  F002         	movff	?___awmod+1,___awdiv@dividend+1
  2877  001D12  ECD1  F014         	call	___awdiv	;wreg free
  2878  001D16  0E09               	movlw	9
  2879  001D18  2401               	addwf	?___awdiv,w,c
  2880  001D1A  6E0F               	movwf	___wmul@multiplier,c
  2881  001D1C  0E00               	movlw	0
  2882  001D1E  2002               	addwfc	?___awdiv+1,w,c
  2883  001D20  6E10               	movwf	___wmul@multiplier+1,c
  2884  001D22  EC02  F017         	call	___wmul	;wreg free
  2885  001D26  0E50               	movlw	low __powers_
  2886  001D28  240F               	addwf	?___wmul,w,c
  2887  001D2A  6EF6               	movwf	tblptrl,c
  2888  001D2C  0E10               	movlw	high __powers_
  2889  001D2E  2010               	addwfc	?___wmul+1,w,c
  2890  001D30  6EF7               	movwf	tblptrh,c
  2891  001D32                     	if	0	;There are less than 3 active tblptr bytes
  2892  001D32                     	endif
  2893  001D32  0009               	tblrd		*+
  2894  001D34  CFF5 F018          	movff	tablat,___ftmul@f2
  2895  001D38  0009               	tblrd		*+
  2896  001D3A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2897  001D3E  000A               	tblrd		*-
  2898  001D40  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2899  001D44  0E00               	movlw	0
  2900  001D46  6E04               	movwf	___awdiv@divisor+1,c
  2901  001D48  0E64               	movlw	100
  2902  001D4A  6E03               	movwf	___awdiv@divisor,c
  2903  001D4C  502A               	movf	scale@scl,w,c
  2904  001D4E  6E01               	movwf	___awdiv@dividend,c
  2905  001D50  6A02               	clrf	___awdiv@dividend+1,c
  2906  001D52  BE01               	btfsc	___awdiv@dividend,7,c
  2907  001D54  0602               	decf	___awdiv@dividend+1,f,c
  2908  001D56  ECD1  F014         	call	___awdiv	;wreg free
  2909  001D5A  0E12               	movlw	18
  2910  001D5C  2401               	addwf	?___awdiv,w,c
  2911  001D5E  6E0F               	movwf	___wmul@multiplier,c
  2912  001D60  0E00               	movlw	0
  2913  001D62  2002               	addwfc	?___awdiv+1,w,c
  2914  001D64  6E10               	movwf	___wmul@multiplier+1,c
  2915  001D66  0E00               	movlw	0
  2916  001D68  6E12               	movwf	___wmul@multiplicand+1,c
  2917  001D6A  0E03               	movlw	3
  2918  001D6C  6E11               	movwf	___wmul@multiplicand,c
  2919  001D6E  EC02  F017         	call	___wmul	;wreg free
  2920  001D72  0E50               	movlw	low __powers_
  2921  001D74  240F               	addwf	?___wmul,w,c
  2922  001D76  6EF6               	movwf	tblptrl,c
  2923  001D78  0E10               	movlw	high __powers_
  2924  001D7A  2010               	addwfc	?___wmul+1,w,c
  2925  001D7C  6EF7               	movwf	tblptrh,c
  2926  001D7E                     	if	0	;There are less than 3 active tblptr bytes
  2927  001D7E                     	endif
  2928  001D7E  0009               	tblrd		*+
  2929  001D80  CFF5 F015          	movff	tablat,___ftmul@f1
  2930  001D84  0009               	tblrd		*+
  2931  001D86  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2932  001D8A  000A               	tblrd		*-
  2933  001D8C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2934  001D90  EC0E  F013         	call	___ftmul	;wreg free
  2935  001D94  C015  F027         	movff	?___ftmul,_scale$1263
  2936  001D98  C016  F028         	movff	?___ftmul+1,_scale$1263+1
  2937  001D9C  C017  F029         	movff	?___ftmul+2,_scale$1263+2
  2938                           
  2939                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2940  001DA0  C027  F015         	movff	_scale$1263,___ftmul@f1
  2941  001DA4  C028  F016         	movff	_scale$1263+1,___ftmul@f1+1
  2942  001DA8  C029  F017         	movff	_scale$1263+2,___ftmul@f1+2
  2943  001DAC  0E00               	movlw	0
  2944  001DAE  6E12               	movwf	___wmul@multiplicand+1,c
  2945  001DB0  0E03               	movlw	3
  2946  001DB2  6E11               	movwf	___wmul@multiplicand,c
  2947  001DB4  0E00               	movlw	0
  2948  001DB6  6E0C               	movwf	___awmod@divisor+1,c
  2949  001DB8  0E0A               	movlw	10
  2950  001DBA  6E0B               	movwf	___awmod@divisor,c
  2951  001DBC  502A               	movf	scale@scl,w,c
  2952  001DBE  6E09               	movwf	___awmod@dividend,c
  2953  001DC0  6A0A               	clrf	___awmod@dividend+1,c
  2954  001DC2  BE09               	btfsc	___awmod@dividend,7,c
  2955  001DC4  060A               	decf	___awmod@dividend+1,f,c
  2956  001DC6  ECAD  F015         	call	___awmod	;wreg free
  2957  001DCA  C009  F00F         	movff	?___awmod,___wmul@multiplier
  2958  001DCE  C00A  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2959  001DD2  EC02  F017         	call	___wmul	;wreg free
  2960  001DD6  0E50               	movlw	low __powers_
  2961  001DD8  240F               	addwf	?___wmul,w,c
  2962  001DDA  6EF6               	movwf	tblptrl,c
  2963  001DDC  0E10               	movlw	high __powers_
  2964  001DDE  2010               	addwfc	?___wmul+1,w,c
  2965  001DE0  6EF7               	movwf	tblptrh,c
  2966  001DE2                     	if	0	;There are less than 3 active tblptr bytes
  2967  001DE2                     	endif
  2968  001DE2  0009               	tblrd		*+
  2969  001DE4  CFF5 F018          	movff	tablat,___ftmul@f2
  2970  001DE8  0009               	tblrd		*+
  2971  001DEA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2972  001DEE  000A               	tblrd		*-
  2973  001DF0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2974  001DF4  EC0E  F013         	call	___ftmul	;wreg free
  2975  001DF8  D053               	goto	L5
  2976  001DFA  D06C               	goto	l153
  2977  001DFC  D059               	goto	l2339
  2978  001DFE                     l2333:
  2979                           
  2980                           ;doprnt.c: 438: else if(scl > 10)
  2981  001DFE  502A               	movf	scale@scl,w,c
  2982  001E00  0A80               	xorlw	128
  2983  001E02  0F75               	addlw	-139
  2984  001E04  A0D8               	btfss	status,0,c
  2985  001E06  D054               	goto	l2339
  2986                           
  2987                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2988  001E08  0E00               	movlw	0
  2989  001E0A  6E04               	movwf	___awdiv@divisor+1,c
  2990  001E0C  0E0A               	movlw	10
  2991  001E0E  6E03               	movwf	___awdiv@divisor,c
  2992  001E10  502A               	movf	scale@scl,w,c
  2993  001E12  6E01               	movwf	___awdiv@dividend,c
  2994  001E14  6A02               	clrf	___awdiv@dividend+1,c
  2995  001E16  BE01               	btfsc	___awdiv@dividend,7,c
  2996  001E18  0602               	decf	___awdiv@dividend+1,f,c
  2997  001E1A  ECD1  F014         	call	___awdiv	;wreg free
  2998  001E1E  0E09               	movlw	9
  2999  001E20  2401               	addwf	?___awdiv,w,c
  3000  001E22  6E0F               	movwf	___wmul@multiplier,c
  3001  001E24  0E00               	movlw	0
  3002  001E26  2002               	addwfc	?___awdiv+1,w,c
  3003  001E28  6E10               	movwf	___wmul@multiplier+1,c
  3004  001E2A  0E00               	movlw	0
  3005  001E2C  6E12               	movwf	___wmul@multiplicand+1,c
  3006  001E2E  0E03               	movlw	3
  3007  001E30  6E11               	movwf	___wmul@multiplicand,c
  3008  001E32  EC02  F017         	call	___wmul	;wreg free
  3009  001E36  0E50               	movlw	low __powers_
  3010  001E38  240F               	addwf	?___wmul,w,c
  3011  001E3A  6EF6               	movwf	tblptrl,c
  3012  001E3C  0E10               	movlw	high __powers_
  3013  001E3E  2010               	addwfc	?___wmul+1,w,c
  3014  001E40  6EF7               	movwf	tblptrh,c
  3015  001E42                     	if	0	;There are less than 3 active tblptr bytes
  3016  001E42                     	endif
  3017  001E42  0009               	tblrd		*+
  3018  001E44  CFF5 F015          	movff	tablat,___ftmul@f1
  3019  001E48  0009               	tblrd		*+
  3020  001E4A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3021  001E4E  000A               	tblrd		*-
  3022  001E50  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3023  001E54  0E00               	movlw	0
  3024  001E56  6E12               	movwf	___wmul@multiplicand+1,c
  3025  001E58  0E03               	movlw	3
  3026  001E5A  6E11               	movwf	___wmul@multiplicand,c
  3027  001E5C  0E00               	movlw	0
  3028  001E5E  6E0C               	movwf	___awmod@divisor+1,c
  3029  001E60  0E0A               	movlw	10
  3030  001E62  6E0B               	movwf	___awmod@divisor,c
  3031  001E64  502A               	movf	scale@scl,w,c
  3032  001E66  6E09               	movwf	___awmod@dividend,c
  3033  001E68  6A0A               	clrf	___awmod@dividend+1,c
  3034  001E6A  BE09               	btfsc	___awmod@dividend,7,c
  3035  001E6C  060A               	decf	___awmod@dividend+1,f,c
  3036  001E6E  ECAD  F015         	call	___awmod	;wreg free
  3037  001E72  C009  F00F         	movff	?___awmod,___wmul@multiplier
  3038  001E76  C00A  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3039  001E7A  EC02  F017         	call	___wmul	;wreg free
  3040  001E7E  0E50               	movlw	low __powers_
  3041  001E80  240F               	addwf	?___wmul,w,c
  3042  001E82  6EF6               	movwf	tblptrl,c
  3043  001E84  0E10               	movlw	high __powers_
  3044  001E86  2010               	addwfc	?___wmul+1,w,c
  3045  001E88  6EF7               	movwf	tblptrh,c
  3046  001E8A                     	if	0	;There are less than 3 active tblptr bytes
  3047  001E8A                     	endif
  3048  001E8A  0009               	tblrd		*+
  3049  001E8C  CFF5 F018          	movff	tablat,___ftmul@f2
  3050  001E90  0009               	tblrd		*+
  3051  001E92  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3052  001E96  000A               	tblrd		*-
  3053  001E98  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3054  001E9C  EC0E  F013         	call	___ftmul	;wreg free
  3055  001EA0                     L5:
  3056  001EA0  C015  F024         	movff	?___ftmul,?_scale
  3057  001EA4  C016  F025         	movff	?___ftmul+1,?_scale+1
  3058  001EA8  C017  F026         	movff	?___ftmul+2,?_scale+2
  3059  001EAC  D013               	goto	l153
  3060  001EAE  D000               	goto	l2339
  3061  001EB0                     l2339:
  3062                           
  3063                           ;doprnt.c: 440: return _powers_[scl];
  3064  001EB0  502A               	movf	scale@scl,w,c
  3065  001EB2  0D03               	mullw	3
  3066  001EB4  0E50               	movlw	low __powers_
  3067  001EB6  24F3               	addwf	prodl,w,c
  3068  001EB8  6EF6               	movwf	tblptrl,c
  3069  001EBA  0E10               	movlw	high __powers_
  3070  001EBC                     L4:
  3071  001EBC  20F4               	addwfc	prodh,w,c
  3072  001EBE  6EF7               	movwf	tblptrh,c
  3073  001EC0                     	if	0	;There are less than 3 active tblptr bytes
  3074  001EC0                     	endif
  3075  001EC0  0009               	tblrd		*+
  3076  001EC2  CFF5 F024          	movff	tablat,?_scale
  3077  001EC6  0009               	tblrd		*+
  3078  001EC8  CFF5 F025          	movff	tablat,?_scale+1
  3079  001ECC  000A               	tblrd		*-
  3080  001ECE  CFF5 F026          	movff	tablat,?_scale+2
  3081  001ED2  D000               	goto	l153
  3082  001ED4                     l153:
  3083  001ED4  0012               	return		;funcret
  3084  001ED6                     __end_of_scale:
  3085                           	opt stack 0
  3086                           tblptru	equ	0xFF8
  3087                           tblptrh	equ	0xFF7
  3088                           tblptrl	equ	0xFF6
  3089                           tablat	equ	0xFF5
  3090                           prodh	equ	0xFF4
  3091                           prodl	equ	0xFF3
  3092                           postinc0	equ	0xFEE
  3093                           wreg	equ	0xFE8
  3094                           postdec1	equ	0xFE5
  3095                           fsr1l	equ	0xFE1
  3096                           postinc2	equ	0xFDE
  3097                           postdec2	equ	0xFDD
  3098                           fsr2h	equ	0xFDA
  3099                           fsr2l	equ	0xFD9
  3100                           status	equ	0xFD8
  3101                           
  3102 ;; *************** function _putch *****************
  3103 ;; Defined at:
  3104 ;;		line 105 in file "Lab6pA.c"
  3105 ;; Parameters:    Size  Location     Type
  3106 ;;  c               1    wreg     unsigned char 
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;  c               1    0[COMRAM] unsigned char 
  3109 ;; Return value:  Size  Location     Type
  3110 ;;		None               void
  3111 ;; Registers used:
  3112 ;;		wreg
  3113 ;; Tracked objects:
  3114 ;;		On entry : 0/0
  3115 ;;		On exit  : 0/0
  3116 ;;		Unchanged: 0/0
  3117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3119 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3121 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;Total ram usage:        1 bytes
  3123 ;; Hardware stack levels used:    1
  3124 ;; This function calls:
  3125 ;;		Nothing
  3126 ;; This function is called by:
  3127 ;;		_printf
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           	psect	text3
  3132  002F0E                     __ptext3:
  3133                           	opt stack 0
  3134  002F0E                     _putch:
  3135                           	opt stack 29
  3136                           
  3137                           ;incstack = 0
  3138                           ;putch@c stored from wreg
  3139  002F0E  6E01               	movwf	putch@c,c
  3140                           
  3141                           ;Lab6pA.c: 107: while (!TRMT);
  3142  002F10  D000               	goto	l92
  3143  002F12                     l92:
  3144  002F12  A2AC               	btfss	4012,1,c	;volatile
  3145  002F14  D7FE               	goto	l92
  3146                           
  3147                           ;Lab6pA.c: 108: TXREG = c;
  3148  002F16  C001  FFAD         	movff	putch@c,4013	;volatile
  3149  002F1A  0012               	return		;funcret
  3150  002F1C                     __end_of_putch:
  3151                           	opt stack 0
  3152                           tblptru	equ	0xFF8
  3153                           tblptrh	equ	0xFF7
  3154                           tblptrl	equ	0xFF6
  3155                           tablat	equ	0xFF5
  3156                           prodh	equ	0xFF4
  3157                           prodl	equ	0xFF3
  3158                           postinc0	equ	0xFEE
  3159                           wreg	equ	0xFE8
  3160                           postdec1	equ	0xFE5
  3161                           fsr1l	equ	0xFE1
  3162                           postinc2	equ	0xFDE
  3163                           postdec2	equ	0xFDD
  3164                           fsr2h	equ	0xFDA
  3165                           fsr2l	equ	0xFD9
  3166                           status	equ	0xFD8
  3167                           
  3168 ;; *************** function _isdigit *****************
  3169 ;; Defined at:
  3170 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3171 ;; Parameters:    Size  Location     Type
  3172 ;;  c               1    wreg     unsigned char 
  3173 ;; Auto vars:     Size  Location     Type
  3174 ;;  c               1    2[COMRAM] unsigned char 
  3175 ;; Return value:  Size  Location     Type
  3176 ;;		None               void
  3177 ;; Registers used:
  3178 ;;		wreg, status,2, status,0
  3179 ;; Tracked objects:
  3180 ;;		On entry : 0/0
  3181 ;;		On exit  : 0/0
  3182 ;;		Unchanged: 0/0
  3183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3185 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3186 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3187 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3188 ;;Total ram usage:        3 bytes
  3189 ;; Hardware stack levels used:    1
  3190 ;; This function calls:
  3191 ;;		Nothing
  3192 ;; This function is called by:
  3193 ;;		_printf
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197                           	psect	text4
  3198  002E76                     __ptext4:
  3199                           	opt stack 0
  3200  002E76                     _isdigit:
  3201                           	opt stack 29
  3202                           
  3203                           ;incstack = 0
  3204                           ;isdigit@c stored from wreg
  3205  002E76  6E03               	movwf	isdigit@c,c
  3206  002E78  0E00               	movlw	0
  3207  002E7A  6E02               	movwf	_isdigit$1032,c
  3208  002E7C  0E3A               	movlw	58
  3209  002E7E  6003               	cpfslt	isdigit@c,c
  3210  002E80  D006               	goto	l2351
  3211  002E82  0E2F               	movlw	47
  3212  002E84  6403               	cpfsgt	isdigit@c,c
  3213  002E86  D003               	goto	l2351
  3214  002E88  0E01               	movlw	1
  3215  002E8A  6E02               	movwf	_isdigit$1032,c
  3216  002E8C  D000               	goto	l2351
  3217  002E8E                     l2351:
  3218  002E8E  C002  F001         	movff	_isdigit$1032,??_isdigit
  3219  002E92  3001               	rrcf	??_isdigit,w,c
  3220  002E94  D000               	goto	l764
  3221  002E96                     l764:
  3222  002E96  0012               	return		;funcret
  3223  002E98                     __end_of_isdigit:
  3224                           	opt stack 0
  3225                           tblptru	equ	0xFF8
  3226                           tblptrh	equ	0xFF7
  3227                           tblptrl	equ	0xFF6
  3228                           tablat	equ	0xFF5
  3229                           prodh	equ	0xFF4
  3230                           prodl	equ	0xFF3
  3231                           postinc0	equ	0xFEE
  3232                           wreg	equ	0xFE8
  3233                           postdec1	equ	0xFE5
  3234                           fsr1l	equ	0xFE1
  3235                           postinc2	equ	0xFDE
  3236                           postdec2	equ	0xFDD
  3237                           fsr2h	equ	0xFDA
  3238                           fsr2l	equ	0xFD9
  3239                           status	equ	0xFD8
  3240                           
  3241 ;; *************** function _fround *****************
  3242 ;; Defined at:
  3243 ;;		line 409 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3244 ;; Parameters:    Size  Location     Type
  3245 ;;  prec            1    wreg     unsigned char 
  3246 ;; Auto vars:     Size  Location     Type
  3247 ;;  prec            1   44[COMRAM] unsigned char 
  3248 ;; Return value:  Size  Location     Type
  3249 ;;                  3   35[COMRAM] unsigned char 
  3250 ;; Registers used:
  3251 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3252 ;; Tracked objects:
  3253 ;;		On entry : 0/0
  3254 ;;		On exit  : 0/0
  3255 ;;		Unchanged: 0/0
  3256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3257 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;Total ram usage:       10 bytes
  3262 ;; Hardware stack levels used:    1
  3263 ;; Hardware stack levels required when called:    2
  3264 ;; This function calls:
  3265 ;;		___awdiv
  3266 ;;		___awmod
  3267 ;;		___ftmul
  3268 ;;		___wmul
  3269 ;; This function is called by:
  3270 ;;		_printf
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           	psect	text5
  3275  001ED6                     __ptext5:
  3276                           	opt stack 0
  3277  001ED6                     _fround:
  3278                           	opt stack 27
  3279                           
  3280                           ;incstack = 0
  3281                           ;fround@prec stored from wreg
  3282  001ED6  6E2D               	movwf	fround@prec,c
  3283                           
  3284                           ;doprnt.c: 413: if(prec>=110)
  3285  001ED8  0E6D               	movlw	109
  3286  001EDA  642D               	cpfsgt	fround@prec,c
  3287  001EDC  D09B               	goto	l2293
  3288                           
  3289                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3290  001EDE  0E00               	movlw	0
  3291  001EE0  6E12               	movwf	___wmul@multiplicand+1,c
  3292  001EE2  0E03               	movlw	3
  3293  001EE4  6E11               	movwf	___wmul@multiplicand,c
  3294  001EE6  0E00               	movlw	0
  3295  001EE8  6E04               	movwf	___awdiv@divisor+1,c
  3296  001EEA  0E0A               	movlw	10
  3297  001EEC  6E03               	movwf	___awdiv@divisor,c
  3298  001EEE  0E00               	movlw	0
  3299  001EF0  6E0C               	movwf	___awmod@divisor+1,c
  3300  001EF2  0E64               	movlw	100
  3301  001EF4  6E0B               	movwf	___awmod@divisor,c
  3302  001EF6  C02D  F009         	movff	fround@prec,___awmod@dividend
  3303  001EFA  6A0A               	clrf	___awmod@dividend+1,c
  3304  001EFC  ECAD  F015         	call	___awmod	;wreg free
  3305  001F00  C009  F001         	movff	?___awmod,___awdiv@dividend
  3306  001F04  C00A  F002         	movff	?___awmod+1,___awdiv@dividend+1
  3307  001F08  ECD1  F014         	call	___awdiv	;wreg free
  3308  001F0C  0E09               	movlw	9
  3309  001F0E  2401               	addwf	?___awdiv,w,c
  3310  001F10  6E0F               	movwf	___wmul@multiplier,c
  3311  001F12  0E00               	movlw	0
  3312  001F14  2002               	addwfc	?___awdiv+1,w,c
  3313  001F16  6E10               	movwf	___wmul@multiplier+1,c
  3314  001F18  EC02  F017         	call	___wmul	;wreg free
  3315  001F1C  0E29               	movlw	low __npowers_
  3316  001F1E  240F               	addwf	?___wmul,w,c
  3317  001F20  6EF6               	movwf	tblptrl,c
  3318  001F22  0E10               	movlw	high __npowers_
  3319  001F24  2010               	addwfc	?___wmul+1,w,c
  3320  001F26  6EF7               	movwf	tblptrh,c
  3321  001F28                     	if	0	;There are less than 3 active tblptr bytes
  3322  001F28                     	endif
  3323  001F28  0009               	tblrd		*+
  3324  001F2A  CFF5 F018          	movff	tablat,___ftmul@f2
  3325  001F2E  0009               	tblrd		*+
  3326  001F30  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3327  001F34  000A               	tblrd		*-
  3328  001F36  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3329  001F3A  0E00               	movlw	0
  3330  001F3C  6E04               	movwf	___awdiv@divisor+1,c
  3331  001F3E  0E64               	movlw	100
  3332  001F40  6E03               	movwf	___awdiv@divisor,c
  3333  001F42  C02D  F001         	movff	fround@prec,___awdiv@dividend
  3334  001F46  6A02               	clrf	___awdiv@dividend+1,c
  3335  001F48  ECD1  F014         	call	___awdiv	;wreg free
  3336  001F4C  0E12               	movlw	18
  3337  001F4E  2401               	addwf	?___awdiv,w,c
  3338  001F50  6E0F               	movwf	___wmul@multiplier,c
  3339  001F52  0E00               	movlw	0
  3340  001F54  2002               	addwfc	?___awdiv+1,w,c
  3341  001F56  6E10               	movwf	___wmul@multiplier+1,c
  3342  001F58  0E00               	movlw	0
  3343  001F5A  6E12               	movwf	___wmul@multiplicand+1,c
  3344  001F5C  0E03               	movlw	3
  3345  001F5E  6E11               	movwf	___wmul@multiplicand,c
  3346  001F60  EC02  F017         	call	___wmul	;wreg free
  3347  001F64  0E29               	movlw	low __npowers_
  3348  001F66  240F               	addwf	?___wmul,w,c
  3349  001F68  6EF6               	movwf	tblptrl,c
  3350  001F6A  0E10               	movlw	high __npowers_
  3351  001F6C  2010               	addwfc	?___wmul+1,w,c
  3352  001F6E  6EF7               	movwf	tblptrh,c
  3353  001F70                     	if	0	;There are less than 3 active tblptr bytes
  3354  001F70                     	endif
  3355  001F70  0009               	tblrd		*+
  3356  001F72  CFF5 F015          	movff	tablat,___ftmul@f1
  3357  001F76  0009               	tblrd		*+
  3358  001F78  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3359  001F7C  000A               	tblrd		*-
  3360  001F7E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3361  001F82  EC0E  F013         	call	___ftmul	;wreg free
  3362  001F86  C015  F02A         	movff	?___ftmul,_fround$1261
  3363  001F8A  C016  F02B         	movff	?___ftmul+1,_fround$1261+1
  3364  001F8E  C017  F02C         	movff	?___ftmul+2,_fround$1261+2
  3365                           
  3366                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3367  001F92  0E00               	movlw	0
  3368  001F94  6E12               	movwf	___wmul@multiplicand+1,c
  3369  001F96  0E03               	movlw	3
  3370  001F98  6E11               	movwf	___wmul@multiplicand,c
  3371  001F9A  0E00               	movlw	0
  3372  001F9C  6E0C               	movwf	___awmod@divisor+1,c
  3373  001F9E  0E0A               	movlw	10
  3374  001FA0  6E0B               	movwf	___awmod@divisor,c
  3375  001FA2  C02D  F009         	movff	fround@prec,___awmod@dividend
  3376  001FA6  6A0A               	clrf	___awmod@dividend+1,c
  3377  001FA8  ECAD  F015         	call	___awmod	;wreg free
  3378  001FAC  C009  F00F         	movff	?___awmod,___wmul@multiplier
  3379  001FB0  C00A  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3380  001FB4  EC02  F017         	call	___wmul	;wreg free
  3381  001FB8  0E29               	movlw	low __npowers_
  3382  001FBA  240F               	addwf	?___wmul,w,c
  3383  001FBC  6EF6               	movwf	tblptrl,c
  3384  001FBE  0E10               	movlw	high __npowers_
  3385  001FC0  2010               	addwfc	?___wmul+1,w,c
  3386  001FC2  6EF7               	movwf	tblptrh,c
  3387  001FC4                     	if	0	;There are less than 3 active tblptr bytes
  3388  001FC4                     	endif
  3389  001FC4  0009               	tblrd		*+
  3390  001FC6  CFF5 F018          	movff	tablat,___ftmul@f2
  3391  001FCA  0009               	tblrd		*+
  3392  001FCC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3393  001FD0  000A               	tblrd		*-
  3394  001FD2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3395  001FD6  C02A  F015         	movff	_fround$1261,___ftmul@f1
  3396  001FDA  C02B  F016         	movff	_fround$1261+1,___ftmul@f1+1
  3397  001FDE  C02C  F017         	movff	_fround$1261+2,___ftmul@f1+2
  3398  001FE2  EC0E  F013         	call	___ftmul	;wreg free
  3399  001FE6  C015  F027         	movff	?___ftmul,_fround$1262
  3400  001FEA  C016  F028         	movff	?___ftmul+1,_fround$1262+1
  3401  001FEE  C017  F029         	movff	?___ftmul+2,_fround$1262+2
  3402                           
  3403                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3404  001FF2  C027  F015         	movff	_fround$1262,___ftmul@f1
  3405  001FF6  C028  F016         	movff	_fround$1262+1,___ftmul@f1+1
  3406  001FFA  C029  F017         	movff	_fround$1262+2,___ftmul@f1+2
  3407  001FFE  0E00               	movlw	0
  3408  002000  6E18               	movwf	___ftmul@f2,c
  3409  002002  0E00               	movlw	0
  3410  002004  6E19               	movwf	___ftmul@f2+1,c
  3411  002006  0E3F               	movlw	63
  3412  002008  6E1A               	movwf	___ftmul@f2+2,c
  3413  00200A  EC0E  F013         	call	___ftmul	;wreg free
  3414  00200E  D07D               	goto	L7
  3415  002010  D083               	goto	l146
  3416  002012  D062               	goto	l2301
  3417  002014                     l2293:
  3418                           
  3419                           ;doprnt.c: 415: else if(prec > 10)
  3420  002014  0E0A               	movlw	10
  3421  002016  642D               	cpfsgt	fround@prec,c
  3422  002018  D05F               	goto	l2301
  3423                           
  3424                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3425  00201A  0E00               	movlw	0
  3426  00201C  6E12               	movwf	___wmul@multiplicand+1,c
  3427  00201E  0E03               	movlw	3
  3428  002020  6E11               	movwf	___wmul@multiplicand,c
  3429  002022  0E00               	movlw	0
  3430  002024  6E0C               	movwf	___awmod@divisor+1,c
  3431  002026  0E0A               	movlw	10
  3432  002028  6E0B               	movwf	___awmod@divisor,c
  3433  00202A  C02D  F009         	movff	fround@prec,___awmod@dividend
  3434  00202E  6A0A               	clrf	___awmod@dividend+1,c
  3435  002030  ECAD  F015         	call	___awmod	;wreg free
  3436  002034  C009  F00F         	movff	?___awmod,___wmul@multiplier
  3437  002038  C00A  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3438  00203C  EC02  F017         	call	___wmul	;wreg free
  3439  002040  0E29               	movlw	low __npowers_
  3440  002042  240F               	addwf	?___wmul,w,c
  3441  002044  6EF6               	movwf	tblptrl,c
  3442  002046  0E10               	movlw	high __npowers_
  3443  002048  2010               	addwfc	?___wmul+1,w,c
  3444  00204A  6EF7               	movwf	tblptrh,c
  3445  00204C                     	if	0	;There are less than 3 active tblptr bytes
  3446  00204C                     	endif
  3447  00204C  0009               	tblrd		*+
  3448  00204E  CFF5 F018          	movff	tablat,___ftmul@f2
  3449  002052  0009               	tblrd		*+
  3450  002054  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3451  002058  000A               	tblrd		*-
  3452  00205A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3453  00205E  0E00               	movlw	0
  3454  002060  6E04               	movwf	___awdiv@divisor+1,c
  3455  002062  0E0A               	movlw	10
  3456  002064  6E03               	movwf	___awdiv@divisor,c
  3457  002066  C02D  F001         	movff	fround@prec,___awdiv@dividend
  3458  00206A  6A02               	clrf	___awdiv@dividend+1,c
  3459  00206C  ECD1  F014         	call	___awdiv	;wreg free
  3460  002070  0E09               	movlw	9
  3461  002072  2401               	addwf	?___awdiv,w,c
  3462  002074  6E0F               	movwf	___wmul@multiplier,c
  3463  002076  0E00               	movlw	0
  3464  002078  2002               	addwfc	?___awdiv+1,w,c
  3465  00207A  6E10               	movwf	___wmul@multiplier+1,c
  3466  00207C  0E00               	movlw	0
  3467  00207E  6E12               	movwf	___wmul@multiplicand+1,c
  3468  002080  0E03               	movlw	3
  3469  002082  6E11               	movwf	___wmul@multiplicand,c
  3470  002084  EC02  F017         	call	___wmul	;wreg free
  3471  002088  0E29               	movlw	low __npowers_
  3472  00208A  240F               	addwf	?___wmul,w,c
  3473  00208C  6EF6               	movwf	tblptrl,c
  3474  00208E  0E10               	movlw	high __npowers_
  3475  002090  2010               	addwfc	?___wmul+1,w,c
  3476  002092  6EF7               	movwf	tblptrh,c
  3477  002094                     	if	0	;There are less than 3 active tblptr bytes
  3478  002094                     	endif
  3479  002094  0009               	tblrd		*+
  3480  002096  CFF5 F015          	movff	tablat,___ftmul@f1
  3481  00209A  0009               	tblrd		*+
  3482  00209C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3483  0020A0  000A               	tblrd		*-
  3484  0020A2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3485  0020A6  EC0E  F013         	call	___ftmul	;wreg free
  3486  0020AA  C015  F02A         	movff	?___ftmul,_fround$1261
  3487  0020AE  C016  F02B         	movff	?___ftmul+1,_fround$1261+1
  3488  0020B2  C017  F02C         	movff	?___ftmul+2,_fround$1261+2
  3489                           
  3490                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3491  0020B6  C02A  F015         	movff	_fround$1261,___ftmul@f1
  3492  0020BA  C02B  F016         	movff	_fround$1261+1,___ftmul@f1+1
  3493  0020BE  C02C  F017         	movff	_fround$1261+2,___ftmul@f1+2
  3494  0020C2  0E00               	movlw	0
  3495  0020C4  6E18               	movwf	___ftmul@f2,c
  3496  0020C6  0E00               	movlw	0
  3497  0020C8  6E19               	movwf	___ftmul@f2+1,c
  3498  0020CA  0E3F               	movlw	63
  3499  0020CC  6E1A               	movwf	___ftmul@f2+2,c
  3500  0020CE  EC0E  F013         	call	___ftmul	;wreg free
  3501  0020D2  D01B               	goto	L7
  3502  0020D4  D021               	goto	l146
  3503  0020D6  D000               	goto	l2301
  3504  0020D8                     l2301:
  3505                           
  3506                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3507  0020D8  502D               	movf	fround@prec,w,c
  3508  0020DA  0D03               	mullw	3
  3509  0020DC  0E29               	movlw	low __npowers_
  3510  0020DE  24F3               	addwf	prodl,w,c
  3511  0020E0  6EF6               	movwf	tblptrl,c
  3512  0020E2  0E10               	movlw	high __npowers_
  3513  0020E4  20F4               	addwfc	prodh,w,c
  3514  0020E6  6EF7               	movwf	tblptrh,c
  3515  0020E8                     	if	0	;There are less than 3 active tblptr bytes
  3516  0020E8                     	endif
  3517  0020E8  0009               	tblrd		*+
  3518  0020EA  CFF5 F015          	movff	tablat,___ftmul@f1
  3519  0020EE  0009               	tblrd		*+
  3520  0020F0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3521  0020F4  000A               	tblrd		*-
  3522  0020F6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3523  0020FA  0E00               	movlw	0
  3524  0020FC  6E18               	movwf	___ftmul@f2,c
  3525  0020FE  0E00               	movlw	0
  3526  002100  6E19               	movwf	___ftmul@f2+1,c
  3527  002102  0E3F               	movlw	63
  3528  002104  6E1A               	movwf	___ftmul@f2+2,c
  3529  002106  EC0E  F013         	call	___ftmul	;wreg free
  3530  00210A                     L7:
  3531  00210A  C015  F024         	movff	?___ftmul,?_fround
  3532  00210E  C016  F025         	movff	?___ftmul+1,?_fround+1
  3533  002112  C017  F026         	movff	?___ftmul+2,?_fround+2
  3534  002116  D000               	goto	l146
  3535  002118                     l146:
  3536  002118  0012               	return		;funcret
  3537  00211A                     __end_of_fround:
  3538                           	opt stack 0
  3539                           tblptru	equ	0xFF8
  3540                           tblptrh	equ	0xFF7
  3541                           tblptrl	equ	0xFF6
  3542                           tablat	equ	0xFF5
  3543                           prodh	equ	0xFF4
  3544                           prodl	equ	0xFF3
  3545                           postinc0	equ	0xFEE
  3546                           wreg	equ	0xFE8
  3547                           postdec1	equ	0xFE5
  3548                           fsr1l	equ	0xFE1
  3549                           postinc2	equ	0xFDE
  3550                           postdec2	equ	0xFDD
  3551                           fsr2h	equ	0xFDA
  3552                           fsr2l	equ	0xFD9
  3553                           status	equ	0xFD8
  3554                           
  3555 ;; *************** function ___wmul *****************
  3556 ;; Defined at:
  3557 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;  multiplier      2   14[COMRAM] unsigned int 
  3560 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;  product         2   18[COMRAM] unsigned int 
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  2   14[COMRAM] unsigned int 
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0, prodl, prodh
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3572 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;Total ram usage:        6 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; This function calls:
  3579 ;;		Nothing
  3580 ;; This function is called by:
  3581 ;;		_fround
  3582 ;;		_scale
  3583 ;;		_printf
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text6
  3588  002E04                     __ptext6:
  3589                           	opt stack 0
  3590  002E04                     ___wmul:
  3591                           	opt stack 28
  3592                           
  3593                           ;incstack = 0
  3594  002E04  500F               	movf	___wmul@multiplier,w,c
  3595  002E06  0211               	mulwf	___wmul@multiplicand,c
  3596  002E08  CFF3 F013          	movff	prodl,___wmul@product
  3597  002E0C  CFF4 F014          	movff	prodh,___wmul@product+1
  3598  002E10  500F               	movf	___wmul@multiplier,w,c
  3599  002E12  0212               	mulwf	___wmul@multiplicand+1,c
  3600  002E14  50F3               	movf	prodl,w,c
  3601  002E16  2614               	addwf	___wmul@product+1,f,c
  3602  002E18  5010               	movf	___wmul@multiplier+1,w,c
  3603  002E1A  0211               	mulwf	___wmul@multiplicand,c
  3604  002E1C  50F3               	movf	prodl,w,c
  3605  002E1E  2614               	addwf	___wmul@product+1,f,c
  3606  002E20  C013  F00F         	movff	___wmul@product,?___wmul
  3607  002E24  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3608  002E28  D000               	goto	l299
  3609  002E2A                     l299:
  3610  002E2A  0012               	return		;funcret
  3611  002E2C                     __end_of___wmul:
  3612                           	opt stack 0
  3613                           tblptru	equ	0xFF8
  3614                           tblptrh	equ	0xFF7
  3615                           tblptrl	equ	0xFF6
  3616                           tablat	equ	0xFF5
  3617                           prodh	equ	0xFF4
  3618                           prodl	equ	0xFF3
  3619                           postinc0	equ	0xFEE
  3620                           wreg	equ	0xFE8
  3621                           postdec1	equ	0xFE5
  3622                           fsr1l	equ	0xFE1
  3623                           postinc2	equ	0xFDE
  3624                           postdec2	equ	0xFDD
  3625                           fsr2h	equ	0xFDA
  3626                           fsr2l	equ	0xFD9
  3627                           status	equ	0xFD8
  3628                           
  3629 ;; *************** function ___ftmul *****************
  3630 ;; Defined at:
  3631 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftmul.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;  f1              3   20[COMRAM] float 
  3634 ;;  f2              3   23[COMRAM] float 
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3637 ;;  sign            1   34[COMRAM] unsigned char 
  3638 ;;  cntr            1   33[COMRAM] unsigned char 
  3639 ;;  exp             1   29[COMRAM] unsigned char 
  3640 ;; Return value:  Size  Location     Type
  3641 ;;                  3   20[COMRAM] float 
  3642 ;; Registers used:
  3643 ;;		wreg, status,2, status,0, cstack
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3649 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3651 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;Total ram usage:       15 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; Hardware stack levels required when called:    1
  3656 ;; This function calls:
  3657 ;;		___ftpack
  3658 ;; This function is called by:
  3659 ;;		_fround
  3660 ;;		_scale
  3661 ;;		_printf
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           	psect	text7
  3666  00261C                     __ptext7:
  3667                           	opt stack 0
  3668  00261C                     ___ftmul:
  3669                           	opt stack 27
  3670                           
  3671                           ;incstack = 0
  3672  00261C  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3673  002620  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3674  002622  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3675  002624  3416               	rlcf	___ftmul@f1+1,w,c
  3676  002626  361B               	rlcf	??___ftmul& (0+255),f,c
  3677  002628  E301               	bnc	u2001
  3678  00262A  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3679  00262C                     u2001:
  3680  00262C  501B               	movf	??___ftmul,w,c
  3681  00262E  6E1E               	movwf	___ftmul@exp,c
  3682  002630  501E               	movf	___ftmul@exp,w,c
  3683  002632  A4D8               	btfss	status,2,c
  3684  002634  D002               	goto	l2107
  3685  002636  D00E               	goto	l2109
  3686  002638  D06C               	goto	l728
  3687  00263A                     l2107:
  3688  00263A  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3689  00263E  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3690  002640  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3691  002642  3419               	rlcf	___ftmul@f2+1,w,c
  3692  002644  361B               	rlcf	??___ftmul& (0+255),f,c
  3693  002646  E301               	bnc	u2021
  3694  002648  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3695  00264A                     u2021:
  3696  00264A  501B               	movf	??___ftmul,w,c
  3697  00264C  6E23               	movwf	___ftmul@sign,c
  3698  00264E  5023               	movf	___ftmul@sign,w,c
  3699  002650  A4D8               	btfss	status,2,c
  3700  002652  D007               	goto	l2113
  3701  002654                     l2109:
  3702  002654  0E00               	movlw	0
  3703  002656  6E15               	movwf	?___ftmul,c
  3704  002658  0E00               	movlw	0
  3705  00265A  6E16               	movwf	?___ftmul+1,c
  3706  00265C  0E00               	movlw	0
  3707  00265E  6E17               	movwf	?___ftmul+2,c
  3708  002660  D058               	goto	l728
  3709  002662                     l2113:
  3710  002662  5023               	movf	___ftmul@sign,w,c
  3711  002664  0F7B               	addlw	123
  3712  002666  261E               	addwf	___ftmul@exp,f,c
  3713  002668  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3714  00266C  501A               	movf	___ftmul@f2+2,w,c
  3715  00266E  1A23               	xorwf	___ftmul@sign,f,c
  3716  002670  0E80               	movlw	128
  3717  002672  1623               	andwf	___ftmul@sign,f,c
  3718  002674  8E16               	bsf	___ftmul@f1+1,7,c
  3719  002676  8E19               	bsf	___ftmul@f2+1,7,c
  3720  002678  0EFF               	movlw	255
  3721  00267A  1618               	andwf	___ftmul@f2,f,c
  3722  00267C  0EFF               	movlw	255
  3723  00267E  1619               	andwf	___ftmul@f2+1,f,c
  3724  002680  0E00               	movlw	0
  3725  002682  161A               	andwf	___ftmul@f2+2,f,c
  3726  002684  0E00               	movlw	0
  3727  002686  6E1F               	movwf	___ftmul@f3_as_product,c
  3728  002688  0E00               	movlw	0
  3729  00268A  6E20               	movwf	___ftmul@f3_as_product+1,c
  3730  00268C  0E00               	movlw	0
  3731  00268E  6E21               	movwf	___ftmul@f3_as_product+2,c
  3732  002690  0E07               	movlw	7
  3733  002692  6E22               	movwf	___ftmul@cntr,c
  3734  002694  D000               	goto	l2127
  3735  002696                     l2127:
  3736  002696  A015               	btfss	___ftmul@f1,0,c
  3737  002698  D007               	goto	l2131
  3738  00269A  5018               	movf	___ftmul@f2,w,c
  3739  00269C  261F               	addwf	___ftmul@f3_as_product,f,c
  3740  00269E  5019               	movf	___ftmul@f2+1,w,c
  3741  0026A0  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3742  0026A2  501A               	movf	___ftmul@f2+2,w,c
  3743  0026A4  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3744  0026A6  D000               	goto	l2131
  3745  0026A8                     l2131:
  3746  0026A8  90D8               	bcf	status,0,c
  3747  0026AA  3217               	rrcf	___ftmul@f1+2,f,c
  3748  0026AC  3216               	rrcf	___ftmul@f1+1,f,c
  3749  0026AE  3215               	rrcf	___ftmul@f1,f,c
  3750  0026B0  90D8               	bcf	status,0,c
  3751  0026B2  3618               	rlcf	___ftmul@f2,f,c
  3752  0026B4  3619               	rlcf	___ftmul@f2+1,f,c
  3753  0026B6  361A               	rlcf	___ftmul@f2+2,f,c
  3754  0026B8  2E22               	decfsz	___ftmul@cntr,f,c
  3755  0026BA  D7ED               	goto	l2127
  3756  0026BC  D000               	goto	l2135
  3757  0026BE                     l2135:
  3758  0026BE  0E09               	movlw	9
  3759  0026C0  6E22               	movwf	___ftmul@cntr,c
  3760  0026C2  D000               	goto	l2137
  3761  0026C4                     l2137:
  3762  0026C4  A015               	btfss	___ftmul@f1,0,c
  3763  0026C6  D007               	goto	l2141
  3764  0026C8  5018               	movf	___ftmul@f2,w,c
  3765  0026CA  261F               	addwf	___ftmul@f3_as_product,f,c
  3766  0026CC  5019               	movf	___ftmul@f2+1,w,c
  3767  0026CE  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3768  0026D0  501A               	movf	___ftmul@f2+2,w,c
  3769  0026D2  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3770  0026D4  D000               	goto	l2141
  3771  0026D6                     l2141:
  3772  0026D6  90D8               	bcf	status,0,c
  3773  0026D8  3217               	rrcf	___ftmul@f1+2,f,c
  3774  0026DA  3216               	rrcf	___ftmul@f1+1,f,c
  3775  0026DC  3215               	rrcf	___ftmul@f1,f,c
  3776  0026DE  90D8               	bcf	status,0,c
  3777  0026E0  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3778  0026E2  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3779  0026E4  321F               	rrcf	___ftmul@f3_as_product,f,c
  3780  0026E6  2E22               	decfsz	___ftmul@cntr,f,c
  3781  0026E8  D7ED               	goto	l2137
  3782  0026EA  D000               	goto	l2145
  3783  0026EC                     l2145:
  3784  0026EC  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3785  0026F0  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3786  0026F4  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3787  0026F8  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3788  0026FC  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3789  002700  EC6E  F014         	call	___ftpack	;wreg free
  3790  002704  C001  F015         	movff	?___ftpack,?___ftmul
  3791  002708  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3792  00270C  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3793  002710  D000               	goto	l728
  3794  002712                     l728:
  3795  002712  0012               	return		;funcret
  3796  002714                     __end_of___ftmul:
  3797                           	opt stack 0
  3798                           tblptru	equ	0xFF8
  3799                           tblptrh	equ	0xFF7
  3800                           tblptrl	equ	0xFF6
  3801                           tablat	equ	0xFF5
  3802                           prodh	equ	0xFF4
  3803                           prodl	equ	0xFF3
  3804                           postinc0	equ	0xFEE
  3805                           wreg	equ	0xFE8
  3806                           postdec1	equ	0xFE5
  3807                           fsr1l	equ	0xFE1
  3808                           postinc2	equ	0xFDE
  3809                           postdec2	equ	0xFDD
  3810                           fsr2h	equ	0xFDA
  3811                           fsr2l	equ	0xFD9
  3812                           status	equ	0xFD8
  3813                           
  3814 ;; *************** function ___awmod *****************
  3815 ;; Defined at:
  3816 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awmod.c"
  3817 ;; Parameters:    Size  Location     Type
  3818 ;;  dividend        2    8[COMRAM] int 
  3819 ;;  divisor         2   10[COMRAM] int 
  3820 ;; Auto vars:     Size  Location     Type
  3821 ;;  sign            1   13[COMRAM] unsigned char 
  3822 ;;  counter         1   12[COMRAM] unsigned char 
  3823 ;; Return value:  Size  Location     Type
  3824 ;;                  2    8[COMRAM] int 
  3825 ;; Registers used:
  3826 ;;		wreg, status,2, status,0
  3827 ;; Tracked objects:
  3828 ;;		On entry : 0/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3832 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3833 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3835 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;Total ram usage:        6 bytes
  3837 ;; Hardware stack levels used:    1
  3838 ;; This function calls:
  3839 ;;		Nothing
  3840 ;; This function is called by:
  3841 ;;		_main
  3842 ;;		_fround
  3843 ;;		_scale
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846                           
  3847                           	psect	text8
  3848  002B5A                     __ptext8:
  3849                           	opt stack 0
  3850  002B5A                     ___awmod:
  3851                           	opt stack 28
  3852                           
  3853                           ;incstack = 0
  3854  002B5A  0E00               	movlw	0
  3855  002B5C  6E0E               	movwf	___awmod@sign,c
  3856  002B5E  AE0A               	btfss	___awmod@dividend+1,7,c
  3857  002B60  D007               	goto	l2201
  3858  002B62  6C09               	negf	___awmod@dividend,c
  3859  002B64  1E0A               	comf	___awmod@dividend+1,f,c
  3860  002B66  B0D8               	btfsc	status,0,c
  3861  002B68  2A0A               	incf	___awmod@dividend+1,f,c
  3862  002B6A  0E01               	movlw	1
  3863  002B6C  6E0E               	movwf	___awmod@sign,c
  3864  002B6E  D000               	goto	l2201
  3865  002B70                     l2201:
  3866  002B70  AE0C               	btfss	___awmod@divisor+1,7,c
  3867  002B72  D005               	goto	l2205
  3868  002B74  6C0B               	negf	___awmod@divisor,c
  3869  002B76  1E0C               	comf	___awmod@divisor+1,f,c
  3870  002B78  B0D8               	btfsc	status,0,c
  3871  002B7A  2A0C               	incf	___awmod@divisor+1,f,c
  3872  002B7C  D000               	goto	l2205
  3873  002B7E                     l2205:
  3874  002B7E  500B               	movf	___awmod@divisor,w,c
  3875  002B80  100C               	iorwf	___awmod@divisor+1,w,c
  3876  002B82  B4D8               	btfsc	status,2,c
  3877  002B84  D01D               	goto	l2221
  3878  002B86  0E01               	movlw	1
  3879  002B88  6E0D               	movwf	___awmod@counter,c
  3880  002B8A  D005               	goto	l2211
  3881  002B8C                     l2209:
  3882  002B8C  90D8               	bcf	status,0,c
  3883  002B8E  360B               	rlcf	___awmod@divisor,f,c
  3884  002B90  360C               	rlcf	___awmod@divisor+1,f,c
  3885  002B92  2A0D               	incf	___awmod@counter,f,c
  3886  002B94  D000               	goto	l2211
  3887  002B96                     l2211:
  3888  002B96  BE0C               	btfsc	___awmod@divisor+1,7,c
  3889  002B98  D002               	goto	l2213
  3890  002B9A  D7F8               	goto	l2209
  3891  002B9C  D000               	goto	l2213
  3892  002B9E                     l2213:
  3893  002B9E  500B               	movf	___awmod@divisor,w,c
  3894  002BA0  5C09               	subwf	___awmod@dividend,w,c
  3895  002BA2  500C               	movf	___awmod@divisor+1,w,c
  3896  002BA4  580A               	subwfb	___awmod@dividend+1,w,c
  3897  002BA6  A0D8               	btfss	status,0,c
  3898  002BA8  D005               	goto	l2217
  3899  002BAA  500B               	movf	___awmod@divisor,w,c
  3900  002BAC  5E09               	subwf	___awmod@dividend,f,c
  3901  002BAE  500C               	movf	___awmod@divisor+1,w,c
  3902  002BB0  5A0A               	subwfb	___awmod@dividend+1,f,c
  3903  002BB2  D000               	goto	l2217
  3904  002BB4                     l2217:
  3905  002BB4  90D8               	bcf	status,0,c
  3906  002BB6  320C               	rrcf	___awmod@divisor+1,f,c
  3907  002BB8  320B               	rrcf	___awmod@divisor,f,c
  3908  002BBA  2E0D               	decfsz	___awmod@counter,f,c
  3909  002BBC  D7F0               	goto	l2213
  3910  002BBE  D000               	goto	l2221
  3911  002BC0                     l2221:
  3912  002BC0  500E               	movf	___awmod@sign,w,c
  3913  002BC2  B4D8               	btfsc	status,2,c
  3914  002BC4  D005               	goto	l2225
  3915  002BC6  6C09               	negf	___awmod@dividend,c
  3916  002BC8  1E0A               	comf	___awmod@dividend+1,f,c
  3917  002BCA  B0D8               	btfsc	status,0,c
  3918  002BCC  2A0A               	incf	___awmod@dividend+1,f,c
  3919  002BCE  D000               	goto	l2225
  3920  002BD0                     l2225:
  3921  002BD0  C009  F009         	movff	___awmod@dividend,?___awmod
  3922  002BD4  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  3923  002BD8  D000               	goto	l505
  3924  002BDA                     l505:
  3925  002BDA  0012               	return		;funcret
  3926  002BDC                     __end_of___awmod:
  3927                           	opt stack 0
  3928                           tblptru	equ	0xFF8
  3929                           tblptrh	equ	0xFF7
  3930                           tblptrl	equ	0xFF6
  3931                           tablat	equ	0xFF5
  3932                           prodh	equ	0xFF4
  3933                           prodl	equ	0xFF3
  3934                           postinc0	equ	0xFEE
  3935                           wreg	equ	0xFE8
  3936                           postdec1	equ	0xFE5
  3937                           fsr1l	equ	0xFE1
  3938                           postinc2	equ	0xFDE
  3939                           postdec2	equ	0xFDD
  3940                           fsr2h	equ	0xFDA
  3941                           fsr2l	equ	0xFD9
  3942                           status	equ	0xFD8
  3943                           
  3944 ;; *************** function ___awdiv *****************
  3945 ;; Defined at:
  3946 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3947 ;; Parameters:    Size  Location     Type
  3948 ;;  dividend        2    0[COMRAM] int 
  3949 ;;  divisor         2    2[COMRAM] int 
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;  quotient        2    6[COMRAM] int 
  3952 ;;  sign            1    5[COMRAM] unsigned char 
  3953 ;;  counter         1    4[COMRAM] unsigned char 
  3954 ;; Return value:  Size  Location     Type
  3955 ;;                  2    0[COMRAM] int 
  3956 ;; Registers used:
  3957 ;;		wreg, status,2, status,0
  3958 ;; Tracked objects:
  3959 ;;		On entry : 0/0
  3960 ;;		On exit  : 0/0
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3963 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3964 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3966 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3967 ;;Total ram usage:        8 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; This function calls:
  3970 ;;		Nothing
  3971 ;; This function is called by:
  3972 ;;		_main
  3973 ;;		_fround
  3974 ;;		_scale
  3975 ;;		_printf
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           	psect	text9
  3980  0029A2                     __ptext9:
  3981                           	opt stack 0
  3982  0029A2                     ___awdiv:
  3983                           	opt stack 28
  3984                           
  3985                           ;incstack = 0
  3986  0029A2  0E00               	movlw	0
  3987  0029A4  6E06               	movwf	___awdiv@sign,c
  3988  0029A6  AE04               	btfss	___awdiv@divisor+1,7,c
  3989  0029A8  D007               	goto	l2157
  3990  0029AA  6C03               	negf	___awdiv@divisor,c
  3991  0029AC  1E04               	comf	___awdiv@divisor+1,f,c
  3992  0029AE  B0D8               	btfsc	status,0,c
  3993  0029B0  2A04               	incf	___awdiv@divisor+1,f,c
  3994  0029B2  0E01               	movlw	1
  3995  0029B4  6E06               	movwf	___awdiv@sign,c
  3996  0029B6  D000               	goto	l2157
  3997  0029B8                     l2157:
  3998  0029B8  AE02               	btfss	___awdiv@dividend+1,7,c
  3999  0029BA  D007               	goto	l2163
  4000  0029BC  6C01               	negf	___awdiv@dividend,c
  4001  0029BE  1E02               	comf	___awdiv@dividend+1,f,c
  4002  0029C0  B0D8               	btfsc	status,0,c
  4003  0029C2  2A02               	incf	___awdiv@dividend+1,f,c
  4004  0029C4  0E01               	movlw	1
  4005  0029C6  1A06               	xorwf	___awdiv@sign,f,c
  4006  0029C8  D000               	goto	l2163
  4007  0029CA                     l2163:
  4008  0029CA  0E00               	movlw	0
  4009  0029CC  6E08               	movwf	___awdiv@quotient+1,c
  4010  0029CE  0E00               	movlw	0
  4011  0029D0  6E07               	movwf	___awdiv@quotient,c
  4012  0029D2  5003               	movf	___awdiv@divisor,w,c
  4013  0029D4  1004               	iorwf	___awdiv@divisor+1,w,c
  4014  0029D6  B4D8               	btfsc	status,2,c
  4015  0029D8  D021               	goto	l2185
  4016  0029DA  0E01               	movlw	1
  4017  0029DC  6E05               	movwf	___awdiv@counter,c
  4018  0029DE  D005               	goto	l2171
  4019  0029E0                     l2169:
  4020  0029E0  90D8               	bcf	status,0,c
  4021  0029E2  3603               	rlcf	___awdiv@divisor,f,c
  4022  0029E4  3604               	rlcf	___awdiv@divisor+1,f,c
  4023  0029E6  2A05               	incf	___awdiv@counter,f,c
  4024  0029E8  D000               	goto	l2171
  4025  0029EA                     l2171:
  4026  0029EA  BE04               	btfsc	___awdiv@divisor+1,7,c
  4027  0029EC  D002               	goto	l2173
  4028  0029EE  D7F8               	goto	l2169
  4029  0029F0  D000               	goto	l2173
  4030  0029F2                     l2173:
  4031  0029F2  90D8               	bcf	status,0,c
  4032  0029F4  3607               	rlcf	___awdiv@quotient,f,c
  4033  0029F6  3608               	rlcf	___awdiv@quotient+1,f,c
  4034  0029F8  5003               	movf	___awdiv@divisor,w,c
  4035  0029FA  5C01               	subwf	___awdiv@dividend,w,c
  4036  0029FC  5004               	movf	___awdiv@divisor+1,w,c
  4037  0029FE  5802               	subwfb	___awdiv@dividend+1,w,c
  4038  002A00  A0D8               	btfss	status,0,c
  4039  002A02  D006               	goto	l2181
  4040  002A04  5003               	movf	___awdiv@divisor,w,c
  4041  002A06  5E01               	subwf	___awdiv@dividend,f,c
  4042  002A08  5004               	movf	___awdiv@divisor+1,w,c
  4043  002A0A  5A02               	subwfb	___awdiv@dividend+1,f,c
  4044  002A0C  8007               	bsf	___awdiv@quotient,0,c
  4045  002A0E  D000               	goto	l2181
  4046  002A10                     l2181:
  4047  002A10  90D8               	bcf	status,0,c
  4048  002A12  3204               	rrcf	___awdiv@divisor+1,f,c
  4049  002A14  3203               	rrcf	___awdiv@divisor,f,c
  4050  002A16  2E05               	decfsz	___awdiv@counter,f,c
  4051  002A18  D7EC               	goto	l2173
  4052  002A1A  D000               	goto	l2185
  4053  002A1C                     l2185:
  4054  002A1C  5006               	movf	___awdiv@sign,w,c
  4055  002A1E  B4D8               	btfsc	status,2,c
  4056  002A20  D005               	goto	l2189
  4057  002A22  6C07               	negf	___awdiv@quotient,c
  4058  002A24  1E08               	comf	___awdiv@quotient+1,f,c
  4059  002A26  B0D8               	btfsc	status,0,c
  4060  002A28  2A08               	incf	___awdiv@quotient+1,f,c
  4061  002A2A  D000               	goto	l2189
  4062  002A2C                     l2189:
  4063  002A2C  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4064  002A30  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4065  002A34  D000               	goto	l492
  4066  002A36                     l492:
  4067  002A36  0012               	return		;funcret
  4068  002A38                     __end_of___awdiv:
  4069                           	opt stack 0
  4070                           tblptru	equ	0xFF8
  4071                           tblptrh	equ	0xFF7
  4072                           tblptrl	equ	0xFF6
  4073                           tablat	equ	0xFF5
  4074                           prodh	equ	0xFF4
  4075                           prodl	equ	0xFF3
  4076                           postinc0	equ	0xFEE
  4077                           wreg	equ	0xFE8
  4078                           postdec1	equ	0xFE5
  4079                           fsr1l	equ	0xFE1
  4080                           postinc2	equ	0xFDE
  4081                           postdec2	equ	0xFDD
  4082                           fsr2h	equ	0xFDA
  4083                           fsr2l	equ	0xFD9
  4084                           status	equ	0xFD8
  4085                           
  4086 ;; *************** function __tdiv_to_l_ *****************
  4087 ;; Defined at:
  4088 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;  f1              3    0[COMRAM] float 
  4091 ;;  f2              3    3[COMRAM] float 
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;  quot            4    9[COMRAM] unsigned long 
  4094 ;;  exp1            1   14[COMRAM] unsigned char 
  4095 ;;  cntr            1   13[COMRAM] unsigned char 
  4096 ;; Return value:  Size  Location     Type
  4097 ;;                  4    0[COMRAM] unsigned long 
  4098 ;; Registers used:
  4099 ;;		wreg, status,2, status,0
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4105 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4106 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4108 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4109 ;;Total ram usage:       15 bytes
  4110 ;; Hardware stack levels used:    1
  4111 ;; This function calls:
  4112 ;;		Nothing
  4113 ;; This function is called by:
  4114 ;;		_printf
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           	psect	text10
  4119  002402                     __ptext10:
  4120                           	opt stack 0
  4121  002402                     __tdiv_to_l_:
  4122                           	opt stack 29
  4123                           
  4124                           ;incstack = 0
  4125  002402  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4126  002406  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4127  002408  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4128  00240A  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4129  00240C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4130  00240E  E301               	bnc	u2381
  4131  002410  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4132  002412                     u2381:
  4133  002412  5007               	movf	??__tdiv_to_l_,w,c
  4134  002414  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4135  002416  500F               	movf	__tdiv_to_l_@exp1,w,c
  4136  002418  A4D8               	btfss	status,2,c
  4137  00241A  D002               	goto	l2361
  4138  00241C  D05D               	goto	l2403
  4139  00241E  D078               	goto	l704
  4140  002420                     l2361:
  4141  002420  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4142  002424  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4143  002426  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4144  002428  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4145  00242A  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4146  00242C  E301               	bnc	u2401
  4147  00242E  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4148  002430                     u2401:
  4149  002430  5007               	movf	??__tdiv_to_l_,w,c
  4150  002432  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4151  002434  500E               	movf	__tdiv_to_l_@cntr,w,c
  4152  002436  A4D8               	btfss	status,2,c
  4153  002438  D002               	goto	l2367
  4154  00243A  D04E               	goto	l2403
  4155  00243C  D069               	goto	l704
  4156  00243E                     l2367:
  4157  00243E  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4158  002440  0EFF               	movlw	255
  4159  002442  1601               	andwf	__tdiv_to_l_@f1,f,c
  4160  002444  0EFF               	movlw	255
  4161  002446  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4162  002448  0E00               	movlw	0
  4163  00244A  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4164  00244C  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4165  00244E  0EFF               	movlw	255
  4166  002450  1604               	andwf	__tdiv_to_l_@f2,f,c
  4167  002452  0EFF               	movlw	255
  4168  002454  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4169  002456  0E00               	movlw	0
  4170  002458  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4171  00245A  0E00               	movlw	0
  4172  00245C  6E0A               	movwf	__tdiv_to_l_@quot,c
  4173  00245E  0E00               	movlw	0
  4174  002460  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4175  002462  0E00               	movlw	0
  4176  002464  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4177  002466  0E00               	movlw	0
  4178  002468  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4179  00246A  0E7F               	movlw	127
  4180  00246C  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4181  00246E  500E               	movf	__tdiv_to_l_@cntr,w,c
  4182  002470  0F98               	addlw	152
  4183  002472  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4184  002474  0E18               	movlw	24
  4185  002476  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4186  002478                     l706:
  4187  002478  90D8               	bcf	status,0,c
  4188  00247A  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4189  00247C  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4190  00247E  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4191  002480  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4192  002482  5004               	movf	__tdiv_to_l_@f2,w,c
  4193  002484  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4194  002486  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4195  002488  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4196  00248A  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4197  00248C  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4198  00248E  A0D8               	btfss	status,0,c
  4199  002490  D007               	goto	l707
  4200  002492  5004               	movf	__tdiv_to_l_@f2,w,c
  4201  002494  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4202  002496  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4203  002498  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4204  00249A  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4205  00249C  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4206  00249E  800A               	bsf	__tdiv_to_l_@quot,0,c
  4207  0024A0                     l707:
  4208  0024A0  90D8               	bcf	status,0,c
  4209  0024A2  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4210  0024A4  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4211  0024A6  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4212  0024A8  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4213  0024AA  D7E6               	goto	l706
  4214  0024AC  D000               	goto	l2389
  4215  0024AE                     l2389:
  4216  0024AE  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4217  0024B0  D010               	goto	l2401
  4218  0024B2  500F               	movf	__tdiv_to_l_@exp1,w,c
  4219  0024B4  0A80               	xorlw	128
  4220  0024B6  0F97               	addlw	151
  4221  0024B8  B0D8               	btfsc	status,0,c
  4222  0024BA  D003               	goto	l2397
  4223  0024BC  D00D               	goto	l2403
  4224  0024BE  D028               	goto	l704
  4225  0024C0  D000               	goto	l2397
  4226  0024C2                     l2397:
  4227  0024C2  90D8               	bcf	status,0,c
  4228  0024C4  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4229  0024C6  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4230  0024C8  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4231  0024CA  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4232  0024CC  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4233  0024CE  D7F9               	goto	l2397
  4234  0024D0  D017               	goto	l713
  4235  0024D2                     l2401:
  4236  0024D2  0E17               	movlw	23
  4237  0024D4  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4238  0024D6  D011               	goto	l2409
  4239  0024D8                     l2403:
  4240  0024D8  0E00               	movlw	0
  4241  0024DA  6E01               	movwf	?__tdiv_to_l_,c
  4242  0024DC  0E00               	movlw	0
  4243  0024DE  6E02               	movwf	?__tdiv_to_l_+1,c
  4244  0024E0  0E00               	movlw	0
  4245  0024E2  6E03               	movwf	?__tdiv_to_l_+2,c
  4246  0024E4  0E00               	movlw	0
  4247  0024E6  6E04               	movwf	?__tdiv_to_l_+3,c
  4248  0024E8  D013               	goto	l704
  4249  0024EA  D007               	goto	l2409
  4250  0024EC                     l2407:
  4251  0024EC  90D8               	bcf	status,0,c
  4252  0024EE  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4253  0024F0  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4254  0024F2  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4255  0024F4  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4256  0024F6  060F               	decf	__tdiv_to_l_@exp1,f,c
  4257  0024F8  D000               	goto	l2409
  4258  0024FA                     l2409:
  4259  0024FA  500F               	movf	__tdiv_to_l_@exp1,w,c
  4260  0024FC  A4D8               	btfss	status,2,c
  4261  0024FE  D7F6               	goto	l2407
  4262  002500                     l713:
  4263  002500  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4264  002504  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4265  002508  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4266  00250C  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4267  002510                     l704:
  4268  002510  0012               	return		;funcret
  4269  002512                     __end_of__tdiv_to_l_:
  4270                           	opt stack 0
  4271                           tblptru	equ	0xFF8
  4272                           tblptrh	equ	0xFF7
  4273                           tblptrl	equ	0xFF6
  4274                           tablat	equ	0xFF5
  4275                           prodh	equ	0xFF4
  4276                           prodl	equ	0xFF3
  4277                           postinc0	equ	0xFEE
  4278                           wreg	equ	0xFE8
  4279                           postdec1	equ	0xFE5
  4280                           fsr1l	equ	0xFE1
  4281                           postinc2	equ	0xFDE
  4282                           postdec2	equ	0xFDD
  4283                           fsr2h	equ	0xFDA
  4284                           fsr2l	equ	0xFD9
  4285                           status	equ	0xFD8
  4286                           
  4287 ;; *************** function __div_to_l_ *****************
  4288 ;; Defined at:
  4289 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fldivl.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;  f1              3    0[COMRAM] unsigned long 
  4292 ;;  f2              3    3[COMRAM] unsigned long 
  4293 ;; Auto vars:     Size  Location     Type
  4294 ;;  quot            4    6[COMRAM] unsigned long 
  4295 ;;  exp1            1   11[COMRAM] unsigned char 
  4296 ;;  cntr            1   10[COMRAM] unsigned char 
  4297 ;; Return value:  Size  Location     Type
  4298 ;;                  4    0[COMRAM] unsigned long 
  4299 ;; Registers used:
  4300 ;;		wreg, status,2, status,0
  4301 ;; Tracked objects:
  4302 ;;		On entry : 0/0
  4303 ;;		On exit  : 0/0
  4304 ;;		Unchanged: 0/0
  4305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4306 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4307 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4309 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4310 ;;Total ram usage:       12 bytes
  4311 ;; Hardware stack levels used:    1
  4312 ;; This function calls:
  4313 ;;		Nothing
  4314 ;; This function is called by:
  4315 ;;		_printf
  4316 ;; This function uses a non-reentrant model
  4317 ;;
  4318                           
  4319                           	psect	text11
  4320  002512                     __ptext11:
  4321                           	opt stack 0
  4322  002512                     __div_to_l_:
  4323                           	opt stack 29
  4324                           
  4325                           ;incstack = 0
  4326  002512  3403               	rlcf	__div_to_l_@f1+2,w,c
  4327  002514  3404               	rlcf	__div_to_l_@f1+3,w,c
  4328  002516  6E0C               	movwf	__div_to_l_@exp1,c
  4329  002518  500C               	movf	__div_to_l_@exp1,w,c
  4330  00251A  A4D8               	btfss	status,2,c
  4331  00251C  D002               	goto	l2417
  4332  00251E  D061               	goto	l2463
  4333  002520  D07C               	goto	l583
  4334  002522                     l2417:
  4335  002522  3406               	rlcf	__div_to_l_@f2+2,w,c
  4336  002524  3407               	rlcf	__div_to_l_@f2+3,w,c
  4337  002526  6E0B               	movwf	__div_to_l_@cntr,c
  4338  002528  500B               	movf	__div_to_l_@cntr,w,c
  4339  00252A  A4D8               	btfss	status,2,c
  4340  00252C  D002               	goto	l2423
  4341  00252E  D059               	goto	l2463
  4342  002530  D074               	goto	l583
  4343  002532                     l2423:
  4344  002532  8E03               	bsf	__div_to_l_@f1+2,7,c
  4345  002534  0EFF               	movlw	255
  4346  002536  1601               	andwf	__div_to_l_@f1,f,c
  4347  002538  0EFF               	movlw	255
  4348  00253A  1602               	andwf	__div_to_l_@f1+1,f,c
  4349  00253C  0EFF               	movlw	255
  4350  00253E  1603               	andwf	__div_to_l_@f1+2,f,c
  4351  002540  0E00               	movlw	0
  4352  002542  1604               	andwf	__div_to_l_@f1+3,f,c
  4353  002544  8E06               	bsf	__div_to_l_@f2+2,7,c
  4354  002546  0EFF               	movlw	255
  4355  002548  1604               	andwf	__div_to_l_@f2,f,c
  4356  00254A  0EFF               	movlw	255
  4357  00254C  1605               	andwf	__div_to_l_@f2+1,f,c
  4358  00254E  0EFF               	movlw	255
  4359  002550  1606               	andwf	__div_to_l_@f2+2,f,c
  4360  002552  0E00               	movlw	0
  4361  002554  1607               	andwf	__div_to_l_@f2+3,f,c
  4362  002556  0E00               	movlw	0
  4363  002558  6E07               	movwf	__div_to_l_@quot,c
  4364  00255A  0E00               	movlw	0
  4365  00255C  6E08               	movwf	__div_to_l_@quot+1,c
  4366  00255E  0E00               	movlw	0
  4367  002560  6E09               	movwf	__div_to_l_@quot+2,c
  4368  002562  0E00               	movlw	0
  4369  002564  6E0A               	movwf	__div_to_l_@quot+3,c
  4370  002566  0E7F               	movlw	127
  4371  002568  5E0C               	subwf	__div_to_l_@exp1,f,c
  4372  00256A  500B               	movf	__div_to_l_@cntr,w,c
  4373  00256C  0FA0               	addlw	160
  4374  00256E  5E0C               	subwf	__div_to_l_@exp1,f,c
  4375  002570  0E20               	movlw	32
  4376  002572  6E0B               	movwf	__div_to_l_@cntr,c
  4377  002574  D000               	goto	l2437
  4378  002576                     l2437:
  4379  002576  90D8               	bcf	status,0,c
  4380  002578  3607               	rlcf	__div_to_l_@quot,f,c
  4381  00257A  3608               	rlcf	__div_to_l_@quot+1,f,c
  4382  00257C  3609               	rlcf	__div_to_l_@quot+2,f,c
  4383  00257E  360A               	rlcf	__div_to_l_@quot+3,f,c
  4384  002580  5004               	movf	__div_to_l_@f2,w,c
  4385  002582  5C01               	subwf	__div_to_l_@f1,w,c
  4386  002584  5005               	movf	__div_to_l_@f2+1,w,c
  4387  002586  5802               	subwfb	__div_to_l_@f1+1,w,c
  4388  002588  5006               	movf	__div_to_l_@f2+2,w,c
  4389  00258A  5803               	subwfb	__div_to_l_@f1+2,w,c
  4390  00258C  5007               	movf	__div_to_l_@f2+3,w,c
  4391  00258E  5804               	subwfb	__div_to_l_@f1+3,w,c
  4392  002590  A0D8               	btfss	status,0,c
  4393  002592  D00A               	goto	l2445
  4394  002594  5004               	movf	__div_to_l_@f2,w,c
  4395  002596  5E01               	subwf	__div_to_l_@f1,f,c
  4396  002598  5005               	movf	__div_to_l_@f2+1,w,c
  4397  00259A  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4398  00259C  5006               	movf	__div_to_l_@f2+2,w,c
  4399  00259E  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4400  0025A0  5007               	movf	__div_to_l_@f2+3,w,c
  4401  0025A2  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4402  0025A4  8007               	bsf	__div_to_l_@quot,0,c
  4403  0025A6  D000               	goto	l2445
  4404  0025A8                     l2445:
  4405  0025A8  90D8               	bcf	status,0,c
  4406  0025AA  3601               	rlcf	__div_to_l_@f1,f,c
  4407  0025AC  3602               	rlcf	__div_to_l_@f1+1,f,c
  4408  0025AE  3603               	rlcf	__div_to_l_@f1+2,f,c
  4409  0025B0  3604               	rlcf	__div_to_l_@f1+3,f,c
  4410  0025B2  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4411  0025B4  D7E0               	goto	l2437
  4412  0025B6  D000               	goto	l2449
  4413  0025B8                     l2449:
  4414  0025B8  AE0C               	btfss	__div_to_l_@exp1,7,c
  4415  0025BA  D010               	goto	l2461
  4416  0025BC  500C               	movf	__div_to_l_@exp1,w,c
  4417  0025BE  0A80               	xorlw	128
  4418  0025C0  0F9F               	addlw	159
  4419  0025C2  B0D8               	btfsc	status,0,c
  4420  0025C4  D003               	goto	l2457
  4421  0025C6  D00D               	goto	l2463
  4422  0025C8  D028               	goto	l583
  4423  0025CA  D000               	goto	l2457
  4424  0025CC                     l2457:
  4425  0025CC  90D8               	bcf	status,0,c
  4426  0025CE  320A               	rrcf	__div_to_l_@quot+3,f,c
  4427  0025D0  3209               	rrcf	__div_to_l_@quot+2,f,c
  4428  0025D2  3208               	rrcf	__div_to_l_@quot+1,f,c
  4429  0025D4  3207               	rrcf	__div_to_l_@quot,f,c
  4430  0025D6  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4431  0025D8  D7F9               	goto	l2457
  4432  0025DA  D017               	goto	l592
  4433  0025DC                     l2461:
  4434  0025DC  0E1F               	movlw	31
  4435  0025DE  640C               	cpfsgt	__div_to_l_@exp1,c
  4436  0025E0  D011               	goto	l2469
  4437  0025E2                     l2463:
  4438  0025E2  0E00               	movlw	0
  4439  0025E4  6E01               	movwf	?__div_to_l_,c
  4440  0025E6  0E00               	movlw	0
  4441  0025E8  6E02               	movwf	?__div_to_l_+1,c
  4442  0025EA  0E00               	movlw	0
  4443  0025EC  6E03               	movwf	?__div_to_l_+2,c
  4444  0025EE  0E00               	movlw	0
  4445  0025F0  6E04               	movwf	?__div_to_l_+3,c
  4446  0025F2  D013               	goto	l583
  4447  0025F4  D007               	goto	l2469
  4448  0025F6                     l2467:
  4449  0025F6  90D8               	bcf	status,0,c
  4450  0025F8  3607               	rlcf	__div_to_l_@quot,f,c
  4451  0025FA  3608               	rlcf	__div_to_l_@quot+1,f,c
  4452  0025FC  3609               	rlcf	__div_to_l_@quot+2,f,c
  4453  0025FE  360A               	rlcf	__div_to_l_@quot+3,f,c
  4454  002600  060C               	decf	__div_to_l_@exp1,f,c
  4455  002602  D000               	goto	l2469
  4456  002604                     l2469:
  4457  002604  500C               	movf	__div_to_l_@exp1,w,c
  4458  002606  A4D8               	btfss	status,2,c
  4459  002608  D7F6               	goto	l2467
  4460  00260A                     l592:
  4461  00260A  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4462  00260E  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4463  002612  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4464  002616  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4465  00261A                     l583:
  4466  00261A  0012               	return		;funcret
  4467  00261C                     __end_of__div_to_l_:
  4468                           	opt stack 0
  4469                           tblptru	equ	0xFF8
  4470                           tblptrh	equ	0xFF7
  4471                           tblptrl	equ	0xFF6
  4472                           tablat	equ	0xFF5
  4473                           prodh	equ	0xFF4
  4474                           prodl	equ	0xFF3
  4475                           postinc0	equ	0xFEE
  4476                           wreg	equ	0xFE8
  4477                           postdec1	equ	0xFE5
  4478                           fsr1l	equ	0xFE1
  4479                           postinc2	equ	0xFDE
  4480                           postdec2	equ	0xFDD
  4481                           fsr2h	equ	0xFDA
  4482                           fsr2l	equ	0xFD9
  4483                           status	equ	0xFD8
  4484                           
  4485 ;; *************** function ___lltoft *****************
  4486 ;; Defined at:
  4487 ;;		line 35 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lltoft.c"
  4488 ;; Parameters:    Size  Location     Type
  4489 ;;  c               4    8[COMRAM] unsigned long 
  4490 ;; Auto vars:     Size  Location     Type
  4491 ;;  exp             1   16[COMRAM] unsigned char 
  4492 ;; Return value:  Size  Location     Type
  4493 ;;                  3    8[COMRAM] float 
  4494 ;; Registers used:
  4495 ;;		wreg, status,2, status,0, cstack
  4496 ;; Tracked objects:
  4497 ;;		On entry : 0/0
  4498 ;;		On exit  : 0/0
  4499 ;;		Unchanged: 0/0
  4500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4501 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4502 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4503 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4504 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4505 ;;Total ram usage:        9 bytes
  4506 ;; Hardware stack levels used:    1
  4507 ;; Hardware stack levels required when called:    1
  4508 ;; This function calls:
  4509 ;;		___ftpack
  4510 ;; This function is called by:
  4511 ;;		_printf
  4512 ;; This function uses a non-reentrant model
  4513 ;;
  4514                           
  4515                           	psect	text12
  4516  002CBC                     __ptext12:
  4517                           	opt stack 0
  4518  002CBC                     ___lltoft:
  4519                           	opt stack 28
  4520                           
  4521                           ;incstack = 0
  4522  002CBC  0E8E               	movlw	142
  4523  002CBE  6E11               	movwf	___lltoft@exp,c
  4524  002CC0  D007               	goto	l2589
  4525  002CC2                     l2587:
  4526  002CC2  90D8               	bcf	status,0,c
  4527  002CC4  320C               	rrcf	___lltoft@c+3,f,c
  4528  002CC6  320B               	rrcf	___lltoft@c+2,f,c
  4529  002CC8  320A               	rrcf	___lltoft@c+1,f,c
  4530  002CCA  3209               	rrcf	___lltoft@c,f,c
  4531  002CCC  2A11               	incf	___lltoft@exp,f,c
  4532  002CCE  D000               	goto	l2589
  4533  002CD0                     l2589:
  4534  002CD0  0E00               	movlw	0
  4535  002CD2  1409               	andwf	___lltoft@c,w,c
  4536  002CD4  6E0D               	movwf	??___lltoft& (0+255),c
  4537  002CD6  0E00               	movlw	0
  4538  002CD8  140A               	andwf	___lltoft@c+1,w,c
  4539  002CDA  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4540  002CDC  0E00               	movlw	0
  4541  002CDE  140B               	andwf	___lltoft@c+2,w,c
  4542  002CE0  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4543  002CE2  0EFF               	movlw	255
  4544  002CE4  140C               	andwf	___lltoft@c+3,w,c
  4545  002CE6  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4546  002CE8  500D               	movf	??___lltoft,w,c
  4547  002CEA  100E               	iorwf	??___lltoft+1,w,c
  4548  002CEC  100F               	iorwf	??___lltoft+2,w,c
  4549  002CEE  1010               	iorwf	??___lltoft+3,w,c
  4550  002CF0  A4D8               	btfss	status,2,c
  4551  002CF2  D7E7               	goto	l2587
  4552  002CF4  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4553  002CF8  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4554  002CFC  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4555  002D00  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4556  002D04  0E00               	movlw	0
  4557  002D06  6E05               	movwf	___ftpack@sign,c
  4558  002D08  EC6E  F014         	call	___ftpack	;wreg free
  4559  002D0C  C001  F009         	movff	?___ftpack,?___lltoft
  4560  002D10  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4561  002D14  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4562  002D18  D000               	goto	l823
  4563  002D1A                     l823:
  4564  002D1A  0012               	return		;funcret
  4565  002D1C                     __end_of___lltoft:
  4566                           	opt stack 0
  4567                           tblptru	equ	0xFF8
  4568                           tblptrh	equ	0xFF7
  4569                           tblptrl	equ	0xFF6
  4570                           tablat	equ	0xFF5
  4571                           prodh	equ	0xFF4
  4572                           prodl	equ	0xFF3
  4573                           postinc0	equ	0xFEE
  4574                           wreg	equ	0xFE8
  4575                           postdec1	equ	0xFE5
  4576                           fsr1l	equ	0xFE1
  4577                           postinc2	equ	0xFDE
  4578                           postdec2	equ	0xFDD
  4579                           fsr2h	equ	0xFDA
  4580                           fsr2l	equ	0xFD9
  4581                           status	equ	0xFD8
  4582                           
  4583 ;; *************** function ___llmod *****************
  4584 ;; Defined at:
  4585 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\llmod.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;  dividend        4   13[COMRAM] unsigned long 
  4588 ;;  divisor         4   17[COMRAM] unsigned long 
  4589 ;; Auto vars:     Size  Location     Type
  4590 ;;  counter         1   21[COMRAM] unsigned char 
  4591 ;; Return value:  Size  Location     Type
  4592 ;;                  4   13[COMRAM] unsigned long 
  4593 ;; Registers used:
  4594 ;;		wreg, status,2, status,0
  4595 ;; Tracked objects:
  4596 ;;		On entry : 0/0
  4597 ;;		On exit  : 0/0
  4598 ;;		Unchanged: 0/0
  4599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4600 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;Total ram usage:        9 bytes
  4605 ;; Hardware stack levels used:    1
  4606 ;; This function calls:
  4607 ;;		Nothing
  4608 ;; This function is called by:
  4609 ;;		_printf
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           	psect	text13
  4614  002BDC                     __ptext13:
  4615                           	opt stack 0
  4616  002BDC                     ___llmod:
  4617                           	opt stack 29
  4618                           
  4619                           ;incstack = 0
  4620  002BDC  5012               	movf	___llmod@divisor,w,c
  4621  002BDE  1013               	iorwf	___llmod@divisor+1,w,c
  4622  002BE0  1014               	iorwf	___llmod@divisor+2,w,c
  4623  002BE2  1015               	iorwf	___llmod@divisor+3,w,c
  4624  002BE4  B4D8               	btfsc	status,2,c
  4625  002BE6  D029               	goto	l803
  4626  002BE8  0E01               	movlw	1
  4627  002BEA  6E16               	movwf	___llmod@counter,c
  4628  002BEC  D007               	goto	l2575
  4629  002BEE                     l2573:
  4630  002BEE  90D8               	bcf	status,0,c
  4631  002BF0  3612               	rlcf	___llmod@divisor,f,c
  4632  002BF2  3613               	rlcf	___llmod@divisor+1,f,c
  4633  002BF4  3614               	rlcf	___llmod@divisor+2,f,c
  4634  002BF6  3615               	rlcf	___llmod@divisor+3,f,c
  4635  002BF8  2A16               	incf	___llmod@counter,f,c
  4636  002BFA  D000               	goto	l2575
  4637  002BFC                     l2575:
  4638  002BFC  BE15               	btfsc	___llmod@divisor+3,7,c
  4639  002BFE  D002               	goto	l2577
  4640  002C00  D7F6               	goto	l2573
  4641  002C02  D000               	goto	l2577
  4642  002C04                     l2577:
  4643  002C04  5012               	movf	___llmod@divisor,w,c
  4644  002C06  5C0E               	subwf	___llmod@dividend,w,c
  4645  002C08  5013               	movf	___llmod@divisor+1,w,c
  4646  002C0A  580F               	subwfb	___llmod@dividend+1,w,c
  4647  002C0C  5014               	movf	___llmod@divisor+2,w,c
  4648  002C0E  5810               	subwfb	___llmod@dividend+2,w,c
  4649  002C10  5015               	movf	___llmod@divisor+3,w,c
  4650  002C12  5811               	subwfb	___llmod@dividend+3,w,c
  4651  002C14  A0D8               	btfss	status,0,c
  4652  002C16  D009               	goto	l2581
  4653  002C18  5012               	movf	___llmod@divisor,w,c
  4654  002C1A  5E0E               	subwf	___llmod@dividend,f,c
  4655  002C1C  5013               	movf	___llmod@divisor+1,w,c
  4656  002C1E  5A0F               	subwfb	___llmod@dividend+1,f,c
  4657  002C20  5014               	movf	___llmod@divisor+2,w,c
  4658  002C22  5A10               	subwfb	___llmod@dividend+2,f,c
  4659  002C24  5015               	movf	___llmod@divisor+3,w,c
  4660  002C26  5A11               	subwfb	___llmod@dividend+3,f,c
  4661  002C28  D000               	goto	l2581
  4662  002C2A                     l2581:
  4663  002C2A  90D8               	bcf	status,0,c
  4664  002C2C  3215               	rrcf	___llmod@divisor+3,f,c
  4665  002C2E  3214               	rrcf	___llmod@divisor+2,f,c
  4666  002C30  3213               	rrcf	___llmod@divisor+1,f,c
  4667  002C32  3212               	rrcf	___llmod@divisor,f,c
  4668  002C34  2E16               	decfsz	___llmod@counter,f,c
  4669  002C36  D7E6               	goto	l2577
  4670  002C38  D000               	goto	l803
  4671  002C3A                     l803:
  4672  002C3A  C00E  F00E         	movff	___llmod@dividend,?___llmod
  4673  002C3E  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  4674  002C42  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  4675  002C46  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  4676  002C4A  0012               	return		;funcret
  4677  002C4C                     __end_of___llmod:
  4678                           	opt stack 0
  4679                           tblptru	equ	0xFF8
  4680                           tblptrh	equ	0xFF7
  4681                           tblptrl	equ	0xFF6
  4682                           tablat	equ	0xFF5
  4683                           prodh	equ	0xFF4
  4684                           prodl	equ	0xFF3
  4685                           postinc0	equ	0xFEE
  4686                           wreg	equ	0xFE8
  4687                           postdec1	equ	0xFE5
  4688                           fsr1l	equ	0xFE1
  4689                           postinc2	equ	0xFDE
  4690                           postdec2	equ	0xFDD
  4691                           fsr2h	equ	0xFDA
  4692                           fsr2l	equ	0xFD9
  4693                           status	equ	0xFD8
  4694                           
  4695 ;; *************** function ___lldiv *****************
  4696 ;; Defined at:
  4697 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lldiv.c"
  4698 ;; Parameters:    Size  Location     Type
  4699 ;;  dividend        4    0[COMRAM] unsigned long 
  4700 ;;  divisor         4    4[COMRAM] unsigned long 
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;  quotient        4    8[COMRAM] unsigned long 
  4703 ;;  counter         1   12[COMRAM] unsigned char 
  4704 ;; Return value:  Size  Location     Type
  4705 ;;                  4    0[COMRAM] unsigned long 
  4706 ;; Registers used:
  4707 ;;		wreg, status,2, status,0
  4708 ;; Tracked objects:
  4709 ;;		On entry : 0/0
  4710 ;;		On exit  : 0/0
  4711 ;;		Unchanged: 0/0
  4712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4713 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4714 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4716 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4717 ;;Total ram usage:       13 bytes
  4718 ;; Hardware stack levels used:    1
  4719 ;; This function calls:
  4720 ;;		Nothing
  4721 ;; This function is called by:
  4722 ;;		_printf
  4723 ;; This function uses a non-reentrant model
  4724 ;;
  4725                           
  4726                           	psect	text14
  4727  002ACE                     __ptext14:
  4728                           	opt stack 0
  4729  002ACE                     ___lldiv:
  4730                           	opt stack 29
  4731                           
  4732                           ;incstack = 0
  4733  002ACE  0E00               	movlw	0
  4734  002AD0  6E09               	movwf	___lldiv@quotient,c
  4735  002AD2  0E00               	movlw	0
  4736  002AD4  6E0A               	movwf	___lldiv@quotient+1,c
  4737  002AD6  0E00               	movlw	0
  4738  002AD8  6E0B               	movwf	___lldiv@quotient+2,c
  4739  002ADA  0E00               	movlw	0
  4740  002ADC  6E0C               	movwf	___lldiv@quotient+3,c
  4741  002ADE  5005               	movf	___lldiv@divisor,w,c
  4742  002AE0  1006               	iorwf	___lldiv@divisor+1,w,c
  4743  002AE2  1007               	iorwf	___lldiv@divisor+2,w,c
  4744  002AE4  1008               	iorwf	___lldiv@divisor+3,w,c
  4745  002AE6  B4D8               	btfsc	status,2,c
  4746  002AE8  D02F               	goto	l793
  4747  002AEA  0E01               	movlw	1
  4748  002AEC  6E0D               	movwf	___lldiv@counter,c
  4749  002AEE  D007               	goto	l2555
  4750  002AF0                     l2553:
  4751  002AF0  90D8               	bcf	status,0,c
  4752  002AF2  3605               	rlcf	___lldiv@divisor,f,c
  4753  002AF4  3606               	rlcf	___lldiv@divisor+1,f,c
  4754  002AF6  3607               	rlcf	___lldiv@divisor+2,f,c
  4755  002AF8  3608               	rlcf	___lldiv@divisor+3,f,c
  4756  002AFA  2A0D               	incf	___lldiv@counter,f,c
  4757  002AFC  D000               	goto	l2555
  4758  002AFE                     l2555:
  4759  002AFE  BE08               	btfsc	___lldiv@divisor+3,7,c
  4760  002B00  D002               	goto	l2557
  4761  002B02  D7F6               	goto	l2553
  4762  002B04  D000               	goto	l2557
  4763  002B06                     l2557:
  4764  002B06  90D8               	bcf	status,0,c
  4765  002B08  3609               	rlcf	___lldiv@quotient,f,c
  4766  002B0A  360A               	rlcf	___lldiv@quotient+1,f,c
  4767  002B0C  360B               	rlcf	___lldiv@quotient+2,f,c
  4768  002B0E  360C               	rlcf	___lldiv@quotient+3,f,c
  4769  002B10  5005               	movf	___lldiv@divisor,w,c
  4770  002B12  5C01               	subwf	___lldiv@dividend,w,c
  4771  002B14  5006               	movf	___lldiv@divisor+1,w,c
  4772  002B16  5802               	subwfb	___lldiv@dividend+1,w,c
  4773  002B18  5007               	movf	___lldiv@divisor+2,w,c
  4774  002B1A  5803               	subwfb	___lldiv@dividend+2,w,c
  4775  002B1C  5008               	movf	___lldiv@divisor+3,w,c
  4776  002B1E  5804               	subwfb	___lldiv@dividend+3,w,c
  4777  002B20  A0D8               	btfss	status,0,c
  4778  002B22  D00A               	goto	l2565
  4779  002B24  5005               	movf	___lldiv@divisor,w,c
  4780  002B26  5E01               	subwf	___lldiv@dividend,f,c
  4781  002B28  5006               	movf	___lldiv@divisor+1,w,c
  4782  002B2A  5A02               	subwfb	___lldiv@dividend+1,f,c
  4783  002B2C  5007               	movf	___lldiv@divisor+2,w,c
  4784  002B2E  5A03               	subwfb	___lldiv@dividend+2,f,c
  4785  002B30  5008               	movf	___lldiv@divisor+3,w,c
  4786  002B32  5A04               	subwfb	___lldiv@dividend+3,f,c
  4787  002B34  8009               	bsf	___lldiv@quotient,0,c
  4788  002B36  D000               	goto	l2565
  4789  002B38                     l2565:
  4790  002B38  90D8               	bcf	status,0,c
  4791  002B3A  3208               	rrcf	___lldiv@divisor+3,f,c
  4792  002B3C  3207               	rrcf	___lldiv@divisor+2,f,c
  4793  002B3E  3206               	rrcf	___lldiv@divisor+1,f,c
  4794  002B40  3205               	rrcf	___lldiv@divisor,f,c
  4795  002B42  2E0D               	decfsz	___lldiv@counter,f,c
  4796  002B44  D7E0               	goto	l2557
  4797  002B46  D000               	goto	l793
  4798  002B48                     l793:
  4799  002B48  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4800  002B4C  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4801  002B50  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4802  002B54  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4803  002B58  0012               	return		;funcret
  4804  002B5A                     __end_of___lldiv:
  4805                           	opt stack 0
  4806                           tblptru	equ	0xFF8
  4807                           tblptrh	equ	0xFF7
  4808                           tblptrl	equ	0xFF6
  4809                           tablat	equ	0xFF5
  4810                           prodh	equ	0xFF4
  4811                           prodl	equ	0xFF3
  4812                           postinc0	equ	0xFEE
  4813                           wreg	equ	0xFE8
  4814                           postdec1	equ	0xFE5
  4815                           fsr1l	equ	0xFE1
  4816                           postinc2	equ	0xFDE
  4817                           postdec2	equ	0xFDD
  4818                           fsr2h	equ	0xFDA
  4819                           fsr2l	equ	0xFD9
  4820                           status	equ	0xFD8
  4821                           
  4822 ;; *************** function ___fttol *****************
  4823 ;; Defined at:
  4824 ;;		line 44 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fttol.c"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;  f1              3   42[COMRAM] float 
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;  lval            4   52[COMRAM] unsigned long 
  4829 ;;  exp1            1   56[COMRAM] unsigned char 
  4830 ;;  sign1           1   51[COMRAM] unsigned char 
  4831 ;; Return value:  Size  Location     Type
  4832 ;;                  4   42[COMRAM] long 
  4833 ;; Registers used:
  4834 ;;		wreg, status,2, status,0
  4835 ;; Tracked objects:
  4836 ;;		On entry : 0/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4840 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4844 ;;Total ram usage:       15 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; This function calls:
  4847 ;;		Nothing
  4848 ;; This function is called by:
  4849 ;;		_printf
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           	psect	text15
  4854  002714                     __ptext15:
  4855                           	opt stack 0
  4856  002714                     ___fttol:
  4857                           	opt stack 29
  4858                           
  4859                           ;incstack = 0
  4860  002714  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4861  002718  6A30               	clrf	(??___fttol+1)& (0+255),c
  4862  00271A  6A31               	clrf	(??___fttol+2)& (0+255),c
  4863  00271C  342C               	rlcf	___fttol@f1+1,w,c
  4864  00271E  362F               	rlcf	??___fttol& (0+255),f,c
  4865  002720  E301               	bnc	u2591
  4866  002722  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4867  002724                     u2591:
  4868  002724  502F               	movf	??___fttol,w,c
  4869  002726  6E39               	movwf	___fttol@exp1,c
  4870  002728  5039               	movf	___fttol@exp1,w,c
  4871  00272A  A4D8               	btfss	status,2,c
  4872  00272C  D002               	goto	l2507
  4873  00272E  D039               	goto	l2531
  4874  002730  D063               	goto	l749
  4875  002732                     l2507:
  4876  002732  0E17               	movlw	23
  4877  002734  6E2F               	movwf	??___fttol& (0+255),c
  4878  002736  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4879  00273A  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4880  00273E  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4881  002742  282F               	incf	??___fttol,w,c
  4882  002744  6E33               	movwf	(??___fttol+4)& (0+255),c
  4883  002746  D004               	goto	u2610
  4884  002748                     u2615:
  4885  002748  90D8               	bcf	status,0,c
  4886  00274A  3232               	rrcf	??___fttol+3,f,c
  4887  00274C  3231               	rrcf	??___fttol+2,f,c
  4888  00274E  3230               	rrcf	??___fttol+1,f,c
  4889  002750                     u2610:
  4890  002750  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4891  002752  D7FA               	goto	u2615
  4892  002754  5030               	movf	??___fttol+1,w,c
  4893  002756  6E34               	movwf	___fttol@sign1,c
  4894  002758  8E2C               	bsf	___fttol@f1+1,7,c
  4895  00275A  0EFF               	movlw	255
  4896  00275C  162B               	andwf	___fttol@f1,f,c
  4897  00275E  0EFF               	movlw	255
  4898  002760  162C               	andwf	___fttol@f1+1,f,c
  4899  002762  0E00               	movlw	0
  4900  002764  162D               	andwf	___fttol@f1+2,f,c
  4901  002766  502B               	movf	___fttol@f1,w,c
  4902  002768  6E35               	movwf	___fttol@lval,c
  4903  00276A  502C               	movf	___fttol@f1+1,w,c
  4904  00276C  6E36               	movwf	___fttol@lval+1,c
  4905  00276E  502D               	movf	___fttol@f1+2,w,c
  4906  002770  6E37               	movwf	___fttol@lval+2,c
  4907  002772  6A38               	clrf	___fttol@lval+3,c
  4908  002774  0E8E               	movlw	142
  4909  002776  5E39               	subwf	___fttol@exp1,f,c
  4910  002778  AE39               	btfss	___fttol@exp1,7,c
  4911  00277A  D010               	goto	l2529
  4912  00277C  5039               	movf	___fttol@exp1,w,c
  4913  00277E  0A80               	xorlw	128
  4914  002780  0F8F               	addlw	143
  4915  002782  B0D8               	btfsc	status,0,c
  4916  002784  D003               	goto	l2525
  4917  002786  D00D               	goto	l2531
  4918  002788  D037               	goto	l749
  4919  00278A  D000               	goto	l2525
  4920  00278C                     l2525:
  4921  00278C  90D8               	bcf	status,0,c
  4922  00278E  3238               	rrcf	___fttol@lval+3,f,c
  4923  002790  3237               	rrcf	___fttol@lval+2,f,c
  4924  002792  3236               	rrcf	___fttol@lval+1,f,c
  4925  002794  3235               	rrcf	___fttol@lval,f,c
  4926  002796  3E39               	incfsz	___fttol@exp1,f,c
  4927  002798  D7F9               	goto	l2525
  4928  00279A  D019               	goto	l2539
  4929  00279C                     l2529:
  4930  00279C  0E17               	movlw	23
  4931  00279E  6439               	cpfsgt	___fttol@exp1,c
  4932  0027A0  D011               	goto	l2537
  4933  0027A2                     l2531:
  4934  0027A2  0E00               	movlw	0
  4935  0027A4  6E2B               	movwf	?___fttol,c
  4936  0027A6  0E00               	movlw	0
  4937  0027A8  6E2C               	movwf	?___fttol+1,c
  4938  0027AA  0E00               	movlw	0
  4939  0027AC  6E2D               	movwf	?___fttol+2,c
  4940  0027AE  0E00               	movlw	0
  4941  0027B0  6E2E               	movwf	?___fttol+3,c
  4942  0027B2  D022               	goto	l749
  4943  0027B4  D007               	goto	l2537
  4944  0027B6                     l2535:
  4945  0027B6  90D8               	bcf	status,0,c
  4946  0027B8  3635               	rlcf	___fttol@lval,f,c
  4947  0027BA  3636               	rlcf	___fttol@lval+1,f,c
  4948  0027BC  3637               	rlcf	___fttol@lval+2,f,c
  4949  0027BE  3638               	rlcf	___fttol@lval+3,f,c
  4950  0027C0  0639               	decf	___fttol@exp1,f,c
  4951  0027C2  D000               	goto	l2537
  4952  0027C4                     l2537:
  4953  0027C4  5039               	movf	___fttol@exp1,w,c
  4954  0027C6  B4D8               	btfsc	status,2,c
  4955  0027C8  D002               	goto	l2539
  4956  0027CA  D7F5               	goto	l2535
  4957  0027CC  D000               	goto	l2539
  4958  0027CE                     l2539:
  4959  0027CE  5034               	movf	___fttol@sign1,w,c
  4960  0027D0  B4D8               	btfsc	status,2,c
  4961  0027D2  D009               	goto	l2543
  4962  0027D4  1E38               	comf	___fttol@lval+3,f,c
  4963  0027D6  1E37               	comf	___fttol@lval+2,f,c
  4964  0027D8  1E36               	comf	___fttol@lval+1,f,c
  4965  0027DA  6C35               	negf	___fttol@lval,c
  4966  0027DC  0E00               	movlw	0
  4967  0027DE  2236               	addwfc	___fttol@lval+1,f,c
  4968  0027E0  2237               	addwfc	___fttol@lval+2,f,c
  4969  0027E2  2238               	addwfc	___fttol@lval+3,f,c
  4970  0027E4  D000               	goto	l2543
  4971  0027E6                     l2543:
  4972  0027E6  C035  F02B         	movff	___fttol@lval,?___fttol
  4973  0027EA  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4974  0027EE  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4975  0027F2  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4976  0027F6  D000               	goto	l749
  4977  0027F8                     l749:
  4978  0027F8  0012               	return		;funcret
  4979  0027FA                     __end_of___fttol:
  4980                           	opt stack 0
  4981                           tblptru	equ	0xFF8
  4982                           tblptrh	equ	0xFF7
  4983                           tblptrl	equ	0xFF6
  4984                           tablat	equ	0xFF5
  4985                           prodh	equ	0xFF4
  4986                           prodl	equ	0xFF3
  4987                           postinc0	equ	0xFEE
  4988                           wreg	equ	0xFE8
  4989                           postdec1	equ	0xFE5
  4990                           fsr1l	equ	0xFE1
  4991                           postinc2	equ	0xFDE
  4992                           postdec2	equ	0xFDD
  4993                           fsr2h	equ	0xFDA
  4994                           fsr2l	equ	0xFD9
  4995                           status	equ	0xFD8
  4996                           
  4997 ;; *************** function ___ftsub *****************
  4998 ;; Defined at:
  4999 ;;		line 20 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5000 ;; Parameters:    Size  Location     Type
  5001 ;;  f1              3   57[COMRAM] float 
  5002 ;;  f2              3   60[COMRAM] float 
  5003 ;; Auto vars:     Size  Location     Type
  5004 ;;		None
  5005 ;; Return value:  Size  Location     Type
  5006 ;;                  3   57[COMRAM] float 
  5007 ;; Registers used:
  5008 ;;		wreg, status,2, status,0, cstack
  5009 ;; Tracked objects:
  5010 ;;		On entry : 0/0
  5011 ;;		On exit  : 0/0
  5012 ;;		Unchanged: 0/0
  5013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5014 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;Total ram usage:        6 bytes
  5019 ;; Hardware stack levels used:    1
  5020 ;; Hardware stack levels required when called:    2
  5021 ;; This function calls:
  5022 ;;		___ftadd
  5023 ;; This function is called by:
  5024 ;;		_printf
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           	psect	text16
  5029  002D1C                     __ptext16:
  5030                           	opt stack 0
  5031  002D1C                     ___ftsub:
  5032                           	opt stack 27
  5033                           
  5034                           ;incstack = 0
  5035  002D1C  503D               	movf	___ftsub@f2,w,c
  5036  002D1E  103E               	iorwf	___ftsub@f2+1,w,c
  5037  002D20  103F               	iorwf	___ftsub@f2+2,w,c
  5038  002D22  B4D8               	btfsc	status,2,c
  5039  002D24  D007               	goto	l2475
  5040  002D26  0E00               	movlw	0
  5041  002D28  1A3D               	xorwf	___ftsub@f2,f,c
  5042  002D2A  0E00               	movlw	0
  5043  002D2C  1A3E               	xorwf	___ftsub@f2+1,f,c
  5044  002D2E  0E80               	movlw	128
  5045  002D30  1A3F               	xorwf	___ftsub@f2+2,f,c
  5046  002D32  D000               	goto	l2475
  5047  002D34                     l2475:
  5048  002D34  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  5049  002D38  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  5050  002D3C  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  5051  002D40  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  5052  002D44  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  5053  002D48  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  5054  002D4C  EC8D  F010         	call	___ftadd	;wreg free
  5055  002D50  C02E  F03A         	movff	?___ftadd,?___ftsub
  5056  002D54  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  5057  002D58  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  5058  002D5C  D000               	goto	l745
  5059  002D5E                     l745:
  5060  002D5E  0012               	return		;funcret
  5061  002D60                     __end_of___ftsub:
  5062                           	opt stack 0
  5063                           tblptru	equ	0xFF8
  5064                           tblptrh	equ	0xFF7
  5065                           tblptrl	equ	0xFF6
  5066                           tablat	equ	0xFF5
  5067                           prodh	equ	0xFF4
  5068                           prodl	equ	0xFF3
  5069                           postinc0	equ	0xFEE
  5070                           wreg	equ	0xFE8
  5071                           postdec1	equ	0xFE5
  5072                           fsr1l	equ	0xFE1
  5073                           postinc2	equ	0xFDE
  5074                           postdec2	equ	0xFDD
  5075                           fsr2h	equ	0xFDA
  5076                           fsr2l	equ	0xFD9
  5077                           status	equ	0xFD8
  5078                           
  5079 ;; *************** function ___ftadd *****************
  5080 ;; Defined at:
  5081 ;;		line 86 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5082 ;; Parameters:    Size  Location     Type
  5083 ;;  f1              3   45[COMRAM] float 
  5084 ;;  f2              3   48[COMRAM] float 
  5085 ;; Auto vars:     Size  Location     Type
  5086 ;;  exp1            1   56[COMRAM] unsigned char 
  5087 ;;  exp2            1   55[COMRAM] unsigned char 
  5088 ;;  sign            1   54[COMRAM] unsigned char 
  5089 ;; Return value:  Size  Location     Type
  5090 ;;                  3   45[COMRAM] float 
  5091 ;; Registers used:
  5092 ;;		wreg, status,2, status,0, cstack
  5093 ;; Tracked objects:
  5094 ;;		On entry : 0/0
  5095 ;;		On exit  : 0/0
  5096 ;;		Unchanged: 0/0
  5097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5098 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5099 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5100 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5101 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5102 ;;Total ram usage:       12 bytes
  5103 ;; Hardware stack levels used:    1
  5104 ;; Hardware stack levels required when called:    1
  5105 ;; This function calls:
  5106 ;;		___ftpack
  5107 ;; This function is called by:
  5108 ;;		_printf
  5109 ;;		___ftsub
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           	psect	text17
  5114  00211A                     __ptext17:
  5115                           	opt stack 0
  5116  00211A                     ___ftadd:
  5117                           	opt stack 27
  5118                           
  5119                           ;incstack = 0
  5120  00211A  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5121  00211E  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5122  002120  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5123  002122  342F               	rlcf	___ftadd@f1+1,w,c
  5124  002124  3634               	rlcf	??___ftadd& (0+255),f,c
  5125  002126  E301               	bnc	u1791
  5126  002128  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5127  00212A                     u1791:
  5128  00212A  5034               	movf	??___ftadd,w,c
  5129  00212C  6E39               	movwf	___ftadd@exp1,c
  5130  00212E  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5131  002132  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5132  002134  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5133  002136  3432               	rlcf	___ftadd@f2+1,w,c
  5134  002138  3634               	rlcf	??___ftadd& (0+255),f,c
  5135  00213A  E301               	bnc	u1801
  5136  00213C  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5137  00213E                     u1801:
  5138  00213E  5034               	movf	??___ftadd,w,c
  5139  002140  6E38               	movwf	___ftadd@exp2,c
  5140  002142  5039               	movf	___ftadd@exp1,w,c
  5141  002144  B4D8               	btfsc	status,2,c
  5142  002146  D00B               	goto	l664
  5143  002148  5038               	movf	___ftadd@exp2,w,c
  5144  00214A  5C39               	subwf	___ftadd@exp1,w,c
  5145  00214C  B0D8               	btfsc	status,0,c
  5146  00214E  D00E               	goto	l2039
  5147  002150  5039               	movf	___ftadd@exp1,w,c
  5148  002152  0800               	sublw	0
  5149  002154  2438               	addwf	___ftadd@exp2,w,c
  5150  002156  6E34               	movwf	??___ftadd& (0+255),c
  5151  002158  0E18               	movlw	24
  5152  00215A  6434               	cpfsgt	??___ftadd,c
  5153  00215C  D007               	goto	l2039
  5154  00215E                     l664:
  5155  00215E  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5156  002162  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5157  002166  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5158  00216A  D0B8               	goto	l665
  5159  00216C                     l2039:
  5160  00216C  5038               	movf	___ftadd@exp2,w,c
  5161  00216E  B4D8               	btfsc	status,2,c
  5162  002170  D00B               	goto	l668
  5163  002172  5039               	movf	___ftadd@exp1,w,c
  5164  002174  5C38               	subwf	___ftadd@exp2,w,c
  5165  002176  B0D8               	btfsc	status,0,c
  5166  002178  D00E               	goto	l2045
  5167  00217A  5038               	movf	___ftadd@exp2,w,c
  5168  00217C  0800               	sublw	0
  5169  00217E  2439               	addwf	___ftadd@exp1,w,c
  5170  002180  6E34               	movwf	??___ftadd& (0+255),c
  5171  002182  0E18               	movlw	24
  5172  002184  6434               	cpfsgt	??___ftadd,c
  5173  002186  D007               	goto	l2045
  5174  002188                     l668:
  5175  002188  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5176  00218C  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5177  002190  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5178  002194  D0A3               	goto	l665
  5179  002196                     l2045:
  5180  002196  0E06               	movlw	6
  5181  002198  6E37               	movwf	___ftadd@sign,c
  5182  00219A  AE30               	btfss	___ftadd@f1+2,7,c
  5183  00219C  D002               	goto	l2051
  5184  00219E  8E37               	bsf	___ftadd@sign,7,c
  5185  0021A0  D000               	goto	l2051
  5186  0021A2                     l2051:
  5187  0021A2  BE33               	btfsc	___ftadd@f2+2,7,c
  5188  0021A4  8C37               	bsf	___ftadd@sign,6,c
  5189  0021A6  8E2F               	bsf	___ftadd@f1+1,7,c
  5190  0021A8  0EFF               	movlw	255
  5191  0021AA  162E               	andwf	___ftadd@f1,f,c
  5192  0021AC  0EFF               	movlw	255
  5193  0021AE  162F               	andwf	___ftadd@f1+1,f,c
  5194  0021B0  0E00               	movlw	0
  5195  0021B2  1630               	andwf	___ftadd@f1+2,f,c
  5196  0021B4  8E32               	bsf	___ftadd@f2+1,7,c
  5197  0021B6  0EFF               	movlw	255
  5198  0021B8  1631               	andwf	___ftadd@f2,f,c
  5199  0021BA  0EFF               	movlw	255
  5200  0021BC  1632               	andwf	___ftadd@f2+1,f,c
  5201  0021BE  0E00               	movlw	0
  5202  0021C0  1633               	andwf	___ftadd@f2+2,f,c
  5203  0021C2  5038               	movf	___ftadd@exp2,w,c
  5204  0021C4  5C39               	subwf	___ftadd@exp1,w,c
  5205  0021C6  B0D8               	btfsc	status,0,c
  5206  0021C8  D01E               	goto	l2071
  5207  0021CA                     l2061:
  5208  0021CA  90D8               	bcf	status,0,c
  5209  0021CC  3631               	rlcf	___ftadd@f2,f,c
  5210  0021CE  3632               	rlcf	___ftadd@f2+1,f,c
  5211  0021D0  3633               	rlcf	___ftadd@f2+2,f,c
  5212  0021D2  0638               	decf	___ftadd@exp2,f,c
  5213  0021D4  5039               	movf	___ftadd@exp1,w,c
  5214  0021D6  1838               	xorwf	___ftadd@exp2,w,c
  5215  0021D8  B4D8               	btfsc	status,2,c
  5216  0021DA  D00F               	goto	l2069
  5217  0021DC  0637               	decf	___ftadd@sign,f,c
  5218  0021DE  C037  F034         	movff	___ftadd@sign,??___ftadd
  5219  0021E2  0E07               	movlw	7
  5220  0021E4  1634               	andwf	??___ftadd,f,c
  5221  0021E6  B4D8               	btfsc	status,2,c
  5222  0021E8  D008               	goto	l2069
  5223  0021EA  D7EF               	goto	l2061
  5224  0021EC  D006               	goto	l2069
  5225  0021EE                     l2067:
  5226  0021EE  90D8               	bcf	status,0,c
  5227  0021F0  3230               	rrcf	___ftadd@f1+2,f,c
  5228  0021F2  322F               	rrcf	___ftadd@f1+1,f,c
  5229  0021F4  322E               	rrcf	___ftadd@f1,f,c
  5230  0021F6  2A39               	incf	___ftadd@exp1,f,c
  5231  0021F8  D000               	goto	l2069
  5232  0021FA                     l2069:
  5233  0021FA  5038               	movf	___ftadd@exp2,w,c
  5234  0021FC  1839               	xorwf	___ftadd@exp1,w,c
  5235  0021FE  B4D8               	btfsc	status,2,c
  5236  002200  D024               	goto	l679
  5237  002202  D7F5               	goto	l2067
  5238  002204  D022               	goto	l679
  5239  002206                     l2071:
  5240  002206  5039               	movf	___ftadd@exp1,w,c
  5241  002208  5C38               	subwf	___ftadd@exp2,w,c
  5242  00220A  B0D8               	btfsc	status,0,c
  5243  00220C  D01E               	goto	l679
  5244  00220E                     l2073:
  5245  00220E  90D8               	bcf	status,0,c
  5246  002210  362E               	rlcf	___ftadd@f1,f,c
  5247  002212  362F               	rlcf	___ftadd@f1+1,f,c
  5248  002214  3630               	rlcf	___ftadd@f1+2,f,c
  5249  002216  0639               	decf	___ftadd@exp1,f,c
  5250  002218  5039               	movf	___ftadd@exp1,w,c
  5251  00221A  1838               	xorwf	___ftadd@exp2,w,c
  5252  00221C  B4D8               	btfsc	status,2,c
  5253  00221E  D00F               	goto	l2081
  5254  002220  0637               	decf	___ftadd@sign,f,c
  5255  002222  C037  F034         	movff	___ftadd@sign,??___ftadd
  5256  002226  0E07               	movlw	7
  5257  002228  1634               	andwf	??___ftadd,f,c
  5258  00222A  B4D8               	btfsc	status,2,c
  5259  00222C  D008               	goto	l2081
  5260  00222E  D7EF               	goto	l2073
  5261  002230  D006               	goto	l2081
  5262  002232                     l2079:
  5263  002232  90D8               	bcf	status,0,c
  5264  002234  3233               	rrcf	___ftadd@f2+2,f,c
  5265  002236  3232               	rrcf	___ftadd@f2+1,f,c
  5266  002238  3231               	rrcf	___ftadd@f2,f,c
  5267  00223A  2A38               	incf	___ftadd@exp2,f,c
  5268  00223C  D000               	goto	l2081
  5269  00223E                     l2081:
  5270  00223E  5038               	movf	___ftadd@exp2,w,c
  5271  002240  1839               	xorwf	___ftadd@exp1,w,c
  5272  002242  B4D8               	btfsc	status,2,c
  5273  002244  D002               	goto	l679
  5274  002246  D7F5               	goto	l2079
  5275  002248  D000               	goto	l679
  5276  00224A                     l679:
  5277  00224A  AE37               	btfss	___ftadd@sign,7,c
  5278  00224C  D00C               	goto	l688
  5279  00224E  0EFF               	movlw	255
  5280  002250  1A2E               	xorwf	___ftadd@f1,f,c
  5281  002252  0EFF               	movlw	255
  5282  002254  1A2F               	xorwf	___ftadd@f1+1,f,c
  5283  002256  0EFF               	movlw	255
  5284  002258  1A30               	xorwf	___ftadd@f1+2,f,c
  5285  00225A  0E01               	movlw	1
  5286  00225C  262E               	addwf	___ftadd@f1,f,c
  5287  00225E  0E00               	movlw	0
  5288  002260  222F               	addwfc	___ftadd@f1+1,f,c
  5289  002262  0E00               	movlw	0
  5290  002264  2230               	addwfc	___ftadd@f1+2,f,c
  5291  002266                     l688:
  5292  002266  AC37               	btfss	___ftadd@sign,6,c
  5293  002268  D00D               	goto	l2087
  5294  00226A  0EFF               	movlw	255
  5295  00226C  1A31               	xorwf	___ftadd@f2,f,c
  5296  00226E  0EFF               	movlw	255
  5297  002270  1A32               	xorwf	___ftadd@f2+1,f,c
  5298  002272  0EFF               	movlw	255
  5299  002274  1A33               	xorwf	___ftadd@f2+2,f,c
  5300  002276  0E01               	movlw	1
  5301  002278  2631               	addwf	___ftadd@f2,f,c
  5302  00227A  0E00               	movlw	0
  5303  00227C  2232               	addwfc	___ftadd@f2+1,f,c
  5304  00227E  0E00               	movlw	0
  5305  002280  2233               	addwfc	___ftadd@f2+2,f,c
  5306  002282  D000               	goto	l2087
  5307  002284                     l2087:
  5308  002284  0E00               	movlw	0
  5309  002286  6E37               	movwf	___ftadd@sign,c
  5310  002288  502E               	movf	___ftadd@f1,w,c
  5311  00228A  2631               	addwf	___ftadd@f2,f,c
  5312  00228C  502F               	movf	___ftadd@f1+1,w,c
  5313  00228E  2232               	addwfc	___ftadd@f2+1,f,c
  5314  002290  5030               	movf	___ftadd@f1+2,w,c
  5315  002292  2233               	addwfc	___ftadd@f2+2,f,c
  5316  002294  AE33               	btfss	___ftadd@f2+2,7,c
  5317  002296  D00F               	goto	l2097
  5318  002298  0EFF               	movlw	255
  5319  00229A  1A31               	xorwf	___ftadd@f2,f,c
  5320  00229C  0EFF               	movlw	255
  5321  00229E  1A32               	xorwf	___ftadd@f2+1,f,c
  5322  0022A0  0EFF               	movlw	255
  5323  0022A2  1A33               	xorwf	___ftadd@f2+2,f,c
  5324  0022A4  0E01               	movlw	1
  5325  0022A6  2631               	addwf	___ftadd@f2,f,c
  5326  0022A8  0E00               	movlw	0
  5327  0022AA  2232               	addwfc	___ftadd@f2+1,f,c
  5328  0022AC  0E00               	movlw	0
  5329  0022AE  2233               	addwfc	___ftadd@f2+2,f,c
  5330  0022B0  0E01               	movlw	1
  5331  0022B2  6E37               	movwf	___ftadd@sign,c
  5332  0022B4  D000               	goto	l2097
  5333  0022B6                     l2097:
  5334  0022B6  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5335  0022BA  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5336  0022BE  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5337  0022C2  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5338  0022C6  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5339  0022CA  EC6E  F014         	call	___ftpack	;wreg free
  5340  0022CE  C001  F02E         	movff	?___ftpack,?___ftadd
  5341  0022D2  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5342  0022D6  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5343  0022DA  D000               	goto	l665
  5344  0022DC                     l665:
  5345  0022DC  0012               	return		;funcret
  5346  0022DE                     __end_of___ftadd:
  5347                           	opt stack 0
  5348                           tblptru	equ	0xFF8
  5349                           tblptrh	equ	0xFF7
  5350                           tblptrl	equ	0xFF6
  5351                           tablat	equ	0xFF5
  5352                           prodh	equ	0xFF4
  5353                           prodl	equ	0xFF3
  5354                           postinc0	equ	0xFEE
  5355                           wreg	equ	0xFE8
  5356                           postdec1	equ	0xFE5
  5357                           fsr1l	equ	0xFE1
  5358                           postinc2	equ	0xFDE
  5359                           postdec2	equ	0xFDD
  5360                           fsr2h	equ	0xFDA
  5361                           fsr2l	equ	0xFD9
  5362                           status	equ	0xFD8
  5363                           
  5364 ;; *************** function ___ftneg *****************
  5365 ;; Defined at:
  5366 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftneg.c"
  5367 ;; Parameters:    Size  Location     Type
  5368 ;;  f1              3    0[COMRAM] float 
  5369 ;; Auto vars:     Size  Location     Type
  5370 ;;		None
  5371 ;; Return value:  Size  Location     Type
  5372 ;;                  3    0[COMRAM] float 
  5373 ;; Registers used:
  5374 ;;		wreg, status,2, status,0
  5375 ;; Tracked objects:
  5376 ;;		On entry : 0/0
  5377 ;;		On exit  : 0/0
  5378 ;;		Unchanged: 0/0
  5379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5380 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5383 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5384 ;;Total ram usage:        3 bytes
  5385 ;; Hardware stack levels used:    1
  5386 ;; This function calls:
  5387 ;;		Nothing
  5388 ;; This function is called by:
  5389 ;;		_printf
  5390 ;; This function uses a non-reentrant model
  5391 ;;
  5392                           
  5393                           	psect	text18
  5394  002E52                     __ptext18:
  5395                           	opt stack 0
  5396  002E52                     ___ftneg:
  5397                           	opt stack 29
  5398                           
  5399                           ;incstack = 0
  5400  002E52  5001               	movf	___ftneg@f1,w,c
  5401  002E54  1002               	iorwf	___ftneg@f1+1,w,c
  5402  002E56  1003               	iorwf	___ftneg@f1+2,w,c
  5403  002E58  B4D8               	btfsc	status,2,c
  5404  002E5A  D006               	goto	l738
  5405  002E5C  0E00               	movlw	0
  5406  002E5E  1A01               	xorwf	___ftneg@f1,f,c
  5407  002E60  0E00               	movlw	0
  5408  002E62  1A02               	xorwf	___ftneg@f1+1,f,c
  5409  002E64  0E80               	movlw	128
  5410  002E66  1A03               	xorwf	___ftneg@f1+2,f,c
  5411  002E68                     l738:
  5412  002E68  C001  F001         	movff	___ftneg@f1,?___ftneg
  5413  002E6C  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5414  002E70  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5415  002E74  0012               	return		;funcret
  5416  002E76                     __end_of___ftneg:
  5417                           	opt stack 0
  5418                           tblptru	equ	0xFF8
  5419                           tblptrh	equ	0xFF7
  5420                           tblptrl	equ	0xFF6
  5421                           tablat	equ	0xFF5
  5422                           prodh	equ	0xFF4
  5423                           prodl	equ	0xFF3
  5424                           postinc0	equ	0xFEE
  5425                           wreg	equ	0xFE8
  5426                           postdec1	equ	0xFE5
  5427                           fsr1l	equ	0xFE1
  5428                           postinc2	equ	0xFDE
  5429                           postdec2	equ	0xFDD
  5430                           fsr2h	equ	0xFDA
  5431                           fsr2l	equ	0xFD9
  5432                           status	equ	0xFD8
  5433                           
  5434 ;; *************** function ___ftge *****************
  5435 ;; Defined at:
  5436 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftge.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;  ff1             3    0[COMRAM] float 
  5439 ;;  ff2             3    3[COMRAM] float 
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;		None
  5442 ;; Return value:  Size  Location     Type
  5443 ;;		None               void
  5444 ;; Registers used:
  5445 ;;		wreg, status,2, status,0
  5446 ;; Tracked objects:
  5447 ;;		On entry : 0/0
  5448 ;;		On exit  : 0/0
  5449 ;;		Unchanged: 0/0
  5450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5451 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5453 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5454 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;Total ram usage:        9 bytes
  5456 ;; Hardware stack levels used:    1
  5457 ;; This function calls:
  5458 ;;		Nothing
  5459 ;; This function is called by:
  5460 ;;		_printf
  5461 ;; This function uses a non-reentrant model
  5462 ;;
  5463                           
  5464                           	psect	text19
  5465  002A38                     __ptext19:
  5466                           	opt stack 0
  5467  002A38                     ___ftge:
  5468                           	opt stack 29
  5469                           
  5470                           ;incstack = 0
  5471  002A38  AE03               	btfss	___ftge@ff1+2,7,c
  5472  002A3A  D017               	goto	l2483
  5473  002A3C  C001  F007         	movff	___ftge@ff1,??___ftge
  5474  002A40  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5475  002A44  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5476  002A48  1E07               	comf	??___ftge,f,c
  5477  002A4A  1E08               	comf	??___ftge+1,f,c
  5478  002A4C  1E09               	comf	??___ftge+2,f,c
  5479  002A4E  2A07               	incf	??___ftge,f,c
  5480  002A50  0E00               	movlw	0
  5481  002A52  2208               	addwfc	??___ftge+1,f,c
  5482  002A54  2209               	addwfc	??___ftge+2,f,c
  5483  002A56  0E00               	movlw	0
  5484  002A58  2407               	addwf	??___ftge,w,c
  5485  002A5A  6E01               	movwf	___ftge@ff1,c
  5486  002A5C  0E00               	movlw	0
  5487  002A5E  2008               	addwfc	??___ftge+1,w,c
  5488  002A60  6E02               	movwf	___ftge@ff1+1,c
  5489  002A62  0E80               	movlw	128
  5490  002A64  2009               	addwfc	??___ftge+2,w,c
  5491  002A66  6E03               	movwf	___ftge@ff1+2,c
  5492  002A68  D000               	goto	l2483
  5493  002A6A                     l2483:
  5494  002A6A  AE06               	btfss	___ftge@ff2+2,7,c
  5495  002A6C  D017               	goto	l2487
  5496  002A6E  C004  F007         	movff	___ftge@ff2,??___ftge
  5497  002A72  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5498  002A76  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5499  002A7A  1E07               	comf	??___ftge,f,c
  5500  002A7C  1E08               	comf	??___ftge+1,f,c
  5501  002A7E  1E09               	comf	??___ftge+2,f,c
  5502  002A80  2A07               	incf	??___ftge,f,c
  5503  002A82  0E00               	movlw	0
  5504  002A84  2208               	addwfc	??___ftge+1,f,c
  5505  002A86  2209               	addwfc	??___ftge+2,f,c
  5506  002A88  0E00               	movlw	0
  5507  002A8A  2407               	addwf	??___ftge,w,c
  5508  002A8C  6E04               	movwf	___ftge@ff2,c
  5509  002A8E  0E00               	movlw	0
  5510  002A90  2008               	addwfc	??___ftge+1,w,c
  5511  002A92  6E05               	movwf	___ftge@ff2+1,c
  5512  002A94  0E80               	movlw	128
  5513  002A96  2009               	addwfc	??___ftge+2,w,c
  5514  002A98  6E06               	movwf	___ftge@ff2+2,c
  5515  002A9A  D000               	goto	l2487
  5516  002A9C                     l2487:
  5517  002A9C  0E00               	movlw	0
  5518  002A9E  1A01               	xorwf	___ftge@ff1,f,c
  5519  002AA0  0E00               	movlw	0
  5520  002AA2  1A02               	xorwf	___ftge@ff1+1,f,c
  5521  002AA4  0E80               	movlw	128
  5522  002AA6  1A03               	xorwf	___ftge@ff1+2,f,c
  5523  002AA8  0E00               	movlw	0
  5524  002AAA  1A04               	xorwf	___ftge@ff2,f,c
  5525  002AAC  0E00               	movlw	0
  5526  002AAE  1A05               	xorwf	___ftge@ff2+1,f,c
  5527  002AB0  0E80               	movlw	128
  5528  002AB2  1A06               	xorwf	___ftge@ff2+2,f,c
  5529  002AB4  5004               	movf	___ftge@ff2,w,c
  5530  002AB6  5C01               	subwf	___ftge@ff1,w,c
  5531  002AB8  5005               	movf	___ftge@ff2+1,w,c
  5532  002ABA  5802               	subwfb	___ftge@ff1+1,w,c
  5533  002ABC  5006               	movf	___ftge@ff2+2,w,c
  5534  002ABE  5803               	subwfb	___ftge@ff1+2,w,c
  5535  002AC0  B0D8               	btfsc	status,0,c
  5536  002AC2  D002               	goto	l2493
  5537  002AC4  90D8               	bcf	status,0,c
  5538  002AC6  D002               	goto	l722
  5539  002AC8                     l2493:
  5540  002AC8  80D8               	bsf	status,0,c
  5541  002ACA  D000               	goto	l722
  5542  002ACC                     l722:
  5543  002ACC  0012               	return		;funcret
  5544  002ACE                     __end_of___ftge:
  5545                           	opt stack 0
  5546                           tblptru	equ	0xFF8
  5547                           tblptrh	equ	0xFF7
  5548                           tblptrl	equ	0xFF6
  5549                           tablat	equ	0xFF5
  5550                           prodh	equ	0xFF4
  5551                           prodl	equ	0xFF3
  5552                           postinc0	equ	0xFEE
  5553                           wreg	equ	0xFE8
  5554                           postdec1	equ	0xFE5
  5555                           fsr1l	equ	0xFE1
  5556                           postinc2	equ	0xFDE
  5557                           postdec2	equ	0xFDD
  5558                           fsr2h	equ	0xFDA
  5559                           fsr2l	equ	0xFD9
  5560                           status	equ	0xFD8
  5561                           
  5562 ;; *************** function _init_UART *****************
  5563 ;; Defined at:
  5564 ;;		line 98 in file "Lab6pA.c"
  5565 ;; Parameters:    Size  Location     Type
  5566 ;;		None
  5567 ;; Auto vars:     Size  Location     Type
  5568 ;;		None
  5569 ;; Return value:  Size  Location     Type
  5570 ;;		None               void
  5571 ;; Registers used:
  5572 ;;		wreg, status,2, cstack
  5573 ;; Tracked objects:
  5574 ;;		On entry : 0/0
  5575 ;;		On exit  : 0/0
  5576 ;;		Unchanged: 0/0
  5577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5582 ;;Total ram usage:        0 bytes
  5583 ;; Hardware stack levels used:    1
  5584 ;; Hardware stack levels required when called:    1
  5585 ;; This function calls:
  5586 ;;		_OpenUSART
  5587 ;; This function is called by:
  5588 ;;		_main
  5589 ;; This function uses a non-reentrant model
  5590 ;;
  5591                           
  5592                           	psect	text20
  5593  002EFA                     __ptext20:
  5594                           	opt stack 0
  5595  002EFA                     _init_UART:
  5596                           	opt stack 29
  5597                           
  5598                           ;Lab6pA.c: 100: OpenUSART(0b01111111 & 0b10111111 & 0b11111110 & 0b11111101
  5599                           ;Lab6pA.c: 101: & 0b11111111 & 0b11111111, 25);
  5600                           
  5601                           ;incstack = 0
  5602  002EFA  0E00               	movlw	0
  5603  002EFC  6E02               	movwf	OpenUSART@spbrg+1,c
  5604  002EFE  0E19               	movlw	25
  5605  002F00  6E01               	movwf	OpenUSART@spbrg,c
  5606  002F02  0E3C               	movlw	60
  5607  002F04  EC26  F016         	call	_OpenUSART
  5608                           
  5609                           ;Lab6pA.c: 102: OSCCON = 0x60;
  5610  002F08  0E60               	movlw	96
  5611  002F0A  6ED3               	movwf	4051,c	;volatile
  5612  002F0C  0012               	return		;funcret
  5613  002F0E                     __end_of_init_UART:
  5614                           	opt stack 0
  5615                           tblptru	equ	0xFF8
  5616                           tblptrh	equ	0xFF7
  5617                           tblptrl	equ	0xFF6
  5618                           tablat	equ	0xFF5
  5619                           prodh	equ	0xFF4
  5620                           prodl	equ	0xFF3
  5621                           postinc0	equ	0xFEE
  5622                           wreg	equ	0xFE8
  5623                           postdec1	equ	0xFE5
  5624                           fsr1l	equ	0xFE1
  5625                           postinc2	equ	0xFDE
  5626                           postdec2	equ	0xFDD
  5627                           fsr2h	equ	0xFDA
  5628                           fsr2l	equ	0xFD9
  5629                           status	equ	0xFD8
  5630                           
  5631 ;; *************** function _OpenUSART *****************
  5632 ;; Defined at:
  5633 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  5634 ;; Parameters:    Size  Location     Type
  5635 ;;  config          1    wreg     unsigned char 
  5636 ;;  spbrg           2    0[COMRAM] unsigned int 
  5637 ;; Auto vars:     Size  Location     Type
  5638 ;;  config          1    2[COMRAM] unsigned char 
  5639 ;; Return value:  Size  Location     Type
  5640 ;;		None               void
  5641 ;; Registers used:
  5642 ;;		wreg, status,2
  5643 ;; Tracked objects:
  5644 ;;		On entry : 0/0
  5645 ;;		On exit  : 0/0
  5646 ;;		Unchanged: 0/0
  5647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5648 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5651 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5652 ;;Total ram usage:        3 bytes
  5653 ;; Hardware stack levels used:    1
  5654 ;; This function calls:
  5655 ;;		Nothing
  5656 ;; This function is called by:
  5657 ;;		_init_UART
  5658 ;; This function uses a non-reentrant model
  5659 ;;
  5660                           
  5661                           	psect	text21
  5662  002C4C                     __ptext21:
  5663                           	opt stack 0
  5664  002C4C                     _OpenUSART:
  5665                           	opt stack 29
  5666                           
  5667                           ;incstack = 0
  5668                           ;OpenUSART@config stored from wreg
  5669  002C4C  6E03               	movwf	OpenUSART@config,c
  5670  002C4E  0E00               	movlw	0
  5671  002C50  6EAC               	movwf	4012,c	;volatile
  5672  002C52  0E00               	movlw	0
  5673  002C54  6EAB               	movwf	4011,c	;volatile
  5674  002C56  A003               	btfss	OpenUSART@config,0,c
  5675  002C58  D002               	goto	l2235
  5676  002C5A  88AC               	bsf	4012,4,c	;volatile
  5677  002C5C  D000               	goto	l2235
  5678  002C5E                     l2235:
  5679  002C5E  A203               	btfss	OpenUSART@config,1,c
  5680  002C60  D003               	goto	l2239
  5681  002C62  8CAC               	bsf	4012,6,c	;volatile
  5682  002C64  8CAB               	bsf	4011,6,c	;volatile
  5683  002C66  D000               	goto	l2239
  5684  002C68                     l2239:
  5685  002C68  A403               	btfss	OpenUSART@config,2,c
  5686  002C6A  D002               	goto	l2243
  5687  002C6C  8EAC               	bsf	4012,7,c	;volatile
  5688  002C6E  D000               	goto	l2243
  5689  002C70                     l2243:
  5690  002C70  A603               	btfss	OpenUSART@config,3,c
  5691  002C72  D002               	goto	l287
  5692  002C74  88AB               	bsf	4011,4,c	;volatile
  5693  002C76  D002               	goto	l2247
  5694  002C78                     l287:
  5695  002C78  8AAB               	bsf	4011,5,c	;volatile
  5696  002C7A  D000               	goto	l2247
  5697  002C7C                     l2247:
  5698  002C7C  B803               	btfsc	OpenUSART@config,4,c
  5699  002C7E  84AC               	bsf	4012,2,c	;volatile
  5700  002C80  989E               	bcf	3998,4,c	;volatile
  5701  002C82  AA03               	btfss	OpenUSART@config,5,c
  5702  002C84  D002               	goto	l2255
  5703  002C86  86AB               	bsf	4011,3,c	;volatile
  5704  002C88  D000               	goto	l2255
  5705  002C8A                     l2255:
  5706  002C8A  AC03               	btfss	OpenUSART@config,6,c
  5707  002C8C  D002               	goto	l291
  5708  002C8E  8A9D               	bsf	3997,5,c	;volatile
  5709  002C90  D001               	goto	l292
  5710  002C92                     l291:
  5711  002C92  9A9D               	bcf	3997,5,c	;volatile
  5712  002C94                     l292:
  5713  002C94  9A9E               	bcf	3998,5,c	;volatile
  5714  002C96  AE03               	btfss	OpenUSART@config,7,c
  5715  002C98  D002               	goto	l293
  5716  002C9A  889D               	bsf	3997,4,c	;volatile
  5717  002C9C  D001               	goto	l294
  5718  002C9E                     l293:
  5719  002C9E  989D               	bcf	3997,4,c	;volatile
  5720  002CA0                     l294:
  5721  002CA0  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  5722  002CA4  5002               	movf	OpenUSART@spbrg+1,w,c
  5723  002CA6  6EB0               	movwf	4016,c	;volatile
  5724  002CA8  8AAC               	bsf	4012,5,c	;volatile
  5725  002CAA  8EAB               	bsf	4011,7,c	;volatile
  5726  002CAC  9C94               	bcf	3988,6,c	;volatile
  5727  002CAE  8E94               	bsf	3988,7,c	;volatile
  5728  002CB0  B8AC               	btfsc	4012,4,c	;volatile
  5729  002CB2  BEAC               	btfsc	4012,7,c	;volatile
  5730  002CB4  D002               	goto	l296
  5731  002CB6  8C94               	bsf	3988,6,c	;volatile
  5732  002CB8  D000               	goto	l296
  5733  002CBA                     l296:
  5734  002CBA  0012               	return		;funcret
  5735  002CBC                     __end_of_OpenUSART:
  5736                           	opt stack 0
  5737                           tblptru	equ	0xFF8
  5738                           tblptrh	equ	0xFF7
  5739                           tblptrl	equ	0xFF6
  5740                           tablat	equ	0xFF5
  5741                           prodh	equ	0xFF4
  5742                           prodl	equ	0xFF3
  5743                           postinc0	equ	0xFEE
  5744                           wreg	equ	0xFE8
  5745                           postdec1	equ	0xFE5
  5746                           fsr1l	equ	0xFE1
  5747                           postinc2	equ	0xFDE
  5748                           postdec2	equ	0xFDD
  5749                           fsr2h	equ	0xFDA
  5750                           fsr2l	equ	0xFD9
  5751                           status	equ	0xFD8
  5752                           
  5753 ;; *************** function _get_full_ADC *****************
  5754 ;; Defined at:
  5755 ;;		line 116 in file "Lab6pA.c"
  5756 ;; Parameters:    Size  Location     Type
  5757 ;;		None
  5758 ;; Auto vars:     Size  Location     Type
  5759 ;;  result          2    4[COMRAM] int 
  5760 ;; Return value:  Size  Location     Type
  5761 ;;                  2    0[COMRAM] unsigned int 
  5762 ;; Registers used:
  5763 ;;		wreg, status,2, status,0
  5764 ;; Tracked objects:
  5765 ;;		On entry : 0/0
  5766 ;;		On exit  : 0/0
  5767 ;;		Unchanged: 0/0
  5768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5769 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5770 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5771 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5772 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5773 ;;Total ram usage:        6 bytes
  5774 ;; Hardware stack levels used:    1
  5775 ;; This function calls:
  5776 ;;		Nothing
  5777 ;; This function is called by:
  5778 ;;		_main
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782                           	psect	text22
  5783  002E2C                     __ptext22:
  5784                           	opt stack 0
  5785  002E2C                     _get_full_ADC:
  5786                           	opt stack 30
  5787                           
  5788                           ;Lab6pA.c: 118: int result;
  5789                           ;Lab6pA.c: 119: ADCON0bits.GO=1;
  5790                           
  5791                           ;incstack = 0
  5792  002E2C  82C2               	bsf	4034,1,c	;volatile
  5793                           
  5794                           ;Lab6pA.c: 120: while(ADCON0bits.DONE==1);
  5795  002E2E  D000               	goto	l101
  5796  002E30                     l101:
  5797  002E30  B2C2               	btfsc	4034,1,c	;volatile
  5798  002E32  D7FE               	goto	l101
  5799                           
  5800                           ;Lab6pA.c: 121: result = (ADRESH * 0x100) + ADRESL;
  5801  002E34  50C4               	movf	4036,w,c	;volatile
  5802  002E36  6E04               	movwf	(??_get_full_ADC+1)& (0+255),c
  5803  002E38  6A03               	clrf	??_get_full_ADC& (0+255),c
  5804  002E3A  50C3               	movf	4035,w,c	;volatile
  5805  002E3C  2403               	addwf	??_get_full_ADC,w,c
  5806  002E3E  6E05               	movwf	get_full_ADC@result,c
  5807  002E40  0E00               	movlw	0
  5808  002E42  2004               	addwfc	??_get_full_ADC+1,w,c
  5809  002E44  6E06               	movwf	get_full_ADC@result+1,c
  5810                           
  5811                           ;Lab6pA.c: 123: return result;
  5812  002E46  C005  F001         	movff	get_full_ADC@result,?_get_full_ADC
  5813  002E4A  C006  F002         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  5814  002E4E  D000               	goto	l104
  5815  002E50                     l104:
  5816  002E50  0012               	return		;funcret
  5817  002E52                     __end_of_get_full_ADC:
  5818                           	opt stack 0
  5819                           tblptru	equ	0xFF8
  5820                           tblptrh	equ	0xFF7
  5821                           tblptrl	equ	0xFF6
  5822                           tablat	equ	0xFF5
  5823                           prodh	equ	0xFF4
  5824                           prodl	equ	0xFF3
  5825                           postinc0	equ	0xFEE
  5826                           wreg	equ	0xFE8
  5827                           postdec1	equ	0xFE5
  5828                           fsr1l	equ	0xFE1
  5829                           postinc2	equ	0xFDE
  5830                           postdec2	equ	0xFDD
  5831                           fsr2h	equ	0xFDA
  5832                           fsr2l	equ	0xFD9
  5833                           status	equ	0xFD8
  5834                           
  5835 ;; *************** function ___ftdiv *****************
  5836 ;; Defined at:
  5837 ;;		line 54 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5838 ;; Parameters:    Size  Location     Type
  5839 ;;  f1              3   12[COMRAM] float 
  5840 ;;  f2              3   15[COMRAM] float 
  5841 ;; Auto vars:     Size  Location     Type
  5842 ;;  f3              3   22[COMRAM] float 
  5843 ;;  sign            1   26[COMRAM] unsigned char 
  5844 ;;  exp             1   25[COMRAM] unsigned char 
  5845 ;;  cntr            1   21[COMRAM] unsigned char 
  5846 ;; Return value:  Size  Location     Type
  5847 ;;                  3   12[COMRAM] float 
  5848 ;; Registers used:
  5849 ;;		wreg, status,2, status,0, cstack
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/0
  5852 ;;		On exit  : 0/0
  5853 ;;		Unchanged: 0/0
  5854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5855 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5856 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5857 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5858 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5859 ;;Total ram usage:       15 bytes
  5860 ;; Hardware stack levels used:    1
  5861 ;; Hardware stack levels required when called:    1
  5862 ;; This function calls:
  5863 ;;		___ftpack
  5864 ;; This function is called by:
  5865 ;;		_main
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868                           
  5869                           	psect	text23
  5870  0027FA                     __ptext23:
  5871                           	opt stack 0
  5872  0027FA                     ___ftdiv:
  5873                           	opt stack 29
  5874                           
  5875                           ;incstack = 0
  5876  0027FA  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  5877  0027FE  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5878  002800  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5879  002802  340E               	rlcf	___ftdiv@f1+1,w,c
  5880  002804  3613               	rlcf	??___ftdiv& (0+255),f,c
  5881  002806  E301               	bnc	u3321
  5882  002808  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5883  00280A                     u3321:
  5884  00280A  5013               	movf	??___ftdiv,w,c
  5885  00280C  6E1A               	movwf	___ftdiv@exp,c
  5886  00280E  501A               	movf	___ftdiv@exp,w,c
  5887  002810  A4D8               	btfss	status,2,c
  5888  002812  D002               	goto	l2909
  5889  002814  D00E               	goto	l2911
  5890  002816  D061               	goto	l696
  5891  002818                     l2909:
  5892  002818  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  5893  00281C  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5894  00281E  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5895  002820  3411               	rlcf	___ftdiv@f2+1,w,c
  5896  002822  3613               	rlcf	??___ftdiv& (0+255),f,c
  5897  002824  E301               	bnc	u3341
  5898  002826  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5899  002828                     u3341:
  5900  002828  5013               	movf	??___ftdiv,w,c
  5901  00282A  6E1B               	movwf	___ftdiv@sign,c
  5902  00282C  501B               	movf	___ftdiv@sign,w,c
  5903  00282E  A4D8               	btfss	status,2,c
  5904  002830  D007               	goto	l2915
  5905  002832                     l2911:
  5906  002832  0E00               	movlw	0
  5907  002834  6E0D               	movwf	?___ftdiv,c
  5908  002836  0E00               	movlw	0
  5909  002838  6E0E               	movwf	?___ftdiv+1,c
  5910  00283A  0E00               	movlw	0
  5911  00283C  6E0F               	movwf	?___ftdiv+2,c
  5912  00283E  D04D               	goto	l696
  5913  002840                     l2915:
  5914  002840  0E00               	movlw	0
  5915  002842  6E17               	movwf	___ftdiv@f3,c
  5916  002844  0E00               	movlw	0
  5917  002846  6E18               	movwf	___ftdiv@f3+1,c
  5918  002848  0E00               	movlw	0
  5919  00284A  6E19               	movwf	___ftdiv@f3+2,c
  5920  00284C  501B               	movf	___ftdiv@sign,w,c
  5921  00284E  0F89               	addlw	137
  5922  002850  5E1A               	subwf	___ftdiv@exp,f,c
  5923  002852  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  5924  002856  5012               	movf	___ftdiv@f2+2,w,c
  5925  002858  1A1B               	xorwf	___ftdiv@sign,f,c
  5926  00285A  0E80               	movlw	128
  5927  00285C  161B               	andwf	___ftdiv@sign,f,c
  5928  00285E  8E0E               	bsf	___ftdiv@f1+1,7,c
  5929  002860  0EFF               	movlw	255
  5930  002862  160D               	andwf	___ftdiv@f1,f,c
  5931  002864  0EFF               	movlw	255
  5932  002866  160E               	andwf	___ftdiv@f1+1,f,c
  5933  002868  0E00               	movlw	0
  5934  00286A  160F               	andwf	___ftdiv@f1+2,f,c
  5935  00286C  8E11               	bsf	___ftdiv@f2+1,7,c
  5936  00286E  0EFF               	movlw	255
  5937  002870  1610               	andwf	___ftdiv@f2,f,c
  5938  002872  0EFF               	movlw	255
  5939  002874  1611               	andwf	___ftdiv@f2+1,f,c
  5940  002876  0E00               	movlw	0
  5941  002878  1612               	andwf	___ftdiv@f2+2,f,c
  5942  00287A  0E18               	movlw	24
  5943  00287C  6E16               	movwf	___ftdiv@cntr,c
  5944  00287E  D000               	goto	l2935
  5945  002880                     l2935:
  5946  002880  90D8               	bcf	status,0,c
  5947  002882  3617               	rlcf	___ftdiv@f3,f,c
  5948  002884  3618               	rlcf	___ftdiv@f3+1,f,c
  5949  002886  3619               	rlcf	___ftdiv@f3+2,f,c
  5950  002888  5010               	movf	___ftdiv@f2,w,c
  5951  00288A  5C0D               	subwf	___ftdiv@f1,w,c
  5952  00288C  5011               	movf	___ftdiv@f2+1,w,c
  5953  00288E  580E               	subwfb	___ftdiv@f1+1,w,c
  5954  002890  5012               	movf	___ftdiv@f2+2,w,c
  5955  002892  580F               	subwfb	___ftdiv@f1+2,w,c
  5956  002894  A0D8               	btfss	status,0,c
  5957  002896  D007               	goto	l699
  5958  002898  5010               	movf	___ftdiv@f2,w,c
  5959  00289A  5E0D               	subwf	___ftdiv@f1,f,c
  5960  00289C  5011               	movf	___ftdiv@f2+1,w,c
  5961  00289E  5A0E               	subwfb	___ftdiv@f1+1,f,c
  5962  0028A0  5012               	movf	___ftdiv@f2+2,w,c
  5963  0028A2  5A0F               	subwfb	___ftdiv@f1+2,f,c
  5964  0028A4  8017               	bsf	___ftdiv@f3,0,c
  5965  0028A6                     l699:
  5966  0028A6  90D8               	bcf	status,0,c
  5967  0028A8  360D               	rlcf	___ftdiv@f1,f,c
  5968  0028AA  360E               	rlcf	___ftdiv@f1+1,f,c
  5969  0028AC  360F               	rlcf	___ftdiv@f1+2,f,c
  5970  0028AE  2E16               	decfsz	___ftdiv@cntr,f,c
  5971  0028B0  D7E7               	goto	l2935
  5972  0028B2  D000               	goto	l2945
  5973  0028B4                     l2945:
  5974  0028B4  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  5975  0028B8  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5976  0028BC  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5977  0028C0  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  5978  0028C4  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  5979  0028C8  EC6E  F014         	call	___ftpack	;wreg free
  5980  0028CC  C001  F00D         	movff	?___ftpack,?___ftdiv
  5981  0028D0  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  5982  0028D4  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  5983  0028D8  D000               	goto	l696
  5984  0028DA                     l696:
  5985  0028DA  0012               	return		;funcret
  5986  0028DC                     __end_of___ftdiv:
  5987                           	opt stack 0
  5988                           tblptru	equ	0xFF8
  5989                           tblptrh	equ	0xFF7
  5990                           tblptrl	equ	0xFF6
  5991                           tablat	equ	0xFF5
  5992                           prodh	equ	0xFF4
  5993                           prodl	equ	0xFF3
  5994                           postinc0	equ	0xFEE
  5995                           wreg	equ	0xFE8
  5996                           postdec1	equ	0xFE5
  5997                           fsr1l	equ	0xFE1
  5998                           postinc2	equ	0xFDE
  5999                           postdec2	equ	0xFDD
  6000                           fsr2h	equ	0xFDA
  6001                           fsr2l	equ	0xFD9
  6002                           status	equ	0xFD8
  6003                           
  6004 ;; *************** function ___awtoft *****************
  6005 ;; Defined at:
  6006 ;;		line 32 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awtoft.c"
  6007 ;; Parameters:    Size  Location     Type
  6008 ;;  c               2    8[COMRAM] int 
  6009 ;; Auto vars:     Size  Location     Type
  6010 ;;  sign            1   11[COMRAM] unsigned char 
  6011 ;; Return value:  Size  Location     Type
  6012 ;;                  3    8[COMRAM] float 
  6013 ;; Registers used:
  6014 ;;		wreg, status,2, status,0, cstack
  6015 ;; Tracked objects:
  6016 ;;		On entry : 0/0
  6017 ;;		On exit  : 0/0
  6018 ;;		Unchanged: 0/0
  6019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6020 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6023 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6024 ;;Total ram usage:        4 bytes
  6025 ;; Hardware stack levels used:    1
  6026 ;; Hardware stack levels required when called:    1
  6027 ;; This function calls:
  6028 ;;		___ftpack
  6029 ;; This function is called by:
  6030 ;;		_main
  6031 ;; This function uses a non-reentrant model
  6032 ;;
  6033                           
  6034                           	psect	text24
  6035  002D9E                     __ptext24:
  6036                           	opt stack 0
  6037  002D9E                     ___awtoft:
  6038                           	opt stack 29
  6039                           
  6040                           ;incstack = 0
  6041  002D9E  0E00               	movlw	0
  6042  002DA0  6E0C               	movwf	___awtoft@sign,c
  6043  002DA2  AE0A               	btfss	___awtoft@c+1,7,c
  6044  002DA4  D007               	goto	l2957
  6045  002DA6  6C09               	negf	___awtoft@c,c
  6046  002DA8  1E0A               	comf	___awtoft@c+1,f,c
  6047  002DAA  B0D8               	btfsc	status,0,c
  6048  002DAC  2A0A               	incf	___awtoft@c+1,f,c
  6049  002DAE  0E01               	movlw	1
  6050  002DB0  6E0C               	movwf	___awtoft@sign,c
  6051  002DB2  D000               	goto	l2957
  6052  002DB4                     l2957:
  6053  002DB4  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6054  002DB8  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6055  002DBC  6A03               	clrf	___ftpack@arg+2,c
  6056  002DBE  0E8E               	movlw	142
  6057  002DC0  6E04               	movwf	___ftpack@exp,c
  6058  002DC2  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6059  002DC6  EC6E  F014         	call	___ftpack	;wreg free
  6060  002DCA  C001  F009         	movff	?___ftpack,?___awtoft
  6061  002DCE  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6062  002DD2  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6063  002DD6  D000               	goto	l517
  6064  002DD8                     l517:
  6065  002DD8  0012               	return		;funcret
  6066  002DDA                     __end_of___awtoft:
  6067                           	opt stack 0
  6068                           tblptru	equ	0xFF8
  6069                           tblptrh	equ	0xFF7
  6070                           tblptrl	equ	0xFF6
  6071                           tablat	equ	0xFF5
  6072                           prodh	equ	0xFF4
  6073                           prodl	equ	0xFF3
  6074                           postinc0	equ	0xFEE
  6075                           wreg	equ	0xFE8
  6076                           postdec1	equ	0xFE5
  6077                           fsr1l	equ	0xFE1
  6078                           postinc2	equ	0xFDE
  6079                           postdec2	equ	0xFDD
  6080                           fsr2h	equ	0xFDA
  6081                           fsr2l	equ	0xFD9
  6082                           status	equ	0xFD8
  6083                           
  6084 ;; *************** function ___ftpack *****************
  6085 ;; Defined at:
  6086 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\float.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  arg             3    0[COMRAM] unsigned um
  6089 ;;  exp             1    3[COMRAM] unsigned char 
  6090 ;;  sign            1    4[COMRAM] unsigned char 
  6091 ;; Auto vars:     Size  Location     Type
  6092 ;;		None
  6093 ;; Return value:  Size  Location     Type
  6094 ;;                  3    0[COMRAM] float 
  6095 ;; Registers used:
  6096 ;;		wreg, status,2, status,0
  6097 ;; Tracked objects:
  6098 ;;		On entry : 0/0
  6099 ;;		On exit  : 0/0
  6100 ;;		Unchanged: 0/0
  6101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6102 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6104 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6105 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6106 ;;Total ram usage:        8 bytes
  6107 ;; Hardware stack levels used:    1
  6108 ;; This function calls:
  6109 ;;		Nothing
  6110 ;; This function is called by:
  6111 ;;		___awtoft
  6112 ;;		___ftadd
  6113 ;;		___ftdiv
  6114 ;;		___ftmul
  6115 ;;		___lltoft
  6116 ;; This function uses a non-reentrant model
  6117 ;;
  6118                           
  6119                           	psect	text25
  6120  0028DC                     __ptext25:
  6121                           	opt stack 0
  6122  0028DC                     ___ftpack:
  6123                           	opt stack 27
  6124                           
  6125                           ;incstack = 0
  6126  0028DC  5004               	movf	___ftpack@exp,w,c
  6127  0028DE  B4D8               	btfsc	status,2,c
  6128  0028E0  D005               	goto	l1993
  6129  0028E2  5001               	movf	___ftpack@arg,w,c
  6130  0028E4  1002               	iorwf	___ftpack@arg+1,w,c
  6131  0028E6  1003               	iorwf	___ftpack@arg+2,w,c
  6132  0028E8  A4D8               	btfss	status,2,c
  6133  0028EA  D00E               	goto	l1999
  6134  0028EC                     l1993:
  6135  0028EC  0E00               	movlw	0
  6136  0028EE  6E01               	movwf	?___ftpack,c
  6137  0028F0  0E00               	movlw	0
  6138  0028F2  6E02               	movwf	?___ftpack+1,c
  6139  0028F4  0E00               	movlw	0
  6140  0028F6  6E03               	movwf	?___ftpack+2,c
  6141  0028F8  D053               	goto	l624
  6142  0028FA  D006               	goto	l1999
  6143  0028FC                     l1997:
  6144  0028FC  2A04               	incf	___ftpack@exp,f,c
  6145  0028FE  90D8               	bcf	status,0,c
  6146  002900  3203               	rrcf	___ftpack@arg+2,f,c
  6147  002902  3202               	rrcf	___ftpack@arg+1,f,c
  6148  002904  3201               	rrcf	___ftpack@arg,f,c
  6149  002906  D000               	goto	l1999
  6150  002908                     l1999:
  6151  002908  0E00               	movlw	0
  6152  00290A  1401               	andwf	___ftpack@arg,w,c
  6153  00290C  6E06               	movwf	??___ftpack& (0+255),c
  6154  00290E  0E00               	movlw	0
  6155  002910  1402               	andwf	___ftpack@arg+1,w,c
  6156  002912  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6157  002914  0EFE               	movlw	254
  6158  002916  1403               	andwf	___ftpack@arg+2,w,c
  6159  002918  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6160  00291A  5006               	movf	??___ftpack,w,c
  6161  00291C  1007               	iorwf	??___ftpack+1,w,c
  6162  00291E  1008               	iorwf	??___ftpack+2,w,c
  6163  002920  B4D8               	btfsc	status,2,c
  6164  002922  D00E               	goto	l2005
  6165  002924  D7EB               	goto	l1997
  6166  002926  D00C               	goto	l2005
  6167  002928                     l2001:
  6168  002928  2A04               	incf	___ftpack@exp,f,c
  6169  00292A  0E01               	movlw	1
  6170  00292C  2601               	addwf	___ftpack@arg,f,c
  6171  00292E  0E00               	movlw	0
  6172  002930  2202               	addwfc	___ftpack@arg+1,f,c
  6173  002932  0E00               	movlw	0
  6174  002934  2203               	addwfc	___ftpack@arg+2,f,c
  6175  002936  90D8               	bcf	status,0,c
  6176  002938  3203               	rrcf	___ftpack@arg+2,f,c
  6177  00293A  3202               	rrcf	___ftpack@arg+1,f,c
  6178  00293C  3201               	rrcf	___ftpack@arg,f,c
  6179  00293E  D000               	goto	l2005
  6180  002940                     l2005:
  6181  002940  0E00               	movlw	0
  6182  002942  1401               	andwf	___ftpack@arg,w,c
  6183  002944  6E06               	movwf	??___ftpack& (0+255),c
  6184  002946  0E00               	movlw	0
  6185  002948  1402               	andwf	___ftpack@arg+1,w,c
  6186  00294A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6187  00294C  0EFF               	movlw	255
  6188  00294E  1403               	andwf	___ftpack@arg+2,w,c
  6189  002950  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6190  002952  5006               	movf	??___ftpack,w,c
  6191  002954  1007               	iorwf	??___ftpack+1,w,c
  6192  002956  1008               	iorwf	??___ftpack+2,w,c
  6193  002958  B4D8               	btfsc	status,2,c
  6194  00295A  D008               	goto	l2009
  6195  00295C  D7E5               	goto	l2001
  6196  00295E  D006               	goto	l2009
  6197  002960                     l2007:
  6198  002960  0604               	decf	___ftpack@exp,f,c
  6199  002962  90D8               	bcf	status,0,c
  6200  002964  3601               	rlcf	___ftpack@arg,f,c
  6201  002966  3602               	rlcf	___ftpack@arg+1,f,c
  6202  002968  3603               	rlcf	___ftpack@arg+2,f,c
  6203  00296A  D000               	goto	l2009
  6204  00296C                     l2009:
  6205  00296C  BE02               	btfsc	___ftpack@arg+1,7,c
  6206  00296E  D004               	goto	l635
  6207  002970  0E02               	movlw	2
  6208  002972  6004               	cpfslt	___ftpack@exp,c
  6209  002974  D7F5               	goto	l2007
  6210  002976  D000               	goto	l635
  6211  002978                     l635:
  6212  002978  B004               	btfsc	___ftpack@exp,0,c
  6213  00297A  D002               	goto	l2015
  6214  00297C  9E02               	bcf	___ftpack@arg+1,7,c
  6215  00297E  D000               	goto	l2015
  6216  002980                     l2015:
  6217  002980  90D8               	bcf	status,0,c
  6218  002982  3204               	rrcf	___ftpack@exp,f,c
  6219  002984  5004               	movf	___ftpack@exp,w,c
  6220  002986  1203               	iorwf	___ftpack@arg+2,f,c
  6221  002988  5005               	movf	___ftpack@sign,w,c
  6222  00298A  B4D8               	btfsc	status,2,c
  6223  00298C  D002               	goto	l2021
  6224  00298E  8E03               	bsf	___ftpack@arg+2,7,c
  6225  002990  D000               	goto	l2021
  6226  002992                     l2021:
  6227  002992  C001  F001         	movff	___ftpack@arg,?___ftpack
  6228  002996  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6229  00299A  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6230  00299E  D000               	goto	l624
  6231  0029A0                     l624:
  6232  0029A0  0012               	return		;funcret
  6233  0029A2                     __end_of___ftpack:
  6234                           	opt stack 0
  6235                           tblptru	equ	0xFF8
  6236                           tblptrh	equ	0xFF7
  6237                           tblptrl	equ	0xFF6
  6238                           tablat	equ	0xFF5
  6239                           prodh	equ	0xFF4
  6240                           prodl	equ	0xFF3
  6241                           postinc0	equ	0xFEE
  6242                           wreg	equ	0xFE8
  6243                           postdec1	equ	0xFE5
  6244                           fsr1l	equ	0xFE1
  6245                           postinc2	equ	0xFDE
  6246                           postdec2	equ	0xFDD
  6247                           fsr2h	equ	0xFDA
  6248                           fsr2l	equ	0xFD9
  6249                           status	equ	0xFD8
  6250                           
  6251 ;; *************** function _WAIT_HALF_SEC *****************
  6252 ;; Defined at:
  6253 ;;		line 132 in file "Lab6pA.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;		None
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;		None
  6258 ;; Return value:  Size  Location     Type
  6259 ;;		None               void
  6260 ;; Registers used:
  6261 ;;		wreg, status,2
  6262 ;; Tracked objects:
  6263 ;;		On entry : 0/0
  6264 ;;		On exit  : 0/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;Total ram usage:        0 bytes
  6272 ;; Hardware stack levels used:    1
  6273 ;; This function calls:
  6274 ;;		Nothing
  6275 ;; This function is called by:
  6276 ;;		_main
  6277 ;;		_WAIT_1_SEC
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281                           	psect	text26
  6282  002E98                     __ptext26:
  6283                           	opt stack 0
  6284  002E98                     _WAIT_HALF_SEC:
  6285                           	opt stack 30
  6286                           
  6287                           ;Lab6pA.c: 134: T0CON = 0x02;
  6288                           
  6289                           ;incstack = 0
  6290  002E98  0E02               	movlw	2
  6291  002E9A  6ED5               	movwf	4053,c	;volatile
  6292                           
  6293                           ;Lab6pA.c: 135: TMR0L = 0xDB;
  6294  002E9C  0EDB               	movlw	219
  6295  002E9E  6ED6               	movwf	4054,c	;volatile
  6296                           
  6297                           ;Lab6pA.c: 136: TMR0H = 0xB;
  6298  002EA0  0E0B               	movlw	11
  6299  002EA2  6ED7               	movwf	4055,c	;volatile
  6300                           
  6301                           ;Lab6pA.c: 137: INTCONbits.TMR0IF = 0;
  6302  002EA4  94F2               	bcf	intcon,2,c	;volatile
  6303                           
  6304                           ;Lab6pA.c: 138: T0CONbits.TMR0ON = 1;
  6305  002EA6  8ED5               	bsf	4053,7,c	;volatile
  6306                           
  6307                           ;Lab6pA.c: 139: while (INTCONbits.TMR0IF == 0);
  6308  002EA8  D000               	goto	l110
  6309  002EAA                     l110:
  6310  002EAA  A4F2               	btfss	intcon,2,c	;volatile
  6311  002EAC  D7FE               	goto	l110
  6312                           
  6313                           ;Lab6pA.c: 140: T0CONbits.TMR0ON = 0;
  6314  002EAE  9ED5               	bcf	4053,7,c	;volatile
  6315  002EB0  0012               	return		;funcret
  6316  002EB2                     __end_of_WAIT_HALF_SEC:
  6317                           	opt stack 0
  6318                           tblptru	equ	0xFF8
  6319                           tblptrh	equ	0xFF7
  6320                           tblptrl	equ	0xFF6
  6321                           tablat	equ	0xFF5
  6322                           prodh	equ	0xFF4
  6323                           prodl	equ	0xFF3
  6324                           intcon	equ	0xFF2
  6325                           postinc0	equ	0xFEE
  6326                           wreg	equ	0xFE8
  6327                           postdec1	equ	0xFE5
  6328                           fsr1l	equ	0xFE1
  6329                           postinc2	equ	0xFDE
  6330                           postdec2	equ	0xFDD
  6331                           fsr2h	equ	0xFDA
  6332                           fsr2l	equ	0xFD9
  6333                           status	equ	0xFD8
  6334                           
  6335 ;; *************** function _Select_ADC_Channel *****************
  6336 ;; Defined at:
  6337 ;;		line 111 in file "Lab6pA.c"
  6338 ;; Parameters:    Size  Location     Type
  6339 ;;  channel         1    wreg     unsigned char 
  6340 ;; Auto vars:     Size  Location     Type
  6341 ;;  channel         1    0[COMRAM] unsigned char 
  6342 ;; Return value:  Size  Location     Type
  6343 ;;		None               void
  6344 ;; Registers used:
  6345 ;;		wreg, status,2, status,0, prodl, prodh
  6346 ;; Tracked objects:
  6347 ;;		On entry : 0/0
  6348 ;;		On exit  : 0/0
  6349 ;;		Unchanged: 0/0
  6350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6352 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6354 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6355 ;;Total ram usage:        1 bytes
  6356 ;; Hardware stack levels used:    1
  6357 ;; This function calls:
  6358 ;;		Nothing
  6359 ;; This function is called by:
  6360 ;;		_main
  6361 ;; This function uses a non-reentrant model
  6362 ;;
  6363                           
  6364                           	psect	text27
  6365  002F2A                     __ptext27:
  6366                           	opt stack 0
  6367  002F2A                     _Select_ADC_Channel:
  6368                           	opt stack 30
  6369                           
  6370                           ;incstack = 0
  6371                           ;Select_ADC_Channel@channel stored from wreg
  6372  002F2A  6E01               	movwf	Select_ADC_Channel@channel,c
  6373                           
  6374                           ;Lab6pA.c: 113: ADCON0 = channel * 4 + 1;
  6375  002F2C  5001               	movf	Select_ADC_Channel@channel,w,c
  6376  002F2E  0D04               	mullw	4
  6377  002F30  28F3               	incf	prodl,w,c
  6378  002F32  6EC2               	movwf	4034,c	;volatile
  6379  002F34  0012               	return		;funcret
  6380  002F36                     __end_of_Select_ADC_Channel:
  6381                           	opt stack 0
  6382                           tblptru	equ	0xFF8
  6383                           tblptrh	equ	0xFF7
  6384                           tblptrl	equ	0xFF6
  6385                           tablat	equ	0xFF5
  6386                           prodh	equ	0xFF4
  6387                           prodl	equ	0xFF3
  6388                           intcon	equ	0xFF2
  6389                           postinc0	equ	0xFEE
  6390                           wreg	equ	0xFE8
  6391                           postdec1	equ	0xFE5
  6392                           fsr1l	equ	0xFE1
  6393                           postinc2	equ	0xFDE
  6394                           postdec2	equ	0xFDD
  6395                           fsr2h	equ	0xFDA
  6396                           fsr2l	equ	0xFD9
  6397                           status	equ	0xFD8
  6398                           
  6399 ;; *************** function _Init_TRIS *****************
  6400 ;; Defined at:
  6401 ;;		line 89 in file "Lab6pA.c"
  6402 ;; Parameters:    Size  Location     Type
  6403 ;;		None
  6404 ;; Auto vars:     Size  Location     Type
  6405 ;;		None
  6406 ;; Return value:  Size  Location     Type
  6407 ;;		None               void
  6408 ;; Registers used:
  6409 ;;		wreg, status,2
  6410 ;; Tracked objects:
  6411 ;;		On entry : 0/0
  6412 ;;		On exit  : 0/0
  6413 ;;		Unchanged: 0/0
  6414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6419 ;;Total ram usage:        0 bytes
  6420 ;; Hardware stack levels used:    1
  6421 ;; This function calls:
  6422 ;;		Nothing
  6423 ;; This function is called by:
  6424 ;;		_main
  6425 ;; This function uses a non-reentrant model
  6426 ;;
  6427                           
  6428                           	psect	text28
  6429  002EE4                     __ptext28:
  6430                           	opt stack 0
  6431  002EE4                     _Init_TRIS:
  6432                           	opt stack 30
  6433                           
  6434                           ;Lab6pA.c: 91: TRISA = 0x0F;
  6435                           
  6436                           ;incstack = 0
  6437  002EE4  0E0F               	movlw	15
  6438  002EE6  6E92               	movwf	3986,c	;volatile
  6439                           
  6440                           ;Lab6pA.c: 92: TRISB = 0x00;
  6441  002EE8  0E00               	movlw	0
  6442  002EEA  6E93               	movwf	3987,c	;volatile
  6443                           
  6444                           ;Lab6pA.c: 93: TRISC = 0x00;
  6445  002EEC  0E00               	movlw	0
  6446  002EEE  6E94               	movwf	3988,c	;volatile
  6447                           
  6448                           ;Lab6pA.c: 94: TRISD = 0x00;
  6449  002EF0  0E00               	movlw	0
  6450  002EF2  6E95               	movwf	3989,c	;volatile
  6451                           
  6452                           ;Lab6pA.c: 95: TRISE = 0x00;
  6453  002EF4  0E00               	movlw	0
  6454  002EF6  6E96               	movwf	3990,c	;volatile
  6455  002EF8  0012               	return		;funcret
  6456  002EFA                     __end_of_Init_TRIS:
  6457                           	opt stack 0
  6458                           tblptru	equ	0xFF8
  6459                           tblptrh	equ	0xFF7
  6460                           tblptrl	equ	0xFF6
  6461                           tablat	equ	0xFF5
  6462                           prodh	equ	0xFF4
  6463                           prodl	equ	0xFF3
  6464                           intcon	equ	0xFF2
  6465                           postinc0	equ	0xFEE
  6466                           wreg	equ	0xFE8
  6467                           postdec1	equ	0xFE5
  6468                           fsr1l	equ	0xFE1
  6469                           postinc2	equ	0xFDE
  6470                           postdec2	equ	0xFDD
  6471                           fsr2h	equ	0xFDA
  6472                           fsr2l	equ	0xFD9
  6473                           status	equ	0xFD8
  6474                           
  6475 ;; *************** function _Init_ADC *****************
  6476 ;; Defined at:
  6477 ;;		line 82 in file "Lab6pA.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;		None
  6480 ;; Auto vars:     Size  Location     Type
  6481 ;;		None
  6482 ;; Return value:  Size  Location     Type
  6483 ;;		None               void
  6484 ;; Registers used:
  6485 ;;		wreg, status,2
  6486 ;; Tracked objects:
  6487 ;;		On entry : 0/0
  6488 ;;		On exit  : 0/0
  6489 ;;		Unchanged: 0/0
  6490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6495 ;;Total ram usage:        0 bytes
  6496 ;; Hardware stack levels used:    1
  6497 ;; This function calls:
  6498 ;;		Nothing
  6499 ;; This function is called by:
  6500 ;;		_main
  6501 ;; This function uses a non-reentrant model
  6502 ;;
  6503                           
  6504                           	psect	text29
  6505  002F1C                     __ptext29:
  6506                           	opt stack 0
  6507  002F1C                     _Init_ADC:
  6508                           	opt stack 30
  6509                           
  6510                           ;Lab6pA.c: 84: ADCON0 = 0b00000001;
  6511                           
  6512                           ;incstack = 0
  6513  002F1C  0E01               	movlw	1
  6514  002F1E  6EC2               	movwf	4034,c	;volatile
  6515                           
  6516                           ;Lab6pA.c: 85: ADCON1 = 0b00011011;
  6517  002F20  0E1B               	movlw	27
  6518  002F22  6EC1               	movwf	4033,c	;volatile
  6519                           
  6520                           ;Lab6pA.c: 86: ADCON2 = 0b11001001;
  6521  002F24  0EC9               	movlw	201
  6522  002F26  6EC0               	movwf	4032,c	;volatile
  6523  002F28  0012               	return		;funcret
  6524  002F2A                     __end_of_Init_ADC:
  6525                           	opt stack 0
  6526                           tblptru	equ	0xFF8
  6527                           tblptrh	equ	0xFF7
  6528                           tblptrl	equ	0xFF6
  6529                           tablat	equ	0xFF5
  6530                           prodh	equ	0xFF4
  6531                           prodl	equ	0xFF3
  6532                           intcon	equ	0xFF2
  6533                           postinc0	equ	0xFEE
  6534                           wreg	equ	0xFE8
  6535                           postdec1	equ	0xFE5
  6536                           fsr1l	equ	0xFE1
  6537                           postinc2	equ	0xFDE
  6538                           postdec2	equ	0xFDD
  6539                           fsr2h	equ	0xFDA
  6540                           fsr2l	equ	0xFD9
  6541                           status	equ	0xFD8
  6542                           
  6543 ;; *************** function _BCD_Upper_Digit *****************
  6544 ;; Defined at:
  6545 ;;		line 143 in file "Lab6pA.c"
  6546 ;; Parameters:    Size  Location     Type
  6547 ;;  digit           1    wreg     unsigned char 
  6548 ;; Auto vars:     Size  Location     Type
  6549 ;;  digit           1    1[COMRAM] unsigned char 
  6550 ;;  Port_E          1    0[COMRAM] unsigned char 
  6551 ;; Return value:  Size  Location     Type
  6552 ;;		None               void
  6553 ;; Registers used:
  6554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6555 ;; Tracked objects:
  6556 ;;		On entry : 0/0
  6557 ;;		On exit  : 0/0
  6558 ;;		Unchanged: 0/0
  6559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6561 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6563 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6564 ;;Total ram usage:        2 bytes
  6565 ;; Hardware stack levels used:    1
  6566 ;; This function calls:
  6567 ;;		Nothing
  6568 ;; This function is called by:
  6569 ;;		_main
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573                           	psect	text30
  6574  002D60                     __ptext30:
  6575                           	opt stack 0
  6576  002D60                     _BCD_Upper_Digit:
  6577                           	opt stack 30
  6578                           
  6579                           ;incstack = 0
  6580                           ;BCD_Upper_Digit@digit stored from wreg
  6581  002D60  6E02               	movwf	BCD_Upper_Digit@digit,c
  6582                           
  6583                           ;Lab6pA.c: 145: PORTC = array[digit];
  6584  002D62  5002               	movf	BCD_Upper_Digit@digit,w,c
  6585  002D64  0D01               	mullw	1
  6586  002D66  0E6A               	movlw	low _array
  6587  002D68  24F3               	addwf	prodl,w,c
  6588  002D6A  6ED9               	movwf	fsr2l,c
  6589  002D6C  0E00               	movlw	high _array
  6590  002D6E  20F4               	addwfc	prodh,w,c
  6591  002D70  6EDA               	movwf	fsr2h,c
  6592  002D72  50DF               	movf	indf2,w,c
  6593  002D74  6E82               	movwf	3970,c	;volatile
  6594                           
  6595                           ;Lab6pA.c: 146: char Port_E = array[digit] & 0x40;
  6596  002D76  5002               	movf	BCD_Upper_Digit@digit,w,c
  6597  002D78  0D01               	mullw	1
  6598  002D7A  0E6A               	movlw	low _array
  6599  002D7C  24F3               	addwf	prodl,w,c
  6600  002D7E  6ED9               	movwf	fsr2l,c
  6601  002D80  0E00               	movlw	high _array
  6602  002D82  20F4               	addwfc	prodh,w,c
  6603  002D84  6EDA               	movwf	fsr2h,c
  6604  002D86  50DF               	movf	indf2,w,c
  6605  002D88  0B40               	andlw	64
  6606  002D8A  6E01               	movwf	BCD_Upper_Digit@Port_E,c
  6607                           
  6608                           ;Lab6pA.c: 147: if (Port_E == 0) PORTE = 0x00;
  6609  002D8C  5001               	movf	BCD_Upper_Digit@Port_E,w,c
  6610  002D8E  A4D8               	btfss	status,2,c
  6611  002D90  D002               	goto	l1875
  6612  002D92  0E00               	movlw	0
  6613  002D94  D001               	goto	L8
  6614  002D96                     l1875:
  6615                           
  6616                           ;Lab6pA.c: 148: else PORTE = 0x01;
  6617  002D96  0E01               	movlw	1
  6618  002D98                     L8:
  6619  002D98  6E84               	movwf	3972,c	;volatile
  6620  002D9A  D000               	goto	l118
  6621  002D9C                     l118:
  6622  002D9C  0012               	return		;funcret
  6623  002D9E                     __end_of_BCD_Upper_Digit:
  6624                           	opt stack 0
  6625                           tblptru	equ	0xFF8
  6626                           tblptrh	equ	0xFF7
  6627                           tblptrl	equ	0xFF6
  6628                           tablat	equ	0xFF5
  6629                           prodh	equ	0xFF4
  6630                           prodl	equ	0xFF3
  6631                           intcon	equ	0xFF2
  6632                           postinc0	equ	0xFEE
  6633                           wreg	equ	0xFE8
  6634                           postdec1	equ	0xFE5
  6635                           fsr1l	equ	0xFE1
  6636                           indf2	equ	0xFDF
  6637                           postinc2	equ	0xFDE
  6638                           postdec2	equ	0xFDD
  6639                           fsr2h	equ	0xFDA
  6640                           fsr2l	equ	0xFD9
  6641                           status	equ	0xFD8
  6642                           
  6643 ;; *************** function _BCD_Lower_Digit *****************
  6644 ;; Defined at:
  6645 ;;		line 151 in file "Lab6pA.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;  digit           1    wreg     unsigned char 
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;  digit           1    0[COMRAM] unsigned char 
  6650 ;; Return value:  Size  Location     Type
  6651 ;;		None               void
  6652 ;; Registers used:
  6653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 0/0
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6660 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6662 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6663 ;;Total ram usage:        1 bytes
  6664 ;; Hardware stack levels used:    1
  6665 ;; This function calls:
  6666 ;;		Nothing
  6667 ;; This function is called by:
  6668 ;;		_main
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672                           	psect	text31
  6673  002EB2                     __ptext31:
  6674                           	opt stack 0
  6675  002EB2                     _BCD_Lower_Digit:
  6676                           	opt stack 30
  6677                           
  6678                           ;incstack = 0
  6679                           ;BCD_Lower_Digit@digit stored from wreg
  6680  002EB2  6E01               	movwf	BCD_Lower_Digit@digit,c
  6681                           
  6682                           ;Lab6pA.c: 153: PORTD = array[digit];
  6683  002EB4  5001               	movf	BCD_Lower_Digit@digit,w,c
  6684  002EB6  0D01               	mullw	1
  6685  002EB8  0E6A               	movlw	low _array
  6686  002EBA  24F3               	addwf	prodl,w,c
  6687  002EBC  6ED9               	movwf	fsr2l,c
  6688  002EBE  0E00               	movlw	high _array
  6689  002EC0  20F4               	addwfc	prodh,w,c
  6690  002EC2  6EDA               	movwf	fsr2h,c
  6691  002EC4  50DF               	movf	indf2,w,c
  6692  002EC6  6E83               	movwf	3971,c	;volatile
  6693                           
  6694                           ;Lab6pA.c: 154: PORTDbits.RD7 = 1;
  6695  002EC8  8E83               	bsf	3971,7,c	;volatile
  6696  002ECA  0012               	return		;funcret
  6697  002ECC                     __end_of_BCD_Lower_Digit:
  6698                           	opt stack 0
  6699                           tblptru	equ	0xFF8
  6700                           tblptrh	equ	0xFF7
  6701                           tblptrl	equ	0xFF6
  6702                           tablat	equ	0xFF5
  6703                           prodh	equ	0xFF4
  6704                           prodl	equ	0xFF3
  6705                           intcon	equ	0xFF2
  6706                           postinc0	equ	0xFEE
  6707                           wreg	equ	0xFE8
  6708                           postdec1	equ	0xFE5
  6709                           fsr1l	equ	0xFE1
  6710                           indf2	equ	0xFDF
  6711                           postinc2	equ	0xFDE
  6712                           postdec2	equ	0xFDD
  6713                           fsr2h	equ	0xFDA
  6714                           fsr2l	equ	0xFD9
  6715                           status	equ	0xFD8
  6716                           
  6717 ;; *************** function _BCD_DP *****************
  6718 ;; Defined at:
  6719 ;;		line 157 in file "Lab6pA.c"
  6720 ;; Parameters:    Size  Location     Type
  6721 ;;  dp              1    wreg     unsigned char 
  6722 ;; Auto vars:     Size  Location     Type
  6723 ;;  dp              1    1[COMRAM] unsigned char 
  6724 ;; Return value:  Size  Location     Type
  6725 ;;		None               void
  6726 ;; Registers used:
  6727 ;;		wreg, status,2, status,0
  6728 ;; Tracked objects:
  6729 ;;		On entry : 0/0
  6730 ;;		On exit  : 0/0
  6731 ;;		Unchanged: 0/0
  6732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6734 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6735 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6736 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6737 ;;Total ram usage:        2 bytes
  6738 ;; Hardware stack levels used:    1
  6739 ;; This function calls:
  6740 ;;		Nothing
  6741 ;; This function is called by:
  6742 ;;		_main
  6743 ;; This function uses a non-reentrant model
  6744 ;;
  6745                           
  6746                           	psect	text32
  6747  002ECC                     __ptext32:
  6748                           	opt stack 0
  6749  002ECC                     _BCD_DP:
  6750                           	opt stack 30
  6751                           
  6752                           ;incstack = 0
  6753                           ;BCD_DP@dp stored from wreg
  6754  002ECC  6E02               	movwf	BCD_DP@dp,c
  6755                           
  6756                           ;Lab6pA.c: 159: PORTDbits.RD7 = ~dp;
  6757  002ECE  5002               	movf	BCD_DP@dp,w,c
  6758  002ED0  0AFF               	xorlw	255
  6759  002ED2  6E01               	movwf	??_BCD_DP& (0+255),c
  6760  002ED4  3201               	rrcf	??_BCD_DP,f,c
  6761  002ED6  3201               	rrcf	??_BCD_DP,f,c
  6762  002ED8  5083               	movf	3971,w,c	;volatile
  6763  002EDA  1801               	xorwf	??_BCD_DP,w,c
  6764  002EDC  0B7F               	andlw	-129
  6765  002EDE  1801               	xorwf	??_BCD_DP,w,c
  6766  002EE0  6E83               	movwf	3971,c	;volatile
  6767  002EE2  0012               	return		;funcret
  6768  002EE4                     __end_of_BCD_DP:
  6769                           	opt stack 0
  6770                           tblptru	equ	0xFF8
  6771                           tblptrh	equ	0xFF7
  6772                           tblptrl	equ	0xFF6
  6773                           tablat	equ	0xFF5
  6774                           prodh	equ	0xFF4
  6775                           prodl	equ	0xFF3
  6776                           intcon	equ	0xFF2
  6777                           postinc0	equ	0xFEE
  6778                           wreg	equ	0xFE8
  6779                           postdec1	equ	0xFE5
  6780                           fsr1l	equ	0xFE1
  6781                           indf2	equ	0xFDF
  6782                           postinc2	equ	0xFDE
  6783                           postdec2	equ	0xFDD
  6784                           fsr2h	equ	0xFDA
  6785                           fsr2l	equ	0xFD9
  6786                           status	equ	0xFD8
  6787                           tblptru	equ	0xFF8
  6788                           tblptrh	equ	0xFF7
  6789                           tblptrl	equ	0xFF6
  6790                           tablat	equ	0xFF5
  6791                           prodh	equ	0xFF4
  6792                           prodl	equ	0xFF3
  6793                           intcon	equ	0xFF2
  6794                           postinc0	equ	0xFEE
  6795                           wreg	equ	0xFE8
  6796                           postdec1	equ	0xFE5
  6797                           fsr1l	equ	0xFE1
  6798                           indf2	equ	0xFDF
  6799                           postinc2	equ	0xFDE
  6800                           postdec2	equ	0xFDD
  6801                           fsr2h	equ	0xFDA
  6802                           fsr2l	equ	0xFD9
  6803                           status	equ	0xFD8
  6804                           
  6805                           	psect	rparam
  6806  0000                     tblptru	equ	0xFF8
  6807                           tblptrh	equ	0xFF7
  6808                           tblptrl	equ	0xFF6
  6809                           tablat	equ	0xFF5
  6810                           prodh	equ	0xFF4
  6811                           prodl	equ	0xFF3
  6812                           intcon	equ	0xFF2
  6813                           postinc0	equ	0xFEE
  6814                           wreg	equ	0xFE8
  6815                           postdec1	equ	0xFE5
  6816                           fsr1l	equ	0xFE1
  6817                           indf2	equ	0xFDF
  6818                           postinc2	equ	0xFDE
  6819                           postdec2	equ	0xFDD
  6820                           fsr2h	equ	0xFDA
  6821                           fsr2l	equ	0xFD9
  6822                           status	equ	0xFD8


Data Sizes:
    Strings     34
    Constant    118
    Data        10
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    105     115
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_2(CODE[11]), STR_1(CODE[23]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awmod
    ___ftmul->___wmul
    ___awmod->___awdiv
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _init_UART->_OpenUSART
    ___ftdiv->___awtoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   54429
                                             99 COMRAM     6     6      0
                             _BCD_DP
                    _BCD_Lower_Digit
                    _BCD_Upper_Digit
                           _Init_ADC
                          _Init_TRIS
                 _Select_ADC_Channel
                      _WAIT_HALF_SEC
                            ___awdiv
                            ___awmod
                           ___awtoft
                            ___ftdiv
                       _get_full_ADC
                          _init_UART
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   45453
                                             63 COMRAM    36    31      5
                            ___awdiv
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   10821
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   10623
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2463
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4329
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1576
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1964
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     671
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     546
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     444
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3604
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3307
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     520
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     284
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     284
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2619
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2264
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _WAIT_HALF_SEC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Select_ADC_Channel                                   1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_TRIS                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BCD_Upper_Digit                                      2     2      0      45
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _BCD_Lower_Digit                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _BCD_DP                                               2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BCD_DP
   _BCD_Lower_Digit
   _BCD_Upper_Digit
   _Init_ADC
   _Init_TRIS
   _Select_ADC_Channel
   _WAIT_HALF_SEC
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   _get_full_ADC
   _init_UART
     _OpenUSART
   _printf
     ___awdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftpack
       _fround (ARG)
         ___awdiv
         ___awmod
           ___awdiv (ARG)
         ___ftmul
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___awmod (ARG)
               ___awdiv (ARG)
         ___wmul
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awmod (ARG)
         ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
           ___awmod
             ___awdiv (ARG)
           ___ftmul
             ___awdiv (ARG)
             ___awmod (ARG)
               ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___awmod (ARG)
                 ___awdiv (ARG)
           ___wmul
             ___awdiv (ARG)
             ___awmod (ARG)
               ___awdiv (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
       _scale (ARG)
         ___awdiv
         ___awmod
           ___awdiv (ARG)
         ___ftmul
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___awmod (ARG)
               ___awdiv (ARG)
         ___wmul
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
       ___awmod (ARG)
         ___awdiv (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
       ___wmul
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
     _isdigit (ARG)
     _putch (ARG)
     _scale (ARG)
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
       ___wmul
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     69      73       1       90.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      73      34        0.0%
DATA                 0      0      73       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Oct 16 23:12:26 2022

                         l92 2F12                 ___awdiv@sign 0006          ___wmul@multiplicand 0011  
               ___ftadd@exp1 0039                 ___ftadd@exp2 0038                 ___ftadd@sign 0037  
                        l101 2E30                          l110 2EAA                          l104 2E50  
                        l118 2D9C                          l153 1ED4                          l146 2118  
                        l226 1706                          l263 1AF4                          l505 2BDA  
                        l291 2C92                          l292 2C94                          l517 2DD8  
                        l293 2C9E                          l294 2CA0                          l287 2C78  
                        l624 29A0                          l296 2CBA                          l704 2510  
                        l713 2500                          l722 2ACC                          l706 2478  
                        l635 2978                          l803 2C3A                          l707 24A0  
                        l299 2E2A                          l492 2A36                          l823 2D1A  
                        l583 261A                          l664 215E                          l592 260A  
                        l728 2712                          l665 22DC                          l745 2D5E  
                        l738 2E68                          l668 2188                          l764 2E96  
                        l749 27F8                          l679 224A                          l696 28DA  
                        l688 2266                          l793 2B48                          l699 28A6  
               ___awmod@sign 000E                          prod 000FF3                          wreg 000FE8  
               __CFG_LVP$OFF 000000                 ___ftdiv@cntr 0016                 ___ftdiv@sign 001B  
               __CFG_WDT$OFF 000000                         l2001 2928                         l2021 2992  
                       l2005 2940                         l2015 2980                         l2007 2960  
                       l2009 296C                         l2201 2B70                         l2113 2662  
                       l2051 21A2                         l2211 2B96                         l2131 26A8  
                       l2107 263A                         l2061 21CA                         l2045 2196  
                       l2213 2B9E                         l2221 2BC0                         l2205 2B7E  
                       l2141 26D6                         l2109 2654                         l2301 20D8  
                       l2071 2206                         l2039 216C                         l2135 26BE  
                       l2127 2696                         l2081 223E                         l2073 220E  
                       l2401 24D2                         l2225 2BD0                         l2217 2BB4  
                       l2209 2B8C                         l2145 26EC                         l2137 26C4  
                       l2321 1CCA                         l2243 2C70                         l2235 2C5E  
                       l2067 21EE                         l2403 24D8                         l2171 29EA  
                       l2163 29CA                         l2315 1C22                         l2069 21FA  
                       l2181 2A10                         l2173 29F2                         l2157 29B8  
                       l2333 1DFE                         l2325 1CDA                         l2255 2C8A  
                       l2247 2C7C                         l2239 2C68                         l2087 2284  
                       l2079 2232                         l2423 2532                         l2407 24EC  
                       l2351 2E8E                         l2097 22B6                         l2417 2522  
                       l2409 24FA                         l2361 2420                         l2169 29E0  
                       l2185 2A1C                         l2531 27A2                         l2507 2732  
                       l2339 1EB0                         l2525 278C                         l2461 25DC  
                       l2445 25A8                         l2437 2576                         l2189 2A2C  
                       l2293 2014                         l2701 13A8                         l2621 10EA  
                       l2613 10B8                         l2543 27E6                         l2535 27B6  
                       l2463 25E2                         l2367 243E                         l2711 1420  
                       l2703 13D8                         l2615 10CA                         l2537 27C4  
                       l2529 279C                         l2553 2AF0                         l2457 25CC  
                       l2449 25B8                         l2801 1776                         l2721 1490  
                       l2705 13E8                         l2625 1108                         l2633 1168  
                       l2609 10A6                         l2483 2A6A                         l2475 2D34  
                       l2539 27CE                         l2555 2AFE                         l2467 25F6  
                       l2731 1536                         l2723 14BE                         l2715 1444  
                       l2643 11C2                         l2619 10D4                         l2493 2AC8  
                       l2565 2B38                         l2557 2B06                         l2581 2C2A  
                       l2573 2BEE                         l2469 2604                         l2397 24C2  
                       l2389 24AE                         l2813 1866                         l2717 144E  
                       l2725 14CC                         l2661 123A                         l2653 11F4  
                       l2645 11DA                         l2901 1AD6                         l2911 2832  
                       l2487 2A9C                         l2575 2BFC                         l2831 18C8  
                       l2807 184C                         l2751 15C4                         l2743 1576  
                       l2735 1542                         l2671 127C                         l2815 1872  
                       l2655 1224                         l2639 118A                         l2577 2C04  
                       l2841 1908                         l2833 18CC                         l2825 18AE  
                       l2809 1858                         l2761 15F2                         l2729 1532  
                       l2649 11EA                         l1875 2D96                         l2915 2840  
                       l2587 2CC2                         l2763 1606                         l2747 15A8  
                       l2739 1572                         l2909 2818                         l2589 2CD0  
                       l2853 194A                         l2845 190C                         l2837 18D8  
                       l2781 16D4                         l2773 163E                         l2757 15E4  
                       l2935 2880                         l2871 19BE                         l2791 170C  
                       l2767 1614                         l2695 1372                         l2687 130E  
                       l1993 28EC                         l2945 28B4                         l2881 19F0  
                       l2873 19C8                         l2865 1990                         l2849 1928  
                       l2785 16E2                         l2769 1622                         l2891 1A28  
                       l2867 199A                         l2859 196E                         l2787 16F0  
                       l2779 16C8                         l2699 1398                         l1997 28FC  
                       l2957 2DB4                         l2885 1A08                         l2797 1726  
                       l1999 2908                         l2895 1A44                         l2887 1A10  
                       l2879 19E8                         l2991 23C2                         l2993 23F2  
                       l2977 2300                         l2899 1AC2                         l2989 23A6  
                       STR_1 1077                         STR_2 108E                         u2001 262C  
                       u2021 264A                         u2401 2430                         u3060 1700  
                       u3321 280A                         u1801 213E                         u2610 2750  
                       u3341 2828                         u2381 2412                         u2615 2748  
               printf@tmpval 0050                         u1791 212A                         u2591 2724  
                       u2840 12B4                         u2845 12AA                         _TRMT 007D61  
                       _main 22DE                 ___ftpack@arg 0001                 ___ftpack@exp 0004  
             ??_get_full_ADC 0003                         fsr2h 000FDA                         fsr1l 000FE1  
                       indf2 000FDF                         fsr2l 000FD9                         prodh 000FF4  
                       prodl 000FF3                         start 0000                 ___ftmul@cntr 0022  
               ___param_bank 000010                 ___ftmul@sign 0023                 ___fttol@exp1 0039  
               ___fttol@lval 0035                        ?_main 0001              __end_of___awdiv 2A38  
            __end_of___ftadd 22DE              __end_of___awmod 2BDC              __end_of___ftdiv 28DC  
            __end_of___ftneg 2E76              __end_of___lldiv 2B5A              __end_of___ftmul 2714  
                      _T0CON 000FD5              ___awdiv@divisor 0003              __end_of___llmod 2C4C  
            __end_of___ftsub 2D60              __end_of___fttol 27FA              ___awdiv@counter 0005  
                      _RCSTA 000FAB                        _TMR0H 000FD7                        _TMR0L 000FD6  
                      _SPBRG 000FAF                        _PORTB 000F81                        _PORTC 000F82  
                      _PORTD 000F83                        _PORTE 000F84                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                        _TXREG 000FAD                        _TXSTA 000FAC  
               ___lltoft@exp 0011                ___awtoft@sign 000C              __end_of_dpowers 1029  
                      _array 006A                        _scale 1AF6              __end_of_isdigit 2E98  
              ___ftpack@sign 0005                        _putch 2F0E                 main@num_step 0066  
             __CFG_BOREN$OFF 000000                        tablat 000FF5                        status 000FD8  
   __size_of_BCD_Upper_Digit 003E              __initialization 2DDA        __end_of_WAIT_HALF_SEC 2EB2  
               __end_of_main 2402             __end_of_Init_ADC 2F2A            ??_BCD_Lower_Digit 0001  
                     ??_main 0064                ___fttol@sign1 0034                __activetblptr 000002  
       __size_of__tdiv_to_l_ 0110                       _ADCON0 000FC2                       _ADCON1 000FC1  
                     _ADCON2 000FC0                       _BCD_DP 2ECC             ___llmod@dividend 000E  
                     ?_scale 0024                       _ADRESH 000FC4                       _ADRESL 000FC3  
           ___awdiv@dividend 0001             __end_of___awtoft 2DDA                       ?_putch 0001  
           __end_of___ftpack 29A2             __end_of___lltoft 2D1C                       _OSCCON 000FD3  
         __size_of_Init_TRIS 0016                       _SPBRGH 000FB0             __end_of__powers_ 1077  
         __size_of_OpenUSART 0070                       ___ftge 2A38                       ___wmul 2E04  
                  ??___awdiv 0005                    ??___ftadd 0034                    ??___awmod 000D  
                  ??___ftdiv 0013                    ??___ftneg 0004                    ??___lldiv 0009  
                  ??___ftmul 001B                    ??___llmod 0016                    ??___ftsub 0040  
                  ??___fttol 002F                       _fround 1ED6             ___awdiv@quotient 0007  
            ___awmod@divisor 000B              ___awmod@counter 000D                       _printf 109A  
      ___ftmul@f3_as_product 001F         __end_of_get_full_ADC 2E52                 __pdataCOMRAM 006A  
                  ??_isdigit 0001                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                       putch@c 0001  
                 __accesstop 0080      __end_of__initialization 2DFA                   ___ftadd@f1 002E  
                 ___ftadd@f2 0031                   ___ftge@ff1 0001                   ___ftge@ff2 0004  
              ___rparam_used 000001                   ___ftdiv@f1 000D                   ___ftdiv@f2 0010  
                 ___ftdiv@f3 0017                   ___ftneg@f1 0001                   ___awtoft@c 0009  
                 ___ftmul@f1 0015                   ___ftmul@f2 0018                   ___ftsub@f1 003A  
                 ___ftsub@f2 003D                   ___fttol@f1 002B               __pcstackCOMRAM 0001  
                 ___lltoft@c 0009            ??_BCD_Upper_Digit 0001                __end_of_scale 1ED6  
              __end_of_putch 2F1C            __end_of_Init_TRIS 2EFA                   __div_to_l_ 2512  
          __end_of_OpenUSART 2CBC              __div_to_l_@exp1 000C              __div_to_l_@cntr 000B  
                    ?_BCD_DP 0001                      ??_scale 0027              __div_to_l_@quot 0007  
                    ??_putch 0001                    ?_Init_ADC 0001           __size_of_init_UART 0014  
 __end_of_Select_ADC_Channel 2F36                __div_to_l_@f1 0001                __div_to_l_@f2 0004  
                    ?___ftge 0001                      ?___wmul 000F                      ?_fround 0024  
                  ?___awtoft 0009                    ?___ftpack 0001                      ?_printf 0040  
  Select_ADC_Channel@channel 0001                    ?___lltoft 0009              __size_of_BCD_DP 0018  
                 ??_Init_ADC 0001              _BCD_Lower_Digit 2EB2            __end_of__npowers_ 1050  
                    __Hparam 0000                   _scale$1263 0027                      __Lparam 0000  
            __size_of___ftge 0096                      ___awdiv 29A2                      ___ftadd 211A  
                    ___awmod 2B5A                      ___ftdiv 27FA                      ___ftneg 2E52  
                    ___lldiv 2ACE              __size_of___wmul 0028                      ___ftmul 261C  
                    ___llmod 2BDC                      ___ftsub 2D1C                      ___fttol 2714  
      __size_of_get_full_ADC 0026                 __psmallconst 1000                      __pcinit 2DDA  
                 ??___awtoft 000C                   ??___ftpack 0006              __size_of_fround 0244  
                    __ramtop 1000                   ??___lltoft 000D                      __ptext0 22DE  
                    __ptext1 109A                      __ptext2 1AF6                      __ptext3 2F0E  
                    __ptext4 2E76                      __ptext5 1ED6                      __ptext6 2E04  
                    __ptext7 261C                      __ptext8 2B5A                      __ptext9 29A2  
            __size_of_printf 0A5C            __end_of_init_UART 2F0E                    _T0CONbits 000FD5  
                ?__div_to_l_ 0001                      _dpowers 1001                      _isdigit 2E76  
           ___awmod@dividend 0009         end_of_initialization 2DFA         BCD_Lower_Digit@digit 0001  
              __Lmediumconst 0000                 _get_full_ADC 2E2C              ___lldiv@divisor 0005  
            ___lldiv@counter 000D                    _RCSTAbits 000FAB                      printf@c 0063  
                    printf@f 0040                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE               __tdiv_to_l_@f1 0001  
             __tdiv_to_l_@f2 0004                ??__tdiv_to_l_ 0007                    _PORTDbits 000F83  
                  _TRISCbits 000F94               main@voltage_mv 0068      __end_of_BCD_Lower_Digit 2ECC  
     __size_of_WAIT_HALF_SEC 001A               __end_of_BCD_DP 2EE4              _BCD_Upper_Digit 2D60  
                ___ftdiv@exp 001A                  printf@width 005C                    _TXSTAbits 000FAC  
         get_full_ADC@result 0005          __size_of__div_to_l_ 010A                  ___ftmul@exp 001E  
             __end_of___ftge 2ACE               __end_of___wmul 2E2C                __pidataCOMRAM 2F36  
             __end_of_fround 211A               __end_of_printf 1AF6          start_initialization 2DDA  
                  _Init_TRIS 2EE4          __end_of__tdiv_to_l_ 2512                     ??_BCD_DP 0001  
                   BCD_DP@dp 0002                    _OpenUSART 2C4C              ___llmod@divisor 0012  
           __CFG_OSC$INTIO67 000000            __size_of_Init_ADC 000E              ___llmod@counter 0016  
                   ??___ftge 0007                     ??___wmul 0013                _WAIT_HALF_SEC 2E98  
         _Select_ADC_Channel 2F2A                     ??_fround 0027                     ??_printf 0045  
                 fround@prec 002D            __size_of___awtoft 003C            __size_of___ftpack 00C6  
        ?_Select_ADC_Channel 0001            __size_of___lltoft 0060                   ?_Init_TRIS 0001  
    __end_of_BCD_Upper_Digit 2D9E                 _isdigit$1032 0002             ?_BCD_Lower_Digit 0001  
                 ?_OpenUSART 0001         ??_Select_ADC_Channel 0001               ?_WAIT_HALF_SEC 0001  
                   ?___awdiv 0001                     ?___ftadd 002E                     ?___awmod 0009  
                   ?___ftdiv 000D                     ?___ftneg 0001                     ?___lldiv 0001  
                   ?___ftmul 0015                     ?___llmod 000E                     ?___ftsub 003A  
      BCD_Upper_Digit@Port_E 0001                    __npowers_ 1029                     ?___fttol 002B  
                __tdiv_to_l_ 2402                 ??__div_to_l_ 0007                  __smallconst 1000  
                   ?_isdigit 0001                    _init_UART 2EFA               __size_of_scale 03E0  
             __size_of_putch 000E               ___wmul@product 0013                     _PIE1bits 000F9D  
                   _PIR1bits 000F9E           __end_of__div_to_l_ 261C                   _ADCON0bits 000FC2  
          ___wmul@multiplier 000F                   printf@flag 005A                   printf@fval 005E  
                 printf@prec 0061                  ??_Init_TRIS 0001                   ?_init_UART 0001  
           ?_BCD_Upper_Digit 0001                    copy_data0 2DEE                     _Init_ADC 2F1C  
                ??_OpenUSART 0003              OpenUSART@config 0003                     __Hrparam 0000  
            ??_WAIT_HALF_SEC 0001                     __Lrparam 0000             __size_of___awdiv 0096  
           __size_of___ftadd 01C4             __size_of___awmod 0082             __size_of___ftdiv 00E2  
           __size_of___ftneg 0024             __size_of___lldiv 008C             __size_of___ftmul 00F8  
           __size_of___llmod 0070             __size_of___ftsub 0044             __size_of___fttol 00E6  
                   ___awtoft 2D9E                     ___ftpack 28DC                  _fround$1261 002A  
                _fround$1262 0027                     ___lltoft 2CBC             __size_of_isdigit 0022  
                   __ptext10 2402                     __ptext11 2512                     __ptext20 2EFA  
                   __ptext12 2CBC                     __ptext21 2C4C                     __ptext13 2BDC  
                   __ptext30 2D60                     __ptext22 2E2C                     __ptext14 2ACE  
                   __ptext31 2EB2                     __ptext23 27FA                     __ptext15 2714  
                   __ptext32 2ECC                     __ptext24 2D9E                     __ptext16 2D1C  
                   __ptext25 28DC                     __ptext17 211A                     __ptext26 2E98  
                   __ptext18 2E52                     __ptext27 2F2A                     __ptext19 2A38  
                   __ptext28 2EE4                     __ptext29 2F1C                     __powers_ 1050  
       BCD_Upper_Digit@digit 0002                __size_of_main 0124                    printf@exp 0058  
                  printf@val 0054                   _INTCONbits 000FF2               OpenUSART@spbrg 0001  
                ??_init_UART 0004                     isdigit@c 0003                     scale@scl 002A  
           __tdiv_to_l_@exp1 000F             __tdiv_to_l_@cntr 000E             __tdiv_to_l_@quot 000A  
           ___lldiv@dividend 0001                     printf@ap 004E                 ?__tdiv_to_l_ 0001  
                _printf$1264 004B             ___lldiv@quotient 0009                ?_get_full_ADC 0001  
   __size_of_BCD_Lower_Digit 001A  __size_of_Select_ADC_Channel 000C  
