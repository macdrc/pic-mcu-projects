

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Oct 18 14:02:11 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    45  0000                     
    46                           	psect	idataCOMRAM
    47  002DF4                     __pidataCOMRAM:
    48                           	opt stack 0
    49                           
    50                           ;initializer for _array
    51  002DF4  40                 	db	64
    52  002DF5  79                 	db	121
    53  002DF6  24                 	db	36
    54  002DF7  30                 	db	48
    55  002DF8  19                 	db	25
    56  002DF9  12                 	db	18
    57  002DFA  02                 	db	2
    58  002DFB  78                 	db	120
    59  002DFC  00                 	db	0
    60  002DFD  10                 	db	16
    61                           
    62                           	psect	smallconst
    63  001000                     __psmallconst:
    64                           	opt stack 0
    65  001000  00                 	db	0
    66  001001                     _dpowers:
    67                           	opt stack 0
    68  001001  0001               	dw	1
    69  001003  0000               	dw	0
    70  001005  000A               	dw	10
    71  001007  0000               	dw	0
    72  001009  0064               	dw	100
    73  00100B  0000               	dw	0
    74  00100D  03E8               	dw	1000
    75  00100F  0000               	dw	0
    76  001011  2710               	dw	10000
    77  001013  0000               	dw	0
    78  001015  86A0               	dw	34464
    79  001017  0001               	dw	1
    80  001019  4240               	dw	16960
    81  00101B  000F               	dw	15
    82  00101D  9680               	dw	38528
    83  00101F  0098               	dw	152
    84  001021  E100               	dw	57600
    85  001023  05F5               	dw	1525
    86  001025  CA00               	dw	51712
    87  001027  3B9A               	dw	15258
    88  001029                     __end_of_dpowers:
    89                           	opt stack 0
    90  001029                     __npowers_:
    91                           	opt stack 0
    92  001029  00                 	db	0
    93  00102A  80                 	db	128
    94  00102B  3F                 	db	63
    95  00102C  CD                 	db	205
    96  00102D  CC                 	db	204
    97  00102E  3D                 	db	61
    98  00102F  D7                 	db	215
    99  001030  23                 	db	35
   100  001031  3C                 	db	60
   101  001032  12                 	db	18
   102  001033  83                 	db	131
   103  001034  3A                 	db	58
   104  001035  B7                 	db	183
   105  001036  D1                 	db	209
   106  001037  38                 	db	56
   107  001038  C6                 	db	198
   108  001039  27                 	db	39
   109  00103A  37                 	db	55
   110  00103B  38                 	db	56
   111  00103C  86                 	db	134
   112  00103D  35                 	db	53
   113  00103E  C0                 	db	192
   114  00103F  D6                 	db	214
   115  001040  33                 	db	51
   116  001041  CC                 	db	204
   117  001042  2B                 	db	43
   118  001043  32                 	db	50
   119  001044  70                 	db	112
   120  001045  89                 	db	137
   121  001046  30                 	db	48
   122  001047  E7                 	db	231
   123  001048  DB                 	db	219
   124  001049  2E                 	db	46
   125  00104A  E5                 	db	229
   126  00104B  3C                 	db	60
   127  00104C  1E                 	db	30
   128  00104D  42                 	db	66
   129  00104E  A2                 	db	162
   130  00104F  0D                 	db	13
   131  001050                     __end_of__npowers_:
   132                           	opt stack 0
   133  001050                     __powers_:
   134                           	opt stack 0
   135  001050  00                 	db	0
   136  001051  80                 	db	128
   137  001052  3F                 	db	63
   138  001053  00                 	db	0
   139  001054  20                 	db	32
   140  001055  41                 	db	65
   141  001056  00                 	db	0
   142  001057  C8                 	db	200
   143  001058  42                 	db	66
   144  001059  00                 	db	0
   145  00105A  7A                 	db	122
   146  00105B  44                 	db	68
   147  00105C  40                 	db	64
   148  00105D  1C                 	db	28
   149  00105E  46                 	db	70
   150  00105F  50                 	db	80
   151  001060  C3                 	db	195
   152  001061  47                 	db	71
   153  001062  24                 	db	36
   154  001063  74                 	db	116
   155  001064  49                 	db	73
   156  001065  97                 	db	151
   157  001066  18                 	db	24
   158  001067  4B                 	db	75
   159  001068  BC                 	db	188
   160  001069  BE                 	db	190
   161  00106A  4C                 	db	76
   162  00106B  6B                 	db	107
   163  00106C  6E                 	db	110
   164  00106D  4E                 	db	78
   165  00106E  03                 	db	3
   166  00106F  15                 	db	21
   167  001070  50                 	db	80
   168  001071  79                 	db	121
   169  001072  AD                 	db	173
   170  001073  60                 	db	96
   171  001074  F3                 	db	243
   172  001075  49                 	db	73
   173  001076  71                 	db	113
   174  001077                     __end_of__powers_:
   175                           	opt stack 0
   176  0000                     _ADCON0	set	4034
   177  0000                     _ADCON0bits	set	4034
   178  0000                     _ADCON1	set	4033
   179  0000                     _ADCON2	set	4032
   180  0000                     _ADRESH	set	4036
   181  0000                     _ADRESL	set	4035
   182  0000                     _INTCONbits	set	4082
   183  0000                     _OSCCON	set	4051
   184  0000                     _PIE1bits	set	3997
   185  0000                     _PIR1bits	set	3998
   186  0000                     _PORTB	set	3969
   187  0000                     _PORTC	set	3970
   188  0000                     _PORTD	set	3971
   189  0000                     _PORTDbits	set	3971
   190  0000                     _PORTE	set	3972
   191  0000                     _RCSTA	set	4011
   192  0000                     _RCSTAbits	set	4011
   193  0000                     _SPBRG	set	4015
   194  0000                     _SPBRGH	set	4016
   195  0000                     _T0CON	set	4053
   196  0000                     _T0CONbits	set	4053
   197  0000                     _TMR0H	set	4055
   198  0000                     _TMR0L	set	4054
   199  0000                     _TRISA	set	3986
   200  0000                     _TRISB	set	3987
   201  0000                     _TRISC	set	3988
   202  0000                     _TRISCbits	set	3988
   203  0000                     _TRISD	set	3989
   204  0000                     _TRISE	set	3990
   205  0000                     _TXREG	set	4013
   206  0000                     _TXSTA	set	4012
   207  0000                     _TXSTAbits	set	4012
   208  0000                     _TRMT	set	32097
   209  001077                     STR_1:
   210  001077  54                 	db	84	;'T'
   211  001078  68                 	db	104	;'h'
   212  001079  65                 	db	101	;'e'
   213  00107A  20                 	db	32
   214  00107B  56                 	db	86	;'V'
   215  00107C  6F                 	db	111	;'o'
   216  00107D  6C                 	db	108	;'l'
   217  00107E  74                 	db	116	;'t'
   218  00107F  61                 	db	97	;'a'
   219  001080  67                 	db	103	;'g'
   220  001081  65                 	db	101	;'e'
   221  001082  20                 	db	32
   222  001083  69                 	db	105	;'i'
   223  001084  73                 	db	115	;'s'
   224  001085  20                 	db	32
   225  001086  25                 	db	37
   226  001087  30                 	db	48	;'0'
   227  001088  2E                 	db	46
   228  001089  33                 	db	51	;'3'
   229  00108A  66                 	db	102	;'f'
   230  00108B  0D                 	db	13
   231  00108C  0A                 	db	10
   232  00108D  0A                 	db	10
   233  00108E  00                 	db	0
   234                           
   235                           ; #config settings
   236  00108F  00                 	db	0	; dummy byte at the end
   237  0000                     
   238                           	psect	cinit
   239  002C98                     __pcinit:
   240                           	opt stack 0
   241  002C98                     start_initialization:
   242                           	opt stack 0
   243  002C98                     __initialization:
   244                           	opt stack 0
   245                           
   246                           ; Initialize objects allocated to COMRAM (10 bytes)
   247                           ; load TBLPTR registers with __pidataCOMRAM
   248  002C98  0EF4               	movlw	low __pidataCOMRAM
   249  002C9A  6EF6               	movwf	tblptrl,c
   250  002C9C  0E2D               	movlw	high __pidataCOMRAM
   251  002C9E  6EF7               	movwf	tblptrh,c
   252  002CA0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   253  002CA2  6EF8               	movwf	tblptru,c
   254  002CA4  EE00  F06A         	lfsr	0,__pdataCOMRAM
   255  002CA8  EE10 F00A          	lfsr	1,10
   256  002CAC                     copy_data0:
   257  002CAC  0009               	tblrd		*+
   258  002CAE  CFF5 FFEE          	movff	tablat,postinc0
   259  002CB2  50E5               	movf	postdec1,w,c
   260  002CB4  50E1               	movf	fsr1l,w,c
   261  002CB6  E1FA               	bnz	copy_data0
   262  002CB8                     end_of_initialization:
   263                           	opt stack 0
   264  002CB8                     __end_of__initialization:
   265                           	opt stack 0
   266  002CB8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   267  002CBA  6EF8               	movwf	tblptru,c
   268  002CBC  0100               	movlb	0
   269  002CBE  EFD8  F010         	goto	_main	;jump to C main() function
   270                           tblptru	equ	0xFF8
   271                           tblptrh	equ	0xFF7
   272                           tblptrl	equ	0xFF6
   273                           tablat	equ	0xFF5
   274                           postinc0	equ	0xFEE
   275                           postdec1	equ	0xFE5
   276                           fsr1l	equ	0xFE1
   277                           
   278                           	psect	dataCOMRAM
   279  00006A                     __pdataCOMRAM:
   280                           	opt stack 0
   281  00006A                     _array:
   282                           	opt stack 0
   283  00006A                     	ds	10
   284                           tblptru	equ	0xFF8
   285                           tblptrh	equ	0xFF7
   286                           tblptrl	equ	0xFF6
   287                           tablat	equ	0xFF5
   288                           postinc0	equ	0xFEE
   289                           postdec1	equ	0xFE5
   290                           fsr1l	equ	0xFE1
   291                           
   292                           	psect	cstackCOMRAM
   293  000001                     __pcstackCOMRAM:
   294                           	opt stack 0
   295  000001                     ??_BCD_DP:
   296  000001                     ??_isdigit:
   297  000001                     ?_get_full_ADC:
   298                           	opt stack 0
   299  000001                     ?___awdiv:
   300                           	opt stack 0
   301  000001                     ?___ftpack:
   302                           	opt stack 0
   303  000001                     ?___ftneg:
   304                           	opt stack 0
   305  000001                     ?__tdiv_to_l_:
   306                           	opt stack 0
   307  000001                     ?__div_to_l_:
   308                           	opt stack 0
   309  000001                     ?___lldiv:
   310                           	opt stack 0
   311  000001                     ?___llmod:
   312                           	opt stack 0
   313  000001                     putch@c:
   314                           	opt stack 0
   315  000001                     Select_ADC_Channel@channel:
   316                           	opt stack 0
   317  000001                     BCD_Upper_Digit@Port_E:
   318                           	opt stack 0
   319  000001                     BCD_Lower_Digit@digit:
   320                           	opt stack 0
   321  000001                     OpenUSART@spbrg:
   322                           	opt stack 0
   323  000001                     ___awdiv@dividend:
   324                           	opt stack 0
   325  000001                     __div_to_l_@f1:
   326                           	opt stack 0
   327  000001                     ___ftpack@arg:
   328                           	opt stack 0
   329  000001                     __tdiv_to_l_@f1:
   330                           	opt stack 0
   331  000001                     ___ftge@ff1:
   332                           	opt stack 0
   333  000001                     ___ftneg@f1:
   334                           	opt stack 0
   335  000001                     ___lldiv@dividend:
   336                           	opt stack 0
   337  000001                     ___llmod@dividend:
   338                           	opt stack 0
   339                           
   340                           ; 4 bytes @ 0x0
   341  000001                     	ds	1
   342  000002                     BCD_Upper_Digit@digit:
   343                           	opt stack 0
   344  000002                     BCD_DP@dp:
   345                           	opt stack 0
   346  000002                     _isdigit$1031:
   347                           	opt stack 0
   348                           
   349                           ; 1 bytes @ 0x1
   350  000002                     	ds	1
   351  000003                     ??_get_full_ADC:
   352  000003                     OpenUSART@config:
   353                           	opt stack 0
   354  000003                     isdigit@c:
   355                           	opt stack 0
   356  000003                     ___awdiv@divisor:
   357                           	opt stack 0
   358                           
   359                           ; 2 bytes @ 0x2
   360  000003                     	ds	1
   361  000004                     ___ftpack@exp:
   362                           	opt stack 0
   363  000004                     __div_to_l_@f2:
   364                           	opt stack 0
   365  000004                     __tdiv_to_l_@f2:
   366                           	opt stack 0
   367  000004                     ___ftge@ff2:
   368                           	opt stack 0
   369                           
   370                           ; 3 bytes @ 0x3
   371  000004                     	ds	1
   372  000005                     ___awdiv@counter:
   373                           	opt stack 0
   374  000005                     ___ftpack@sign:
   375                           	opt stack 0
   376  000005                     get_full_ADC@result:
   377                           	opt stack 0
   378  000005                     ___lldiv@divisor:
   379                           	opt stack 0
   380  000005                     ___llmod@divisor:
   381                           	opt stack 0
   382                           
   383                           ; 4 bytes @ 0x4
   384  000005                     	ds	1
   385  000006                     ??___ftpack:
   386  000006                     ___awdiv@sign:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0x5
   390  000006                     	ds	1
   391  000007                     ??__tdiv_to_l_:
   392  000007                     ??___ftge:
   393  000007                     ___awdiv@quotient:
   394                           	opt stack 0
   395  000007                     __div_to_l_@quot:
   396                           	opt stack 0
   397                           
   398                           ; 4 bytes @ 0x6
   399  000007                     	ds	2
   400  000009                     ?___awmod:
   401                           	opt stack 0
   402  000009                     ?___awtoft:
   403                           	opt stack 0
   404  000009                     ?___lltoft:
   405                           	opt stack 0
   406  000009                     ___llmod@counter:
   407                           	opt stack 0
   408  000009                     ___awmod@dividend:
   409                           	opt stack 0
   410  000009                     ___awtoft@c:
   411                           	opt stack 0
   412  000009                     ___lldiv@quotient:
   413                           	opt stack 0
   414  000009                     ___lltoft@c:
   415                           	opt stack 0
   416                           
   417                           ; 4 bytes @ 0x8
   418  000009                     	ds	1
   419  00000A                     __tdiv_to_l_@quot:
   420                           	opt stack 0
   421                           
   422                           ; 4 bytes @ 0x9
   423  00000A                     	ds	1
   424  00000B                     __div_to_l_@cntr:
   425                           	opt stack 0
   426  00000B                     ___awmod@divisor:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0xA
   430  00000B                     	ds	1
   431  00000C                     ___awtoft@sign:
   432                           	opt stack 0
   433  00000C                     __div_to_l_@exp1:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0xB
   437  00000C                     	ds	1
   438  00000D                     ??___lltoft:
   439  00000D                     ?___ftdiv:
   440                           	opt stack 0
   441  00000D                     ___awmod@counter:
   442                           	opt stack 0
   443  00000D                     ___lldiv@counter:
   444                           	opt stack 0
   445  00000D                     ___ftdiv@f1:
   446                           	opt stack 0
   447                           
   448                           ; 3 bytes @ 0xC
   449  00000D                     	ds	1
   450  00000E                     ___awmod@sign:
   451                           	opt stack 0
   452  00000E                     __tdiv_to_l_@cntr:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0xD
   456  00000E                     	ds	1
   457  00000F                     ?___wmul:
   458                           	opt stack 0
   459  00000F                     __tdiv_to_l_@exp1:
   460                           	opt stack 0
   461  00000F                     ___wmul@multiplier:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0xE
   465  00000F                     	ds	1
   466  000010                     ___ftdiv@f2:
   467                           	opt stack 0
   468                           
   469                           ; 3 bytes @ 0xF
   470  000010                     	ds	1
   471  000011                     ___lltoft@exp:
   472                           	opt stack 0
   473  000011                     ___wmul@multiplicand:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x10
   477  000011                     	ds	2
   478  000013                     ??___ftdiv:
   479  000013                     ___wmul@product:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x12
   483  000013                     	ds	2
   484  000015                     ?___ftmul:
   485                           	opt stack 0
   486  000015                     ___ftmul@f1:
   487                           	opt stack 0
   488                           
   489                           ; 3 bytes @ 0x14
   490  000015                     	ds	1
   491  000016                     ___ftdiv@cntr:
   492                           	opt stack 0
   493                           
   494                           ; 1 bytes @ 0x15
   495  000016                     	ds	1
   496  000017                     ___ftdiv@f3:
   497                           	opt stack 0
   498                           
   499                           ; 3 bytes @ 0x16
   500  000017                     	ds	1
   501  000018                     ___ftmul@f2:
   502                           	opt stack 0
   503                           
   504                           ; 3 bytes @ 0x17
   505  000018                     	ds	2
   506  00001A                     ___ftdiv@exp:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x19
   510  00001A                     	ds	1
   511  00001B                     ??___ftmul:
   512  00001B                     ___ftdiv@sign:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0x1A
   516  00001B                     	ds	3
   517  00001E                     ___ftmul@exp:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0x1D
   521  00001E                     	ds	1
   522  00001F                     ___ftmul@f3_as_product:
   523                           	opt stack 0
   524                           
   525                           ; 3 bytes @ 0x1E
   526  00001F                     	ds	3
   527  000022                     ___ftmul@cntr:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0x21
   531  000022                     	ds	1
   532  000023                     ___ftmul@sign:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x22
   536  000023                     	ds	1
   537  000024                     ?_fround:
   538                           	opt stack 0
   539  000024                     ?_scale:
   540                           	opt stack 0
   541                           
   542                           ; 3 bytes @ 0x23
   543  000024                     	ds	3
   544  000027                     _fround$1261:
   545                           	opt stack 0
   546  000027                     _scale$1262:
   547                           	opt stack 0
   548                           
   549                           ; 3 bytes @ 0x26
   550  000027                     	ds	3
   551  00002A                     scale@scl:
   552                           	opt stack 0
   553  00002A                     _fround$1260:
   554                           	opt stack 0
   555                           
   556                           ; 3 bytes @ 0x29
   557  00002A                     	ds	1
   558  00002B                     ?___fttol:
   559                           	opt stack 0
   560  00002B                     ___fttol@f1:
   561                           	opt stack 0
   562                           
   563                           ; 3 bytes @ 0x2A
   564  00002B                     	ds	2
   565  00002D                     fround@prec:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x2C
   569  00002D                     	ds	1
   570  00002E                     ?___ftadd:
   571                           	opt stack 0
   572  00002E                     ___ftadd@f1:
   573                           	opt stack 0
   574                           
   575                           ; 3 bytes @ 0x2D
   576  00002E                     	ds	1
   577  00002F                     ??___fttol:
   578                           
   579                           ; 0 bytes @ 0x2E
   580  00002F                     	ds	2
   581  000031                     ___ftadd@f2:
   582                           	opt stack 0
   583                           
   584                           ; 3 bytes @ 0x30
   585  000031                     	ds	3
   586  000034                     ??___ftadd:
   587  000034                     ___fttol@sign1:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0x33
   591  000034                     	ds	1
   592  000035                     ___fttol@lval:
   593                           	opt stack 0
   594                           
   595                           ; 4 bytes @ 0x34
   596  000035                     	ds	2
   597  000037                     ___ftadd@sign:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x36
   601  000037                     	ds	1
   602  000038                     ___ftadd@exp2:
   603                           	opt stack 0
   604                           
   605                           ; 1 bytes @ 0x37
   606  000038                     	ds	1
   607  000039                     ___ftadd@exp1:
   608                           	opt stack 0
   609  000039                     ___fttol@exp1:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x38
   613  000039                     	ds	1
   614  00003A                     ?___ftsub:
   615                           	opt stack 0
   616  00003A                     ___ftsub@f1:
   617                           	opt stack 0
   618                           
   619                           ; 3 bytes @ 0x39
   620  00003A                     	ds	3
   621  00003D                     ___ftsub@f2:
   622                           	opt stack 0
   623                           
   624                           ; 3 bytes @ 0x3C
   625  00003D                     	ds	3
   626  000040                     ?_printf:
   627                           	opt stack 0
   628  000040                     printf@f:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x3F
   632  000040                     	ds	5
   633  000045                     ??_printf:
   634                           
   635                           ; 0 bytes @ 0x44
   636  000045                     	ds	6
   637  00004B                     _printf$1263:
   638                           	opt stack 0
   639                           
   640                           ; 3 bytes @ 0x4A
   641  00004B                     	ds	3
   642  00004E                     printf@ap:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x4D
   646  00004E                     	ds	2
   647  000050                     printf@val:
   648                           	opt stack 0
   649                           
   650                           ; 4 bytes @ 0x4F
   651  000050                     	ds	4
   652  000054                     printf@tmpval:
   653                           	opt stack 0
   654                           
   655                           ; 4 bytes @ 0x53
   656  000054                     	ds	4
   657  000058                     printf@exp:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0x57
   661  000058                     	ds	2
   662  00005A                     printf@flag:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x59
   666  00005A                     	ds	2
   667  00005C                     printf@width:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0x5B
   671  00005C                     	ds	2
   672  00005E                     printf@fval:
   673                           	opt stack 0
   674                           
   675                           ; 3 bytes @ 0x5D
   676  00005E                     	ds	3
   677  000061                     printf@prec:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x60
   681  000061                     	ds	2
   682  000063                     printf@c:
   683                           	opt stack 0
   684                           
   685                           ; 1 bytes @ 0x62
   686  000063                     	ds	1
   687  000064                     ??_main:
   688                           
   689                           ; 0 bytes @ 0x63
   690  000064                     	ds	2
   691  000066                     main@num_step:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x65
   695  000066                     	ds	2
   696  000068                     main@voltage_mv:
   697                           	opt stack 0
   698                           
   699                           ; 2 bytes @ 0x67
   700  000068                     	ds	2
   701                           tblptru	equ	0xFF8
   702                           tblptrh	equ	0xFF7
   703                           tblptrl	equ	0xFF6
   704                           tablat	equ	0xFF5
   705                           postinc0	equ	0xFEE
   706                           postdec1	equ	0xFE5
   707                           fsr1l	equ	0xFE1
   708                           
   709 ;;
   710 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   711 ;;
   712 ;; *************** function _main *****************
   713 ;; Defined at:
   714 ;;		line 28 in file "Lab6pA.c"
   715 ;; Parameters:    Size  Location     Type
   716 ;;		None
   717 ;; Auto vars:     Size  Location     Type
   718 ;;  voltage_mv      2  103[COMRAM] int 
   719 ;;  num_step        2  101[COMRAM] int 
   720 ;; Return value:  Size  Location     Type
   721 ;;		None               void
   722 ;; Registers used:
   723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   724 ;; Tracked objects:
   725 ;;		On entry : 0/0
   726 ;;		On exit  : 0/0
   727 ;;		Unchanged: 0/0
   728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   730 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   731 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   732 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   733 ;;Total ram usage:        6 bytes
   734 ;; Hardware stack levels required when called:    4
   735 ;; This function calls:
   736 ;;		_BCD_DP
   737 ;;		_BCD_Lower_Digit
   738 ;;		_BCD_Upper_Digit
   739 ;;		_Init_ADC
   740 ;;		_Init_TRIS
   741 ;;		_Select_ADC_Channel
   742 ;;		_WAIT_HALF_SEC
   743 ;;		___awdiv
   744 ;;		___awmod
   745 ;;		___awtoft
   746 ;;		___ftdiv
   747 ;;		_get_full_ADC
   748 ;;		_init_UART
   749 ;;		_printf
   750 ;; This function is called by:
   751 ;;		Startup code after reset
   752 ;; This function uses a non-reentrant model
   753 ;;
   754                           
   755                           	psect	text0
   756  0021B0                     __ptext0:
   757                           	opt stack 0
   758  0021B0                     _main:
   759                           	opt stack 27
   760                           
   761                           ;Lab6pA.c: 30: OSCCON = 0x60;
   762                           
   763                           ;incstack = 0
   764  0021B0  0E60               	movlw	96
   765  0021B2  6ED3               	movwf	4051,c	;volatile
   766                           
   767                           ;Lab6pA.c: 32: PORTB = 0x00;
   768  0021B4  0E00               	movlw	0
   769  0021B6  6E81               	movwf	3969,c	;volatile
   770                           
   771                           ;Lab6pA.c: 33: PORTC = 0xFF;
   772  0021B8  6882               	setf	3970,c	;volatile
   773                           
   774                           ;Lab6pA.c: 34: PORTD = 0xFF;
   775  0021BA  6883               	setf	3971,c	;volatile
   776                           
   777                           ;Lab6pA.c: 35: PORTE = 0xFF;
   778  0021BC  6884               	setf	3972,c	;volatile
   779                           
   780                           ;Lab6pA.c: 37: Init_ADC();
   781  0021BE  ECED  F016         	call	_Init_ADC	;wreg free
   782                           
   783                           ;Lab6pA.c: 38: init_UART();
   784  0021C2  ECDC  F016         	call	_init_UART	;wreg free
   785                           
   786                           ;Lab6pA.c: 39: Init_TRIS();
   787  0021C6  ECD1  F016         	call	_Init_TRIS	;wreg free
   788                           
   789                           ;Lab6pA.c: 41: Select_ADC_Channel(0);
   790  0021CA  0E00               	movlw	0
   791  0021CC  ECF4  F016         	call	_Select_ADC_Channel
   792  0021D0  D000               	goto	l2906
   793  0021D2                     l2906:
   794                           
   795                           ;Lab6pA.c: 44: {
   796                           ;Lab6pA.c: 45: int num_step = get_full_ADC();
   797  0021D2  EC75  F016         	call	_get_full_ADC	;wreg free
   798  0021D6  C001  F066         	movff	?_get_full_ADC,main@num_step
   799  0021DA  C002  F067         	movff	?_get_full_ADC+1,main@num_step+1
   800                           
   801                           ;Lab6pA.c: 46: int voltage_mv = num_step * 4;
   802  0021DE  C066  F064         	movff	main@num_step,??_main
   803  0021E2  C067  F065         	movff	main@num_step+1,??_main+1
   804  0021E6  90D8               	bcf	status,0,c
   805  0021E8  3664               	rlcf	??_main,f,c
   806  0021EA  3665               	rlcf	??_main+1,f,c
   807  0021EC  90D8               	bcf	status,0,c
   808  0021EE  3664               	rlcf	??_main,f,c
   809  0021F0  3665               	rlcf	??_main+1,f,c
   810  0021F2  C064  F068         	movff	??_main,main@voltage_mv
   811  0021F6  C065  F069         	movff	??_main+1,main@voltage_mv+1
   812                           
   813                           ;Lab6pA.c: 48: printf ("The Voltage is %0.3f\r\n\n", voltage_mv/1000.0 );
   814  0021FA  0E77               	movlw	low STR_1
   815  0021FC  6E40               	movwf	printf@f,c
   816  0021FE  0E10               	movlw	high STR_1
   817  002200  6E41               	movwf	printf@f+1,c
   818  002202  C068  F009         	movff	main@voltage_mv,___awtoft@c
   819  002206  C069  F00A         	movff	main@voltage_mv+1,___awtoft@c+1
   820  00220A  EC2E  F016         	call	___awtoft	;wreg free
   821  00220E  C009  F00D         	movff	?___awtoft,___ftdiv@f1
   822  002212  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
   823  002216  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
   824  00221A  0E00               	movlw	0
   825  00221C  6E10               	movwf	___ftdiv@f2,c
   826  00221E  0E7A               	movlw	122
   827  002220  6E11               	movwf	___ftdiv@f2+1,c
   828  002222  0E44               	movlw	68
   829  002224  6E12               	movwf	___ftdiv@f2+2,c
   830  002226  EC5C  F013         	call	___ftdiv	;wreg free
   831  00222A  C00D  F042         	movff	?___ftdiv,?_printf+2
   832  00222E  C00E  F043         	movff	?___ftdiv+1,?_printf+3
   833  002232  C00F  F044         	movff	?___ftdiv+2,?_printf+4
   834  002236  EC48  F008         	call	_printf	;wreg free
   835                           
   836                           ;Lab6pA.c: 50: BCD_Upper_Digit(voltage_mv/1000);
   837  00223A  C068  F001         	movff	main@voltage_mv,___awdiv@dividend
   838  00223E  C069  F002         	movff	main@voltage_mv+1,___awdiv@dividend+1
   839  002242  0E03               	movlw	3
   840  002244  6E04               	movwf	___awdiv@divisor+1,c
   841  002246  0EE8               	movlw	232
   842  002248  6E03               	movwf	___awdiv@divisor,c
   843  00224A  EC30  F014         	call	___awdiv	;wreg free
   844  00224E  5001               	movf	?___awdiv,w,c
   845  002250  EC0F  F016         	call	_BCD_Upper_Digit
   846                           
   847                           ;Lab6pA.c: 51: if (voltage_mv < 1000)
   848  002254  BE69               	btfsc	main@voltage_mv+1,7,c
   849  002256  D006               	goto	l2916
   850  002258  0EE8               	movlw	232
   851  00225A  5C68               	subwf	main@voltage_mv,w,c
   852  00225C  0E03               	movlw	3
   853  00225E  5869               	subwfb	main@voltage_mv+1,w,c
   854  002260  B0D8               	btfsc	status,0,c
   855  002262  D00E               	goto	l2918
   856  002264                     l2916:
   857                           
   858                           ;Lab6pA.c: 52: {
   859                           ;Lab6pA.c: 53: BCD_Lower_Digit(voltage_mv/100);
   860  002264  C068  F001         	movff	main@voltage_mv,___awdiv@dividend
   861  002268  C069  F002         	movff	main@voltage_mv+1,___awdiv@dividend+1
   862  00226C  0E00               	movlw	0
   863  00226E  6E04               	movwf	___awdiv@divisor+1,c
   864  002270  0E64               	movlw	100
   865  002272  6E03               	movwf	___awdiv@divisor,c
   866  002274  EC30  F014         	call	___awdiv	;wreg free
   867  002278  5001               	movf	?___awdiv,w,c
   868  00227A  ECB8  F016         	call	_BCD_Lower_Digit
   869                           
   870                           ;Lab6pA.c: 54: }
   871  00227E  D018               	goto	l2920
   872  002280                     l2918:
   873                           
   874                           ;Lab6pA.c: 55: else BCD_Lower_Digit((voltage_mv/100)%10);
   875  002280  0E00               	movlw	0
   876  002282  6E04               	movwf	___awdiv@divisor+1,c
   877  002284  0E64               	movlw	100
   878  002286  6E03               	movwf	___awdiv@divisor,c
   879  002288  C068  F001         	movff	main@voltage_mv,___awdiv@dividend
   880  00228C  C069  F002         	movff	main@voltage_mv+1,___awdiv@dividend+1
   881  002290  EC30  F014         	call	___awdiv	;wreg free
   882  002294  C001  F009         	movff	?___awdiv,___awmod@dividend
   883  002298  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
   884  00229C  0E00               	movlw	0
   885  00229E  6E0C               	movwf	___awmod@divisor+1,c
   886  0022A0  0E0A               	movlw	10
   887  0022A2  6E0B               	movwf	___awmod@divisor,c
   888  0022A4  EC0C  F015         	call	___awmod	;wreg free
   889  0022A8  5009               	movf	?___awmod,w,c
   890  0022AA  ECB8  F016         	call	_BCD_Lower_Digit
   891  0022AE  D000               	goto	l2920
   892  0022B0                     l2920:
   893                           
   894                           ;Lab6pA.c: 56: BCD_DP (1);
   895  0022B0  0E01               	movlw	1
   896  0022B2  ECC5  F016         	call	_BCD_DP
   897                           
   898                           ;Lab6pA.c: 58: WAIT_HALF_SEC();
   899  0022B6  ECAB  F016         	call	_WAIT_HALF_SEC	;wreg free
   900  0022BA  D78B               	goto	l2906
   901  0022BC  EF00  F000         	goto	start
   902  0022C0                     __end_of_main:
   903                           	opt stack 0
   904                           tblptru	equ	0xFF8
   905                           tblptrh	equ	0xFF7
   906                           tblptrl	equ	0xFF6
   907                           tablat	equ	0xFF5
   908                           postinc0	equ	0xFEE
   909                           postdec1	equ	0xFE5
   910                           fsr1l	equ	0xFE1
   911                           status	equ	0xFD8
   912                           
   913 ;; *************** function _printf *****************
   914 ;; Defined at:
   915 ;;		line 464 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;  f               2   63[COMRAM] PTR const unsigned char 
   918 ;;		 -> STR_1(24), 
   919 ;; Auto vars:     Size  Location     Type
   920 ;;  tmpval          4   83[COMRAM] struct .
   921 ;;  val             4   79[COMRAM] unsigned long 
   922 ;;  fval            3   93[COMRAM] unsigned long 
   923 ;;  cp              3    0        PTR const unsigned char 
   924 ;;  prec            2   96[COMRAM] int 
   925 ;;  width           2   91[COMRAM] int 
   926 ;;  flag            2   89[COMRAM] unsigned short 
   927 ;;  exp             2   87[COMRAM] int 
   928 ;;  ap              2   77[COMRAM] PTR void [1]
   929 ;;		 -> ?_printf(2), 
   930 ;;  len             2    0        unsigned int 
   931 ;;  c               1   98[COMRAM] char 
   932 ;;  d               1    0        unsigned char 
   933 ;; Return value:  Size  Location     Type
   934 ;;                  2   63[COMRAM] int 
   935 ;; Registers used:
   936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   937 ;; Tracked objects:
   938 ;;		On entry : 0/0
   939 ;;		On exit  : 0/0
   940 ;;		Unchanged: 0/0
   941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   942 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   943 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   944 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   945 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   946 ;;Total ram usage:       36 bytes
   947 ;; Hardware stack levels used:    1
   948 ;; Hardware stack levels required when called:    3
   949 ;; This function calls:
   950 ;;		___awdiv
   951 ;;		___ftadd
   952 ;;		___ftge
   953 ;;		___ftmul
   954 ;;		___ftneg
   955 ;;		___ftsub
   956 ;;		___fttol
   957 ;;		___lldiv
   958 ;;		___llmod
   959 ;;		___lltoft
   960 ;;		___wmul
   961 ;;		__div_to_l_
   962 ;;		__tdiv_to_l_
   963 ;;		_fround
   964 ;;		_isdigit
   965 ;;		_putch
   966 ;;		_scale
   967 ;; This function is called by:
   968 ;;		_main
   969 ;; This function uses a non-reentrant model
   970 ;;
   971                           
   972                           	psect	text1
   973  001090                     __ptext1:
   974                           	opt stack 0
   975  001090                     _printf:
   976                           	opt stack 27
   977                           
   978                           ;doprnt.c: 466: va_list ap;
   979                           ;doprnt.c: 499: signed char c;
   980                           ;doprnt.c: 501: int width;
   981                           ;doprnt.c: 504: int prec;
   982                           ;doprnt.c: 508: unsigned short flag;
   983                           ;doprnt.c: 515: char d;
   984                           ;doprnt.c: 516: double fval;
   985                           ;doprnt.c: 517: int exp;
   986                           ;doprnt.c: 523: union {
   987                           ;doprnt.c: 524: unsigned long vd;
   988                           ;doprnt.c: 525: double integ;
   989                           ;doprnt.c: 526: } tmpval;
   990                           ;doprnt.c: 528: unsigned long val;
   991                           ;doprnt.c: 529: unsigned len;
   992                           ;doprnt.c: 530: const char * cp;
   993                           ;doprnt.c: 533: *ap = __va_start();
   994                           
   995                           ;incstack = 0
   996  001090  0E42               	movlw	low (?_printf+2)
   997  001092  6E4E               	movwf	printf@ap,c
   998  001094  0E00               	movlw	high (?_printf+2)
   999  001096  6E4F               	movwf	printf@ap+1,c
  1000                           
  1001                           ;doprnt.c: 536: while(c = *f++) {
  1002  001098  EFD4  F00C         	goto	l2830
  1003  00109C                     l2568:
  1004                           
  1005                           ;doprnt.c: 538: if(c != '%')
  1006  00109C  0E25               	movlw	37
  1007  00109E  1863               	xorwf	printf@c,w,c
  1008  0010A0  B4D8               	btfsc	status,2,c
  1009  0010A2  D005               	goto	l2572
  1010                           
  1011                           ;doprnt.c: 540: {
  1012                           ;doprnt.c: 541: (putch(c) );
  1013  0010A4  5063               	movf	printf@c,w,c
  1014  0010A6  ECE6  F016         	call	_putch
  1015                           
  1016                           ;doprnt.c: 542: continue;
  1017  0010AA  EFD4  F00C         	goto	l2830
  1018  0010AE                     l2572:
  1019                           
  1020                           ;doprnt.c: 543: }
  1021                           ;doprnt.c: 546: width = 0;
  1022  0010AE  0E00               	movlw	0
  1023  0010B0  6E5D               	movwf	printf@width+1,c
  1024  0010B2  0E00               	movlw	0
  1025  0010B4  6E5C               	movwf	printf@width,c
  1026                           
  1027                           ;doprnt.c: 548: flag = 0;
  1028  0010B6  0E00               	movlw	0
  1029  0010B8  6E5B               	movwf	printf@flag+1,c
  1030  0010BA  0E00               	movlw	0
  1031  0010BC  6E5A               	movwf	printf@flag,c
  1032                           
  1033                           ;doprnt.c: 551: switch(*f) {
  1034                           
  1035                           ;doprnt.c: 550: for(;;) {
  1036  0010BE  D005               	goto	l2578
  1037  0010C0                     l2574:
  1038                           
  1039                           ;doprnt.c: 580: flag |= 0x04;
  1040  0010C0  845A               	bsf	printf@flag,2,c
  1041                           
  1042                           ;doprnt.c: 581: f++;
  1043  0010C2  4A40               	infsnz	printf@f,f,c
  1044  0010C4  2A41               	incf	printf@f+1,f,c
  1045                           
  1046                           ;doprnt.c: 582: continue;
  1047  0010C6  D001               	goto	l2578
  1048                           
  1049                           ;doprnt.c: 584: }
  1050  0010C8  D00B               	goto	l2580
  1051  0010CA                     l2578:
  1052  0010CA  C040  FFF6         	movff	printf@f,tblptrl
  1053  0010CE  C041  FFF7         	movff	printf@f+1,tblptrh
  1054  0010D2                     	if	0	;tblptru may be non-zero
  1055  0010D2                     	endif
  1056  0010D2                     	if	0	;tblptru may be non-zero
  1057  0010D2                     	endif
  1058  0010D2  0008               	tblrd		*
  1059  0010D4  50F5               	movf	tablat,w,c
  1060                           
  1061                           ; Switch size 1, requested type "space"
  1062                           ; Number of cases is 1, Range of values is 48 to 48
  1063                           ; switch strategies available:
  1064                           ; Name         Instructions Cycles
  1065                           ; simple_byte            4     3 (average)
  1066                           ;	Chosen strategy is simple_byte
  1067  0010D6  0A30               	xorlw	48	; case 48
  1068  0010D8  B4D8               	btfsc	status,2,c
  1069  0010DA  D7F2               	goto	l2574
  1070                           
  1071                           ;doprnt.c: 585: break;
  1072  0010DC  D001               	goto	l2580
  1073                           
  1074                           ;doprnt.c: 586: }
  1075  0010DE  D7F5               	goto	l2578
  1076  0010E0                     l2580:
  1077                           
  1078                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1079  0010E0  C040  FFF6         	movff	printf@f,tblptrl
  1080  0010E4  C041  FFF7         	movff	printf@f+1,tblptrh
  1081  0010E8                     	if	0	;tblptru may be non-zero
  1082  0010E8                     	endif
  1083  0010E8                     	if	0	;tblptru may be non-zero
  1084  0010E8                     	endif
  1085  0010E8  0008               	tblrd		*
  1086  0010EA  50F5               	movf	tablat,w,c
  1087  0010EC  EC9A  F016         	call	_isdigit
  1088  0010F0  A0D8               	btfss	status,0,c
  1089  0010F2  D035               	goto	l2592
  1090                           
  1091                           ;doprnt.c: 598: width = 0;
  1092  0010F4  0E00               	movlw	0
  1093  0010F6  6E5D               	movwf	printf@width+1,c
  1094  0010F8  0E00               	movlw	0
  1095  0010FA  6E5C               	movwf	printf@width,c
  1096  0010FC  D000               	goto	l2584
  1097  0010FE                     l2584:
  1098                           
  1099                           ;doprnt.c: 600: width *= 10;
  1100  0010FE  C05C  F00F         	movff	printf@width,___wmul@multiplier
  1101  001102  C05D  F010         	movff	printf@width+1,___wmul@multiplier+1
  1102  001106  0E00               	movlw	0
  1103  001108  6E12               	movwf	___wmul@multiplicand+1,c
  1104  00110A  0E0A               	movlw	10
  1105  00110C  6E11               	movwf	___wmul@multiplicand,c
  1106  00110E  EC61  F016         	call	___wmul	;wreg free
  1107  001112  C00F  F05C         	movff	?___wmul,printf@width
  1108  001116  C010  F05D         	movff	?___wmul+1,printf@width+1
  1109                           
  1110                           ;doprnt.c: 601: width += *f++ - '0';
  1111  00111A  0ED0               	movlw	208
  1112  00111C  6E45               	movwf	??_printf& (0+255),c
  1113  00111E  0EFF               	movlw	255
  1114  001120  6E46               	movwf	(??_printf+1)& (0+255),c
  1115  001122  C040  FFF6         	movff	printf@f,tblptrl
  1116  001126  C041  FFF7         	movff	printf@f+1,tblptrh
  1117  00112A                     	if	0	;tblptru may be non-zero
  1118  00112A                     	endif
  1119  00112A                     	if	0	;tblptru may be non-zero
  1120  00112A                     	endif
  1121  00112A  0008               	tblrd		*
  1122  00112C  50F5               	movf	tablat,w,c
  1123  00112E  6E47               	movwf	(??_printf+2)& (0+255),c
  1124  001130  6A48               	clrf	(??_printf+3)& (0+255),c
  1125  001132  5045               	movf	??_printf,w,c
  1126  001134  2647               	addwf	??_printf+2,f,c
  1127  001136  5046               	movf	??_printf+1,w,c
  1128  001138  2248               	addwfc	??_printf+3,f,c
  1129  00113A  5047               	movf	??_printf+2,w,c
  1130  00113C  265C               	addwf	printf@width,f,c
  1131  00113E  5048               	movf	??_printf+3,w,c
  1132  001140  225D               	addwfc	printf@width+1,f,c
  1133  001142  4A40               	infsnz	printf@f,f,c
  1134  001144  2A41               	incf	printf@f+1,f,c
  1135                           
  1136                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1137  001146  C040  FFF6         	movff	printf@f,tblptrl
  1138  00114A  C041  FFF7         	movff	printf@f+1,tblptrh
  1139  00114E                     	if	0	;tblptru may be non-zero
  1140  00114E                     	endif
  1141  00114E                     	if	0	;tblptru may be non-zero
  1142  00114E                     	endif
  1143  00114E  0008               	tblrd		*
  1144  001150  50F5               	movf	tablat,w,c
  1145  001152  EC9A  F016         	call	_isdigit
  1146  001156  A0D8               	btfss	status,0,c
  1147  001158  D002               	goto	l2592
  1148  00115A  D7D1               	goto	l2584
  1149  00115C  D000               	goto	l2592
  1150  00115E                     l2592:
  1151                           
  1152                           ;doprnt.c: 608: }
  1153                           ;doprnt.c: 611: if(*f == '.') {
  1154  00115E  C040  FFF6         	movff	printf@f,tblptrl
  1155  001162  C041  FFF7         	movff	printf@f+1,tblptrh
  1156  001166                     	if	0	;tblptru may be non-zero
  1157  001166                     	endif
  1158  001166                     	if	0	;tblptru may be non-zero
  1159  001166                     	endif
  1160  001166  0008               	tblrd		*
  1161  001168  50F5               	movf	tablat,w,c
  1162  00116A  0A2E               	xorlw	46
  1163  00116C  A4D8               	btfss	status,2,c
  1164  00116E  D030               	goto	l2604
  1165                           
  1166                           ;doprnt.c: 612: flag |= 0x4000;
  1167  001170  8C5B               	bsf	printf@flag+1,6,c
  1168                           
  1169                           ;doprnt.c: 613: f++;
  1170  001172  4A40               	infsnz	printf@f,f,c
  1171  001174  2A41               	incf	printf@f+1,f,c
  1172                           
  1173                           ;doprnt.c: 620: {
  1174                           ;doprnt.c: 621: prec = 0;
  1175  001176  0E00               	movlw	0
  1176  001178  6E62               	movwf	printf@prec+1,c
  1177  00117A  0E00               	movlw	0
  1178  00117C  6E61               	movwf	printf@prec,c
  1179                           
  1180                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1181  00117E  D01C               	goto	l2602
  1182  001180                     l2598:
  1183                           
  1184                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1185  001180  C061  F00F         	movff	printf@prec,___wmul@multiplier
  1186  001184  C062  F010         	movff	printf@prec+1,___wmul@multiplier+1
  1187  001188  0E00               	movlw	0
  1188  00118A  6E12               	movwf	___wmul@multiplicand+1,c
  1189  00118C  0E0A               	movlw	10
  1190  00118E  6E11               	movwf	___wmul@multiplicand,c
  1191  001190  EC61  F016         	call	___wmul	;wreg free
  1192  001194  C040  FFF6         	movff	printf@f,tblptrl
  1193  001198  C041  FFF7         	movff	printf@f+1,tblptrh
  1194  00119C                     	if	0	;tblptru may be non-zero
  1195  00119C                     	endif
  1196  00119C                     	if	0	;tblptru may be non-zero
  1197  00119C                     	endif
  1198  00119C  0008               	tblrd		*
  1199  00119E  50F5               	movf	tablat,w,c
  1200  0011A0  260F               	addwf	?___wmul,f,c
  1201  0011A2  0E00               	movlw	0
  1202  0011A4  2210               	addwfc	?___wmul+1,f,c
  1203  0011A6  0ED0               	movlw	208
  1204  0011A8  240F               	addwf	?___wmul,w,c
  1205  0011AA  6E61               	movwf	printf@prec,c
  1206  0011AC  0EFF               	movlw	255
  1207  0011AE  2010               	addwfc	?___wmul+1,w,c
  1208  0011B0  6E62               	movwf	printf@prec+1,c
  1209  0011B2  4A40               	infsnz	printf@f,f,c
  1210  0011B4  2A41               	incf	printf@f+1,f,c
  1211  0011B6  D000               	goto	l2602
  1212  0011B8                     l2602:
  1213  0011B8  C040  FFF6         	movff	printf@f,tblptrl
  1214  0011BC  C041  FFF7         	movff	printf@f+1,tblptrh
  1215  0011C0                     	if	0	;tblptru may be non-zero
  1216  0011C0                     	endif
  1217  0011C0                     	if	0	;tblptru may be non-zero
  1218  0011C0                     	endif
  1219  0011C0  0008               	tblrd		*
  1220  0011C2  50F5               	movf	tablat,w,c
  1221  0011C4  EC9A  F016         	call	_isdigit
  1222  0011C8  A0D8               	btfss	status,0,c
  1223  0011CA  D00D               	goto	l2612
  1224  0011CC  D7D9               	goto	l2598
  1225                           
  1226                           ;doprnt.c: 624: }
  1227                           ;doprnt.c: 625: } else {
  1228  0011CE  D00B               	goto	l2612
  1229  0011D0                     l2604:
  1230                           
  1231                           ;doprnt.c: 626: prec = 0;
  1232  0011D0  0E00               	movlw	0
  1233  0011D2  6E62               	movwf	printf@prec+1,c
  1234  0011D4  0E00               	movlw	0
  1235  0011D6  6E61               	movwf	printf@prec,c
  1236                           
  1237                           ;doprnt.c: 628: flag |= 0x1000;
  1238  0011D8  885B               	bsf	printf@flag+1,4,c
  1239                           
  1240                           ;doprnt.c: 630: }
  1241                           ;doprnt.c: 635: switch(c = *f++) {
  1242  0011DA  D005               	goto	l2612
  1243                           
  1244                           ;doprnt.c: 638: goto alldone;
  1245                           
  1246                           ;doprnt.c: 637: case 0:
  1247  0011DC  D3F4               	goto	l254
  1248  0011DE                     l2608:
  1249                           
  1250                           ;doprnt.c: 663: flag |= 0x400;
  1251  0011DE  845B               	bsf	printf@flag+1,2,c
  1252                           
  1253                           ;doprnt.c: 664: break;
  1254  0011E0  D013               	goto	l2614
  1255                           
  1256                           ;doprnt.c: 813: continue;
  1257                           
  1258                           ;doprnt.c: 802: default:
  1259  0011E2  D3E2               	goto	l2830
  1260                           
  1261                           ;doprnt.c: 822: }
  1262  0011E4  D011               	goto	l2614
  1263  0011E6                     l2612:
  1264  0011E6  C040  FFF6         	movff	printf@f,tblptrl
  1265  0011EA  C041  FFF7         	movff	printf@f+1,tblptrh
  1266  0011EE  4A40               	infsnz	printf@f,f,c
  1267  0011F0  2A41               	incf	printf@f+1,f,c
  1268  0011F2                     	if	0	;tblptru may be non-zero
  1269  0011F2                     	endif
  1270  0011F2                     	if	0	;tblptru may be non-zero
  1271  0011F2                     	endif
  1272  0011F2  0008               	tblrd		*
  1273  0011F4  CFF5 F063          	movff	tablat,printf@c
  1274  0011F8  5063               	movf	printf@c,w,c
  1275                           
  1276                           ; Switch size 1, requested type "space"
  1277                           ; Number of cases is 2, Range of values is 0 to 102
  1278                           ; switch strategies available:
  1279                           ; Name         Instructions Cycles
  1280                           ; simple_byte            7     4 (average)
  1281                           ;	Chosen strategy is simple_byte
  1282  0011FA  0A00               	xorlw	0	; case 0
  1283  0011FC  B4D8               	btfsc	status,2,c
  1284  0011FE  D3E3               	goto	l254
  1285  001200  0A66               	xorlw	102	; case 102
  1286  001202  B4D8               	btfsc	status,2,c
  1287  001204  D7EC               	goto	l2608
  1288  001206  D3D0               	goto	l2830
  1289  001208                     l2614:
  1290                           
  1291                           ;doprnt.c: 825: if(flag & (0x700)) {
  1292  001208  0E07               	movlw	7
  1293  00120A  145B               	andwf	printf@flag+1,w,c
  1294  00120C  B4D8               	btfsc	status,2,c
  1295  00120E  D323               	goto	l2774
  1296                           
  1297                           ;doprnt.c: 827: if(flag & 0x1000)
  1298  001210  A85B               	btfss	printf@flag+1,4,c
  1299  001212  D005               	goto	l2620
  1300                           
  1301                           ;doprnt.c: 829: prec = 6;
  1302  001214  0E00               	movlw	0
  1303  001216  6E62               	movwf	printf@prec+1,c
  1304  001218  0E06               	movlw	6
  1305  00121A  6E61               	movwf	printf@prec,c
  1306  00121C  D000               	goto	l2620
  1307  00121E                     l2620:
  1308                           
  1309                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1310  00121E  C04E  FFD9         	movff	printf@ap,fsr2l
  1311  001222  C04F  FFDA         	movff	printf@ap+1,fsr2h
  1312  001226  CFDE F05E          	movff	postinc2,printf@fval
  1313  00122A  CFDE F05F          	movff	postinc2,printf@fval+1
  1314  00122E  CFDD F060          	movff	postdec2,printf@fval+2
  1315  001232  0E03               	movlw	3
  1316  001234  264E               	addwf	printf@ap,f,c
  1317  001236  0E00               	movlw	0
  1318  001238  224F               	addwfc	printf@ap+1,f,c
  1319                           
  1320                           ;doprnt.c: 831: if(fval < 0.0) {
  1321  00123A  AE60               	btfss	printf@fval+2,7,c
  1322  00123C  D011               	goto	l2630
  1323                           
  1324                           ;doprnt.c: 832: fval = -fval;
  1325  00123E  C05E  F001         	movff	printf@fval,___ftneg@f1
  1326  001242  C05F  F002         	movff	printf@fval+1,___ftneg@f1+1
  1327  001246  C060  F003         	movff	printf@fval+2,___ftneg@f1+2
  1328  00124A  EC88  F016         	call	___ftneg	;wreg free
  1329  00124E  C001  F05E         	movff	?___ftneg,printf@fval
  1330  001252  C002  F05F         	movff	?___ftneg+1,printf@fval+1
  1331  001256  C003  F060         	movff	?___ftneg+2,printf@fval+2
  1332                           
  1333                           ;doprnt.c: 833: flag |= 0x03;
  1334  00125A  0E03               	movlw	3
  1335  00125C  125A               	iorwf	printf@flag,f,c
  1336  00125E  D000               	goto	l2630
  1337  001260                     l2630:
  1338                           
  1339                           ;doprnt.c: 834: }
  1340                           ;doprnt.c: 835: exp = 0;
  1341  001260  0E00               	movlw	0
  1342  001262  6E59               	movwf	printf@exp+1,c
  1343  001264  0E00               	movlw	0
  1344  001266  6E58               	movwf	printf@exp,c
  1345                           
  1346                           ;doprnt.c: 836: if( fval!=0) {
  1347  001268  505E               	movf	printf@fval,w,c
  1348  00126A  105F               	iorwf	printf@fval+1,w,c
  1349  00126C  1060               	iorwf	printf@fval+2,w,c
  1350  00126E  B4D8               	btfsc	status,2,c
  1351  001270  D085               	goto	l2658
  1352                           
  1353                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1354  001272  0E82               	movlw	130
  1355  001274  6E45               	movwf	??_printf& (0+255),c
  1356  001276  0EFF               	movlw	255
  1357  001278  6E46               	movwf	(??_printf+1)& (0+255),c
  1358  00127A  C05E  F047         	movff	printf@fval,??_printf+2
  1359  00127E  C05F  F048         	movff	printf@fval+1,??_printf+3
  1360  001282  C060  F049         	movff	printf@fval+2,??_printf+4
  1361  001286  C061  F04A         	movff	printf@fval+3,??_printf+5
  1362  00128A  0E10               	movlw	16
  1363  00128C  D005               	goto	u2790
  1364  00128E                     u2795:
  1365  00128E  90D8               	bcf	status,0,c
  1366  001290  324A               	rrcf	??_printf+5,f,c
  1367  001292  3249               	rrcf	??_printf+4,f,c
  1368  001294  3248               	rrcf	??_printf+3,f,c
  1369  001296  3247               	rrcf	??_printf+2,f,c
  1370  001298                     u2790:
  1371  001298  2EE8               	decfsz	wreg,f,c
  1372  00129A  D7F9               	goto	u2795
  1373  00129C  5047               	movf	??_printf+2,w,c
  1374  00129E  2445               	addwf	??_printf,w,c
  1375  0012A0  6E58               	movwf	printf@exp,c
  1376  0012A2  0E00               	movlw	0
  1377  0012A4  2046               	addwfc	??_printf+1,w,c
  1378  0012A6  6E59               	movwf	printf@exp+1,c
  1379                           
  1380                           ;doprnt.c: 838: exp--;
  1381  0012A8  0658               	decf	printf@exp,f,c
  1382  0012AA  A0D8               	btfss	status,0,c
  1383  0012AC  0659               	decf	printf@exp+1,f,c
  1384                           
  1385                           ;doprnt.c: 839: exp *= 3;
  1386  0012AE  C058  F00F         	movff	printf@exp,___wmul@multiplier
  1387  0012B2  C059  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1388  0012B6  0E00               	movlw	0
  1389  0012B8  6E12               	movwf	___wmul@multiplicand+1,c
  1390  0012BA  0E03               	movlw	3
  1391  0012BC  6E11               	movwf	___wmul@multiplicand,c
  1392  0012BE  EC61  F016         	call	___wmul	;wreg free
  1393  0012C2  C00F  F058         	movff	?___wmul,printf@exp
  1394  0012C6  C010  F059         	movff	?___wmul+1,printf@exp+1
  1395                           
  1396                           ;doprnt.c: 840: exp /= 10;
  1397  0012CA  C058  F001         	movff	printf@exp,___awdiv@dividend
  1398  0012CE  C059  F002         	movff	printf@exp+1,___awdiv@dividend+1
  1399  0012D2  0E00               	movlw	0
  1400  0012D4  6E04               	movwf	___awdiv@divisor+1,c
  1401  0012D6  0E0A               	movlw	10
  1402  0012D8  6E03               	movwf	___awdiv@divisor,c
  1403  0012DA  EC30  F014         	call	___awdiv	;wreg free
  1404  0012DE  C001  F058         	movff	?___awdiv,printf@exp
  1405  0012E2  C002  F059         	movff	?___awdiv+1,printf@exp+1
  1406                           
  1407                           ;doprnt.c: 841: if(exp < 0)
  1408  0012E6  AE59               	btfss	printf@exp+1,7,c
  1409  0012E8  D004               	goto	l2646
  1410                           
  1411                           ;doprnt.c: 842: exp--;
  1412  0012EA  0658               	decf	printf@exp,f,c
  1413  0012EC  A0D8               	btfss	status,0,c
  1414  0012EE  0659               	decf	printf@exp+1,f,c
  1415  0012F0  D000               	goto	l2646
  1416  0012F2                     l2646:
  1417                           
  1418                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1419  0012F2  5058               	movf	printf@exp,w,c
  1420  0012F4  0800               	sublw	0
  1421  0012F6  ECE4  F00C         	call	_scale
  1422  0012FA  C024  F054         	movff	?_scale,printf@tmpval
  1423  0012FE  C025  F055         	movff	?_scale+1,printf@tmpval+1
  1424  001302  C026  F056         	movff	?_scale+2,printf@tmpval+2
  1425                           
  1426                           ;doprnt.c: 847: tmpval.integ *= fval;
  1427  001306  C054  F015         	movff	printf@tmpval,___ftmul@f1
  1428  00130A  C055  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  1429  00130E  C056  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  1430  001312  C05E  F018         	movff	printf@fval,___ftmul@f2
  1431  001316  C05F  F019         	movff	printf@fval+1,___ftmul@f2+1
  1432  00131A  C060  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1433  00131E  EC6D  F012         	call	___ftmul	;wreg free
  1434  001322  C015  F054         	movff	?___ftmul,printf@tmpval
  1435  001326  C016  F055         	movff	?___ftmul+1,printf@tmpval+1
  1436  00132A  C017  F056         	movff	?___ftmul+2,printf@tmpval+2
  1437                           
  1438                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1439  00132E  C054  F001         	movff	printf@tmpval,___ftge@ff1
  1440  001332  C055  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1441  001336  C056  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1442  00133A  0E00               	movlw	0
  1443  00133C  6E04               	movwf	___ftge@ff2,c
  1444  00133E  0E80               	movlw	128
  1445  001340  6E05               	movwf	___ftge@ff2+1,c
  1446  001342  0E3F               	movlw	63
  1447  001344  6E06               	movwf	___ftge@ff2+2,c
  1448  001346  EC7B  F014         	call	___ftge	;wreg free
  1449  00134A  B0D8               	btfsc	status,0,c
  1450  00134C  D004               	goto	l2654
  1451                           
  1452                           ;doprnt.c: 849: exp--;
  1453  00134E  0658               	decf	printf@exp,f,c
  1454  001350  A0D8               	btfss	status,0,c
  1455  001352  0659               	decf	printf@exp+1,f,c
  1456  001354  D013               	goto	l2658
  1457  001356                     l2654:
  1458                           
  1459                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1460  001356  C054  F001         	movff	printf@tmpval,___ftge@ff1
  1461  00135A  C055  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1462  00135E  C056  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1463  001362  0E00               	movlw	0
  1464  001364  6E04               	movwf	___ftge@ff2,c
  1465  001366  0E20               	movlw	32
  1466  001368  6E05               	movwf	___ftge@ff2+1,c
  1467  00136A  0E41               	movlw	65
  1468  00136C  6E06               	movwf	___ftge@ff2+2,c
  1469  00136E  EC7B  F014         	call	___ftge	;wreg free
  1470  001372  A0D8               	btfss	status,0,c
  1471  001374  D003               	goto	l2658
  1472                           
  1473                           ;doprnt.c: 851: exp++;
  1474  001376  4A58               	infsnz	printf@exp,f,c
  1475  001378  2A59               	incf	printf@exp+1,f,c
  1476  00137A  D000               	goto	l2658
  1477  00137C                     l2658:
  1478                           
  1479                           ;doprnt.c: 852: }
  1480                           ;doprnt.c: 1112: if(prec <= 12)
  1481  00137C  BE62               	btfsc	printf@prec+1,7,c
  1482  00137E  D006               	goto	l2660
  1483  001380  5062               	movf	printf@prec+1,w,c
  1484  001382  E11C               	bnz	l2662
  1485  001384  0E0D               	movlw	13
  1486  001386  5C61               	subwf	printf@prec,w,c
  1487  001388  B0D8               	btfsc	status,0,c
  1488  00138A  D018               	goto	l2662
  1489  00138C                     l2660:
  1490                           
  1491                           ;doprnt.c: 1113: fval += fround(prec);
  1492  00138C  C05E  F02E         	movff	printf@fval,___ftadd@f1
  1493  001390  C05F  F02F         	movff	printf@fval+1,___ftadd@f1+1
  1494  001394  C060  F030         	movff	printf@fval+2,___ftadd@f1+2
  1495  001398  5061               	movf	printf@prec,w,c
  1496  00139A  ECD4  F00E         	call	_fround
  1497  00139E  C024  F031         	movff	?_fround,___ftadd@f2
  1498  0013A2  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1499  0013A6  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1500  0013AA  ECF6  F00F         	call	___ftadd	;wreg free
  1501  0013AE  C02E  F05E         	movff	?___ftadd,printf@fval
  1502  0013B2  C02F  F05F         	movff	?___ftadd+1,printf@fval+1
  1503  0013B6  C030  F060         	movff	?___ftadd+2,printf@fval+2
  1504  0013BA  D000               	goto	l2662
  1505  0013BC                     l2662:
  1506                           
  1507                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1508  0013BC  BE59               	btfsc	printf@exp+1,7,c
  1509  0013BE  D006               	goto	l2664
  1510  0013C0  5059               	movf	printf@exp+1,w,c
  1511  0013C2  E120               	bnz	l2670
  1512  0013C4  0E0A               	movlw	10
  1513  0013C6  5C58               	subwf	printf@exp,w,c
  1514  0013C8  B0D8               	btfsc	status,0,c
  1515  0013CA  D01C               	goto	l2670
  1516  0013CC                     l2664:
  1517  0013CC  505E               	movf	printf@fval,w,c
  1518  0013CE  105F               	iorwf	printf@fval+1,w,c
  1519  0013D0  1060               	iorwf	printf@fval+2,w,c
  1520  0013D2  B4D8               	btfsc	status,2,c
  1521  0013D4  D06D               	goto	l2684
  1522  0013D6  C05E  F02B         	movff	printf@fval,___fttol@f1
  1523  0013DA  C05F  F02C         	movff	printf@fval+1,___fttol@f1+1
  1524  0013DE  C060  F02D         	movff	printf@fval+2,___fttol@f1+2
  1525  0013E2  ECE9  F012         	call	___fttol	;wreg free
  1526  0013E6  502B               	movf	?___fttol,w,c
  1527  0013E8  102C               	iorwf	?___fttol+1,w,c
  1528  0013EA  102D               	iorwf	?___fttol+2,w,c
  1529  0013EC  102E               	iorwf	?___fttol+3,w,c
  1530  0013EE  B4D8               	btfsc	status,2,c
  1531  0013F0  BE59               	btfsc	printf@exp+1,7,c
  1532  0013F2  D05E               	goto	l2684
  1533  0013F4  5059               	movf	printf@exp+1,w,c
  1534  0013F6  E106               	bnz	l2670
  1535  0013F8  0E02               	movlw	2
  1536  0013FA  5C58               	subwf	printf@exp,w,c
  1537  0013FC  B0D8               	btfsc	status,0,c
  1538  0013FE  D002               	goto	l2670
  1539  001400  D057               	goto	l2684
  1540  001402  D000               	goto	l2670
  1541  001404                     l2670:
  1542                           
  1543                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1544  001404  C054  F001         	movff	printf@tmpval,___ftge@ff1
  1545  001408  C055  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1546  00140C  C056  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1547  001410  0E70               	movlw	112
  1548  001412  6E04               	movwf	___ftge@ff2,c
  1549  001414  0E89               	movlw	137
  1550  001416  6E05               	movwf	___ftge@ff2+1,c
  1551  001418  0E40               	movlw	64
  1552  00141A  6E06               	movwf	___ftge@ff2+2,c
  1553  00141C  EC7B  F014         	call	___ftge	;wreg free
  1554  001420  B0D8               	btfsc	status,0,c
  1555  001422  D002               	goto	l2674
  1556                           
  1557                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1558  001424  0EF7               	movlw	247
  1559  001426  D001               	goto	L1
  1560  001428                     l2674:
  1561                           
  1562                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1563  001428  0EF8               	movlw	248
  1564  00142A                     L1:
  1565  00142A  2658               	addwf	printf@exp,f,c
  1566  00142C  0EFF               	movlw	255
  1567  00142E  2259               	addwfc	printf@exp+1,f,c
  1568  001430  D000               	goto	l2676
  1569  001432                     l2676:
  1570                           
  1571                           ;doprnt.c: 1124: }
  1572                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1573  001432  5058               	movf	printf@exp,w,c
  1574  001434  ECE4  F00C         	call	_scale
  1575  001438  C024  F054         	movff	?_scale,printf@tmpval
  1576  00143C  C025  F055         	movff	?_scale+1,printf@tmpval+1
  1577  001440  C026  F056         	movff	?_scale+2,printf@tmpval+2
  1578                           
  1579                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1580  001444  D017               	goto	l2680
  1581  001446  C05E  F001         	movff	printf@fval,__div_to_l_@f1
  1582  00144A  C05F  F002         	movff	printf@fval+1,__div_to_l_@f1+1
  1583  00144E  C060  F003         	movff	printf@fval+2,__div_to_l_@f1+2
  1584  001452  C054  F004         	movff	printf@tmpval,__div_to_l_@f2
  1585  001456  C055  F005         	movff	printf@tmpval+1,__div_to_l_@f2+1
  1586  00145A  C056  F006         	movff	printf@tmpval+2,__div_to_l_@f2+2
  1587  00145E  ECE8  F011         	call	__div_to_l_	;wreg free
  1588  001462  C001  F050         	movff	?__div_to_l_,printf@val
  1589  001466  C002  F051         	movff	?__div_to_l_+1,printf@val+1
  1590  00146A  C003  F052         	movff	?__div_to_l_+2,printf@val+2
  1591  00146E  C004  F053         	movff	?__div_to_l_+3,printf@val+3
  1592  001472  D017               	goto	l2682
  1593  001474                     l2680:
  1594  001474  C05E  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1595  001478  C05F  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1596  00147C  C060  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1597  001480  C054  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1598  001484  C055  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1599  001488  C056  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1600  00148C  EC60  F011         	call	__tdiv_to_l_	;wreg free
  1601  001490  C001  F050         	movff	?__tdiv_to_l_,printf@val
  1602  001494  C002  F051         	movff	?__tdiv_to_l_+1,printf@val+1
  1603  001498  C003  F052         	movff	?__tdiv_to_l_+2,printf@val+2
  1604  00149C  C004  F053         	movff	?__tdiv_to_l_+3,printf@val+3
  1605  0014A0  D000               	goto	l2682
  1606  0014A2                     l2682:
  1607                           
  1608                           ;doprnt.c: 1129: fval = 0.0;
  1609  0014A2  0E00               	movlw	0
  1610  0014A4  6E5E               	movwf	printf@fval,c
  1611  0014A6  0E00               	movlw	0
  1612  0014A8  6E5F               	movwf	printf@fval+1,c
  1613  0014AA  0E00               	movlw	0
  1614  0014AC  6E60               	movwf	printf@fval+2,c
  1615                           
  1616                           ;doprnt.c: 1130: } else {
  1617  0014AE  D033               	goto	l2688
  1618  0014B0                     l2684:
  1619                           
  1620                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1621  0014B0  C05E  F02B         	movff	printf@fval,___fttol@f1
  1622  0014B4  C05F  F02C         	movff	printf@fval+1,___fttol@f1+1
  1623  0014B8  C060  F02D         	movff	printf@fval+2,___fttol@f1+2
  1624  0014BC  ECE9  F012         	call	___fttol	;wreg free
  1625  0014C0  C02B  F050         	movff	?___fttol,printf@val
  1626  0014C4  C02C  F051         	movff	?___fttol+1,printf@val+1
  1627  0014C8  C02D  F052         	movff	?___fttol+2,printf@val+2
  1628  0014CC  C02E  F053         	movff	?___fttol+3,printf@val+3
  1629                           
  1630                           ;doprnt.c: 1132: fval -= (double)val;
  1631  0014D0  C05E  F03A         	movff	printf@fval,___ftsub@f1
  1632  0014D4  C05F  F03B         	movff	printf@fval+1,___ftsub@f1+1
  1633  0014D8  C060  F03C         	movff	printf@fval+2,___ftsub@f1+2
  1634  0014DC  C050  F009         	movff	printf@val,___lltoft@c
  1635  0014E0  C051  F00A         	movff	printf@val+1,___lltoft@c+1
  1636  0014E4  C052  F00B         	movff	printf@val+2,___lltoft@c+2
  1637  0014E8  C053  F00C         	movff	printf@val+3,___lltoft@c+3
  1638  0014EC  ECBD  F015         	call	___lltoft	;wreg free
  1639  0014F0  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1640  0014F4  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1641  0014F8  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1642  0014FC  ECED  F015         	call	___ftsub	;wreg free
  1643  001500  C03A  F05E         	movff	?___ftsub,printf@fval
  1644  001504  C03B  F05F         	movff	?___ftsub+1,printf@fval+1
  1645  001508  C03C  F060         	movff	?___ftsub+2,printf@fval+2
  1646                           
  1647                           ;doprnt.c: 1133: exp = 0;
  1648  00150C  0E00               	movlw	0
  1649  00150E  6E59               	movwf	printf@exp+1,c
  1650  001510  0E00               	movlw	0
  1651  001512  6E58               	movwf	printf@exp,c
  1652  001514  D000               	goto	l2688
  1653  001516                     l2688:
  1654                           
  1655                           ;doprnt.c: 1134: }
  1656                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1657  001516  0E01               	movlw	1
  1658  001518  6E63               	movwf	printf@c,c
  1659  00151A                     l2690:
  1660  00151A  0E0A               	movlw	10
  1661  00151C  1863               	xorwf	printf@c,w,c
  1662  00151E  B4D8               	btfsc	status,2,c
  1663  001520  D01C               	goto	l2702
  1664  001522  D001               	goto	l2694
  1665  001524  D01A               	goto	l2702
  1666  001526                     l2694:
  1667                           
  1668                           ;doprnt.c: 1137: if(val < dpowers[c])
  1669  001526  5063               	movf	printf@c,w,c
  1670  001528  0D04               	mullw	4
  1671  00152A  0E01               	movlw	low _dpowers
  1672  00152C  24F3               	addwf	prodl,w,c
  1673  00152E  6EF6               	movwf	tblptrl,c
  1674  001530  0E10               	movlw	high _dpowers
  1675  001532  20F4               	addwfc	prodh,w,c
  1676  001534  6EF7               	movwf	tblptrh,c
  1677  001536                     	if	0	;There are less than 3 active tblptr bytes
  1678  001536                     	endif
  1679  001536  0009               	tblrd		*+
  1680  001538  50F5               	movf	tablat,w,c
  1681  00153A  5C50               	subwf	printf@val,w,c
  1682  00153C  0009               	tblrd		*+
  1683  00153E  50F5               	movf	tablat,w,c
  1684  001540  5851               	subwfb	printf@val+1,w,c
  1685  001542  0009               	tblrd		*+
  1686  001544  50F5               	movf	tablat,w,c
  1687  001546  5852               	subwfb	printf@val+2,w,c
  1688  001548  0009               	tblrd		*+
  1689  00154A  50F5               	movf	tablat,w,c
  1690  00154C  5853               	subwfb	printf@val+3,w,c
  1691  00154E  A0D8               	btfss	status,0,c
  1692  001550  D004               	goto	l2702
  1693  001552  D001               	goto	l2698
  1694                           
  1695                           ;doprnt.c: 1138: break;
  1696  001554  D002               	goto	l2702
  1697  001556                     l2698:
  1698  001556  2A63               	incf	printf@c,f,c
  1699  001558  D7E0               	goto	l2690
  1700  00155A                     l2702:
  1701                           
  1702                           ;doprnt.c: 1142: width -= prec + c + exp;
  1703  00155A  C063  F045         	movff	printf@c,??_printf
  1704  00155E  6A46               	clrf	(??_printf+1)& (0+255),c
  1705  001560  BE45               	btfsc	??_printf& (0+255),7,c
  1706  001562  0646               	decf	(??_printf+1)& (0+255),f,c
  1707  001564  5061               	movf	printf@prec,w,c
  1708  001566  2645               	addwf	??_printf,f,c
  1709  001568  5062               	movf	printf@prec+1,w,c
  1710  00156A  2246               	addwfc	??_printf+1,f,c
  1711  00156C  5058               	movf	printf@exp,w,c
  1712  00156E  2645               	addwf	??_printf,f,c
  1713  001570  5059               	movf	printf@exp+1,w,c
  1714  001572  2246               	addwfc	??_printf+1,f,c
  1715  001574  5045               	movf	??_printf,w,c
  1716  001576  5E5C               	subwf	printf@width,f,c
  1717  001578  5046               	movf	??_printf+1,w,c
  1718  00157A  5A5D               	subwfb	printf@width+1,f,c
  1719                           
  1720                           ;doprnt.c: 1143: if(
  1721                           ;doprnt.c: 1147: prec)
  1722  00157C  5061               	movf	printf@prec,w,c
  1723  00157E  1062               	iorwf	printf@prec+1,w,c
  1724  001580  B4D8               	btfsc	status,2,c
  1725  001582  D004               	goto	l2706
  1726                           
  1727                           ;doprnt.c: 1148: width--;
  1728  001584  065C               	decf	printf@width,f,c
  1729  001586  A0D8               	btfss	status,0,c
  1730  001588  065D               	decf	printf@width+1,f,c
  1731  00158A  D000               	goto	l2706
  1732  00158C                     l2706:
  1733                           
  1734                           ;doprnt.c: 1149: if(flag & 0x03)
  1735  00158C  0E03               	movlw	3
  1736  00158E  145A               	andwf	printf@flag,w,c
  1737  001590  6E45               	movwf	??_printf& (0+255),c
  1738  001592  0E00               	movlw	0
  1739  001594  145B               	andwf	printf@flag+1,w,c
  1740  001596  6E46               	movwf	(??_printf+1)& (0+255),c
  1741  001598  5045               	movf	??_printf,w,c
  1742  00159A  1046               	iorwf	??_printf+1,w,c
  1743  00159C  B4D8               	btfsc	status,2,c
  1744  00159E  D004               	goto	l2710
  1745                           
  1746                           ;doprnt.c: 1150: width--;
  1747  0015A0  065C               	decf	printf@width,f,c
  1748  0015A2  A0D8               	btfss	status,0,c
  1749  0015A4  065D               	decf	printf@width+1,f,c
  1750  0015A6  D000               	goto	l2710
  1751  0015A8                     l2710:
  1752                           
  1753                           ;doprnt.c: 1153: if(flag & 0x04) {
  1754  0015A8  A45A               	btfss	printf@flag,2,c
  1755  0015AA  D026               	goto	l2726
  1756                           
  1757                           ;doprnt.c: 1157: if(flag & 0x03)
  1758  0015AC  0E03               	movlw	3
  1759  0015AE  145A               	andwf	printf@flag,w,c
  1760  0015B0  6E45               	movwf	??_printf& (0+255),c
  1761  0015B2  0E00               	movlw	0
  1762  0015B4  145B               	andwf	printf@flag+1,w,c
  1763  0015B6  6E46               	movwf	(??_printf+1)& (0+255),c
  1764  0015B8  5045               	movf	??_printf,w,c
  1765  0015BA  1046               	iorwf	??_printf+1,w,c
  1766  0015BC  B4D8               	btfsc	status,2,c
  1767  0015BE  D00B               	goto	l2720
  1768                           
  1769                           ;doprnt.c: 1159: (putch('-') );
  1770  0015C0  0E2D               	movlw	45
  1771  0015C2  ECE6  F016         	call	_putch
  1772                           
  1773                           ;doprnt.c: 1168: while(width > 0) {
  1774  0015C6  D007               	goto	l2720
  1775  0015C8                     l2716:
  1776                           
  1777                           ;doprnt.c: 1169: (putch('0') );
  1778  0015C8  0E30               	movlw	48
  1779  0015CA  ECE6  F016         	call	_putch
  1780                           
  1781                           ;doprnt.c: 1170: width--;
  1782  0015CE  065C               	decf	printf@width,f,c
  1783  0015D0  A0D8               	btfss	status,0,c
  1784  0015D2  065D               	decf	printf@width+1,f,c
  1785  0015D4  D000               	goto	l2720
  1786  0015D6                     l2720:
  1787  0015D6  BE5D               	btfsc	printf@width+1,7,c
  1788  0015D8  D069               	goto	l2738
  1789  0015DA  505D               	movf	printf@width+1,w,c
  1790  0015DC  E1F5               	bnz	l2716
  1791  0015DE  045C               	decf	printf@width,w,c
  1792  0015E0  A0D8               	btfss	status,0,c
  1793  0015E2  D064               	goto	l2738
  1794  0015E4  D7F1               	goto	l2716
  1795                           
  1796                           ;doprnt.c: 1171: }
  1797                           ;doprnt.c: 1173: } else
  1798  0015E6  D062               	goto	l2738
  1799                           
  1800                           ;doprnt.c: 1175: {
  1801                           ;doprnt.c: 1180: while(width > 0) {
  1802  0015E8  D007               	goto	l2726
  1803  0015EA                     l2722:
  1804                           
  1805                           ;doprnt.c: 1181: (putch(' ') );
  1806  0015EA  0E20               	movlw	32
  1807  0015EC  ECE6  F016         	call	_putch
  1808                           
  1809                           ;doprnt.c: 1182: width--;
  1810  0015F0  065C               	decf	printf@width,f,c
  1811  0015F2  A0D8               	btfss	status,0,c
  1812  0015F4  065D               	decf	printf@width+1,f,c
  1813  0015F6  D000               	goto	l2726
  1814  0015F8                     l2726:
  1815  0015F8  BE5D               	btfsc	printf@width+1,7,c
  1816  0015FA  D005               	goto	l2728
  1817  0015FC  505D               	movf	printf@width+1,w,c
  1818  0015FE  E1F5               	bnz	l2722
  1819  001600  045C               	decf	printf@width,w,c
  1820  001602  B0D8               	btfsc	status,0,c
  1821  001604  D7F2               	goto	l2722
  1822  001606                     l2728:
  1823                           
  1824                           ;doprnt.c: 1183: }
  1825                           ;doprnt.c: 1188: if(flag & 0x03)
  1826  001606  0E03               	movlw	3
  1827  001608  145A               	andwf	printf@flag,w,c
  1828  00160A  6E45               	movwf	??_printf& (0+255),c
  1829  00160C  0E00               	movlw	0
  1830  00160E  145B               	andwf	printf@flag+1,w,c
  1831  001610  6E46               	movwf	(??_printf+1)& (0+255),c
  1832  001612  5045               	movf	??_printf,w,c
  1833  001614  1046               	iorwf	??_printf+1,w,c
  1834  001616  B4D8               	btfsc	status,2,c
  1835  001618  D049               	goto	l2738
  1836                           
  1837                           ;doprnt.c: 1190: (putch('-') );
  1838  00161A  0E2D               	movlw	45
  1839  00161C  ECE6  F016         	call	_putch
  1840                           
  1841                           ;doprnt.c: 1195: }
  1842                           ;doprnt.c: 1196: while(c--) {
  1843  001620  D045               	goto	l2738
  1844  001622                     l2732:
  1845                           
  1846                           ;doprnt.c: 1200: {
  1847                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1848  001622  C050  F001         	movff	printf@val,___lldiv@dividend
  1849  001626  C051  F002         	movff	printf@val+1,___lldiv@dividend+1
  1850  00162A  C052  F003         	movff	printf@val+2,___lldiv@dividend+2
  1851  00162E  C053  F004         	movff	printf@val+3,___lldiv@dividend+3
  1852  001632  5063               	movf	printf@c,w,c
  1853  001634  0D04               	mullw	4
  1854  001636  0E01               	movlw	low _dpowers
  1855  001638  24F3               	addwf	prodl,w,c
  1856  00163A  6EF6               	movwf	tblptrl,c
  1857  00163C  0E10               	movlw	high _dpowers
  1858  00163E  20F4               	addwfc	prodh,w,c
  1859  001640  6EF7               	movwf	tblptrh,c
  1860  001642                     	if	0	;There are less than 3 active tblptr bytes
  1861  001642                     	endif
  1862  001642  0009               	tblrd		*+
  1863  001644  CFF5 F005          	movff	tablat,___lldiv@divisor
  1864  001648  0009               	tblrd		*+
  1865  00164A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1866  00164E  0009               	tblrd		*+
  1867  001650  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1868  001654  000A               	tblrd		*-
  1869  001656  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1870  00165A  ECC6  F014         	call	___lldiv	;wreg free
  1871  00165E  C001  F054         	movff	?___lldiv,printf@tmpval
  1872  001662  C002  F055         	movff	?___lldiv+1,printf@tmpval+1
  1873  001666  C003  F056         	movff	?___lldiv+2,printf@tmpval+2
  1874  00166A  C004  F057         	movff	?___lldiv+3,printf@tmpval+3
  1875                           
  1876                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1877  00166E  C054  F001         	movff	printf@tmpval,___llmod@dividend
  1878  001672  C055  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1879  001676  C056  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1880  00167A  C057  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1881  00167E  0E0A               	movlw	10
  1882  001680  6E05               	movwf	___llmod@divisor,c
  1883  001682  0E00               	movlw	0
  1884  001684  6E06               	movwf	___llmod@divisor+1,c
  1885  001686  0E00               	movlw	0
  1886  001688  6E07               	movwf	___llmod@divisor+2,c
  1887  00168A  0E00               	movlw	0
  1888  00168C  6E08               	movwf	___llmod@divisor+3,c
  1889  00168E  EC4D  F015         	call	___llmod	;wreg free
  1890  001692  C001  F054         	movff	?___llmod,printf@tmpval
  1891  001696  C002  F055         	movff	?___llmod+1,printf@tmpval+1
  1892  00169A  C003  F056         	movff	?___llmod+2,printf@tmpval+2
  1893  00169E  C004  F057         	movff	?___llmod+3,printf@tmpval+3
  1894                           
  1895                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1896  0016A2  5054               	movf	printf@tmpval,w,c
  1897  0016A4  0F30               	addlw	48
  1898  0016A6  ECE6  F016         	call	_putch
  1899  0016AA  D000               	goto	l2738
  1900  0016AC                     l2738:
  1901  0016AC  0663               	decf	printf@c,f,c
  1902  0016AE  2863               	incf	printf@c,w,c
  1903  0016B0  B4D8               	btfsc	status,2,c
  1904  0016B2  D009               	goto	l2744
  1905  0016B4  D7B6               	goto	l2732
  1906                           
  1907                           ;doprnt.c: 1204: }
  1908                           ;doprnt.c: 1206: }
  1909                           ;doprnt.c: 1207: while(exp > 0) {
  1910  0016B6  D007               	goto	l2744
  1911  0016B8                     l2740:
  1912                           
  1913                           ;doprnt.c: 1208: (putch('0') );
  1914  0016B8  0E30               	movlw	48
  1915  0016BA  ECE6  F016         	call	_putch
  1916                           
  1917                           ;doprnt.c: 1209: exp--;
  1918  0016BE  0658               	decf	printf@exp,f,c
  1919  0016C0  A0D8               	btfss	status,0,c
  1920  0016C2  0659               	decf	printf@exp+1,f,c
  1921  0016C4  D000               	goto	l2744
  1922  0016C6                     l2744:
  1923  0016C6  BE59               	btfsc	printf@exp+1,7,c
  1924  0016C8  D005               	goto	l2746
  1925  0016CA  5059               	movf	printf@exp+1,w,c
  1926  0016CC  E1F5               	bnz	l2740
  1927  0016CE  0458               	decf	printf@exp,w,c
  1928  0016D0  B0D8               	btfsc	status,0,c
  1929  0016D2  D7F2               	goto	l2740
  1930  0016D4                     l2746:
  1931                           
  1932                           ;doprnt.c: 1210: }
  1933                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1934  0016D4  BE62               	btfsc	printf@prec+1,7,c
  1935  0016D6  D009               	goto	l224
  1936  0016D8  5062               	movf	printf@prec+1,w,c
  1937  0016DA  E104               	bnz	u3010
  1938  0016DC  0E09               	movlw	9
  1939  0016DE  5C61               	subwf	printf@prec,w,c
  1940  0016E0  A0D8               	btfss	status,0,c
  1941  0016E2  D003               	goto	l224
  1942  0016E4                     u3010:
  1943                           
  1944                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1945  0016E4  0E08               	movlw	8
  1946  0016E6  6E63               	movwf	printf@c,c
  1947  0016E8  D003               	goto	l2750
  1948  0016EA                     l224:
  1949                           
  1950                           ;doprnt.c: 1213: else
  1951                           ;doprnt.c: 1214: c = prec;
  1952  0016EA  C061  F063         	movff	printf@prec,printf@c
  1953  0016EE  D000               	goto	l2750
  1954  0016F0                     l2750:
  1955                           
  1956                           ;doprnt.c: 1215: prec -= c;
  1957  0016F0  5063               	movf	printf@c,w,c
  1958  0016F2  5E61               	subwf	printf@prec,f,c
  1959  0016F4  0E00               	movlw	0
  1960  0016F6  BE63               	btfsc	printf@c,7,c
  1961  0016F8  0EFF               	movlw	255
  1962  0016FA  5A62               	subwfb	printf@prec+1,f,c
  1963                           
  1964                           ;doprnt.c: 1219: if(c)
  1965  0016FC  5063               	movf	printf@c,w,c
  1966  0016FE  B4D8               	btfsc	status,2,c
  1967  001700  D004               	goto	l2756
  1968                           
  1969                           ;doprnt.c: 1221: (putch('.') );
  1970  001702  0E2E               	movlw	46
  1971  001704  ECE6  F016         	call	_putch
  1972  001708  D000               	goto	l2756
  1973  00170A                     l2756:
  1974                           
  1975                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1976  00170A  5063               	movf	printf@c,w,c
  1977  00170C  ECE4  F00C         	call	_scale
  1978  001710  C024  F04B         	movff	?_scale,_printf$1263
  1979  001714  C025  F04C         	movff	?_scale+1,_printf$1263+1
  1980  001718  C026  F04D         	movff	?_scale+2,_printf$1263+2
  1981                           
  1982                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1983  00171C  C05E  F018         	movff	printf@fval,___ftmul@f2
  1984  001720  C05F  F019         	movff	printf@fval+1,___ftmul@f2+1
  1985  001724  C060  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1986  001728  C04B  F015         	movff	_printf$1263,___ftmul@f1
  1987  00172C  C04C  F016         	movff	_printf$1263+1,___ftmul@f1+1
  1988  001730  C04D  F017         	movff	_printf$1263+2,___ftmul@f1+2
  1989  001734  EC6D  F012         	call	___ftmul	;wreg free
  1990  001738  C015  F02B         	movff	?___ftmul,___fttol@f1
  1991  00173C  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  1992  001740  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  1993  001744  ECE9  F012         	call	___fttol	;wreg free
  1994  001748  C02B  F050         	movff	?___fttol,printf@val
  1995  00174C  C02C  F051         	movff	?___fttol+1,printf@val+1
  1996  001750  C02D  F052         	movff	?___fttol+2,printf@val+2
  1997  001754  C02E  F053         	movff	?___fttol+3,printf@val+3
  1998                           
  1999                           ;doprnt.c: 1228: while(c--) {
  2000  001758  D06B               	goto	l2766
  2001  00175A                     l2760:
  2002                           
  2003                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2004  00175A  C050  F001         	movff	printf@val,___lldiv@dividend
  2005  00175E  C051  F002         	movff	printf@val+1,___lldiv@dividend+1
  2006  001762  C052  F003         	movff	printf@val+2,___lldiv@dividend+2
  2007  001766  C053  F004         	movff	printf@val+3,___lldiv@dividend+3
  2008  00176A  5063               	movf	printf@c,w,c
  2009  00176C  0D04               	mullw	4
  2010  00176E  0E01               	movlw	low _dpowers
  2011  001770  24F3               	addwf	prodl,w,c
  2012  001772  6EF6               	movwf	tblptrl,c
  2013  001774  0E10               	movlw	high _dpowers
  2014  001776  20F4               	addwfc	prodh,w,c
  2015  001778  6EF7               	movwf	tblptrh,c
  2016  00177A                     	if	0	;There are less than 3 active tblptr bytes
  2017  00177A                     	endif
  2018  00177A  0009               	tblrd		*+
  2019  00177C  CFF5 F005          	movff	tablat,___lldiv@divisor
  2020  001780  0009               	tblrd		*+
  2021  001782  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2022  001786  0009               	tblrd		*+
  2023  001788  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2024  00178C  000A               	tblrd		*-
  2025  00178E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2026  001792  ECC6  F014         	call	___lldiv	;wreg free
  2027  001796  C001  F054         	movff	?___lldiv,printf@tmpval
  2028  00179A  C002  F055         	movff	?___lldiv+1,printf@tmpval+1
  2029  00179E  C003  F056         	movff	?___lldiv+2,printf@tmpval+2
  2030  0017A2  C004  F057         	movff	?___lldiv+3,printf@tmpval+3
  2031                           
  2032                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2033  0017A6  C054  F001         	movff	printf@tmpval,___llmod@dividend
  2034  0017AA  C055  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  2035  0017AE  C056  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  2036  0017B2  C057  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  2037  0017B6  0E0A               	movlw	10
  2038  0017B8  6E05               	movwf	___llmod@divisor,c
  2039  0017BA  0E00               	movlw	0
  2040  0017BC  6E06               	movwf	___llmod@divisor+1,c
  2041  0017BE  0E00               	movlw	0
  2042  0017C0  6E07               	movwf	___llmod@divisor+2,c
  2043  0017C2  0E00               	movlw	0
  2044  0017C4  6E08               	movwf	___llmod@divisor+3,c
  2045  0017C6  EC4D  F015         	call	___llmod	;wreg free
  2046  0017CA  C001  F054         	movff	?___llmod,printf@tmpval
  2047  0017CE  C002  F055         	movff	?___llmod+1,printf@tmpval+1
  2048  0017D2  C003  F056         	movff	?___llmod+2,printf@tmpval+2
  2049  0017D6  C004  F057         	movff	?___llmod+3,printf@tmpval+3
  2050                           
  2051                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2052  0017DA  5054               	movf	printf@tmpval,w,c
  2053  0017DC  0F30               	addlw	48
  2054  0017DE  ECE6  F016         	call	_putch
  2055                           
  2056                           ;doprnt.c: 1232: val %= dpowers[c];
  2057  0017E2  C050  F001         	movff	printf@val,___llmod@dividend
  2058  0017E6  C051  F002         	movff	printf@val+1,___llmod@dividend+1
  2059  0017EA  C052  F003         	movff	printf@val+2,___llmod@dividend+2
  2060  0017EE  C053  F004         	movff	printf@val+3,___llmod@dividend+3
  2061  0017F2  5063               	movf	printf@c,w,c
  2062  0017F4  0D04               	mullw	4
  2063  0017F6  0E01               	movlw	low _dpowers
  2064  0017F8  24F3               	addwf	prodl,w,c
  2065  0017FA  6EF6               	movwf	tblptrl,c
  2066  0017FC  0E10               	movlw	high _dpowers
  2067  0017FE  20F4               	addwfc	prodh,w,c
  2068  001800  6EF7               	movwf	tblptrh,c
  2069  001802                     	if	0	;There are less than 3 active tblptr bytes
  2070  001802                     	endif
  2071  001802  0009               	tblrd		*+
  2072  001804  CFF5 F005          	movff	tablat,___llmod@divisor
  2073  001808  0009               	tblrd		*+
  2074  00180A  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2075  00180E  0009               	tblrd		*+
  2076  001810  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2077  001814  000A               	tblrd		*-
  2078  001816  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2079  00181A  EC4D  F015         	call	___llmod	;wreg free
  2080  00181E  C001  F050         	movff	?___llmod,printf@val
  2081  001822  C002  F051         	movff	?___llmod+1,printf@val+1
  2082  001826  C003  F052         	movff	?___llmod+2,printf@val+2
  2083  00182A  C004  F053         	movff	?___llmod+3,printf@val+3
  2084  00182E  D000               	goto	l2766
  2085  001830                     l2766:
  2086  001830  0663               	decf	printf@c,f,c
  2087  001832  2863               	incf	printf@c,w,c
  2088  001834  B4D8               	btfsc	status,2,c
  2089  001836  D009               	goto	l2772
  2090  001838  D790               	goto	l2760
  2091                           
  2092                           ;doprnt.c: 1233: }
  2093                           ;doprnt.c: 1235: while(prec) {
  2094  00183A  D007               	goto	l2772
  2095  00183C                     l2768:
  2096                           
  2097                           ;doprnt.c: 1236: (putch('0') );
  2098  00183C  0E30               	movlw	48
  2099  00183E  ECE6  F016         	call	_putch
  2100                           
  2101                           ;doprnt.c: 1237: prec--;
  2102  001842  0661               	decf	printf@prec,f,c
  2103  001844  A0D8               	btfss	status,0,c
  2104  001846  0662               	decf	printf@prec+1,f,c
  2105  001848  D000               	goto	l2772
  2106  00184A                     l2772:
  2107  00184A  5061               	movf	printf@prec,w,c
  2108  00184C  1062               	iorwf	printf@prec+1,w,c
  2109  00184E  B4D8               	btfsc	status,2,c
  2110  001850  D0AB               	goto	l2830
  2111  001852  D7F4               	goto	l2768
  2112                           
  2113                           ;doprnt.c: 1238: }
  2114                           ;doprnt.c: 1245: continue;
  2115  001854  D0A9               	goto	l2830
  2116  001856                     l2774:
  2117                           
  2118                           ;doprnt.c: 1246: }
  2119                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2120  001856  5061               	movf	printf@prec,w,c
  2121  001858  1062               	iorwf	printf@prec+1,w,c
  2122  00185A  A4D8               	btfss	status,2,c
  2123  00185C  D009               	goto	l2780
  2124  00185E  5050               	movf	printf@val,w,c
  2125  001860  1051               	iorwf	printf@val+1,w,c
  2126  001862  1052               	iorwf	printf@val+2,w,c
  2127  001864  1053               	iorwf	printf@val+3,w,c
  2128  001866  A4D8               	btfss	status,2,c
  2129  001868  D003               	goto	l2780
  2130                           
  2131                           ;doprnt.c: 1291: prec++;
  2132  00186A  4A61               	infsnz	printf@prec,f,c
  2133  00186C  2A62               	incf	printf@prec+1,f,c
  2134  00186E  D000               	goto	l2780
  2135  001870                     l2780:
  2136                           
  2137                           ;doprnt.c: 1339: if(c < prec)
  2138  001870  0E80               	movlw	128
  2139  001872  BE63               	btfsc	printf@c,7,c
  2140  001874  0E7F               	movlw	127
  2141  001876  6E45               	movwf	??_printf& (0+255),c
  2142  001878  5061               	movf	printf@prec,w,c
  2143  00187A  5C63               	subwf	printf@c,w,c
  2144  00187C  5062               	movf	printf@prec+1,w,c
  2145  00187E  0A80               	xorlw	128
  2146  001880  5845               	subwfb	??_printf& (0+255),w,c
  2147  001882  B0D8               	btfsc	status,0,c
  2148  001884  D003               	goto	l2784
  2149                           
  2150                           ;doprnt.c: 1340: c = prec;
  2151  001886  C061  F063         	movff	printf@prec,printf@c
  2152  00188A  D011               	goto	l2788
  2153  00188C                     l2784:
  2154                           
  2155                           ;doprnt.c: 1341: else if(prec < c)
  2156  00188C  5062               	movf	printf@prec+1,w,c
  2157  00188E  0A80               	xorlw	128
  2158  001890  6E45               	movwf	??_printf& (0+255),c
  2159  001892  5063               	movf	printf@c,w,c
  2160  001894  5C61               	subwf	printf@prec,w,c
  2161  001896  0E80               	movlw	128
  2162  001898  BE63               	btfsc	printf@c,7,c
  2163  00189A  0E7F               	movlw	127
  2164  00189C  5845               	subwfb	??_printf& (0+255),w,c
  2165  00189E  B0D8               	btfsc	status,0,c
  2166  0018A0  D006               	goto	l2788
  2167                           
  2168                           ;doprnt.c: 1342: prec = c;
  2169  0018A2  5063               	movf	printf@c,w,c
  2170  0018A4  6E61               	movwf	printf@prec,c
  2171  0018A6  6A62               	clrf	printf@prec+1,c
  2172  0018A8  BE61               	btfsc	printf@prec,7,c
  2173  0018AA  0662               	decf	printf@prec+1,f,c
  2174  0018AC  D000               	goto	l2788
  2175  0018AE                     l2788:
  2176                           
  2177                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2178  0018AE  505C               	movf	printf@width,w,c
  2179  0018B0  105D               	iorwf	printf@width+1,w,c
  2180  0018B2  B4D8               	btfsc	status,2,c
  2181  0018B4  D00E               	goto	l2794
  2182  0018B6  0E03               	movlw	3
  2183  0018B8  145A               	andwf	printf@flag,w,c
  2184  0018BA  6E45               	movwf	??_printf& (0+255),c
  2185  0018BC  0E00               	movlw	0
  2186  0018BE  145B               	andwf	printf@flag+1,w,c
  2187  0018C0  6E46               	movwf	(??_printf+1)& (0+255),c
  2188  0018C2  5045               	movf	??_printf,w,c
  2189  0018C4  1046               	iorwf	??_printf+1,w,c
  2190  0018C6  B4D8               	btfsc	status,2,c
  2191  0018C8  D004               	goto	l2794
  2192                           
  2193                           ;doprnt.c: 1346: width--;
  2194  0018CA  065C               	decf	printf@width,f,c
  2195  0018CC  A0D8               	btfss	status,0,c
  2196  0018CE  065D               	decf	printf@width+1,f,c
  2197  0018D0  D000               	goto	l2794
  2198  0018D2                     l2794:
  2199                           
  2200                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2201  0018D2  AC5B               	btfss	printf@flag+1,6,c
  2202  0018D4  D014               	goto	l2802
  2203                           
  2204                           ;doprnt.c: 1349: if(width > prec)
  2205  0018D6  505C               	movf	printf@width,w,c
  2206  0018D8  5C61               	subwf	printf@prec,w,c
  2207  0018DA  5062               	movf	printf@prec+1,w,c
  2208  0018DC  0A80               	xorlw	128
  2209  0018DE  6E45               	movwf	??_printf& (0+255),c
  2210  0018E0  505D               	movf	printf@width+1,w,c
  2211  0018E2  0A80               	xorlw	128
  2212  0018E4  5845               	subwfb	??_printf& (0+255),w,c
  2213  0018E6  B0D8               	btfsc	status,0,c
  2214  0018E8  D005               	goto	l2800
  2215                           
  2216                           ;doprnt.c: 1350: width -= prec;
  2217  0018EA  5061               	movf	printf@prec,w,c
  2218  0018EC  5E5C               	subwf	printf@width,f,c
  2219  0018EE  5062               	movf	printf@prec+1,w,c
  2220  0018F0  5A5D               	subwfb	printf@width+1,f,c
  2221  0018F2  D005               	goto	l2802
  2222  0018F4                     l2800:
  2223                           
  2224                           ;doprnt.c: 1351: else
  2225                           ;doprnt.c: 1352: width = 0;
  2226  0018F4  0E00               	movlw	0
  2227  0018F6  6E5D               	movwf	printf@width+1,c
  2228  0018F8  0E00               	movlw	0
  2229  0018FA  6E5C               	movwf	printf@width,c
  2230  0018FC  D000               	goto	l2802
  2231  0018FE                     l2802:
  2232                           
  2233                           ;doprnt.c: 1353: }
  2234                           ;doprnt.c: 1381: if(width > c)
  2235  0018FE  0E80               	movlw	128
  2236  001900  BE63               	btfsc	printf@c,7,c
  2237  001902  0E7F               	movlw	127
  2238  001904  6E45               	movwf	??_printf& (0+255),c
  2239  001906  505C               	movf	printf@width,w,c
  2240  001908  5C63               	subwf	printf@c,w,c
  2241  00190A  505D               	movf	printf@width+1,w,c
  2242  00190C  0A80               	xorlw	128
  2243  00190E  5845               	subwfb	??_printf& (0+255),w,c
  2244  001910  B0D8               	btfsc	status,0,c
  2245  001912  D007               	goto	l2806
  2246                           
  2247                           ;doprnt.c: 1382: width -= c;
  2248  001914  5063               	movf	printf@c,w,c
  2249  001916  5E5C               	subwf	printf@width,f,c
  2250  001918  0E00               	movlw	0
  2251  00191A  BE63               	btfsc	printf@c,7,c
  2252  00191C  0EFF               	movlw	255
  2253  00191E  5A5D               	subwfb	printf@width+1,f,c
  2254  001920  D005               	goto	l2808
  2255  001922                     l2806:
  2256                           
  2257                           ;doprnt.c: 1383: else
  2258                           ;doprnt.c: 1384: width = 0;
  2259  001922  0E00               	movlw	0
  2260  001924  6E5D               	movwf	printf@width+1,c
  2261  001926  0E00               	movlw	0
  2262  001928  6E5C               	movwf	printf@width,c
  2263  00192A  D000               	goto	l2808
  2264  00192C                     l2808:
  2265                           
  2266                           ;doprnt.c: 1387: if(flag & 0x04) {
  2267  00192C  A45A               	btfss	printf@flag,2,c
  2268  00192E  D01E               	goto	l2820
  2269                           
  2270                           ;doprnt.c: 1392: if(flag & 0x03)
  2271  001930  0E03               	movlw	3
  2272  001932  145A               	andwf	printf@flag,w,c
  2273  001934  6E45               	movwf	??_printf& (0+255),c
  2274  001936  0E00               	movlw	0
  2275  001938  145B               	andwf	printf@flag+1,w,c
  2276  00193A  6E46               	movwf	(??_printf+1)& (0+255),c
  2277  00193C  5045               	movf	??_printf,w,c
  2278  00193E  1046               	iorwf	??_printf+1,w,c
  2279  001940  B4D8               	btfsc	status,2,c
  2280  001942  D004               	goto	l2814
  2281                           
  2282                           ;doprnt.c: 1393: (putch('-') );
  2283  001944  0E2D               	movlw	45
  2284  001946  ECE6  F016         	call	_putch
  2285  00194A  D000               	goto	l2814
  2286  00194C                     l2814:
  2287                           
  2288                           ;doprnt.c: 1415: if(width)
  2289  00194C  505C               	movf	printf@width,w,c
  2290  00194E  105D               	iorwf	printf@width+1,w,c
  2291  001950  B4D8               	btfsc	status,2,c
  2292  001952  D02A               	goto	l2830
  2293  001954                     l2816:
  2294                           
  2295                           ;doprnt.c: 1417: (putch('0') );
  2296  001954  0E30               	movlw	48
  2297  001956  ECE6  F016         	call	_putch
  2298                           
  2299                           ;doprnt.c: 1418: while(--width);
  2300  00195A  065C               	decf	printf@width,f,c
  2301  00195C  A0D8               	btfss	status,0,c
  2302  00195E  065D               	decf	printf@width+1,f,c
  2303  001960  505C               	movf	printf@width,w,c
  2304  001962  105D               	iorwf	printf@width+1,w,c
  2305  001964  B4D8               	btfsc	status,2,c
  2306  001966  D020               	goto	l2830
  2307  001968  D7F5               	goto	l2816
  2308                           
  2309                           ;doprnt.c: 1420: } else
  2310  00196A  D01E               	goto	l2830
  2311  00196C                     l2820:
  2312                           
  2313                           ;doprnt.c: 1422: {
  2314                           ;doprnt.c: 1424: if(width
  2315                           ;doprnt.c: 1428: )
  2316  00196C  505C               	movf	printf@width,w,c
  2317  00196E  105D               	iorwf	printf@width+1,w,c
  2318  001970  B4D8               	btfsc	status,2,c
  2319  001972  D00C               	goto	l2826
  2320  001974                     l2822:
  2321                           
  2322                           ;doprnt.c: 1430: (putch(' ') );
  2323  001974  0E20               	movlw	32
  2324  001976  ECE6  F016         	call	_putch
  2325                           
  2326                           ;doprnt.c: 1431: while(--width);
  2327  00197A  065C               	decf	printf@width,f,c
  2328  00197C  A0D8               	btfss	status,0,c
  2329  00197E  065D               	decf	printf@width+1,f,c
  2330  001980  505C               	movf	printf@width,w,c
  2331  001982  105D               	iorwf	printf@width+1,w,c
  2332  001984  B4D8               	btfsc	status,2,c
  2333  001986  D002               	goto	l2826
  2334  001988  D7F5               	goto	l2822
  2335  00198A  D000               	goto	l2826
  2336  00198C                     l2826:
  2337                           
  2338                           ;doprnt.c: 1438: if(flag & 0x03)
  2339  00198C  0E03               	movlw	3
  2340  00198E  145A               	andwf	printf@flag,w,c
  2341  001990  6E45               	movwf	??_printf& (0+255),c
  2342  001992  0E00               	movlw	0
  2343  001994  145B               	andwf	printf@flag+1,w,c
  2344  001996  6E46               	movwf	(??_printf+1)& (0+255),c
  2345  001998  5045               	movf	??_printf,w,c
  2346  00199A  1046               	iorwf	??_printf+1,w,c
  2347  00199C  B4D8               	btfsc	status,2,c
  2348  00199E  D004               	goto	l2830
  2349                           
  2350                           ;doprnt.c: 1439: (putch('-') );
  2351  0019A0  0E2D               	movlw	45
  2352  0019A2  ECE6  F016         	call	_putch
  2353  0019A6  D000               	goto	l2830
  2354  0019A8                     l2830:
  2355  0019A8  C040  FFF6         	movff	printf@f,tblptrl
  2356  0019AC  C041  FFF7         	movff	printf@f+1,tblptrh
  2357  0019B0  4A40               	infsnz	printf@f,f,c
  2358  0019B2  2A41               	incf	printf@f+1,f,c
  2359  0019B4                     	if	0	;tblptru may be non-zero
  2360  0019B4                     	endif
  2361  0019B4                     	if	0	;tblptru may be non-zero
  2362  0019B4                     	endif
  2363  0019B4  0008               	tblrd		*
  2364  0019B6  CFF5 F063          	movff	tablat,printf@c
  2365  0019BA  5063               	movf	printf@c,w,c
  2366  0019BC  B4D8               	btfsc	status,2,c
  2367  0019BE  D003               	goto	l254
  2368  0019C0  EF4E  F008         	goto	l2568
  2369  0019C4  D000               	goto	l254
  2370  0019C6                     l254:
  2371  0019C6  0012               	return		;funcret
  2372  0019C8                     __end_of_printf:
  2373                           	opt stack 0
  2374                           tblptru	equ	0xFF8
  2375                           tblptrh	equ	0xFF7
  2376                           tblptrl	equ	0xFF6
  2377                           tablat	equ	0xFF5
  2378                           prodh	equ	0xFF4
  2379                           prodl	equ	0xFF3
  2380                           postinc0	equ	0xFEE
  2381                           wreg	equ	0xFE8
  2382                           postdec1	equ	0xFE5
  2383                           fsr1l	equ	0xFE1
  2384                           postinc2	equ	0xFDE
  2385                           postdec2	equ	0xFDD
  2386                           fsr2h	equ	0xFDA
  2387                           fsr2l	equ	0xFD9
  2388                           status	equ	0xFD8
  2389                           
  2390 ;; *************** function _scale *****************
  2391 ;; Defined at:
  2392 ;;		line 425 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;  scl             1    wreg     char 
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;  scl             1   41[COMRAM] char 
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  3   35[COMRAM] char 
  2399 ;; Registers used:
  2400 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2406 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;Total ram usage:        7 bytes
  2411 ;; Hardware stack levels used:    1
  2412 ;; Hardware stack levels required when called:    2
  2413 ;; This function calls:
  2414 ;;		___awdiv
  2415 ;;		___awmod
  2416 ;;		___ftmul
  2417 ;;		___wmul
  2418 ;; This function is called by:
  2419 ;;		_printf
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422                           
  2423                           	psect	text2
  2424  0019C8                     __ptext2:
  2425                           	opt stack 0
  2426  0019C8                     _scale:
  2427                           	opt stack 27
  2428                           
  2429                           ;incstack = 0
  2430                           ;scale@scl stored from wreg
  2431  0019C8  6E2A               	movwf	scale@scl,c
  2432                           
  2433                           ;doprnt.c: 428: if(scl < 0) {
  2434  0019CA  AE2A               	btfss	scale@scl,7,c
  2435  0019CC  D0EF               	goto	l2284
  2436                           
  2437                           ;doprnt.c: 429: scl = -scl;
  2438  0019CE  6C2A               	negf	scale@scl,c
  2439                           
  2440                           ;doprnt.c: 430: if(scl>=110)
  2441  0019D0  502A               	movf	scale@scl,w,c
  2442  0019D2  0A80               	xorlw	128
  2443  0019D4  0F12               	addlw	-238
  2444  0019D6  A0D8               	btfss	status,0,c
  2445  0019D8  D08D               	goto	l2274
  2446                           
  2447                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2448  0019DA  0E00               	movlw	0
  2449  0019DC  6E12               	movwf	___wmul@multiplicand+1,c
  2450  0019DE  0E03               	movlw	3
  2451  0019E0  6E11               	movwf	___wmul@multiplicand,c
  2452  0019E2  0E00               	movlw	0
  2453  0019E4  6E04               	movwf	___awdiv@divisor+1,c
  2454  0019E6  0E0A               	movlw	10
  2455  0019E8  6E03               	movwf	___awdiv@divisor,c
  2456  0019EA  0E00               	movlw	0
  2457  0019EC  6E0C               	movwf	___awmod@divisor+1,c
  2458  0019EE  0E64               	movlw	100
  2459  0019F0  6E0B               	movwf	___awmod@divisor,c
  2460  0019F2  502A               	movf	scale@scl,w,c
  2461  0019F4  6E09               	movwf	___awmod@dividend,c
  2462  0019F6  6A0A               	clrf	___awmod@dividend+1,c
  2463  0019F8  BE09               	btfsc	___awmod@dividend,7,c
  2464  0019FA  060A               	decf	___awmod@dividend+1,f,c
  2465  0019FC  EC0C  F015         	call	___awmod	;wreg free
  2466  001A00  C009  F001         	movff	?___awmod,___awdiv@dividend
  2467  001A04  C00A  F002         	movff	?___awmod+1,___awdiv@dividend+1
  2468  001A08  EC30  F014         	call	___awdiv	;wreg free
  2469  001A0C  0E09               	movlw	9
  2470  001A0E  2401               	addwf	?___awdiv,w,c
  2471  001A10  6E0F               	movwf	___wmul@multiplier,c
  2472  001A12  0E00               	movlw	0
  2473  001A14  2002               	addwfc	?___awdiv+1,w,c
  2474  001A16  6E10               	movwf	___wmul@multiplier+1,c
  2475  001A18  EC61  F016         	call	___wmul	;wreg free
  2476  001A1C  0E29               	movlw	low __npowers_
  2477  001A1E  240F               	addwf	?___wmul,w,c
  2478  001A20  6EF6               	movwf	tblptrl,c
  2479  001A22  0E10               	movlw	high __npowers_
  2480  001A24  2010               	addwfc	?___wmul+1,w,c
  2481  001A26  6EF7               	movwf	tblptrh,c
  2482  001A28                     	if	0	;There are less than 3 active tblptr bytes
  2483  001A28                     	endif
  2484  001A28  0009               	tblrd		*+
  2485  001A2A  CFF5 F018          	movff	tablat,___ftmul@f2
  2486  001A2E  0009               	tblrd		*+
  2487  001A30  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2488  001A34  000A               	tblrd		*-
  2489  001A36  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2490  001A3A  0E00               	movlw	0
  2491  001A3C  6E04               	movwf	___awdiv@divisor+1,c
  2492  001A3E  0E64               	movlw	100
  2493  001A40  6E03               	movwf	___awdiv@divisor,c
  2494  001A42  502A               	movf	scale@scl,w,c
  2495  001A44  6E01               	movwf	___awdiv@dividend,c
  2496  001A46  6A02               	clrf	___awdiv@dividend+1,c
  2497  001A48  BE01               	btfsc	___awdiv@dividend,7,c
  2498  001A4A  0602               	decf	___awdiv@dividend+1,f,c
  2499  001A4C  EC30  F014         	call	___awdiv	;wreg free
  2500  001A50  0E12               	movlw	18
  2501  001A52  2401               	addwf	?___awdiv,w,c
  2502  001A54  6E0F               	movwf	___wmul@multiplier,c
  2503  001A56  0E00               	movlw	0
  2504  001A58  2002               	addwfc	?___awdiv+1,w,c
  2505  001A5A  6E10               	movwf	___wmul@multiplier+1,c
  2506  001A5C  0E00               	movlw	0
  2507  001A5E  6E12               	movwf	___wmul@multiplicand+1,c
  2508  001A60  0E03               	movlw	3
  2509  001A62  6E11               	movwf	___wmul@multiplicand,c
  2510  001A64  EC61  F016         	call	___wmul	;wreg free
  2511  001A68  0E29               	movlw	low __npowers_
  2512  001A6A  240F               	addwf	?___wmul,w,c
  2513  001A6C  6EF6               	movwf	tblptrl,c
  2514  001A6E  0E10               	movlw	high __npowers_
  2515  001A70  2010               	addwfc	?___wmul+1,w,c
  2516  001A72  6EF7               	movwf	tblptrh,c
  2517  001A74                     	if	0	;There are less than 3 active tblptr bytes
  2518  001A74                     	endif
  2519  001A74  0009               	tblrd		*+
  2520  001A76  CFF5 F015          	movff	tablat,___ftmul@f1
  2521  001A7A  0009               	tblrd		*+
  2522  001A7C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2523  001A80  000A               	tblrd		*-
  2524  001A82  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2525  001A86  EC6D  F012         	call	___ftmul	;wreg free
  2526  001A8A  C015  F027         	movff	?___ftmul,_scale$1262
  2527  001A8E  C016  F028         	movff	?___ftmul+1,_scale$1262+1
  2528  001A92  C017  F029         	movff	?___ftmul+2,_scale$1262+2
  2529                           
  2530                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2531  001A96  C027  F015         	movff	_scale$1262,___ftmul@f1
  2532  001A9A  C028  F016         	movff	_scale$1262+1,___ftmul@f1+1
  2533  001A9E  C029  F017         	movff	_scale$1262+2,___ftmul@f1+2
  2534  001AA2  0E00               	movlw	0
  2535  001AA4  6E12               	movwf	___wmul@multiplicand+1,c
  2536  001AA6  0E03               	movlw	3
  2537  001AA8  6E11               	movwf	___wmul@multiplicand,c
  2538  001AAA  0E00               	movlw	0
  2539  001AAC  6E0C               	movwf	___awmod@divisor+1,c
  2540  001AAE  0E0A               	movlw	10
  2541  001AB0  6E0B               	movwf	___awmod@divisor,c
  2542  001AB2  502A               	movf	scale@scl,w,c
  2543  001AB4  6E09               	movwf	___awmod@dividend,c
  2544  001AB6  6A0A               	clrf	___awmod@dividend+1,c
  2545  001AB8  BE09               	btfsc	___awmod@dividend,7,c
  2546  001ABA  060A               	decf	___awmod@dividend+1,f,c
  2547  001ABC  EC0C  F015         	call	___awmod	;wreg free
  2548  001AC0  C009  F00F         	movff	?___awmod,___wmul@multiplier
  2549  001AC4  C00A  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2550  001AC8  EC61  F016         	call	___wmul	;wreg free
  2551  001ACC  0E29               	movlw	low __npowers_
  2552  001ACE  240F               	addwf	?___wmul,w,c
  2553  001AD0  6EF6               	movwf	tblptrl,c
  2554  001AD2  0E10               	movlw	high __npowers_
  2555  001AD4  2010               	addwfc	?___wmul+1,w,c
  2556  001AD6  6EF7               	movwf	tblptrh,c
  2557  001AD8                     	if	0	;There are less than 3 active tblptr bytes
  2558  001AD8                     	endif
  2559  001AD8  0009               	tblrd		*+
  2560  001ADA  CFF5 F018          	movff	tablat,___ftmul@f2
  2561  001ADE  0009               	tblrd		*+
  2562  001AE0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2563  001AE4  000A               	tblrd		*-
  2564  001AE6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2565  001AEA  EC6D  F012         	call	___ftmul	;wreg free
  2566  001AEE  D141               	goto	L5
  2567  001AF0  D15A               	goto	l153
  2568  001AF2  D054               	goto	l2280
  2569  001AF4                     l2274:
  2570                           
  2571                           ;doprnt.c: 432: else if(scl > 10)
  2572  001AF4  502A               	movf	scale@scl,w,c
  2573  001AF6  0A80               	xorlw	128
  2574  001AF8  0F75               	addlw	-139
  2575  001AFA  A0D8               	btfss	status,0,c
  2576  001AFC  D04F               	goto	l2280
  2577                           
  2578                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2579  001AFE  0E00               	movlw	0
  2580  001B00  6E04               	movwf	___awdiv@divisor+1,c
  2581  001B02  0E0A               	movlw	10
  2582  001B04  6E03               	movwf	___awdiv@divisor,c
  2583  001B06  502A               	movf	scale@scl,w,c
  2584  001B08  6E01               	movwf	___awdiv@dividend,c
  2585  001B0A  6A02               	clrf	___awdiv@dividend+1,c
  2586  001B0C  BE01               	btfsc	___awdiv@dividend,7,c
  2587  001B0E  0602               	decf	___awdiv@dividend+1,f,c
  2588  001B10  EC30  F014         	call	___awdiv	;wreg free
  2589  001B14  0E09               	movlw	9
  2590  001B16  2401               	addwf	?___awdiv,w,c
  2591  001B18  6E0F               	movwf	___wmul@multiplier,c
  2592  001B1A  0E00               	movlw	0
  2593  001B1C  2002               	addwfc	?___awdiv+1,w,c
  2594  001B1E  6E10               	movwf	___wmul@multiplier+1,c
  2595  001B20  0E00               	movlw	0
  2596  001B22  6E12               	movwf	___wmul@multiplicand+1,c
  2597  001B24  0E03               	movlw	3
  2598  001B26  6E11               	movwf	___wmul@multiplicand,c
  2599  001B28  EC61  F016         	call	___wmul	;wreg free
  2600  001B2C  0E29               	movlw	low __npowers_
  2601  001B2E  240F               	addwf	?___wmul,w,c
  2602  001B30  6EF6               	movwf	tblptrl,c
  2603  001B32  0E10               	movlw	high __npowers_
  2604  001B34  2010               	addwfc	?___wmul+1,w,c
  2605  001B36  6EF7               	movwf	tblptrh,c
  2606  001B38                     	if	0	;There are less than 3 active tblptr bytes
  2607  001B38                     	endif
  2608  001B38  0009               	tblrd		*+
  2609  001B3A  CFF5 F015          	movff	tablat,___ftmul@f1
  2610  001B3E  0009               	tblrd		*+
  2611  001B40  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2612  001B44  000A               	tblrd		*-
  2613  001B46  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2614  001B4A  0E00               	movlw	0
  2615  001B4C  6E12               	movwf	___wmul@multiplicand+1,c
  2616  001B4E  0E03               	movlw	3
  2617  001B50  6E11               	movwf	___wmul@multiplicand,c
  2618  001B52  0E00               	movlw	0
  2619  001B54  6E0C               	movwf	___awmod@divisor+1,c
  2620  001B56  0E0A               	movlw	10
  2621  001B58  6E0B               	movwf	___awmod@divisor,c
  2622  001B5A  502A               	movf	scale@scl,w,c
  2623  001B5C  6E09               	movwf	___awmod@dividend,c
  2624  001B5E  6A0A               	clrf	___awmod@dividend+1,c
  2625  001B60  BE09               	btfsc	___awmod@dividend,7,c
  2626  001B62  060A               	decf	___awmod@dividend+1,f,c
  2627  001B64  EC0C  F015         	call	___awmod	;wreg free
  2628  001B68  C009  F00F         	movff	?___awmod,___wmul@multiplier
  2629  001B6C  C00A  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2630  001B70  EC61  F016         	call	___wmul	;wreg free
  2631  001B74  0E29               	movlw	low __npowers_
  2632  001B76  240F               	addwf	?___wmul,w,c
  2633  001B78  6EF6               	movwf	tblptrl,c
  2634  001B7A  0E10               	movlw	high __npowers_
  2635  001B7C  2010               	addwfc	?___wmul+1,w,c
  2636  001B7E  6EF7               	movwf	tblptrh,c
  2637  001B80                     	if	0	;There are less than 3 active tblptr bytes
  2638  001B80                     	endif
  2639  001B80  0009               	tblrd		*+
  2640  001B82  CFF5 F018          	movff	tablat,___ftmul@f2
  2641  001B86  0009               	tblrd		*+
  2642  001B88  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2643  001B8C  000A               	tblrd		*-
  2644  001B8E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2645  001B92  EC6D  F012         	call	___ftmul	;wreg free
  2646  001B96  D0ED               	goto	L5
  2647  001B98  D106               	goto	l153
  2648  001B9A  D000               	goto	l2280
  2649  001B9C                     l2280:
  2650                           
  2651                           ;doprnt.c: 434: return _npowers_[scl];
  2652  001B9C  502A               	movf	scale@scl,w,c
  2653  001B9E  0D03               	mullw	3
  2654  001BA0  0E29               	movlw	low __npowers_
  2655  001BA2  24F3               	addwf	prodl,w,c
  2656  001BA4  6EF6               	movwf	tblptrl,c
  2657  001BA6  0E10               	movlw	high __npowers_
  2658  001BA8  D0F2               	goto	L4
  2659  001BAA  D0FD               	goto	l153
  2660  001BAC                     l2284:
  2661                           
  2662                           ;doprnt.c: 435: }
  2663                           ;doprnt.c: 436: if(scl>=110)
  2664  001BAC  502A               	movf	scale@scl,w,c
  2665  001BAE  0A80               	xorlw	128
  2666  001BB0  0F12               	addlw	-238
  2667  001BB2  A0D8               	btfss	status,0,c
  2668  001BB4  D08D               	goto	l2292
  2669                           
  2670                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2671  001BB6  0E00               	movlw	0
  2672  001BB8  6E12               	movwf	___wmul@multiplicand+1,c
  2673  001BBA  0E03               	movlw	3
  2674  001BBC  6E11               	movwf	___wmul@multiplicand,c
  2675  001BBE  0E00               	movlw	0
  2676  001BC0  6E04               	movwf	___awdiv@divisor+1,c
  2677  001BC2  0E0A               	movlw	10
  2678  001BC4  6E03               	movwf	___awdiv@divisor,c
  2679  001BC6  0E00               	movlw	0
  2680  001BC8  6E0C               	movwf	___awmod@divisor+1,c
  2681  001BCA  0E64               	movlw	100
  2682  001BCC  6E0B               	movwf	___awmod@divisor,c
  2683  001BCE  502A               	movf	scale@scl,w,c
  2684  001BD0  6E09               	movwf	___awmod@dividend,c
  2685  001BD2  6A0A               	clrf	___awmod@dividend+1,c
  2686  001BD4  BE09               	btfsc	___awmod@dividend,7,c
  2687  001BD6  060A               	decf	___awmod@dividend+1,f,c
  2688  001BD8  EC0C  F015         	call	___awmod	;wreg free
  2689  001BDC  C009  F001         	movff	?___awmod,___awdiv@dividend
  2690  001BE0  C00A  F002         	movff	?___awmod+1,___awdiv@dividend+1
  2691  001BE4  EC30  F014         	call	___awdiv	;wreg free
  2692  001BE8  0E09               	movlw	9
  2693  001BEA  2401               	addwf	?___awdiv,w,c
  2694  001BEC  6E0F               	movwf	___wmul@multiplier,c
  2695  001BEE  0E00               	movlw	0
  2696  001BF0  2002               	addwfc	?___awdiv+1,w,c
  2697  001BF2  6E10               	movwf	___wmul@multiplier+1,c
  2698  001BF4  EC61  F016         	call	___wmul	;wreg free
  2699  001BF8  0E50               	movlw	low __powers_
  2700  001BFA  240F               	addwf	?___wmul,w,c
  2701  001BFC  6EF6               	movwf	tblptrl,c
  2702  001BFE  0E10               	movlw	high __powers_
  2703  001C00  2010               	addwfc	?___wmul+1,w,c
  2704  001C02  6EF7               	movwf	tblptrh,c
  2705  001C04                     	if	0	;There are less than 3 active tblptr bytes
  2706  001C04                     	endif
  2707  001C04  0009               	tblrd		*+
  2708  001C06  CFF5 F018          	movff	tablat,___ftmul@f2
  2709  001C0A  0009               	tblrd		*+
  2710  001C0C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2711  001C10  000A               	tblrd		*-
  2712  001C12  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2713  001C16  0E00               	movlw	0
  2714  001C18  6E04               	movwf	___awdiv@divisor+1,c
  2715  001C1A  0E64               	movlw	100
  2716  001C1C  6E03               	movwf	___awdiv@divisor,c
  2717  001C1E  502A               	movf	scale@scl,w,c
  2718  001C20  6E01               	movwf	___awdiv@dividend,c
  2719  001C22  6A02               	clrf	___awdiv@dividend+1,c
  2720  001C24  BE01               	btfsc	___awdiv@dividend,7,c
  2721  001C26  0602               	decf	___awdiv@dividend+1,f,c
  2722  001C28  EC30  F014         	call	___awdiv	;wreg free
  2723  001C2C  0E12               	movlw	18
  2724  001C2E  2401               	addwf	?___awdiv,w,c
  2725  001C30  6E0F               	movwf	___wmul@multiplier,c
  2726  001C32  0E00               	movlw	0
  2727  001C34  2002               	addwfc	?___awdiv+1,w,c
  2728  001C36  6E10               	movwf	___wmul@multiplier+1,c
  2729  001C38  0E00               	movlw	0
  2730  001C3A  6E12               	movwf	___wmul@multiplicand+1,c
  2731  001C3C  0E03               	movlw	3
  2732  001C3E  6E11               	movwf	___wmul@multiplicand,c
  2733  001C40  EC61  F016         	call	___wmul	;wreg free
  2734  001C44  0E50               	movlw	low __powers_
  2735  001C46  240F               	addwf	?___wmul,w,c
  2736  001C48  6EF6               	movwf	tblptrl,c
  2737  001C4A  0E10               	movlw	high __powers_
  2738  001C4C  2010               	addwfc	?___wmul+1,w,c
  2739  001C4E  6EF7               	movwf	tblptrh,c
  2740  001C50                     	if	0	;There are less than 3 active tblptr bytes
  2741  001C50                     	endif
  2742  001C50  0009               	tblrd		*+
  2743  001C52  CFF5 F015          	movff	tablat,___ftmul@f1
  2744  001C56  0009               	tblrd		*+
  2745  001C58  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2746  001C5C  000A               	tblrd		*-
  2747  001C5E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2748  001C62  EC6D  F012         	call	___ftmul	;wreg free
  2749  001C66  C015  F027         	movff	?___ftmul,_scale$1262
  2750  001C6A  C016  F028         	movff	?___ftmul+1,_scale$1262+1
  2751  001C6E  C017  F029         	movff	?___ftmul+2,_scale$1262+2
  2752                           
  2753                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2754  001C72  C027  F015         	movff	_scale$1262,___ftmul@f1
  2755  001C76  C028  F016         	movff	_scale$1262+1,___ftmul@f1+1
  2756  001C7A  C029  F017         	movff	_scale$1262+2,___ftmul@f1+2
  2757  001C7E  0E00               	movlw	0
  2758  001C80  6E12               	movwf	___wmul@multiplicand+1,c
  2759  001C82  0E03               	movlw	3
  2760  001C84  6E11               	movwf	___wmul@multiplicand,c
  2761  001C86  0E00               	movlw	0
  2762  001C88  6E0C               	movwf	___awmod@divisor+1,c
  2763  001C8A  0E0A               	movlw	10
  2764  001C8C  6E0B               	movwf	___awmod@divisor,c
  2765  001C8E  502A               	movf	scale@scl,w,c
  2766  001C90  6E09               	movwf	___awmod@dividend,c
  2767  001C92  6A0A               	clrf	___awmod@dividend+1,c
  2768  001C94  BE09               	btfsc	___awmod@dividend,7,c
  2769  001C96  060A               	decf	___awmod@dividend+1,f,c
  2770  001C98  EC0C  F015         	call	___awmod	;wreg free
  2771  001C9C  C009  F00F         	movff	?___awmod,___wmul@multiplier
  2772  001CA0  C00A  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2773  001CA4  EC61  F016         	call	___wmul	;wreg free
  2774  001CA8  0E50               	movlw	low __powers_
  2775  001CAA  240F               	addwf	?___wmul,w,c
  2776  001CAC  6EF6               	movwf	tblptrl,c
  2777  001CAE  0E10               	movlw	high __powers_
  2778  001CB0  2010               	addwfc	?___wmul+1,w,c
  2779  001CB2  6EF7               	movwf	tblptrh,c
  2780  001CB4                     	if	0	;There are less than 3 active tblptr bytes
  2781  001CB4                     	endif
  2782  001CB4  0009               	tblrd		*+
  2783  001CB6  CFF5 F018          	movff	tablat,___ftmul@f2
  2784  001CBA  0009               	tblrd		*+
  2785  001CBC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2786  001CC0  000A               	tblrd		*-
  2787  001CC2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2788  001CC6  EC6D  F012         	call	___ftmul	;wreg free
  2789  001CCA  D053               	goto	L5
  2790  001CCC  D06C               	goto	l153
  2791  001CCE  D059               	goto	l2298
  2792  001CD0                     l2292:
  2793                           
  2794                           ;doprnt.c: 438: else if(scl > 10)
  2795  001CD0  502A               	movf	scale@scl,w,c
  2796  001CD2  0A80               	xorlw	128
  2797  001CD4  0F75               	addlw	-139
  2798  001CD6  A0D8               	btfss	status,0,c
  2799  001CD8  D054               	goto	l2298
  2800                           
  2801                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2802  001CDA  0E00               	movlw	0
  2803  001CDC  6E04               	movwf	___awdiv@divisor+1,c
  2804  001CDE  0E0A               	movlw	10
  2805  001CE0  6E03               	movwf	___awdiv@divisor,c
  2806  001CE2  502A               	movf	scale@scl,w,c
  2807  001CE4  6E01               	movwf	___awdiv@dividend,c
  2808  001CE6  6A02               	clrf	___awdiv@dividend+1,c
  2809  001CE8  BE01               	btfsc	___awdiv@dividend,7,c
  2810  001CEA  0602               	decf	___awdiv@dividend+1,f,c
  2811  001CEC  EC30  F014         	call	___awdiv	;wreg free
  2812  001CF0  0E09               	movlw	9
  2813  001CF2  2401               	addwf	?___awdiv,w,c
  2814  001CF4  6E0F               	movwf	___wmul@multiplier,c
  2815  001CF6  0E00               	movlw	0
  2816  001CF8  2002               	addwfc	?___awdiv+1,w,c
  2817  001CFA  6E10               	movwf	___wmul@multiplier+1,c
  2818  001CFC  0E00               	movlw	0
  2819  001CFE  6E12               	movwf	___wmul@multiplicand+1,c
  2820  001D00  0E03               	movlw	3
  2821  001D02  6E11               	movwf	___wmul@multiplicand,c
  2822  001D04  EC61  F016         	call	___wmul	;wreg free
  2823  001D08  0E50               	movlw	low __powers_
  2824  001D0A  240F               	addwf	?___wmul,w,c
  2825  001D0C  6EF6               	movwf	tblptrl,c
  2826  001D0E  0E10               	movlw	high __powers_
  2827  001D10  2010               	addwfc	?___wmul+1,w,c
  2828  001D12  6EF7               	movwf	tblptrh,c
  2829  001D14                     	if	0	;There are less than 3 active tblptr bytes
  2830  001D14                     	endif
  2831  001D14  0009               	tblrd		*+
  2832  001D16  CFF5 F015          	movff	tablat,___ftmul@f1
  2833  001D1A  0009               	tblrd		*+
  2834  001D1C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2835  001D20  000A               	tblrd		*-
  2836  001D22  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2837  001D26  0E00               	movlw	0
  2838  001D28  6E12               	movwf	___wmul@multiplicand+1,c
  2839  001D2A  0E03               	movlw	3
  2840  001D2C  6E11               	movwf	___wmul@multiplicand,c
  2841  001D2E  0E00               	movlw	0
  2842  001D30  6E0C               	movwf	___awmod@divisor+1,c
  2843  001D32  0E0A               	movlw	10
  2844  001D34  6E0B               	movwf	___awmod@divisor,c
  2845  001D36  502A               	movf	scale@scl,w,c
  2846  001D38  6E09               	movwf	___awmod@dividend,c
  2847  001D3A  6A0A               	clrf	___awmod@dividend+1,c
  2848  001D3C  BE09               	btfsc	___awmod@dividend,7,c
  2849  001D3E  060A               	decf	___awmod@dividend+1,f,c
  2850  001D40  EC0C  F015         	call	___awmod	;wreg free
  2851  001D44  C009  F00F         	movff	?___awmod,___wmul@multiplier
  2852  001D48  C00A  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2853  001D4C  EC61  F016         	call	___wmul	;wreg free
  2854  001D50  0E50               	movlw	low __powers_
  2855  001D52  240F               	addwf	?___wmul,w,c
  2856  001D54  6EF6               	movwf	tblptrl,c
  2857  001D56  0E10               	movlw	high __powers_
  2858  001D58  2010               	addwfc	?___wmul+1,w,c
  2859  001D5A  6EF7               	movwf	tblptrh,c
  2860  001D5C                     	if	0	;There are less than 3 active tblptr bytes
  2861  001D5C                     	endif
  2862  001D5C  0009               	tblrd		*+
  2863  001D5E  CFF5 F018          	movff	tablat,___ftmul@f2
  2864  001D62  0009               	tblrd		*+
  2865  001D64  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2866  001D68  000A               	tblrd		*-
  2867  001D6A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2868  001D6E  EC6D  F012         	call	___ftmul	;wreg free
  2869  001D72                     L5:
  2870  001D72  C015  F024         	movff	?___ftmul,?_scale
  2871  001D76  C016  F025         	movff	?___ftmul+1,?_scale+1
  2872  001D7A  C017  F026         	movff	?___ftmul+2,?_scale+2
  2873  001D7E  D013               	goto	l153
  2874  001D80  D000               	goto	l2298
  2875  001D82                     l2298:
  2876                           
  2877                           ;doprnt.c: 440: return _powers_[scl];
  2878  001D82  502A               	movf	scale@scl,w,c
  2879  001D84  0D03               	mullw	3
  2880  001D86  0E50               	movlw	low __powers_
  2881  001D88  24F3               	addwf	prodl,w,c
  2882  001D8A  6EF6               	movwf	tblptrl,c
  2883  001D8C  0E10               	movlw	high __powers_
  2884  001D8E                     L4:
  2885  001D8E  20F4               	addwfc	prodh,w,c
  2886  001D90  6EF7               	movwf	tblptrh,c
  2887  001D92                     	if	0	;There are less than 3 active tblptr bytes
  2888  001D92                     	endif
  2889  001D92  0009               	tblrd		*+
  2890  001D94  CFF5 F024          	movff	tablat,?_scale
  2891  001D98  0009               	tblrd		*+
  2892  001D9A  CFF5 F025          	movff	tablat,?_scale+1
  2893  001D9E  000A               	tblrd		*-
  2894  001DA0  CFF5 F026          	movff	tablat,?_scale+2
  2895  001DA4  D000               	goto	l153
  2896  001DA6                     l153:
  2897  001DA6  0012               	return		;funcret
  2898  001DA8                     __end_of_scale:
  2899                           	opt stack 0
  2900                           tblptru	equ	0xFF8
  2901                           tblptrh	equ	0xFF7
  2902                           tblptrl	equ	0xFF6
  2903                           tablat	equ	0xFF5
  2904                           prodh	equ	0xFF4
  2905                           prodl	equ	0xFF3
  2906                           postinc0	equ	0xFEE
  2907                           wreg	equ	0xFE8
  2908                           postdec1	equ	0xFE5
  2909                           fsr1l	equ	0xFE1
  2910                           postinc2	equ	0xFDE
  2911                           postdec2	equ	0xFDD
  2912                           fsr2h	equ	0xFDA
  2913                           fsr2l	equ	0xFD9
  2914                           status	equ	0xFD8
  2915                           
  2916 ;; *************** function _putch *****************
  2917 ;; Defined at:
  2918 ;;		line 86 in file "Lab6pA.c"
  2919 ;; Parameters:    Size  Location     Type
  2920 ;;  c               1    wreg     unsigned char 
  2921 ;; Auto vars:     Size  Location     Type
  2922 ;;  c               1    0[COMRAM] unsigned char 
  2923 ;; Return value:  Size  Location     Type
  2924 ;;		None               void
  2925 ;; Registers used:
  2926 ;;		wreg
  2927 ;; Tracked objects:
  2928 ;;		On entry : 0/0
  2929 ;;		On exit  : 0/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2933 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2935 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2936 ;;Total ram usage:        1 bytes
  2937 ;; Hardware stack levels used:    1
  2938 ;; This function calls:
  2939 ;;		Nothing
  2940 ;; This function is called by:
  2941 ;;		_printf
  2942 ;; This function uses a non-reentrant model
  2943 ;;
  2944                           
  2945                           	psect	text3
  2946  002DCC                     __ptext3:
  2947                           	opt stack 0
  2948  002DCC                     _putch:
  2949                           	opt stack 29
  2950                           
  2951                           ;incstack = 0
  2952                           ;putch@c stored from wreg
  2953  002DCC  6E01               	movwf	putch@c,c
  2954                           
  2955                           ;Lab6pA.c: 88: while (!TRMT);
  2956  002DCE  D000               	goto	l92
  2957  002DD0                     l92:
  2958  002DD0  A2AC               	btfss	4012,1,c	;volatile
  2959  002DD2  D7FE               	goto	l92
  2960                           
  2961                           ;Lab6pA.c: 89: TXREG = c;
  2962  002DD4  C001  FFAD         	movff	putch@c,4013	;volatile
  2963  002DD8  0012               	return		;funcret
  2964  002DDA                     __end_of_putch:
  2965                           	opt stack 0
  2966                           tblptru	equ	0xFF8
  2967                           tblptrh	equ	0xFF7
  2968                           tblptrl	equ	0xFF6
  2969                           tablat	equ	0xFF5
  2970                           prodh	equ	0xFF4
  2971                           prodl	equ	0xFF3
  2972                           postinc0	equ	0xFEE
  2973                           wreg	equ	0xFE8
  2974                           postdec1	equ	0xFE5
  2975                           fsr1l	equ	0xFE1
  2976                           postinc2	equ	0xFDE
  2977                           postdec2	equ	0xFDD
  2978                           fsr2h	equ	0xFDA
  2979                           fsr2l	equ	0xFD9
  2980                           status	equ	0xFD8
  2981                           
  2982 ;; *************** function _isdigit *****************
  2983 ;; Defined at:
  2984 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2985 ;; Parameters:    Size  Location     Type
  2986 ;;  c               1    wreg     unsigned char 
  2987 ;; Auto vars:     Size  Location     Type
  2988 ;;  c               1    2[COMRAM] unsigned char 
  2989 ;; Return value:  Size  Location     Type
  2990 ;;		None               void
  2991 ;; Registers used:
  2992 ;;		wreg, status,2, status,0
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3000 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3002 ;;Total ram usage:        3 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; This function calls:
  3005 ;;		Nothing
  3006 ;; This function is called by:
  3007 ;;		_printf
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           	psect	text4
  3012  002D34                     __ptext4:
  3013                           	opt stack 0
  3014  002D34                     _isdigit:
  3015                           	opt stack 29
  3016                           
  3017                           ;incstack = 0
  3018                           ;isdigit@c stored from wreg
  3019  002D34  6E03               	movwf	isdigit@c,c
  3020  002D36  0E00               	movlw	0
  3021  002D38  6E02               	movwf	_isdigit$1031,c
  3022  002D3A  0E3A               	movlw	58
  3023  002D3C  6003               	cpfslt	isdigit@c,c
  3024  002D3E  D006               	goto	l2310
  3025  002D40  0E2F               	movlw	47
  3026  002D42  6403               	cpfsgt	isdigit@c,c
  3027  002D44  D003               	goto	l2310
  3028  002D46  0E01               	movlw	1
  3029  002D48  6E02               	movwf	_isdigit$1031,c
  3030  002D4A  D000               	goto	l2310
  3031  002D4C                     l2310:
  3032  002D4C  C002  F001         	movff	_isdigit$1031,??_isdigit
  3033  002D50  3001               	rrcf	??_isdigit,w,c
  3034  002D52  D000               	goto	l755
  3035  002D54                     l755:
  3036  002D54  0012               	return		;funcret
  3037  002D56                     __end_of_isdigit:
  3038                           	opt stack 0
  3039                           tblptru	equ	0xFF8
  3040                           tblptrh	equ	0xFF7
  3041                           tblptrl	equ	0xFF6
  3042                           tablat	equ	0xFF5
  3043                           prodh	equ	0xFF4
  3044                           prodl	equ	0xFF3
  3045                           postinc0	equ	0xFEE
  3046                           wreg	equ	0xFE8
  3047                           postdec1	equ	0xFE5
  3048                           fsr1l	equ	0xFE1
  3049                           postinc2	equ	0xFDE
  3050                           postdec2	equ	0xFDD
  3051                           fsr2h	equ	0xFDA
  3052                           fsr2l	equ	0xFD9
  3053                           status	equ	0xFD8
  3054                           
  3055 ;; *************** function _fround *****************
  3056 ;; Defined at:
  3057 ;;		line 409 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;  prec            1    wreg     unsigned char 
  3060 ;; Auto vars:     Size  Location     Type
  3061 ;;  prec            1   44[COMRAM] unsigned char 
  3062 ;; Return value:  Size  Location     Type
  3063 ;;                  3   35[COMRAM] unsigned char 
  3064 ;; Registers used:
  3065 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3071 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3072 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;Total ram usage:       10 bytes
  3076 ;; Hardware stack levels used:    1
  3077 ;; Hardware stack levels required when called:    2
  3078 ;; This function calls:
  3079 ;;		___awdiv
  3080 ;;		___awmod
  3081 ;;		___ftmul
  3082 ;;		___wmul
  3083 ;; This function is called by:
  3084 ;;		_printf
  3085 ;; This function uses a non-reentrant model
  3086 ;;
  3087                           
  3088                           	psect	text5
  3089  001DA8                     __ptext5:
  3090                           	opt stack 0
  3091  001DA8                     _fround:
  3092                           	opt stack 27
  3093                           
  3094                           ;incstack = 0
  3095                           ;fround@prec stored from wreg
  3096  001DA8  6E2D               	movwf	fround@prec,c
  3097                           
  3098                           ;doprnt.c: 413: if(prec>=110)
  3099  001DAA  0E6D               	movlw	109
  3100  001DAC  642D               	cpfsgt	fround@prec,c
  3101  001DAE  D09B               	goto	l2252
  3102                           
  3103                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3104  001DB0  0E00               	movlw	0
  3105  001DB2  6E12               	movwf	___wmul@multiplicand+1,c
  3106  001DB4  0E03               	movlw	3
  3107  001DB6  6E11               	movwf	___wmul@multiplicand,c
  3108  001DB8  0E00               	movlw	0
  3109  001DBA  6E04               	movwf	___awdiv@divisor+1,c
  3110  001DBC  0E0A               	movlw	10
  3111  001DBE  6E03               	movwf	___awdiv@divisor,c
  3112  001DC0  0E00               	movlw	0
  3113  001DC2  6E0C               	movwf	___awmod@divisor+1,c
  3114  001DC4  0E64               	movlw	100
  3115  001DC6  6E0B               	movwf	___awmod@divisor,c
  3116  001DC8  C02D  F009         	movff	fround@prec,___awmod@dividend
  3117  001DCC  6A0A               	clrf	___awmod@dividend+1,c
  3118  001DCE  EC0C  F015         	call	___awmod	;wreg free
  3119  001DD2  C009  F001         	movff	?___awmod,___awdiv@dividend
  3120  001DD6  C00A  F002         	movff	?___awmod+1,___awdiv@dividend+1
  3121  001DDA  EC30  F014         	call	___awdiv	;wreg free
  3122  001DDE  0E09               	movlw	9
  3123  001DE0  2401               	addwf	?___awdiv,w,c
  3124  001DE2  6E0F               	movwf	___wmul@multiplier,c
  3125  001DE4  0E00               	movlw	0
  3126  001DE6  2002               	addwfc	?___awdiv+1,w,c
  3127  001DE8  6E10               	movwf	___wmul@multiplier+1,c
  3128  001DEA  EC61  F016         	call	___wmul	;wreg free
  3129  001DEE  0E29               	movlw	low __npowers_
  3130  001DF0  240F               	addwf	?___wmul,w,c
  3131  001DF2  6EF6               	movwf	tblptrl,c
  3132  001DF4  0E10               	movlw	high __npowers_
  3133  001DF6  2010               	addwfc	?___wmul+1,w,c
  3134  001DF8  6EF7               	movwf	tblptrh,c
  3135  001DFA                     	if	0	;There are less than 3 active tblptr bytes
  3136  001DFA                     	endif
  3137  001DFA  0009               	tblrd		*+
  3138  001DFC  CFF5 F018          	movff	tablat,___ftmul@f2
  3139  001E00  0009               	tblrd		*+
  3140  001E02  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3141  001E06  000A               	tblrd		*-
  3142  001E08  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3143  001E0C  0E00               	movlw	0
  3144  001E0E  6E04               	movwf	___awdiv@divisor+1,c
  3145  001E10  0E64               	movlw	100
  3146  001E12  6E03               	movwf	___awdiv@divisor,c
  3147  001E14  C02D  F001         	movff	fround@prec,___awdiv@dividend
  3148  001E18  6A02               	clrf	___awdiv@dividend+1,c
  3149  001E1A  EC30  F014         	call	___awdiv	;wreg free
  3150  001E1E  0E12               	movlw	18
  3151  001E20  2401               	addwf	?___awdiv,w,c
  3152  001E22  6E0F               	movwf	___wmul@multiplier,c
  3153  001E24  0E00               	movlw	0
  3154  001E26  2002               	addwfc	?___awdiv+1,w,c
  3155  001E28  6E10               	movwf	___wmul@multiplier+1,c
  3156  001E2A  0E00               	movlw	0
  3157  001E2C  6E12               	movwf	___wmul@multiplicand+1,c
  3158  001E2E  0E03               	movlw	3
  3159  001E30  6E11               	movwf	___wmul@multiplicand,c
  3160  001E32  EC61  F016         	call	___wmul	;wreg free
  3161  001E36  0E29               	movlw	low __npowers_
  3162  001E38  240F               	addwf	?___wmul,w,c
  3163  001E3A  6EF6               	movwf	tblptrl,c
  3164  001E3C  0E10               	movlw	high __npowers_
  3165  001E3E  2010               	addwfc	?___wmul+1,w,c
  3166  001E40  6EF7               	movwf	tblptrh,c
  3167  001E42                     	if	0	;There are less than 3 active tblptr bytes
  3168  001E42                     	endif
  3169  001E42  0009               	tblrd		*+
  3170  001E44  CFF5 F015          	movff	tablat,___ftmul@f1
  3171  001E48  0009               	tblrd		*+
  3172  001E4A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3173  001E4E  000A               	tblrd		*-
  3174  001E50  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3175  001E54  EC6D  F012         	call	___ftmul	;wreg free
  3176  001E58  C015  F02A         	movff	?___ftmul,_fround$1260
  3177  001E5C  C016  F02B         	movff	?___ftmul+1,_fround$1260+1
  3178  001E60  C017  F02C         	movff	?___ftmul+2,_fround$1260+2
  3179                           
  3180                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3181  001E64  0E00               	movlw	0
  3182  001E66  6E12               	movwf	___wmul@multiplicand+1,c
  3183  001E68  0E03               	movlw	3
  3184  001E6A  6E11               	movwf	___wmul@multiplicand,c
  3185  001E6C  0E00               	movlw	0
  3186  001E6E  6E0C               	movwf	___awmod@divisor+1,c
  3187  001E70  0E0A               	movlw	10
  3188  001E72  6E0B               	movwf	___awmod@divisor,c
  3189  001E74  C02D  F009         	movff	fround@prec,___awmod@dividend
  3190  001E78  6A0A               	clrf	___awmod@dividend+1,c
  3191  001E7A  EC0C  F015         	call	___awmod	;wreg free
  3192  001E7E  C009  F00F         	movff	?___awmod,___wmul@multiplier
  3193  001E82  C00A  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3194  001E86  EC61  F016         	call	___wmul	;wreg free
  3195  001E8A  0E29               	movlw	low __npowers_
  3196  001E8C  240F               	addwf	?___wmul,w,c
  3197  001E8E  6EF6               	movwf	tblptrl,c
  3198  001E90  0E10               	movlw	high __npowers_
  3199  001E92  2010               	addwfc	?___wmul+1,w,c
  3200  001E94  6EF7               	movwf	tblptrh,c
  3201  001E96                     	if	0	;There are less than 3 active tblptr bytes
  3202  001E96                     	endif
  3203  001E96  0009               	tblrd		*+
  3204  001E98  CFF5 F018          	movff	tablat,___ftmul@f2
  3205  001E9C  0009               	tblrd		*+
  3206  001E9E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3207  001EA2  000A               	tblrd		*-
  3208  001EA4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3209  001EA8  C02A  F015         	movff	_fround$1260,___ftmul@f1
  3210  001EAC  C02B  F016         	movff	_fround$1260+1,___ftmul@f1+1
  3211  001EB0  C02C  F017         	movff	_fround$1260+2,___ftmul@f1+2
  3212  001EB4  EC6D  F012         	call	___ftmul	;wreg free
  3213  001EB8  C015  F027         	movff	?___ftmul,_fround$1261
  3214  001EBC  C016  F028         	movff	?___ftmul+1,_fround$1261+1
  3215  001EC0  C017  F029         	movff	?___ftmul+2,_fround$1261+2
  3216                           
  3217                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3218  001EC4  C027  F015         	movff	_fround$1261,___ftmul@f1
  3219  001EC8  C028  F016         	movff	_fround$1261+1,___ftmul@f1+1
  3220  001ECC  C029  F017         	movff	_fround$1261+2,___ftmul@f1+2
  3221  001ED0  0E00               	movlw	0
  3222  001ED2  6E18               	movwf	___ftmul@f2,c
  3223  001ED4  0E00               	movlw	0
  3224  001ED6  6E19               	movwf	___ftmul@f2+1,c
  3225  001ED8  0E3F               	movlw	63
  3226  001EDA  6E1A               	movwf	___ftmul@f2+2,c
  3227  001EDC  EC6D  F012         	call	___ftmul	;wreg free
  3228  001EE0  D07D               	goto	L7
  3229  001EE2  D083               	goto	l146
  3230  001EE4  D062               	goto	l2260
  3231  001EE6                     l2252:
  3232                           
  3233                           ;doprnt.c: 415: else if(prec > 10)
  3234  001EE6  0E0A               	movlw	10
  3235  001EE8  642D               	cpfsgt	fround@prec,c
  3236  001EEA  D05F               	goto	l2260
  3237                           
  3238                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3239  001EEC  0E00               	movlw	0
  3240  001EEE  6E12               	movwf	___wmul@multiplicand+1,c
  3241  001EF0  0E03               	movlw	3
  3242  001EF2  6E11               	movwf	___wmul@multiplicand,c
  3243  001EF4  0E00               	movlw	0
  3244  001EF6  6E0C               	movwf	___awmod@divisor+1,c
  3245  001EF8  0E0A               	movlw	10
  3246  001EFA  6E0B               	movwf	___awmod@divisor,c
  3247  001EFC  C02D  F009         	movff	fround@prec,___awmod@dividend
  3248  001F00  6A0A               	clrf	___awmod@dividend+1,c
  3249  001F02  EC0C  F015         	call	___awmod	;wreg free
  3250  001F06  C009  F00F         	movff	?___awmod,___wmul@multiplier
  3251  001F0A  C00A  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3252  001F0E  EC61  F016         	call	___wmul	;wreg free
  3253  001F12  0E29               	movlw	low __npowers_
  3254  001F14  240F               	addwf	?___wmul,w,c
  3255  001F16  6EF6               	movwf	tblptrl,c
  3256  001F18  0E10               	movlw	high __npowers_
  3257  001F1A  2010               	addwfc	?___wmul+1,w,c
  3258  001F1C  6EF7               	movwf	tblptrh,c
  3259  001F1E                     	if	0	;There are less than 3 active tblptr bytes
  3260  001F1E                     	endif
  3261  001F1E  0009               	tblrd		*+
  3262  001F20  CFF5 F018          	movff	tablat,___ftmul@f2
  3263  001F24  0009               	tblrd		*+
  3264  001F26  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3265  001F2A  000A               	tblrd		*-
  3266  001F2C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3267  001F30  0E00               	movlw	0
  3268  001F32  6E04               	movwf	___awdiv@divisor+1,c
  3269  001F34  0E0A               	movlw	10
  3270  001F36  6E03               	movwf	___awdiv@divisor,c
  3271  001F38  C02D  F001         	movff	fround@prec,___awdiv@dividend
  3272  001F3C  6A02               	clrf	___awdiv@dividend+1,c
  3273  001F3E  EC30  F014         	call	___awdiv	;wreg free
  3274  001F42  0E09               	movlw	9
  3275  001F44  2401               	addwf	?___awdiv,w,c
  3276  001F46  6E0F               	movwf	___wmul@multiplier,c
  3277  001F48  0E00               	movlw	0
  3278  001F4A  2002               	addwfc	?___awdiv+1,w,c
  3279  001F4C  6E10               	movwf	___wmul@multiplier+1,c
  3280  001F4E  0E00               	movlw	0
  3281  001F50  6E12               	movwf	___wmul@multiplicand+1,c
  3282  001F52  0E03               	movlw	3
  3283  001F54  6E11               	movwf	___wmul@multiplicand,c
  3284  001F56  EC61  F016         	call	___wmul	;wreg free
  3285  001F5A  0E29               	movlw	low __npowers_
  3286  001F5C  240F               	addwf	?___wmul,w,c
  3287  001F5E  6EF6               	movwf	tblptrl,c
  3288  001F60  0E10               	movlw	high __npowers_
  3289  001F62  2010               	addwfc	?___wmul+1,w,c
  3290  001F64  6EF7               	movwf	tblptrh,c
  3291  001F66                     	if	0	;There are less than 3 active tblptr bytes
  3292  001F66                     	endif
  3293  001F66  0009               	tblrd		*+
  3294  001F68  CFF5 F015          	movff	tablat,___ftmul@f1
  3295  001F6C  0009               	tblrd		*+
  3296  001F6E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3297  001F72  000A               	tblrd		*-
  3298  001F74  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3299  001F78  EC6D  F012         	call	___ftmul	;wreg free
  3300  001F7C  C015  F02A         	movff	?___ftmul,_fround$1260
  3301  001F80  C016  F02B         	movff	?___ftmul+1,_fround$1260+1
  3302  001F84  C017  F02C         	movff	?___ftmul+2,_fround$1260+2
  3303                           
  3304                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3305  001F88  C02A  F015         	movff	_fround$1260,___ftmul@f1
  3306  001F8C  C02B  F016         	movff	_fround$1260+1,___ftmul@f1+1
  3307  001F90  C02C  F017         	movff	_fround$1260+2,___ftmul@f1+2
  3308  001F94  0E00               	movlw	0
  3309  001F96  6E18               	movwf	___ftmul@f2,c
  3310  001F98  0E00               	movlw	0
  3311  001F9A  6E19               	movwf	___ftmul@f2+1,c
  3312  001F9C  0E3F               	movlw	63
  3313  001F9E  6E1A               	movwf	___ftmul@f2+2,c
  3314  001FA0  EC6D  F012         	call	___ftmul	;wreg free
  3315  001FA4  D01B               	goto	L7
  3316  001FA6  D021               	goto	l146
  3317  001FA8  D000               	goto	l2260
  3318  001FAA                     l2260:
  3319                           
  3320                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3321  001FAA  502D               	movf	fround@prec,w,c
  3322  001FAC  0D03               	mullw	3
  3323  001FAE  0E29               	movlw	low __npowers_
  3324  001FB0  24F3               	addwf	prodl,w,c
  3325  001FB2  6EF6               	movwf	tblptrl,c
  3326  001FB4  0E10               	movlw	high __npowers_
  3327  001FB6  20F4               	addwfc	prodh,w,c
  3328  001FB8  6EF7               	movwf	tblptrh,c
  3329  001FBA                     	if	0	;There are less than 3 active tblptr bytes
  3330  001FBA                     	endif
  3331  001FBA  0009               	tblrd		*+
  3332  001FBC  CFF5 F015          	movff	tablat,___ftmul@f1
  3333  001FC0  0009               	tblrd		*+
  3334  001FC2  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3335  001FC6  000A               	tblrd		*-
  3336  001FC8  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3337  001FCC  0E00               	movlw	0
  3338  001FCE  6E18               	movwf	___ftmul@f2,c
  3339  001FD0  0E00               	movlw	0
  3340  001FD2  6E19               	movwf	___ftmul@f2+1,c
  3341  001FD4  0E3F               	movlw	63
  3342  001FD6  6E1A               	movwf	___ftmul@f2+2,c
  3343  001FD8  EC6D  F012         	call	___ftmul	;wreg free
  3344  001FDC                     L7:
  3345  001FDC  C015  F024         	movff	?___ftmul,?_fround
  3346  001FE0  C016  F025         	movff	?___ftmul+1,?_fround+1
  3347  001FE4  C017  F026         	movff	?___ftmul+2,?_fround+2
  3348  001FE8  D000               	goto	l146
  3349  001FEA                     l146:
  3350  001FEA  0012               	return		;funcret
  3351  001FEC                     __end_of_fround:
  3352                           	opt stack 0
  3353                           tblptru	equ	0xFF8
  3354                           tblptrh	equ	0xFF7
  3355                           tblptrl	equ	0xFF6
  3356                           tablat	equ	0xFF5
  3357                           prodh	equ	0xFF4
  3358                           prodl	equ	0xFF3
  3359                           postinc0	equ	0xFEE
  3360                           wreg	equ	0xFE8
  3361                           postdec1	equ	0xFE5
  3362                           fsr1l	equ	0xFE1
  3363                           postinc2	equ	0xFDE
  3364                           postdec2	equ	0xFDD
  3365                           fsr2h	equ	0xFDA
  3366                           fsr2l	equ	0xFD9
  3367                           status	equ	0xFD8
  3368                           
  3369 ;; *************** function ___wmul *****************
  3370 ;; Defined at:
  3371 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;  multiplier      2   14[COMRAM] unsigned int 
  3374 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;  product         2   18[COMRAM] unsigned int 
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  2   14[COMRAM] unsigned int 
  3379 ;; Registers used:
  3380 ;;		wreg, status,2, status,0, prodl, prodh
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/0
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3386 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3387 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3389 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3390 ;;Total ram usage:        6 bytes
  3391 ;; Hardware stack levels used:    1
  3392 ;; This function calls:
  3393 ;;		Nothing
  3394 ;; This function is called by:
  3395 ;;		_fround
  3396 ;;		_scale
  3397 ;;		_printf
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           	psect	text6
  3402  002CC2                     __ptext6:
  3403                           	opt stack 0
  3404  002CC2                     ___wmul:
  3405                           	opt stack 28
  3406                           
  3407                           ;incstack = 0
  3408  002CC2  500F               	movf	___wmul@multiplier,w,c
  3409  002CC4  0211               	mulwf	___wmul@multiplicand,c
  3410  002CC6  CFF3 F013          	movff	prodl,___wmul@product
  3411  002CCA  CFF4 F014          	movff	prodh,___wmul@product+1
  3412  002CCE  500F               	movf	___wmul@multiplier,w,c
  3413  002CD0  0212               	mulwf	___wmul@multiplicand+1,c
  3414  002CD2  50F3               	movf	prodl,w,c
  3415  002CD4  2614               	addwf	___wmul@product+1,f,c
  3416  002CD6  5010               	movf	___wmul@multiplier+1,w,c
  3417  002CD8  0211               	mulwf	___wmul@multiplicand,c
  3418  002CDA  50F3               	movf	prodl,w,c
  3419  002CDC  2614               	addwf	___wmul@product+1,f,c
  3420  002CDE  C013  F00F         	movff	___wmul@product,?___wmul
  3421  002CE2  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3422  002CE6  D000               	goto	l290
  3423  002CE8                     l290:
  3424  002CE8  0012               	return		;funcret
  3425  002CEA                     __end_of___wmul:
  3426                           	opt stack 0
  3427                           tblptru	equ	0xFF8
  3428                           tblptrh	equ	0xFF7
  3429                           tblptrl	equ	0xFF6
  3430                           tablat	equ	0xFF5
  3431                           prodh	equ	0xFF4
  3432                           prodl	equ	0xFF3
  3433                           postinc0	equ	0xFEE
  3434                           wreg	equ	0xFE8
  3435                           postdec1	equ	0xFE5
  3436                           fsr1l	equ	0xFE1
  3437                           postinc2	equ	0xFDE
  3438                           postdec2	equ	0xFDD
  3439                           fsr2h	equ	0xFDA
  3440                           fsr2l	equ	0xFD9
  3441                           status	equ	0xFD8
  3442                           
  3443 ;; *************** function ___ftmul *****************
  3444 ;; Defined at:
  3445 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftmul.c"
  3446 ;; Parameters:    Size  Location     Type
  3447 ;;  f1              3   20[COMRAM] float 
  3448 ;;  f2              3   23[COMRAM] float 
  3449 ;; Auto vars:     Size  Location     Type
  3450 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3451 ;;  sign            1   34[COMRAM] unsigned char 
  3452 ;;  cntr            1   33[COMRAM] unsigned char 
  3453 ;;  exp             1   29[COMRAM] unsigned char 
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  3   20[COMRAM] float 
  3456 ;; Registers used:
  3457 ;;		wreg, status,2, status,0, cstack
  3458 ;; Tracked objects:
  3459 ;;		On entry : 0/0
  3460 ;;		On exit  : 0/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3463 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3466 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3467 ;;Total ram usage:       15 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; Hardware stack levels required when called:    1
  3470 ;; This function calls:
  3471 ;;		___ftpack
  3472 ;; This function is called by:
  3473 ;;		_fround
  3474 ;;		_scale
  3475 ;;		_printf
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479                           	psect	text7
  3480  0024DA                     __ptext7:
  3481                           	opt stack 0
  3482  0024DA                     ___ftmul:
  3483                           	opt stack 27
  3484                           
  3485                           ;incstack = 0
  3486  0024DA  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3487  0024DE  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3488  0024E0  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3489  0024E2  3416               	rlcf	___ftmul@f1+1,w,c
  3490  0024E4  361B               	rlcf	??___ftmul& (0+255),f,c
  3491  0024E6  E301               	bnc	u1951
  3492  0024E8  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3493  0024EA                     u1951:
  3494  0024EA  501B               	movf	??___ftmul,w,c
  3495  0024EC  6E1E               	movwf	___ftmul@exp,c
  3496  0024EE  501E               	movf	___ftmul@exp,w,c
  3497  0024F0  A4D8               	btfss	status,2,c
  3498  0024F2  D002               	goto	l2066
  3499  0024F4  D00E               	goto	l2068
  3500  0024F6  D06C               	goto	l719
  3501  0024F8                     l2066:
  3502  0024F8  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3503  0024FC  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3504  0024FE  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3505  002500  3419               	rlcf	___ftmul@f2+1,w,c
  3506  002502  361B               	rlcf	??___ftmul& (0+255),f,c
  3507  002504  E301               	bnc	u1971
  3508  002506  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3509  002508                     u1971:
  3510  002508  501B               	movf	??___ftmul,w,c
  3511  00250A  6E23               	movwf	___ftmul@sign,c
  3512  00250C  5023               	movf	___ftmul@sign,w,c
  3513  00250E  A4D8               	btfss	status,2,c
  3514  002510  D007               	goto	l2072
  3515  002512                     l2068:
  3516  002512  0E00               	movlw	0
  3517  002514  6E15               	movwf	?___ftmul,c
  3518  002516  0E00               	movlw	0
  3519  002518  6E16               	movwf	?___ftmul+1,c
  3520  00251A  0E00               	movlw	0
  3521  00251C  6E17               	movwf	?___ftmul+2,c
  3522  00251E  D058               	goto	l719
  3523  002520                     l2072:
  3524  002520  5023               	movf	___ftmul@sign,w,c
  3525  002522  0F7B               	addlw	123
  3526  002524  261E               	addwf	___ftmul@exp,f,c
  3527  002526  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3528  00252A  501A               	movf	___ftmul@f2+2,w,c
  3529  00252C  1A23               	xorwf	___ftmul@sign,f,c
  3530  00252E  0E80               	movlw	128
  3531  002530  1623               	andwf	___ftmul@sign,f,c
  3532  002532  8E16               	bsf	___ftmul@f1+1,7,c
  3533  002534  8E19               	bsf	___ftmul@f2+1,7,c
  3534  002536  0EFF               	movlw	255
  3535  002538  1618               	andwf	___ftmul@f2,f,c
  3536  00253A  0EFF               	movlw	255
  3537  00253C  1619               	andwf	___ftmul@f2+1,f,c
  3538  00253E  0E00               	movlw	0
  3539  002540  161A               	andwf	___ftmul@f2+2,f,c
  3540  002542  0E00               	movlw	0
  3541  002544  6E1F               	movwf	___ftmul@f3_as_product,c
  3542  002546  0E00               	movlw	0
  3543  002548  6E20               	movwf	___ftmul@f3_as_product+1,c
  3544  00254A  0E00               	movlw	0
  3545  00254C  6E21               	movwf	___ftmul@f3_as_product+2,c
  3546  00254E  0E07               	movlw	7
  3547  002550  6E22               	movwf	___ftmul@cntr,c
  3548  002552  D000               	goto	l2086
  3549  002554                     l2086:
  3550  002554  A015               	btfss	___ftmul@f1,0,c
  3551  002556  D007               	goto	l2090
  3552  002558  5018               	movf	___ftmul@f2,w,c
  3553  00255A  261F               	addwf	___ftmul@f3_as_product,f,c
  3554  00255C  5019               	movf	___ftmul@f2+1,w,c
  3555  00255E  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3556  002560  501A               	movf	___ftmul@f2+2,w,c
  3557  002562  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3558  002564  D000               	goto	l2090
  3559  002566                     l2090:
  3560  002566  90D8               	bcf	status,0,c
  3561  002568  3217               	rrcf	___ftmul@f1+2,f,c
  3562  00256A  3216               	rrcf	___ftmul@f1+1,f,c
  3563  00256C  3215               	rrcf	___ftmul@f1,f,c
  3564  00256E  90D8               	bcf	status,0,c
  3565  002570  3618               	rlcf	___ftmul@f2,f,c
  3566  002572  3619               	rlcf	___ftmul@f2+1,f,c
  3567  002574  361A               	rlcf	___ftmul@f2+2,f,c
  3568  002576  2E22               	decfsz	___ftmul@cntr,f,c
  3569  002578  D7ED               	goto	l2086
  3570  00257A  D000               	goto	l2094
  3571  00257C                     l2094:
  3572  00257C  0E09               	movlw	9
  3573  00257E  6E22               	movwf	___ftmul@cntr,c
  3574  002580  D000               	goto	l2096
  3575  002582                     l2096:
  3576  002582  A015               	btfss	___ftmul@f1,0,c
  3577  002584  D007               	goto	l2100
  3578  002586  5018               	movf	___ftmul@f2,w,c
  3579  002588  261F               	addwf	___ftmul@f3_as_product,f,c
  3580  00258A  5019               	movf	___ftmul@f2+1,w,c
  3581  00258C  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3582  00258E  501A               	movf	___ftmul@f2+2,w,c
  3583  002590  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3584  002592  D000               	goto	l2100
  3585  002594                     l2100:
  3586  002594  90D8               	bcf	status,0,c
  3587  002596  3217               	rrcf	___ftmul@f1+2,f,c
  3588  002598  3216               	rrcf	___ftmul@f1+1,f,c
  3589  00259A  3215               	rrcf	___ftmul@f1,f,c
  3590  00259C  90D8               	bcf	status,0,c
  3591  00259E  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3592  0025A0  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3593  0025A2  321F               	rrcf	___ftmul@f3_as_product,f,c
  3594  0025A4  2E22               	decfsz	___ftmul@cntr,f,c
  3595  0025A6  D7ED               	goto	l2096
  3596  0025A8  D000               	goto	l2104
  3597  0025AA                     l2104:
  3598  0025AA  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3599  0025AE  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3600  0025B2  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3601  0025B6  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3602  0025BA  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3603  0025BE  ECCD  F013         	call	___ftpack	;wreg free
  3604  0025C2  C001  F015         	movff	?___ftpack,?___ftmul
  3605  0025C6  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3606  0025CA  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3607  0025CE  D000               	goto	l719
  3608  0025D0                     l719:
  3609  0025D0  0012               	return		;funcret
  3610  0025D2                     __end_of___ftmul:
  3611                           	opt stack 0
  3612                           tblptru	equ	0xFF8
  3613                           tblptrh	equ	0xFF7
  3614                           tblptrl	equ	0xFF6
  3615                           tablat	equ	0xFF5
  3616                           prodh	equ	0xFF4
  3617                           prodl	equ	0xFF3
  3618                           postinc0	equ	0xFEE
  3619                           wreg	equ	0xFE8
  3620                           postdec1	equ	0xFE5
  3621                           fsr1l	equ	0xFE1
  3622                           postinc2	equ	0xFDE
  3623                           postdec2	equ	0xFDD
  3624                           fsr2h	equ	0xFDA
  3625                           fsr2l	equ	0xFD9
  3626                           status	equ	0xFD8
  3627                           
  3628 ;; *************** function ___awmod *****************
  3629 ;; Defined at:
  3630 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awmod.c"
  3631 ;; Parameters:    Size  Location     Type
  3632 ;;  dividend        2    8[COMRAM] int 
  3633 ;;  divisor         2   10[COMRAM] int 
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;  sign            1   13[COMRAM] unsigned char 
  3636 ;;  counter         1   12[COMRAM] unsigned char 
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  2    8[COMRAM] int 
  3639 ;; Registers used:
  3640 ;;		wreg, status,2, status,0
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3646 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;Total ram usage:        6 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; This function calls:
  3653 ;;		Nothing
  3654 ;; This function is called by:
  3655 ;;		_main
  3656 ;;		_fround
  3657 ;;		_scale
  3658 ;; This function uses a non-reentrant model
  3659 ;;
  3660                           
  3661                           	psect	text8
  3662  002A18                     __ptext8:
  3663                           	opt stack 0
  3664  002A18                     ___awmod:
  3665                           	opt stack 28
  3666                           
  3667                           ;incstack = 0
  3668  002A18  0E00               	movlw	0
  3669  002A1A  6E0E               	movwf	___awmod@sign,c
  3670  002A1C  AE0A               	btfss	___awmod@dividend+1,7,c
  3671  002A1E  D007               	goto	l2160
  3672  002A20  6C09               	negf	___awmod@dividend,c
  3673  002A22  1E0A               	comf	___awmod@dividend+1,f,c
  3674  002A24  B0D8               	btfsc	status,0,c
  3675  002A26  2A0A               	incf	___awmod@dividend+1,f,c
  3676  002A28  0E01               	movlw	1
  3677  002A2A  6E0E               	movwf	___awmod@sign,c
  3678  002A2C  D000               	goto	l2160
  3679  002A2E                     l2160:
  3680  002A2E  AE0C               	btfss	___awmod@divisor+1,7,c
  3681  002A30  D005               	goto	l2164
  3682  002A32  6C0B               	negf	___awmod@divisor,c
  3683  002A34  1E0C               	comf	___awmod@divisor+1,f,c
  3684  002A36  B0D8               	btfsc	status,0,c
  3685  002A38  2A0C               	incf	___awmod@divisor+1,f,c
  3686  002A3A  D000               	goto	l2164
  3687  002A3C                     l2164:
  3688  002A3C  500B               	movf	___awmod@divisor,w,c
  3689  002A3E  100C               	iorwf	___awmod@divisor+1,w,c
  3690  002A40  B4D8               	btfsc	status,2,c
  3691  002A42  D01D               	goto	l2180
  3692  002A44  0E01               	movlw	1
  3693  002A46  6E0D               	movwf	___awmod@counter,c
  3694  002A48  D005               	goto	l2170
  3695  002A4A                     l2168:
  3696  002A4A  90D8               	bcf	status,0,c
  3697  002A4C  360B               	rlcf	___awmod@divisor,f,c
  3698  002A4E  360C               	rlcf	___awmod@divisor+1,f,c
  3699  002A50  2A0D               	incf	___awmod@counter,f,c
  3700  002A52  D000               	goto	l2170
  3701  002A54                     l2170:
  3702  002A54  BE0C               	btfsc	___awmod@divisor+1,7,c
  3703  002A56  D002               	goto	l2172
  3704  002A58  D7F8               	goto	l2168
  3705  002A5A  D000               	goto	l2172
  3706  002A5C                     l2172:
  3707  002A5C  500B               	movf	___awmod@divisor,w,c
  3708  002A5E  5C09               	subwf	___awmod@dividend,w,c
  3709  002A60  500C               	movf	___awmod@divisor+1,w,c
  3710  002A62  580A               	subwfb	___awmod@dividend+1,w,c
  3711  002A64  A0D8               	btfss	status,0,c
  3712  002A66  D005               	goto	l2176
  3713  002A68  500B               	movf	___awmod@divisor,w,c
  3714  002A6A  5E09               	subwf	___awmod@dividend,f,c
  3715  002A6C  500C               	movf	___awmod@divisor+1,w,c
  3716  002A6E  5A0A               	subwfb	___awmod@dividend+1,f,c
  3717  002A70  D000               	goto	l2176
  3718  002A72                     l2176:
  3719  002A72  90D8               	bcf	status,0,c
  3720  002A74  320C               	rrcf	___awmod@divisor+1,f,c
  3721  002A76  320B               	rrcf	___awmod@divisor,f,c
  3722  002A78  2E0D               	decfsz	___awmod@counter,f,c
  3723  002A7A  D7F0               	goto	l2172
  3724  002A7C  D000               	goto	l2180
  3725  002A7E                     l2180:
  3726  002A7E  500E               	movf	___awmod@sign,w,c
  3727  002A80  B4D8               	btfsc	status,2,c
  3728  002A82  D005               	goto	l2184
  3729  002A84  6C09               	negf	___awmod@dividend,c
  3730  002A86  1E0A               	comf	___awmod@dividend+1,f,c
  3731  002A88  B0D8               	btfsc	status,0,c
  3732  002A8A  2A0A               	incf	___awmod@dividend+1,f,c
  3733  002A8C  D000               	goto	l2184
  3734  002A8E                     l2184:
  3735  002A8E  C009  F009         	movff	___awmod@dividend,?___awmod
  3736  002A92  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  3737  002A96  D000               	goto	l496
  3738  002A98                     l496:
  3739  002A98  0012               	return		;funcret
  3740  002A9A                     __end_of___awmod:
  3741                           	opt stack 0
  3742                           tblptru	equ	0xFF8
  3743                           tblptrh	equ	0xFF7
  3744                           tblptrl	equ	0xFF6
  3745                           tablat	equ	0xFF5
  3746                           prodh	equ	0xFF4
  3747                           prodl	equ	0xFF3
  3748                           postinc0	equ	0xFEE
  3749                           wreg	equ	0xFE8
  3750                           postdec1	equ	0xFE5
  3751                           fsr1l	equ	0xFE1
  3752                           postinc2	equ	0xFDE
  3753                           postdec2	equ	0xFDD
  3754                           fsr2h	equ	0xFDA
  3755                           fsr2l	equ	0xFD9
  3756                           status	equ	0xFD8
  3757                           
  3758 ;; *************** function ___awdiv *****************
  3759 ;; Defined at:
  3760 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3761 ;; Parameters:    Size  Location     Type
  3762 ;;  dividend        2    0[COMRAM] int 
  3763 ;;  divisor         2    2[COMRAM] int 
  3764 ;; Auto vars:     Size  Location     Type
  3765 ;;  quotient        2    6[COMRAM] int 
  3766 ;;  sign            1    5[COMRAM] unsigned char 
  3767 ;;  counter         1    4[COMRAM] unsigned char 
  3768 ;; Return value:  Size  Location     Type
  3769 ;;                  2    0[COMRAM] int 
  3770 ;; Registers used:
  3771 ;;		wreg, status,2, status,0
  3772 ;; Tracked objects:
  3773 ;;		On entry : 0/0
  3774 ;;		On exit  : 0/0
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3777 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3778 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3780 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3781 ;;Total ram usage:        8 bytes
  3782 ;; Hardware stack levels used:    1
  3783 ;; This function calls:
  3784 ;;		Nothing
  3785 ;; This function is called by:
  3786 ;;		_main
  3787 ;;		_fround
  3788 ;;		_scale
  3789 ;;		_printf
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           	psect	text9
  3794  002860                     __ptext9:
  3795                           	opt stack 0
  3796  002860                     ___awdiv:
  3797                           	opt stack 28
  3798                           
  3799                           ;incstack = 0
  3800  002860  0E00               	movlw	0
  3801  002862  6E06               	movwf	___awdiv@sign,c
  3802  002864  AE04               	btfss	___awdiv@divisor+1,7,c
  3803  002866  D007               	goto	l2116
  3804  002868  6C03               	negf	___awdiv@divisor,c
  3805  00286A  1E04               	comf	___awdiv@divisor+1,f,c
  3806  00286C  B0D8               	btfsc	status,0,c
  3807  00286E  2A04               	incf	___awdiv@divisor+1,f,c
  3808  002870  0E01               	movlw	1
  3809  002872  6E06               	movwf	___awdiv@sign,c
  3810  002874  D000               	goto	l2116
  3811  002876                     l2116:
  3812  002876  AE02               	btfss	___awdiv@dividend+1,7,c
  3813  002878  D007               	goto	l2122
  3814  00287A  6C01               	negf	___awdiv@dividend,c
  3815  00287C  1E02               	comf	___awdiv@dividend+1,f,c
  3816  00287E  B0D8               	btfsc	status,0,c
  3817  002880  2A02               	incf	___awdiv@dividend+1,f,c
  3818  002882  0E01               	movlw	1
  3819  002884  1A06               	xorwf	___awdiv@sign,f,c
  3820  002886  D000               	goto	l2122
  3821  002888                     l2122:
  3822  002888  0E00               	movlw	0
  3823  00288A  6E08               	movwf	___awdiv@quotient+1,c
  3824  00288C  0E00               	movlw	0
  3825  00288E  6E07               	movwf	___awdiv@quotient,c
  3826  002890  5003               	movf	___awdiv@divisor,w,c
  3827  002892  1004               	iorwf	___awdiv@divisor+1,w,c
  3828  002894  B4D8               	btfsc	status,2,c
  3829  002896  D021               	goto	l2144
  3830  002898  0E01               	movlw	1
  3831  00289A  6E05               	movwf	___awdiv@counter,c
  3832  00289C  D005               	goto	l2130
  3833  00289E                     l2128:
  3834  00289E  90D8               	bcf	status,0,c
  3835  0028A0  3603               	rlcf	___awdiv@divisor,f,c
  3836  0028A2  3604               	rlcf	___awdiv@divisor+1,f,c
  3837  0028A4  2A05               	incf	___awdiv@counter,f,c
  3838  0028A6  D000               	goto	l2130
  3839  0028A8                     l2130:
  3840  0028A8  BE04               	btfsc	___awdiv@divisor+1,7,c
  3841  0028AA  D002               	goto	l2132
  3842  0028AC  D7F8               	goto	l2128
  3843  0028AE  D000               	goto	l2132
  3844  0028B0                     l2132:
  3845  0028B0  90D8               	bcf	status,0,c
  3846  0028B2  3607               	rlcf	___awdiv@quotient,f,c
  3847  0028B4  3608               	rlcf	___awdiv@quotient+1,f,c
  3848  0028B6  5003               	movf	___awdiv@divisor,w,c
  3849  0028B8  5C01               	subwf	___awdiv@dividend,w,c
  3850  0028BA  5004               	movf	___awdiv@divisor+1,w,c
  3851  0028BC  5802               	subwfb	___awdiv@dividend+1,w,c
  3852  0028BE  A0D8               	btfss	status,0,c
  3853  0028C0  D006               	goto	l2140
  3854  0028C2  5003               	movf	___awdiv@divisor,w,c
  3855  0028C4  5E01               	subwf	___awdiv@dividend,f,c
  3856  0028C6  5004               	movf	___awdiv@divisor+1,w,c
  3857  0028C8  5A02               	subwfb	___awdiv@dividend+1,f,c
  3858  0028CA  8007               	bsf	___awdiv@quotient,0,c
  3859  0028CC  D000               	goto	l2140
  3860  0028CE                     l2140:
  3861  0028CE  90D8               	bcf	status,0,c
  3862  0028D0  3204               	rrcf	___awdiv@divisor+1,f,c
  3863  0028D2  3203               	rrcf	___awdiv@divisor,f,c
  3864  0028D4  2E05               	decfsz	___awdiv@counter,f,c
  3865  0028D6  D7EC               	goto	l2132
  3866  0028D8  D000               	goto	l2144
  3867  0028DA                     l2144:
  3868  0028DA  5006               	movf	___awdiv@sign,w,c
  3869  0028DC  B4D8               	btfsc	status,2,c
  3870  0028DE  D005               	goto	l2148
  3871  0028E0  6C07               	negf	___awdiv@quotient,c
  3872  0028E2  1E08               	comf	___awdiv@quotient+1,f,c
  3873  0028E4  B0D8               	btfsc	status,0,c
  3874  0028E6  2A08               	incf	___awdiv@quotient+1,f,c
  3875  0028E8  D000               	goto	l2148
  3876  0028EA                     l2148:
  3877  0028EA  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3878  0028EE  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3879  0028F2  D000               	goto	l483
  3880  0028F4                     l483:
  3881  0028F4  0012               	return		;funcret
  3882  0028F6                     __end_of___awdiv:
  3883                           	opt stack 0
  3884                           tblptru	equ	0xFF8
  3885                           tblptrh	equ	0xFF7
  3886                           tblptrl	equ	0xFF6
  3887                           tablat	equ	0xFF5
  3888                           prodh	equ	0xFF4
  3889                           prodl	equ	0xFF3
  3890                           postinc0	equ	0xFEE
  3891                           wreg	equ	0xFE8
  3892                           postdec1	equ	0xFE5
  3893                           fsr1l	equ	0xFE1
  3894                           postinc2	equ	0xFDE
  3895                           postdec2	equ	0xFDD
  3896                           fsr2h	equ	0xFDA
  3897                           fsr2l	equ	0xFD9
  3898                           status	equ	0xFD8
  3899                           
  3900 ;; *************** function __tdiv_to_l_ *****************
  3901 ;; Defined at:
  3902 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;  f1              3    0[COMRAM] float 
  3905 ;;  f2              3    3[COMRAM] float 
  3906 ;; Auto vars:     Size  Location     Type
  3907 ;;  quot            4    9[COMRAM] unsigned long 
  3908 ;;  exp1            1   14[COMRAM] unsigned char 
  3909 ;;  cntr            1   13[COMRAM] unsigned char 
  3910 ;; Return value:  Size  Location     Type
  3911 ;;                  4    0[COMRAM] unsigned long 
  3912 ;; Registers used:
  3913 ;;		wreg, status,2, status,0
  3914 ;; Tracked objects:
  3915 ;;		On entry : 0/0
  3916 ;;		On exit  : 0/0
  3917 ;;		Unchanged: 0/0
  3918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3919 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3920 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3921 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3922 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3923 ;;Total ram usage:       15 bytes
  3924 ;; Hardware stack levels used:    1
  3925 ;; This function calls:
  3926 ;;		Nothing
  3927 ;; This function is called by:
  3928 ;;		_printf
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           	psect	text10
  3933  0022C0                     __ptext10:
  3934                           	opt stack 0
  3935  0022C0                     __tdiv_to_l_:
  3936                           	opt stack 29
  3937                           
  3938                           ;incstack = 0
  3939  0022C0  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3940  0022C4  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3941  0022C6  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3942  0022C8  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3943  0022CA  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3944  0022CC  E301               	bnc	u2331
  3945  0022CE  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3946  0022D0                     u2331:
  3947  0022D0  5007               	movf	??__tdiv_to_l_,w,c
  3948  0022D2  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3949  0022D4  500F               	movf	__tdiv_to_l_@exp1,w,c
  3950  0022D6  A4D8               	btfss	status,2,c
  3951  0022D8  D002               	goto	l2320
  3952  0022DA  D05D               	goto	l2362
  3953  0022DC  D078               	goto	l695
  3954  0022DE                     l2320:
  3955  0022DE  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3956  0022E2  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3957  0022E4  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3958  0022E6  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3959  0022E8  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3960  0022EA  E301               	bnc	u2351
  3961  0022EC  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3962  0022EE                     u2351:
  3963  0022EE  5007               	movf	??__tdiv_to_l_,w,c
  3964  0022F0  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3965  0022F2  500E               	movf	__tdiv_to_l_@cntr,w,c
  3966  0022F4  A4D8               	btfss	status,2,c
  3967  0022F6  D002               	goto	l2326
  3968  0022F8  D04E               	goto	l2362
  3969  0022FA  D069               	goto	l695
  3970  0022FC                     l2326:
  3971  0022FC  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3972  0022FE  0EFF               	movlw	255
  3973  002300  1601               	andwf	__tdiv_to_l_@f1,f,c
  3974  002302  0EFF               	movlw	255
  3975  002304  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3976  002306  0E00               	movlw	0
  3977  002308  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3978  00230A  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3979  00230C  0EFF               	movlw	255
  3980  00230E  1604               	andwf	__tdiv_to_l_@f2,f,c
  3981  002310  0EFF               	movlw	255
  3982  002312  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3983  002314  0E00               	movlw	0
  3984  002316  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3985  002318  0E00               	movlw	0
  3986  00231A  6E0A               	movwf	__tdiv_to_l_@quot,c
  3987  00231C  0E00               	movlw	0
  3988  00231E  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3989  002320  0E00               	movlw	0
  3990  002322  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3991  002324  0E00               	movlw	0
  3992  002326  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3993  002328  0E7F               	movlw	127
  3994  00232A  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3995  00232C  500E               	movf	__tdiv_to_l_@cntr,w,c
  3996  00232E  0F98               	addlw	152
  3997  002330  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3998  002332  0E18               	movlw	24
  3999  002334  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4000  002336                     l697:
  4001  002336  90D8               	bcf	status,0,c
  4002  002338  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4003  00233A  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4004  00233C  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4005  00233E  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4006  002340  5004               	movf	__tdiv_to_l_@f2,w,c
  4007  002342  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4008  002344  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4009  002346  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4010  002348  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4011  00234A  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4012  00234C  A0D8               	btfss	status,0,c
  4013  00234E  D007               	goto	l698
  4014  002350  5004               	movf	__tdiv_to_l_@f2,w,c
  4015  002352  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4016  002354  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4017  002356  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4018  002358  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4019  00235A  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4020  00235C  800A               	bsf	__tdiv_to_l_@quot,0,c
  4021  00235E                     l698:
  4022  00235E  90D8               	bcf	status,0,c
  4023  002360  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4024  002362  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4025  002364  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4026  002366  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4027  002368  D7E6               	goto	l697
  4028  00236A  D000               	goto	l2348
  4029  00236C                     l2348:
  4030  00236C  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4031  00236E  D010               	goto	l2360
  4032  002370  500F               	movf	__tdiv_to_l_@exp1,w,c
  4033  002372  0A80               	xorlw	128
  4034  002374  0F97               	addlw	151
  4035  002376  B0D8               	btfsc	status,0,c
  4036  002378  D003               	goto	l2356
  4037  00237A  D00D               	goto	l2362
  4038  00237C  D028               	goto	l695
  4039  00237E  D000               	goto	l2356
  4040  002380                     l2356:
  4041  002380  90D8               	bcf	status,0,c
  4042  002382  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4043  002384  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4044  002386  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4045  002388  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4046  00238A  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4047  00238C  D7F9               	goto	l2356
  4048  00238E  D017               	goto	l704
  4049  002390                     l2360:
  4050  002390  0E17               	movlw	23
  4051  002392  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4052  002394  D011               	goto	l2368
  4053  002396                     l2362:
  4054  002396  0E00               	movlw	0
  4055  002398  6E01               	movwf	?__tdiv_to_l_,c
  4056  00239A  0E00               	movlw	0
  4057  00239C  6E02               	movwf	?__tdiv_to_l_+1,c
  4058  00239E  0E00               	movlw	0
  4059  0023A0  6E03               	movwf	?__tdiv_to_l_+2,c
  4060  0023A2  0E00               	movlw	0
  4061  0023A4  6E04               	movwf	?__tdiv_to_l_+3,c
  4062  0023A6  D013               	goto	l695
  4063  0023A8  D007               	goto	l2368
  4064  0023AA                     l2366:
  4065  0023AA  90D8               	bcf	status,0,c
  4066  0023AC  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4067  0023AE  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4068  0023B0  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4069  0023B2  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4070  0023B4  060F               	decf	__tdiv_to_l_@exp1,f,c
  4071  0023B6  D000               	goto	l2368
  4072  0023B8                     l2368:
  4073  0023B8  500F               	movf	__tdiv_to_l_@exp1,w,c
  4074  0023BA  A4D8               	btfss	status,2,c
  4075  0023BC  D7F6               	goto	l2366
  4076  0023BE                     l704:
  4077  0023BE  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4078  0023C2  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4079  0023C6  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4080  0023CA  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4081  0023CE                     l695:
  4082  0023CE  0012               	return		;funcret
  4083  0023D0                     __end_of__tdiv_to_l_:
  4084                           	opt stack 0
  4085                           tblptru	equ	0xFF8
  4086                           tblptrh	equ	0xFF7
  4087                           tblptrl	equ	0xFF6
  4088                           tablat	equ	0xFF5
  4089                           prodh	equ	0xFF4
  4090                           prodl	equ	0xFF3
  4091                           postinc0	equ	0xFEE
  4092                           wreg	equ	0xFE8
  4093                           postdec1	equ	0xFE5
  4094                           fsr1l	equ	0xFE1
  4095                           postinc2	equ	0xFDE
  4096                           postdec2	equ	0xFDD
  4097                           fsr2h	equ	0xFDA
  4098                           fsr2l	equ	0xFD9
  4099                           status	equ	0xFD8
  4100                           
  4101 ;; *************** function __div_to_l_ *****************
  4102 ;; Defined at:
  4103 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fldivl.c"
  4104 ;; Parameters:    Size  Location     Type
  4105 ;;  f1              3    0[COMRAM] unsigned long 
  4106 ;;  f2              3    3[COMRAM] unsigned long 
  4107 ;; Auto vars:     Size  Location     Type
  4108 ;;  quot            4    6[COMRAM] unsigned long 
  4109 ;;  exp1            1   11[COMRAM] unsigned char 
  4110 ;;  cntr            1   10[COMRAM] unsigned char 
  4111 ;; Return value:  Size  Location     Type
  4112 ;;                  4    0[COMRAM] unsigned long 
  4113 ;; Registers used:
  4114 ;;		wreg, status,2, status,0
  4115 ;; Tracked objects:
  4116 ;;		On entry : 0/0
  4117 ;;		On exit  : 0/0
  4118 ;;		Unchanged: 0/0
  4119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4120 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4121 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4123 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4124 ;;Total ram usage:       12 bytes
  4125 ;; Hardware stack levels used:    1
  4126 ;; This function calls:
  4127 ;;		Nothing
  4128 ;; This function is called by:
  4129 ;;		_printf
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           	psect	text11
  4134  0023D0                     __ptext11:
  4135                           	opt stack 0
  4136  0023D0                     __div_to_l_:
  4137                           	opt stack 29
  4138                           
  4139                           ;incstack = 0
  4140  0023D0  3403               	rlcf	__div_to_l_@f1+2,w,c
  4141  0023D2  3404               	rlcf	__div_to_l_@f1+3,w,c
  4142  0023D4  6E0C               	movwf	__div_to_l_@exp1,c
  4143  0023D6  500C               	movf	__div_to_l_@exp1,w,c
  4144  0023D8  A4D8               	btfss	status,2,c
  4145  0023DA  D002               	goto	l2376
  4146  0023DC  D061               	goto	l2422
  4147  0023DE  D07C               	goto	l574
  4148  0023E0                     l2376:
  4149  0023E0  3406               	rlcf	__div_to_l_@f2+2,w,c
  4150  0023E2  3407               	rlcf	__div_to_l_@f2+3,w,c
  4151  0023E4  6E0B               	movwf	__div_to_l_@cntr,c
  4152  0023E6  500B               	movf	__div_to_l_@cntr,w,c
  4153  0023E8  A4D8               	btfss	status,2,c
  4154  0023EA  D002               	goto	l2382
  4155  0023EC  D059               	goto	l2422
  4156  0023EE  D074               	goto	l574
  4157  0023F0                     l2382:
  4158  0023F0  8E03               	bsf	__div_to_l_@f1+2,7,c
  4159  0023F2  0EFF               	movlw	255
  4160  0023F4  1601               	andwf	__div_to_l_@f1,f,c
  4161  0023F6  0EFF               	movlw	255
  4162  0023F8  1602               	andwf	__div_to_l_@f1+1,f,c
  4163  0023FA  0EFF               	movlw	255
  4164  0023FC  1603               	andwf	__div_to_l_@f1+2,f,c
  4165  0023FE  0E00               	movlw	0
  4166  002400  1604               	andwf	__div_to_l_@f1+3,f,c
  4167  002402  8E06               	bsf	__div_to_l_@f2+2,7,c
  4168  002404  0EFF               	movlw	255
  4169  002406  1604               	andwf	__div_to_l_@f2,f,c
  4170  002408  0EFF               	movlw	255
  4171  00240A  1605               	andwf	__div_to_l_@f2+1,f,c
  4172  00240C  0EFF               	movlw	255
  4173  00240E  1606               	andwf	__div_to_l_@f2+2,f,c
  4174  002410  0E00               	movlw	0
  4175  002412  1607               	andwf	__div_to_l_@f2+3,f,c
  4176  002414  0E00               	movlw	0
  4177  002416  6E07               	movwf	__div_to_l_@quot,c
  4178  002418  0E00               	movlw	0
  4179  00241A  6E08               	movwf	__div_to_l_@quot+1,c
  4180  00241C  0E00               	movlw	0
  4181  00241E  6E09               	movwf	__div_to_l_@quot+2,c
  4182  002420  0E00               	movlw	0
  4183  002422  6E0A               	movwf	__div_to_l_@quot+3,c
  4184  002424  0E7F               	movlw	127
  4185  002426  5E0C               	subwf	__div_to_l_@exp1,f,c
  4186  002428  500B               	movf	__div_to_l_@cntr,w,c
  4187  00242A  0FA0               	addlw	160
  4188  00242C  5E0C               	subwf	__div_to_l_@exp1,f,c
  4189  00242E  0E20               	movlw	32
  4190  002430  6E0B               	movwf	__div_to_l_@cntr,c
  4191  002432  D000               	goto	l2396
  4192  002434                     l2396:
  4193  002434  90D8               	bcf	status,0,c
  4194  002436  3607               	rlcf	__div_to_l_@quot,f,c
  4195  002438  3608               	rlcf	__div_to_l_@quot+1,f,c
  4196  00243A  3609               	rlcf	__div_to_l_@quot+2,f,c
  4197  00243C  360A               	rlcf	__div_to_l_@quot+3,f,c
  4198  00243E  5004               	movf	__div_to_l_@f2,w,c
  4199  002440  5C01               	subwf	__div_to_l_@f1,w,c
  4200  002442  5005               	movf	__div_to_l_@f2+1,w,c
  4201  002444  5802               	subwfb	__div_to_l_@f1+1,w,c
  4202  002446  5006               	movf	__div_to_l_@f2+2,w,c
  4203  002448  5803               	subwfb	__div_to_l_@f1+2,w,c
  4204  00244A  5007               	movf	__div_to_l_@f2+3,w,c
  4205  00244C  5804               	subwfb	__div_to_l_@f1+3,w,c
  4206  00244E  A0D8               	btfss	status,0,c
  4207  002450  D00A               	goto	l2404
  4208  002452  5004               	movf	__div_to_l_@f2,w,c
  4209  002454  5E01               	subwf	__div_to_l_@f1,f,c
  4210  002456  5005               	movf	__div_to_l_@f2+1,w,c
  4211  002458  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4212  00245A  5006               	movf	__div_to_l_@f2+2,w,c
  4213  00245C  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4214  00245E  5007               	movf	__div_to_l_@f2+3,w,c
  4215  002460  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4216  002462  8007               	bsf	__div_to_l_@quot,0,c
  4217  002464  D000               	goto	l2404
  4218  002466                     l2404:
  4219  002466  90D8               	bcf	status,0,c
  4220  002468  3601               	rlcf	__div_to_l_@f1,f,c
  4221  00246A  3602               	rlcf	__div_to_l_@f1+1,f,c
  4222  00246C  3603               	rlcf	__div_to_l_@f1+2,f,c
  4223  00246E  3604               	rlcf	__div_to_l_@f1+3,f,c
  4224  002470  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4225  002472  D7E0               	goto	l2396
  4226  002474  D000               	goto	l2408
  4227  002476                     l2408:
  4228  002476  AE0C               	btfss	__div_to_l_@exp1,7,c
  4229  002478  D010               	goto	l2420
  4230  00247A  500C               	movf	__div_to_l_@exp1,w,c
  4231  00247C  0A80               	xorlw	128
  4232  00247E  0F9F               	addlw	159
  4233  002480  B0D8               	btfsc	status,0,c
  4234  002482  D003               	goto	l2416
  4235  002484  D00D               	goto	l2422
  4236  002486  D028               	goto	l574
  4237  002488  D000               	goto	l2416
  4238  00248A                     l2416:
  4239  00248A  90D8               	bcf	status,0,c
  4240  00248C  320A               	rrcf	__div_to_l_@quot+3,f,c
  4241  00248E  3209               	rrcf	__div_to_l_@quot+2,f,c
  4242  002490  3208               	rrcf	__div_to_l_@quot+1,f,c
  4243  002492  3207               	rrcf	__div_to_l_@quot,f,c
  4244  002494  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4245  002496  D7F9               	goto	l2416
  4246  002498  D017               	goto	l583
  4247  00249A                     l2420:
  4248  00249A  0E1F               	movlw	31
  4249  00249C  640C               	cpfsgt	__div_to_l_@exp1,c
  4250  00249E  D011               	goto	l2428
  4251  0024A0                     l2422:
  4252  0024A0  0E00               	movlw	0
  4253  0024A2  6E01               	movwf	?__div_to_l_,c
  4254  0024A4  0E00               	movlw	0
  4255  0024A6  6E02               	movwf	?__div_to_l_+1,c
  4256  0024A8  0E00               	movlw	0
  4257  0024AA  6E03               	movwf	?__div_to_l_+2,c
  4258  0024AC  0E00               	movlw	0
  4259  0024AE  6E04               	movwf	?__div_to_l_+3,c
  4260  0024B0  D013               	goto	l574
  4261  0024B2  D007               	goto	l2428
  4262  0024B4                     l2426:
  4263  0024B4  90D8               	bcf	status,0,c
  4264  0024B6  3607               	rlcf	__div_to_l_@quot,f,c
  4265  0024B8  3608               	rlcf	__div_to_l_@quot+1,f,c
  4266  0024BA  3609               	rlcf	__div_to_l_@quot+2,f,c
  4267  0024BC  360A               	rlcf	__div_to_l_@quot+3,f,c
  4268  0024BE  060C               	decf	__div_to_l_@exp1,f,c
  4269  0024C0  D000               	goto	l2428
  4270  0024C2                     l2428:
  4271  0024C2  500C               	movf	__div_to_l_@exp1,w,c
  4272  0024C4  A4D8               	btfss	status,2,c
  4273  0024C6  D7F6               	goto	l2426
  4274  0024C8                     l583:
  4275  0024C8  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4276  0024CC  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4277  0024D0  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4278  0024D4  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4279  0024D8                     l574:
  4280  0024D8  0012               	return		;funcret
  4281  0024DA                     __end_of__div_to_l_:
  4282                           	opt stack 0
  4283                           tblptru	equ	0xFF8
  4284                           tblptrh	equ	0xFF7
  4285                           tblptrl	equ	0xFF6
  4286                           tablat	equ	0xFF5
  4287                           prodh	equ	0xFF4
  4288                           prodl	equ	0xFF3
  4289                           postinc0	equ	0xFEE
  4290                           wreg	equ	0xFE8
  4291                           postdec1	equ	0xFE5
  4292                           fsr1l	equ	0xFE1
  4293                           postinc2	equ	0xFDE
  4294                           postdec2	equ	0xFDD
  4295                           fsr2h	equ	0xFDA
  4296                           fsr2l	equ	0xFD9
  4297                           status	equ	0xFD8
  4298                           
  4299 ;; *************** function ___lltoft *****************
  4300 ;; Defined at:
  4301 ;;		line 35 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lltoft.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;  c               4    8[COMRAM] unsigned long 
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;  exp             1   16[COMRAM] unsigned char 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  3    8[COMRAM] float 
  4308 ;; Registers used:
  4309 ;;		wreg, status,2, status,0, cstack
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4315 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4317 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4318 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4319 ;;Total ram usage:        9 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    1
  4322 ;; This function calls:
  4323 ;;		___ftpack
  4324 ;; This function is called by:
  4325 ;;		_printf
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           	psect	text12
  4330  002B7A                     __ptext12:
  4331                           	opt stack 0
  4332  002B7A                     ___lltoft:
  4333                           	opt stack 28
  4334                           
  4335                           ;incstack = 0
  4336  002B7A  0E8E               	movlw	142
  4337  002B7C  6E11               	movwf	___lltoft@exp,c
  4338  002B7E  D007               	goto	l2548
  4339  002B80                     l2546:
  4340  002B80  90D8               	bcf	status,0,c
  4341  002B82  320C               	rrcf	___lltoft@c+3,f,c
  4342  002B84  320B               	rrcf	___lltoft@c+2,f,c
  4343  002B86  320A               	rrcf	___lltoft@c+1,f,c
  4344  002B88  3209               	rrcf	___lltoft@c,f,c
  4345  002B8A  2A11               	incf	___lltoft@exp,f,c
  4346  002B8C  D000               	goto	l2548
  4347  002B8E                     l2548:
  4348  002B8E  0E00               	movlw	0
  4349  002B90  1409               	andwf	___lltoft@c,w,c
  4350  002B92  6E0D               	movwf	??___lltoft& (0+255),c
  4351  002B94  0E00               	movlw	0
  4352  002B96  140A               	andwf	___lltoft@c+1,w,c
  4353  002B98  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4354  002B9A  0E00               	movlw	0
  4355  002B9C  140B               	andwf	___lltoft@c+2,w,c
  4356  002B9E  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4357  002BA0  0EFF               	movlw	255
  4358  002BA2  140C               	andwf	___lltoft@c+3,w,c
  4359  002BA4  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4360  002BA6  500D               	movf	??___lltoft,w,c
  4361  002BA8  100E               	iorwf	??___lltoft+1,w,c
  4362  002BAA  100F               	iorwf	??___lltoft+2,w,c
  4363  002BAC  1010               	iorwf	??___lltoft+3,w,c
  4364  002BAE  A4D8               	btfss	status,2,c
  4365  002BB0  D7E7               	goto	l2546
  4366  002BB2  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4367  002BB6  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4368  002BBA  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4369  002BBE  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4370  002BC2  0E00               	movlw	0
  4371  002BC4  6E05               	movwf	___ftpack@sign,c
  4372  002BC6  ECCD  F013         	call	___ftpack	;wreg free
  4373  002BCA  C001  F009         	movff	?___ftpack,?___lltoft
  4374  002BCE  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4375  002BD2  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4376  002BD6  D000               	goto	l814
  4377  002BD8                     l814:
  4378  002BD8  0012               	return		;funcret
  4379  002BDA                     __end_of___lltoft:
  4380                           	opt stack 0
  4381                           tblptru	equ	0xFF8
  4382                           tblptrh	equ	0xFF7
  4383                           tblptrl	equ	0xFF6
  4384                           tablat	equ	0xFF5
  4385                           prodh	equ	0xFF4
  4386                           prodl	equ	0xFF3
  4387                           postinc0	equ	0xFEE
  4388                           wreg	equ	0xFE8
  4389                           postdec1	equ	0xFE5
  4390                           fsr1l	equ	0xFE1
  4391                           postinc2	equ	0xFDE
  4392                           postdec2	equ	0xFDD
  4393                           fsr2h	equ	0xFDA
  4394                           fsr2l	equ	0xFD9
  4395                           status	equ	0xFD8
  4396                           
  4397 ;; *************** function ___llmod *****************
  4398 ;; Defined at:
  4399 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\llmod.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;  dividend        4    0[COMRAM] unsigned long 
  4402 ;;  divisor         4    4[COMRAM] unsigned long 
  4403 ;; Auto vars:     Size  Location     Type
  4404 ;;  counter         1    8[COMRAM] unsigned char 
  4405 ;; Return value:  Size  Location     Type
  4406 ;;                  4    0[COMRAM] unsigned long 
  4407 ;; Registers used:
  4408 ;;		wreg, status,2, status,0
  4409 ;; Tracked objects:
  4410 ;;		On entry : 0/0
  4411 ;;		On exit  : 0/0
  4412 ;;		Unchanged: 0/0
  4413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4414 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4415 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4417 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4418 ;;Total ram usage:        9 bytes
  4419 ;; Hardware stack levels used:    1
  4420 ;; This function calls:
  4421 ;;		Nothing
  4422 ;; This function is called by:
  4423 ;;		_printf
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           	psect	text13
  4428  002A9A                     __ptext13:
  4429                           	opt stack 0
  4430  002A9A                     ___llmod:
  4431                           	opt stack 29
  4432                           
  4433                           ;incstack = 0
  4434  002A9A  5005               	movf	___llmod@divisor,w,c
  4435  002A9C  1006               	iorwf	___llmod@divisor+1,w,c
  4436  002A9E  1007               	iorwf	___llmod@divisor+2,w,c
  4437  002AA0  1008               	iorwf	___llmod@divisor+3,w,c
  4438  002AA2  B4D8               	btfsc	status,2,c
  4439  002AA4  D029               	goto	l794
  4440  002AA6  0E01               	movlw	1
  4441  002AA8  6E09               	movwf	___llmod@counter,c
  4442  002AAA  D007               	goto	l2534
  4443  002AAC                     l2532:
  4444  002AAC  90D8               	bcf	status,0,c
  4445  002AAE  3605               	rlcf	___llmod@divisor,f,c
  4446  002AB0  3606               	rlcf	___llmod@divisor+1,f,c
  4447  002AB2  3607               	rlcf	___llmod@divisor+2,f,c
  4448  002AB4  3608               	rlcf	___llmod@divisor+3,f,c
  4449  002AB6  2A09               	incf	___llmod@counter,f,c
  4450  002AB8  D000               	goto	l2534
  4451  002ABA                     l2534:
  4452  002ABA  BE08               	btfsc	___llmod@divisor+3,7,c
  4453  002ABC  D002               	goto	l2536
  4454  002ABE  D7F6               	goto	l2532
  4455  002AC0  D000               	goto	l2536
  4456  002AC2                     l2536:
  4457  002AC2  5005               	movf	___llmod@divisor,w,c
  4458  002AC4  5C01               	subwf	___llmod@dividend,w,c
  4459  002AC6  5006               	movf	___llmod@divisor+1,w,c
  4460  002AC8  5802               	subwfb	___llmod@dividend+1,w,c
  4461  002ACA  5007               	movf	___llmod@divisor+2,w,c
  4462  002ACC  5803               	subwfb	___llmod@dividend+2,w,c
  4463  002ACE  5008               	movf	___llmod@divisor+3,w,c
  4464  002AD0  5804               	subwfb	___llmod@dividend+3,w,c
  4465  002AD2  A0D8               	btfss	status,0,c
  4466  002AD4  D009               	goto	l2540
  4467  002AD6  5005               	movf	___llmod@divisor,w,c
  4468  002AD8  5E01               	subwf	___llmod@dividend,f,c
  4469  002ADA  5006               	movf	___llmod@divisor+1,w,c
  4470  002ADC  5A02               	subwfb	___llmod@dividend+1,f,c
  4471  002ADE  5007               	movf	___llmod@divisor+2,w,c
  4472  002AE0  5A03               	subwfb	___llmod@dividend+2,f,c
  4473  002AE2  5008               	movf	___llmod@divisor+3,w,c
  4474  002AE4  5A04               	subwfb	___llmod@dividend+3,f,c
  4475  002AE6  D000               	goto	l2540
  4476  002AE8                     l2540:
  4477  002AE8  90D8               	bcf	status,0,c
  4478  002AEA  3208               	rrcf	___llmod@divisor+3,f,c
  4479  002AEC  3207               	rrcf	___llmod@divisor+2,f,c
  4480  002AEE  3206               	rrcf	___llmod@divisor+1,f,c
  4481  002AF0  3205               	rrcf	___llmod@divisor,f,c
  4482  002AF2  2E09               	decfsz	___llmod@counter,f,c
  4483  002AF4  D7E6               	goto	l2536
  4484  002AF6  D000               	goto	l794
  4485  002AF8                     l794:
  4486  002AF8  C001  F001         	movff	___llmod@dividend,?___llmod
  4487  002AFC  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4488  002B00  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4489  002B04  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4490  002B08  0012               	return		;funcret
  4491  002B0A                     __end_of___llmod:
  4492                           	opt stack 0
  4493                           tblptru	equ	0xFF8
  4494                           tblptrh	equ	0xFF7
  4495                           tblptrl	equ	0xFF6
  4496                           tablat	equ	0xFF5
  4497                           prodh	equ	0xFF4
  4498                           prodl	equ	0xFF3
  4499                           postinc0	equ	0xFEE
  4500                           wreg	equ	0xFE8
  4501                           postdec1	equ	0xFE5
  4502                           fsr1l	equ	0xFE1
  4503                           postinc2	equ	0xFDE
  4504                           postdec2	equ	0xFDD
  4505                           fsr2h	equ	0xFDA
  4506                           fsr2l	equ	0xFD9
  4507                           status	equ	0xFD8
  4508                           
  4509 ;; *************** function ___lldiv *****************
  4510 ;; Defined at:
  4511 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lldiv.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;  dividend        4    0[COMRAM] unsigned long 
  4514 ;;  divisor         4    4[COMRAM] unsigned long 
  4515 ;; Auto vars:     Size  Location     Type
  4516 ;;  quotient        4    8[COMRAM] unsigned long 
  4517 ;;  counter         1   12[COMRAM] unsigned char 
  4518 ;; Return value:  Size  Location     Type
  4519 ;;                  4    0[COMRAM] unsigned long 
  4520 ;; Registers used:
  4521 ;;		wreg, status,2, status,0
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4527 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4528 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4530 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;Total ram usage:       13 bytes
  4532 ;; Hardware stack levels used:    1
  4533 ;; This function calls:
  4534 ;;		Nothing
  4535 ;; This function is called by:
  4536 ;;		_printf
  4537 ;; This function uses a non-reentrant model
  4538 ;;
  4539                           
  4540                           	psect	text14
  4541  00298C                     __ptext14:
  4542                           	opt stack 0
  4543  00298C                     ___lldiv:
  4544                           	opt stack 29
  4545                           
  4546                           ;incstack = 0
  4547  00298C  0E00               	movlw	0
  4548  00298E  6E09               	movwf	___lldiv@quotient,c
  4549  002990  0E00               	movlw	0
  4550  002992  6E0A               	movwf	___lldiv@quotient+1,c
  4551  002994  0E00               	movlw	0
  4552  002996  6E0B               	movwf	___lldiv@quotient+2,c
  4553  002998  0E00               	movlw	0
  4554  00299A  6E0C               	movwf	___lldiv@quotient+3,c
  4555  00299C  5005               	movf	___lldiv@divisor,w,c
  4556  00299E  1006               	iorwf	___lldiv@divisor+1,w,c
  4557  0029A0  1007               	iorwf	___lldiv@divisor+2,w,c
  4558  0029A2  1008               	iorwf	___lldiv@divisor+3,w,c
  4559  0029A4  B4D8               	btfsc	status,2,c
  4560  0029A6  D02F               	goto	l784
  4561  0029A8  0E01               	movlw	1
  4562  0029AA  6E0D               	movwf	___lldiv@counter,c
  4563  0029AC  D007               	goto	l2514
  4564  0029AE                     l2512:
  4565  0029AE  90D8               	bcf	status,0,c
  4566  0029B0  3605               	rlcf	___lldiv@divisor,f,c
  4567  0029B2  3606               	rlcf	___lldiv@divisor+1,f,c
  4568  0029B4  3607               	rlcf	___lldiv@divisor+2,f,c
  4569  0029B6  3608               	rlcf	___lldiv@divisor+3,f,c
  4570  0029B8  2A0D               	incf	___lldiv@counter,f,c
  4571  0029BA  D000               	goto	l2514
  4572  0029BC                     l2514:
  4573  0029BC  BE08               	btfsc	___lldiv@divisor+3,7,c
  4574  0029BE  D002               	goto	l2516
  4575  0029C0  D7F6               	goto	l2512
  4576  0029C2  D000               	goto	l2516
  4577  0029C4                     l2516:
  4578  0029C4  90D8               	bcf	status,0,c
  4579  0029C6  3609               	rlcf	___lldiv@quotient,f,c
  4580  0029C8  360A               	rlcf	___lldiv@quotient+1,f,c
  4581  0029CA  360B               	rlcf	___lldiv@quotient+2,f,c
  4582  0029CC  360C               	rlcf	___lldiv@quotient+3,f,c
  4583  0029CE  5005               	movf	___lldiv@divisor,w,c
  4584  0029D0  5C01               	subwf	___lldiv@dividend,w,c
  4585  0029D2  5006               	movf	___lldiv@divisor+1,w,c
  4586  0029D4  5802               	subwfb	___lldiv@dividend+1,w,c
  4587  0029D6  5007               	movf	___lldiv@divisor+2,w,c
  4588  0029D8  5803               	subwfb	___lldiv@dividend+2,w,c
  4589  0029DA  5008               	movf	___lldiv@divisor+3,w,c
  4590  0029DC  5804               	subwfb	___lldiv@dividend+3,w,c
  4591  0029DE  A0D8               	btfss	status,0,c
  4592  0029E0  D00A               	goto	l2524
  4593  0029E2  5005               	movf	___lldiv@divisor,w,c
  4594  0029E4  5E01               	subwf	___lldiv@dividend,f,c
  4595  0029E6  5006               	movf	___lldiv@divisor+1,w,c
  4596  0029E8  5A02               	subwfb	___lldiv@dividend+1,f,c
  4597  0029EA  5007               	movf	___lldiv@divisor+2,w,c
  4598  0029EC  5A03               	subwfb	___lldiv@dividend+2,f,c
  4599  0029EE  5008               	movf	___lldiv@divisor+3,w,c
  4600  0029F0  5A04               	subwfb	___lldiv@dividend+3,f,c
  4601  0029F2  8009               	bsf	___lldiv@quotient,0,c
  4602  0029F4  D000               	goto	l2524
  4603  0029F6                     l2524:
  4604  0029F6  90D8               	bcf	status,0,c
  4605  0029F8  3208               	rrcf	___lldiv@divisor+3,f,c
  4606  0029FA  3207               	rrcf	___lldiv@divisor+2,f,c
  4607  0029FC  3206               	rrcf	___lldiv@divisor+1,f,c
  4608  0029FE  3205               	rrcf	___lldiv@divisor,f,c
  4609  002A00  2E0D               	decfsz	___lldiv@counter,f,c
  4610  002A02  D7E0               	goto	l2516
  4611  002A04  D000               	goto	l784
  4612  002A06                     l784:
  4613  002A06  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4614  002A0A  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4615  002A0E  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4616  002A12  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4617  002A16  0012               	return		;funcret
  4618  002A18                     __end_of___lldiv:
  4619                           	opt stack 0
  4620                           tblptru	equ	0xFF8
  4621                           tblptrh	equ	0xFF7
  4622                           tblptrl	equ	0xFF6
  4623                           tablat	equ	0xFF5
  4624                           prodh	equ	0xFF4
  4625                           prodl	equ	0xFF3
  4626                           postinc0	equ	0xFEE
  4627                           wreg	equ	0xFE8
  4628                           postdec1	equ	0xFE5
  4629                           fsr1l	equ	0xFE1
  4630                           postinc2	equ	0xFDE
  4631                           postdec2	equ	0xFDD
  4632                           fsr2h	equ	0xFDA
  4633                           fsr2l	equ	0xFD9
  4634                           status	equ	0xFD8
  4635                           
  4636 ;; *************** function ___fttol *****************
  4637 ;; Defined at:
  4638 ;;		line 44 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fttol.c"
  4639 ;; Parameters:    Size  Location     Type
  4640 ;;  f1              3   42[COMRAM] float 
  4641 ;; Auto vars:     Size  Location     Type
  4642 ;;  lval            4   52[COMRAM] unsigned long 
  4643 ;;  exp1            1   56[COMRAM] unsigned char 
  4644 ;;  sign1           1   51[COMRAM] unsigned char 
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  4   42[COMRAM] long 
  4647 ;; Registers used:
  4648 ;;		wreg, status,2, status,0
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4654 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4657 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;Total ram usage:       15 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; This function calls:
  4661 ;;		Nothing
  4662 ;; This function is called by:
  4663 ;;		_printf
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667                           	psect	text15
  4668  0025D2                     __ptext15:
  4669                           	opt stack 0
  4670  0025D2                     ___fttol:
  4671                           	opt stack 29
  4672                           
  4673                           ;incstack = 0
  4674  0025D2  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4675  0025D6  6A30               	clrf	(??___fttol+1)& (0+255),c
  4676  0025D8  6A31               	clrf	(??___fttol+2)& (0+255),c
  4677  0025DA  342C               	rlcf	___fttol@f1+1,w,c
  4678  0025DC  362F               	rlcf	??___fttol& (0+255),f,c
  4679  0025DE  E301               	bnc	u2541
  4680  0025E0  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4681  0025E2                     u2541:
  4682  0025E2  502F               	movf	??___fttol,w,c
  4683  0025E4  6E39               	movwf	___fttol@exp1,c
  4684  0025E6  5039               	movf	___fttol@exp1,w,c
  4685  0025E8  A4D8               	btfss	status,2,c
  4686  0025EA  D002               	goto	l2466
  4687  0025EC  D039               	goto	l2490
  4688  0025EE  D063               	goto	l740
  4689  0025F0                     l2466:
  4690  0025F0  0E17               	movlw	23
  4691  0025F2  6E2F               	movwf	??___fttol& (0+255),c
  4692  0025F4  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4693  0025F8  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4694  0025FC  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4695  002600  282F               	incf	??___fttol,w,c
  4696  002602  6E33               	movwf	(??___fttol+4)& (0+255),c
  4697  002604  D004               	goto	u2560
  4698  002606                     u2565:
  4699  002606  90D8               	bcf	status,0,c
  4700  002608  3232               	rrcf	??___fttol+3,f,c
  4701  00260A  3231               	rrcf	??___fttol+2,f,c
  4702  00260C  3230               	rrcf	??___fttol+1,f,c
  4703  00260E                     u2560:
  4704  00260E  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4705  002610  D7FA               	goto	u2565
  4706  002612  5030               	movf	??___fttol+1,w,c
  4707  002614  6E34               	movwf	___fttol@sign1,c
  4708  002616  8E2C               	bsf	___fttol@f1+1,7,c
  4709  002618  0EFF               	movlw	255
  4710  00261A  162B               	andwf	___fttol@f1,f,c
  4711  00261C  0EFF               	movlw	255
  4712  00261E  162C               	andwf	___fttol@f1+1,f,c
  4713  002620  0E00               	movlw	0
  4714  002622  162D               	andwf	___fttol@f1+2,f,c
  4715  002624  502B               	movf	___fttol@f1,w,c
  4716  002626  6E35               	movwf	___fttol@lval,c
  4717  002628  502C               	movf	___fttol@f1+1,w,c
  4718  00262A  6E36               	movwf	___fttol@lval+1,c
  4719  00262C  502D               	movf	___fttol@f1+2,w,c
  4720  00262E  6E37               	movwf	___fttol@lval+2,c
  4721  002630  6A38               	clrf	___fttol@lval+3,c
  4722  002632  0E8E               	movlw	142
  4723  002634  5E39               	subwf	___fttol@exp1,f,c
  4724  002636  AE39               	btfss	___fttol@exp1,7,c
  4725  002638  D010               	goto	l2488
  4726  00263A  5039               	movf	___fttol@exp1,w,c
  4727  00263C  0A80               	xorlw	128
  4728  00263E  0F8F               	addlw	143
  4729  002640  B0D8               	btfsc	status,0,c
  4730  002642  D003               	goto	l2484
  4731  002644  D00D               	goto	l2490
  4732  002646  D037               	goto	l740
  4733  002648  D000               	goto	l2484
  4734  00264A                     l2484:
  4735  00264A  90D8               	bcf	status,0,c
  4736  00264C  3238               	rrcf	___fttol@lval+3,f,c
  4737  00264E  3237               	rrcf	___fttol@lval+2,f,c
  4738  002650  3236               	rrcf	___fttol@lval+1,f,c
  4739  002652  3235               	rrcf	___fttol@lval,f,c
  4740  002654  3E39               	incfsz	___fttol@exp1,f,c
  4741  002656  D7F9               	goto	l2484
  4742  002658  D019               	goto	l2498
  4743  00265A                     l2488:
  4744  00265A  0E17               	movlw	23
  4745  00265C  6439               	cpfsgt	___fttol@exp1,c
  4746  00265E  D011               	goto	l2496
  4747  002660                     l2490:
  4748  002660  0E00               	movlw	0
  4749  002662  6E2B               	movwf	?___fttol,c
  4750  002664  0E00               	movlw	0
  4751  002666  6E2C               	movwf	?___fttol+1,c
  4752  002668  0E00               	movlw	0
  4753  00266A  6E2D               	movwf	?___fttol+2,c
  4754  00266C  0E00               	movlw	0
  4755  00266E  6E2E               	movwf	?___fttol+3,c
  4756  002670  D022               	goto	l740
  4757  002672  D007               	goto	l2496
  4758  002674                     l2494:
  4759  002674  90D8               	bcf	status,0,c
  4760  002676  3635               	rlcf	___fttol@lval,f,c
  4761  002678  3636               	rlcf	___fttol@lval+1,f,c
  4762  00267A  3637               	rlcf	___fttol@lval+2,f,c
  4763  00267C  3638               	rlcf	___fttol@lval+3,f,c
  4764  00267E  0639               	decf	___fttol@exp1,f,c
  4765  002680  D000               	goto	l2496
  4766  002682                     l2496:
  4767  002682  5039               	movf	___fttol@exp1,w,c
  4768  002684  B4D8               	btfsc	status,2,c
  4769  002686  D002               	goto	l2498
  4770  002688  D7F5               	goto	l2494
  4771  00268A  D000               	goto	l2498
  4772  00268C                     l2498:
  4773  00268C  5034               	movf	___fttol@sign1,w,c
  4774  00268E  B4D8               	btfsc	status,2,c
  4775  002690  D009               	goto	l2502
  4776  002692  1E38               	comf	___fttol@lval+3,f,c
  4777  002694  1E37               	comf	___fttol@lval+2,f,c
  4778  002696  1E36               	comf	___fttol@lval+1,f,c
  4779  002698  6C35               	negf	___fttol@lval,c
  4780  00269A  0E00               	movlw	0
  4781  00269C  2236               	addwfc	___fttol@lval+1,f,c
  4782  00269E  2237               	addwfc	___fttol@lval+2,f,c
  4783  0026A0  2238               	addwfc	___fttol@lval+3,f,c
  4784  0026A2  D000               	goto	l2502
  4785  0026A4                     l2502:
  4786  0026A4  C035  F02B         	movff	___fttol@lval,?___fttol
  4787  0026A8  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4788  0026AC  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4789  0026B0  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4790  0026B4  D000               	goto	l740
  4791  0026B6                     l740:
  4792  0026B6  0012               	return		;funcret
  4793  0026B8                     __end_of___fttol:
  4794                           	opt stack 0
  4795                           tblptru	equ	0xFF8
  4796                           tblptrh	equ	0xFF7
  4797                           tblptrl	equ	0xFF6
  4798                           tablat	equ	0xFF5
  4799                           prodh	equ	0xFF4
  4800                           prodl	equ	0xFF3
  4801                           postinc0	equ	0xFEE
  4802                           wreg	equ	0xFE8
  4803                           postdec1	equ	0xFE5
  4804                           fsr1l	equ	0xFE1
  4805                           postinc2	equ	0xFDE
  4806                           postdec2	equ	0xFDD
  4807                           fsr2h	equ	0xFDA
  4808                           fsr2l	equ	0xFD9
  4809                           status	equ	0xFD8
  4810                           
  4811 ;; *************** function ___ftsub *****************
  4812 ;; Defined at:
  4813 ;;		line 20 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftsub.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;  f1              3   57[COMRAM] float 
  4816 ;;  f2              3   60[COMRAM] float 
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;		None
  4819 ;; Return value:  Size  Location     Type
  4820 ;;                  3   57[COMRAM] float 
  4821 ;; Registers used:
  4822 ;;		wreg, status,2, status,0, cstack
  4823 ;; Tracked objects:
  4824 ;;		On entry : 0/0
  4825 ;;		On exit  : 0/0
  4826 ;;		Unchanged: 0/0
  4827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4828 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4832 ;;Total ram usage:        6 bytes
  4833 ;; Hardware stack levels used:    1
  4834 ;; Hardware stack levels required when called:    2
  4835 ;; This function calls:
  4836 ;;		___ftadd
  4837 ;; This function is called by:
  4838 ;;		_printf
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text16
  4843  002BDA                     __ptext16:
  4844                           	opt stack 0
  4845  002BDA                     ___ftsub:
  4846                           	opt stack 27
  4847                           
  4848                           ;incstack = 0
  4849  002BDA  503D               	movf	___ftsub@f2,w,c
  4850  002BDC  103E               	iorwf	___ftsub@f2+1,w,c
  4851  002BDE  103F               	iorwf	___ftsub@f2+2,w,c
  4852  002BE0  B4D8               	btfsc	status,2,c
  4853  002BE2  D007               	goto	l2434
  4854  002BE4  0E00               	movlw	0
  4855  002BE6  1A3D               	xorwf	___ftsub@f2,f,c
  4856  002BE8  0E00               	movlw	0
  4857  002BEA  1A3E               	xorwf	___ftsub@f2+1,f,c
  4858  002BEC  0E80               	movlw	128
  4859  002BEE  1A3F               	xorwf	___ftsub@f2+2,f,c
  4860  002BF0  D000               	goto	l2434
  4861  002BF2                     l2434:
  4862  002BF2  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4863  002BF6  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4864  002BFA  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4865  002BFE  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4866  002C02  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4867  002C06  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4868  002C0A  ECF6  F00F         	call	___ftadd	;wreg free
  4869  002C0E  C02E  F03A         	movff	?___ftadd,?___ftsub
  4870  002C12  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4871  002C16  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4872  002C1A  D000               	goto	l736
  4873  002C1C                     l736:
  4874  002C1C  0012               	return		;funcret
  4875  002C1E                     __end_of___ftsub:
  4876                           	opt stack 0
  4877                           tblptru	equ	0xFF8
  4878                           tblptrh	equ	0xFF7
  4879                           tblptrl	equ	0xFF6
  4880                           tablat	equ	0xFF5
  4881                           prodh	equ	0xFF4
  4882                           prodl	equ	0xFF3
  4883                           postinc0	equ	0xFEE
  4884                           wreg	equ	0xFE8
  4885                           postdec1	equ	0xFE5
  4886                           fsr1l	equ	0xFE1
  4887                           postinc2	equ	0xFDE
  4888                           postdec2	equ	0xFDD
  4889                           fsr2h	equ	0xFDA
  4890                           fsr2l	equ	0xFD9
  4891                           status	equ	0xFD8
  4892                           
  4893 ;; *************** function ___ftadd *****************
  4894 ;; Defined at:
  4895 ;;		line 86 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftadd.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;  f1              3   45[COMRAM] float 
  4898 ;;  f2              3   48[COMRAM] float 
  4899 ;; Auto vars:     Size  Location     Type
  4900 ;;  exp1            1   56[COMRAM] unsigned char 
  4901 ;;  exp2            1   55[COMRAM] unsigned char 
  4902 ;;  sign            1   54[COMRAM] unsigned char 
  4903 ;; Return value:  Size  Location     Type
  4904 ;;                  3   45[COMRAM] float 
  4905 ;; Registers used:
  4906 ;;		wreg, status,2, status,0, cstack
  4907 ;; Tracked objects:
  4908 ;;		On entry : 0/0
  4909 ;;		On exit  : 0/0
  4910 ;;		Unchanged: 0/0
  4911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4912 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4913 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4914 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;Total ram usage:       12 bytes
  4917 ;; Hardware stack levels used:    1
  4918 ;; Hardware stack levels required when called:    1
  4919 ;; This function calls:
  4920 ;;		___ftpack
  4921 ;; This function is called by:
  4922 ;;		_printf
  4923 ;;		___ftsub
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           	psect	text17
  4928  001FEC                     __ptext17:
  4929                           	opt stack 0
  4930  001FEC                     ___ftadd:
  4931                           	opt stack 27
  4932                           
  4933                           ;incstack = 0
  4934  001FEC  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4935  001FF0  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4936  001FF2  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4937  001FF4  342F               	rlcf	___ftadd@f1+1,w,c
  4938  001FF6  3634               	rlcf	??___ftadd& (0+255),f,c
  4939  001FF8  E301               	bnc	u1741
  4940  001FFA  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4941  001FFC                     u1741:
  4942  001FFC  5034               	movf	??___ftadd,w,c
  4943  001FFE  6E39               	movwf	___ftadd@exp1,c
  4944  002000  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4945  002004  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4946  002006  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4947  002008  3432               	rlcf	___ftadd@f2+1,w,c
  4948  00200A  3634               	rlcf	??___ftadd& (0+255),f,c
  4949  00200C  E301               	bnc	u1751
  4950  00200E  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4951  002010                     u1751:
  4952  002010  5034               	movf	??___ftadd,w,c
  4953  002012  6E38               	movwf	___ftadd@exp2,c
  4954  002014  5039               	movf	___ftadd@exp1,w,c
  4955  002016  B4D8               	btfsc	status,2,c
  4956  002018  D00B               	goto	l655
  4957  00201A  5038               	movf	___ftadd@exp2,w,c
  4958  00201C  5C39               	subwf	___ftadd@exp1,w,c
  4959  00201E  B0D8               	btfsc	status,0,c
  4960  002020  D00E               	goto	l1998
  4961  002022  5039               	movf	___ftadd@exp1,w,c
  4962  002024  0800               	sublw	0
  4963  002026  2438               	addwf	___ftadd@exp2,w,c
  4964  002028  6E34               	movwf	??___ftadd& (0+255),c
  4965  00202A  0E18               	movlw	24
  4966  00202C  6434               	cpfsgt	??___ftadd,c
  4967  00202E  D007               	goto	l1998
  4968  002030                     l655:
  4969  002030  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4970  002034  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4971  002038  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4972  00203C  D0B8               	goto	l656
  4973  00203E                     l1998:
  4974  00203E  5038               	movf	___ftadd@exp2,w,c
  4975  002040  B4D8               	btfsc	status,2,c
  4976  002042  D00B               	goto	l659
  4977  002044  5039               	movf	___ftadd@exp1,w,c
  4978  002046  5C38               	subwf	___ftadd@exp2,w,c
  4979  002048  B0D8               	btfsc	status,0,c
  4980  00204A  D00E               	goto	l2004
  4981  00204C  5038               	movf	___ftadd@exp2,w,c
  4982  00204E  0800               	sublw	0
  4983  002050  2439               	addwf	___ftadd@exp1,w,c
  4984  002052  6E34               	movwf	??___ftadd& (0+255),c
  4985  002054  0E18               	movlw	24
  4986  002056  6434               	cpfsgt	??___ftadd,c
  4987  002058  D007               	goto	l2004
  4988  00205A                     l659:
  4989  00205A  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4990  00205E  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4991  002062  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4992  002066  D0A3               	goto	l656
  4993  002068                     l2004:
  4994  002068  0E06               	movlw	6
  4995  00206A  6E37               	movwf	___ftadd@sign,c
  4996  00206C  AE30               	btfss	___ftadd@f1+2,7,c
  4997  00206E  D002               	goto	l2010
  4998  002070  8E37               	bsf	___ftadd@sign,7,c
  4999  002072  D000               	goto	l2010
  5000  002074                     l2010:
  5001  002074  BE33               	btfsc	___ftadd@f2+2,7,c
  5002  002076  8C37               	bsf	___ftadd@sign,6,c
  5003  002078  8E2F               	bsf	___ftadd@f1+1,7,c
  5004  00207A  0EFF               	movlw	255
  5005  00207C  162E               	andwf	___ftadd@f1,f,c
  5006  00207E  0EFF               	movlw	255
  5007  002080  162F               	andwf	___ftadd@f1+1,f,c
  5008  002082  0E00               	movlw	0
  5009  002084  1630               	andwf	___ftadd@f1+2,f,c
  5010  002086  8E32               	bsf	___ftadd@f2+1,7,c
  5011  002088  0EFF               	movlw	255
  5012  00208A  1631               	andwf	___ftadd@f2,f,c
  5013  00208C  0EFF               	movlw	255
  5014  00208E  1632               	andwf	___ftadd@f2+1,f,c
  5015  002090  0E00               	movlw	0
  5016  002092  1633               	andwf	___ftadd@f2+2,f,c
  5017  002094  5038               	movf	___ftadd@exp2,w,c
  5018  002096  5C39               	subwf	___ftadd@exp1,w,c
  5019  002098  B0D8               	btfsc	status,0,c
  5020  00209A  D01E               	goto	l2030
  5021  00209C                     l2020:
  5022  00209C  90D8               	bcf	status,0,c
  5023  00209E  3631               	rlcf	___ftadd@f2,f,c
  5024  0020A0  3632               	rlcf	___ftadd@f2+1,f,c
  5025  0020A2  3633               	rlcf	___ftadd@f2+2,f,c
  5026  0020A4  0638               	decf	___ftadd@exp2,f,c
  5027  0020A6  5039               	movf	___ftadd@exp1,w,c
  5028  0020A8  1838               	xorwf	___ftadd@exp2,w,c
  5029  0020AA  B4D8               	btfsc	status,2,c
  5030  0020AC  D00F               	goto	l2028
  5031  0020AE  0637               	decf	___ftadd@sign,f,c
  5032  0020B0  C037  F034         	movff	___ftadd@sign,??___ftadd
  5033  0020B4  0E07               	movlw	7
  5034  0020B6  1634               	andwf	??___ftadd,f,c
  5035  0020B8  B4D8               	btfsc	status,2,c
  5036  0020BA  D008               	goto	l2028
  5037  0020BC  D7EF               	goto	l2020
  5038  0020BE  D006               	goto	l2028
  5039  0020C0                     l2026:
  5040  0020C0  90D8               	bcf	status,0,c
  5041  0020C2  3230               	rrcf	___ftadd@f1+2,f,c
  5042  0020C4  322F               	rrcf	___ftadd@f1+1,f,c
  5043  0020C6  322E               	rrcf	___ftadd@f1,f,c
  5044  0020C8  2A39               	incf	___ftadd@exp1,f,c
  5045  0020CA  D000               	goto	l2028
  5046  0020CC                     l2028:
  5047  0020CC  5038               	movf	___ftadd@exp2,w,c
  5048  0020CE  1839               	xorwf	___ftadd@exp1,w,c
  5049  0020D0  B4D8               	btfsc	status,2,c
  5050  0020D2  D024               	goto	l670
  5051  0020D4  D7F5               	goto	l2026
  5052  0020D6  D022               	goto	l670
  5053  0020D8                     l2030:
  5054  0020D8  5039               	movf	___ftadd@exp1,w,c
  5055  0020DA  5C38               	subwf	___ftadd@exp2,w,c
  5056  0020DC  B0D8               	btfsc	status,0,c
  5057  0020DE  D01E               	goto	l670
  5058  0020E0                     l2032:
  5059  0020E0  90D8               	bcf	status,0,c
  5060  0020E2  362E               	rlcf	___ftadd@f1,f,c
  5061  0020E4  362F               	rlcf	___ftadd@f1+1,f,c
  5062  0020E6  3630               	rlcf	___ftadd@f1+2,f,c
  5063  0020E8  0639               	decf	___ftadd@exp1,f,c
  5064  0020EA  5039               	movf	___ftadd@exp1,w,c
  5065  0020EC  1838               	xorwf	___ftadd@exp2,w,c
  5066  0020EE  B4D8               	btfsc	status,2,c
  5067  0020F0  D00F               	goto	l2040
  5068  0020F2  0637               	decf	___ftadd@sign,f,c
  5069  0020F4  C037  F034         	movff	___ftadd@sign,??___ftadd
  5070  0020F8  0E07               	movlw	7
  5071  0020FA  1634               	andwf	??___ftadd,f,c
  5072  0020FC  B4D8               	btfsc	status,2,c
  5073  0020FE  D008               	goto	l2040
  5074  002100  D7EF               	goto	l2032
  5075  002102  D006               	goto	l2040
  5076  002104                     l2038:
  5077  002104  90D8               	bcf	status,0,c
  5078  002106  3233               	rrcf	___ftadd@f2+2,f,c
  5079  002108  3232               	rrcf	___ftadd@f2+1,f,c
  5080  00210A  3231               	rrcf	___ftadd@f2,f,c
  5081  00210C  2A38               	incf	___ftadd@exp2,f,c
  5082  00210E  D000               	goto	l2040
  5083  002110                     l2040:
  5084  002110  5038               	movf	___ftadd@exp2,w,c
  5085  002112  1839               	xorwf	___ftadd@exp1,w,c
  5086  002114  B4D8               	btfsc	status,2,c
  5087  002116  D002               	goto	l670
  5088  002118  D7F5               	goto	l2038
  5089  00211A  D000               	goto	l670
  5090  00211C                     l670:
  5091  00211C  AE37               	btfss	___ftadd@sign,7,c
  5092  00211E  D00C               	goto	l679
  5093  002120  0EFF               	movlw	255
  5094  002122  1A2E               	xorwf	___ftadd@f1,f,c
  5095  002124  0EFF               	movlw	255
  5096  002126  1A2F               	xorwf	___ftadd@f1+1,f,c
  5097  002128  0EFF               	movlw	255
  5098  00212A  1A30               	xorwf	___ftadd@f1+2,f,c
  5099  00212C  0E01               	movlw	1
  5100  00212E  262E               	addwf	___ftadd@f1,f,c
  5101  002130  0E00               	movlw	0
  5102  002132  222F               	addwfc	___ftadd@f1+1,f,c
  5103  002134  0E00               	movlw	0
  5104  002136  2230               	addwfc	___ftadd@f1+2,f,c
  5105  002138                     l679:
  5106  002138  AC37               	btfss	___ftadd@sign,6,c
  5107  00213A  D00D               	goto	l2046
  5108  00213C  0EFF               	movlw	255
  5109  00213E  1A31               	xorwf	___ftadd@f2,f,c
  5110  002140  0EFF               	movlw	255
  5111  002142  1A32               	xorwf	___ftadd@f2+1,f,c
  5112  002144  0EFF               	movlw	255
  5113  002146  1A33               	xorwf	___ftadd@f2+2,f,c
  5114  002148  0E01               	movlw	1
  5115  00214A  2631               	addwf	___ftadd@f2,f,c
  5116  00214C  0E00               	movlw	0
  5117  00214E  2232               	addwfc	___ftadd@f2+1,f,c
  5118  002150  0E00               	movlw	0
  5119  002152  2233               	addwfc	___ftadd@f2+2,f,c
  5120  002154  D000               	goto	l2046
  5121  002156                     l2046:
  5122  002156  0E00               	movlw	0
  5123  002158  6E37               	movwf	___ftadd@sign,c
  5124  00215A  502E               	movf	___ftadd@f1,w,c
  5125  00215C  2631               	addwf	___ftadd@f2,f,c
  5126  00215E  502F               	movf	___ftadd@f1+1,w,c
  5127  002160  2232               	addwfc	___ftadd@f2+1,f,c
  5128  002162  5030               	movf	___ftadd@f1+2,w,c
  5129  002164  2233               	addwfc	___ftadd@f2+2,f,c
  5130  002166  AE33               	btfss	___ftadd@f2+2,7,c
  5131  002168  D00F               	goto	l2056
  5132  00216A  0EFF               	movlw	255
  5133  00216C  1A31               	xorwf	___ftadd@f2,f,c
  5134  00216E  0EFF               	movlw	255
  5135  002170  1A32               	xorwf	___ftadd@f2+1,f,c
  5136  002172  0EFF               	movlw	255
  5137  002174  1A33               	xorwf	___ftadd@f2+2,f,c
  5138  002176  0E01               	movlw	1
  5139  002178  2631               	addwf	___ftadd@f2,f,c
  5140  00217A  0E00               	movlw	0
  5141  00217C  2232               	addwfc	___ftadd@f2+1,f,c
  5142  00217E  0E00               	movlw	0
  5143  002180  2233               	addwfc	___ftadd@f2+2,f,c
  5144  002182  0E01               	movlw	1
  5145  002184  6E37               	movwf	___ftadd@sign,c
  5146  002186  D000               	goto	l2056
  5147  002188                     l2056:
  5148  002188  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5149  00218C  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5150  002190  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5151  002194  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5152  002198  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5153  00219C  ECCD  F013         	call	___ftpack	;wreg free
  5154  0021A0  C001  F02E         	movff	?___ftpack,?___ftadd
  5155  0021A4  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5156  0021A8  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5157  0021AC  D000               	goto	l656
  5158  0021AE                     l656:
  5159  0021AE  0012               	return		;funcret
  5160  0021B0                     __end_of___ftadd:
  5161                           	opt stack 0
  5162                           tblptru	equ	0xFF8
  5163                           tblptrh	equ	0xFF7
  5164                           tblptrl	equ	0xFF6
  5165                           tablat	equ	0xFF5
  5166                           prodh	equ	0xFF4
  5167                           prodl	equ	0xFF3
  5168                           postinc0	equ	0xFEE
  5169                           wreg	equ	0xFE8
  5170                           postdec1	equ	0xFE5
  5171                           fsr1l	equ	0xFE1
  5172                           postinc2	equ	0xFDE
  5173                           postdec2	equ	0xFDD
  5174                           fsr2h	equ	0xFDA
  5175                           fsr2l	equ	0xFD9
  5176                           status	equ	0xFD8
  5177                           
  5178 ;; *************** function ___ftneg *****************
  5179 ;; Defined at:
  5180 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftneg.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;  f1              3    0[COMRAM] float 
  5183 ;; Auto vars:     Size  Location     Type
  5184 ;;		None
  5185 ;; Return value:  Size  Location     Type
  5186 ;;                  3    0[COMRAM] float 
  5187 ;; Registers used:
  5188 ;;		wreg, status,2, status,0
  5189 ;; Tracked objects:
  5190 ;;		On entry : 0/0
  5191 ;;		On exit  : 0/0
  5192 ;;		Unchanged: 0/0
  5193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5194 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5197 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5198 ;;Total ram usage:        3 bytes
  5199 ;; Hardware stack levels used:    1
  5200 ;; This function calls:
  5201 ;;		Nothing
  5202 ;; This function is called by:
  5203 ;;		_printf
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           	psect	text18
  5208  002D10                     __ptext18:
  5209                           	opt stack 0
  5210  002D10                     ___ftneg:
  5211                           	opt stack 29
  5212                           
  5213                           ;incstack = 0
  5214  002D10  5001               	movf	___ftneg@f1,w,c
  5215  002D12  1002               	iorwf	___ftneg@f1+1,w,c
  5216  002D14  1003               	iorwf	___ftneg@f1+2,w,c
  5217  002D16  B4D8               	btfsc	status,2,c
  5218  002D18  D006               	goto	l729
  5219  002D1A  0E00               	movlw	0
  5220  002D1C  1A01               	xorwf	___ftneg@f1,f,c
  5221  002D1E  0E00               	movlw	0
  5222  002D20  1A02               	xorwf	___ftneg@f1+1,f,c
  5223  002D22  0E80               	movlw	128
  5224  002D24  1A03               	xorwf	___ftneg@f1+2,f,c
  5225  002D26                     l729:
  5226  002D26  C001  F001         	movff	___ftneg@f1,?___ftneg
  5227  002D2A  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5228  002D2E  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5229  002D32  0012               	return		;funcret
  5230  002D34                     __end_of___ftneg:
  5231                           	opt stack 0
  5232                           tblptru	equ	0xFF8
  5233                           tblptrh	equ	0xFF7
  5234                           tblptrl	equ	0xFF6
  5235                           tablat	equ	0xFF5
  5236                           prodh	equ	0xFF4
  5237                           prodl	equ	0xFF3
  5238                           postinc0	equ	0xFEE
  5239                           wreg	equ	0xFE8
  5240                           postdec1	equ	0xFE5
  5241                           fsr1l	equ	0xFE1
  5242                           postinc2	equ	0xFDE
  5243                           postdec2	equ	0xFDD
  5244                           fsr2h	equ	0xFDA
  5245                           fsr2l	equ	0xFD9
  5246                           status	equ	0xFD8
  5247                           
  5248 ;; *************** function ___ftge *****************
  5249 ;; Defined at:
  5250 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftge.c"
  5251 ;; Parameters:    Size  Location     Type
  5252 ;;  ff1             3    0[COMRAM] float 
  5253 ;;  ff2             3    3[COMRAM] float 
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;		None
  5256 ;; Return value:  Size  Location     Type
  5257 ;;		None               void
  5258 ;; Registers used:
  5259 ;;		wreg, status,2, status,0
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5265 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5267 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5268 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5269 ;;Total ram usage:        9 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; This function calls:
  5272 ;;		Nothing
  5273 ;; This function is called by:
  5274 ;;		_printf
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           	psect	text19
  5279  0028F6                     __ptext19:
  5280                           	opt stack 0
  5281  0028F6                     ___ftge:
  5282                           	opt stack 29
  5283                           
  5284                           ;incstack = 0
  5285  0028F6  AE03               	btfss	___ftge@ff1+2,7,c
  5286  0028F8  D017               	goto	l2442
  5287  0028FA  C001  F007         	movff	___ftge@ff1,??___ftge
  5288  0028FE  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5289  002902  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5290  002906  1E07               	comf	??___ftge,f,c
  5291  002908  1E08               	comf	??___ftge+1,f,c
  5292  00290A  1E09               	comf	??___ftge+2,f,c
  5293  00290C  2A07               	incf	??___ftge,f,c
  5294  00290E  0E00               	movlw	0
  5295  002910  2208               	addwfc	??___ftge+1,f,c
  5296  002912  2209               	addwfc	??___ftge+2,f,c
  5297  002914  0E00               	movlw	0
  5298  002916  2407               	addwf	??___ftge,w,c
  5299  002918  6E01               	movwf	___ftge@ff1,c
  5300  00291A  0E00               	movlw	0
  5301  00291C  2008               	addwfc	??___ftge+1,w,c
  5302  00291E  6E02               	movwf	___ftge@ff1+1,c
  5303  002920  0E80               	movlw	128
  5304  002922  2009               	addwfc	??___ftge+2,w,c
  5305  002924  6E03               	movwf	___ftge@ff1+2,c
  5306  002926  D000               	goto	l2442
  5307  002928                     l2442:
  5308  002928  AE06               	btfss	___ftge@ff2+2,7,c
  5309  00292A  D017               	goto	l2446
  5310  00292C  C004  F007         	movff	___ftge@ff2,??___ftge
  5311  002930  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5312  002934  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5313  002938  1E07               	comf	??___ftge,f,c
  5314  00293A  1E08               	comf	??___ftge+1,f,c
  5315  00293C  1E09               	comf	??___ftge+2,f,c
  5316  00293E  2A07               	incf	??___ftge,f,c
  5317  002940  0E00               	movlw	0
  5318  002942  2208               	addwfc	??___ftge+1,f,c
  5319  002944  2209               	addwfc	??___ftge+2,f,c
  5320  002946  0E00               	movlw	0
  5321  002948  2407               	addwf	??___ftge,w,c
  5322  00294A  6E04               	movwf	___ftge@ff2,c
  5323  00294C  0E00               	movlw	0
  5324  00294E  2008               	addwfc	??___ftge+1,w,c
  5325  002950  6E05               	movwf	___ftge@ff2+1,c
  5326  002952  0E80               	movlw	128
  5327  002954  2009               	addwfc	??___ftge+2,w,c
  5328  002956  6E06               	movwf	___ftge@ff2+2,c
  5329  002958  D000               	goto	l2446
  5330  00295A                     l2446:
  5331  00295A  0E00               	movlw	0
  5332  00295C  1A01               	xorwf	___ftge@ff1,f,c
  5333  00295E  0E00               	movlw	0
  5334  002960  1A02               	xorwf	___ftge@ff1+1,f,c
  5335  002962  0E80               	movlw	128
  5336  002964  1A03               	xorwf	___ftge@ff1+2,f,c
  5337  002966  0E00               	movlw	0
  5338  002968  1A04               	xorwf	___ftge@ff2,f,c
  5339  00296A  0E00               	movlw	0
  5340  00296C  1A05               	xorwf	___ftge@ff2+1,f,c
  5341  00296E  0E80               	movlw	128
  5342  002970  1A06               	xorwf	___ftge@ff2+2,f,c
  5343  002972  5004               	movf	___ftge@ff2,w,c
  5344  002974  5C01               	subwf	___ftge@ff1,w,c
  5345  002976  5005               	movf	___ftge@ff2+1,w,c
  5346  002978  5802               	subwfb	___ftge@ff1+1,w,c
  5347  00297A  5006               	movf	___ftge@ff2+2,w,c
  5348  00297C  5803               	subwfb	___ftge@ff1+2,w,c
  5349  00297E  B0D8               	btfsc	status,0,c
  5350  002980  D002               	goto	l2452
  5351  002982  90D8               	bcf	status,0,c
  5352  002984  D002               	goto	l713
  5353  002986                     l2452:
  5354  002986  80D8               	bsf	status,0,c
  5355  002988  D000               	goto	l713
  5356  00298A                     l713:
  5357  00298A  0012               	return		;funcret
  5358  00298C                     __end_of___ftge:
  5359                           	opt stack 0
  5360                           tblptru	equ	0xFF8
  5361                           tblptrh	equ	0xFF7
  5362                           tblptrl	equ	0xFF6
  5363                           tablat	equ	0xFF5
  5364                           prodh	equ	0xFF4
  5365                           prodl	equ	0xFF3
  5366                           postinc0	equ	0xFEE
  5367                           wreg	equ	0xFE8
  5368                           postdec1	equ	0xFE5
  5369                           fsr1l	equ	0xFE1
  5370                           postinc2	equ	0xFDE
  5371                           postdec2	equ	0xFDD
  5372                           fsr2h	equ	0xFDA
  5373                           fsr2l	equ	0xFD9
  5374                           status	equ	0xFD8
  5375                           
  5376 ;; *************** function _init_UART *****************
  5377 ;; Defined at:
  5378 ;;		line 79 in file "Lab6pA.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;		None
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;		None
  5383 ;; Return value:  Size  Location     Type
  5384 ;;		None               void
  5385 ;; Registers used:
  5386 ;;		wreg, status,2, cstack
  5387 ;; Tracked objects:
  5388 ;;		On entry : 0/0
  5389 ;;		On exit  : 0/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;Total ram usage:        0 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:    1
  5399 ;; This function calls:
  5400 ;;		_OpenUSART
  5401 ;; This function is called by:
  5402 ;;		_main
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           	psect	text20
  5407  002DB8                     __ptext20:
  5408                           	opt stack 0
  5409  002DB8                     _init_UART:
  5410                           	opt stack 29
  5411                           
  5412                           ;Lab6pA.c: 81: OpenUSART(0b01111111 & 0b10111111 & 0b11111110 & 0b11111101
  5413                           ;Lab6pA.c: 82: & 0b11111111 & 0b11111111, 25);
  5414                           
  5415                           ;incstack = 0
  5416  002DB8  0E00               	movlw	0
  5417  002DBA  6E02               	movwf	OpenUSART@spbrg+1,c
  5418  002DBC  0E19               	movlw	25
  5419  002DBE  6E01               	movwf	OpenUSART@spbrg,c
  5420  002DC0  0E3C               	movlw	60
  5421  002DC2  EC85  F015         	call	_OpenUSART
  5422                           
  5423                           ;Lab6pA.c: 83: OSCCON = 0x60;
  5424  002DC6  0E60               	movlw	96
  5425  002DC8  6ED3               	movwf	4051,c	;volatile
  5426  002DCA  0012               	return		;funcret
  5427  002DCC                     __end_of_init_UART:
  5428                           	opt stack 0
  5429                           tblptru	equ	0xFF8
  5430                           tblptrh	equ	0xFF7
  5431                           tblptrl	equ	0xFF6
  5432                           tablat	equ	0xFF5
  5433                           prodh	equ	0xFF4
  5434                           prodl	equ	0xFF3
  5435                           postinc0	equ	0xFEE
  5436                           wreg	equ	0xFE8
  5437                           postdec1	equ	0xFE5
  5438                           fsr1l	equ	0xFE1
  5439                           postinc2	equ	0xFDE
  5440                           postdec2	equ	0xFDD
  5441                           fsr2h	equ	0xFDA
  5442                           fsr2l	equ	0xFD9
  5443                           status	equ	0xFD8
  5444                           
  5445 ;; *************** function _OpenUSART *****************
  5446 ;; Defined at:
  5447 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  5448 ;; Parameters:    Size  Location     Type
  5449 ;;  config          1    wreg     unsigned char 
  5450 ;;  spbrg           2    0[COMRAM] unsigned int 
  5451 ;; Auto vars:     Size  Location     Type
  5452 ;;  config          1    2[COMRAM] unsigned char 
  5453 ;; Return value:  Size  Location     Type
  5454 ;;		None               void
  5455 ;; Registers used:
  5456 ;;		wreg, status,2
  5457 ;; Tracked objects:
  5458 ;;		On entry : 0/0
  5459 ;;		On exit  : 0/0
  5460 ;;		Unchanged: 0/0
  5461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5462 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5463 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5465 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;Total ram usage:        3 bytes
  5467 ;; Hardware stack levels used:    1
  5468 ;; This function calls:
  5469 ;;		Nothing
  5470 ;; This function is called by:
  5471 ;;		_init_UART
  5472 ;; This function uses a non-reentrant model
  5473 ;;
  5474                           
  5475                           	psect	text21
  5476  002B0A                     __ptext21:
  5477                           	opt stack 0
  5478  002B0A                     _OpenUSART:
  5479                           	opt stack 29
  5480                           
  5481                           ;incstack = 0
  5482                           ;OpenUSART@config stored from wreg
  5483  002B0A  6E03               	movwf	OpenUSART@config,c
  5484  002B0C  0E00               	movlw	0
  5485  002B0E  6EAC               	movwf	4012,c	;volatile
  5486  002B10  0E00               	movlw	0
  5487  002B12  6EAB               	movwf	4011,c	;volatile
  5488  002B14  A003               	btfss	OpenUSART@config,0,c
  5489  002B16  D002               	goto	l2194
  5490  002B18  88AC               	bsf	4012,4,c	;volatile
  5491  002B1A  D000               	goto	l2194
  5492  002B1C                     l2194:
  5493  002B1C  A203               	btfss	OpenUSART@config,1,c
  5494  002B1E  D003               	goto	l2198
  5495  002B20  8CAC               	bsf	4012,6,c	;volatile
  5496  002B22  8CAB               	bsf	4011,6,c	;volatile
  5497  002B24  D000               	goto	l2198
  5498  002B26                     l2198:
  5499  002B26  A403               	btfss	OpenUSART@config,2,c
  5500  002B28  D002               	goto	l2202
  5501  002B2A  8EAC               	bsf	4012,7,c	;volatile
  5502  002B2C  D000               	goto	l2202
  5503  002B2E                     l2202:
  5504  002B2E  A603               	btfss	OpenUSART@config,3,c
  5505  002B30  D002               	goto	l278
  5506  002B32  88AB               	bsf	4011,4,c	;volatile
  5507  002B34  D002               	goto	l2206
  5508  002B36                     l278:
  5509  002B36  8AAB               	bsf	4011,5,c	;volatile
  5510  002B38  D000               	goto	l2206
  5511  002B3A                     l2206:
  5512  002B3A  B803               	btfsc	OpenUSART@config,4,c
  5513  002B3C  84AC               	bsf	4012,2,c	;volatile
  5514  002B3E  989E               	bcf	3998,4,c	;volatile
  5515  002B40  AA03               	btfss	OpenUSART@config,5,c
  5516  002B42  D002               	goto	l2214
  5517  002B44  86AB               	bsf	4011,3,c	;volatile
  5518  002B46  D000               	goto	l2214
  5519  002B48                     l2214:
  5520  002B48  AC03               	btfss	OpenUSART@config,6,c
  5521  002B4A  D002               	goto	l282
  5522  002B4C  8A9D               	bsf	3997,5,c	;volatile
  5523  002B4E  D001               	goto	l283
  5524  002B50                     l282:
  5525  002B50  9A9D               	bcf	3997,5,c	;volatile
  5526  002B52                     l283:
  5527  002B52  9A9E               	bcf	3998,5,c	;volatile
  5528  002B54  AE03               	btfss	OpenUSART@config,7,c
  5529  002B56  D002               	goto	l284
  5530  002B58  889D               	bsf	3997,4,c	;volatile
  5531  002B5A  D001               	goto	l285
  5532  002B5C                     l284:
  5533  002B5C  989D               	bcf	3997,4,c	;volatile
  5534  002B5E                     l285:
  5535  002B5E  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  5536  002B62  5002               	movf	OpenUSART@spbrg+1,w,c
  5537  002B64  6EB0               	movwf	4016,c	;volatile
  5538  002B66  8AAC               	bsf	4012,5,c	;volatile
  5539  002B68  8EAB               	bsf	4011,7,c	;volatile
  5540  002B6A  9C94               	bcf	3988,6,c	;volatile
  5541  002B6C  8E94               	bsf	3988,7,c	;volatile
  5542  002B6E  B8AC               	btfsc	4012,4,c	;volatile
  5543  002B70  BEAC               	btfsc	4012,7,c	;volatile
  5544  002B72  D002               	goto	l287
  5545  002B74  8C94               	bsf	3988,6,c	;volatile
  5546  002B76  D000               	goto	l287
  5547  002B78                     l287:
  5548  002B78  0012               	return		;funcret
  5549  002B7A                     __end_of_OpenUSART:
  5550                           	opt stack 0
  5551                           tblptru	equ	0xFF8
  5552                           tblptrh	equ	0xFF7
  5553                           tblptrl	equ	0xFF6
  5554                           tablat	equ	0xFF5
  5555                           prodh	equ	0xFF4
  5556                           prodl	equ	0xFF3
  5557                           postinc0	equ	0xFEE
  5558                           wreg	equ	0xFE8
  5559                           postdec1	equ	0xFE5
  5560                           fsr1l	equ	0xFE1
  5561                           postinc2	equ	0xFDE
  5562                           postdec2	equ	0xFDD
  5563                           fsr2h	equ	0xFDA
  5564                           fsr2l	equ	0xFD9
  5565                           status	equ	0xFD8
  5566                           
  5567 ;; *************** function _get_full_ADC *****************
  5568 ;; Defined at:
  5569 ;;		line 97 in file "Lab6pA.c"
  5570 ;; Parameters:    Size  Location     Type
  5571 ;;		None
  5572 ;; Auto vars:     Size  Location     Type
  5573 ;;  result          2    4[COMRAM] int 
  5574 ;; Return value:  Size  Location     Type
  5575 ;;                  2    0[COMRAM] unsigned int 
  5576 ;; Registers used:
  5577 ;;		wreg, status,2, status,0
  5578 ;; Tracked objects:
  5579 ;;		On entry : 0/0
  5580 ;;		On exit  : 0/0
  5581 ;;		Unchanged: 0/0
  5582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5583 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5584 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5585 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5586 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;Total ram usage:        6 bytes
  5588 ;; Hardware stack levels used:    1
  5589 ;; This function calls:
  5590 ;;		Nothing
  5591 ;; This function is called by:
  5592 ;;		_main
  5593 ;; This function uses a non-reentrant model
  5594 ;;
  5595                           
  5596                           	psect	text22
  5597  002CEA                     __ptext22:
  5598                           	opt stack 0
  5599  002CEA                     _get_full_ADC:
  5600                           	opt stack 30
  5601                           
  5602                           ;Lab6pA.c: 99: int result;
  5603                           ;Lab6pA.c: 100: ADCON0bits.GO=1;
  5604                           
  5605                           ;incstack = 0
  5606  002CEA  82C2               	bsf	4034,1,c	;volatile
  5607                           
  5608                           ;Lab6pA.c: 101: while(ADCON0bits.DONE==1);
  5609  002CEC  D000               	goto	l101
  5610  002CEE                     l101:
  5611  002CEE  B2C2               	btfsc	4034,1,c	;volatile
  5612  002CF0  D7FE               	goto	l101
  5613                           
  5614                           ;Lab6pA.c: 102: result = (ADRESH * 0x100) + ADRESL;
  5615  002CF2  50C4               	movf	4036,w,c	;volatile
  5616  002CF4  6E04               	movwf	(??_get_full_ADC+1)& (0+255),c
  5617  002CF6  6A03               	clrf	??_get_full_ADC& (0+255),c
  5618  002CF8  50C3               	movf	4035,w,c	;volatile
  5619  002CFA  2403               	addwf	??_get_full_ADC,w,c
  5620  002CFC  6E05               	movwf	get_full_ADC@result,c
  5621  002CFE  0E00               	movlw	0
  5622  002D00  2004               	addwfc	??_get_full_ADC+1,w,c
  5623  002D02  6E06               	movwf	get_full_ADC@result+1,c
  5624                           
  5625                           ;Lab6pA.c: 104: return result;
  5626  002D04  C005  F001         	movff	get_full_ADC@result,?_get_full_ADC
  5627  002D08  C006  F002         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  5628  002D0C  D000               	goto	l104
  5629  002D0E                     l104:
  5630  002D0E  0012               	return		;funcret
  5631  002D10                     __end_of_get_full_ADC:
  5632                           	opt stack 0
  5633                           tblptru	equ	0xFF8
  5634                           tblptrh	equ	0xFF7
  5635                           tblptrl	equ	0xFF6
  5636                           tablat	equ	0xFF5
  5637                           prodh	equ	0xFF4
  5638                           prodl	equ	0xFF3
  5639                           postinc0	equ	0xFEE
  5640                           wreg	equ	0xFE8
  5641                           postdec1	equ	0xFE5
  5642                           fsr1l	equ	0xFE1
  5643                           postinc2	equ	0xFDE
  5644                           postdec2	equ	0xFDD
  5645                           fsr2h	equ	0xFDA
  5646                           fsr2l	equ	0xFD9
  5647                           status	equ	0xFD8
  5648                           
  5649 ;; *************** function ___ftdiv *****************
  5650 ;; Defined at:
  5651 ;;		line 54 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5652 ;; Parameters:    Size  Location     Type
  5653 ;;  f1              3   12[COMRAM] float 
  5654 ;;  f2              3   15[COMRAM] float 
  5655 ;; Auto vars:     Size  Location     Type
  5656 ;;  f3              3   22[COMRAM] float 
  5657 ;;  sign            1   26[COMRAM] unsigned char 
  5658 ;;  exp             1   25[COMRAM] unsigned char 
  5659 ;;  cntr            1   21[COMRAM] unsigned char 
  5660 ;; Return value:  Size  Location     Type
  5661 ;;                  3   12[COMRAM] float 
  5662 ;; Registers used:
  5663 ;;		wreg, status,2, status,0, cstack
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5669 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5670 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5671 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5672 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5673 ;;Total ram usage:       15 bytes
  5674 ;; Hardware stack levels used:    1
  5675 ;; Hardware stack levels required when called:    1
  5676 ;; This function calls:
  5677 ;;		___ftpack
  5678 ;; This function is called by:
  5679 ;;		_main
  5680 ;; This function uses a non-reentrant model
  5681 ;;
  5682                           
  5683                           	psect	text23
  5684  0026B8                     __ptext23:
  5685                           	opt stack 0
  5686  0026B8                     ___ftdiv:
  5687                           	opt stack 29
  5688                           
  5689                           ;incstack = 0
  5690  0026B8  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  5691  0026BC  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5692  0026BE  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5693  0026C0  340E               	rlcf	___ftdiv@f1+1,w,c
  5694  0026C2  3613               	rlcf	??___ftdiv& (0+255),f,c
  5695  0026C4  E301               	bnc	u3221
  5696  0026C6  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5697  0026C8                     u3221:
  5698  0026C8  5013               	movf	??___ftdiv,w,c
  5699  0026CA  6E1A               	movwf	___ftdiv@exp,c
  5700  0026CC  501A               	movf	___ftdiv@exp,w,c
  5701  0026CE  A4D8               	btfss	status,2,c
  5702  0026D0  D002               	goto	l2838
  5703  0026D2  D00E               	goto	l2840
  5704  0026D4  D061               	goto	l687
  5705  0026D6                     l2838:
  5706  0026D6  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  5707  0026DA  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5708  0026DC  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5709  0026DE  3411               	rlcf	___ftdiv@f2+1,w,c
  5710  0026E0  3613               	rlcf	??___ftdiv& (0+255),f,c
  5711  0026E2  E301               	bnc	u3241
  5712  0026E4  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5713  0026E6                     u3241:
  5714  0026E6  5013               	movf	??___ftdiv,w,c
  5715  0026E8  6E1B               	movwf	___ftdiv@sign,c
  5716  0026EA  501B               	movf	___ftdiv@sign,w,c
  5717  0026EC  A4D8               	btfss	status,2,c
  5718  0026EE  D007               	goto	l2844
  5719  0026F0                     l2840:
  5720  0026F0  0E00               	movlw	0
  5721  0026F2  6E0D               	movwf	?___ftdiv,c
  5722  0026F4  0E00               	movlw	0
  5723  0026F6  6E0E               	movwf	?___ftdiv+1,c
  5724  0026F8  0E00               	movlw	0
  5725  0026FA  6E0F               	movwf	?___ftdiv+2,c
  5726  0026FC  D04D               	goto	l687
  5727  0026FE                     l2844:
  5728  0026FE  0E00               	movlw	0
  5729  002700  6E17               	movwf	___ftdiv@f3,c
  5730  002702  0E00               	movlw	0
  5731  002704  6E18               	movwf	___ftdiv@f3+1,c
  5732  002706  0E00               	movlw	0
  5733  002708  6E19               	movwf	___ftdiv@f3+2,c
  5734  00270A  501B               	movf	___ftdiv@sign,w,c
  5735  00270C  0F89               	addlw	137
  5736  00270E  5E1A               	subwf	___ftdiv@exp,f,c
  5737  002710  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  5738  002714  5012               	movf	___ftdiv@f2+2,w,c
  5739  002716  1A1B               	xorwf	___ftdiv@sign,f,c
  5740  002718  0E80               	movlw	128
  5741  00271A  161B               	andwf	___ftdiv@sign,f,c
  5742  00271C  8E0E               	bsf	___ftdiv@f1+1,7,c
  5743  00271E  0EFF               	movlw	255
  5744  002720  160D               	andwf	___ftdiv@f1,f,c
  5745  002722  0EFF               	movlw	255
  5746  002724  160E               	andwf	___ftdiv@f1+1,f,c
  5747  002726  0E00               	movlw	0
  5748  002728  160F               	andwf	___ftdiv@f1+2,f,c
  5749  00272A  8E11               	bsf	___ftdiv@f2+1,7,c
  5750  00272C  0EFF               	movlw	255
  5751  00272E  1610               	andwf	___ftdiv@f2,f,c
  5752  002730  0EFF               	movlw	255
  5753  002732  1611               	andwf	___ftdiv@f2+1,f,c
  5754  002734  0E00               	movlw	0
  5755  002736  1612               	andwf	___ftdiv@f2+2,f,c
  5756  002738  0E18               	movlw	24
  5757  00273A  6E16               	movwf	___ftdiv@cntr,c
  5758  00273C  D000               	goto	l2864
  5759  00273E                     l2864:
  5760  00273E  90D8               	bcf	status,0,c
  5761  002740  3617               	rlcf	___ftdiv@f3,f,c
  5762  002742  3618               	rlcf	___ftdiv@f3+1,f,c
  5763  002744  3619               	rlcf	___ftdiv@f3+2,f,c
  5764  002746  5010               	movf	___ftdiv@f2,w,c
  5765  002748  5C0D               	subwf	___ftdiv@f1,w,c
  5766  00274A  5011               	movf	___ftdiv@f2+1,w,c
  5767  00274C  580E               	subwfb	___ftdiv@f1+1,w,c
  5768  00274E  5012               	movf	___ftdiv@f2+2,w,c
  5769  002750  580F               	subwfb	___ftdiv@f1+2,w,c
  5770  002752  A0D8               	btfss	status,0,c
  5771  002754  D007               	goto	l690
  5772  002756  5010               	movf	___ftdiv@f2,w,c
  5773  002758  5E0D               	subwf	___ftdiv@f1,f,c
  5774  00275A  5011               	movf	___ftdiv@f2+1,w,c
  5775  00275C  5A0E               	subwfb	___ftdiv@f1+1,f,c
  5776  00275E  5012               	movf	___ftdiv@f2+2,w,c
  5777  002760  5A0F               	subwfb	___ftdiv@f1+2,f,c
  5778  002762  8017               	bsf	___ftdiv@f3,0,c
  5779  002764                     l690:
  5780  002764  90D8               	bcf	status,0,c
  5781  002766  360D               	rlcf	___ftdiv@f1,f,c
  5782  002768  360E               	rlcf	___ftdiv@f1+1,f,c
  5783  00276A  360F               	rlcf	___ftdiv@f1+2,f,c
  5784  00276C  2E16               	decfsz	___ftdiv@cntr,f,c
  5785  00276E  D7E7               	goto	l2864
  5786  002770  D000               	goto	l2874
  5787  002772                     l2874:
  5788  002772  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  5789  002776  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5790  00277A  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5791  00277E  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  5792  002782  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  5793  002786  ECCD  F013         	call	___ftpack	;wreg free
  5794  00278A  C001  F00D         	movff	?___ftpack,?___ftdiv
  5795  00278E  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  5796  002792  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  5797  002796  D000               	goto	l687
  5798  002798                     l687:
  5799  002798  0012               	return		;funcret
  5800  00279A                     __end_of___ftdiv:
  5801                           	opt stack 0
  5802                           tblptru	equ	0xFF8
  5803                           tblptrh	equ	0xFF7
  5804                           tblptrl	equ	0xFF6
  5805                           tablat	equ	0xFF5
  5806                           prodh	equ	0xFF4
  5807                           prodl	equ	0xFF3
  5808                           postinc0	equ	0xFEE
  5809                           wreg	equ	0xFE8
  5810                           postdec1	equ	0xFE5
  5811                           fsr1l	equ	0xFE1
  5812                           postinc2	equ	0xFDE
  5813                           postdec2	equ	0xFDD
  5814                           fsr2h	equ	0xFDA
  5815                           fsr2l	equ	0xFD9
  5816                           status	equ	0xFD8
  5817                           
  5818 ;; *************** function ___awtoft *****************
  5819 ;; Defined at:
  5820 ;;		line 32 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awtoft.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;  c               2    8[COMRAM] int 
  5823 ;; Auto vars:     Size  Location     Type
  5824 ;;  sign            1   11[COMRAM] unsigned char 
  5825 ;; Return value:  Size  Location     Type
  5826 ;;                  3    8[COMRAM] float 
  5827 ;; Registers used:
  5828 ;;		wreg, status,2, status,0, cstack
  5829 ;; Tracked objects:
  5830 ;;		On entry : 0/0
  5831 ;;		On exit  : 0/0
  5832 ;;		Unchanged: 0/0
  5833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5834 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5835 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5837 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;Total ram usage:        4 bytes
  5839 ;; Hardware stack levels used:    1
  5840 ;; Hardware stack levels required when called:    1
  5841 ;; This function calls:
  5842 ;;		___ftpack
  5843 ;; This function is called by:
  5844 ;;		_main
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           	psect	text24
  5849  002C5C                     __ptext24:
  5850                           	opt stack 0
  5851  002C5C                     ___awtoft:
  5852                           	opt stack 29
  5853                           
  5854                           ;incstack = 0
  5855  002C5C  0E00               	movlw	0
  5856  002C5E  6E0C               	movwf	___awtoft@sign,c
  5857  002C60  AE0A               	btfss	___awtoft@c+1,7,c
  5858  002C62  D007               	goto	l2886
  5859  002C64  6C09               	negf	___awtoft@c,c
  5860  002C66  1E0A               	comf	___awtoft@c+1,f,c
  5861  002C68  B0D8               	btfsc	status,0,c
  5862  002C6A  2A0A               	incf	___awtoft@c+1,f,c
  5863  002C6C  0E01               	movlw	1
  5864  002C6E  6E0C               	movwf	___awtoft@sign,c
  5865  002C70  D000               	goto	l2886
  5866  002C72                     l2886:
  5867  002C72  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5868  002C76  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5869  002C7A  6A03               	clrf	___ftpack@arg+2,c
  5870  002C7C  0E8E               	movlw	142
  5871  002C7E  6E04               	movwf	___ftpack@exp,c
  5872  002C80  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5873  002C84  ECCD  F013         	call	___ftpack	;wreg free
  5874  002C88  C001  F009         	movff	?___ftpack,?___awtoft
  5875  002C8C  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5876  002C90  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5877  002C94  D000               	goto	l508
  5878  002C96                     l508:
  5879  002C96  0012               	return		;funcret
  5880  002C98                     __end_of___awtoft:
  5881                           	opt stack 0
  5882                           tblptru	equ	0xFF8
  5883                           tblptrh	equ	0xFF7
  5884                           tblptrl	equ	0xFF6
  5885                           tablat	equ	0xFF5
  5886                           prodh	equ	0xFF4
  5887                           prodl	equ	0xFF3
  5888                           postinc0	equ	0xFEE
  5889                           wreg	equ	0xFE8
  5890                           postdec1	equ	0xFE5
  5891                           fsr1l	equ	0xFE1
  5892                           postinc2	equ	0xFDE
  5893                           postdec2	equ	0xFDD
  5894                           fsr2h	equ	0xFDA
  5895                           fsr2l	equ	0xFD9
  5896                           status	equ	0xFD8
  5897                           
  5898 ;; *************** function ___ftpack *****************
  5899 ;; Defined at:
  5900 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\float.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;  arg             3    0[COMRAM] unsigned um
  5903 ;;  exp             1    3[COMRAM] unsigned char 
  5904 ;;  sign            1    4[COMRAM] unsigned char 
  5905 ;; Auto vars:     Size  Location     Type
  5906 ;;		None
  5907 ;; Return value:  Size  Location     Type
  5908 ;;                  3    0[COMRAM] float 
  5909 ;; Registers used:
  5910 ;;		wreg, status,2, status,0
  5911 ;; Tracked objects:
  5912 ;;		On entry : 0/0
  5913 ;;		On exit  : 0/0
  5914 ;;		Unchanged: 0/0
  5915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5916 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5918 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5919 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5920 ;;Total ram usage:        8 bytes
  5921 ;; Hardware stack levels used:    1
  5922 ;; This function calls:
  5923 ;;		Nothing
  5924 ;; This function is called by:
  5925 ;;		___awtoft
  5926 ;;		___ftadd
  5927 ;;		___ftdiv
  5928 ;;		___ftmul
  5929 ;;		___lltoft
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           	psect	text25
  5934  00279A                     __ptext25:
  5935                           	opt stack 0
  5936  00279A                     ___ftpack:
  5937                           	opt stack 27
  5938                           
  5939                           ;incstack = 0
  5940  00279A  5004               	movf	___ftpack@exp,w,c
  5941  00279C  B4D8               	btfsc	status,2,c
  5942  00279E  D005               	goto	l1952
  5943  0027A0  5001               	movf	___ftpack@arg,w,c
  5944  0027A2  1002               	iorwf	___ftpack@arg+1,w,c
  5945  0027A4  1003               	iorwf	___ftpack@arg+2,w,c
  5946  0027A6  A4D8               	btfss	status,2,c
  5947  0027A8  D00E               	goto	l1958
  5948  0027AA                     l1952:
  5949  0027AA  0E00               	movlw	0
  5950  0027AC  6E01               	movwf	?___ftpack,c
  5951  0027AE  0E00               	movlw	0
  5952  0027B0  6E02               	movwf	?___ftpack+1,c
  5953  0027B2  0E00               	movlw	0
  5954  0027B4  6E03               	movwf	?___ftpack+2,c
  5955  0027B6  D053               	goto	l615
  5956  0027B8  D006               	goto	l1958
  5957  0027BA                     l1956:
  5958  0027BA  2A04               	incf	___ftpack@exp,f,c
  5959  0027BC  90D8               	bcf	status,0,c
  5960  0027BE  3203               	rrcf	___ftpack@arg+2,f,c
  5961  0027C0  3202               	rrcf	___ftpack@arg+1,f,c
  5962  0027C2  3201               	rrcf	___ftpack@arg,f,c
  5963  0027C4  D000               	goto	l1958
  5964  0027C6                     l1958:
  5965  0027C6  0E00               	movlw	0
  5966  0027C8  1401               	andwf	___ftpack@arg,w,c
  5967  0027CA  6E06               	movwf	??___ftpack& (0+255),c
  5968  0027CC  0E00               	movlw	0
  5969  0027CE  1402               	andwf	___ftpack@arg+1,w,c
  5970  0027D0  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5971  0027D2  0EFE               	movlw	254
  5972  0027D4  1403               	andwf	___ftpack@arg+2,w,c
  5973  0027D6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5974  0027D8  5006               	movf	??___ftpack,w,c
  5975  0027DA  1007               	iorwf	??___ftpack+1,w,c
  5976  0027DC  1008               	iorwf	??___ftpack+2,w,c
  5977  0027DE  B4D8               	btfsc	status,2,c
  5978  0027E0  D00E               	goto	l1964
  5979  0027E2  D7EB               	goto	l1956
  5980  0027E4  D00C               	goto	l1964
  5981  0027E6                     l1960:
  5982  0027E6  2A04               	incf	___ftpack@exp,f,c
  5983  0027E8  0E01               	movlw	1
  5984  0027EA  2601               	addwf	___ftpack@arg,f,c
  5985  0027EC  0E00               	movlw	0
  5986  0027EE  2202               	addwfc	___ftpack@arg+1,f,c
  5987  0027F0  0E00               	movlw	0
  5988  0027F2  2203               	addwfc	___ftpack@arg+2,f,c
  5989  0027F4  90D8               	bcf	status,0,c
  5990  0027F6  3203               	rrcf	___ftpack@arg+2,f,c
  5991  0027F8  3202               	rrcf	___ftpack@arg+1,f,c
  5992  0027FA  3201               	rrcf	___ftpack@arg,f,c
  5993  0027FC  D000               	goto	l1964
  5994  0027FE                     l1964:
  5995  0027FE  0E00               	movlw	0
  5996  002800  1401               	andwf	___ftpack@arg,w,c
  5997  002802  6E06               	movwf	??___ftpack& (0+255),c
  5998  002804  0E00               	movlw	0
  5999  002806  1402               	andwf	___ftpack@arg+1,w,c
  6000  002808  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6001  00280A  0EFF               	movlw	255
  6002  00280C  1403               	andwf	___ftpack@arg+2,w,c
  6003  00280E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6004  002810  5006               	movf	??___ftpack,w,c
  6005  002812  1007               	iorwf	??___ftpack+1,w,c
  6006  002814  1008               	iorwf	??___ftpack+2,w,c
  6007  002816  B4D8               	btfsc	status,2,c
  6008  002818  D008               	goto	l1968
  6009  00281A  D7E5               	goto	l1960
  6010  00281C  D006               	goto	l1968
  6011  00281E                     l1966:
  6012  00281E  0604               	decf	___ftpack@exp,f,c
  6013  002820  90D8               	bcf	status,0,c
  6014  002822  3601               	rlcf	___ftpack@arg,f,c
  6015  002824  3602               	rlcf	___ftpack@arg+1,f,c
  6016  002826  3603               	rlcf	___ftpack@arg+2,f,c
  6017  002828  D000               	goto	l1968
  6018  00282A                     l1968:
  6019  00282A  BE02               	btfsc	___ftpack@arg+1,7,c
  6020  00282C  D004               	goto	l626
  6021  00282E  0E02               	movlw	2
  6022  002830  6004               	cpfslt	___ftpack@exp,c
  6023  002832  D7F5               	goto	l1966
  6024  002834  D000               	goto	l626
  6025  002836                     l626:
  6026  002836  B004               	btfsc	___ftpack@exp,0,c
  6027  002838  D002               	goto	l1974
  6028  00283A  9E02               	bcf	___ftpack@arg+1,7,c
  6029  00283C  D000               	goto	l1974
  6030  00283E                     l1974:
  6031  00283E  90D8               	bcf	status,0,c
  6032  002840  3204               	rrcf	___ftpack@exp,f,c
  6033  002842  5004               	movf	___ftpack@exp,w,c
  6034  002844  1203               	iorwf	___ftpack@arg+2,f,c
  6035  002846  5005               	movf	___ftpack@sign,w,c
  6036  002848  B4D8               	btfsc	status,2,c
  6037  00284A  D002               	goto	l1980
  6038  00284C  8E03               	bsf	___ftpack@arg+2,7,c
  6039  00284E  D000               	goto	l1980
  6040  002850                     l1980:
  6041  002850  C001  F001         	movff	___ftpack@arg,?___ftpack
  6042  002854  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6043  002858  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6044  00285C  D000               	goto	l615
  6045  00285E                     l615:
  6046  00285E  0012               	return		;funcret
  6047  002860                     __end_of___ftpack:
  6048                           	opt stack 0
  6049                           tblptru	equ	0xFF8
  6050                           tblptrh	equ	0xFF7
  6051                           tblptrl	equ	0xFF6
  6052                           tablat	equ	0xFF5
  6053                           prodh	equ	0xFF4
  6054                           prodl	equ	0xFF3
  6055                           postinc0	equ	0xFEE
  6056                           wreg	equ	0xFE8
  6057                           postdec1	equ	0xFE5
  6058                           fsr1l	equ	0xFE1
  6059                           postinc2	equ	0xFDE
  6060                           postdec2	equ	0xFDD
  6061                           fsr2h	equ	0xFDA
  6062                           fsr2l	equ	0xFD9
  6063                           status	equ	0xFD8
  6064                           
  6065 ;; *************** function _WAIT_HALF_SEC *****************
  6066 ;; Defined at:
  6067 ;;		line 113 in file "Lab6pA.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;		None
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;		None
  6072 ;; Return value:  Size  Location     Type
  6073 ;;		None               void
  6074 ;; Registers used:
  6075 ;;		wreg, status,2
  6076 ;; Tracked objects:
  6077 ;;		On entry : 0/0
  6078 ;;		On exit  : 0/0
  6079 ;;		Unchanged: 0/0
  6080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6085 ;;Total ram usage:        0 bytes
  6086 ;; Hardware stack levels used:    1
  6087 ;; This function calls:
  6088 ;;		Nothing
  6089 ;; This function is called by:
  6090 ;;		_main
  6091 ;;		_WAIT_1_SEC
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           	psect	text26
  6096  002D56                     __ptext26:
  6097                           	opt stack 0
  6098  002D56                     _WAIT_HALF_SEC:
  6099                           	opt stack 30
  6100                           
  6101                           ;Lab6pA.c: 115: T0CON = 0x02;
  6102                           
  6103                           ;incstack = 0
  6104  002D56  0E02               	movlw	2
  6105  002D58  6ED5               	movwf	4053,c	;volatile
  6106                           
  6107                           ;Lab6pA.c: 116: TMR0L = 0xDB;
  6108  002D5A  0EDB               	movlw	219
  6109  002D5C  6ED6               	movwf	4054,c	;volatile
  6110                           
  6111                           ;Lab6pA.c: 117: TMR0H = 0xB;
  6112  002D5E  0E0B               	movlw	11
  6113  002D60  6ED7               	movwf	4055,c	;volatile
  6114                           
  6115                           ;Lab6pA.c: 118: INTCONbits.TMR0IF = 0;
  6116  002D62  94F2               	bcf	intcon,2,c	;volatile
  6117                           
  6118                           ;Lab6pA.c: 119: T0CONbits.TMR0ON = 1;
  6119  002D64  8ED5               	bsf	4053,7,c	;volatile
  6120                           
  6121                           ;Lab6pA.c: 120: while (INTCONbits.TMR0IF == 0);
  6122  002D66  D000               	goto	l110
  6123  002D68                     l110:
  6124  002D68  A4F2               	btfss	intcon,2,c	;volatile
  6125  002D6A  D7FE               	goto	l110
  6126                           
  6127                           ;Lab6pA.c: 121: T0CONbits.TMR0ON = 0;
  6128  002D6C  9ED5               	bcf	4053,7,c	;volatile
  6129  002D6E  0012               	return		;funcret
  6130  002D70                     __end_of_WAIT_HALF_SEC:
  6131                           	opt stack 0
  6132                           tblptru	equ	0xFF8
  6133                           tblptrh	equ	0xFF7
  6134                           tblptrl	equ	0xFF6
  6135                           tablat	equ	0xFF5
  6136                           prodh	equ	0xFF4
  6137                           prodl	equ	0xFF3
  6138                           intcon	equ	0xFF2
  6139                           postinc0	equ	0xFEE
  6140                           wreg	equ	0xFE8
  6141                           postdec1	equ	0xFE5
  6142                           fsr1l	equ	0xFE1
  6143                           postinc2	equ	0xFDE
  6144                           postdec2	equ	0xFDD
  6145                           fsr2h	equ	0xFDA
  6146                           fsr2l	equ	0xFD9
  6147                           status	equ	0xFD8
  6148                           
  6149 ;; *************** function _Select_ADC_Channel *****************
  6150 ;; Defined at:
  6151 ;;		line 92 in file "Lab6pA.c"
  6152 ;; Parameters:    Size  Location     Type
  6153 ;;  channel         1    wreg     unsigned char 
  6154 ;; Auto vars:     Size  Location     Type
  6155 ;;  channel         1    0[COMRAM] unsigned char 
  6156 ;; Return value:  Size  Location     Type
  6157 ;;		None               void
  6158 ;; Registers used:
  6159 ;;		wreg, status,2, status,0, prodl, prodh
  6160 ;; Tracked objects:
  6161 ;;		On entry : 0/0
  6162 ;;		On exit  : 0/0
  6163 ;;		Unchanged: 0/0
  6164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6168 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6169 ;;Total ram usage:        1 bytes
  6170 ;; Hardware stack levels used:    1
  6171 ;; This function calls:
  6172 ;;		Nothing
  6173 ;; This function is called by:
  6174 ;;		_main
  6175 ;; This function uses a non-reentrant model
  6176 ;;
  6177                           
  6178                           	psect	text27
  6179  002DE8                     __ptext27:
  6180                           	opt stack 0
  6181  002DE8                     _Select_ADC_Channel:
  6182                           	opt stack 30
  6183                           
  6184                           ;incstack = 0
  6185                           ;Select_ADC_Channel@channel stored from wreg
  6186  002DE8  6E01               	movwf	Select_ADC_Channel@channel,c
  6187                           
  6188                           ;Lab6pA.c: 94: ADCON0 = channel * 4 + 1;
  6189  002DEA  5001               	movf	Select_ADC_Channel@channel,w,c
  6190  002DEC  0D04               	mullw	4
  6191  002DEE  28F3               	incf	prodl,w,c
  6192  002DF0  6EC2               	movwf	4034,c	;volatile
  6193  002DF2  0012               	return		;funcret
  6194  002DF4                     __end_of_Select_ADC_Channel:
  6195                           	opt stack 0
  6196                           tblptru	equ	0xFF8
  6197                           tblptrh	equ	0xFF7
  6198                           tblptrl	equ	0xFF6
  6199                           tablat	equ	0xFF5
  6200                           prodh	equ	0xFF4
  6201                           prodl	equ	0xFF3
  6202                           intcon	equ	0xFF2
  6203                           postinc0	equ	0xFEE
  6204                           wreg	equ	0xFE8
  6205                           postdec1	equ	0xFE5
  6206                           fsr1l	equ	0xFE1
  6207                           postinc2	equ	0xFDE
  6208                           postdec2	equ	0xFDD
  6209                           fsr2h	equ	0xFDA
  6210                           fsr2l	equ	0xFD9
  6211                           status	equ	0xFD8
  6212                           
  6213 ;; *************** function _Init_TRIS *****************
  6214 ;; Defined at:
  6215 ;;		line 70 in file "Lab6pA.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;		None
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;		None
  6220 ;; Return value:  Size  Location     Type
  6221 ;;		None               void
  6222 ;; Registers used:
  6223 ;;		wreg, status,2
  6224 ;; Tracked objects:
  6225 ;;		On entry : 0/0
  6226 ;;		On exit  : 0/0
  6227 ;;		Unchanged: 0/0
  6228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6233 ;;Total ram usage:        0 bytes
  6234 ;; Hardware stack levels used:    1
  6235 ;; This function calls:
  6236 ;;		Nothing
  6237 ;; This function is called by:
  6238 ;;		_main
  6239 ;; This function uses a non-reentrant model
  6240 ;;
  6241                           
  6242                           	psect	text28
  6243  002DA2                     __ptext28:
  6244                           	opt stack 0
  6245  002DA2                     _Init_TRIS:
  6246                           	opt stack 30
  6247                           
  6248                           ;Lab6pA.c: 72: TRISA = 0x0F;
  6249                           
  6250                           ;incstack = 0
  6251  002DA2  0E0F               	movlw	15
  6252  002DA4  6E92               	movwf	3986,c	;volatile
  6253                           
  6254                           ;Lab6pA.c: 73: TRISB = 0x00;
  6255  002DA6  0E00               	movlw	0
  6256  002DA8  6E93               	movwf	3987,c	;volatile
  6257                           
  6258                           ;Lab6pA.c: 74: TRISC = 0x00;
  6259  002DAA  0E00               	movlw	0
  6260  002DAC  6E94               	movwf	3988,c	;volatile
  6261                           
  6262                           ;Lab6pA.c: 75: TRISD = 0x00;
  6263  002DAE  0E00               	movlw	0
  6264  002DB0  6E95               	movwf	3989,c	;volatile
  6265                           
  6266                           ;Lab6pA.c: 76: TRISE = 0x00;
  6267  002DB2  0E00               	movlw	0
  6268  002DB4  6E96               	movwf	3990,c	;volatile
  6269  002DB6  0012               	return		;funcret
  6270  002DB8                     __end_of_Init_TRIS:
  6271                           	opt stack 0
  6272                           tblptru	equ	0xFF8
  6273                           tblptrh	equ	0xFF7
  6274                           tblptrl	equ	0xFF6
  6275                           tablat	equ	0xFF5
  6276                           prodh	equ	0xFF4
  6277                           prodl	equ	0xFF3
  6278                           intcon	equ	0xFF2
  6279                           postinc0	equ	0xFEE
  6280                           wreg	equ	0xFE8
  6281                           postdec1	equ	0xFE5
  6282                           fsr1l	equ	0xFE1
  6283                           postinc2	equ	0xFDE
  6284                           postdec2	equ	0xFDD
  6285                           fsr2h	equ	0xFDA
  6286                           fsr2l	equ	0xFD9
  6287                           status	equ	0xFD8
  6288                           
  6289 ;; *************** function _Init_ADC *****************
  6290 ;; Defined at:
  6291 ;;		line 63 in file "Lab6pA.c"
  6292 ;; Parameters:    Size  Location     Type
  6293 ;;		None
  6294 ;; Auto vars:     Size  Location     Type
  6295 ;;		None
  6296 ;; Return value:  Size  Location     Type
  6297 ;;		None               void
  6298 ;; Registers used:
  6299 ;;		wreg, status,2
  6300 ;; Tracked objects:
  6301 ;;		On entry : 0/0
  6302 ;;		On exit  : 0/0
  6303 ;;		Unchanged: 0/0
  6304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;Total ram usage:        0 bytes
  6310 ;; Hardware stack levels used:    1
  6311 ;; This function calls:
  6312 ;;		Nothing
  6313 ;; This function is called by:
  6314 ;;		_main
  6315 ;; This function uses a non-reentrant model
  6316 ;;
  6317                           
  6318                           	psect	text29
  6319  002DDA                     __ptext29:
  6320                           	opt stack 0
  6321  002DDA                     _Init_ADC:
  6322                           	opt stack 30
  6323                           
  6324                           ;Lab6pA.c: 65: ADCON0 = 0b00000001;
  6325                           
  6326                           ;incstack = 0
  6327  002DDA  0E01               	movlw	1
  6328  002DDC  6EC2               	movwf	4034,c	;volatile
  6329                           
  6330                           ;Lab6pA.c: 66: ADCON1 = 0b00011011;
  6331  002DDE  0E1B               	movlw	27
  6332  002DE0  6EC1               	movwf	4033,c	;volatile
  6333                           
  6334                           ;Lab6pA.c: 67: ADCON2 = 0b11001001;
  6335  002DE2  0EC9               	movlw	201
  6336  002DE4  6EC0               	movwf	4032,c	;volatile
  6337  002DE6  0012               	return		;funcret
  6338  002DE8                     __end_of_Init_ADC:
  6339                           	opt stack 0
  6340                           tblptru	equ	0xFF8
  6341                           tblptrh	equ	0xFF7
  6342                           tblptrl	equ	0xFF6
  6343                           tablat	equ	0xFF5
  6344                           prodh	equ	0xFF4
  6345                           prodl	equ	0xFF3
  6346                           intcon	equ	0xFF2
  6347                           postinc0	equ	0xFEE
  6348                           wreg	equ	0xFE8
  6349                           postdec1	equ	0xFE5
  6350                           fsr1l	equ	0xFE1
  6351                           postinc2	equ	0xFDE
  6352                           postdec2	equ	0xFDD
  6353                           fsr2h	equ	0xFDA
  6354                           fsr2l	equ	0xFD9
  6355                           status	equ	0xFD8
  6356                           
  6357 ;; *************** function _BCD_Upper_Digit *****************
  6358 ;; Defined at:
  6359 ;;		line 124 in file "Lab6pA.c"
  6360 ;; Parameters:    Size  Location     Type
  6361 ;;  digit           1    wreg     unsigned char 
  6362 ;; Auto vars:     Size  Location     Type
  6363 ;;  digit           1    1[COMRAM] unsigned char 
  6364 ;;  Port_E          1    0[COMRAM] unsigned char 
  6365 ;; Return value:  Size  Location     Type
  6366 ;;		None               void
  6367 ;; Registers used:
  6368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6375 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6377 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6378 ;;Total ram usage:        2 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; This function calls:
  6381 ;;		Nothing
  6382 ;; This function is called by:
  6383 ;;		_main
  6384 ;; This function uses a non-reentrant model
  6385 ;;
  6386                           
  6387                           	psect	text30
  6388  002C1E                     __ptext30:
  6389                           	opt stack 0
  6390  002C1E                     _BCD_Upper_Digit:
  6391                           	opt stack 30
  6392                           
  6393                           ;incstack = 0
  6394                           ;BCD_Upper_Digit@digit stored from wreg
  6395  002C1E  6E02               	movwf	BCD_Upper_Digit@digit,c
  6396                           
  6397                           ;Lab6pA.c: 126: PORTC = array[digit];
  6398  002C20  5002               	movf	BCD_Upper_Digit@digit,w,c
  6399  002C22  0D01               	mullw	1
  6400  002C24  0E6A               	movlw	low _array
  6401  002C26  24F3               	addwf	prodl,w,c
  6402  002C28  6ED9               	movwf	fsr2l,c
  6403  002C2A  0E00               	movlw	high _array
  6404  002C2C  20F4               	addwfc	prodh,w,c
  6405  002C2E  6EDA               	movwf	fsr2h,c
  6406  002C30  50DF               	movf	indf2,w,c
  6407  002C32  6E82               	movwf	3970,c	;volatile
  6408                           
  6409                           ;Lab6pA.c: 127: char Port_E = array[digit] & 0x40;
  6410  002C34  5002               	movf	BCD_Upper_Digit@digit,w,c
  6411  002C36  0D01               	mullw	1
  6412  002C38  0E6A               	movlw	low _array
  6413  002C3A  24F3               	addwf	prodl,w,c
  6414  002C3C  6ED9               	movwf	fsr2l,c
  6415  002C3E  0E00               	movlw	high _array
  6416  002C40  20F4               	addwfc	prodh,w,c
  6417  002C42  6EDA               	movwf	fsr2h,c
  6418  002C44  50DF               	movf	indf2,w,c
  6419  002C46  0B40               	andlw	64
  6420  002C48  6E01               	movwf	BCD_Upper_Digit@Port_E,c
  6421                           
  6422                           ;Lab6pA.c: 128: if (Port_E == 0) PORTE = 0x00;
  6423  002C4A  5001               	movf	BCD_Upper_Digit@Port_E,w,c
  6424  002C4C  A4D8               	btfss	status,2,c
  6425  002C4E  D002               	goto	l1836
  6426  002C50  0E00               	movlw	0
  6427  002C52  D001               	goto	L8
  6428  002C54                     l1836:
  6429                           
  6430                           ;Lab6pA.c: 129: else PORTE = 0x01;
  6431  002C54  0E01               	movlw	1
  6432  002C56                     L8:
  6433  002C56  6E84               	movwf	3972,c	;volatile
  6434  002C58  D000               	goto	l118
  6435  002C5A                     l118:
  6436  002C5A  0012               	return		;funcret
  6437  002C5C                     __end_of_BCD_Upper_Digit:
  6438                           	opt stack 0
  6439                           tblptru	equ	0xFF8
  6440                           tblptrh	equ	0xFF7
  6441                           tblptrl	equ	0xFF6
  6442                           tablat	equ	0xFF5
  6443                           prodh	equ	0xFF4
  6444                           prodl	equ	0xFF3
  6445                           intcon	equ	0xFF2
  6446                           postinc0	equ	0xFEE
  6447                           wreg	equ	0xFE8
  6448                           postdec1	equ	0xFE5
  6449                           fsr1l	equ	0xFE1
  6450                           indf2	equ	0xFDF
  6451                           postinc2	equ	0xFDE
  6452                           postdec2	equ	0xFDD
  6453                           fsr2h	equ	0xFDA
  6454                           fsr2l	equ	0xFD9
  6455                           status	equ	0xFD8
  6456                           
  6457 ;; *************** function _BCD_Lower_Digit *****************
  6458 ;; Defined at:
  6459 ;;		line 132 in file "Lab6pA.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;  digit           1    wreg     unsigned char 
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;  digit           1    0[COMRAM] unsigned char 
  6464 ;; Return value:  Size  Location     Type
  6465 ;;		None               void
  6466 ;; Registers used:
  6467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6474 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6476 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6477 ;;Total ram usage:        1 bytes
  6478 ;; Hardware stack levels used:    1
  6479 ;; This function calls:
  6480 ;;		Nothing
  6481 ;; This function is called by:
  6482 ;;		_main
  6483 ;; This function uses a non-reentrant model
  6484 ;;
  6485                           
  6486                           	psect	text31
  6487  002D70                     __ptext31:
  6488                           	opt stack 0
  6489  002D70                     _BCD_Lower_Digit:
  6490                           	opt stack 30
  6491                           
  6492                           ;incstack = 0
  6493                           ;BCD_Lower_Digit@digit stored from wreg
  6494  002D70  6E01               	movwf	BCD_Lower_Digit@digit,c
  6495                           
  6496                           ;Lab6pA.c: 134: PORTD = array[digit];
  6497  002D72  5001               	movf	BCD_Lower_Digit@digit,w,c
  6498  002D74  0D01               	mullw	1
  6499  002D76  0E6A               	movlw	low _array
  6500  002D78  24F3               	addwf	prodl,w,c
  6501  002D7A  6ED9               	movwf	fsr2l,c
  6502  002D7C  0E00               	movlw	high _array
  6503  002D7E  20F4               	addwfc	prodh,w,c
  6504  002D80  6EDA               	movwf	fsr2h,c
  6505  002D82  50DF               	movf	indf2,w,c
  6506  002D84  6E83               	movwf	3971,c	;volatile
  6507                           
  6508                           ;Lab6pA.c: 135: PORTDbits.RD7 = 1;
  6509  002D86  8E83               	bsf	3971,7,c	;volatile
  6510  002D88  0012               	return		;funcret
  6511  002D8A                     __end_of_BCD_Lower_Digit:
  6512                           	opt stack 0
  6513                           tblptru	equ	0xFF8
  6514                           tblptrh	equ	0xFF7
  6515                           tblptrl	equ	0xFF6
  6516                           tablat	equ	0xFF5
  6517                           prodh	equ	0xFF4
  6518                           prodl	equ	0xFF3
  6519                           intcon	equ	0xFF2
  6520                           postinc0	equ	0xFEE
  6521                           wreg	equ	0xFE8
  6522                           postdec1	equ	0xFE5
  6523                           fsr1l	equ	0xFE1
  6524                           indf2	equ	0xFDF
  6525                           postinc2	equ	0xFDE
  6526                           postdec2	equ	0xFDD
  6527                           fsr2h	equ	0xFDA
  6528                           fsr2l	equ	0xFD9
  6529                           status	equ	0xFD8
  6530                           
  6531 ;; *************** function _BCD_DP *****************
  6532 ;; Defined at:
  6533 ;;		line 138 in file "Lab6pA.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;  dp              1    wreg     unsigned char 
  6536 ;; Auto vars:     Size  Location     Type
  6537 ;;  dp              1    1[COMRAM] unsigned char 
  6538 ;; Return value:  Size  Location     Type
  6539 ;;		None               void
  6540 ;; Registers used:
  6541 ;;		wreg, status,2, status,0
  6542 ;; Tracked objects:
  6543 ;;		On entry : 0/0
  6544 ;;		On exit  : 0/0
  6545 ;;		Unchanged: 0/0
  6546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6548 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6549 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6550 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6551 ;;Total ram usage:        2 bytes
  6552 ;; Hardware stack levels used:    1
  6553 ;; This function calls:
  6554 ;;		Nothing
  6555 ;; This function is called by:
  6556 ;;		_main
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           	psect	text32
  6561  002D8A                     __ptext32:
  6562                           	opt stack 0
  6563  002D8A                     _BCD_DP:
  6564                           	opt stack 30
  6565                           
  6566                           ;incstack = 0
  6567                           ;BCD_DP@dp stored from wreg
  6568  002D8A  6E02               	movwf	BCD_DP@dp,c
  6569                           
  6570                           ;Lab6pA.c: 140: PORTDbits.RD7 = ~dp;
  6571  002D8C  5002               	movf	BCD_DP@dp,w,c
  6572  002D8E  0AFF               	xorlw	255
  6573  002D90  6E01               	movwf	??_BCD_DP& (0+255),c
  6574  002D92  3201               	rrcf	??_BCD_DP,f,c
  6575  002D94  3201               	rrcf	??_BCD_DP,f,c
  6576  002D96  5083               	movf	3971,w,c	;volatile
  6577  002D98  1801               	xorwf	??_BCD_DP,w,c
  6578  002D9A  0B7F               	andlw	-129
  6579  002D9C  1801               	xorwf	??_BCD_DP,w,c
  6580  002D9E  6E83               	movwf	3971,c	;volatile
  6581  002DA0  0012               	return		;funcret
  6582  002DA2                     __end_of_BCD_DP:
  6583                           	opt stack 0
  6584                           tblptru	equ	0xFF8
  6585                           tblptrh	equ	0xFF7
  6586                           tblptrl	equ	0xFF6
  6587                           tablat	equ	0xFF5
  6588                           prodh	equ	0xFF4
  6589                           prodl	equ	0xFF3
  6590                           intcon	equ	0xFF2
  6591                           postinc0	equ	0xFEE
  6592                           wreg	equ	0xFE8
  6593                           postdec1	equ	0xFE5
  6594                           fsr1l	equ	0xFE1
  6595                           indf2	equ	0xFDF
  6596                           postinc2	equ	0xFDE
  6597                           postdec2	equ	0xFDD
  6598                           fsr2h	equ	0xFDA
  6599                           fsr2l	equ	0xFD9
  6600                           status	equ	0xFD8
  6601                           tblptru	equ	0xFF8
  6602                           tblptrh	equ	0xFF7
  6603                           tblptrl	equ	0xFF6
  6604                           tablat	equ	0xFF5
  6605                           prodh	equ	0xFF4
  6606                           prodl	equ	0xFF3
  6607                           intcon	equ	0xFF2
  6608                           postinc0	equ	0xFEE
  6609                           wreg	equ	0xFE8
  6610                           postdec1	equ	0xFE5
  6611                           fsr1l	equ	0xFE1
  6612                           indf2	equ	0xFDF
  6613                           postinc2	equ	0xFDE
  6614                           postdec2	equ	0xFDD
  6615                           fsr2h	equ	0xFDA
  6616                           fsr2l	equ	0xFD9
  6617                           status	equ	0xFD8
  6618                           
  6619                           	psect	rparam
  6620  0000                     tblptru	equ	0xFF8
  6621                           tblptrh	equ	0xFF7
  6622                           tblptrl	equ	0xFF6
  6623                           tablat	equ	0xFF5
  6624                           prodh	equ	0xFF4
  6625                           prodl	equ	0xFF3
  6626                           intcon	equ	0xFF2
  6627                           postinc0	equ	0xFEE
  6628                           wreg	equ	0xFE8
  6629                           postdec1	equ	0xFE5
  6630                           fsr1l	equ	0xFE1
  6631                           indf2	equ	0xFDF
  6632                           postinc2	equ	0xFDE
  6633                           postdec2	equ	0xFDD
  6634                           fsr2h	equ	0xFDA
  6635                           fsr2l	equ	0xFD9
  6636                           status	equ	0xFD8


Data Sizes:
    Strings     24
    Constant    118
    Data        10
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    105     115
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_1(CODE[24]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awmod
    ___ftmul->___wmul
    ___awmod->___awdiv
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _init_UART->_OpenUSART
    ___ftdiv->___awtoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   53838
                                             99 COMRAM     6     6      0
                             _BCD_DP
                    _BCD_Lower_Digit
                    _BCD_Upper_Digit
                           _Init_ADC
                          _Init_TRIS
                 _Select_ADC_Channel
                      _WAIT_HALF_SEC
                            ___awdiv
                            ___awmod
                           ___awtoft
                            ___ftdiv
                       _get_full_ADC
                          _init_UART
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   44884
                                             63 COMRAM    36    31      5
                            ___awdiv
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   10821
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   10623
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2463
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4329
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1576
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1964
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     543
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     418
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     444
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3604
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3307
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     520
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     284
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     284
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2619
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2264
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _WAIT_HALF_SEC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Select_ADC_Channel                                   1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_TRIS                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BCD_Upper_Digit                                      2     2      0      45
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _BCD_Lower_Digit                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _BCD_DP                                               2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BCD_DP
   _BCD_Lower_Digit
   _BCD_Upper_Digit
   _Init_ADC
   _Init_TRIS
   _Select_ADC_Channel
   _WAIT_HALF_SEC
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   _get_full_ADC
   _init_UART
     _OpenUSART
   _printf
     ___awdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftpack
       _fround (ARG)
         ___awdiv
         ___awmod
           ___awdiv (ARG)
         ___ftmul
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___awmod (ARG)
               ___awdiv (ARG)
         ___wmul
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awmod (ARG)
         ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
           ___awmod
             ___awdiv (ARG)
           ___ftmul
             ___awdiv (ARG)
             ___awmod (ARG)
               ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___awmod (ARG)
                 ___awdiv (ARG)
           ___wmul
             ___awdiv (ARG)
             ___awmod (ARG)
               ___awdiv (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
       _scale (ARG)
         ___awdiv
         ___awmod
           ___awdiv (ARG)
         ___ftmul
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___awmod (ARG)
               ___awdiv (ARG)
         ___wmul
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
       ___awmod (ARG)
         ___awdiv (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
       ___wmul
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
     _isdigit (ARG)
     _putch (ARG)
     _scale (ARG)
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___awmod (ARG)
             ___awdiv (ARG)
       ___wmul
         ___awdiv (ARG)
         ___awmod (ARG)
           ___awdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     69      73       1       90.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      73      34        0.0%
DATA                 0      0      73       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Oct 18 14:02:11 2022

                         l92 2DD0                 ___awdiv@sign 0006          ___wmul@multiplicand 0011  
               ___ftadd@exp1 0039                 ___ftadd@exp2 0038                 ___ftadd@sign 0037  
                        l101 2CEE                          l110 2D68                          l104 2D0E  
                        l118 2C5A                          l224 16EA                          l153 1DA6  
                        l146 1FEA                          l254 19C6                          l282 2B50  
                        l290 2CE8                          l283 2B52                          l508 2C96  
                        l284 2B5C                          l285 2B5E                          l278 2B36  
                        l615 285E                          l287 2B78                          l704 23BE  
                        l713 298A                          l626 2836                          l483 28F4  
                        l740 26B6                          l670 211C                          l814 2BD8  
                        l574 24D8                          l655 2030                          l583 24C8  
                        l719 25D0                          l656 21AE                          l736 2C1C  
                        l496 2A98                          l729 2D26                          l690 2764  
                        l659 205A                          l755 2D54                          l687 2798  
                        l679 2138                          l695 23CE                          l784 2A06  
                        l697 2336                          l794 2AF8                          l698 235E  
               ___awmod@sign 000E                          prod 000FF3                          wreg 000FE8  
               __CFG_LVP$OFF 000000                 ___ftdiv@cntr 0016                 ___ftdiv@sign 001B  
               __CFG_WDT$OFF 000000                         l2010 2074                         l2020 209C  
                       l2004 2068                         l2100 2594                         l2030 20D8  
                       l2040 2110                         l2032 20E0                         l2104 25AA  
                       l2202 2B2E                         l2026 20C0                         l2130 28A8  
                       l2122 2888                         l2028 20CC                         l2140 28CE  
                       l2132 28B0                         l2116 2876                         l2214 2B48  
                       l2206 2B3A                         l2046 2156                         l2038 2104  
                       l2310 2D4C                         l2056 2188                         l2320 22DE  
                       l2128 289E                         l2144 28DA                         l2160 2A2E  
                       l2072 2520                         l2170 2A54                         l2090 2566  
                       l2066 24F8                         l2420 249A                         l2404 2466  
                       l2148 28EA                         l2172 2A5C                         l2180 2A7E  
                       l2164 2A3C                         l2068 2512                         l2260 1FAA  
                       l2252 1EE6                         l2502 26A4                         l2422 24A0  
                       l2326 22FC                         l2094 257C                         l2086 2554  
                       l2512 29AE                         l2416 248A                         l2408 2476  
                       l2360 2390                         l2184 2A8E                         l2176 2A72  
                       l2168 2A4A                         l2096 2582                         l2280 1B9C  
                       l2194 2B1C                         l2442 2928                         l2434 2BF2  
                       l2514 29BC                         l2426 24B4                         l2362 2396  
                       l2274 1AF4                         l2602 11B8                         l2452 2986  
                       l2524 29F6                         l2516 29C4                         l2540 2AE8  
                       l2532 2AAC                         l2428 24C2                         l2356 2380  
                       l2348 236C                         l2292 1CD0                         l2284 1BAC  
                       l2620 121E                         l2612 11E6                         l2604 11D0  
                       l2198 2B26                         l2446 295A                         l2534 2ABA  
                       l2382 23F0                         l2366 23AA                         l2710 15A8  
                       l2702 155A                         l2630 1260                         l2614 1208  
                       l2536 2AC2                         l2376 23E0                         l2368 23B8  
                       l2800 18F4                         l2720 15D6                         l2608 11DE  
                       l2490 2660                         l2466 25F0                         l2546 2B80  
                       l2298 1D82                         l2802 18FE                         l2722 15EA  
                       l2706 158C                         l1836 2C54                         l2484 264A  
                       l2548 2B8E                         l2396 2434                         l2820 196C  
                       l2740 16B8                         l2732 1622                         l2716 15C8  
                       l2660 138C                         l2580 10E0                         l2572 10AE  
                       l2494 2674                         l2822 1974                         l2814 194C  
                       l2806 1922                         l2750 16F0                         l2726 15F8  
                       l2670 1404                         l2662 13BC                         l2654 1356  
                       l2646 12F2                         l2574 10C0                         l2830 19A8  
                       l1960 27E6                         l1952 27AA                         l2840 26F0  
                       l2496 2682                         l2488 265A                         l2816 1954  
                       l2808 192C                         l2760 175A                         l2744 16C6  
                       l2728 1606                         l2680 1474                         l2664 13CC  
                       l2584 10FE                         l2592 115E                         l2568 109C  
                       l2920 22B0                         l2498 268C                         l2826 198C  
                       l2746 16D4                         l2738 16AC                         l2690 151A  
                       l2682 14A2                         l2674 1428                         l2658 137C  
                       l2578 10CA                         l2906 21D2                         l1980 2850  
                       l1964 27FE                         l1956 27BA                         l2844 26FE  
                       l2780 1870                         l2772 184A                         l2756 170A  
                       l2676 1432                         l2684 14B0                         l2916 2264  
                       l1974 283E                         l1966 281E                         l1958 27C6  
                       l2838 26D6                         l2766 1830                         l2694 1526  
                       l2774 1856                         l2598 1180                         l2918 2280  
                       l1968 282A                         l2864 273E                         l2784 188C  
                       l2768 183C                         l2688 1516                         l2874 2772  
                       l2794 18D2                         l2698 1556                         l2788 18AE  
                       l2886 2C72                         l1998 203E                         STR_1 1077  
                       u3010 16E4                         u2331 22D0                         u3221 26C8  
                       u2351 22EE                         u3241 26E6                         u1741 1FFC  
                       u2541 25E2                         u1751 2010                         u2560 260E  
               printf@tmpval 0054                         u2565 2606                         u1951 24EA  
                       u1971 2508                         u2790 1298                         u2795 128E  
                       _TRMT 007D61                         _main 21B0                 ___ftpack@arg 0001  
               ___ftpack@exp 0004               ??_get_full_ADC 0003                         fsr2h 000FDA  
                       fsr1l 000FE1                         indf2 000FDF                         fsr2l 000FD9  
                       prodh 000FF4                         prodl 000FF3                         start 0000  
               ___ftmul@cntr 0022                 ___param_bank 000010                 ___ftmul@sign 0023  
               ___fttol@exp1 0039                 ___fttol@lval 0035                        ?_main 0001  
            __end_of___awdiv 28F6              __end_of___ftadd 21B0              __end_of___awmod 2A9A  
            __end_of___ftdiv 279A              __end_of___ftneg 2D34              __end_of___lldiv 2A18  
            __end_of___ftmul 25D2                        _T0CON 000FD5              ___awdiv@divisor 0003  
            __end_of___llmod 2B0A              __end_of___ftsub 2C1E              __end_of___fttol 26B8  
            ___awdiv@counter 0005                        _RCSTA 000FAB                        _TMR0H 000FD7  
                      _TMR0L 000FD6                        _SPBRG 000FAF                        _PORTB 000F81  
                      _PORTC 000F82                        _PORTD 000F83                        _PORTE 000F84  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                        _TXREG 000FAD  
                      _TXSTA 000FAC                 ___lltoft@exp 0011                ___awtoft@sign 000C  
            __end_of_dpowers 1029                        _array 006A                        _scale 19C8  
            __end_of_isdigit 2D56                ___ftpack@sign 0005                        _putch 2DCC  
               main@num_step 0066               __CFG_BOREN$OFF 000000                        tablat 000FF5  
                      status 000FD8     __size_of_BCD_Upper_Digit 003E              __initialization 2C98  
      __end_of_WAIT_HALF_SEC 2D70                 __end_of_main 22C0             __end_of_Init_ADC 2DE8  
          ??_BCD_Lower_Digit 0001                       ??_main 0064                ___fttol@sign1 0034  
              __activetblptr 000002         __size_of__tdiv_to_l_ 0110                       _ADCON0 000FC2  
                     _ADCON1 000FC1                       _ADCON2 000FC0                       _BCD_DP 2D8A  
           ___llmod@dividend 0001                       ?_scale 0024                       _ADRESH 000FC4  
                     _ADRESL 000FC3             ___awdiv@dividend 0001             __end_of___awtoft 2C98  
                     ?_putch 0001             __end_of___ftpack 2860             __end_of___lltoft 2BDA  
                     _OSCCON 000FD3           __size_of_Init_TRIS 0016                       _SPBRGH 000FB0  
           __end_of__powers_ 1077           __size_of_OpenUSART 0070                       ___ftge 28F6  
                     ___wmul 2CC2                    ??___awdiv 0005                    ??___ftadd 0034  
                  ??___awmod 000D                    ??___ftdiv 0013                    ??___ftneg 0004  
                  ??___lldiv 0009                    ??___ftmul 001B                    ??___llmod 0009  
                  ??___ftsub 0040                    ??___fttol 002F                       _fround 1DA8  
           ___awdiv@quotient 0007              ___awmod@divisor 000B              ___awmod@counter 000D  
                     _printf 1090        ___ftmul@f3_as_product 001F         __end_of_get_full_ADC 2D10  
               __pdataCOMRAM 006A                    ??_isdigit 0001                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                     putch@c 0001                   __accesstop 0080      __end_of__initialization 2CB8  
                 ___ftadd@f1 002E                   ___ftadd@f2 0031                   ___ftge@ff1 0001  
                 ___ftge@ff2 0004                ___rparam_used 000001                   ___ftdiv@f1 000D  
                 ___ftdiv@f2 0010                   ___ftdiv@f3 0017                   ___ftneg@f1 0001  
                 ___awtoft@c 0009                   ___ftmul@f1 0015                   ___ftmul@f2 0018  
                 ___ftsub@f1 003A                   ___ftsub@f2 003D                   ___fttol@f1 002B  
             __pcstackCOMRAM 0001                   ___lltoft@c 0009            ??_BCD_Upper_Digit 0001  
              __end_of_scale 1DA8                __end_of_putch 2DDA            __end_of_Init_TRIS 2DB8  
                 __div_to_l_ 23D0            __end_of_OpenUSART 2B7A              __div_to_l_@exp1 000C  
            __div_to_l_@cntr 000B                      ?_BCD_DP 0001                      ??_scale 0027  
            __div_to_l_@quot 0007                      ??_putch 0001                    ?_Init_ADC 0001  
         __size_of_init_UART 0014   __end_of_Select_ADC_Channel 2DF4                __div_to_l_@f1 0001  
              __div_to_l_@f2 0004                      ?___ftge 0001                      ?___wmul 000F  
                    ?_fround 0024                    ?___awtoft 0009                    ?___ftpack 0001  
                    ?_printf 0040    Select_ADC_Channel@channel 0001                    ?___lltoft 0009  
            __size_of_BCD_DP 0018                   ??_Init_ADC 0001              _BCD_Lower_Digit 2D70  
          __end_of__npowers_ 1050                      __Hparam 0000                   _scale$1262 0027  
                    __Lparam 0000              __size_of___ftge 0096                      ___awdiv 2860  
                    ___ftadd 1FEC                      ___awmod 2A18                      ___ftdiv 26B8  
                    ___ftneg 2D10                      ___lldiv 298C              __size_of___wmul 0028  
                    ___ftmul 24DA                      ___llmod 2A9A                      ___ftsub 2BDA  
                    ___fttol 25D2        __size_of_get_full_ADC 0026                 __psmallconst 1000  
                    __pcinit 2C98                   ??___awtoft 000C                   ??___ftpack 0006  
            __size_of_fround 0244                      __ramtop 1000                   ??___lltoft 000D  
                    __ptext0 21B0                      __ptext1 1090                      __ptext2 19C8  
                    __ptext3 2DCC                      __ptext4 2D34                      __ptext5 1DA8  
                    __ptext6 2CC2                      __ptext7 24DA                      __ptext8 2A18  
                    __ptext9 2860              __size_of_printf 0938            __end_of_init_UART 2DCC  
                  _T0CONbits 000FD5                  ?__div_to_l_ 0001                      _dpowers 1001  
                    _isdigit 2D34             ___awmod@dividend 0009         end_of_initialization 2CB8  
       BCD_Lower_Digit@digit 0001                __Lmediumconst 0000                 _get_full_ADC 2CEA  
            ___lldiv@divisor 0005              ___lldiv@counter 000D                    _RCSTAbits 000FAB  
                    printf@c 0063                      printf@f 0040                      postdec1 000FE5  
                    postdec2 000FDD                      postinc0 000FEE                      postinc2 000FDE  
             __tdiv_to_l_@f1 0001               __tdiv_to_l_@f2 0004                ??__tdiv_to_l_ 0007  
                  _PORTDbits 000F83                    _TRISCbits 000F94               main@voltage_mv 0068  
    __end_of_BCD_Lower_Digit 2D8A       __size_of_WAIT_HALF_SEC 001A               __end_of_BCD_DP 2DA2  
            _BCD_Upper_Digit 2C1E                  ___ftdiv@exp 001A                  printf@width 005C  
                  _TXSTAbits 000FAC           get_full_ADC@result 0005          __size_of__div_to_l_ 010A  
                ___ftmul@exp 001E               __end_of___ftge 298C               __end_of___wmul 2CEA  
              __pidataCOMRAM 2DF4               __end_of_fround 1FEC               __end_of_printf 19C8  
        start_initialization 2C98                    _Init_TRIS 2DA2          __end_of__tdiv_to_l_ 23D0  
                   ??_BCD_DP 0001                     BCD_DP@dp 0002                    _OpenUSART 2B0A  
            ___llmod@divisor 0005             __CFG_OSC$INTIO67 000000            __size_of_Init_ADC 000E  
            ___llmod@counter 0009                     ??___ftge 0007                     ??___wmul 0013  
              _WAIT_HALF_SEC 2D56           _Select_ADC_Channel 2DE8                     ??_fround 0027  
                   ??_printf 0045                   fround@prec 002D            __size_of___awtoft 003C  
          __size_of___ftpack 00C6          ?_Select_ADC_Channel 0001            __size_of___lltoft 0060  
                 ?_Init_TRIS 0001      __end_of_BCD_Upper_Digit 2C5C                 _isdigit$1031 0002  
           ?_BCD_Lower_Digit 0001                   ?_OpenUSART 0001         ??_Select_ADC_Channel 0001  
             ?_WAIT_HALF_SEC 0001                     ?___awdiv 0001                     ?___ftadd 002E  
                   ?___awmod 0009                     ?___ftdiv 000D                     ?___ftneg 0001  
                   ?___lldiv 0001                     ?___ftmul 0015                     ?___llmod 0001  
                   ?___ftsub 003A        BCD_Upper_Digit@Port_E 0001                    __npowers_ 1029  
                   ?___fttol 002B                  __tdiv_to_l_ 22C0                 ??__div_to_l_ 0007  
                __smallconst 1000                     ?_isdigit 0001                    _init_UART 2DB8  
             __size_of_scale 03E0               __size_of_putch 000E               ___wmul@product 0013  
                   _PIE1bits 000F9D                     _PIR1bits 000F9E           __end_of__div_to_l_ 24DA  
                 _ADCON0bits 000FC2            ___wmul@multiplier 000F                   printf@flag 005A  
                 printf@fval 005E                   printf@prec 0061                  ??_Init_TRIS 0001  
                 ?_init_UART 0001             ?_BCD_Upper_Digit 0001                    copy_data0 2CAC  
                   _Init_ADC 2DDA                  ??_OpenUSART 0003              OpenUSART@config 0003  
                   __Hrparam 0000              ??_WAIT_HALF_SEC 0001                     __Lrparam 0000  
           __size_of___awdiv 0096             __size_of___ftadd 01C4             __size_of___awmod 0082  
           __size_of___ftdiv 00E2             __size_of___ftneg 0024             __size_of___lldiv 008C  
           __size_of___ftmul 00F8             __size_of___llmod 0070             __size_of___ftsub 0044  
           __size_of___fttol 00E6                     ___awtoft 2C5C                     ___ftpack 279A  
                _fround$1260 002A                  _fround$1261 0027                     ___lltoft 2B7A  
           __size_of_isdigit 0022                     __ptext10 22C0                     __ptext11 23D0  
                   __ptext20 2DB8                     __ptext12 2B7A                     __ptext21 2B0A  
                   __ptext13 2A9A                     __ptext30 2C1E                     __ptext22 2CEA  
                   __ptext14 298C                     __ptext31 2D70                     __ptext23 26B8  
                   __ptext15 25D2                     __ptext32 2D8A                     __ptext24 2C5C  
                   __ptext16 2BDA                     __ptext25 279A                     __ptext17 1FEC  
                   __ptext26 2D56                     __ptext18 2D10                     __ptext27 2DE8  
                   __ptext19 28F6                     __ptext28 2DA2                     __ptext29 2DDA  
                   __powers_ 1050         BCD_Upper_Digit@digit 0002                __size_of_main 0110  
                  printf@exp 0058                    printf@val 0050                   _INTCONbits 000FF2  
             OpenUSART@spbrg 0001                  ??_init_UART 0004                     isdigit@c 0003  
                   scale@scl 002A             __tdiv_to_l_@exp1 000F             __tdiv_to_l_@cntr 000E  
           __tdiv_to_l_@quot 000A             ___lldiv@dividend 0001                     printf@ap 004E  
               ?__tdiv_to_l_ 0001                  _printf$1263 004B             ___lldiv@quotient 0009  
              ?_get_full_ADC 0001     __size_of_BCD_Lower_Digit 001A  __size_of_Select_ADC_Channel 000C  
