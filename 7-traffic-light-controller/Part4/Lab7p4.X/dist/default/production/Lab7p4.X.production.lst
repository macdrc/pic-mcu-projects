

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 20 17:44:16 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1
    49                           	psect	text39,global,reloc=2,class=CODE,delta=1
    50                           	psect	text40,global,reloc=2,class=CODE,delta=1
    51                           	psect	text41,global,reloc=2,class=CODE,delta=1
    52                           	psect	text42,global,reloc=2,class=CODE,delta=1
    53                           	psect	text43,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           	psect	idataCOMRAM
    58  0031DE                     __pidataCOMRAM:
    59                           	opt stack 0
    60                           
    61                           ;initializer for _array
    62  0031DE  40                 	db	64
    63  0031DF  79                 	db	121
    64  0031E0  24                 	db	36
    65  0031E1  30                 	db	48
    66  0031E2  19                 	db	25
    67  0031E3  12                 	db	18
    68  0031E4  02                 	db	2
    69  0031E5  78                 	db	120
    70  0031E6  00                 	db	0
    71  0031E7  10                 	db	16
    72  0031E8  FF                 	db	255
    73                           
    74                           	psect	smallconst
    75  001000                     __psmallconst:
    76                           	opt stack 0
    77  001000  00                 	db	0
    78  001001                     _dpowers:
    79                           	opt stack 0
    80  001001  0001               	dw	1
    81  001003  0000               	dw	0
    82  001005  000A               	dw	10
    83  001007  0000               	dw	0
    84  001009  0064               	dw	100
    85  00100B  0000               	dw	0
    86  00100D  03E8               	dw	1000
    87  00100F  0000               	dw	0
    88  001011  2710               	dw	10000
    89  001013  0000               	dw	0
    90  001015  86A0               	dw	34464
    91  001017  0001               	dw	1
    92  001019  4240               	dw	16960
    93  00101B  000F               	dw	15
    94  00101D  9680               	dw	38528
    95  00101F  0098               	dw	152
    96  001021  E100               	dw	57600
    97  001023  05F5               	dw	1525
    98  001025  CA00               	dw	51712
    99  001027  3B9A               	dw	15258
   100  001029                     __end_of_dpowers:
   101                           	opt stack 0
   102  001029                     __npowers_:
   103                           	opt stack 0
   104  001029  00                 	db	0
   105  00102A  80                 	db	128
   106  00102B  3F                 	db	63
   107  00102C  CD                 	db	205
   108  00102D  CC                 	db	204
   109  00102E  3D                 	db	61
   110  00102F  D7                 	db	215
   111  001030  23                 	db	35
   112  001031  3C                 	db	60
   113  001032  12                 	db	18
   114  001033  83                 	db	131
   115  001034  3A                 	db	58
   116  001035  B7                 	db	183
   117  001036  D1                 	db	209
   118  001037  38                 	db	56
   119  001038  C6                 	db	198
   120  001039  27                 	db	39
   121  00103A  37                 	db	55
   122  00103B  38                 	db	56
   123  00103C  86                 	db	134
   124  00103D  35                 	db	53
   125  00103E  C0                 	db	192
   126  00103F  D6                 	db	214
   127  001040  33                 	db	51
   128  001041  CC                 	db	204
   129  001042  2B                 	db	43
   130  001043  32                 	db	50
   131  001044  70                 	db	112
   132  001045  89                 	db	137
   133  001046  30                 	db	48
   134  001047  E7                 	db	231
   135  001048  DB                 	db	219
   136  001049  2E                 	db	46
   137  00104A  E5                 	db	229
   138  00104B  3C                 	db	60
   139  00104C  1E                 	db	30
   140  00104D  42                 	db	66
   141  00104E  A2                 	db	162
   142  00104F  0D                 	db	13
   143  001050                     __end_of__npowers_:
   144                           	opt stack 0
   145  001050                     __powers_:
   146                           	opt stack 0
   147  001050  00                 	db	0
   148  001051  80                 	db	128
   149  001052  3F                 	db	63
   150  001053  00                 	db	0
   151  001054  20                 	db	32
   152  001055  41                 	db	65
   153  001056  00                 	db	0
   154  001057  C8                 	db	200
   155  001058  42                 	db	66
   156  001059  00                 	db	0
   157  00105A  7A                 	db	122
   158  00105B  44                 	db	68
   159  00105C  40                 	db	64
   160  00105D  1C                 	db	28
   161  00105E  46                 	db	70
   162  00105F  50                 	db	80
   163  001060  C3                 	db	195
   164  001061  47                 	db	71
   165  001062  24                 	db	36
   166  001063  74                 	db	116
   167  001064  49                 	db	73
   168  001065  97                 	db	151
   169  001066  18                 	db	24
   170  001067  4B                 	db	75
   171  001068  BC                 	db	188
   172  001069  BE                 	db	190
   173  00106A  4C                 	db	76
   174  00106B  6B                 	db	107
   175  00106C  6E                 	db	110
   176  00106D  4E                 	db	78
   177  00106E  03                 	db	3
   178  00106F  15                 	db	21
   179  001070  50                 	db	80
   180  001071  79                 	db	121
   181  001072  AD                 	db	173
   182  001073  60                 	db	96
   183  001074  F3                 	db	243
   184  001075  49                 	db	73
   185  001076  71                 	db	113
   186  001077                     __end_of__powers_:
   187                           	opt stack 0
   188  0000                     _ADCON0	set	4034
   189  0000                     _ADCON0bits	set	4034
   190  0000                     _ADCON1	set	4033
   191  0000                     _ADCON2	set	4032
   192  0000                     _ADRESH	set	4036
   193  0000                     _ADRESL	set	4035
   194  0000                     _CCP2CON	set	4026
   195  0000                     _CCPR2L	set	4027
   196  0000                     _INTCONbits	set	4082
   197  0000                     _OSCCON	set	4051
   198  0000                     _PIE1bits	set	3997
   199  0000                     _PIR1bits	set	3998
   200  0000                     _PORTAbits	set	3968
   201  0000                     _PORTB	set	3969
   202  0000                     _PORTBbits	set	3969
   203  0000                     _PORTC	set	3970
   204  0000                     _PORTD	set	3971
   205  0000                     _PORTDbits	set	3971
   206  0000                     _PORTE	set	3972
   207  0000                     _PORTEbits	set	3972
   208  0000                     _PR2	set	4043
   209  0000                     _RCSTA	set	4011
   210  0000                     _RCSTAbits	set	4011
   211  0000                     _SPBRG	set	4015
   212  0000                     _SPBRGH	set	4016
   213  0000                     _T0CON	set	4053
   214  0000                     _T0CONbits	set	4053
   215  0000                     _T2CON	set	4042
   216  0000                     _TMR0H	set	4055
   217  0000                     _TMR0L	set	4054
   218  0000                     _TRISA	set	3986
   219  0000                     _TRISB	set	3987
   220  0000                     _TRISC	set	3988
   221  0000                     _TRISCbits	set	3988
   222  0000                     _TRISD	set	3989
   223  0000                     _TRISE	set	3990
   224  0000                     _TXREG	set	4013
   225  0000                     _TXSTA	set	4012
   226  0000                     _TXSTAbits	set	4012
   227  0000                     _TRMT	set	32097
   228  001077                     STR_1:
   229  001077  76                 	db	118	;'v'
   230  001078  6F                 	db	111	;'o'
   231  001079  6C                 	db	108	;'l'
   232  00107A  74                 	db	116	;'t'
   233  00107B  73                 	db	115	;'s'
   234  00107C  20                 	db	32
   235  00107D  61                 	db	97	;'a'
   236  00107E  72                 	db	114	;'r'
   237  00107F  65                 	db	101	;'e'
   238  001080  20                 	db	32
   239  001081  25                 	db	37
   240  001082  30                 	db	48	;'0'
   241  001083  2E                 	db	46
   242  001084  33                 	db	51	;'3'
   243  001085  66                 	db	102	;'f'
   244  001086  0D                 	db	13
   245  001087  0A                 	db	10
   246  001088  0A                 	db	10
   247  001089  00                 	db	0
   248  00108A                     STR_2:
   249  00108A  73                 	db	115	;'s'
   250  00108B  74                 	db	116	;'t'
   251  00108C  65                 	db	101	;'e'
   252  00108D  70                 	db	112	;'p'
   253  00108E  73                 	db	115	;'s'
   254  00108F  20                 	db	32
   255  001090  61                 	db	97	;'a'
   256  001091  72                 	db	114	;'r'
   257  001092  65                 	db	101	;'e'
   258  001093  20                 	db	32
   259  001094  25                 	db	37
   260  001095  64                 	db	100	;'d'
   261  001096  0D                 	db	13
   262  001097  0A                 	db	10
   263  001098  0A                 	db	10
   264  001099  00                 	db	0
   265                           
   266                           ; #config settings
   267  00109A  00                 	db	0	; dummy byte at the end
   268  0000                     
   269                           	psect	cinit
   270  00304A                     __pcinit:
   271                           	opt stack 0
   272  00304A                     start_initialization:
   273                           	opt stack 0
   274  00304A                     __initialization:
   275                           	opt stack 0
   276                           
   277                           ; Initialize objects allocated to COMRAM (11 bytes)
   278                           ; load TBLPTR registers with __pidataCOMRAM
   279  00304A  0EDE               	movlw	low __pidataCOMRAM
   280  00304C  6EF6               	movwf	tblptrl,c
   281  00304E  0E31               	movlw	high __pidataCOMRAM
   282  003050  6EF7               	movwf	tblptrh,c
   283  003052  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   284  003054  6EF8               	movwf	tblptru,c
   285  003056  EE00  F069         	lfsr	0,__pdataCOMRAM
   286  00305A  EE10 F00B          	lfsr	1,11
   287  00305E                     copy_data0:
   288  00305E  0009               	tblrd		*+
   289  003060  CFF5 FFEE          	movff	tablat,postinc0
   290  003064  50E5               	movf	postdec1,w,c
   291  003066  50E1               	movf	fsr1l,w,c
   292  003068  E1FA               	bnz	copy_data0
   293  00306A                     end_of_initialization:
   294                           	opt stack 0
   295  00306A                     __end_of__initialization:
   296                           	opt stack 0
   297  00306A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   298  00306C  6EF8               	movwf	tblptru,c
   299  00306E  0100               	movlb	0
   300  003070  EFDD  F013         	goto	_main	;jump to C main() function
   301                           tblptru	equ	0xFF8
   302                           tblptrh	equ	0xFF7
   303                           tblptrl	equ	0xFF6
   304                           tablat	equ	0xFF5
   305                           postinc0	equ	0xFEE
   306                           postdec1	equ	0xFE5
   307                           fsr1l	equ	0xFE1
   308                           
   309                           	psect	dataCOMRAM
   310  000069                     __pdataCOMRAM:
   311                           	opt stack 0
   312  000069                     _array:
   313                           	opt stack 0
   314  000069                     	ds	11
   315                           tblptru	equ	0xFF8
   316                           tblptrh	equ	0xFF7
   317                           tblptrl	equ	0xFF6
   318                           tablat	equ	0xFF5
   319                           postinc0	equ	0xFEE
   320                           postdec1	equ	0xFE5
   321                           fsr1l	equ	0xFE1
   322                           
   323                           	psect	cstackCOMRAM
   324  000001                     __pcstackCOMRAM:
   325                           	opt stack 0
   326  000001                     ??_isdigit:
   327  000001                     ?_get_full_ADC:
   328                           	opt stack 0
   329  000001                     ?___awmod:
   330                           	opt stack 0
   331  000001                     ?___ftpack:
   332                           	opt stack 0
   333  000001                     ?___ftneg:
   334                           	opt stack 0
   335  000001                     ?__tdiv_to_l_:
   336                           	opt stack 0
   337  000001                     ?__div_to_l_:
   338                           	opt stack 0
   339  000001                     ?___lldiv:
   340                           	opt stack 0
   341  000001                     Select_ADC_Channel@channel:
   342                           	opt stack 0
   343  000001                     WAIT_N_SEC@seconds:
   344                           	opt stack 0
   345  000001                     BCD_Upper_Digit@Port_E:
   346                           	opt stack 0
   347  000001                     BCD_Lower_Digit@digit:
   348                           	opt stack 0
   349  000001                     Set_NS@color:
   350                           	opt stack 0
   351  000001                     Set_NSLT@color:
   352                           	opt stack 0
   353  000001                     Set_EW@color:
   354                           	opt stack 0
   355  000001                     Set_EWLT@color:
   356                           	opt stack 0
   357  000001                     putch@c:
   358                           	opt stack 0
   359  000001                     OpenUSART@spbrg:
   360                           	opt stack 0
   361  000001                     ___awmod@dividend:
   362                           	opt stack 0
   363  000001                     __div_to_l_@f1:
   364                           	opt stack 0
   365  000001                     ___ftpack@arg:
   366                           	opt stack 0
   367  000001                     __tdiv_to_l_@f1:
   368                           	opt stack 0
   369  000001                     ___ftge@ff1:
   370                           	opt stack 0
   371  000001                     ___ftneg@f1:
   372                           	opt stack 0
   373  000001                     ___lldiv@dividend:
   374                           	opt stack 0
   375                           
   376                           ; 4 bytes @ 0x0
   377  000001                     	ds	1
   378  000002                     WAIT_N_SEC@i:
   379                           	opt stack 0
   380  000002                     BCD_Upper_Digit@digit:
   381                           	opt stack 0
   382  000002                     _isdigit$1464:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0x1
   386  000002                     	ds	1
   387  000003                     ??_get_full_ADC:
   388  000003                     PED_Control@Num_Sec:
   389                           	opt stack 0
   390  000003                     OpenUSART@config:
   391                           	opt stack 0
   392  000003                     isdigit@c:
   393                           	opt stack 0
   394  000003                     ___awmod@divisor:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x2
   398  000003                     	ds	1
   399  000004                     PED_Control@Direction:
   400                           	opt stack 0
   401  000004                     ___ftpack@exp:
   402                           	opt stack 0
   403  000004                     __div_to_l_@f2:
   404                           	opt stack 0
   405  000004                     __tdiv_to_l_@f2:
   406                           	opt stack 0
   407  000004                     ___ftge@ff2:
   408                           	opt stack 0
   409                           
   410                           ; 3 bytes @ 0x3
   411  000004                     	ds	1
   412  000005                     ___awmod@counter:
   413                           	opt stack 0
   414  000005                     ___ftpack@sign:
   415                           	opt stack 0
   416  000005                     get_full_ADC@result:
   417                           	opt stack 0
   418  000005                     PED_Control@i:
   419                           	opt stack 0
   420  000005                     ___lldiv@divisor:
   421                           	opt stack 0
   422                           
   423                           ; 4 bytes @ 0x4
   424  000005                     	ds	1
   425  000006                     ??___ftpack:
   426  000006                     ___awmod@sign:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0x5
   430  000006                     	ds	1
   431  000007                     ??__tdiv_to_l_:
   432  000007                     ??___ftge:
   433  000007                     ?___awdiv:
   434                           	opt stack 0
   435  000007                     PED_Control@i_816:
   436                           	opt stack 0
   437  000007                     ___awdiv@dividend:
   438                           	opt stack 0
   439  000007                     __div_to_l_@quot:
   440                           	opt stack 0
   441                           
   442                           ; 4 bytes @ 0x6
   443  000007                     	ds	2
   444  000009                     ?___lltoft:
   445                           	opt stack 0
   446  000009                     ___awdiv@divisor:
   447                           	opt stack 0
   448  000009                     ___lldiv@quotient:
   449                           	opt stack 0
   450  000009                     ___lltoft@c:
   451                           	opt stack 0
   452                           
   453                           ; 4 bytes @ 0x8
   454  000009                     	ds	1
   455  00000A                     __tdiv_to_l_@quot:
   456                           	opt stack 0
   457                           
   458                           ; 4 bytes @ 0x9
   459  00000A                     	ds	1
   460  00000B                     ___awdiv@counter:
   461                           	opt stack 0
   462  00000B                     __div_to_l_@cntr:
   463                           	opt stack 0
   464                           
   465                           ; 1 bytes @ 0xA
   466  00000B                     	ds	1
   467  00000C                     ___awdiv@sign:
   468                           	opt stack 0
   469  00000C                     __div_to_l_@exp1:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0xB
   473  00000C                     	ds	1
   474  00000D                     ??___lltoft:
   475  00000D                     ___lldiv@counter:
   476                           	opt stack 0
   477  00000D                     ___awdiv@quotient:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0xC
   481  00000D                     	ds	1
   482  00000E                     ?___llmod:
   483                           	opt stack 0
   484  00000E                     __tdiv_to_l_@cntr:
   485                           	opt stack 0
   486  00000E                     ___llmod@dividend:
   487                           	opt stack 0
   488                           
   489                           ; 4 bytes @ 0xD
   490  00000E                     	ds	1
   491  00000F                     ?___wmul:
   492                           	opt stack 0
   493  00000F                     __tdiv_to_l_@exp1:
   494                           	opt stack 0
   495  00000F                     ___wmul@multiplier:
   496                           	opt stack 0
   497                           
   498                           ; 2 bytes @ 0xE
   499  00000F                     	ds	2
   500  000011                     ___lltoft@exp:
   501                           	opt stack 0
   502  000011                     ___wmul@multiplicand:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x10
   506  000011                     	ds	1
   507  000012                     ___llmod@divisor:
   508                           	opt stack 0
   509                           
   510                           ; 4 bytes @ 0x11
   511  000012                     	ds	1
   512  000013                     ___wmul@product:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x12
   516  000013                     	ds	2
   517  000015                     ?___ftmul:
   518                           	opt stack 0
   519  000015                     ?___awtoft:
   520                           	opt stack 0
   521  000015                     ___awtoft@c:
   522                           	opt stack 0
   523  000015                     ___ftmul@f1:
   524                           	opt stack 0
   525                           
   526                           ; 3 bytes @ 0x14
   527  000015                     	ds	1
   528  000016                     ___llmod@counter:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x15
   532  000016                     	ds	2
   533  000018                     ___awtoft@sign:
   534                           	opt stack 0
   535  000018                     ___ftmul@f2:
   536                           	opt stack 0
   537                           
   538                           ; 3 bytes @ 0x17
   539  000018                     	ds	1
   540  000019                     ?___ftdiv:
   541                           	opt stack 0
   542  000019                     ___ftdiv@f1:
   543                           	opt stack 0
   544                           
   545                           ; 3 bytes @ 0x18
   546  000019                     	ds	2
   547  00001B                     ??___ftmul:
   548                           
   549                           ; 0 bytes @ 0x1A
   550  00001B                     	ds	1
   551  00001C                     ___ftdiv@f2:
   552                           	opt stack 0
   553                           
   554                           ; 3 bytes @ 0x1B
   555  00001C                     	ds	2
   556  00001E                     ___ftmul@exp:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x1D
   560  00001E                     	ds	1
   561  00001F                     ??___ftdiv:
   562  00001F                     ___ftmul@f3_as_product:
   563                           	opt stack 0
   564                           
   565                           ; 3 bytes @ 0x1E
   566  00001F                     	ds	3
   567  000022                     ___ftdiv@cntr:
   568                           	opt stack 0
   569  000022                     ___ftmul@cntr:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x21
   573  000022                     	ds	1
   574  000023                     ___ftmul@sign:
   575                           	opt stack 0
   576  000023                     ___ftdiv@f3:
   577                           	opt stack 0
   578                           
   579                           ; 3 bytes @ 0x22
   580  000023                     	ds	1
   581  000024                     ?_fround:
   582                           	opt stack 0
   583  000024                     ?_scale:
   584                           	opt stack 0
   585                           
   586                           ; 3 bytes @ 0x23
   587  000024                     	ds	2
   588  000026                     ___ftdiv@exp:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x25
   592  000026                     	ds	1
   593  000027                     ___ftdiv@sign:
   594                           	opt stack 0
   595  000027                     _fround$1702:
   596                           	opt stack 0
   597  000027                     _scale$1703:
   598                           	opt stack 0
   599                           
   600                           ; 3 bytes @ 0x26
   601  000027                     	ds	3
   602  00002A                     scale@scl:
   603                           	opt stack 0
   604  00002A                     _fround$1701:
   605                           	opt stack 0
   606                           
   607                           ; 3 bytes @ 0x29
   608  00002A                     	ds	1
   609  00002B                     ?___fttol:
   610                           	opt stack 0
   611  00002B                     ___fttol@f1:
   612                           	opt stack 0
   613                           
   614                           ; 3 bytes @ 0x2A
   615  00002B                     	ds	2
   616  00002D                     fround@prec:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x2C
   620  00002D                     	ds	1
   621  00002E                     ?___ftadd:
   622                           	opt stack 0
   623  00002E                     ___ftadd@f1:
   624                           	opt stack 0
   625                           
   626                           ; 3 bytes @ 0x2D
   627  00002E                     	ds	1
   628  00002F                     ??___fttol:
   629                           
   630                           ; 0 bytes @ 0x2E
   631  00002F                     	ds	2
   632  000031                     ___ftadd@f2:
   633                           	opt stack 0
   634                           
   635                           ; 3 bytes @ 0x30
   636  000031                     	ds	3
   637  000034                     ??___ftadd:
   638  000034                     ___fttol@sign1:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0x33
   642  000034                     	ds	1
   643  000035                     ___fttol@lval:
   644                           	opt stack 0
   645                           
   646                           ; 4 bytes @ 0x34
   647  000035                     	ds	2
   648  000037                     ___ftadd@sign:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x36
   652  000037                     	ds	1
   653  000038                     ___ftadd@exp2:
   654                           	opt stack 0
   655                           
   656                           ; 1 bytes @ 0x37
   657  000038                     	ds	1
   658  000039                     ___ftadd@exp1:
   659                           	opt stack 0
   660  000039                     ___fttol@exp1:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x38
   664  000039                     	ds	1
   665  00003A                     ?___ftsub:
   666                           	opt stack 0
   667  00003A                     ___ftsub@f1:
   668                           	opt stack 0
   669                           
   670                           ; 3 bytes @ 0x39
   671  00003A                     	ds	3
   672  00003D                     ___ftsub@f2:
   673                           	opt stack 0
   674                           
   675                           ; 3 bytes @ 0x3C
   676  00003D                     	ds	3
   677  000040                     ?_printf:
   678                           	opt stack 0
   679  000040                     printf@f:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x3F
   683  000040                     	ds	5
   684  000045                     ??_printf:
   685                           
   686                           ; 0 bytes @ 0x44
   687  000045                     	ds	6
   688  00004B                     _printf$1704:
   689                           	opt stack 0
   690                           
   691                           ; 3 bytes @ 0x4A
   692  00004B                     	ds	3
   693  00004E                     printf@ap:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x4D
   697  00004E                     	ds	2
   698  000050                     printf@tmpval:
   699                           	opt stack 0
   700                           
   701                           ; 4 bytes @ 0x4F
   702  000050                     	ds	4
   703  000054                     printf@val:
   704                           	opt stack 0
   705                           
   706                           ; 4 bytes @ 0x53
   707  000054                     	ds	4
   708  000058                     printf@exp:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x57
   712  000058                     	ds	2
   713  00005A                     printf@flag:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x59
   717  00005A                     	ds	2
   718  00005C                     printf@width:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x5B
   722  00005C                     	ds	2
   723  00005E                     printf@fval:
   724                           	opt stack 0
   725                           
   726                           ; 3 bytes @ 0x5D
   727  00005E                     	ds	3
   728  000061                     printf@prec:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x60
   732  000061                     	ds	2
   733  000063                     printf@c:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0x62
   737  000063                     	ds	1
   738  000064                     main@volts:
   739                           	opt stack 0
   740                           
   741                           ; 3 bytes @ 0x63
   742  000064                     	ds	3
   743  000067                     main@nStep:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x66
   747  000067                     	ds	2
   748                           tblptru	equ	0xFF8
   749                           tblptrh	equ	0xFF7
   750                           tblptrl	equ	0xFF6
   751                           tablat	equ	0xFF5
   752                           postinc0	equ	0xFEE
   753                           postdec1	equ	0xFE5
   754                           fsr1l	equ	0xFE1
   755                           
   756 ;;
   757 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   758 ;;
   759 ;; *************** function _main *****************
   760 ;; Defined at:
   761 ;;		line 74 in file "Lab7p4.c"
   762 ;; Parameters:    Size  Location     Type
   763 ;;		None
   764 ;; Auto vars:     Size  Location     Type
   765 ;;  volts           3   99[COMRAM] float 
   766 ;;  nStep           2  102[COMRAM] int 
   767 ;; Return value:  Size  Location     Type
   768 ;;		None               void
   769 ;; Registers used:
   770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   771 ;; Tracked objects:
   772 ;;		On entry : 0/0
   773 ;;		On exit  : 0/0
   774 ;;		Unchanged: 0/0
   775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   777 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   779 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   780 ;;Total ram usage:        5 bytes
   781 ;; Hardware stack levels required when called:    4
   782 ;; This function calls:
   783 ;;		_Day_Mode
   784 ;;		_Init_ADC
   785 ;;		_Init_TRIS
   786 ;;		_Night_Mode
   787 ;;		_Select_ADC_Channel
   788 ;;		___awtoft
   789 ;;		___ftdiv
   790 ;;		___ftge
   791 ;;		___wmul
   792 ;;		_get_full_ADC
   793 ;;		_init_UART
   794 ;;		_printf
   795 ;; This function is called by:
   796 ;;		Startup code after reset
   797 ;; This function uses a non-reentrant model
   798 ;;
   799                           
   800                           	psect	text0
   801  0027BA                     __ptext0:
   802                           	opt stack 0
   803  0027BA                     _main:
   804                           	opt stack 27
   805                           
   806                           ;Lab7p4.c: 76: OSCCON = 0x60;
   807                           
   808                           ;incstack = 0
   809  0027BA  0E60               	movlw	96
   810  0027BC  6ED3               	movwf	4051,c	;volatile
   811                           
   812                           ;Lab7p4.c: 77: PORTB = 0x00;
   813  0027BE  0E00               	movlw	0
   814  0027C0  6E81               	movwf	3969,c	;volatile
   815                           
   816                           ;Lab7p4.c: 78: PORTC = 0xFF;
   817  0027C2  6882               	setf	3970,c	;volatile
   818                           
   819                           ;Lab7p4.c: 79: PORTD = 0xFF;
   820  0027C4  6883               	setf	3971,c	;volatile
   821                           
   822                           ;Lab7p4.c: 80: PORTE = 0xFF;
   823  0027C6  6884               	setf	3972,c	;volatile
   824                           
   825                           ;Lab7p4.c: 82: Init_ADC();
   826  0027C8  ECDB  F018         	call	_Init_ADC	;wreg free
   827                           
   828                           ;Lab7p4.c: 83: Init_TRIS();
   829  0027CC  ECAB  F018         	call	_Init_TRIS	;wreg free
   830                           
   831                           ;Lab7p4.c: 84: init_UART ();
   832  0027D0  ECC1  F018         	call	_init_UART	;wreg free
   833                           
   834                           ;Lab7p4.c: 85: Select_ADC_Channel(0);
   835  0027D4  0E00               	movlw	0
   836  0027D6  ECE9  F018         	call	_Select_ADC_Channel
   837  0027DA  D000               	goto	l3292
   838  0027DC                     l3292:
   839                           
   840                           ;Lab7p4.c: 88: {
   841                           ;Lab7p4.c: 89: int nStep = get_full_ADC ();
   842  0027DC  EC4E  F018         	call	_get_full_ADC	;wreg free
   843  0027E0  C001  F067         	movff	?_get_full_ADC,main@nStep
   844  0027E4  C002  F068         	movff	?_get_full_ADC+1,main@nStep+1
   845                           
   846                           ;Lab7p4.c: 90: float volts = nStep*5/1024.0;
   847  0027E8  C067  F00F         	movff	main@nStep,___wmul@multiplier
   848  0027EC  C068  F010         	movff	main@nStep+1,___wmul@multiplier+1
   849  0027F0  0E00               	movlw	0
   850  0027F2  6E12               	movwf	___wmul@multiplicand+1,c
   851  0027F4  0E05               	movlw	5
   852  0027F6  6E11               	movwf	___wmul@multiplicand,c
   853  0027F8  EC3A  F018         	call	___wmul	;wreg free
   854  0027FC  C00F  F015         	movff	?___wmul,___awtoft@c
   855  002800  C010  F016         	movff	?___wmul+1,___awtoft@c+1
   856  002804  EC7D  F017         	call	___awtoft	;wreg free
   857  002808  C015  F019         	movff	?___awtoft,___ftdiv@f1
   858  00280C  C016  F01A         	movff	?___awtoft+1,___ftdiv@f1+1
   859  002810  C017  F01B         	movff	?___awtoft+2,___ftdiv@f1+2
   860  002814  0E00               	movlw	0
   861  002816  6E1C               	movwf	___ftdiv@f2,c
   862  002818  0E80               	movlw	128
   863  00281A  6E1D               	movwf	___ftdiv@f2+1,c
   864  00281C  0E44               	movlw	68
   865  00281E  6E1E               	movwf	___ftdiv@f2+2,c
   866  002820  EC6C  F013         	call	___ftdiv	;wreg free
   867  002824  C019  F064         	movff	?___ftdiv,main@volts
   868  002828  C01A  F065         	movff	?___ftdiv+1,main@volts+1
   869  00282C  C01B  F066         	movff	?___ftdiv+2,main@volts+2
   870                           
   871                           ;Lab7p4.c: 92: printf ("volts are %0.3f\r\n\n", volts);
   872  002830  0E77               	movlw	low STR_1
   873  002832  6E40               	movwf	printf@f,c
   874  002834  0E10               	movlw	high STR_1
   875  002836  6E41               	movwf	printf@f+1,c
   876  002838  C064  F042         	movff	main@volts,?_printf+2
   877  00283C  C065  F043         	movff	main@volts+1,?_printf+3
   878  002840  C066  F044         	movff	main@volts+2,?_printf+4
   879  002844  EC4E  F008         	call	_printf	;wreg free
   880                           
   881                           ;Lab7p4.c: 93: printf ("steps are %d\r\n\n", nStep);
   882  002848  0E8A               	movlw	low STR_2
   883  00284A  6E40               	movwf	printf@f,c
   884  00284C  0E10               	movlw	high STR_2
   885  00284E  6E41               	movwf	printf@f+1,c
   886  002850  C067  F042         	movff	main@nStep,?_printf+2
   887  002854  C068  F043         	movff	main@nStep+1,?_printf+3
   888  002858  EC4E  F008         	call	_printf	;wreg free
   889                           
   890                           ;Lab7p4.c: 95: if (volts < 2.570)
   891  00285C  C064  F001         	movff	main@volts,___ftge@ff1
   892  002860  C065  F002         	movff	main@volts+1,___ftge@ff1+1
   893  002864  C066  F003         	movff	main@volts+2,___ftge@ff1+2
   894  002868  0E7B               	movlw	123
   895  00286A  6E04               	movwf	___ftge@ff2,c
   896  00286C  0E24               	movlw	36
   897  00286E  6E05               	movwf	___ftge@ff2+1,c
   898  002870  0E40               	movlw	64
   899  002872  6E06               	movwf	___ftge@ff2+2,c
   900  002874  EC9E  F015         	call	___ftge	;wreg free
   901  002878  B0D8               	btfsc	status,0,c
   902  00287A  D004               	goto	l104
   903                           
   904                           ;Lab7p4.c: 96: {
   905                           ;Lab7p4.c: 97: PORTBbits.RB7 = 0;
   906  00287C  9E81               	bcf	3969,7,c	;volatile
   907                           
   908                           ;Lab7p4.c: 98: Day_Mode();
   909  00287E  ECAC  F014         	call	_Day_Mode	;wreg free
   910                           
   911                           ;Lab7p4.c: 99: }
   912  002882  D7AC               	goto	l3292
   913  002884                     l104:
   914                           
   915                           ;Lab7p4.c: 100: else
   916                           ;Lab7p4.c: 101: {
   917                           ;Lab7p4.c: 102: PORTBbits.RB7 = 1;
   918  002884  8E81               	bsf	3969,7,c	;volatile
   919                           
   920                           ;Lab7p4.c: 103: PORTD = 0xFF;
   921  002886  6883               	setf	3971,c	;volatile
   922                           
   923                           ;Lab7p4.c: 104: Night_Mode();
   924  002888  ECE9  F015         	call	_Night_Mode	;wreg free
   925  00288C  D7A7               	goto	l3292
   926  00288E  EF00  F000         	goto	start
   927  002892                     __end_of_main:
   928                           	opt stack 0
   929                           tblptru	equ	0xFF8
   930                           tblptrh	equ	0xFF7
   931                           tblptrl	equ	0xFF6
   932                           tablat	equ	0xFF5
   933                           postinc0	equ	0xFEE
   934                           postdec1	equ	0xFE5
   935                           fsr1l	equ	0xFE1
   936                           status	equ	0xFD8
   937                           
   938 ;; *************** function _printf *****************
   939 ;; Defined at:
   940 ;;		line 464 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
   941 ;; Parameters:    Size  Location     Type
   942 ;;  f               2   63[COMRAM] PTR const unsigned char 
   943 ;;		 -> STR_2(16), STR_1(19), 
   944 ;; Auto vars:     Size  Location     Type
   945 ;;  val             4   83[COMRAM] unsigned long 
   946 ;;  tmpval          4   79[COMRAM] struct .
   947 ;;  fval            3   93[COMRAM] struct .
   948 ;;  cp              3    0        PTR const unsigned char 
   949 ;;  prec            2   96[COMRAM] int 
   950 ;;  width           2   91[COMRAM] int 
   951 ;;  flag            2   89[COMRAM] unsigned short 
   952 ;;  exp             2   87[COMRAM] int 
   953 ;;  ap              2   77[COMRAM] PTR void [1]
   954 ;;		 -> ?_printf(2), 
   955 ;;  len             2    0        unsigned int 
   956 ;;  c               1   98[COMRAM] char 
   957 ;;  d               1    0        unsigned char 
   958 ;; Return value:  Size  Location     Type
   959 ;;                  2   63[COMRAM] int 
   960 ;; Registers used:
   961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   962 ;; Tracked objects:
   963 ;;		On entry : 0/0
   964 ;;		On exit  : 0/0
   965 ;;		Unchanged: 0/0
   966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   967 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   968 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   969 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   970 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   971 ;;Total ram usage:       36 bytes
   972 ;; Hardware stack levels used:    1
   973 ;; Hardware stack levels required when called:    3
   974 ;; This function calls:
   975 ;;		___awdiv
   976 ;;		___ftadd
   977 ;;		___ftge
   978 ;;		___ftmul
   979 ;;		___ftneg
   980 ;;		___ftsub
   981 ;;		___fttol
   982 ;;		___lldiv
   983 ;;		___llmod
   984 ;;		___lltoft
   985 ;;		___wmul
   986 ;;		__div_to_l_
   987 ;;		__tdiv_to_l_
   988 ;;		_fround
   989 ;;		_isdigit
   990 ;;		_putch
   991 ;;		_scale
   992 ;; This function is called by:
   993 ;;		_main
   994 ;; This function uses a non-reentrant model
   995 ;;
   996                           
   997                           	psect	text1
   998  00109C                     __ptext1:
   999                           	opt stack 0
  1000  00109C                     _printf:
  1001                           	opt stack 27
  1002                           
  1003                           ;doprnt.c: 466: va_list ap;
  1004                           ;doprnt.c: 499: signed char c;
  1005                           ;doprnt.c: 501: int width;
  1006                           ;doprnt.c: 504: int prec;
  1007                           ;doprnt.c: 508: unsigned short flag;
  1008                           ;doprnt.c: 515: char d;
  1009                           ;doprnt.c: 516: double fval;
  1010                           ;doprnt.c: 517: int exp;
  1011                           ;doprnt.c: 523: union {
  1012                           ;doprnt.c: 524: unsigned long vd;
  1013                           ;doprnt.c: 525: double integ;
  1014                           ;doprnt.c: 526: } tmpval;
  1015                           ;doprnt.c: 528: unsigned long val;
  1016                           ;doprnt.c: 529: unsigned len;
  1017                           ;doprnt.c: 530: const char * cp;
  1018                           ;doprnt.c: 533: *ap = __va_start();
  1019                           
  1020                           ;incstack = 0
  1021  00109C  0E42               	movlw	low (?_printf+2)
  1022  00109E  6E4E               	movwf	printf@ap,c
  1023  0010A0  0E00               	movlw	high (?_printf+2)
  1024  0010A2  6E4F               	movwf	printf@ap+1,c
  1025                           
  1026                           ;doprnt.c: 536: while(c = *f++) {
  1027  0010A4  EF6C  F00D         	goto	l3180
  1028  0010A8                     l2888:
  1029                           
  1030                           ;doprnt.c: 538: if(c != '%')
  1031  0010A8  0E25               	movlw	37
  1032  0010AA  1863               	xorwf	printf@c,w,c
  1033  0010AC  B4D8               	btfsc	status,2,c
  1034  0010AE  D005               	goto	l2892
  1035                           
  1036                           ;doprnt.c: 540: {
  1037                           ;doprnt.c: 541: (putch(c) );
  1038  0010B0  5063               	movf	printf@c,w,c
  1039  0010B2  ECD4  F018         	call	_putch
  1040                           
  1041                           ;doprnt.c: 542: continue;
  1042  0010B6  EF6C  F00D         	goto	l3180
  1043  0010BA                     l2892:
  1044                           
  1045                           ;doprnt.c: 543: }
  1046                           ;doprnt.c: 546: width = 0;
  1047  0010BA  0E00               	movlw	0
  1048  0010BC  6E5D               	movwf	printf@width+1,c
  1049  0010BE  0E00               	movlw	0
  1050  0010C0  6E5C               	movwf	printf@width,c
  1051                           
  1052                           ;doprnt.c: 548: flag = 0;
  1053  0010C2  0E00               	movlw	0
  1054  0010C4  6E5B               	movwf	printf@flag+1,c
  1055  0010C6  0E00               	movlw	0
  1056  0010C8  6E5A               	movwf	printf@flag,c
  1057                           
  1058                           ;doprnt.c: 551: switch(*f) {
  1059                           
  1060                           ;doprnt.c: 550: for(;;) {
  1061  0010CA  D005               	goto	l2898
  1062  0010CC                     l2894:
  1063                           
  1064                           ;doprnt.c: 580: flag |= 0x04;
  1065  0010CC  845A               	bsf	printf@flag,2,c
  1066                           
  1067                           ;doprnt.c: 581: f++;
  1068  0010CE  4A40               	infsnz	printf@f,f,c
  1069  0010D0  2A41               	incf	printf@f+1,f,c
  1070                           
  1071                           ;doprnt.c: 582: continue;
  1072  0010D2  D001               	goto	l2898
  1073                           
  1074                           ;doprnt.c: 584: }
  1075  0010D4  D00B               	goto	l2900
  1076  0010D6                     l2898:
  1077  0010D6  C040  FFF6         	movff	printf@f,tblptrl
  1078  0010DA  C041  FFF7         	movff	printf@f+1,tblptrh
  1079  0010DE                     	if	0	;tblptru may be non-zero
  1080  0010DE                     	endif
  1081  0010DE                     	if	0	;tblptru may be non-zero
  1082  0010DE                     	endif
  1083  0010DE  0008               	tblrd		*
  1084  0010E0  50F5               	movf	tablat,w,c
  1085                           
  1086                           ; Switch size 1, requested type "space"
  1087                           ; Number of cases is 1, Range of values is 48 to 48
  1088                           ; switch strategies available:
  1089                           ; Name         Instructions Cycles
  1090                           ; simple_byte            4     3 (average)
  1091                           ;	Chosen strategy is simple_byte
  1092  0010E2  0A30               	xorlw	48	; case 48
  1093  0010E4  B4D8               	btfsc	status,2,c
  1094  0010E6  D7F2               	goto	l2894
  1095                           
  1096                           ;doprnt.c: 585: break;
  1097  0010E8  D001               	goto	l2900
  1098                           
  1099                           ;doprnt.c: 586: }
  1100  0010EA  D7F5               	goto	l2898
  1101  0010EC                     l2900:
  1102                           
  1103                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1104  0010EC  C040  FFF6         	movff	printf@f,tblptrl
  1105  0010F0  C041  FFF7         	movff	printf@f+1,tblptrh
  1106  0010F4                     	if	0	;tblptru may be non-zero
  1107  0010F4                     	endif
  1108  0010F4                     	if	0	;tblptru may be non-zero
  1109  0010F4                     	endif
  1110  0010F4  0008               	tblrd		*
  1111  0010F6  50F5               	movf	tablat,w,c
  1112  0010F8  EC73  F018         	call	_isdigit
  1113  0010FC  A0D8               	btfss	status,0,c
  1114  0010FE  D035               	goto	l2912
  1115                           
  1116                           ;doprnt.c: 598: width = 0;
  1117  001100  0E00               	movlw	0
  1118  001102  6E5D               	movwf	printf@width+1,c
  1119  001104  0E00               	movlw	0
  1120  001106  6E5C               	movwf	printf@width,c
  1121  001108  D000               	goto	l2904
  1122  00110A                     l2904:
  1123                           
  1124                           ;doprnt.c: 600: width *= 10;
  1125  00110A  C05C  F00F         	movff	printf@width,___wmul@multiplier
  1126  00110E  C05D  F010         	movff	printf@width+1,___wmul@multiplier+1
  1127  001112  0E00               	movlw	0
  1128  001114  6E12               	movwf	___wmul@multiplicand+1,c
  1129  001116  0E0A               	movlw	10
  1130  001118  6E11               	movwf	___wmul@multiplicand,c
  1131  00111A  EC3A  F018         	call	___wmul	;wreg free
  1132  00111E  C00F  F05C         	movff	?___wmul,printf@width
  1133  001122  C010  F05D         	movff	?___wmul+1,printf@width+1
  1134                           
  1135                           ;doprnt.c: 601: width += *f++ - '0';
  1136  001126  0ED0               	movlw	208
  1137  001128  6E45               	movwf	??_printf& (0+255),c
  1138  00112A  0EFF               	movlw	255
  1139  00112C  6E46               	movwf	(??_printf+1)& (0+255),c
  1140  00112E  C040  FFF6         	movff	printf@f,tblptrl
  1141  001132  C041  FFF7         	movff	printf@f+1,tblptrh
  1142  001136                     	if	0	;tblptru may be non-zero
  1143  001136                     	endif
  1144  001136                     	if	0	;tblptru may be non-zero
  1145  001136                     	endif
  1146  001136  0008               	tblrd		*
  1147  001138  50F5               	movf	tablat,w,c
  1148  00113A  6E47               	movwf	(??_printf+2)& (0+255),c
  1149  00113C  6A48               	clrf	(??_printf+3)& (0+255),c
  1150  00113E  5045               	movf	??_printf,w,c
  1151  001140  2647               	addwf	??_printf+2,f,c
  1152  001142  5046               	movf	??_printf+1,w,c
  1153  001144  2248               	addwfc	??_printf+3,f,c
  1154  001146  5047               	movf	??_printf+2,w,c
  1155  001148  265C               	addwf	printf@width,f,c
  1156  00114A  5048               	movf	??_printf+3,w,c
  1157  00114C  225D               	addwfc	printf@width+1,f,c
  1158  00114E  4A40               	infsnz	printf@f,f,c
  1159  001150  2A41               	incf	printf@f+1,f,c
  1160                           
  1161                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1162  001152  C040  FFF6         	movff	printf@f,tblptrl
  1163  001156  C041  FFF7         	movff	printf@f+1,tblptrh
  1164  00115A                     	if	0	;tblptru may be non-zero
  1165  00115A                     	endif
  1166  00115A                     	if	0	;tblptru may be non-zero
  1167  00115A                     	endif
  1168  00115A  0008               	tblrd		*
  1169  00115C  50F5               	movf	tablat,w,c
  1170  00115E  EC73  F018         	call	_isdigit
  1171  001162  A0D8               	btfss	status,0,c
  1172  001164  D002               	goto	l2912
  1173  001166  D7D1               	goto	l2904
  1174  001168  D000               	goto	l2912
  1175  00116A                     l2912:
  1176                           
  1177                           ;doprnt.c: 608: }
  1178                           ;doprnt.c: 611: if(*f == '.') {
  1179  00116A  C040  FFF6         	movff	printf@f,tblptrl
  1180  00116E  C041  FFF7         	movff	printf@f+1,tblptrh
  1181  001172                     	if	0	;tblptru may be non-zero
  1182  001172                     	endif
  1183  001172                     	if	0	;tblptru may be non-zero
  1184  001172                     	endif
  1185  001172  0008               	tblrd		*
  1186  001174  50F5               	movf	tablat,w,c
  1187  001176  0A2E               	xorlw	46
  1188  001178  A4D8               	btfss	status,2,c
  1189  00117A  D030               	goto	l2924
  1190                           
  1191                           ;doprnt.c: 612: flag |= 0x4000;
  1192  00117C  8C5B               	bsf	printf@flag+1,6,c
  1193                           
  1194                           ;doprnt.c: 613: f++;
  1195  00117E  4A40               	infsnz	printf@f,f,c
  1196  001180  2A41               	incf	printf@f+1,f,c
  1197                           
  1198                           ;doprnt.c: 620: {
  1199                           ;doprnt.c: 621: prec = 0;
  1200  001182  0E00               	movlw	0
  1201  001184  6E62               	movwf	printf@prec+1,c
  1202  001186  0E00               	movlw	0
  1203  001188  6E61               	movwf	printf@prec,c
  1204                           
  1205                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1206  00118A  D01C               	goto	l2922
  1207  00118C                     l2918:
  1208                           
  1209                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1210  00118C  C061  F00F         	movff	printf@prec,___wmul@multiplier
  1211  001190  C062  F010         	movff	printf@prec+1,___wmul@multiplier+1
  1212  001194  0E00               	movlw	0
  1213  001196  6E12               	movwf	___wmul@multiplicand+1,c
  1214  001198  0E0A               	movlw	10
  1215  00119A  6E11               	movwf	___wmul@multiplicand,c
  1216  00119C  EC3A  F018         	call	___wmul	;wreg free
  1217  0011A0  C040  FFF6         	movff	printf@f,tblptrl
  1218  0011A4  C041  FFF7         	movff	printf@f+1,tblptrh
  1219  0011A8                     	if	0	;tblptru may be non-zero
  1220  0011A8                     	endif
  1221  0011A8                     	if	0	;tblptru may be non-zero
  1222  0011A8                     	endif
  1223  0011A8  0008               	tblrd		*
  1224  0011AA  50F5               	movf	tablat,w,c
  1225  0011AC  260F               	addwf	?___wmul,f,c
  1226  0011AE  0E00               	movlw	0
  1227  0011B0  2210               	addwfc	?___wmul+1,f,c
  1228  0011B2  0ED0               	movlw	208
  1229  0011B4  240F               	addwf	?___wmul,w,c
  1230  0011B6  6E61               	movwf	printf@prec,c
  1231  0011B8  0EFF               	movlw	255
  1232  0011BA  2010               	addwfc	?___wmul+1,w,c
  1233  0011BC  6E62               	movwf	printf@prec+1,c
  1234  0011BE  4A40               	infsnz	printf@f,f,c
  1235  0011C0  2A41               	incf	printf@f+1,f,c
  1236  0011C2  D000               	goto	l2922
  1237  0011C4                     l2922:
  1238  0011C4  C040  FFF6         	movff	printf@f,tblptrl
  1239  0011C8  C041  FFF7         	movff	printf@f+1,tblptrh
  1240  0011CC                     	if	0	;tblptru may be non-zero
  1241  0011CC                     	endif
  1242  0011CC                     	if	0	;tblptru may be non-zero
  1243  0011CC                     	endif
  1244  0011CC  0008               	tblrd		*
  1245  0011CE  50F5               	movf	tablat,w,c
  1246  0011D0  EC73  F018         	call	_isdigit
  1247  0011D4  A0D8               	btfss	status,0,c
  1248  0011D6  D00F               	goto	l2932
  1249  0011D8  D7D9               	goto	l2918
  1250                           
  1251                           ;doprnt.c: 624: }
  1252                           ;doprnt.c: 625: } else {
  1253  0011DA  D00D               	goto	l2932
  1254  0011DC                     l2924:
  1255                           
  1256                           ;doprnt.c: 626: prec = 0;
  1257  0011DC  0E00               	movlw	0
  1258  0011DE  6E62               	movwf	printf@prec+1,c
  1259  0011E0  0E00               	movlw	0
  1260  0011E2  6E61               	movwf	printf@prec,c
  1261                           
  1262                           ;doprnt.c: 628: flag |= 0x1000;
  1263  0011E4  885B               	bsf	printf@flag+1,4,c
  1264                           
  1265                           ;doprnt.c: 630: }
  1266                           ;doprnt.c: 635: switch(c = *f++) {
  1267  0011E6  D007               	goto	l2932
  1268                           
  1269                           ;doprnt.c: 638: goto alldone;
  1270                           
  1271                           ;doprnt.c: 637: case 0:
  1272  0011E8  EF7B  F00D         	goto	l364
  1273  0011EC                     l2928:
  1274                           
  1275                           ;doprnt.c: 663: flag |= 0x400;
  1276  0011EC  845B               	bsf	printf@flag+1,2,c
  1277                           
  1278                           ;doprnt.c: 698: case 'i':
  1279                           ;doprnt.c: 699: break;
  1280                           
  1281                           ;doprnt.c: 697: case 'd':
  1282                           
  1283                           ;doprnt.c: 664: break;
  1284  0011EE  D01B               	goto	l2934
  1285                           
  1286                           ;doprnt.c: 813: continue;
  1287                           
  1288                           ;doprnt.c: 802: default:
  1289  0011F0  EF6C  F00D         	goto	l3180
  1290                           
  1291                           ;doprnt.c: 822: }
  1292  0011F4  D018               	goto	l2934
  1293  0011F6                     l2932:
  1294  0011F6  C040  FFF6         	movff	printf@f,tblptrl
  1295  0011FA  C041  FFF7         	movff	printf@f+1,tblptrh
  1296  0011FE  4A40               	infsnz	printf@f,f,c
  1297  001200  2A41               	incf	printf@f+1,f,c
  1298  001202                     	if	0	;tblptru may be non-zero
  1299  001202                     	endif
  1300  001202                     	if	0	;tblptru may be non-zero
  1301  001202                     	endif
  1302  001202  0008               	tblrd		*
  1303  001204  CFF5 F063          	movff	tablat,printf@c
  1304  001208  5063               	movf	printf@c,w,c
  1305                           
  1306                           ; Switch size 1, requested type "space"
  1307                           ; Number of cases is 4, Range of values is 0 to 105
  1308                           ; switch strategies available:
  1309                           ; Name         Instructions Cycles
  1310                           ; simple_byte           13     7 (average)
  1311                           ;	Chosen strategy is simple_byte
  1312  00120A  0A00               	xorlw	0	; case 0
  1313  00120C  B4D8               	btfsc	status,2,c
  1314  00120E  EF7B  F00D         	goto	l364
  1315  001212  0A64               	xorlw	100	; case 100
  1316  001214  B4D8               	btfsc	status,2,c
  1317  001216  D007               	goto	l2934
  1318  001218  0A02               	xorlw	2	; case 102
  1319  00121A  B4D8               	btfsc	status,2,c
  1320  00121C  D7E7               	goto	l2928
  1321  00121E  0A0F               	xorlw	15	; case 105
  1322  001220  A4D8               	btfss	status,2,c
  1323  001222  EF6C  F00D         	goto	l3180
  1324  001226                     l2934:
  1325                           
  1326                           ;doprnt.c: 825: if(flag & (0x700)) {
  1327  001226  0E07               	movlw	7
  1328  001228  145B               	andwf	printf@flag+1,w,c
  1329  00122A  B4D8               	btfsc	status,2,c
  1330  00122C  D323               	goto	l3094
  1331                           
  1332                           ;doprnt.c: 827: if(flag & 0x1000)
  1333  00122E  A85B               	btfss	printf@flag+1,4,c
  1334  001230  D005               	goto	l2940
  1335                           
  1336                           ;doprnt.c: 829: prec = 6;
  1337  001232  0E00               	movlw	0
  1338  001234  6E62               	movwf	printf@prec+1,c
  1339  001236  0E06               	movlw	6
  1340  001238  6E61               	movwf	printf@prec,c
  1341  00123A  D000               	goto	l2940
  1342  00123C                     l2940:
  1343                           
  1344                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1345  00123C  C04E  FFD9         	movff	printf@ap,fsr2l
  1346  001240  C04F  FFDA         	movff	printf@ap+1,fsr2h
  1347  001244  CFDE F05E          	movff	postinc2,printf@fval
  1348  001248  CFDE F05F          	movff	postinc2,printf@fval+1
  1349  00124C  CFDD F060          	movff	postdec2,printf@fval+2
  1350  001250  0E03               	movlw	3
  1351  001252  264E               	addwf	printf@ap,f,c
  1352  001254  0E00               	movlw	0
  1353  001256  224F               	addwfc	printf@ap+1,f,c
  1354                           
  1355                           ;doprnt.c: 831: if(fval < 0.0) {
  1356  001258  AE60               	btfss	printf@fval+2,7,c
  1357  00125A  D011               	goto	l2950
  1358                           
  1359                           ;doprnt.c: 832: fval = -fval;
  1360  00125C  C05E  F001         	movff	printf@fval,___ftneg@f1
  1361  001260  C05F  F002         	movff	printf@fval+1,___ftneg@f1+1
  1362  001264  C060  F003         	movff	printf@fval+2,___ftneg@f1+2
  1363  001268  EC61  F018         	call	___ftneg	;wreg free
  1364  00126C  C001  F05E         	movff	?___ftneg,printf@fval
  1365  001270  C002  F05F         	movff	?___ftneg+1,printf@fval+1
  1366  001274  C003  F060         	movff	?___ftneg+2,printf@fval+2
  1367                           
  1368                           ;doprnt.c: 833: flag |= 0x03;
  1369  001278  0E03               	movlw	3
  1370  00127A  125A               	iorwf	printf@flag,f,c
  1371  00127C  D000               	goto	l2950
  1372  00127E                     l2950:
  1373                           
  1374                           ;doprnt.c: 834: }
  1375                           ;doprnt.c: 835: exp = 0;
  1376  00127E  0E00               	movlw	0
  1377  001280  6E59               	movwf	printf@exp+1,c
  1378  001282  0E00               	movlw	0
  1379  001284  6E58               	movwf	printf@exp,c
  1380                           
  1381                           ;doprnt.c: 836: if( fval!=0) {
  1382  001286  505E               	movf	printf@fval,w,c
  1383  001288  105F               	iorwf	printf@fval+1,w,c
  1384  00128A  1060               	iorwf	printf@fval+2,w,c
  1385  00128C  B4D8               	btfsc	status,2,c
  1386  00128E  D085               	goto	l2978
  1387                           
  1388                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1389  001290  0E82               	movlw	130
  1390  001292  6E45               	movwf	??_printf& (0+255),c
  1391  001294  0EFF               	movlw	255
  1392  001296  6E46               	movwf	(??_printf+1)& (0+255),c
  1393  001298  C05E  F047         	movff	printf@fval,??_printf+2
  1394  00129C  C05F  F048         	movff	printf@fval+1,??_printf+3
  1395  0012A0  C060  F049         	movff	printf@fval+2,??_printf+4
  1396  0012A4  C061  F04A         	movff	printf@fval+3,??_printf+5
  1397  0012A8  0E10               	movlw	16
  1398  0012AA  D005               	goto	u3030
  1399  0012AC                     u3035:
  1400  0012AC  90D8               	bcf	status,0,c
  1401  0012AE  324A               	rrcf	??_printf+5,f,c
  1402  0012B0  3249               	rrcf	??_printf+4,f,c
  1403  0012B2  3248               	rrcf	??_printf+3,f,c
  1404  0012B4  3247               	rrcf	??_printf+2,f,c
  1405  0012B6                     u3030:
  1406  0012B6  2EE8               	decfsz	wreg,f,c
  1407  0012B8  D7F9               	goto	u3035
  1408  0012BA  5047               	movf	??_printf+2,w,c
  1409  0012BC  2445               	addwf	??_printf,w,c
  1410  0012BE  6E58               	movwf	printf@exp,c
  1411  0012C0  0E00               	movlw	0
  1412  0012C2  2046               	addwfc	??_printf+1,w,c
  1413  0012C4  6E59               	movwf	printf@exp+1,c
  1414                           
  1415                           ;doprnt.c: 838: exp--;
  1416  0012C6  0658               	decf	printf@exp,f,c
  1417  0012C8  A0D8               	btfss	status,0,c
  1418  0012CA  0659               	decf	printf@exp+1,f,c
  1419                           
  1420                           ;doprnt.c: 839: exp *= 3;
  1421  0012CC  C058  F00F         	movff	printf@exp,___wmul@multiplier
  1422  0012D0  C059  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1423  0012D4  0E00               	movlw	0
  1424  0012D6  6E12               	movwf	___wmul@multiplicand+1,c
  1425  0012D8  0E03               	movlw	3
  1426  0012DA  6E11               	movwf	___wmul@multiplicand,c
  1427  0012DC  EC3A  F018         	call	___wmul	;wreg free
  1428  0012E0  C00F  F058         	movff	?___wmul,printf@exp
  1429  0012E4  C010  F059         	movff	?___wmul+1,printf@exp+1
  1430                           
  1431                           ;doprnt.c: 840: exp /= 10;
  1432  0012E8  C058  F007         	movff	printf@exp,___awdiv@dividend
  1433  0012EC  C059  F008         	movff	printf@exp+1,___awdiv@dividend+1
  1434  0012F0  0E00               	movlw	0
  1435  0012F2  6E0A               	movwf	___awdiv@divisor+1,c
  1436  0012F4  0E0A               	movlw	10
  1437  0012F6  6E09               	movwf	___awdiv@divisor,c
  1438  0012F8  EC53  F015         	call	___awdiv	;wreg free
  1439  0012FC  C007  F058         	movff	?___awdiv,printf@exp
  1440  001300  C008  F059         	movff	?___awdiv+1,printf@exp+1
  1441                           
  1442                           ;doprnt.c: 841: if(exp < 0)
  1443  001304  AE59               	btfss	printf@exp+1,7,c
  1444  001306  D004               	goto	l2966
  1445                           
  1446                           ;doprnt.c: 842: exp--;
  1447  001308  0658               	decf	printf@exp,f,c
  1448  00130A  A0D8               	btfss	status,0,c
  1449  00130C  0659               	decf	printf@exp+1,f,c
  1450  00130E  D000               	goto	l2966
  1451  001310                     l2966:
  1452                           
  1453                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1454  001310  5058               	movf	printf@exp,w,c
  1455  001312  0800               	sublw	0
  1456  001314  EC7C  F00D         	call	_scale
  1457  001318  C024  F050         	movff	?_scale,printf@tmpval
  1458  00131C  C025  F051         	movff	?_scale+1,printf@tmpval+1
  1459  001320  C026  F052         	movff	?_scale+2,printf@tmpval+2
  1460                           
  1461                           ;doprnt.c: 847: tmpval.integ *= fval;
  1462  001324  C050  F015         	movff	printf@tmpval,___ftmul@f1
  1463  001328  C051  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  1464  00132C  C052  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  1465  001330  C05E  F018         	movff	printf@fval,___ftmul@f2
  1466  001334  C05F  F019         	movff	printf@fval+1,___ftmul@f2+1
  1467  001338  C060  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1468  00133C  EC7D  F012         	call	___ftmul	;wreg free
  1469  001340  C015  F050         	movff	?___ftmul,printf@tmpval
  1470  001344  C016  F051         	movff	?___ftmul+1,printf@tmpval+1
  1471  001348  C017  F052         	movff	?___ftmul+2,printf@tmpval+2
  1472                           
  1473                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1474  00134C  C050  F001         	movff	printf@tmpval,___ftge@ff1
  1475  001350  C051  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1476  001354  C052  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1477  001358  0E00               	movlw	0
  1478  00135A  6E04               	movwf	___ftge@ff2,c
  1479  00135C  0E80               	movlw	128
  1480  00135E  6E05               	movwf	___ftge@ff2+1,c
  1481  001360  0E3F               	movlw	63
  1482  001362  6E06               	movwf	___ftge@ff2+2,c
  1483  001364  EC9E  F015         	call	___ftge	;wreg free
  1484  001368  B0D8               	btfsc	status,0,c
  1485  00136A  D004               	goto	l2974
  1486                           
  1487                           ;doprnt.c: 849: exp--;
  1488  00136C  0658               	decf	printf@exp,f,c
  1489  00136E  A0D8               	btfss	status,0,c
  1490  001370  0659               	decf	printf@exp+1,f,c
  1491  001372  D013               	goto	l2978
  1492  001374                     l2974:
  1493                           
  1494                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1495  001374  C050  F001         	movff	printf@tmpval,___ftge@ff1
  1496  001378  C051  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1497  00137C  C052  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1498  001380  0E00               	movlw	0
  1499  001382  6E04               	movwf	___ftge@ff2,c
  1500  001384  0E20               	movlw	32
  1501  001386  6E05               	movwf	___ftge@ff2+1,c
  1502  001388  0E41               	movlw	65
  1503  00138A  6E06               	movwf	___ftge@ff2+2,c
  1504  00138C  EC9E  F015         	call	___ftge	;wreg free
  1505  001390  A0D8               	btfss	status,0,c
  1506  001392  D003               	goto	l2978
  1507                           
  1508                           ;doprnt.c: 851: exp++;
  1509  001394  4A58               	infsnz	printf@exp,f,c
  1510  001396  2A59               	incf	printf@exp+1,f,c
  1511  001398  D000               	goto	l2978
  1512  00139A                     l2978:
  1513                           
  1514                           ;doprnt.c: 852: }
  1515                           ;doprnt.c: 1112: if(prec <= 12)
  1516  00139A  BE62               	btfsc	printf@prec+1,7,c
  1517  00139C  D006               	goto	l2980
  1518  00139E  5062               	movf	printf@prec+1,w,c
  1519  0013A0  E11C               	bnz	l2982
  1520  0013A2  0E0D               	movlw	13
  1521  0013A4  5C61               	subwf	printf@prec,w,c
  1522  0013A6  B0D8               	btfsc	status,0,c
  1523  0013A8  D018               	goto	l2982
  1524  0013AA                     l2980:
  1525                           
  1526                           ;doprnt.c: 1113: fval += fround(prec);
  1527  0013AA  C05E  F02E         	movff	printf@fval,___ftadd@f1
  1528  0013AE  C05F  F02F         	movff	printf@fval+1,___ftadd@f1+1
  1529  0013B2  C060  F030         	movff	printf@fval+2,___ftadd@f1+2
  1530  0013B6  5061               	movf	printf@prec,w,c
  1531  0013B8  EC6C  F00F         	call	_fround
  1532  0013BC  C024  F031         	movff	?_fround,___ftadd@f2
  1533  0013C0  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1534  0013C4  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1535  0013C8  EC8E  F010         	call	___ftadd	;wreg free
  1536  0013CC  C02E  F05E         	movff	?___ftadd,printf@fval
  1537  0013D0  C02F  F05F         	movff	?___ftadd+1,printf@fval+1
  1538  0013D4  C030  F060         	movff	?___ftadd+2,printf@fval+2
  1539  0013D8  D000               	goto	l2982
  1540  0013DA                     l2982:
  1541                           
  1542                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1543  0013DA  BE59               	btfsc	printf@exp+1,7,c
  1544  0013DC  D006               	goto	l2984
  1545  0013DE  5059               	movf	printf@exp+1,w,c
  1546  0013E0  E120               	bnz	l2990
  1547  0013E2  0E0A               	movlw	10
  1548  0013E4  5C58               	subwf	printf@exp,w,c
  1549  0013E6  B0D8               	btfsc	status,0,c
  1550  0013E8  D01C               	goto	l2990
  1551  0013EA                     l2984:
  1552  0013EA  505E               	movf	printf@fval,w,c
  1553  0013EC  105F               	iorwf	printf@fval+1,w,c
  1554  0013EE  1060               	iorwf	printf@fval+2,w,c
  1555  0013F0  B4D8               	btfsc	status,2,c
  1556  0013F2  D06D               	goto	l3004
  1557  0013F4  C05E  F02B         	movff	printf@fval,___fttol@f1
  1558  0013F8  C05F  F02C         	movff	printf@fval+1,___fttol@f1+1
  1559  0013FC  C060  F02D         	movff	printf@fval+2,___fttol@f1+2
  1560  001400  ECF9  F012         	call	___fttol	;wreg free
  1561  001404  502B               	movf	?___fttol,w,c
  1562  001406  102C               	iorwf	?___fttol+1,w,c
  1563  001408  102D               	iorwf	?___fttol+2,w,c
  1564  00140A  102E               	iorwf	?___fttol+3,w,c
  1565  00140C  B4D8               	btfsc	status,2,c
  1566  00140E  BE59               	btfsc	printf@exp+1,7,c
  1567  001410  D05E               	goto	l3004
  1568  001412  5059               	movf	printf@exp+1,w,c
  1569  001414  E106               	bnz	l2990
  1570  001416  0E02               	movlw	2
  1571  001418  5C58               	subwf	printf@exp,w,c
  1572  00141A  B0D8               	btfsc	status,0,c
  1573  00141C  D002               	goto	l2990
  1574  00141E  D057               	goto	l3004
  1575  001420  D000               	goto	l2990
  1576  001422                     l2990:
  1577                           
  1578                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1579  001422  C050  F001         	movff	printf@tmpval,___ftge@ff1
  1580  001426  C051  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1581  00142A  C052  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1582  00142E  0E70               	movlw	112
  1583  001430  6E04               	movwf	___ftge@ff2,c
  1584  001432  0E89               	movlw	137
  1585  001434  6E05               	movwf	___ftge@ff2+1,c
  1586  001436  0E40               	movlw	64
  1587  001438  6E06               	movwf	___ftge@ff2+2,c
  1588  00143A  EC9E  F015         	call	___ftge	;wreg free
  1589  00143E  B0D8               	btfsc	status,0,c
  1590  001440  D002               	goto	l2994
  1591                           
  1592                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1593  001442  0EF7               	movlw	247
  1594  001444  D001               	goto	L1
  1595  001446                     l2994:
  1596                           
  1597                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1598  001446  0EF8               	movlw	248
  1599  001448                     L1:
  1600  001448  2658               	addwf	printf@exp,f,c
  1601  00144A  0EFF               	movlw	255
  1602  00144C  2259               	addwfc	printf@exp+1,f,c
  1603  00144E  D000               	goto	l2996
  1604  001450                     l2996:
  1605                           
  1606                           ;doprnt.c: 1124: }
  1607                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1608  001450  5058               	movf	printf@exp,w,c
  1609  001452  EC7C  F00D         	call	_scale
  1610  001456  C024  F050         	movff	?_scale,printf@tmpval
  1611  00145A  C025  F051         	movff	?_scale+1,printf@tmpval+1
  1612  00145E  C026  F052         	movff	?_scale+2,printf@tmpval+2
  1613                           
  1614                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1615  001462  D017               	goto	l3000
  1616  001464  C05E  F001         	movff	printf@fval,__div_to_l_@f1
  1617  001468  C05F  F002         	movff	printf@fval+1,__div_to_l_@f1+1
  1618  00146C  C060  F003         	movff	printf@fval+2,__div_to_l_@f1+2
  1619  001470  C050  F004         	movff	printf@tmpval,__div_to_l_@f2
  1620  001474  C051  F005         	movff	printf@tmpval+1,__div_to_l_@f2+1
  1621  001478  C052  F006         	movff	printf@tmpval+2,__div_to_l_@f2+2
  1622  00147C  ECF8  F011         	call	__div_to_l_	;wreg free
  1623  001480  C001  F054         	movff	?__div_to_l_,printf@val
  1624  001484  C002  F055         	movff	?__div_to_l_+1,printf@val+1
  1625  001488  C003  F056         	movff	?__div_to_l_+2,printf@val+2
  1626  00148C  C004  F057         	movff	?__div_to_l_+3,printf@val+3
  1627  001490  D017               	goto	l3002
  1628  001492                     l3000:
  1629  001492  C05E  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1630  001496  C05F  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1631  00149A  C060  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1632  00149E  C050  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1633  0014A2  C051  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1634  0014A6  C052  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1635  0014AA  EC70  F011         	call	__tdiv_to_l_	;wreg free
  1636  0014AE  C001  F054         	movff	?__tdiv_to_l_,printf@val
  1637  0014B2  C002  F055         	movff	?__tdiv_to_l_+1,printf@val+1
  1638  0014B6  C003  F056         	movff	?__tdiv_to_l_+2,printf@val+2
  1639  0014BA  C004  F057         	movff	?__tdiv_to_l_+3,printf@val+3
  1640  0014BE  D000               	goto	l3002
  1641  0014C0                     l3002:
  1642                           
  1643                           ;doprnt.c: 1129: fval = 0.0;
  1644  0014C0  0E00               	movlw	0
  1645  0014C2  6E5E               	movwf	printf@fval,c
  1646  0014C4  0E00               	movlw	0
  1647  0014C6  6E5F               	movwf	printf@fval+1,c
  1648  0014C8  0E00               	movlw	0
  1649  0014CA  6E60               	movwf	printf@fval+2,c
  1650                           
  1651                           ;doprnt.c: 1130: } else {
  1652  0014CC  D033               	goto	l3008
  1653  0014CE                     l3004:
  1654                           
  1655                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1656  0014CE  C05E  F02B         	movff	printf@fval,___fttol@f1
  1657  0014D2  C05F  F02C         	movff	printf@fval+1,___fttol@f1+1
  1658  0014D6  C060  F02D         	movff	printf@fval+2,___fttol@f1+2
  1659  0014DA  ECF9  F012         	call	___fttol	;wreg free
  1660  0014DE  C02B  F054         	movff	?___fttol,printf@val
  1661  0014E2  C02C  F055         	movff	?___fttol+1,printf@val+1
  1662  0014E6  C02D  F056         	movff	?___fttol+2,printf@val+2
  1663  0014EA  C02E  F057         	movff	?___fttol+3,printf@val+3
  1664                           
  1665                           ;doprnt.c: 1132: fval -= (double)val;
  1666  0014EE  C05E  F03A         	movff	printf@fval,___ftsub@f1
  1667  0014F2  C05F  F03B         	movff	printf@fval+1,___ftsub@f1+1
  1668  0014F6  C060  F03C         	movff	printf@fval+2,___ftsub@f1+2
  1669  0014FA  C054  F009         	movff	printf@val,___lltoft@c
  1670  0014FE  C055  F00A         	movff	printf@val+1,___lltoft@c+1
  1671  001502  C056  F00B         	movff	printf@val+2,___lltoft@c+2
  1672  001506  C057  F00C         	movff	printf@val+3,___lltoft@c+3
  1673  00150A  EC2B  F017         	call	___lltoft	;wreg free
  1674  00150E  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1675  001512  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1676  001516  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1677  00151A  EC5B  F017         	call	___ftsub	;wreg free
  1678  00151E  C03A  F05E         	movff	?___ftsub,printf@fval
  1679  001522  C03B  F05F         	movff	?___ftsub+1,printf@fval+1
  1680  001526  C03C  F060         	movff	?___ftsub+2,printf@fval+2
  1681                           
  1682                           ;doprnt.c: 1133: exp = 0;
  1683  00152A  0E00               	movlw	0
  1684  00152C  6E59               	movwf	printf@exp+1,c
  1685  00152E  0E00               	movlw	0
  1686  001530  6E58               	movwf	printf@exp,c
  1687  001532  D000               	goto	l3008
  1688  001534                     l3008:
  1689                           
  1690                           ;doprnt.c: 1134: }
  1691                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1692  001534  0E01               	movlw	1
  1693  001536  6E63               	movwf	printf@c,c
  1694  001538                     l3010:
  1695  001538  0E0A               	movlw	10
  1696  00153A  1863               	xorwf	printf@c,w,c
  1697  00153C  B4D8               	btfsc	status,2,c
  1698  00153E  D01C               	goto	l3022
  1699  001540  D001               	goto	l3014
  1700  001542  D01A               	goto	l3022
  1701  001544                     l3014:
  1702                           
  1703                           ;doprnt.c: 1137: if(val < dpowers[c])
  1704  001544  5063               	movf	printf@c,w,c
  1705  001546  0D04               	mullw	4
  1706  001548  0E01               	movlw	low _dpowers
  1707  00154A  24F3               	addwf	prodl,w,c
  1708  00154C  6EF6               	movwf	tblptrl,c
  1709  00154E  0E10               	movlw	high _dpowers
  1710  001550  20F4               	addwfc	prodh,w,c
  1711  001552  6EF7               	movwf	tblptrh,c
  1712  001554                     	if	0	;There are less than 3 active tblptr bytes
  1713  001554                     	endif
  1714  001554  0009               	tblrd		*+
  1715  001556  50F5               	movf	tablat,w,c
  1716  001558  5C54               	subwf	printf@val,w,c
  1717  00155A  0009               	tblrd		*+
  1718  00155C  50F5               	movf	tablat,w,c
  1719  00155E  5855               	subwfb	printf@val+1,w,c
  1720  001560  0009               	tblrd		*+
  1721  001562  50F5               	movf	tablat,w,c
  1722  001564  5856               	subwfb	printf@val+2,w,c
  1723  001566  0009               	tblrd		*+
  1724  001568  50F5               	movf	tablat,w,c
  1725  00156A  5857               	subwfb	printf@val+3,w,c
  1726  00156C  A0D8               	btfss	status,0,c
  1727  00156E  D004               	goto	l3022
  1728  001570  D001               	goto	l3018
  1729                           
  1730                           ;doprnt.c: 1138: break;
  1731  001572  D002               	goto	l3022
  1732  001574                     l3018:
  1733  001574  2A63               	incf	printf@c,f,c
  1734  001576  D7E0               	goto	l3010
  1735  001578                     l3022:
  1736                           
  1737                           ;doprnt.c: 1142: width -= prec + c + exp;
  1738  001578  C063  F045         	movff	printf@c,??_printf
  1739  00157C  6A46               	clrf	(??_printf+1)& (0+255),c
  1740  00157E  BE45               	btfsc	??_printf& (0+255),7,c
  1741  001580  0646               	decf	(??_printf+1)& (0+255),f,c
  1742  001582  5061               	movf	printf@prec,w,c
  1743  001584  2645               	addwf	??_printf,f,c
  1744  001586  5062               	movf	printf@prec+1,w,c
  1745  001588  2246               	addwfc	??_printf+1,f,c
  1746  00158A  5058               	movf	printf@exp,w,c
  1747  00158C  2645               	addwf	??_printf,f,c
  1748  00158E  5059               	movf	printf@exp+1,w,c
  1749  001590  2246               	addwfc	??_printf+1,f,c
  1750  001592  5045               	movf	??_printf,w,c
  1751  001594  5E5C               	subwf	printf@width,f,c
  1752  001596  5046               	movf	??_printf+1,w,c
  1753  001598  5A5D               	subwfb	printf@width+1,f,c
  1754                           
  1755                           ;doprnt.c: 1143: if(
  1756                           ;doprnt.c: 1147: prec)
  1757  00159A  5061               	movf	printf@prec,w,c
  1758  00159C  1062               	iorwf	printf@prec+1,w,c
  1759  00159E  B4D8               	btfsc	status,2,c
  1760  0015A0  D004               	goto	l3026
  1761                           
  1762                           ;doprnt.c: 1148: width--;
  1763  0015A2  065C               	decf	printf@width,f,c
  1764  0015A4  A0D8               	btfss	status,0,c
  1765  0015A6  065D               	decf	printf@width+1,f,c
  1766  0015A8  D000               	goto	l3026
  1767  0015AA                     l3026:
  1768                           
  1769                           ;doprnt.c: 1149: if(flag & 0x03)
  1770  0015AA  0E03               	movlw	3
  1771  0015AC  145A               	andwf	printf@flag,w,c
  1772  0015AE  6E45               	movwf	??_printf& (0+255),c
  1773  0015B0  0E00               	movlw	0
  1774  0015B2  145B               	andwf	printf@flag+1,w,c
  1775  0015B4  6E46               	movwf	(??_printf+1)& (0+255),c
  1776  0015B6  5045               	movf	??_printf,w,c
  1777  0015B8  1046               	iorwf	??_printf+1,w,c
  1778  0015BA  B4D8               	btfsc	status,2,c
  1779  0015BC  D004               	goto	l3030
  1780                           
  1781                           ;doprnt.c: 1150: width--;
  1782  0015BE  065C               	decf	printf@width,f,c
  1783  0015C0  A0D8               	btfss	status,0,c
  1784  0015C2  065D               	decf	printf@width+1,f,c
  1785  0015C4  D000               	goto	l3030
  1786  0015C6                     l3030:
  1787                           
  1788                           ;doprnt.c: 1153: if(flag & 0x04) {
  1789  0015C6  A45A               	btfss	printf@flag,2,c
  1790  0015C8  D026               	goto	l3046
  1791                           
  1792                           ;doprnt.c: 1157: if(flag & 0x03)
  1793  0015CA  0E03               	movlw	3
  1794  0015CC  145A               	andwf	printf@flag,w,c
  1795  0015CE  6E45               	movwf	??_printf& (0+255),c
  1796  0015D0  0E00               	movlw	0
  1797  0015D2  145B               	andwf	printf@flag+1,w,c
  1798  0015D4  6E46               	movwf	(??_printf+1)& (0+255),c
  1799  0015D6  5045               	movf	??_printf,w,c
  1800  0015D8  1046               	iorwf	??_printf+1,w,c
  1801  0015DA  B4D8               	btfsc	status,2,c
  1802  0015DC  D00B               	goto	l3040
  1803                           
  1804                           ;doprnt.c: 1159: (putch('-') );
  1805  0015DE  0E2D               	movlw	45
  1806  0015E0  ECD4  F018         	call	_putch
  1807                           
  1808                           ;doprnt.c: 1168: while(width > 0) {
  1809  0015E4  D007               	goto	l3040
  1810  0015E6                     l3036:
  1811                           
  1812                           ;doprnt.c: 1169: (putch('0') );
  1813  0015E6  0E30               	movlw	48
  1814  0015E8  ECD4  F018         	call	_putch
  1815                           
  1816                           ;doprnt.c: 1170: width--;
  1817  0015EC  065C               	decf	printf@width,f,c
  1818  0015EE  A0D8               	btfss	status,0,c
  1819  0015F0  065D               	decf	printf@width+1,f,c
  1820  0015F2  D000               	goto	l3040
  1821  0015F4                     l3040:
  1822  0015F4  BE5D               	btfsc	printf@width+1,7,c
  1823  0015F6  D069               	goto	l3058
  1824  0015F8  505D               	movf	printf@width+1,w,c
  1825  0015FA  E1F5               	bnz	l3036
  1826  0015FC  045C               	decf	printf@width,w,c
  1827  0015FE  A0D8               	btfss	status,0,c
  1828  001600  D064               	goto	l3058
  1829  001602  D7F1               	goto	l3036
  1830                           
  1831                           ;doprnt.c: 1171: }
  1832                           ;doprnt.c: 1173: } else
  1833  001604  D062               	goto	l3058
  1834                           
  1835                           ;doprnt.c: 1175: {
  1836                           ;doprnt.c: 1180: while(width > 0) {
  1837  001606  D007               	goto	l3046
  1838  001608                     l3042:
  1839                           
  1840                           ;doprnt.c: 1181: (putch(' ') );
  1841  001608  0E20               	movlw	32
  1842  00160A  ECD4  F018         	call	_putch
  1843                           
  1844                           ;doprnt.c: 1182: width--;
  1845  00160E  065C               	decf	printf@width,f,c
  1846  001610  A0D8               	btfss	status,0,c
  1847  001612  065D               	decf	printf@width+1,f,c
  1848  001614  D000               	goto	l3046
  1849  001616                     l3046:
  1850  001616  BE5D               	btfsc	printf@width+1,7,c
  1851  001618  D005               	goto	l3048
  1852  00161A  505D               	movf	printf@width+1,w,c
  1853  00161C  E1F5               	bnz	l3042
  1854  00161E  045C               	decf	printf@width,w,c
  1855  001620  B0D8               	btfsc	status,0,c
  1856  001622  D7F2               	goto	l3042
  1857  001624                     l3048:
  1858                           
  1859                           ;doprnt.c: 1183: }
  1860                           ;doprnt.c: 1188: if(flag & 0x03)
  1861  001624  0E03               	movlw	3
  1862  001626  145A               	andwf	printf@flag,w,c
  1863  001628  6E45               	movwf	??_printf& (0+255),c
  1864  00162A  0E00               	movlw	0
  1865  00162C  145B               	andwf	printf@flag+1,w,c
  1866  00162E  6E46               	movwf	(??_printf+1)& (0+255),c
  1867  001630  5045               	movf	??_printf,w,c
  1868  001632  1046               	iorwf	??_printf+1,w,c
  1869  001634  B4D8               	btfsc	status,2,c
  1870  001636  D049               	goto	l3058
  1871                           
  1872                           ;doprnt.c: 1190: (putch('-') );
  1873  001638  0E2D               	movlw	45
  1874  00163A  ECD4  F018         	call	_putch
  1875                           
  1876                           ;doprnt.c: 1195: }
  1877                           ;doprnt.c: 1196: while(c--) {
  1878  00163E  D045               	goto	l3058
  1879  001640                     l3052:
  1880                           
  1881                           ;doprnt.c: 1200: {
  1882                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1883  001640  C054  F001         	movff	printf@val,___lldiv@dividend
  1884  001644  C055  F002         	movff	printf@val+1,___lldiv@dividend+1
  1885  001648  C056  F003         	movff	printf@val+2,___lldiv@dividend+2
  1886  00164C  C057  F004         	movff	printf@val+3,___lldiv@dividend+3
  1887  001650  5063               	movf	printf@c,w,c
  1888  001652  0D04               	mullw	4
  1889  001654  0E01               	movlw	low _dpowers
  1890  001656  24F3               	addwf	prodl,w,c
  1891  001658  6EF6               	movwf	tblptrl,c
  1892  00165A  0E10               	movlw	high _dpowers
  1893  00165C  20F4               	addwfc	prodh,w,c
  1894  00165E  6EF7               	movwf	tblptrh,c
  1895  001660                     	if	0	;There are less than 3 active tblptr bytes
  1896  001660                     	endif
  1897  001660  0009               	tblrd		*+
  1898  001662  CFF5 F005          	movff	tablat,___lldiv@divisor
  1899  001666  0009               	tblrd		*+
  1900  001668  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1901  00166C  0009               	tblrd		*+
  1902  00166E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1903  001672  000A               	tblrd		*-
  1904  001674  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1905  001678  EC34  F016         	call	___lldiv	;wreg free
  1906  00167C  C001  F050         	movff	?___lldiv,printf@tmpval
  1907  001680  C002  F051         	movff	?___lldiv+1,printf@tmpval+1
  1908  001684  C003  F052         	movff	?___lldiv+2,printf@tmpval+2
  1909  001688  C004  F053         	movff	?___lldiv+3,printf@tmpval+3
  1910                           
  1911                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1912  00168C  C050  F00E         	movff	printf@tmpval,___llmod@dividend
  1913  001690  C051  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  1914  001694  C052  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  1915  001698  C053  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  1916  00169C  0E0A               	movlw	10
  1917  00169E  6E12               	movwf	___llmod@divisor,c
  1918  0016A0  0E00               	movlw	0
  1919  0016A2  6E13               	movwf	___llmod@divisor+1,c
  1920  0016A4  0E00               	movlw	0
  1921  0016A6  6E14               	movwf	___llmod@divisor+2,c
  1922  0016A8  0E00               	movlw	0
  1923  0016AA  6E15               	movwf	___llmod@divisor+3,c
  1924  0016AC  ECBB  F016         	call	___llmod	;wreg free
  1925  0016B0  C00E  F050         	movff	?___llmod,printf@tmpval
  1926  0016B4  C00F  F051         	movff	?___llmod+1,printf@tmpval+1
  1927  0016B8  C010  F052         	movff	?___llmod+2,printf@tmpval+2
  1928  0016BC  C011  F053         	movff	?___llmod+3,printf@tmpval+3
  1929                           
  1930                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1931  0016C0  5050               	movf	printf@tmpval,w,c
  1932  0016C2  0F30               	addlw	48
  1933  0016C4  ECD4  F018         	call	_putch
  1934  0016C8  D000               	goto	l3058
  1935  0016CA                     l3058:
  1936  0016CA  0663               	decf	printf@c,f,c
  1937  0016CC  2863               	incf	printf@c,w,c
  1938  0016CE  B4D8               	btfsc	status,2,c
  1939  0016D0  D009               	goto	l3064
  1940  0016D2  D7B6               	goto	l3052
  1941                           
  1942                           ;doprnt.c: 1204: }
  1943                           ;doprnt.c: 1206: }
  1944                           ;doprnt.c: 1207: while(exp > 0) {
  1945  0016D4  D007               	goto	l3064
  1946  0016D6                     l3060:
  1947                           
  1948                           ;doprnt.c: 1208: (putch('0') );
  1949  0016D6  0E30               	movlw	48
  1950  0016D8  ECD4  F018         	call	_putch
  1951                           
  1952                           ;doprnt.c: 1209: exp--;
  1953  0016DC  0658               	decf	printf@exp,f,c
  1954  0016DE  A0D8               	btfss	status,0,c
  1955  0016E0  0659               	decf	printf@exp+1,f,c
  1956  0016E2  D000               	goto	l3064
  1957  0016E4                     l3064:
  1958  0016E4  BE59               	btfsc	printf@exp+1,7,c
  1959  0016E6  D005               	goto	l3066
  1960  0016E8  5059               	movf	printf@exp+1,w,c
  1961  0016EA  E1F5               	bnz	l3060
  1962  0016EC  0458               	decf	printf@exp,w,c
  1963  0016EE  B0D8               	btfsc	status,0,c
  1964  0016F0  D7F2               	goto	l3060
  1965  0016F2                     l3066:
  1966                           
  1967                           ;doprnt.c: 1210: }
  1968                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1969  0016F2  BE62               	btfsc	printf@prec+1,7,c
  1970  0016F4  D009               	goto	l327
  1971  0016F6  5062               	movf	printf@prec+1,w,c
  1972  0016F8  E104               	bnz	u3250
  1973  0016FA  0E09               	movlw	9
  1974  0016FC  5C61               	subwf	printf@prec,w,c
  1975  0016FE  A0D8               	btfss	status,0,c
  1976  001700  D003               	goto	l327
  1977  001702                     u3250:
  1978                           
  1979                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1980  001702  0E08               	movlw	8
  1981  001704  6E63               	movwf	printf@c,c
  1982  001706  D003               	goto	l3070
  1983  001708                     l327:
  1984                           
  1985                           ;doprnt.c: 1213: else
  1986                           ;doprnt.c: 1214: c = prec;
  1987  001708  C061  F063         	movff	printf@prec,printf@c
  1988  00170C  D000               	goto	l3070
  1989  00170E                     l3070:
  1990                           
  1991                           ;doprnt.c: 1215: prec -= c;
  1992  00170E  5063               	movf	printf@c,w,c
  1993  001710  5E61               	subwf	printf@prec,f,c
  1994  001712  0E00               	movlw	0
  1995  001714  BE63               	btfsc	printf@c,7,c
  1996  001716  0EFF               	movlw	255
  1997  001718  5A62               	subwfb	printf@prec+1,f,c
  1998                           
  1999                           ;doprnt.c: 1219: if(c)
  2000  00171A  5063               	movf	printf@c,w,c
  2001  00171C  B4D8               	btfsc	status,2,c
  2002  00171E  D004               	goto	l3076
  2003                           
  2004                           ;doprnt.c: 1221: (putch('.') );
  2005  001720  0E2E               	movlw	46
  2006  001722  ECD4  F018         	call	_putch
  2007  001726  D000               	goto	l3076
  2008  001728                     l3076:
  2009                           
  2010                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2011  001728  5063               	movf	printf@c,w,c
  2012  00172A  EC7C  F00D         	call	_scale
  2013  00172E  C024  F04B         	movff	?_scale,_printf$1704
  2014  001732  C025  F04C         	movff	?_scale+1,_printf$1704+1
  2015  001736  C026  F04D         	movff	?_scale+2,_printf$1704+2
  2016                           
  2017                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2018  00173A  C05E  F018         	movff	printf@fval,___ftmul@f2
  2019  00173E  C05F  F019         	movff	printf@fval+1,___ftmul@f2+1
  2020  001742  C060  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2021  001746  C04B  F015         	movff	_printf$1704,___ftmul@f1
  2022  00174A  C04C  F016         	movff	_printf$1704+1,___ftmul@f1+1
  2023  00174E  C04D  F017         	movff	_printf$1704+2,___ftmul@f1+2
  2024  001752  EC7D  F012         	call	___ftmul	;wreg free
  2025  001756  C015  F02B         	movff	?___ftmul,___fttol@f1
  2026  00175A  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2027  00175E  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2028  001762  ECF9  F012         	call	___fttol	;wreg free
  2029  001766  C02B  F054         	movff	?___fttol,printf@val
  2030  00176A  C02C  F055         	movff	?___fttol+1,printf@val+1
  2031  00176E  C02D  F056         	movff	?___fttol+2,printf@val+2
  2032  001772  C02E  F057         	movff	?___fttol+3,printf@val+3
  2033                           
  2034                           ;doprnt.c: 1228: while(c--) {
  2035  001776  D06B               	goto	l3086
  2036  001778                     l3080:
  2037                           
  2038                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2039  001778  C054  F001         	movff	printf@val,___lldiv@dividend
  2040  00177C  C055  F002         	movff	printf@val+1,___lldiv@dividend+1
  2041  001780  C056  F003         	movff	printf@val+2,___lldiv@dividend+2
  2042  001784  C057  F004         	movff	printf@val+3,___lldiv@dividend+3
  2043  001788  5063               	movf	printf@c,w,c
  2044  00178A  0D04               	mullw	4
  2045  00178C  0E01               	movlw	low _dpowers
  2046  00178E  24F3               	addwf	prodl,w,c
  2047  001790  6EF6               	movwf	tblptrl,c
  2048  001792  0E10               	movlw	high _dpowers
  2049  001794  20F4               	addwfc	prodh,w,c
  2050  001796  6EF7               	movwf	tblptrh,c
  2051  001798                     	if	0	;There are less than 3 active tblptr bytes
  2052  001798                     	endif
  2053  001798  0009               	tblrd		*+
  2054  00179A  CFF5 F005          	movff	tablat,___lldiv@divisor
  2055  00179E  0009               	tblrd		*+
  2056  0017A0  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2057  0017A4  0009               	tblrd		*+
  2058  0017A6  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2059  0017AA  000A               	tblrd		*-
  2060  0017AC  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2061  0017B0  EC34  F016         	call	___lldiv	;wreg free
  2062  0017B4  C001  F050         	movff	?___lldiv,printf@tmpval
  2063  0017B8  C002  F051         	movff	?___lldiv+1,printf@tmpval+1
  2064  0017BC  C003  F052         	movff	?___lldiv+2,printf@tmpval+2
  2065  0017C0  C004  F053         	movff	?___lldiv+3,printf@tmpval+3
  2066                           
  2067                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2068  0017C4  C050  F00E         	movff	printf@tmpval,___llmod@dividend
  2069  0017C8  C051  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2070  0017CC  C052  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2071  0017D0  C053  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2072  0017D4  0E0A               	movlw	10
  2073  0017D6  6E12               	movwf	___llmod@divisor,c
  2074  0017D8  0E00               	movlw	0
  2075  0017DA  6E13               	movwf	___llmod@divisor+1,c
  2076  0017DC  0E00               	movlw	0
  2077  0017DE  6E14               	movwf	___llmod@divisor+2,c
  2078  0017E0  0E00               	movlw	0
  2079  0017E2  6E15               	movwf	___llmod@divisor+3,c
  2080  0017E4  ECBB  F016         	call	___llmod	;wreg free
  2081  0017E8  C00E  F050         	movff	?___llmod,printf@tmpval
  2082  0017EC  C00F  F051         	movff	?___llmod+1,printf@tmpval+1
  2083  0017F0  C010  F052         	movff	?___llmod+2,printf@tmpval+2
  2084  0017F4  C011  F053         	movff	?___llmod+3,printf@tmpval+3
  2085                           
  2086                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2087  0017F8  5050               	movf	printf@tmpval,w,c
  2088  0017FA  0F30               	addlw	48
  2089  0017FC  ECD4  F018         	call	_putch
  2090                           
  2091                           ;doprnt.c: 1232: val %= dpowers[c];
  2092  001800  C054  F00E         	movff	printf@val,___llmod@dividend
  2093  001804  C055  F00F         	movff	printf@val+1,___llmod@dividend+1
  2094  001808  C056  F010         	movff	printf@val+2,___llmod@dividend+2
  2095  00180C  C057  F011         	movff	printf@val+3,___llmod@dividend+3
  2096  001810  5063               	movf	printf@c,w,c
  2097  001812  0D04               	mullw	4
  2098  001814  0E01               	movlw	low _dpowers
  2099  001816  24F3               	addwf	prodl,w,c
  2100  001818  6EF6               	movwf	tblptrl,c
  2101  00181A  0E10               	movlw	high _dpowers
  2102  00181C  20F4               	addwfc	prodh,w,c
  2103  00181E  6EF7               	movwf	tblptrh,c
  2104  001820                     	if	0	;There are less than 3 active tblptr bytes
  2105  001820                     	endif
  2106  001820  0009               	tblrd		*+
  2107  001822  CFF5 F012          	movff	tablat,___llmod@divisor
  2108  001826  0009               	tblrd		*+
  2109  001828  CFF5 F013          	movff	tablat,___llmod@divisor+1
  2110  00182C  0009               	tblrd		*+
  2111  00182E  CFF5 F014          	movff	tablat,___llmod@divisor+2
  2112  001832  000A               	tblrd		*-
  2113  001834  CFF5 F015          	movff	tablat,___llmod@divisor+3
  2114  001838  ECBB  F016         	call	___llmod	;wreg free
  2115  00183C  C00E  F054         	movff	?___llmod,printf@val
  2116  001840  C00F  F055         	movff	?___llmod+1,printf@val+1
  2117  001844  C010  F056         	movff	?___llmod+2,printf@val+2
  2118  001848  C011  F057         	movff	?___llmod+3,printf@val+3
  2119  00184C  D000               	goto	l3086
  2120  00184E                     l3086:
  2121  00184E  0663               	decf	printf@c,f,c
  2122  001850  2863               	incf	printf@c,w,c
  2123  001852  B4D8               	btfsc	status,2,c
  2124  001854  D009               	goto	l3092
  2125  001856  D790               	goto	l3080
  2126                           
  2127                           ;doprnt.c: 1233: }
  2128                           ;doprnt.c: 1235: while(prec) {
  2129  001858  D007               	goto	l3092
  2130  00185A                     l3088:
  2131                           
  2132                           ;doprnt.c: 1236: (putch('0') );
  2133  00185A  0E30               	movlw	48
  2134  00185C  ECD4  F018         	call	_putch
  2135                           
  2136                           ;doprnt.c: 1237: prec--;
  2137  001860  0661               	decf	printf@prec,f,c
  2138  001862  A0D8               	btfss	status,0,c
  2139  001864  0662               	decf	printf@prec+1,f,c
  2140  001866  D000               	goto	l3092
  2141  001868                     l3092:
  2142  001868  5061               	movf	printf@prec,w,c
  2143  00186A  1062               	iorwf	printf@prec+1,w,c
  2144  00186C  B4D8               	btfsc	status,2,c
  2145  00186E  D134               	goto	l3180
  2146  001870  D7F4               	goto	l3088
  2147                           
  2148                           ;doprnt.c: 1238: }
  2149                           ;doprnt.c: 1245: continue;
  2150  001872  D132               	goto	l3180
  2151  001874                     l3094:
  2152                           
  2153                           ;doprnt.c: 1246: }
  2154                           ;doprnt.c: 1253: {
  2155                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2156  001874  C04E  FFD9         	movff	printf@ap,fsr2l
  2157  001878  C04F  FFDA         	movff	printf@ap+1,fsr2h
  2158  00187C  CFDE F054          	movff	postinc2,printf@val
  2159  001880  CFDD F055          	movff	postdec2,printf@val+1
  2160  001884  0E00               	movlw	0
  2161  001886  BE55               	btfsc	printf@val+1,7,c
  2162  001888  0EFF               	movlw	-1
  2163  00188A  6E56               	movwf	printf@val+2,c
  2164  00188C  6E57               	movwf	printf@val+3,c
  2165  00188E  0E02               	movlw	2
  2166  001890  264E               	addwf	printf@ap,f,c
  2167  001892  0E00               	movlw	0
  2168  001894  224F               	addwfc	printf@ap+1,f,c
  2169                           
  2170                           ;doprnt.c: 1261: if((long)val < 0) {
  2171  001896  AE57               	btfss	printf@val+3,7,c
  2172  001898  D00B               	goto	l3104
  2173                           
  2174                           ;doprnt.c: 1262: flag |= 0x03;
  2175  00189A  0E03               	movlw	3
  2176  00189C  125A               	iorwf	printf@flag,f,c
  2177                           
  2178                           ;doprnt.c: 1263: val = -val;
  2179  00189E  1E57               	comf	printf@val+3,f,c
  2180  0018A0  1E56               	comf	printf@val+2,f,c
  2181  0018A2  1E55               	comf	printf@val+1,f,c
  2182  0018A4  6C54               	negf	printf@val,c
  2183  0018A6  0E00               	movlw	0
  2184  0018A8  2255               	addwfc	printf@val+1,f,c
  2185  0018AA  2256               	addwfc	printf@val+2,f,c
  2186  0018AC  2257               	addwfc	printf@val+3,f,c
  2187  0018AE  D000               	goto	l3104
  2188  0018B0                     l3104:
  2189                           
  2190                           ;doprnt.c: 1264: }
  2191                           ;doprnt.c: 1266: }
  2192                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2193  0018B0  5061               	movf	printf@prec,w,c
  2194  0018B2  1062               	iorwf	printf@prec+1,w,c
  2195  0018B4  A4D8               	btfss	status,2,c
  2196  0018B6  D009               	goto	l3110
  2197  0018B8  5054               	movf	printf@val,w,c
  2198  0018BA  1055               	iorwf	printf@val+1,w,c
  2199  0018BC  1056               	iorwf	printf@val+2,w,c
  2200  0018BE  1057               	iorwf	printf@val+3,w,c
  2201  0018C0  A4D8               	btfss	status,2,c
  2202  0018C2  D003               	goto	l3110
  2203                           
  2204                           ;doprnt.c: 1291: prec++;
  2205  0018C4  4A61               	infsnz	printf@prec,f,c
  2206  0018C6  2A62               	incf	printf@prec+1,f,c
  2207  0018C8  D000               	goto	l3110
  2208  0018CA                     l3110:
  2209                           
  2210                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2211  0018CA  0E01               	movlw	1
  2212  0018CC  6E63               	movwf	printf@c,c
  2213  0018CE                     l3112:
  2214  0018CE  0E0A               	movlw	10
  2215  0018D0  1863               	xorwf	printf@c,w,c
  2216  0018D2  B4D8               	btfsc	status,2,c
  2217  0018D4  D01C               	goto	l3124
  2218  0018D6  D001               	goto	l3116
  2219  0018D8  D01A               	goto	l3124
  2220  0018DA                     l3116:
  2221                           
  2222                           ;doprnt.c: 1306: if(val < dpowers[c])
  2223  0018DA  5063               	movf	printf@c,w,c
  2224  0018DC  0D04               	mullw	4
  2225  0018DE  0E01               	movlw	low _dpowers
  2226  0018E0  24F3               	addwf	prodl,w,c
  2227  0018E2  6EF6               	movwf	tblptrl,c
  2228  0018E4  0E10               	movlw	high _dpowers
  2229  0018E6  20F4               	addwfc	prodh,w,c
  2230  0018E8  6EF7               	movwf	tblptrh,c
  2231  0018EA                     	if	0	;There are less than 3 active tblptr bytes
  2232  0018EA                     	endif
  2233  0018EA  0009               	tblrd		*+
  2234  0018EC  50F5               	movf	tablat,w,c
  2235  0018EE  5C54               	subwf	printf@val,w,c
  2236  0018F0  0009               	tblrd		*+
  2237  0018F2  50F5               	movf	tablat,w,c
  2238  0018F4  5855               	subwfb	printf@val+1,w,c
  2239  0018F6  0009               	tblrd		*+
  2240  0018F8  50F5               	movf	tablat,w,c
  2241  0018FA  5856               	subwfb	printf@val+2,w,c
  2242  0018FC  0009               	tblrd		*+
  2243  0018FE  50F5               	movf	tablat,w,c
  2244  001900  5857               	subwfb	printf@val+3,w,c
  2245  001902  A0D8               	btfss	status,0,c
  2246  001904  D004               	goto	l3124
  2247  001906  D001               	goto	l3120
  2248                           
  2249                           ;doprnt.c: 1307: break;
  2250  001908  D002               	goto	l3124
  2251  00190A                     l3120:
  2252  00190A  2A63               	incf	printf@c,f,c
  2253  00190C  D7E0               	goto	l3112
  2254  00190E                     l3124:
  2255                           
  2256                           ;doprnt.c: 1339: if(c < prec)
  2257  00190E  0E80               	movlw	128
  2258  001910  BE63               	btfsc	printf@c,7,c
  2259  001912  0E7F               	movlw	127
  2260  001914  6E45               	movwf	??_printf& (0+255),c
  2261  001916  5061               	movf	printf@prec,w,c
  2262  001918  5C63               	subwf	printf@c,w,c
  2263  00191A  5062               	movf	printf@prec+1,w,c
  2264  00191C  0A80               	xorlw	128
  2265  00191E  5845               	subwfb	??_printf& (0+255),w,c
  2266  001920  B0D8               	btfsc	status,0,c
  2267  001922  D003               	goto	l3128
  2268                           
  2269                           ;doprnt.c: 1340: c = prec;
  2270  001924  C061  F063         	movff	printf@prec,printf@c
  2271  001928  D011               	goto	l3132
  2272  00192A                     l3128:
  2273                           
  2274                           ;doprnt.c: 1341: else if(prec < c)
  2275  00192A  5062               	movf	printf@prec+1,w,c
  2276  00192C  0A80               	xorlw	128
  2277  00192E  6E45               	movwf	??_printf& (0+255),c
  2278  001930  5063               	movf	printf@c,w,c
  2279  001932  5C61               	subwf	printf@prec,w,c
  2280  001934  0E80               	movlw	128
  2281  001936  BE63               	btfsc	printf@c,7,c
  2282  001938  0E7F               	movlw	127
  2283  00193A  5845               	subwfb	??_printf& (0+255),w,c
  2284  00193C  B0D8               	btfsc	status,0,c
  2285  00193E  D006               	goto	l3132
  2286                           
  2287                           ;doprnt.c: 1342: prec = c;
  2288  001940  5063               	movf	printf@c,w,c
  2289  001942  6E61               	movwf	printf@prec,c
  2290  001944  6A62               	clrf	printf@prec+1,c
  2291  001946  BE61               	btfsc	printf@prec,7,c
  2292  001948  0662               	decf	printf@prec+1,f,c
  2293  00194A  D000               	goto	l3132
  2294  00194C                     l3132:
  2295                           
  2296                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2297  00194C  505C               	movf	printf@width,w,c
  2298  00194E  105D               	iorwf	printf@width+1,w,c
  2299  001950  B4D8               	btfsc	status,2,c
  2300  001952  D00E               	goto	l3138
  2301  001954  0E03               	movlw	3
  2302  001956  145A               	andwf	printf@flag,w,c
  2303  001958  6E45               	movwf	??_printf& (0+255),c
  2304  00195A  0E00               	movlw	0
  2305  00195C  145B               	andwf	printf@flag+1,w,c
  2306  00195E  6E46               	movwf	(??_printf+1)& (0+255),c
  2307  001960  5045               	movf	??_printf,w,c
  2308  001962  1046               	iorwf	??_printf+1,w,c
  2309  001964  B4D8               	btfsc	status,2,c
  2310  001966  D004               	goto	l3138
  2311                           
  2312                           ;doprnt.c: 1346: width--;
  2313  001968  065C               	decf	printf@width,f,c
  2314  00196A  A0D8               	btfss	status,0,c
  2315  00196C  065D               	decf	printf@width+1,f,c
  2316  00196E  D000               	goto	l3138
  2317  001970                     l3138:
  2318                           
  2319                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2320  001970  AC5B               	btfss	printf@flag+1,6,c
  2321  001972  D014               	goto	l3146
  2322                           
  2323                           ;doprnt.c: 1349: if(width > prec)
  2324  001974  505C               	movf	printf@width,w,c
  2325  001976  5C61               	subwf	printf@prec,w,c
  2326  001978  5062               	movf	printf@prec+1,w,c
  2327  00197A  0A80               	xorlw	128
  2328  00197C  6E45               	movwf	??_printf& (0+255),c
  2329  00197E  505D               	movf	printf@width+1,w,c
  2330  001980  0A80               	xorlw	128
  2331  001982  5845               	subwfb	??_printf& (0+255),w,c
  2332  001984  B0D8               	btfsc	status,0,c
  2333  001986  D005               	goto	l3144
  2334                           
  2335                           ;doprnt.c: 1350: width -= prec;
  2336  001988  5061               	movf	printf@prec,w,c
  2337  00198A  5E5C               	subwf	printf@width,f,c
  2338  00198C  5062               	movf	printf@prec+1,w,c
  2339  00198E  5A5D               	subwfb	printf@width+1,f,c
  2340  001990  D005               	goto	l3146
  2341  001992                     l3144:
  2342                           
  2343                           ;doprnt.c: 1351: else
  2344                           ;doprnt.c: 1352: width = 0;
  2345  001992  0E00               	movlw	0
  2346  001994  6E5D               	movwf	printf@width+1,c
  2347  001996  0E00               	movlw	0
  2348  001998  6E5C               	movwf	printf@width,c
  2349  00199A  D000               	goto	l3146
  2350  00199C                     l3146:
  2351                           
  2352                           ;doprnt.c: 1353: }
  2353                           ;doprnt.c: 1381: if(width > c)
  2354  00199C  0E80               	movlw	128
  2355  00199E  BE63               	btfsc	printf@c,7,c
  2356  0019A0  0E7F               	movlw	127
  2357  0019A2  6E45               	movwf	??_printf& (0+255),c
  2358  0019A4  505C               	movf	printf@width,w,c
  2359  0019A6  5C63               	subwf	printf@c,w,c
  2360  0019A8  505D               	movf	printf@width+1,w,c
  2361  0019AA  0A80               	xorlw	128
  2362  0019AC  5845               	subwfb	??_printf& (0+255),w,c
  2363  0019AE  B0D8               	btfsc	status,0,c
  2364  0019B0  D007               	goto	l3150
  2365                           
  2366                           ;doprnt.c: 1382: width -= c;
  2367  0019B2  5063               	movf	printf@c,w,c
  2368  0019B4  5E5C               	subwf	printf@width,f,c
  2369  0019B6  0E00               	movlw	0
  2370  0019B8  BE63               	btfsc	printf@c,7,c
  2371  0019BA  0EFF               	movlw	255
  2372  0019BC  5A5D               	subwfb	printf@width+1,f,c
  2373  0019BE  D005               	goto	l3152
  2374  0019C0                     l3150:
  2375                           
  2376                           ;doprnt.c: 1383: else
  2377                           ;doprnt.c: 1384: width = 0;
  2378  0019C0  0E00               	movlw	0
  2379  0019C2  6E5D               	movwf	printf@width+1,c
  2380  0019C4  0E00               	movlw	0
  2381  0019C6  6E5C               	movwf	printf@width,c
  2382  0019C8  D000               	goto	l3152
  2383  0019CA                     l3152:
  2384                           
  2385                           ;doprnt.c: 1387: if(flag & 0x04) {
  2386  0019CA  A45A               	btfss	printf@flag,2,c
  2387  0019CC  D01E               	goto	l3164
  2388                           
  2389                           ;doprnt.c: 1392: if(flag & 0x03)
  2390  0019CE  0E03               	movlw	3
  2391  0019D0  145A               	andwf	printf@flag,w,c
  2392  0019D2  6E45               	movwf	??_printf& (0+255),c
  2393  0019D4  0E00               	movlw	0
  2394  0019D6  145B               	andwf	printf@flag+1,w,c
  2395  0019D8  6E46               	movwf	(??_printf+1)& (0+255),c
  2396  0019DA  5045               	movf	??_printf,w,c
  2397  0019DC  1046               	iorwf	??_printf+1,w,c
  2398  0019DE  B4D8               	btfsc	status,2,c
  2399  0019E0  D004               	goto	l3158
  2400                           
  2401                           ;doprnt.c: 1393: (putch('-') );
  2402  0019E2  0E2D               	movlw	45
  2403  0019E4  ECD4  F018         	call	_putch
  2404  0019E8  D000               	goto	l3158
  2405  0019EA                     l3158:
  2406                           
  2407                           ;doprnt.c: 1415: if(width)
  2408  0019EA  505C               	movf	printf@width,w,c
  2409  0019EC  105D               	iorwf	printf@width+1,w,c
  2410  0019EE  B4D8               	btfsc	status,2,c
  2411  0019F0  D069               	goto	l3178
  2412  0019F2                     l3160:
  2413                           
  2414                           ;doprnt.c: 1417: (putch('0') );
  2415  0019F2  0E30               	movlw	48
  2416  0019F4  ECD4  F018         	call	_putch
  2417                           
  2418                           ;doprnt.c: 1418: while(--width);
  2419  0019F8  065C               	decf	printf@width,f,c
  2420  0019FA  A0D8               	btfss	status,0,c
  2421  0019FC  065D               	decf	printf@width+1,f,c
  2422  0019FE  505C               	movf	printf@width,w,c
  2423  001A00  105D               	iorwf	printf@width+1,w,c
  2424  001A02  B4D8               	btfsc	status,2,c
  2425  001A04  D05F               	goto	l3178
  2426  001A06  D7F5               	goto	l3160
  2427                           
  2428                           ;doprnt.c: 1420: } else
  2429  001A08  D05D               	goto	l3178
  2430  001A0A                     l3164:
  2431                           
  2432                           ;doprnt.c: 1422: {
  2433                           ;doprnt.c: 1424: if(width
  2434                           ;doprnt.c: 1428: )
  2435  001A0A  505C               	movf	printf@width,w,c
  2436  001A0C  105D               	iorwf	printf@width+1,w,c
  2437  001A0E  B4D8               	btfsc	status,2,c
  2438  001A10  D00C               	goto	l3170
  2439  001A12                     l3166:
  2440                           
  2441                           ;doprnt.c: 1430: (putch(' ') );
  2442  001A12  0E20               	movlw	32
  2443  001A14  ECD4  F018         	call	_putch
  2444                           
  2445                           ;doprnt.c: 1431: while(--width);
  2446  001A18  065C               	decf	printf@width,f,c
  2447  001A1A  A0D8               	btfss	status,0,c
  2448  001A1C  065D               	decf	printf@width+1,f,c
  2449  001A1E  505C               	movf	printf@width,w,c
  2450  001A20  105D               	iorwf	printf@width+1,w,c
  2451  001A22  B4D8               	btfsc	status,2,c
  2452  001A24  D002               	goto	l3170
  2453  001A26  D7F5               	goto	l3166
  2454  001A28  D000               	goto	l3170
  2455  001A2A                     l3170:
  2456                           
  2457                           ;doprnt.c: 1438: if(flag & 0x03)
  2458  001A2A  0E03               	movlw	3
  2459  001A2C  145A               	andwf	printf@flag,w,c
  2460  001A2E  6E45               	movwf	??_printf& (0+255),c
  2461  001A30  0E00               	movlw	0
  2462  001A32  145B               	andwf	printf@flag+1,w,c
  2463  001A34  6E46               	movwf	(??_printf+1)& (0+255),c
  2464  001A36  5045               	movf	??_printf,w,c
  2465  001A38  1046               	iorwf	??_printf+1,w,c
  2466  001A3A  B4D8               	btfsc	status,2,c
  2467  001A3C  D043               	goto	l3178
  2468                           
  2469                           ;doprnt.c: 1439: (putch('-') );
  2470  001A3E  0E2D               	movlw	45
  2471  001A40  ECD4  F018         	call	_putch
  2472                           
  2473                           ;doprnt.c: 1469: }
  2474                           ;doprnt.c: 1474: while(prec--) {
  2475  001A44  D03F               	goto	l3178
  2476  001A46                     l3174:
  2477                           
  2478                           ;doprnt.c: 1478: {
  2479                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2480  001A46  C061  F045         	movff	printf@prec,??_printf
  2481  001A4A  C062  F046         	movff	printf@prec+1,??_printf+1
  2482  001A4E  90D8               	bcf	status,0,c
  2483  001A50  3645               	rlcf	??_printf,f,c
  2484  001A52  3646               	rlcf	??_printf+1,f,c
  2485  001A54  90D8               	bcf	status,0,c
  2486  001A56  3645               	rlcf	??_printf,f,c
  2487  001A58  3646               	rlcf	??_printf+1,f,c
  2488  001A5A  0E01               	movlw	low _dpowers
  2489  001A5C  2445               	addwf	??_printf,w,c
  2490  001A5E  6EF6               	movwf	tblptrl,c
  2491  001A60  0E10               	movlw	high _dpowers
  2492  001A62  2046               	addwfc	??_printf+1,w,c
  2493  001A64  6EF7               	movwf	tblptrh,c
  2494  001A66                     	if	0	;There are less than 3 active tblptr bytes
  2495  001A66                     	endif
  2496  001A66  0009               	tblrd		*+
  2497  001A68  CFF5 F005          	movff	tablat,___lldiv@divisor
  2498  001A6C  0009               	tblrd		*+
  2499  001A6E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2500  001A72  0009               	tblrd		*+
  2501  001A74  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2502  001A78  000A               	tblrd		*-
  2503  001A7A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2504  001A7E  C054  F001         	movff	printf@val,___lldiv@dividend
  2505  001A82  C055  F002         	movff	printf@val+1,___lldiv@dividend+1
  2506  001A86  C056  F003         	movff	printf@val+2,___lldiv@dividend+2
  2507  001A8A  C057  F004         	movff	printf@val+3,___lldiv@dividend+3
  2508  001A8E  EC34  F016         	call	___lldiv	;wreg free
  2509  001A92  C001  F00E         	movff	?___lldiv,___llmod@dividend
  2510  001A96  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  2511  001A9A  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  2512  001A9E  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  2513  001AA2  0E0A               	movlw	10
  2514  001AA4  6E12               	movwf	___llmod@divisor,c
  2515  001AA6  0E00               	movlw	0
  2516  001AA8  6E13               	movwf	___llmod@divisor+1,c
  2517  001AAA  0E00               	movlw	0
  2518  001AAC  6E14               	movwf	___llmod@divisor+2,c
  2519  001AAE  0E00               	movlw	0
  2520  001AB0  6E15               	movwf	___llmod@divisor+3,c
  2521  001AB2  ECBB  F016         	call	___llmod	;wreg free
  2522  001AB6  500E               	movf	?___llmod,w,c
  2523  001AB8  0F30               	addlw	48
  2524  001ABA  6E63               	movwf	printf@c,c
  2525                           
  2526                           ;doprnt.c: 1523: }
  2527                           ;doprnt.c: 1524: (putch(c) );
  2528  001ABC  5063               	movf	printf@c,w,c
  2529  001ABE  ECD4  F018         	call	_putch
  2530  001AC2  D000               	goto	l3178
  2531  001AC4                     l3178:
  2532  001AC4  0661               	decf	printf@prec,f,c
  2533  001AC6  A0D8               	btfss	status,0,c
  2534  001AC8  0662               	decf	printf@prec+1,f,c
  2535  001ACA  2861               	incf	printf@prec,w,c
  2536  001ACC  E1BC               	bnz	l3174
  2537  001ACE  2862               	incf	printf@prec+1,w,c
  2538  001AD0  B4D8               	btfsc	status,2,c
  2539  001AD2  D002               	goto	l3180
  2540  001AD4  D7B8               	goto	l3174
  2541  001AD6  D000               	goto	l3180
  2542  001AD8                     l3180:
  2543  001AD8  C040  FFF6         	movff	printf@f,tblptrl
  2544  001ADC  C041  FFF7         	movff	printf@f+1,tblptrh
  2545  001AE0  4A40               	infsnz	printf@f,f,c
  2546  001AE2  2A41               	incf	printf@f+1,f,c
  2547  001AE4                     	if	0	;tblptru may be non-zero
  2548  001AE4                     	endif
  2549  001AE4                     	if	0	;tblptru may be non-zero
  2550  001AE4                     	endif
  2551  001AE4  0008               	tblrd		*
  2552  001AE6  CFF5 F063          	movff	tablat,printf@c
  2553  001AEA  5063               	movf	printf@c,w,c
  2554  001AEC  B4D8               	btfsc	status,2,c
  2555  001AEE  D003               	goto	l364
  2556  001AF0  EF54  F008         	goto	l2888
  2557  001AF4  D000               	goto	l364
  2558  001AF6                     l364:
  2559  001AF6  0012               	return		;funcret
  2560  001AF8                     __end_of_printf:
  2561                           	opt stack 0
  2562                           tblptru	equ	0xFF8
  2563                           tblptrh	equ	0xFF7
  2564                           tblptrl	equ	0xFF6
  2565                           tablat	equ	0xFF5
  2566                           prodh	equ	0xFF4
  2567                           prodl	equ	0xFF3
  2568                           postinc0	equ	0xFEE
  2569                           wreg	equ	0xFE8
  2570                           postdec1	equ	0xFE5
  2571                           fsr1l	equ	0xFE1
  2572                           postinc2	equ	0xFDE
  2573                           postdec2	equ	0xFDD
  2574                           fsr2h	equ	0xFDA
  2575                           fsr2l	equ	0xFD9
  2576                           status	equ	0xFD8
  2577                           
  2578 ;; *************** function _scale *****************
  2579 ;; Defined at:
  2580 ;;		line 425 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2581 ;; Parameters:    Size  Location     Type
  2582 ;;  scl             1    wreg     char 
  2583 ;; Auto vars:     Size  Location     Type
  2584 ;;  scl             1   41[COMRAM] char 
  2585 ;; Return value:  Size  Location     Type
  2586 ;;                  3   35[COMRAM] char 
  2587 ;; Registers used:
  2588 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2589 ;; Tracked objects:
  2590 ;;		On entry : 0/0
  2591 ;;		On exit  : 0/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2594 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2595 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2597 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2598 ;;Total ram usage:        7 bytes
  2599 ;; Hardware stack levels used:    1
  2600 ;; Hardware stack levels required when called:    2
  2601 ;; This function calls:
  2602 ;;		___awdiv
  2603 ;;		___awmod
  2604 ;;		___ftmul
  2605 ;;		___wmul
  2606 ;; This function is called by:
  2607 ;;		_printf
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           	psect	text2
  2612  001AF8                     __ptext2:
  2613                           	opt stack 0
  2614  001AF8                     _scale:
  2615                           	opt stack 27
  2616                           
  2617                           ;incstack = 0
  2618                           ;scale@scl stored from wreg
  2619  001AF8  6E2A               	movwf	scale@scl,c
  2620                           
  2621                           ;doprnt.c: 428: if(scl < 0) {
  2622  001AFA  AE2A               	btfss	scale@scl,7,c
  2623  001AFC  D0EF               	goto	l2604
  2624                           
  2625                           ;doprnt.c: 429: scl = -scl;
  2626  001AFE  6C2A               	negf	scale@scl,c
  2627                           
  2628                           ;doprnt.c: 430: if(scl>=110)
  2629  001B00  502A               	movf	scale@scl,w,c
  2630  001B02  0A80               	xorlw	128
  2631  001B04  0F12               	addlw	-238
  2632  001B06  A0D8               	btfss	status,0,c
  2633  001B08  D08D               	goto	l2594
  2634                           
  2635                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2636  001B0A  0E00               	movlw	0
  2637  001B0C  6E12               	movwf	___wmul@multiplicand+1,c
  2638  001B0E  0E03               	movlw	3
  2639  001B10  6E11               	movwf	___wmul@multiplicand,c
  2640  001B12  0E00               	movlw	0
  2641  001B14  6E0A               	movwf	___awdiv@divisor+1,c
  2642  001B16  0E0A               	movlw	10
  2643  001B18  6E09               	movwf	___awdiv@divisor,c
  2644  001B1A  0E00               	movlw	0
  2645  001B1C  6E04               	movwf	___awmod@divisor+1,c
  2646  001B1E  0E64               	movlw	100
  2647  001B20  6E03               	movwf	___awmod@divisor,c
  2648  001B22  502A               	movf	scale@scl,w,c
  2649  001B24  6E01               	movwf	___awmod@dividend,c
  2650  001B26  6A02               	clrf	___awmod@dividend+1,c
  2651  001B28  BE01               	btfsc	___awmod@dividend,7,c
  2652  001B2A  0602               	decf	___awmod@dividend+1,f,c
  2653  001B2C  EC7A  F016         	call	___awmod	;wreg free
  2654  001B30  C001  F007         	movff	?___awmod,___awdiv@dividend
  2655  001B34  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2656  001B38  EC53  F015         	call	___awdiv	;wreg free
  2657  001B3C  0E09               	movlw	9
  2658  001B3E  2407               	addwf	?___awdiv,w,c
  2659  001B40  6E0F               	movwf	___wmul@multiplier,c
  2660  001B42  0E00               	movlw	0
  2661  001B44  2008               	addwfc	?___awdiv+1,w,c
  2662  001B46  6E10               	movwf	___wmul@multiplier+1,c
  2663  001B48  EC3A  F018         	call	___wmul	;wreg free
  2664  001B4C  0E29               	movlw	low __npowers_
  2665  001B4E  240F               	addwf	?___wmul,w,c
  2666  001B50  6EF6               	movwf	tblptrl,c
  2667  001B52  0E10               	movlw	high __npowers_
  2668  001B54  2010               	addwfc	?___wmul+1,w,c
  2669  001B56  6EF7               	movwf	tblptrh,c
  2670  001B58                     	if	0	;There are less than 3 active tblptr bytes
  2671  001B58                     	endif
  2672  001B58  0009               	tblrd		*+
  2673  001B5A  CFF5 F018          	movff	tablat,___ftmul@f2
  2674  001B5E  0009               	tblrd		*+
  2675  001B60  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2676  001B64  000A               	tblrd		*-
  2677  001B66  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2678  001B6A  0E00               	movlw	0
  2679  001B6C  6E0A               	movwf	___awdiv@divisor+1,c
  2680  001B6E  0E64               	movlw	100
  2681  001B70  6E09               	movwf	___awdiv@divisor,c
  2682  001B72  502A               	movf	scale@scl,w,c
  2683  001B74  6E07               	movwf	___awdiv@dividend,c
  2684  001B76  6A08               	clrf	___awdiv@dividend+1,c
  2685  001B78  BE07               	btfsc	___awdiv@dividend,7,c
  2686  001B7A  0608               	decf	___awdiv@dividend+1,f,c
  2687  001B7C  EC53  F015         	call	___awdiv	;wreg free
  2688  001B80  0E12               	movlw	18
  2689  001B82  2407               	addwf	?___awdiv,w,c
  2690  001B84  6E0F               	movwf	___wmul@multiplier,c
  2691  001B86  0E00               	movlw	0
  2692  001B88  2008               	addwfc	?___awdiv+1,w,c
  2693  001B8A  6E10               	movwf	___wmul@multiplier+1,c
  2694  001B8C  0E00               	movlw	0
  2695  001B8E  6E12               	movwf	___wmul@multiplicand+1,c
  2696  001B90  0E03               	movlw	3
  2697  001B92  6E11               	movwf	___wmul@multiplicand,c
  2698  001B94  EC3A  F018         	call	___wmul	;wreg free
  2699  001B98  0E29               	movlw	low __npowers_
  2700  001B9A  240F               	addwf	?___wmul,w,c
  2701  001B9C  6EF6               	movwf	tblptrl,c
  2702  001B9E  0E10               	movlw	high __npowers_
  2703  001BA0  2010               	addwfc	?___wmul+1,w,c
  2704  001BA2  6EF7               	movwf	tblptrh,c
  2705  001BA4                     	if	0	;There are less than 3 active tblptr bytes
  2706  001BA4                     	endif
  2707  001BA4  0009               	tblrd		*+
  2708  001BA6  CFF5 F015          	movff	tablat,___ftmul@f1
  2709  001BAA  0009               	tblrd		*+
  2710  001BAC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2711  001BB0  000A               	tblrd		*-
  2712  001BB2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2713  001BB6  EC7D  F012         	call	___ftmul	;wreg free
  2714  001BBA  C015  F027         	movff	?___ftmul,_scale$1703
  2715  001BBE  C016  F028         	movff	?___ftmul+1,_scale$1703+1
  2716  001BC2  C017  F029         	movff	?___ftmul+2,_scale$1703+2
  2717                           
  2718                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2719  001BC6  C027  F015         	movff	_scale$1703,___ftmul@f1
  2720  001BCA  C028  F016         	movff	_scale$1703+1,___ftmul@f1+1
  2721  001BCE  C029  F017         	movff	_scale$1703+2,___ftmul@f1+2
  2722  001BD2  0E00               	movlw	0
  2723  001BD4  6E12               	movwf	___wmul@multiplicand+1,c
  2724  001BD6  0E03               	movlw	3
  2725  001BD8  6E11               	movwf	___wmul@multiplicand,c
  2726  001BDA  0E00               	movlw	0
  2727  001BDC  6E04               	movwf	___awmod@divisor+1,c
  2728  001BDE  0E0A               	movlw	10
  2729  001BE0  6E03               	movwf	___awmod@divisor,c
  2730  001BE2  502A               	movf	scale@scl,w,c
  2731  001BE4  6E01               	movwf	___awmod@dividend,c
  2732  001BE6  6A02               	clrf	___awmod@dividend+1,c
  2733  001BE8  BE01               	btfsc	___awmod@dividend,7,c
  2734  001BEA  0602               	decf	___awmod@dividend+1,f,c
  2735  001BEC  EC7A  F016         	call	___awmod	;wreg free
  2736  001BF0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2737  001BF4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2738  001BF8  EC3A  F018         	call	___wmul	;wreg free
  2739  001BFC  0E29               	movlw	low __npowers_
  2740  001BFE  240F               	addwf	?___wmul,w,c
  2741  001C00  6EF6               	movwf	tblptrl,c
  2742  001C02  0E10               	movlw	high __npowers_
  2743  001C04  2010               	addwfc	?___wmul+1,w,c
  2744  001C06  6EF7               	movwf	tblptrh,c
  2745  001C08                     	if	0	;There are less than 3 active tblptr bytes
  2746  001C08                     	endif
  2747  001C08  0009               	tblrd		*+
  2748  001C0A  CFF5 F018          	movff	tablat,___ftmul@f2
  2749  001C0E  0009               	tblrd		*+
  2750  001C10  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2751  001C14  000A               	tblrd		*-
  2752  001C16  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2753  001C1A  EC7D  F012         	call	___ftmul	;wreg free
  2754  001C1E  D141               	goto	L5
  2755  001C20  D15A               	goto	l254
  2756  001C22  D054               	goto	l2600
  2757  001C24                     l2594:
  2758                           
  2759                           ;doprnt.c: 432: else if(scl > 10)
  2760  001C24  502A               	movf	scale@scl,w,c
  2761  001C26  0A80               	xorlw	128
  2762  001C28  0F75               	addlw	-139
  2763  001C2A  A0D8               	btfss	status,0,c
  2764  001C2C  D04F               	goto	l2600
  2765                           
  2766                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2767  001C2E  0E00               	movlw	0
  2768  001C30  6E0A               	movwf	___awdiv@divisor+1,c
  2769  001C32  0E0A               	movlw	10
  2770  001C34  6E09               	movwf	___awdiv@divisor,c
  2771  001C36  502A               	movf	scale@scl,w,c
  2772  001C38  6E07               	movwf	___awdiv@dividend,c
  2773  001C3A  6A08               	clrf	___awdiv@dividend+1,c
  2774  001C3C  BE07               	btfsc	___awdiv@dividend,7,c
  2775  001C3E  0608               	decf	___awdiv@dividend+1,f,c
  2776  001C40  EC53  F015         	call	___awdiv	;wreg free
  2777  001C44  0E09               	movlw	9
  2778  001C46  2407               	addwf	?___awdiv,w,c
  2779  001C48  6E0F               	movwf	___wmul@multiplier,c
  2780  001C4A  0E00               	movlw	0
  2781  001C4C  2008               	addwfc	?___awdiv+1,w,c
  2782  001C4E  6E10               	movwf	___wmul@multiplier+1,c
  2783  001C50  0E00               	movlw	0
  2784  001C52  6E12               	movwf	___wmul@multiplicand+1,c
  2785  001C54  0E03               	movlw	3
  2786  001C56  6E11               	movwf	___wmul@multiplicand,c
  2787  001C58  EC3A  F018         	call	___wmul	;wreg free
  2788  001C5C  0E29               	movlw	low __npowers_
  2789  001C5E  240F               	addwf	?___wmul,w,c
  2790  001C60  6EF6               	movwf	tblptrl,c
  2791  001C62  0E10               	movlw	high __npowers_
  2792  001C64  2010               	addwfc	?___wmul+1,w,c
  2793  001C66  6EF7               	movwf	tblptrh,c
  2794  001C68                     	if	0	;There are less than 3 active tblptr bytes
  2795  001C68                     	endif
  2796  001C68  0009               	tblrd		*+
  2797  001C6A  CFF5 F015          	movff	tablat,___ftmul@f1
  2798  001C6E  0009               	tblrd		*+
  2799  001C70  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2800  001C74  000A               	tblrd		*-
  2801  001C76  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2802  001C7A  0E00               	movlw	0
  2803  001C7C  6E12               	movwf	___wmul@multiplicand+1,c
  2804  001C7E  0E03               	movlw	3
  2805  001C80  6E11               	movwf	___wmul@multiplicand,c
  2806  001C82  0E00               	movlw	0
  2807  001C84  6E04               	movwf	___awmod@divisor+1,c
  2808  001C86  0E0A               	movlw	10
  2809  001C88  6E03               	movwf	___awmod@divisor,c
  2810  001C8A  502A               	movf	scale@scl,w,c
  2811  001C8C  6E01               	movwf	___awmod@dividend,c
  2812  001C8E  6A02               	clrf	___awmod@dividend+1,c
  2813  001C90  BE01               	btfsc	___awmod@dividend,7,c
  2814  001C92  0602               	decf	___awmod@dividend+1,f,c
  2815  001C94  EC7A  F016         	call	___awmod	;wreg free
  2816  001C98  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2817  001C9C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2818  001CA0  EC3A  F018         	call	___wmul	;wreg free
  2819  001CA4  0E29               	movlw	low __npowers_
  2820  001CA6  240F               	addwf	?___wmul,w,c
  2821  001CA8  6EF6               	movwf	tblptrl,c
  2822  001CAA  0E10               	movlw	high __npowers_
  2823  001CAC  2010               	addwfc	?___wmul+1,w,c
  2824  001CAE  6EF7               	movwf	tblptrh,c
  2825  001CB0                     	if	0	;There are less than 3 active tblptr bytes
  2826  001CB0                     	endif
  2827  001CB0  0009               	tblrd		*+
  2828  001CB2  CFF5 F018          	movff	tablat,___ftmul@f2
  2829  001CB6  0009               	tblrd		*+
  2830  001CB8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2831  001CBC  000A               	tblrd		*-
  2832  001CBE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2833  001CC2  EC7D  F012         	call	___ftmul	;wreg free
  2834  001CC6  D0ED               	goto	L5
  2835  001CC8  D106               	goto	l254
  2836  001CCA  D000               	goto	l2600
  2837  001CCC                     l2600:
  2838                           
  2839                           ;doprnt.c: 434: return _npowers_[scl];
  2840  001CCC  502A               	movf	scale@scl,w,c
  2841  001CCE  0D03               	mullw	3
  2842  001CD0  0E29               	movlw	low __npowers_
  2843  001CD2  24F3               	addwf	prodl,w,c
  2844  001CD4  6EF6               	movwf	tblptrl,c
  2845  001CD6  0E10               	movlw	high __npowers_
  2846  001CD8  D0F2               	goto	L4
  2847  001CDA  D0FD               	goto	l254
  2848  001CDC                     l2604:
  2849                           
  2850                           ;doprnt.c: 435: }
  2851                           ;doprnt.c: 436: if(scl>=110)
  2852  001CDC  502A               	movf	scale@scl,w,c
  2853  001CDE  0A80               	xorlw	128
  2854  001CE0  0F12               	addlw	-238
  2855  001CE2  A0D8               	btfss	status,0,c
  2856  001CE4  D08D               	goto	l2612
  2857                           
  2858                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2859  001CE6  0E00               	movlw	0
  2860  001CE8  6E12               	movwf	___wmul@multiplicand+1,c
  2861  001CEA  0E03               	movlw	3
  2862  001CEC  6E11               	movwf	___wmul@multiplicand,c
  2863  001CEE  0E00               	movlw	0
  2864  001CF0  6E0A               	movwf	___awdiv@divisor+1,c
  2865  001CF2  0E0A               	movlw	10
  2866  001CF4  6E09               	movwf	___awdiv@divisor,c
  2867  001CF6  0E00               	movlw	0
  2868  001CF8  6E04               	movwf	___awmod@divisor+1,c
  2869  001CFA  0E64               	movlw	100
  2870  001CFC  6E03               	movwf	___awmod@divisor,c
  2871  001CFE  502A               	movf	scale@scl,w,c
  2872  001D00  6E01               	movwf	___awmod@dividend,c
  2873  001D02  6A02               	clrf	___awmod@dividend+1,c
  2874  001D04  BE01               	btfsc	___awmod@dividend,7,c
  2875  001D06  0602               	decf	___awmod@dividend+1,f,c
  2876  001D08  EC7A  F016         	call	___awmod	;wreg free
  2877  001D0C  C001  F007         	movff	?___awmod,___awdiv@dividend
  2878  001D10  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2879  001D14  EC53  F015         	call	___awdiv	;wreg free
  2880  001D18  0E09               	movlw	9
  2881  001D1A  2407               	addwf	?___awdiv,w,c
  2882  001D1C  6E0F               	movwf	___wmul@multiplier,c
  2883  001D1E  0E00               	movlw	0
  2884  001D20  2008               	addwfc	?___awdiv+1,w,c
  2885  001D22  6E10               	movwf	___wmul@multiplier+1,c
  2886  001D24  EC3A  F018         	call	___wmul	;wreg free
  2887  001D28  0E50               	movlw	low __powers_
  2888  001D2A  240F               	addwf	?___wmul,w,c
  2889  001D2C  6EF6               	movwf	tblptrl,c
  2890  001D2E  0E10               	movlw	high __powers_
  2891  001D30  2010               	addwfc	?___wmul+1,w,c
  2892  001D32  6EF7               	movwf	tblptrh,c
  2893  001D34                     	if	0	;There are less than 3 active tblptr bytes
  2894  001D34                     	endif
  2895  001D34  0009               	tblrd		*+
  2896  001D36  CFF5 F018          	movff	tablat,___ftmul@f2
  2897  001D3A  0009               	tblrd		*+
  2898  001D3C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2899  001D40  000A               	tblrd		*-
  2900  001D42  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2901  001D46  0E00               	movlw	0
  2902  001D48  6E0A               	movwf	___awdiv@divisor+1,c
  2903  001D4A  0E64               	movlw	100
  2904  001D4C  6E09               	movwf	___awdiv@divisor,c
  2905  001D4E  502A               	movf	scale@scl,w,c
  2906  001D50  6E07               	movwf	___awdiv@dividend,c
  2907  001D52  6A08               	clrf	___awdiv@dividend+1,c
  2908  001D54  BE07               	btfsc	___awdiv@dividend,7,c
  2909  001D56  0608               	decf	___awdiv@dividend+1,f,c
  2910  001D58  EC53  F015         	call	___awdiv	;wreg free
  2911  001D5C  0E12               	movlw	18
  2912  001D5E  2407               	addwf	?___awdiv,w,c
  2913  001D60  6E0F               	movwf	___wmul@multiplier,c
  2914  001D62  0E00               	movlw	0
  2915  001D64  2008               	addwfc	?___awdiv+1,w,c
  2916  001D66  6E10               	movwf	___wmul@multiplier+1,c
  2917  001D68  0E00               	movlw	0
  2918  001D6A  6E12               	movwf	___wmul@multiplicand+1,c
  2919  001D6C  0E03               	movlw	3
  2920  001D6E  6E11               	movwf	___wmul@multiplicand,c
  2921  001D70  EC3A  F018         	call	___wmul	;wreg free
  2922  001D74  0E50               	movlw	low __powers_
  2923  001D76  240F               	addwf	?___wmul,w,c
  2924  001D78  6EF6               	movwf	tblptrl,c
  2925  001D7A  0E10               	movlw	high __powers_
  2926  001D7C  2010               	addwfc	?___wmul+1,w,c
  2927  001D7E  6EF7               	movwf	tblptrh,c
  2928  001D80                     	if	0	;There are less than 3 active tblptr bytes
  2929  001D80                     	endif
  2930  001D80  0009               	tblrd		*+
  2931  001D82  CFF5 F015          	movff	tablat,___ftmul@f1
  2932  001D86  0009               	tblrd		*+
  2933  001D88  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2934  001D8C  000A               	tblrd		*-
  2935  001D8E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2936  001D92  EC7D  F012         	call	___ftmul	;wreg free
  2937  001D96  C015  F027         	movff	?___ftmul,_scale$1703
  2938  001D9A  C016  F028         	movff	?___ftmul+1,_scale$1703+1
  2939  001D9E  C017  F029         	movff	?___ftmul+2,_scale$1703+2
  2940                           
  2941                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2942  001DA2  C027  F015         	movff	_scale$1703,___ftmul@f1
  2943  001DA6  C028  F016         	movff	_scale$1703+1,___ftmul@f1+1
  2944  001DAA  C029  F017         	movff	_scale$1703+2,___ftmul@f1+2
  2945  001DAE  0E00               	movlw	0
  2946  001DB0  6E12               	movwf	___wmul@multiplicand+1,c
  2947  001DB2  0E03               	movlw	3
  2948  001DB4  6E11               	movwf	___wmul@multiplicand,c
  2949  001DB6  0E00               	movlw	0
  2950  001DB8  6E04               	movwf	___awmod@divisor+1,c
  2951  001DBA  0E0A               	movlw	10
  2952  001DBC  6E03               	movwf	___awmod@divisor,c
  2953  001DBE  502A               	movf	scale@scl,w,c
  2954  001DC0  6E01               	movwf	___awmod@dividend,c
  2955  001DC2  6A02               	clrf	___awmod@dividend+1,c
  2956  001DC4  BE01               	btfsc	___awmod@dividend,7,c
  2957  001DC6  0602               	decf	___awmod@dividend+1,f,c
  2958  001DC8  EC7A  F016         	call	___awmod	;wreg free
  2959  001DCC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2960  001DD0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2961  001DD4  EC3A  F018         	call	___wmul	;wreg free
  2962  001DD8  0E50               	movlw	low __powers_
  2963  001DDA  240F               	addwf	?___wmul,w,c
  2964  001DDC  6EF6               	movwf	tblptrl,c
  2965  001DDE  0E10               	movlw	high __powers_
  2966  001DE0  2010               	addwfc	?___wmul+1,w,c
  2967  001DE2  6EF7               	movwf	tblptrh,c
  2968  001DE4                     	if	0	;There are less than 3 active tblptr bytes
  2969  001DE4                     	endif
  2970  001DE4  0009               	tblrd		*+
  2971  001DE6  CFF5 F018          	movff	tablat,___ftmul@f2
  2972  001DEA  0009               	tblrd		*+
  2973  001DEC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2974  001DF0  000A               	tblrd		*-
  2975  001DF2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2976  001DF6  EC7D  F012         	call	___ftmul	;wreg free
  2977  001DFA  D053               	goto	L5
  2978  001DFC  D06C               	goto	l254
  2979  001DFE  D059               	goto	l2618
  2980  001E00                     l2612:
  2981                           
  2982                           ;doprnt.c: 438: else if(scl > 10)
  2983  001E00  502A               	movf	scale@scl,w,c
  2984  001E02  0A80               	xorlw	128
  2985  001E04  0F75               	addlw	-139
  2986  001E06  A0D8               	btfss	status,0,c
  2987  001E08  D054               	goto	l2618
  2988                           
  2989                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2990  001E0A  0E00               	movlw	0
  2991  001E0C  6E0A               	movwf	___awdiv@divisor+1,c
  2992  001E0E  0E0A               	movlw	10
  2993  001E10  6E09               	movwf	___awdiv@divisor,c
  2994  001E12  502A               	movf	scale@scl,w,c
  2995  001E14  6E07               	movwf	___awdiv@dividend,c
  2996  001E16  6A08               	clrf	___awdiv@dividend+1,c
  2997  001E18  BE07               	btfsc	___awdiv@dividend,7,c
  2998  001E1A  0608               	decf	___awdiv@dividend+1,f,c
  2999  001E1C  EC53  F015         	call	___awdiv	;wreg free
  3000  001E20  0E09               	movlw	9
  3001  001E22  2407               	addwf	?___awdiv,w,c
  3002  001E24  6E0F               	movwf	___wmul@multiplier,c
  3003  001E26  0E00               	movlw	0
  3004  001E28  2008               	addwfc	?___awdiv+1,w,c
  3005  001E2A  6E10               	movwf	___wmul@multiplier+1,c
  3006  001E2C  0E00               	movlw	0
  3007  001E2E  6E12               	movwf	___wmul@multiplicand+1,c
  3008  001E30  0E03               	movlw	3
  3009  001E32  6E11               	movwf	___wmul@multiplicand,c
  3010  001E34  EC3A  F018         	call	___wmul	;wreg free
  3011  001E38  0E50               	movlw	low __powers_
  3012  001E3A  240F               	addwf	?___wmul,w,c
  3013  001E3C  6EF6               	movwf	tblptrl,c
  3014  001E3E  0E10               	movlw	high __powers_
  3015  001E40  2010               	addwfc	?___wmul+1,w,c
  3016  001E42  6EF7               	movwf	tblptrh,c
  3017  001E44                     	if	0	;There are less than 3 active tblptr bytes
  3018  001E44                     	endif
  3019  001E44  0009               	tblrd		*+
  3020  001E46  CFF5 F015          	movff	tablat,___ftmul@f1
  3021  001E4A  0009               	tblrd		*+
  3022  001E4C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3023  001E50  000A               	tblrd		*-
  3024  001E52  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3025  001E56  0E00               	movlw	0
  3026  001E58  6E12               	movwf	___wmul@multiplicand+1,c
  3027  001E5A  0E03               	movlw	3
  3028  001E5C  6E11               	movwf	___wmul@multiplicand,c
  3029  001E5E  0E00               	movlw	0
  3030  001E60  6E04               	movwf	___awmod@divisor+1,c
  3031  001E62  0E0A               	movlw	10
  3032  001E64  6E03               	movwf	___awmod@divisor,c
  3033  001E66  502A               	movf	scale@scl,w,c
  3034  001E68  6E01               	movwf	___awmod@dividend,c
  3035  001E6A  6A02               	clrf	___awmod@dividend+1,c
  3036  001E6C  BE01               	btfsc	___awmod@dividend,7,c
  3037  001E6E  0602               	decf	___awmod@dividend+1,f,c
  3038  001E70  EC7A  F016         	call	___awmod	;wreg free
  3039  001E74  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3040  001E78  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3041  001E7C  EC3A  F018         	call	___wmul	;wreg free
  3042  001E80  0E50               	movlw	low __powers_
  3043  001E82  240F               	addwf	?___wmul,w,c
  3044  001E84  6EF6               	movwf	tblptrl,c
  3045  001E86  0E10               	movlw	high __powers_
  3046  001E88  2010               	addwfc	?___wmul+1,w,c
  3047  001E8A  6EF7               	movwf	tblptrh,c
  3048  001E8C                     	if	0	;There are less than 3 active tblptr bytes
  3049  001E8C                     	endif
  3050  001E8C  0009               	tblrd		*+
  3051  001E8E  CFF5 F018          	movff	tablat,___ftmul@f2
  3052  001E92  0009               	tblrd		*+
  3053  001E94  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3054  001E98  000A               	tblrd		*-
  3055  001E9A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3056  001E9E  EC7D  F012         	call	___ftmul	;wreg free
  3057  001EA2                     L5:
  3058  001EA2  C015  F024         	movff	?___ftmul,?_scale
  3059  001EA6  C016  F025         	movff	?___ftmul+1,?_scale+1
  3060  001EAA  C017  F026         	movff	?___ftmul+2,?_scale+2
  3061  001EAE  D013               	goto	l254
  3062  001EB0  D000               	goto	l2618
  3063  001EB2                     l2618:
  3064                           
  3065                           ;doprnt.c: 440: return _powers_[scl];
  3066  001EB2  502A               	movf	scale@scl,w,c
  3067  001EB4  0D03               	mullw	3
  3068  001EB6  0E50               	movlw	low __powers_
  3069  001EB8  24F3               	addwf	prodl,w,c
  3070  001EBA  6EF6               	movwf	tblptrl,c
  3071  001EBC  0E10               	movlw	high __powers_
  3072  001EBE                     L4:
  3073  001EBE  20F4               	addwfc	prodh,w,c
  3074  001EC0  6EF7               	movwf	tblptrh,c
  3075  001EC2                     	if	0	;There are less than 3 active tblptr bytes
  3076  001EC2                     	endif
  3077  001EC2  0009               	tblrd		*+
  3078  001EC4  CFF5 F024          	movff	tablat,?_scale
  3079  001EC8  0009               	tblrd		*+
  3080  001ECA  CFF5 F025          	movff	tablat,?_scale+1
  3081  001ECE  000A               	tblrd		*-
  3082  001ED0  CFF5 F026          	movff	tablat,?_scale+2
  3083  001ED4  D000               	goto	l254
  3084  001ED6                     l254:
  3085  001ED6  0012               	return		;funcret
  3086  001ED8                     __end_of_scale:
  3087                           	opt stack 0
  3088                           tblptru	equ	0xFF8
  3089                           tblptrh	equ	0xFF7
  3090                           tblptrl	equ	0xFF6
  3091                           tablat	equ	0xFF5
  3092                           prodh	equ	0xFF4
  3093                           prodl	equ	0xFF3
  3094                           postinc0	equ	0xFEE
  3095                           wreg	equ	0xFE8
  3096                           postdec1	equ	0xFE5
  3097                           fsr1l	equ	0xFE1
  3098                           postinc2	equ	0xFDE
  3099                           postdec2	equ	0xFDD
  3100                           fsr2h	equ	0xFDA
  3101                           fsr2l	equ	0xFD9
  3102                           status	equ	0xFD8
  3103                           
  3104 ;; *************** function _putch *****************
  3105 ;; Defined at:
  3106 ;;		line 385 in file "Lab7p4.c"
  3107 ;; Parameters:    Size  Location     Type
  3108 ;;  c               1    wreg     unsigned char 
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;  c               1    0[COMRAM] unsigned char 
  3111 ;; Return value:  Size  Location     Type
  3112 ;;		None               void
  3113 ;; Registers used:
  3114 ;;		wreg
  3115 ;; Tracked objects:
  3116 ;;		On entry : 0/0
  3117 ;;		On exit  : 0/0
  3118 ;;		Unchanged: 0/0
  3119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3121 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3123 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3124 ;;Total ram usage:        1 bytes
  3125 ;; Hardware stack levels used:    1
  3126 ;; This function calls:
  3127 ;;		Nothing
  3128 ;; This function is called by:
  3129 ;;		_printf
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133                           	psect	text3
  3134  0031A8                     __ptext3:
  3135                           	opt stack 0
  3136  0031A8                     _putch:
  3137                           	opt stack 29
  3138                           
  3139                           ;incstack = 0
  3140                           ;putch@c stored from wreg
  3141  0031A8  6E01               	movwf	putch@c,c
  3142                           
  3143                           ;Lab7p4.c: 387: while (!TRMT);
  3144  0031AA  D000               	goto	l222
  3145  0031AC                     l222:
  3146  0031AC  A2AC               	btfss	4012,1,c	;volatile
  3147  0031AE  D7FE               	goto	l222
  3148                           
  3149                           ;Lab7p4.c: 388: TXREG = c;
  3150  0031B0  C001  FFAD         	movff	putch@c,4013	;volatile
  3151  0031B4  0012               	return		;funcret
  3152  0031B6                     __end_of_putch:
  3153                           	opt stack 0
  3154                           tblptru	equ	0xFF8
  3155                           tblptrh	equ	0xFF7
  3156                           tblptrl	equ	0xFF6
  3157                           tablat	equ	0xFF5
  3158                           prodh	equ	0xFF4
  3159                           prodl	equ	0xFF3
  3160                           postinc0	equ	0xFEE
  3161                           wreg	equ	0xFE8
  3162                           postdec1	equ	0xFE5
  3163                           fsr1l	equ	0xFE1
  3164                           postinc2	equ	0xFDE
  3165                           postdec2	equ	0xFDD
  3166                           fsr2h	equ	0xFDA
  3167                           fsr2l	equ	0xFD9
  3168                           status	equ	0xFD8
  3169                           
  3170 ;; *************** function _isdigit *****************
  3171 ;; Defined at:
  3172 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3173 ;; Parameters:    Size  Location     Type
  3174 ;;  c               1    wreg     unsigned char 
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;  c               1    2[COMRAM] unsigned char 
  3177 ;; Return value:  Size  Location     Type
  3178 ;;		None               void
  3179 ;; Registers used:
  3180 ;;		wreg, status,2, status,0
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3187 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3188 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3189 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3190 ;;Total ram usage:        3 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; This function calls:
  3193 ;;		Nothing
  3194 ;; This function is called by:
  3195 ;;		_printf
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199                           	psect	text4
  3200  0030E6                     __ptext4:
  3201                           	opt stack 0
  3202  0030E6                     _isdigit:
  3203                           	opt stack 29
  3204                           
  3205                           ;incstack = 0
  3206                           ;isdigit@c stored from wreg
  3207  0030E6  6E03               	movwf	isdigit@c,c
  3208  0030E8  0E00               	movlw	0
  3209  0030EA  6E02               	movwf	_isdigit$1464,c
  3210  0030EC  0E3A               	movlw	58
  3211  0030EE  6003               	cpfslt	isdigit@c,c
  3212  0030F0  D006               	goto	l2630
  3213  0030F2  0E2F               	movlw	47
  3214  0030F4  6403               	cpfsgt	isdigit@c,c
  3215  0030F6  D003               	goto	l2630
  3216  0030F8  0E01               	movlw	1
  3217  0030FA  6E02               	movwf	_isdigit$1464,c
  3218  0030FC  D000               	goto	l2630
  3219  0030FE                     l2630:
  3220  0030FE  C002  F001         	movff	_isdigit$1464,??_isdigit
  3221  003102  3001               	rrcf	??_isdigit,w,c
  3222  003104  D000               	goto	l865
  3223  003106                     l865:
  3224  003106  0012               	return		;funcret
  3225  003108                     __end_of_isdigit:
  3226                           	opt stack 0
  3227                           tblptru	equ	0xFF8
  3228                           tblptrh	equ	0xFF7
  3229                           tblptrl	equ	0xFF6
  3230                           tablat	equ	0xFF5
  3231                           prodh	equ	0xFF4
  3232                           prodl	equ	0xFF3
  3233                           postinc0	equ	0xFEE
  3234                           wreg	equ	0xFE8
  3235                           postdec1	equ	0xFE5
  3236                           fsr1l	equ	0xFE1
  3237                           postinc2	equ	0xFDE
  3238                           postdec2	equ	0xFDD
  3239                           fsr2h	equ	0xFDA
  3240                           fsr2l	equ	0xFD9
  3241                           status	equ	0xFD8
  3242                           
  3243 ;; *************** function _fround *****************
  3244 ;; Defined at:
  3245 ;;		line 409 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  prec            1    wreg     unsigned char 
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;  prec            1   44[COMRAM] unsigned char 
  3250 ;; Return value:  Size  Location     Type
  3251 ;;                  3   35[COMRAM] unsigned char 
  3252 ;; Registers used:
  3253 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3259 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;Total ram usage:       10 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; Hardware stack levels required when called:    2
  3266 ;; This function calls:
  3267 ;;		___awdiv
  3268 ;;		___awmod
  3269 ;;		___ftmul
  3270 ;;		___wmul
  3271 ;; This function is called by:
  3272 ;;		_printf
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text5
  3277  001ED8                     __ptext5:
  3278                           	opt stack 0
  3279  001ED8                     _fround:
  3280                           	opt stack 27
  3281                           
  3282                           ;incstack = 0
  3283                           ;fround@prec stored from wreg
  3284  001ED8  6E2D               	movwf	fround@prec,c
  3285                           
  3286                           ;doprnt.c: 413: if(prec>=110)
  3287  001EDA  0E6D               	movlw	109
  3288  001EDC  642D               	cpfsgt	fround@prec,c
  3289  001EDE  D09B               	goto	l2572
  3290                           
  3291                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3292  001EE0  0E00               	movlw	0
  3293  001EE2  6E12               	movwf	___wmul@multiplicand+1,c
  3294  001EE4  0E03               	movlw	3
  3295  001EE6  6E11               	movwf	___wmul@multiplicand,c
  3296  001EE8  0E00               	movlw	0
  3297  001EEA  6E0A               	movwf	___awdiv@divisor+1,c
  3298  001EEC  0E0A               	movlw	10
  3299  001EEE  6E09               	movwf	___awdiv@divisor,c
  3300  001EF0  0E00               	movlw	0
  3301  001EF2  6E04               	movwf	___awmod@divisor+1,c
  3302  001EF4  0E64               	movlw	100
  3303  001EF6  6E03               	movwf	___awmod@divisor,c
  3304  001EF8  C02D  F001         	movff	fround@prec,___awmod@dividend
  3305  001EFC  6A02               	clrf	___awmod@dividend+1,c
  3306  001EFE  EC7A  F016         	call	___awmod	;wreg free
  3307  001F02  C001  F007         	movff	?___awmod,___awdiv@dividend
  3308  001F06  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3309  001F0A  EC53  F015         	call	___awdiv	;wreg free
  3310  001F0E  0E09               	movlw	9
  3311  001F10  2407               	addwf	?___awdiv,w,c
  3312  001F12  6E0F               	movwf	___wmul@multiplier,c
  3313  001F14  0E00               	movlw	0
  3314  001F16  2008               	addwfc	?___awdiv+1,w,c
  3315  001F18  6E10               	movwf	___wmul@multiplier+1,c
  3316  001F1A  EC3A  F018         	call	___wmul	;wreg free
  3317  001F1E  0E29               	movlw	low __npowers_
  3318  001F20  240F               	addwf	?___wmul,w,c
  3319  001F22  6EF6               	movwf	tblptrl,c
  3320  001F24  0E10               	movlw	high __npowers_
  3321  001F26  2010               	addwfc	?___wmul+1,w,c
  3322  001F28  6EF7               	movwf	tblptrh,c
  3323  001F2A                     	if	0	;There are less than 3 active tblptr bytes
  3324  001F2A                     	endif
  3325  001F2A  0009               	tblrd		*+
  3326  001F2C  CFF5 F018          	movff	tablat,___ftmul@f2
  3327  001F30  0009               	tblrd		*+
  3328  001F32  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3329  001F36  000A               	tblrd		*-
  3330  001F38  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3331  001F3C  0E00               	movlw	0
  3332  001F3E  6E0A               	movwf	___awdiv@divisor+1,c
  3333  001F40  0E64               	movlw	100
  3334  001F42  6E09               	movwf	___awdiv@divisor,c
  3335  001F44  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3336  001F48  6A08               	clrf	___awdiv@dividend+1,c
  3337  001F4A  EC53  F015         	call	___awdiv	;wreg free
  3338  001F4E  0E12               	movlw	18
  3339  001F50  2407               	addwf	?___awdiv,w,c
  3340  001F52  6E0F               	movwf	___wmul@multiplier,c
  3341  001F54  0E00               	movlw	0
  3342  001F56  2008               	addwfc	?___awdiv+1,w,c
  3343  001F58  6E10               	movwf	___wmul@multiplier+1,c
  3344  001F5A  0E00               	movlw	0
  3345  001F5C  6E12               	movwf	___wmul@multiplicand+1,c
  3346  001F5E  0E03               	movlw	3
  3347  001F60  6E11               	movwf	___wmul@multiplicand,c
  3348  001F62  EC3A  F018         	call	___wmul	;wreg free
  3349  001F66  0E29               	movlw	low __npowers_
  3350  001F68  240F               	addwf	?___wmul,w,c
  3351  001F6A  6EF6               	movwf	tblptrl,c
  3352  001F6C  0E10               	movlw	high __npowers_
  3353  001F6E  2010               	addwfc	?___wmul+1,w,c
  3354  001F70  6EF7               	movwf	tblptrh,c
  3355  001F72                     	if	0	;There are less than 3 active tblptr bytes
  3356  001F72                     	endif
  3357  001F72  0009               	tblrd		*+
  3358  001F74  CFF5 F015          	movff	tablat,___ftmul@f1
  3359  001F78  0009               	tblrd		*+
  3360  001F7A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3361  001F7E  000A               	tblrd		*-
  3362  001F80  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3363  001F84  EC7D  F012         	call	___ftmul	;wreg free
  3364  001F88  C015  F02A         	movff	?___ftmul,_fround$1701
  3365  001F8C  C016  F02B         	movff	?___ftmul+1,_fround$1701+1
  3366  001F90  C017  F02C         	movff	?___ftmul+2,_fround$1701+2
  3367                           
  3368                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3369  001F94  0E00               	movlw	0
  3370  001F96  6E12               	movwf	___wmul@multiplicand+1,c
  3371  001F98  0E03               	movlw	3
  3372  001F9A  6E11               	movwf	___wmul@multiplicand,c
  3373  001F9C  0E00               	movlw	0
  3374  001F9E  6E04               	movwf	___awmod@divisor+1,c
  3375  001FA0  0E0A               	movlw	10
  3376  001FA2  6E03               	movwf	___awmod@divisor,c
  3377  001FA4  C02D  F001         	movff	fround@prec,___awmod@dividend
  3378  001FA8  6A02               	clrf	___awmod@dividend+1,c
  3379  001FAA  EC7A  F016         	call	___awmod	;wreg free
  3380  001FAE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3381  001FB2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3382  001FB6  EC3A  F018         	call	___wmul	;wreg free
  3383  001FBA  0E29               	movlw	low __npowers_
  3384  001FBC  240F               	addwf	?___wmul,w,c
  3385  001FBE  6EF6               	movwf	tblptrl,c
  3386  001FC0  0E10               	movlw	high __npowers_
  3387  001FC2  2010               	addwfc	?___wmul+1,w,c
  3388  001FC4  6EF7               	movwf	tblptrh,c
  3389  001FC6                     	if	0	;There are less than 3 active tblptr bytes
  3390  001FC6                     	endif
  3391  001FC6  0009               	tblrd		*+
  3392  001FC8  CFF5 F018          	movff	tablat,___ftmul@f2
  3393  001FCC  0009               	tblrd		*+
  3394  001FCE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3395  001FD2  000A               	tblrd		*-
  3396  001FD4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3397  001FD8  C02A  F015         	movff	_fround$1701,___ftmul@f1
  3398  001FDC  C02B  F016         	movff	_fround$1701+1,___ftmul@f1+1
  3399  001FE0  C02C  F017         	movff	_fround$1701+2,___ftmul@f1+2
  3400  001FE4  EC7D  F012         	call	___ftmul	;wreg free
  3401  001FE8  C015  F027         	movff	?___ftmul,_fround$1702
  3402  001FEC  C016  F028         	movff	?___ftmul+1,_fround$1702+1
  3403  001FF0  C017  F029         	movff	?___ftmul+2,_fround$1702+2
  3404                           
  3405                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3406  001FF4  C027  F015         	movff	_fround$1702,___ftmul@f1
  3407  001FF8  C028  F016         	movff	_fround$1702+1,___ftmul@f1+1
  3408  001FFC  C029  F017         	movff	_fround$1702+2,___ftmul@f1+2
  3409  002000  0E00               	movlw	0
  3410  002002  6E18               	movwf	___ftmul@f2,c
  3411  002004  0E00               	movlw	0
  3412  002006  6E19               	movwf	___ftmul@f2+1,c
  3413  002008  0E3F               	movlw	63
  3414  00200A  6E1A               	movwf	___ftmul@f2+2,c
  3415  00200C  EC7D  F012         	call	___ftmul	;wreg free
  3416  002010  D07D               	goto	L7
  3417  002012  D083               	goto	l247
  3418  002014  D062               	goto	l2580
  3419  002016                     l2572:
  3420                           
  3421                           ;doprnt.c: 415: else if(prec > 10)
  3422  002016  0E0A               	movlw	10
  3423  002018  642D               	cpfsgt	fround@prec,c
  3424  00201A  D05F               	goto	l2580
  3425                           
  3426                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3427  00201C  0E00               	movlw	0
  3428  00201E  6E12               	movwf	___wmul@multiplicand+1,c
  3429  002020  0E03               	movlw	3
  3430  002022  6E11               	movwf	___wmul@multiplicand,c
  3431  002024  0E00               	movlw	0
  3432  002026  6E04               	movwf	___awmod@divisor+1,c
  3433  002028  0E0A               	movlw	10
  3434  00202A  6E03               	movwf	___awmod@divisor,c
  3435  00202C  C02D  F001         	movff	fround@prec,___awmod@dividend
  3436  002030  6A02               	clrf	___awmod@dividend+1,c
  3437  002032  EC7A  F016         	call	___awmod	;wreg free
  3438  002036  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3439  00203A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3440  00203E  EC3A  F018         	call	___wmul	;wreg free
  3441  002042  0E29               	movlw	low __npowers_
  3442  002044  240F               	addwf	?___wmul,w,c
  3443  002046  6EF6               	movwf	tblptrl,c
  3444  002048  0E10               	movlw	high __npowers_
  3445  00204A  2010               	addwfc	?___wmul+1,w,c
  3446  00204C  6EF7               	movwf	tblptrh,c
  3447  00204E                     	if	0	;There are less than 3 active tblptr bytes
  3448  00204E                     	endif
  3449  00204E  0009               	tblrd		*+
  3450  002050  CFF5 F018          	movff	tablat,___ftmul@f2
  3451  002054  0009               	tblrd		*+
  3452  002056  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3453  00205A  000A               	tblrd		*-
  3454  00205C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3455  002060  0E00               	movlw	0
  3456  002062  6E0A               	movwf	___awdiv@divisor+1,c
  3457  002064  0E0A               	movlw	10
  3458  002066  6E09               	movwf	___awdiv@divisor,c
  3459  002068  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3460  00206C  6A08               	clrf	___awdiv@dividend+1,c
  3461  00206E  EC53  F015         	call	___awdiv	;wreg free
  3462  002072  0E09               	movlw	9
  3463  002074  2407               	addwf	?___awdiv,w,c
  3464  002076  6E0F               	movwf	___wmul@multiplier,c
  3465  002078  0E00               	movlw	0
  3466  00207A  2008               	addwfc	?___awdiv+1,w,c
  3467  00207C  6E10               	movwf	___wmul@multiplier+1,c
  3468  00207E  0E00               	movlw	0
  3469  002080  6E12               	movwf	___wmul@multiplicand+1,c
  3470  002082  0E03               	movlw	3
  3471  002084  6E11               	movwf	___wmul@multiplicand,c
  3472  002086  EC3A  F018         	call	___wmul	;wreg free
  3473  00208A  0E29               	movlw	low __npowers_
  3474  00208C  240F               	addwf	?___wmul,w,c
  3475  00208E  6EF6               	movwf	tblptrl,c
  3476  002090  0E10               	movlw	high __npowers_
  3477  002092  2010               	addwfc	?___wmul+1,w,c
  3478  002094  6EF7               	movwf	tblptrh,c
  3479  002096                     	if	0	;There are less than 3 active tblptr bytes
  3480  002096                     	endif
  3481  002096  0009               	tblrd		*+
  3482  002098  CFF5 F015          	movff	tablat,___ftmul@f1
  3483  00209C  0009               	tblrd		*+
  3484  00209E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3485  0020A2  000A               	tblrd		*-
  3486  0020A4  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3487  0020A8  EC7D  F012         	call	___ftmul	;wreg free
  3488  0020AC  C015  F02A         	movff	?___ftmul,_fround$1701
  3489  0020B0  C016  F02B         	movff	?___ftmul+1,_fround$1701+1
  3490  0020B4  C017  F02C         	movff	?___ftmul+2,_fround$1701+2
  3491                           
  3492                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3493  0020B8  C02A  F015         	movff	_fround$1701,___ftmul@f1
  3494  0020BC  C02B  F016         	movff	_fround$1701+1,___ftmul@f1+1
  3495  0020C0  C02C  F017         	movff	_fround$1701+2,___ftmul@f1+2
  3496  0020C4  0E00               	movlw	0
  3497  0020C6  6E18               	movwf	___ftmul@f2,c
  3498  0020C8  0E00               	movlw	0
  3499  0020CA  6E19               	movwf	___ftmul@f2+1,c
  3500  0020CC  0E3F               	movlw	63
  3501  0020CE  6E1A               	movwf	___ftmul@f2+2,c
  3502  0020D0  EC7D  F012         	call	___ftmul	;wreg free
  3503  0020D4  D01B               	goto	L7
  3504  0020D6  D021               	goto	l247
  3505  0020D8  D000               	goto	l2580
  3506  0020DA                     l2580:
  3507                           
  3508                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3509  0020DA  502D               	movf	fround@prec,w,c
  3510  0020DC  0D03               	mullw	3
  3511  0020DE  0E29               	movlw	low __npowers_
  3512  0020E0  24F3               	addwf	prodl,w,c
  3513  0020E2  6EF6               	movwf	tblptrl,c
  3514  0020E4  0E10               	movlw	high __npowers_
  3515  0020E6  20F4               	addwfc	prodh,w,c
  3516  0020E8  6EF7               	movwf	tblptrh,c
  3517  0020EA                     	if	0	;There are less than 3 active tblptr bytes
  3518  0020EA                     	endif
  3519  0020EA  0009               	tblrd		*+
  3520  0020EC  CFF5 F015          	movff	tablat,___ftmul@f1
  3521  0020F0  0009               	tblrd		*+
  3522  0020F2  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3523  0020F6  000A               	tblrd		*-
  3524  0020F8  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3525  0020FC  0E00               	movlw	0
  3526  0020FE  6E18               	movwf	___ftmul@f2,c
  3527  002100  0E00               	movlw	0
  3528  002102  6E19               	movwf	___ftmul@f2+1,c
  3529  002104  0E3F               	movlw	63
  3530  002106  6E1A               	movwf	___ftmul@f2+2,c
  3531  002108  EC7D  F012         	call	___ftmul	;wreg free
  3532  00210C                     L7:
  3533  00210C  C015  F024         	movff	?___ftmul,?_fround
  3534  002110  C016  F025         	movff	?___ftmul+1,?_fround+1
  3535  002114  C017  F026         	movff	?___ftmul+2,?_fround+2
  3536  002118  D000               	goto	l247
  3537  00211A                     l247:
  3538  00211A  0012               	return		;funcret
  3539  00211C                     __end_of_fround:
  3540                           	opt stack 0
  3541                           tblptru	equ	0xFF8
  3542                           tblptrh	equ	0xFF7
  3543                           tblptrl	equ	0xFF6
  3544                           tablat	equ	0xFF5
  3545                           prodh	equ	0xFF4
  3546                           prodl	equ	0xFF3
  3547                           postinc0	equ	0xFEE
  3548                           wreg	equ	0xFE8
  3549                           postdec1	equ	0xFE5
  3550                           fsr1l	equ	0xFE1
  3551                           postinc2	equ	0xFDE
  3552                           postdec2	equ	0xFDD
  3553                           fsr2h	equ	0xFDA
  3554                           fsr2l	equ	0xFD9
  3555                           status	equ	0xFD8
  3556                           
  3557 ;; *************** function ___wmul *****************
  3558 ;; Defined at:
  3559 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\Umul16.c"
  3560 ;; Parameters:    Size  Location     Type
  3561 ;;  multiplier      2   14[COMRAM] unsigned int 
  3562 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3563 ;; Auto vars:     Size  Location     Type
  3564 ;;  product         2   18[COMRAM] unsigned int 
  3565 ;; Return value:  Size  Location     Type
  3566 ;;                  2   14[COMRAM] unsigned int 
  3567 ;; Registers used:
  3568 ;;		wreg, status,2, status,0, prodl, prodh
  3569 ;; Tracked objects:
  3570 ;;		On entry : 0/0
  3571 ;;		On exit  : 0/0
  3572 ;;		Unchanged: 0/0
  3573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3574 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;Total ram usage:        6 bytes
  3579 ;; Hardware stack levels used:    1
  3580 ;; This function calls:
  3581 ;;		Nothing
  3582 ;; This function is called by:
  3583 ;;		_main
  3584 ;;		_fround
  3585 ;;		_scale
  3586 ;;		_printf
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           	psect	text6
  3591  003074                     __ptext6:
  3592                           	opt stack 0
  3593  003074                     ___wmul:
  3594                           	opt stack 28
  3595                           
  3596                           ;incstack = 0
  3597  003074  500F               	movf	___wmul@multiplier,w,c
  3598  003076  0211               	mulwf	___wmul@multiplicand,c
  3599  003078  CFF3 F013          	movff	prodl,___wmul@product
  3600  00307C  CFF4 F014          	movff	prodh,___wmul@product+1
  3601  003080  500F               	movf	___wmul@multiplier,w,c
  3602  003082  0212               	mulwf	___wmul@multiplicand+1,c
  3603  003084  50F3               	movf	prodl,w,c
  3604  003086  2614               	addwf	___wmul@product+1,f,c
  3605  003088  5010               	movf	___wmul@multiplier+1,w,c
  3606  00308A  0211               	mulwf	___wmul@multiplicand,c
  3607  00308C  50F3               	movf	prodl,w,c
  3608  00308E  2614               	addwf	___wmul@product+1,f,c
  3609  003090  C013  F00F         	movff	___wmul@product,?___wmul
  3610  003094  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3611  003098  D000               	goto	l400
  3612  00309A                     l400:
  3613  00309A  0012               	return		;funcret
  3614  00309C                     __end_of___wmul:
  3615                           	opt stack 0
  3616                           tblptru	equ	0xFF8
  3617                           tblptrh	equ	0xFF7
  3618                           tblptrl	equ	0xFF6
  3619                           tablat	equ	0xFF5
  3620                           prodh	equ	0xFF4
  3621                           prodl	equ	0xFF3
  3622                           postinc0	equ	0xFEE
  3623                           wreg	equ	0xFE8
  3624                           postdec1	equ	0xFE5
  3625                           fsr1l	equ	0xFE1
  3626                           postinc2	equ	0xFDE
  3627                           postdec2	equ	0xFDD
  3628                           fsr2h	equ	0xFDA
  3629                           fsr2l	equ	0xFD9
  3630                           status	equ	0xFD8
  3631                           
  3632 ;; *************** function ___ftmul *****************
  3633 ;; Defined at:
  3634 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftmul.c"
  3635 ;; Parameters:    Size  Location     Type
  3636 ;;  f1              3   20[COMRAM] float 
  3637 ;;  f2              3   23[COMRAM] float 
  3638 ;; Auto vars:     Size  Location     Type
  3639 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3640 ;;  sign            1   34[COMRAM] unsigned char 
  3641 ;;  cntr            1   33[COMRAM] unsigned char 
  3642 ;;  exp             1   29[COMRAM] unsigned char 
  3643 ;; Return value:  Size  Location     Type
  3644 ;;                  3   20[COMRAM] float 
  3645 ;; Registers used:
  3646 ;;		wreg, status,2, status,0, cstack
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3652 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3654 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3655 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;Total ram usage:       15 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:    1
  3659 ;; This function calls:
  3660 ;;		___ftpack
  3661 ;; This function is called by:
  3662 ;;		_fround
  3663 ;;		_scale
  3664 ;;		_printf
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           	psect	text7
  3669  0024FA                     __ptext7:
  3670                           	opt stack 0
  3671  0024FA                     ___ftmul:
  3672                           	opt stack 27
  3673                           
  3674                           ;incstack = 0
  3675  0024FA  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3676  0024FE  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3677  002500  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3678  002502  3416               	rlcf	___ftmul@f1+1,w,c
  3679  002504  361B               	rlcf	??___ftmul& (0+255),f,c
  3680  002506  E301               	bnc	u2131
  3681  002508  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3682  00250A                     u2131:
  3683  00250A  501B               	movf	??___ftmul,w,c
  3684  00250C  6E1E               	movwf	___ftmul@exp,c
  3685  00250E  501E               	movf	___ftmul@exp,w,c
  3686  002510  A4D8               	btfss	status,2,c
  3687  002512  D002               	goto	l2342
  3688  002514  D00E               	goto	l2344
  3689  002516  D06C               	goto	l829
  3690  002518                     l2342:
  3691  002518  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3692  00251C  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3693  00251E  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3694  002520  3419               	rlcf	___ftmul@f2+1,w,c
  3695  002522  361B               	rlcf	??___ftmul& (0+255),f,c
  3696  002524  E301               	bnc	u2151
  3697  002526  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3698  002528                     u2151:
  3699  002528  501B               	movf	??___ftmul,w,c
  3700  00252A  6E23               	movwf	___ftmul@sign,c
  3701  00252C  5023               	movf	___ftmul@sign,w,c
  3702  00252E  A4D8               	btfss	status,2,c
  3703  002530  D007               	goto	l2348
  3704  002532                     l2344:
  3705  002532  0E00               	movlw	0
  3706  002534  6E15               	movwf	?___ftmul,c
  3707  002536  0E00               	movlw	0
  3708  002538  6E16               	movwf	?___ftmul+1,c
  3709  00253A  0E00               	movlw	0
  3710  00253C  6E17               	movwf	?___ftmul+2,c
  3711  00253E  D058               	goto	l829
  3712  002540                     l2348:
  3713  002540  5023               	movf	___ftmul@sign,w,c
  3714  002542  0F7B               	addlw	123
  3715  002544  261E               	addwf	___ftmul@exp,f,c
  3716  002546  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3717  00254A  501A               	movf	___ftmul@f2+2,w,c
  3718  00254C  1A23               	xorwf	___ftmul@sign,f,c
  3719  00254E  0E80               	movlw	128
  3720  002550  1623               	andwf	___ftmul@sign,f,c
  3721  002552  8E16               	bsf	___ftmul@f1+1,7,c
  3722  002554  8E19               	bsf	___ftmul@f2+1,7,c
  3723  002556  0EFF               	movlw	255
  3724  002558  1618               	andwf	___ftmul@f2,f,c
  3725  00255A  0EFF               	movlw	255
  3726  00255C  1619               	andwf	___ftmul@f2+1,f,c
  3727  00255E  0E00               	movlw	0
  3728  002560  161A               	andwf	___ftmul@f2+2,f,c
  3729  002562  0E00               	movlw	0
  3730  002564  6E1F               	movwf	___ftmul@f3_as_product,c
  3731  002566  0E00               	movlw	0
  3732  002568  6E20               	movwf	___ftmul@f3_as_product+1,c
  3733  00256A  0E00               	movlw	0
  3734  00256C  6E21               	movwf	___ftmul@f3_as_product+2,c
  3735  00256E  0E07               	movlw	7
  3736  002570  6E22               	movwf	___ftmul@cntr,c
  3737  002572  D000               	goto	l2362
  3738  002574                     l2362:
  3739  002574  A015               	btfss	___ftmul@f1,0,c
  3740  002576  D007               	goto	l2366
  3741  002578  5018               	movf	___ftmul@f2,w,c
  3742  00257A  261F               	addwf	___ftmul@f3_as_product,f,c
  3743  00257C  5019               	movf	___ftmul@f2+1,w,c
  3744  00257E  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3745  002580  501A               	movf	___ftmul@f2+2,w,c
  3746  002582  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3747  002584  D000               	goto	l2366
  3748  002586                     l2366:
  3749  002586  90D8               	bcf	status,0,c
  3750  002588  3217               	rrcf	___ftmul@f1+2,f,c
  3751  00258A  3216               	rrcf	___ftmul@f1+1,f,c
  3752  00258C  3215               	rrcf	___ftmul@f1,f,c
  3753  00258E  90D8               	bcf	status,0,c
  3754  002590  3618               	rlcf	___ftmul@f2,f,c
  3755  002592  3619               	rlcf	___ftmul@f2+1,f,c
  3756  002594  361A               	rlcf	___ftmul@f2+2,f,c
  3757  002596  2E22               	decfsz	___ftmul@cntr,f,c
  3758  002598  D7ED               	goto	l2362
  3759  00259A  D000               	goto	l2370
  3760  00259C                     l2370:
  3761  00259C  0E09               	movlw	9
  3762  00259E  6E22               	movwf	___ftmul@cntr,c
  3763  0025A0  D000               	goto	l2372
  3764  0025A2                     l2372:
  3765  0025A2  A015               	btfss	___ftmul@f1,0,c
  3766  0025A4  D007               	goto	l2376
  3767  0025A6  5018               	movf	___ftmul@f2,w,c
  3768  0025A8  261F               	addwf	___ftmul@f3_as_product,f,c
  3769  0025AA  5019               	movf	___ftmul@f2+1,w,c
  3770  0025AC  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3771  0025AE  501A               	movf	___ftmul@f2+2,w,c
  3772  0025B0  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3773  0025B2  D000               	goto	l2376
  3774  0025B4                     l2376:
  3775  0025B4  90D8               	bcf	status,0,c
  3776  0025B6  3217               	rrcf	___ftmul@f1+2,f,c
  3777  0025B8  3216               	rrcf	___ftmul@f1+1,f,c
  3778  0025BA  3215               	rrcf	___ftmul@f1,f,c
  3779  0025BC  90D8               	bcf	status,0,c
  3780  0025BE  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3781  0025C0  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3782  0025C2  321F               	rrcf	___ftmul@f3_as_product,f,c
  3783  0025C4  2E22               	decfsz	___ftmul@cntr,f,c
  3784  0025C6  D7ED               	goto	l2372
  3785  0025C8  D000               	goto	l2380
  3786  0025CA                     l2380:
  3787  0025CA  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3788  0025CE  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3789  0025D2  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3790  0025D6  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3791  0025DA  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3792  0025DE  EC49  F014         	call	___ftpack	;wreg free
  3793  0025E2  C001  F015         	movff	?___ftpack,?___ftmul
  3794  0025E6  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3795  0025EA  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3796  0025EE  D000               	goto	l829
  3797  0025F0                     l829:
  3798  0025F0  0012               	return		;funcret
  3799  0025F2                     __end_of___ftmul:
  3800                           	opt stack 0
  3801                           tblptru	equ	0xFF8
  3802                           tblptrh	equ	0xFF7
  3803                           tblptrl	equ	0xFF6
  3804                           tablat	equ	0xFF5
  3805                           prodh	equ	0xFF4
  3806                           prodl	equ	0xFF3
  3807                           postinc0	equ	0xFEE
  3808                           wreg	equ	0xFE8
  3809                           postdec1	equ	0xFE5
  3810                           fsr1l	equ	0xFE1
  3811                           postinc2	equ	0xFDE
  3812                           postdec2	equ	0xFDD
  3813                           fsr2h	equ	0xFDA
  3814                           fsr2l	equ	0xFD9
  3815                           status	equ	0xFD8
  3816                           
  3817 ;; *************** function ___awmod *****************
  3818 ;; Defined at:
  3819 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awmod.c"
  3820 ;; Parameters:    Size  Location     Type
  3821 ;;  dividend        2    0[COMRAM] int 
  3822 ;;  divisor         2    2[COMRAM] int 
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;  sign            1    5[COMRAM] unsigned char 
  3825 ;;  counter         1    4[COMRAM] unsigned char 
  3826 ;; Return value:  Size  Location     Type
  3827 ;;                  2    0[COMRAM] int 
  3828 ;; Registers used:
  3829 ;;		wreg, status,2, status,0
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3835 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3839 ;;Total ram usage:        6 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; This function calls:
  3842 ;;		Nothing
  3843 ;; This function is called by:
  3844 ;;		_fround
  3845 ;;		_scale
  3846 ;; This function uses a non-reentrant model
  3847 ;;
  3848                           
  3849                           	psect	text8
  3850  002CF4                     __ptext8:
  3851                           	opt stack 0
  3852  002CF4                     ___awmod:
  3853                           	opt stack 28
  3854                           
  3855                           ;incstack = 0
  3856  002CF4  0E00               	movlw	0
  3857  002CF6  6E06               	movwf	___awmod@sign,c
  3858  002CF8  AE02               	btfss	___awmod@dividend+1,7,c
  3859  002CFA  D007               	goto	l2436
  3860  002CFC  6C01               	negf	___awmod@dividend,c
  3861  002CFE  1E02               	comf	___awmod@dividend+1,f,c
  3862  002D00  B0D8               	btfsc	status,0,c
  3863  002D02  2A02               	incf	___awmod@dividend+1,f,c
  3864  002D04  0E01               	movlw	1
  3865  002D06  6E06               	movwf	___awmod@sign,c
  3866  002D08  D000               	goto	l2436
  3867  002D0A                     l2436:
  3868  002D0A  AE04               	btfss	___awmod@divisor+1,7,c
  3869  002D0C  D005               	goto	l2440
  3870  002D0E  6C03               	negf	___awmod@divisor,c
  3871  002D10  1E04               	comf	___awmod@divisor+1,f,c
  3872  002D12  B0D8               	btfsc	status,0,c
  3873  002D14  2A04               	incf	___awmod@divisor+1,f,c
  3874  002D16  D000               	goto	l2440
  3875  002D18                     l2440:
  3876  002D18  5003               	movf	___awmod@divisor,w,c
  3877  002D1A  1004               	iorwf	___awmod@divisor+1,w,c
  3878  002D1C  B4D8               	btfsc	status,2,c
  3879  002D1E  D01D               	goto	l2456
  3880  002D20  0E01               	movlw	1
  3881  002D22  6E05               	movwf	___awmod@counter,c
  3882  002D24  D005               	goto	l2446
  3883  002D26                     l2444:
  3884  002D26  90D8               	bcf	status,0,c
  3885  002D28  3603               	rlcf	___awmod@divisor,f,c
  3886  002D2A  3604               	rlcf	___awmod@divisor+1,f,c
  3887  002D2C  2A05               	incf	___awmod@counter,f,c
  3888  002D2E  D000               	goto	l2446
  3889  002D30                     l2446:
  3890  002D30  BE04               	btfsc	___awmod@divisor+1,7,c
  3891  002D32  D002               	goto	l2448
  3892  002D34  D7F8               	goto	l2444
  3893  002D36  D000               	goto	l2448
  3894  002D38                     l2448:
  3895  002D38  5003               	movf	___awmod@divisor,w,c
  3896  002D3A  5C01               	subwf	___awmod@dividend,w,c
  3897  002D3C  5004               	movf	___awmod@divisor+1,w,c
  3898  002D3E  5802               	subwfb	___awmod@dividend+1,w,c
  3899  002D40  A0D8               	btfss	status,0,c
  3900  002D42  D005               	goto	l2452
  3901  002D44  5003               	movf	___awmod@divisor,w,c
  3902  002D46  5E01               	subwf	___awmod@dividend,f,c
  3903  002D48  5004               	movf	___awmod@divisor+1,w,c
  3904  002D4A  5A02               	subwfb	___awmod@dividend+1,f,c
  3905  002D4C  D000               	goto	l2452
  3906  002D4E                     l2452:
  3907  002D4E  90D8               	bcf	status,0,c
  3908  002D50  3204               	rrcf	___awmod@divisor+1,f,c
  3909  002D52  3203               	rrcf	___awmod@divisor,f,c
  3910  002D54  2E05               	decfsz	___awmod@counter,f,c
  3911  002D56  D7F0               	goto	l2448
  3912  002D58  D000               	goto	l2456
  3913  002D5A                     l2456:
  3914  002D5A  5006               	movf	___awmod@sign,w,c
  3915  002D5C  B4D8               	btfsc	status,2,c
  3916  002D5E  D005               	goto	l2460
  3917  002D60  6C01               	negf	___awmod@dividend,c
  3918  002D62  1E02               	comf	___awmod@dividend+1,f,c
  3919  002D64  B0D8               	btfsc	status,0,c
  3920  002D66  2A02               	incf	___awmod@dividend+1,f,c
  3921  002D68  D000               	goto	l2460
  3922  002D6A                     l2460:
  3923  002D6A  C001  F001         	movff	___awmod@dividend,?___awmod
  3924  002D6E  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3925  002D72  D000               	goto	l606
  3926  002D74                     l606:
  3927  002D74  0012               	return		;funcret
  3928  002D76                     __end_of___awmod:
  3929                           	opt stack 0
  3930                           tblptru	equ	0xFF8
  3931                           tblptrh	equ	0xFF7
  3932                           tblptrl	equ	0xFF6
  3933                           tablat	equ	0xFF5
  3934                           prodh	equ	0xFF4
  3935                           prodl	equ	0xFF3
  3936                           postinc0	equ	0xFEE
  3937                           wreg	equ	0xFE8
  3938                           postdec1	equ	0xFE5
  3939                           fsr1l	equ	0xFE1
  3940                           postinc2	equ	0xFDE
  3941                           postdec2	equ	0xFDD
  3942                           fsr2h	equ	0xFDA
  3943                           fsr2l	equ	0xFD9
  3944                           status	equ	0xFD8
  3945                           
  3946 ;; *************** function ___awdiv *****************
  3947 ;; Defined at:
  3948 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3949 ;; Parameters:    Size  Location     Type
  3950 ;;  dividend        2    6[COMRAM] int 
  3951 ;;  divisor         2    8[COMRAM] int 
  3952 ;; Auto vars:     Size  Location     Type
  3953 ;;  quotient        2   12[COMRAM] int 
  3954 ;;  sign            1   11[COMRAM] unsigned char 
  3955 ;;  counter         1   10[COMRAM] unsigned char 
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  2    6[COMRAM] int 
  3958 ;; Registers used:
  3959 ;;		wreg, status,2, status,0
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3965 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3966 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3968 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3969 ;;Total ram usage:        8 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; This function calls:
  3972 ;;		Nothing
  3973 ;; This function is called by:
  3974 ;;		_fround
  3975 ;;		_scale
  3976 ;;		_printf
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           	psect	text9
  3981  002AA6                     __ptext9:
  3982                           	opt stack 0
  3983  002AA6                     ___awdiv:
  3984                           	opt stack 28
  3985                           
  3986                           ;incstack = 0
  3987  002AA6  0E00               	movlw	0
  3988  002AA8  6E0C               	movwf	___awdiv@sign,c
  3989  002AAA  AE0A               	btfss	___awdiv@divisor+1,7,c
  3990  002AAC  D007               	goto	l2392
  3991  002AAE  6C09               	negf	___awdiv@divisor,c
  3992  002AB0  1E0A               	comf	___awdiv@divisor+1,f,c
  3993  002AB2  B0D8               	btfsc	status,0,c
  3994  002AB4  2A0A               	incf	___awdiv@divisor+1,f,c
  3995  002AB6  0E01               	movlw	1
  3996  002AB8  6E0C               	movwf	___awdiv@sign,c
  3997  002ABA  D000               	goto	l2392
  3998  002ABC                     l2392:
  3999  002ABC  AE08               	btfss	___awdiv@dividend+1,7,c
  4000  002ABE  D007               	goto	l2398
  4001  002AC0  6C07               	negf	___awdiv@dividend,c
  4002  002AC2  1E08               	comf	___awdiv@dividend+1,f,c
  4003  002AC4  B0D8               	btfsc	status,0,c
  4004  002AC6  2A08               	incf	___awdiv@dividend+1,f,c
  4005  002AC8  0E01               	movlw	1
  4006  002ACA  1A0C               	xorwf	___awdiv@sign,f,c
  4007  002ACC  D000               	goto	l2398
  4008  002ACE                     l2398:
  4009  002ACE  0E00               	movlw	0
  4010  002AD0  6E0E               	movwf	___awdiv@quotient+1,c
  4011  002AD2  0E00               	movlw	0
  4012  002AD4  6E0D               	movwf	___awdiv@quotient,c
  4013  002AD6  5009               	movf	___awdiv@divisor,w,c
  4014  002AD8  100A               	iorwf	___awdiv@divisor+1,w,c
  4015  002ADA  B4D8               	btfsc	status,2,c
  4016  002ADC  D021               	goto	l2420
  4017  002ADE  0E01               	movlw	1
  4018  002AE0  6E0B               	movwf	___awdiv@counter,c
  4019  002AE2  D005               	goto	l2406
  4020  002AE4                     l2404:
  4021  002AE4  90D8               	bcf	status,0,c
  4022  002AE6  3609               	rlcf	___awdiv@divisor,f,c
  4023  002AE8  360A               	rlcf	___awdiv@divisor+1,f,c
  4024  002AEA  2A0B               	incf	___awdiv@counter,f,c
  4025  002AEC  D000               	goto	l2406
  4026  002AEE                     l2406:
  4027  002AEE  BE0A               	btfsc	___awdiv@divisor+1,7,c
  4028  002AF0  D002               	goto	l2408
  4029  002AF2  D7F8               	goto	l2404
  4030  002AF4  D000               	goto	l2408
  4031  002AF6                     l2408:
  4032  002AF6  90D8               	bcf	status,0,c
  4033  002AF8  360D               	rlcf	___awdiv@quotient,f,c
  4034  002AFA  360E               	rlcf	___awdiv@quotient+1,f,c
  4035  002AFC  5009               	movf	___awdiv@divisor,w,c
  4036  002AFE  5C07               	subwf	___awdiv@dividend,w,c
  4037  002B00  500A               	movf	___awdiv@divisor+1,w,c
  4038  002B02  5808               	subwfb	___awdiv@dividend+1,w,c
  4039  002B04  A0D8               	btfss	status,0,c
  4040  002B06  D006               	goto	l2416
  4041  002B08  5009               	movf	___awdiv@divisor,w,c
  4042  002B0A  5E07               	subwf	___awdiv@dividend,f,c
  4043  002B0C  500A               	movf	___awdiv@divisor+1,w,c
  4044  002B0E  5A08               	subwfb	___awdiv@dividend+1,f,c
  4045  002B10  800D               	bsf	___awdiv@quotient,0,c
  4046  002B12  D000               	goto	l2416
  4047  002B14                     l2416:
  4048  002B14  90D8               	bcf	status,0,c
  4049  002B16  320A               	rrcf	___awdiv@divisor+1,f,c
  4050  002B18  3209               	rrcf	___awdiv@divisor,f,c
  4051  002B1A  2E0B               	decfsz	___awdiv@counter,f,c
  4052  002B1C  D7EC               	goto	l2408
  4053  002B1E  D000               	goto	l2420
  4054  002B20                     l2420:
  4055  002B20  500C               	movf	___awdiv@sign,w,c
  4056  002B22  B4D8               	btfsc	status,2,c
  4057  002B24  D005               	goto	l2424
  4058  002B26  6C0D               	negf	___awdiv@quotient,c
  4059  002B28  1E0E               	comf	___awdiv@quotient+1,f,c
  4060  002B2A  B0D8               	btfsc	status,0,c
  4061  002B2C  2A0E               	incf	___awdiv@quotient+1,f,c
  4062  002B2E  D000               	goto	l2424
  4063  002B30                     l2424:
  4064  002B30  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4065  002B34  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4066  002B38  D000               	goto	l593
  4067  002B3A                     l593:
  4068  002B3A  0012               	return		;funcret
  4069  002B3C                     __end_of___awdiv:
  4070                           	opt stack 0
  4071                           tblptru	equ	0xFF8
  4072                           tblptrh	equ	0xFF7
  4073                           tblptrl	equ	0xFF6
  4074                           tablat	equ	0xFF5
  4075                           prodh	equ	0xFF4
  4076                           prodl	equ	0xFF3
  4077                           postinc0	equ	0xFEE
  4078                           wreg	equ	0xFE8
  4079                           postdec1	equ	0xFE5
  4080                           fsr1l	equ	0xFE1
  4081                           postinc2	equ	0xFDE
  4082                           postdec2	equ	0xFDD
  4083                           fsr2h	equ	0xFDA
  4084                           fsr2l	equ	0xFD9
  4085                           status	equ	0xFD8
  4086                           
  4087 ;; *************** function __tdiv_to_l_ *****************
  4088 ;; Defined at:
  4089 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;  f1              3    0[COMRAM] float 
  4092 ;;  f2              3    3[COMRAM] float 
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;  quot            4    9[COMRAM] unsigned long 
  4095 ;;  exp1            1   14[COMRAM] unsigned char 
  4096 ;;  cntr            1   13[COMRAM] unsigned char 
  4097 ;; Return value:  Size  Location     Type
  4098 ;;                  4    0[COMRAM] unsigned long 
  4099 ;; Registers used:
  4100 ;;		wreg, status,2, status,0
  4101 ;; Tracked objects:
  4102 ;;		On entry : 0/0
  4103 ;;		On exit  : 0/0
  4104 ;;		Unchanged: 0/0
  4105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4106 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4108 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4109 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4110 ;;Total ram usage:       15 bytes
  4111 ;; Hardware stack levels used:    1
  4112 ;; This function calls:
  4113 ;;		Nothing
  4114 ;; This function is called by:
  4115 ;;		_printf
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           	psect	text10
  4120  0022E0                     __ptext10:
  4121                           	opt stack 0
  4122  0022E0                     __tdiv_to_l_:
  4123                           	opt stack 29
  4124                           
  4125                           ;incstack = 0
  4126  0022E0  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4127  0022E4  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4128  0022E6  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4129  0022E8  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4130  0022EA  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4131  0022EC  E301               	bnc	u2571
  4132  0022EE  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4133  0022F0                     u2571:
  4134  0022F0  5007               	movf	??__tdiv_to_l_,w,c
  4135  0022F2  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4136  0022F4  500F               	movf	__tdiv_to_l_@exp1,w,c
  4137  0022F6  A4D8               	btfss	status,2,c
  4138  0022F8  D002               	goto	l2640
  4139  0022FA  D05D               	goto	l2682
  4140  0022FC  D078               	goto	l805
  4141  0022FE                     l2640:
  4142  0022FE  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4143  002302  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4144  002304  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4145  002306  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4146  002308  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4147  00230A  E301               	bnc	u2591
  4148  00230C  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4149  00230E                     u2591:
  4150  00230E  5007               	movf	??__tdiv_to_l_,w,c
  4151  002310  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4152  002312  500E               	movf	__tdiv_to_l_@cntr,w,c
  4153  002314  A4D8               	btfss	status,2,c
  4154  002316  D002               	goto	l2646
  4155  002318  D04E               	goto	l2682
  4156  00231A  D069               	goto	l805
  4157  00231C                     l2646:
  4158  00231C  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4159  00231E  0EFF               	movlw	255
  4160  002320  1601               	andwf	__tdiv_to_l_@f1,f,c
  4161  002322  0EFF               	movlw	255
  4162  002324  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4163  002326  0E00               	movlw	0
  4164  002328  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4165  00232A  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4166  00232C  0EFF               	movlw	255
  4167  00232E  1604               	andwf	__tdiv_to_l_@f2,f,c
  4168  002330  0EFF               	movlw	255
  4169  002332  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4170  002334  0E00               	movlw	0
  4171  002336  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4172  002338  0E00               	movlw	0
  4173  00233A  6E0A               	movwf	__tdiv_to_l_@quot,c
  4174  00233C  0E00               	movlw	0
  4175  00233E  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4176  002340  0E00               	movlw	0
  4177  002342  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4178  002344  0E00               	movlw	0
  4179  002346  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4180  002348  0E7F               	movlw	127
  4181  00234A  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4182  00234C  500E               	movf	__tdiv_to_l_@cntr,w,c
  4183  00234E  0F98               	addlw	152
  4184  002350  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4185  002352  0E18               	movlw	24
  4186  002354  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4187  002356                     l807:
  4188  002356  90D8               	bcf	status,0,c
  4189  002358  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4190  00235A  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4191  00235C  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4192  00235E  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4193  002360  5004               	movf	__tdiv_to_l_@f2,w,c
  4194  002362  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4195  002364  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4196  002366  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4197  002368  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4198  00236A  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4199  00236C  A0D8               	btfss	status,0,c
  4200  00236E  D007               	goto	l808
  4201  002370  5004               	movf	__tdiv_to_l_@f2,w,c
  4202  002372  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4203  002374  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4204  002376  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4205  002378  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4206  00237A  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4207  00237C  800A               	bsf	__tdiv_to_l_@quot,0,c
  4208  00237E                     l808:
  4209  00237E  90D8               	bcf	status,0,c
  4210  002380  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4211  002382  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4212  002384  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4213  002386  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4214  002388  D7E6               	goto	l807
  4215  00238A  D000               	goto	l2668
  4216  00238C                     l2668:
  4217  00238C  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4218  00238E  D010               	goto	l2680
  4219  002390  500F               	movf	__tdiv_to_l_@exp1,w,c
  4220  002392  0A80               	xorlw	128
  4221  002394  0F97               	addlw	151
  4222  002396  B0D8               	btfsc	status,0,c
  4223  002398  D003               	goto	l2676
  4224  00239A  D00D               	goto	l2682
  4225  00239C  D028               	goto	l805
  4226  00239E  D000               	goto	l2676
  4227  0023A0                     l2676:
  4228  0023A0  90D8               	bcf	status,0,c
  4229  0023A2  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4230  0023A4  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4231  0023A6  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4232  0023A8  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4233  0023AA  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4234  0023AC  D7F9               	goto	l2676
  4235  0023AE  D017               	goto	l814
  4236  0023B0                     l2680:
  4237  0023B0  0E17               	movlw	23
  4238  0023B2  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4239  0023B4  D011               	goto	l2688
  4240  0023B6                     l2682:
  4241  0023B6  0E00               	movlw	0
  4242  0023B8  6E01               	movwf	?__tdiv_to_l_,c
  4243  0023BA  0E00               	movlw	0
  4244  0023BC  6E02               	movwf	?__tdiv_to_l_+1,c
  4245  0023BE  0E00               	movlw	0
  4246  0023C0  6E03               	movwf	?__tdiv_to_l_+2,c
  4247  0023C2  0E00               	movlw	0
  4248  0023C4  6E04               	movwf	?__tdiv_to_l_+3,c
  4249  0023C6  D013               	goto	l805
  4250  0023C8  D007               	goto	l2688
  4251  0023CA                     l2686:
  4252  0023CA  90D8               	bcf	status,0,c
  4253  0023CC  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4254  0023CE  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4255  0023D0  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4256  0023D2  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4257  0023D4  060F               	decf	__tdiv_to_l_@exp1,f,c
  4258  0023D6  D000               	goto	l2688
  4259  0023D8                     l2688:
  4260  0023D8  500F               	movf	__tdiv_to_l_@exp1,w,c
  4261  0023DA  A4D8               	btfss	status,2,c
  4262  0023DC  D7F6               	goto	l2686
  4263  0023DE                     l814:
  4264  0023DE  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4265  0023E2  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4266  0023E6  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4267  0023EA  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4268  0023EE                     l805:
  4269  0023EE  0012               	return		;funcret
  4270  0023F0                     __end_of__tdiv_to_l_:
  4271                           	opt stack 0
  4272                           tblptru	equ	0xFF8
  4273                           tblptrh	equ	0xFF7
  4274                           tblptrl	equ	0xFF6
  4275                           tablat	equ	0xFF5
  4276                           prodh	equ	0xFF4
  4277                           prodl	equ	0xFF3
  4278                           postinc0	equ	0xFEE
  4279                           wreg	equ	0xFE8
  4280                           postdec1	equ	0xFE5
  4281                           fsr1l	equ	0xFE1
  4282                           postinc2	equ	0xFDE
  4283                           postdec2	equ	0xFDD
  4284                           fsr2h	equ	0xFDA
  4285                           fsr2l	equ	0xFD9
  4286                           status	equ	0xFD8
  4287                           
  4288 ;; *************** function __div_to_l_ *****************
  4289 ;; Defined at:
  4290 ;;		line 60 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fldivl.c"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;  f1              3    0[COMRAM] unsigned long 
  4293 ;;  f2              3    3[COMRAM] unsigned long 
  4294 ;; Auto vars:     Size  Location     Type
  4295 ;;  quot            4    6[COMRAM] unsigned long 
  4296 ;;  exp1            1   11[COMRAM] unsigned char 
  4297 ;;  cntr            1   10[COMRAM] unsigned char 
  4298 ;; Return value:  Size  Location     Type
  4299 ;;                  4    0[COMRAM] unsigned long 
  4300 ;; Registers used:
  4301 ;;		wreg, status,2, status,0
  4302 ;; Tracked objects:
  4303 ;;		On entry : 0/0
  4304 ;;		On exit  : 0/0
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4307 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4308 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4310 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4311 ;;Total ram usage:       12 bytes
  4312 ;; Hardware stack levels used:    1
  4313 ;; This function calls:
  4314 ;;		Nothing
  4315 ;; This function is called by:
  4316 ;;		_printf
  4317 ;; This function uses a non-reentrant model
  4318 ;;
  4319                           
  4320                           	psect	text11
  4321  0023F0                     __ptext11:
  4322                           	opt stack 0
  4323  0023F0                     __div_to_l_:
  4324                           	opt stack 29
  4325                           
  4326                           ;incstack = 0
  4327  0023F0  3403               	rlcf	__div_to_l_@f1+2,w,c
  4328  0023F2  3404               	rlcf	__div_to_l_@f1+3,w,c
  4329  0023F4  6E0C               	movwf	__div_to_l_@exp1,c
  4330  0023F6  500C               	movf	__div_to_l_@exp1,w,c
  4331  0023F8  A4D8               	btfss	status,2,c
  4332  0023FA  D002               	goto	l2696
  4333  0023FC  D061               	goto	l2742
  4334  0023FE  D07C               	goto	l684
  4335  002400                     l2696:
  4336  002400  3406               	rlcf	__div_to_l_@f2+2,w,c
  4337  002402  3407               	rlcf	__div_to_l_@f2+3,w,c
  4338  002404  6E0B               	movwf	__div_to_l_@cntr,c
  4339  002406  500B               	movf	__div_to_l_@cntr,w,c
  4340  002408  A4D8               	btfss	status,2,c
  4341  00240A  D002               	goto	l2702
  4342  00240C  D059               	goto	l2742
  4343  00240E  D074               	goto	l684
  4344  002410                     l2702:
  4345  002410  8E03               	bsf	__div_to_l_@f1+2,7,c
  4346  002412  0EFF               	movlw	255
  4347  002414  1601               	andwf	__div_to_l_@f1,f,c
  4348  002416  0EFF               	movlw	255
  4349  002418  1602               	andwf	__div_to_l_@f1+1,f,c
  4350  00241A  0EFF               	movlw	255
  4351  00241C  1603               	andwf	__div_to_l_@f1+2,f,c
  4352  00241E  0E00               	movlw	0
  4353  002420  1604               	andwf	__div_to_l_@f1+3,f,c
  4354  002422  8E06               	bsf	__div_to_l_@f2+2,7,c
  4355  002424  0EFF               	movlw	255
  4356  002426  1604               	andwf	__div_to_l_@f2,f,c
  4357  002428  0EFF               	movlw	255
  4358  00242A  1605               	andwf	__div_to_l_@f2+1,f,c
  4359  00242C  0EFF               	movlw	255
  4360  00242E  1606               	andwf	__div_to_l_@f2+2,f,c
  4361  002430  0E00               	movlw	0
  4362  002432  1607               	andwf	__div_to_l_@f2+3,f,c
  4363  002434  0E00               	movlw	0
  4364  002436  6E07               	movwf	__div_to_l_@quot,c
  4365  002438  0E00               	movlw	0
  4366  00243A  6E08               	movwf	__div_to_l_@quot+1,c
  4367  00243C  0E00               	movlw	0
  4368  00243E  6E09               	movwf	__div_to_l_@quot+2,c
  4369  002440  0E00               	movlw	0
  4370  002442  6E0A               	movwf	__div_to_l_@quot+3,c
  4371  002444  0E7F               	movlw	127
  4372  002446  5E0C               	subwf	__div_to_l_@exp1,f,c
  4373  002448  500B               	movf	__div_to_l_@cntr,w,c
  4374  00244A  0FA0               	addlw	160
  4375  00244C  5E0C               	subwf	__div_to_l_@exp1,f,c
  4376  00244E  0E20               	movlw	32
  4377  002450  6E0B               	movwf	__div_to_l_@cntr,c
  4378  002452  D000               	goto	l2716
  4379  002454                     l2716:
  4380  002454  90D8               	bcf	status,0,c
  4381  002456  3607               	rlcf	__div_to_l_@quot,f,c
  4382  002458  3608               	rlcf	__div_to_l_@quot+1,f,c
  4383  00245A  3609               	rlcf	__div_to_l_@quot+2,f,c
  4384  00245C  360A               	rlcf	__div_to_l_@quot+3,f,c
  4385  00245E  5004               	movf	__div_to_l_@f2,w,c
  4386  002460  5C01               	subwf	__div_to_l_@f1,w,c
  4387  002462  5005               	movf	__div_to_l_@f2+1,w,c
  4388  002464  5802               	subwfb	__div_to_l_@f1+1,w,c
  4389  002466  5006               	movf	__div_to_l_@f2+2,w,c
  4390  002468  5803               	subwfb	__div_to_l_@f1+2,w,c
  4391  00246A  5007               	movf	__div_to_l_@f2+3,w,c
  4392  00246C  5804               	subwfb	__div_to_l_@f1+3,w,c
  4393  00246E  A0D8               	btfss	status,0,c
  4394  002470  D00A               	goto	l2724
  4395  002472  5004               	movf	__div_to_l_@f2,w,c
  4396  002474  5E01               	subwf	__div_to_l_@f1,f,c
  4397  002476  5005               	movf	__div_to_l_@f2+1,w,c
  4398  002478  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4399  00247A  5006               	movf	__div_to_l_@f2+2,w,c
  4400  00247C  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4401  00247E  5007               	movf	__div_to_l_@f2+3,w,c
  4402  002480  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4403  002482  8007               	bsf	__div_to_l_@quot,0,c
  4404  002484  D000               	goto	l2724
  4405  002486                     l2724:
  4406  002486  90D8               	bcf	status,0,c
  4407  002488  3601               	rlcf	__div_to_l_@f1,f,c
  4408  00248A  3602               	rlcf	__div_to_l_@f1+1,f,c
  4409  00248C  3603               	rlcf	__div_to_l_@f1+2,f,c
  4410  00248E  3604               	rlcf	__div_to_l_@f1+3,f,c
  4411  002490  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4412  002492  D7E0               	goto	l2716
  4413  002494  D000               	goto	l2728
  4414  002496                     l2728:
  4415  002496  AE0C               	btfss	__div_to_l_@exp1,7,c
  4416  002498  D010               	goto	l2740
  4417  00249A  500C               	movf	__div_to_l_@exp1,w,c
  4418  00249C  0A80               	xorlw	128
  4419  00249E  0F9F               	addlw	159
  4420  0024A0  B0D8               	btfsc	status,0,c
  4421  0024A2  D003               	goto	l2736
  4422  0024A4  D00D               	goto	l2742
  4423  0024A6  D028               	goto	l684
  4424  0024A8  D000               	goto	l2736
  4425  0024AA                     l2736:
  4426  0024AA  90D8               	bcf	status,0,c
  4427  0024AC  320A               	rrcf	__div_to_l_@quot+3,f,c
  4428  0024AE  3209               	rrcf	__div_to_l_@quot+2,f,c
  4429  0024B0  3208               	rrcf	__div_to_l_@quot+1,f,c
  4430  0024B2  3207               	rrcf	__div_to_l_@quot,f,c
  4431  0024B4  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4432  0024B6  D7F9               	goto	l2736
  4433  0024B8  D017               	goto	l693
  4434  0024BA                     l2740:
  4435  0024BA  0E1F               	movlw	31
  4436  0024BC  640C               	cpfsgt	__div_to_l_@exp1,c
  4437  0024BE  D011               	goto	l2748
  4438  0024C0                     l2742:
  4439  0024C0  0E00               	movlw	0
  4440  0024C2  6E01               	movwf	?__div_to_l_,c
  4441  0024C4  0E00               	movlw	0
  4442  0024C6  6E02               	movwf	?__div_to_l_+1,c
  4443  0024C8  0E00               	movlw	0
  4444  0024CA  6E03               	movwf	?__div_to_l_+2,c
  4445  0024CC  0E00               	movlw	0
  4446  0024CE  6E04               	movwf	?__div_to_l_+3,c
  4447  0024D0  D013               	goto	l684
  4448  0024D2  D007               	goto	l2748
  4449  0024D4                     l2746:
  4450  0024D4  90D8               	bcf	status,0,c
  4451  0024D6  3607               	rlcf	__div_to_l_@quot,f,c
  4452  0024D8  3608               	rlcf	__div_to_l_@quot+1,f,c
  4453  0024DA  3609               	rlcf	__div_to_l_@quot+2,f,c
  4454  0024DC  360A               	rlcf	__div_to_l_@quot+3,f,c
  4455  0024DE  060C               	decf	__div_to_l_@exp1,f,c
  4456  0024E0  D000               	goto	l2748
  4457  0024E2                     l2748:
  4458  0024E2  500C               	movf	__div_to_l_@exp1,w,c
  4459  0024E4  A4D8               	btfss	status,2,c
  4460  0024E6  D7F6               	goto	l2746
  4461  0024E8                     l693:
  4462  0024E8  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4463  0024EC  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4464  0024F0  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4465  0024F4  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4466  0024F8                     l684:
  4467  0024F8  0012               	return		;funcret
  4468  0024FA                     __end_of__div_to_l_:
  4469                           	opt stack 0
  4470                           tblptru	equ	0xFF8
  4471                           tblptrh	equ	0xFF7
  4472                           tblptrl	equ	0xFF6
  4473                           tablat	equ	0xFF5
  4474                           prodh	equ	0xFF4
  4475                           prodl	equ	0xFF3
  4476                           postinc0	equ	0xFEE
  4477                           wreg	equ	0xFE8
  4478                           postdec1	equ	0xFE5
  4479                           fsr1l	equ	0xFE1
  4480                           postinc2	equ	0xFDE
  4481                           postdec2	equ	0xFDD
  4482                           fsr2h	equ	0xFDA
  4483                           fsr2l	equ	0xFD9
  4484                           status	equ	0xFD8
  4485                           
  4486 ;; *************** function ___lltoft *****************
  4487 ;; Defined at:
  4488 ;;		line 35 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lltoft.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;  c               4    8[COMRAM] unsigned long 
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;  exp             1   16[COMRAM] unsigned char 
  4493 ;; Return value:  Size  Location     Type
  4494 ;;                  3    8[COMRAM] float 
  4495 ;; Registers used:
  4496 ;;		wreg, status,2, status,0, cstack
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4502 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4503 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4504 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4505 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4506 ;;Total ram usage:        9 bytes
  4507 ;; Hardware stack levels used:    1
  4508 ;; Hardware stack levels required when called:    1
  4509 ;; This function calls:
  4510 ;;		___ftpack
  4511 ;; This function is called by:
  4512 ;;		_printf
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           	psect	text12
  4517  002E56                     __ptext12:
  4518                           	opt stack 0
  4519  002E56                     ___lltoft:
  4520                           	opt stack 28
  4521                           
  4522                           ;incstack = 0
  4523  002E56  0E8E               	movlw	142
  4524  002E58  6E11               	movwf	___lltoft@exp,c
  4525  002E5A  D007               	goto	l2868
  4526  002E5C                     l2866:
  4527  002E5C  90D8               	bcf	status,0,c
  4528  002E5E  320C               	rrcf	___lltoft@c+3,f,c
  4529  002E60  320B               	rrcf	___lltoft@c+2,f,c
  4530  002E62  320A               	rrcf	___lltoft@c+1,f,c
  4531  002E64  3209               	rrcf	___lltoft@c,f,c
  4532  002E66  2A11               	incf	___lltoft@exp,f,c
  4533  002E68  D000               	goto	l2868
  4534  002E6A                     l2868:
  4535  002E6A  0E00               	movlw	0
  4536  002E6C  1409               	andwf	___lltoft@c,w,c
  4537  002E6E  6E0D               	movwf	??___lltoft& (0+255),c
  4538  002E70  0E00               	movlw	0
  4539  002E72  140A               	andwf	___lltoft@c+1,w,c
  4540  002E74  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4541  002E76  0E00               	movlw	0
  4542  002E78  140B               	andwf	___lltoft@c+2,w,c
  4543  002E7A  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4544  002E7C  0EFF               	movlw	255
  4545  002E7E  140C               	andwf	___lltoft@c+3,w,c
  4546  002E80  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4547  002E82  500D               	movf	??___lltoft,w,c
  4548  002E84  100E               	iorwf	??___lltoft+1,w,c
  4549  002E86  100F               	iorwf	??___lltoft+2,w,c
  4550  002E88  1010               	iorwf	??___lltoft+3,w,c
  4551  002E8A  A4D8               	btfss	status,2,c
  4552  002E8C  D7E7               	goto	l2866
  4553  002E8E  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4554  002E92  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4555  002E96  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4556  002E9A  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4557  002E9E  0E00               	movlw	0
  4558  002EA0  6E05               	movwf	___ftpack@sign,c
  4559  002EA2  EC49  F014         	call	___ftpack	;wreg free
  4560  002EA6  C001  F009         	movff	?___ftpack,?___lltoft
  4561  002EAA  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4562  002EAE  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4563  002EB2  D000               	goto	l924
  4564  002EB4                     l924:
  4565  002EB4  0012               	return		;funcret
  4566  002EB6                     __end_of___lltoft:
  4567                           	opt stack 0
  4568                           tblptru	equ	0xFF8
  4569                           tblptrh	equ	0xFF7
  4570                           tblptrl	equ	0xFF6
  4571                           tablat	equ	0xFF5
  4572                           prodh	equ	0xFF4
  4573                           prodl	equ	0xFF3
  4574                           postinc0	equ	0xFEE
  4575                           wreg	equ	0xFE8
  4576                           postdec1	equ	0xFE5
  4577                           fsr1l	equ	0xFE1
  4578                           postinc2	equ	0xFDE
  4579                           postdec2	equ	0xFDD
  4580                           fsr2h	equ	0xFDA
  4581                           fsr2l	equ	0xFD9
  4582                           status	equ	0xFD8
  4583                           
  4584 ;; *************** function ___llmod *****************
  4585 ;; Defined at:
  4586 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\llmod.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;  dividend        4   13[COMRAM] unsigned long 
  4589 ;;  divisor         4   17[COMRAM] unsigned long 
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;  counter         1   21[COMRAM] unsigned char 
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  4   13[COMRAM] unsigned long 
  4594 ;; Registers used:
  4595 ;;		wreg, status,2, status,0
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4601 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;Total ram usage:        9 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; This function calls:
  4608 ;;		Nothing
  4609 ;; This function is called by:
  4610 ;;		_printf
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           	psect	text13
  4615  002D76                     __ptext13:
  4616                           	opt stack 0
  4617  002D76                     ___llmod:
  4618                           	opt stack 29
  4619                           
  4620                           ;incstack = 0
  4621  002D76  5012               	movf	___llmod@divisor,w,c
  4622  002D78  1013               	iorwf	___llmod@divisor+1,w,c
  4623  002D7A  1014               	iorwf	___llmod@divisor+2,w,c
  4624  002D7C  1015               	iorwf	___llmod@divisor+3,w,c
  4625  002D7E  B4D8               	btfsc	status,2,c
  4626  002D80  D029               	goto	l904
  4627  002D82  0E01               	movlw	1
  4628  002D84  6E16               	movwf	___llmod@counter,c
  4629  002D86  D007               	goto	l2854
  4630  002D88                     l2852:
  4631  002D88  90D8               	bcf	status,0,c
  4632  002D8A  3612               	rlcf	___llmod@divisor,f,c
  4633  002D8C  3613               	rlcf	___llmod@divisor+1,f,c
  4634  002D8E  3614               	rlcf	___llmod@divisor+2,f,c
  4635  002D90  3615               	rlcf	___llmod@divisor+3,f,c
  4636  002D92  2A16               	incf	___llmod@counter,f,c
  4637  002D94  D000               	goto	l2854
  4638  002D96                     l2854:
  4639  002D96  BE15               	btfsc	___llmod@divisor+3,7,c
  4640  002D98  D002               	goto	l2856
  4641  002D9A  D7F6               	goto	l2852
  4642  002D9C  D000               	goto	l2856
  4643  002D9E                     l2856:
  4644  002D9E  5012               	movf	___llmod@divisor,w,c
  4645  002DA0  5C0E               	subwf	___llmod@dividend,w,c
  4646  002DA2  5013               	movf	___llmod@divisor+1,w,c
  4647  002DA4  580F               	subwfb	___llmod@dividend+1,w,c
  4648  002DA6  5014               	movf	___llmod@divisor+2,w,c
  4649  002DA8  5810               	subwfb	___llmod@dividend+2,w,c
  4650  002DAA  5015               	movf	___llmod@divisor+3,w,c
  4651  002DAC  5811               	subwfb	___llmod@dividend+3,w,c
  4652  002DAE  A0D8               	btfss	status,0,c
  4653  002DB0  D009               	goto	l2860
  4654  002DB2  5012               	movf	___llmod@divisor,w,c
  4655  002DB4  5E0E               	subwf	___llmod@dividend,f,c
  4656  002DB6  5013               	movf	___llmod@divisor+1,w,c
  4657  002DB8  5A0F               	subwfb	___llmod@dividend+1,f,c
  4658  002DBA  5014               	movf	___llmod@divisor+2,w,c
  4659  002DBC  5A10               	subwfb	___llmod@dividend+2,f,c
  4660  002DBE  5015               	movf	___llmod@divisor+3,w,c
  4661  002DC0  5A11               	subwfb	___llmod@dividend+3,f,c
  4662  002DC2  D000               	goto	l2860
  4663  002DC4                     l2860:
  4664  002DC4  90D8               	bcf	status,0,c
  4665  002DC6  3215               	rrcf	___llmod@divisor+3,f,c
  4666  002DC8  3214               	rrcf	___llmod@divisor+2,f,c
  4667  002DCA  3213               	rrcf	___llmod@divisor+1,f,c
  4668  002DCC  3212               	rrcf	___llmod@divisor,f,c
  4669  002DCE  2E16               	decfsz	___llmod@counter,f,c
  4670  002DD0  D7E6               	goto	l2856
  4671  002DD2  D000               	goto	l904
  4672  002DD4                     l904:
  4673  002DD4  C00E  F00E         	movff	___llmod@dividend,?___llmod
  4674  002DD8  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  4675  002DDC  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  4676  002DE0  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  4677  002DE4  0012               	return		;funcret
  4678  002DE6                     __end_of___llmod:
  4679                           	opt stack 0
  4680                           tblptru	equ	0xFF8
  4681                           tblptrh	equ	0xFF7
  4682                           tblptrl	equ	0xFF6
  4683                           tablat	equ	0xFF5
  4684                           prodh	equ	0xFF4
  4685                           prodl	equ	0xFF3
  4686                           postinc0	equ	0xFEE
  4687                           wreg	equ	0xFE8
  4688                           postdec1	equ	0xFE5
  4689                           fsr1l	equ	0xFE1
  4690                           postinc2	equ	0xFDE
  4691                           postdec2	equ	0xFDD
  4692                           fsr2h	equ	0xFDA
  4693                           fsr2l	equ	0xFD9
  4694                           status	equ	0xFD8
  4695                           
  4696 ;; *************** function ___lldiv *****************
  4697 ;; Defined at:
  4698 ;;		line 8 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\lldiv.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;  dividend        4    0[COMRAM] unsigned long 
  4701 ;;  divisor         4    4[COMRAM] unsigned long 
  4702 ;; Auto vars:     Size  Location     Type
  4703 ;;  quotient        4    8[COMRAM] unsigned long 
  4704 ;;  counter         1   12[COMRAM] unsigned char 
  4705 ;; Return value:  Size  Location     Type
  4706 ;;                  4    0[COMRAM] unsigned long 
  4707 ;; Registers used:
  4708 ;;		wreg, status,2, status,0
  4709 ;; Tracked objects:
  4710 ;;		On entry : 0/0
  4711 ;;		On exit  : 0/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4714 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4715 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4717 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;Total ram usage:       13 bytes
  4719 ;; Hardware stack levels used:    1
  4720 ;; This function calls:
  4721 ;;		Nothing
  4722 ;; This function is called by:
  4723 ;;		_printf
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           	psect	text14
  4728  002C68                     __ptext14:
  4729                           	opt stack 0
  4730  002C68                     ___lldiv:
  4731                           	opt stack 29
  4732                           
  4733                           ;incstack = 0
  4734  002C68  0E00               	movlw	0
  4735  002C6A  6E09               	movwf	___lldiv@quotient,c
  4736  002C6C  0E00               	movlw	0
  4737  002C6E  6E0A               	movwf	___lldiv@quotient+1,c
  4738  002C70  0E00               	movlw	0
  4739  002C72  6E0B               	movwf	___lldiv@quotient+2,c
  4740  002C74  0E00               	movlw	0
  4741  002C76  6E0C               	movwf	___lldiv@quotient+3,c
  4742  002C78  5005               	movf	___lldiv@divisor,w,c
  4743  002C7A  1006               	iorwf	___lldiv@divisor+1,w,c
  4744  002C7C  1007               	iorwf	___lldiv@divisor+2,w,c
  4745  002C7E  1008               	iorwf	___lldiv@divisor+3,w,c
  4746  002C80  B4D8               	btfsc	status,2,c
  4747  002C82  D02F               	goto	l894
  4748  002C84  0E01               	movlw	1
  4749  002C86  6E0D               	movwf	___lldiv@counter,c
  4750  002C88  D007               	goto	l2834
  4751  002C8A                     l2832:
  4752  002C8A  90D8               	bcf	status,0,c
  4753  002C8C  3605               	rlcf	___lldiv@divisor,f,c
  4754  002C8E  3606               	rlcf	___lldiv@divisor+1,f,c
  4755  002C90  3607               	rlcf	___lldiv@divisor+2,f,c
  4756  002C92  3608               	rlcf	___lldiv@divisor+3,f,c
  4757  002C94  2A0D               	incf	___lldiv@counter,f,c
  4758  002C96  D000               	goto	l2834
  4759  002C98                     l2834:
  4760  002C98  BE08               	btfsc	___lldiv@divisor+3,7,c
  4761  002C9A  D002               	goto	l2836
  4762  002C9C  D7F6               	goto	l2832
  4763  002C9E  D000               	goto	l2836
  4764  002CA0                     l2836:
  4765  002CA0  90D8               	bcf	status,0,c
  4766  002CA2  3609               	rlcf	___lldiv@quotient,f,c
  4767  002CA4  360A               	rlcf	___lldiv@quotient+1,f,c
  4768  002CA6  360B               	rlcf	___lldiv@quotient+2,f,c
  4769  002CA8  360C               	rlcf	___lldiv@quotient+3,f,c
  4770  002CAA  5005               	movf	___lldiv@divisor,w,c
  4771  002CAC  5C01               	subwf	___lldiv@dividend,w,c
  4772  002CAE  5006               	movf	___lldiv@divisor+1,w,c
  4773  002CB0  5802               	subwfb	___lldiv@dividend+1,w,c
  4774  002CB2  5007               	movf	___lldiv@divisor+2,w,c
  4775  002CB4  5803               	subwfb	___lldiv@dividend+2,w,c
  4776  002CB6  5008               	movf	___lldiv@divisor+3,w,c
  4777  002CB8  5804               	subwfb	___lldiv@dividend+3,w,c
  4778  002CBA  A0D8               	btfss	status,0,c
  4779  002CBC  D00A               	goto	l2844
  4780  002CBE  5005               	movf	___lldiv@divisor,w,c
  4781  002CC0  5E01               	subwf	___lldiv@dividend,f,c
  4782  002CC2  5006               	movf	___lldiv@divisor+1,w,c
  4783  002CC4  5A02               	subwfb	___lldiv@dividend+1,f,c
  4784  002CC6  5007               	movf	___lldiv@divisor+2,w,c
  4785  002CC8  5A03               	subwfb	___lldiv@dividend+2,f,c
  4786  002CCA  5008               	movf	___lldiv@divisor+3,w,c
  4787  002CCC  5A04               	subwfb	___lldiv@dividend+3,f,c
  4788  002CCE  8009               	bsf	___lldiv@quotient,0,c
  4789  002CD0  D000               	goto	l2844
  4790  002CD2                     l2844:
  4791  002CD2  90D8               	bcf	status,0,c
  4792  002CD4  3208               	rrcf	___lldiv@divisor+3,f,c
  4793  002CD6  3207               	rrcf	___lldiv@divisor+2,f,c
  4794  002CD8  3206               	rrcf	___lldiv@divisor+1,f,c
  4795  002CDA  3205               	rrcf	___lldiv@divisor,f,c
  4796  002CDC  2E0D               	decfsz	___lldiv@counter,f,c
  4797  002CDE  D7E0               	goto	l2836
  4798  002CE0  D000               	goto	l894
  4799  002CE2                     l894:
  4800  002CE2  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4801  002CE6  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4802  002CEA  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4803  002CEE  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4804  002CF2  0012               	return		;funcret
  4805  002CF4                     __end_of___lldiv:
  4806                           	opt stack 0
  4807                           tblptru	equ	0xFF8
  4808                           tblptrh	equ	0xFF7
  4809                           tblptrl	equ	0xFF6
  4810                           tablat	equ	0xFF5
  4811                           prodh	equ	0xFF4
  4812                           prodl	equ	0xFF3
  4813                           postinc0	equ	0xFEE
  4814                           wreg	equ	0xFE8
  4815                           postdec1	equ	0xFE5
  4816                           fsr1l	equ	0xFE1
  4817                           postinc2	equ	0xFDE
  4818                           postdec2	equ	0xFDD
  4819                           fsr2h	equ	0xFDA
  4820                           fsr2l	equ	0xFD9
  4821                           status	equ	0xFD8
  4822                           
  4823 ;; *************** function ___fttol *****************
  4824 ;; Defined at:
  4825 ;;		line 44 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\fttol.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;  f1              3   42[COMRAM] float 
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;  lval            4   52[COMRAM] unsigned long 
  4830 ;;  exp1            1   56[COMRAM] unsigned char 
  4831 ;;  sign1           1   51[COMRAM] unsigned char 
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  4   42[COMRAM] long 
  4834 ;; Registers used:
  4835 ;;		wreg, status,2, status,0
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4841 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4844 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4845 ;;Total ram usage:       15 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; This function calls:
  4848 ;;		Nothing
  4849 ;; This function is called by:
  4850 ;;		_printf
  4851 ;; This function uses a non-reentrant model
  4852 ;;
  4853                           
  4854                           	psect	text15
  4855  0025F2                     __ptext15:
  4856                           	opt stack 0
  4857  0025F2                     ___fttol:
  4858                           	opt stack 29
  4859                           
  4860                           ;incstack = 0
  4861  0025F2  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4862  0025F6  6A30               	clrf	(??___fttol+1)& (0+255),c
  4863  0025F8  6A31               	clrf	(??___fttol+2)& (0+255),c
  4864  0025FA  342C               	rlcf	___fttol@f1+1,w,c
  4865  0025FC  362F               	rlcf	??___fttol& (0+255),f,c
  4866  0025FE  E301               	bnc	u2781
  4867  002600  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4868  002602                     u2781:
  4869  002602  502F               	movf	??___fttol,w,c
  4870  002604  6E39               	movwf	___fttol@exp1,c
  4871  002606  5039               	movf	___fttol@exp1,w,c
  4872  002608  A4D8               	btfss	status,2,c
  4873  00260A  D002               	goto	l2786
  4874  00260C  D039               	goto	l2810
  4875  00260E  D063               	goto	l850
  4876  002610                     l2786:
  4877  002610  0E17               	movlw	23
  4878  002612  6E2F               	movwf	??___fttol& (0+255),c
  4879  002614  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4880  002618  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4881  00261C  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4882  002620  282F               	incf	??___fttol,w,c
  4883  002622  6E33               	movwf	(??___fttol+4)& (0+255),c
  4884  002624  D004               	goto	u2800
  4885  002626                     u2805:
  4886  002626  90D8               	bcf	status,0,c
  4887  002628  3232               	rrcf	??___fttol+3,f,c
  4888  00262A  3231               	rrcf	??___fttol+2,f,c
  4889  00262C  3230               	rrcf	??___fttol+1,f,c
  4890  00262E                     u2800:
  4891  00262E  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4892  002630  D7FA               	goto	u2805
  4893  002632  5030               	movf	??___fttol+1,w,c
  4894  002634  6E34               	movwf	___fttol@sign1,c
  4895  002636  8E2C               	bsf	___fttol@f1+1,7,c
  4896  002638  0EFF               	movlw	255
  4897  00263A  162B               	andwf	___fttol@f1,f,c
  4898  00263C  0EFF               	movlw	255
  4899  00263E  162C               	andwf	___fttol@f1+1,f,c
  4900  002640  0E00               	movlw	0
  4901  002642  162D               	andwf	___fttol@f1+2,f,c
  4902  002644  502B               	movf	___fttol@f1,w,c
  4903  002646  6E35               	movwf	___fttol@lval,c
  4904  002648  502C               	movf	___fttol@f1+1,w,c
  4905  00264A  6E36               	movwf	___fttol@lval+1,c
  4906  00264C  502D               	movf	___fttol@f1+2,w,c
  4907  00264E  6E37               	movwf	___fttol@lval+2,c
  4908  002650  6A38               	clrf	___fttol@lval+3,c
  4909  002652  0E8E               	movlw	142
  4910  002654  5E39               	subwf	___fttol@exp1,f,c
  4911  002656  AE39               	btfss	___fttol@exp1,7,c
  4912  002658  D010               	goto	l2808
  4913  00265A  5039               	movf	___fttol@exp1,w,c
  4914  00265C  0A80               	xorlw	128
  4915  00265E  0F8F               	addlw	143
  4916  002660  B0D8               	btfsc	status,0,c
  4917  002662  D003               	goto	l2804
  4918  002664  D00D               	goto	l2810
  4919  002666  D037               	goto	l850
  4920  002668  D000               	goto	l2804
  4921  00266A                     l2804:
  4922  00266A  90D8               	bcf	status,0,c
  4923  00266C  3238               	rrcf	___fttol@lval+3,f,c
  4924  00266E  3237               	rrcf	___fttol@lval+2,f,c
  4925  002670  3236               	rrcf	___fttol@lval+1,f,c
  4926  002672  3235               	rrcf	___fttol@lval,f,c
  4927  002674  3E39               	incfsz	___fttol@exp1,f,c
  4928  002676  D7F9               	goto	l2804
  4929  002678  D019               	goto	l2818
  4930  00267A                     l2808:
  4931  00267A  0E17               	movlw	23
  4932  00267C  6439               	cpfsgt	___fttol@exp1,c
  4933  00267E  D011               	goto	l2816
  4934  002680                     l2810:
  4935  002680  0E00               	movlw	0
  4936  002682  6E2B               	movwf	?___fttol,c
  4937  002684  0E00               	movlw	0
  4938  002686  6E2C               	movwf	?___fttol+1,c
  4939  002688  0E00               	movlw	0
  4940  00268A  6E2D               	movwf	?___fttol+2,c
  4941  00268C  0E00               	movlw	0
  4942  00268E  6E2E               	movwf	?___fttol+3,c
  4943  002690  D022               	goto	l850
  4944  002692  D007               	goto	l2816
  4945  002694                     l2814:
  4946  002694  90D8               	bcf	status,0,c
  4947  002696  3635               	rlcf	___fttol@lval,f,c
  4948  002698  3636               	rlcf	___fttol@lval+1,f,c
  4949  00269A  3637               	rlcf	___fttol@lval+2,f,c
  4950  00269C  3638               	rlcf	___fttol@lval+3,f,c
  4951  00269E  0639               	decf	___fttol@exp1,f,c
  4952  0026A0  D000               	goto	l2816
  4953  0026A2                     l2816:
  4954  0026A2  5039               	movf	___fttol@exp1,w,c
  4955  0026A4  B4D8               	btfsc	status,2,c
  4956  0026A6  D002               	goto	l2818
  4957  0026A8  D7F5               	goto	l2814
  4958  0026AA  D000               	goto	l2818
  4959  0026AC                     l2818:
  4960  0026AC  5034               	movf	___fttol@sign1,w,c
  4961  0026AE  B4D8               	btfsc	status,2,c
  4962  0026B0  D009               	goto	l2822
  4963  0026B2  1E38               	comf	___fttol@lval+3,f,c
  4964  0026B4  1E37               	comf	___fttol@lval+2,f,c
  4965  0026B6  1E36               	comf	___fttol@lval+1,f,c
  4966  0026B8  6C35               	negf	___fttol@lval,c
  4967  0026BA  0E00               	movlw	0
  4968  0026BC  2236               	addwfc	___fttol@lval+1,f,c
  4969  0026BE  2237               	addwfc	___fttol@lval+2,f,c
  4970  0026C0  2238               	addwfc	___fttol@lval+3,f,c
  4971  0026C2  D000               	goto	l2822
  4972  0026C4                     l2822:
  4973  0026C4  C035  F02B         	movff	___fttol@lval,?___fttol
  4974  0026C8  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4975  0026CC  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4976  0026D0  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4977  0026D4  D000               	goto	l850
  4978  0026D6                     l850:
  4979  0026D6  0012               	return		;funcret
  4980  0026D8                     __end_of___fttol:
  4981                           	opt stack 0
  4982                           tblptru	equ	0xFF8
  4983                           tblptrh	equ	0xFF7
  4984                           tblptrl	equ	0xFF6
  4985                           tablat	equ	0xFF5
  4986                           prodh	equ	0xFF4
  4987                           prodl	equ	0xFF3
  4988                           postinc0	equ	0xFEE
  4989                           wreg	equ	0xFE8
  4990                           postdec1	equ	0xFE5
  4991                           fsr1l	equ	0xFE1
  4992                           postinc2	equ	0xFDE
  4993                           postdec2	equ	0xFDD
  4994                           fsr2h	equ	0xFDA
  4995                           fsr2l	equ	0xFD9
  4996                           status	equ	0xFD8
  4997                           
  4998 ;; *************** function ___ftsub *****************
  4999 ;; Defined at:
  5000 ;;		line 20 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5001 ;; Parameters:    Size  Location     Type
  5002 ;;  f1              3   57[COMRAM] float 
  5003 ;;  f2              3   60[COMRAM] float 
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;		None
  5006 ;; Return value:  Size  Location     Type
  5007 ;;                  3   57[COMRAM] float 
  5008 ;; Registers used:
  5009 ;;		wreg, status,2, status,0, cstack
  5010 ;; Tracked objects:
  5011 ;;		On entry : 0/0
  5012 ;;		On exit  : 0/0
  5013 ;;		Unchanged: 0/0
  5014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5015 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5019 ;;Total ram usage:        6 bytes
  5020 ;; Hardware stack levels used:    1
  5021 ;; Hardware stack levels required when called:    2
  5022 ;; This function calls:
  5023 ;;		___ftadd
  5024 ;; This function is called by:
  5025 ;;		_printf
  5026 ;; This function uses a non-reentrant model
  5027 ;;
  5028                           
  5029                           	psect	text16
  5030  002EB6                     __ptext16:
  5031                           	opt stack 0
  5032  002EB6                     ___ftsub:
  5033                           	opt stack 27
  5034                           
  5035                           ;incstack = 0
  5036  002EB6  503D               	movf	___ftsub@f2,w,c
  5037  002EB8  103E               	iorwf	___ftsub@f2+1,w,c
  5038  002EBA  103F               	iorwf	___ftsub@f2+2,w,c
  5039  002EBC  B4D8               	btfsc	status,2,c
  5040  002EBE  D007               	goto	l2754
  5041  002EC0  0E00               	movlw	0
  5042  002EC2  1A3D               	xorwf	___ftsub@f2,f,c
  5043  002EC4  0E00               	movlw	0
  5044  002EC6  1A3E               	xorwf	___ftsub@f2+1,f,c
  5045  002EC8  0E80               	movlw	128
  5046  002ECA  1A3F               	xorwf	___ftsub@f2+2,f,c
  5047  002ECC  D000               	goto	l2754
  5048  002ECE                     l2754:
  5049  002ECE  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  5050  002ED2  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  5051  002ED6  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  5052  002EDA  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  5053  002EDE  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  5054  002EE2  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  5055  002EE6  EC8E  F010         	call	___ftadd	;wreg free
  5056  002EEA  C02E  F03A         	movff	?___ftadd,?___ftsub
  5057  002EEE  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  5058  002EF2  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  5059  002EF6  D000               	goto	l846
  5060  002EF8                     l846:
  5061  002EF8  0012               	return		;funcret
  5062  002EFA                     __end_of___ftsub:
  5063                           	opt stack 0
  5064                           tblptru	equ	0xFF8
  5065                           tblptrh	equ	0xFF7
  5066                           tblptrl	equ	0xFF6
  5067                           tablat	equ	0xFF5
  5068                           prodh	equ	0xFF4
  5069                           prodl	equ	0xFF3
  5070                           postinc0	equ	0xFEE
  5071                           wreg	equ	0xFE8
  5072                           postdec1	equ	0xFE5
  5073                           fsr1l	equ	0xFE1
  5074                           postinc2	equ	0xFDE
  5075                           postdec2	equ	0xFDD
  5076                           fsr2h	equ	0xFDA
  5077                           fsr2l	equ	0xFD9
  5078                           status	equ	0xFD8
  5079                           
  5080 ;; *************** function ___ftadd *****************
  5081 ;; Defined at:
  5082 ;;		line 86 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5083 ;; Parameters:    Size  Location     Type
  5084 ;;  f1              3   45[COMRAM] float 
  5085 ;;  f2              3   48[COMRAM] float 
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;  exp1            1   56[COMRAM] unsigned char 
  5088 ;;  exp2            1   55[COMRAM] unsigned char 
  5089 ;;  sign            1   54[COMRAM] unsigned char 
  5090 ;; Return value:  Size  Location     Type
  5091 ;;                  3   45[COMRAM] float 
  5092 ;; Registers used:
  5093 ;;		wreg, status,2, status,0, cstack
  5094 ;; Tracked objects:
  5095 ;;		On entry : 0/0
  5096 ;;		On exit  : 0/0
  5097 ;;		Unchanged: 0/0
  5098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5099 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5100 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5101 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5102 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5103 ;;Total ram usage:       12 bytes
  5104 ;; Hardware stack levels used:    1
  5105 ;; Hardware stack levels required when called:    1
  5106 ;; This function calls:
  5107 ;;		___ftpack
  5108 ;; This function is called by:
  5109 ;;		_printf
  5110 ;;		___ftsub
  5111 ;; This function uses a non-reentrant model
  5112 ;;
  5113                           
  5114                           	psect	text17
  5115  00211C                     __ptext17:
  5116                           	opt stack 0
  5117  00211C                     ___ftadd:
  5118                           	opt stack 27
  5119                           
  5120                           ;incstack = 0
  5121  00211C  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5122  002120  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5123  002122  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5124  002124  342F               	rlcf	___ftadd@f1+1,w,c
  5125  002126  3634               	rlcf	??___ftadd& (0+255),f,c
  5126  002128  E301               	bnc	u1921
  5127  00212A  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5128  00212C                     u1921:
  5129  00212C  5034               	movf	??___ftadd,w,c
  5130  00212E  6E39               	movwf	___ftadd@exp1,c
  5131  002130  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5132  002134  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5133  002136  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5134  002138  3432               	rlcf	___ftadd@f2+1,w,c
  5135  00213A  3634               	rlcf	??___ftadd& (0+255),f,c
  5136  00213C  E301               	bnc	u1931
  5137  00213E  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5138  002140                     u1931:
  5139  002140  5034               	movf	??___ftadd,w,c
  5140  002142  6E38               	movwf	___ftadd@exp2,c
  5141  002144  5039               	movf	___ftadd@exp1,w,c
  5142  002146  B4D8               	btfsc	status,2,c
  5143  002148  D00B               	goto	l765
  5144  00214A  5038               	movf	___ftadd@exp2,w,c
  5145  00214C  5C39               	subwf	___ftadd@exp1,w,c
  5146  00214E  B0D8               	btfsc	status,0,c
  5147  002150  D00E               	goto	l2274
  5148  002152  5039               	movf	___ftadd@exp1,w,c
  5149  002154  0800               	sublw	0
  5150  002156  2438               	addwf	___ftadd@exp2,w,c
  5151  002158  6E34               	movwf	??___ftadd& (0+255),c
  5152  00215A  0E18               	movlw	24
  5153  00215C  6434               	cpfsgt	??___ftadd,c
  5154  00215E  D007               	goto	l2274
  5155  002160                     l765:
  5156  002160  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5157  002164  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5158  002168  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5159  00216C  D0B8               	goto	l766
  5160  00216E                     l2274:
  5161  00216E  5038               	movf	___ftadd@exp2,w,c
  5162  002170  B4D8               	btfsc	status,2,c
  5163  002172  D00B               	goto	l769
  5164  002174  5039               	movf	___ftadd@exp1,w,c
  5165  002176  5C38               	subwf	___ftadd@exp2,w,c
  5166  002178  B0D8               	btfsc	status,0,c
  5167  00217A  D00E               	goto	l2280
  5168  00217C  5038               	movf	___ftadd@exp2,w,c
  5169  00217E  0800               	sublw	0
  5170  002180  2439               	addwf	___ftadd@exp1,w,c
  5171  002182  6E34               	movwf	??___ftadd& (0+255),c
  5172  002184  0E18               	movlw	24
  5173  002186  6434               	cpfsgt	??___ftadd,c
  5174  002188  D007               	goto	l2280
  5175  00218A                     l769:
  5176  00218A  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5177  00218E  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5178  002192  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5179  002196  D0A3               	goto	l766
  5180  002198                     l2280:
  5181  002198  0E06               	movlw	6
  5182  00219A  6E37               	movwf	___ftadd@sign,c
  5183  00219C  AE30               	btfss	___ftadd@f1+2,7,c
  5184  00219E  D002               	goto	l2286
  5185  0021A0  8E37               	bsf	___ftadd@sign,7,c
  5186  0021A2  D000               	goto	l2286
  5187  0021A4                     l2286:
  5188  0021A4  BE33               	btfsc	___ftadd@f2+2,7,c
  5189  0021A6  8C37               	bsf	___ftadd@sign,6,c
  5190  0021A8  8E2F               	bsf	___ftadd@f1+1,7,c
  5191  0021AA  0EFF               	movlw	255
  5192  0021AC  162E               	andwf	___ftadd@f1,f,c
  5193  0021AE  0EFF               	movlw	255
  5194  0021B0  162F               	andwf	___ftadd@f1+1,f,c
  5195  0021B2  0E00               	movlw	0
  5196  0021B4  1630               	andwf	___ftadd@f1+2,f,c
  5197  0021B6  8E32               	bsf	___ftadd@f2+1,7,c
  5198  0021B8  0EFF               	movlw	255
  5199  0021BA  1631               	andwf	___ftadd@f2,f,c
  5200  0021BC  0EFF               	movlw	255
  5201  0021BE  1632               	andwf	___ftadd@f2+1,f,c
  5202  0021C0  0E00               	movlw	0
  5203  0021C2  1633               	andwf	___ftadd@f2+2,f,c
  5204  0021C4  5038               	movf	___ftadd@exp2,w,c
  5205  0021C6  5C39               	subwf	___ftadd@exp1,w,c
  5206  0021C8  B0D8               	btfsc	status,0,c
  5207  0021CA  D01E               	goto	l2306
  5208  0021CC                     l2296:
  5209  0021CC  90D8               	bcf	status,0,c
  5210  0021CE  3631               	rlcf	___ftadd@f2,f,c
  5211  0021D0  3632               	rlcf	___ftadd@f2+1,f,c
  5212  0021D2  3633               	rlcf	___ftadd@f2+2,f,c
  5213  0021D4  0638               	decf	___ftadd@exp2,f,c
  5214  0021D6  5039               	movf	___ftadd@exp1,w,c
  5215  0021D8  1838               	xorwf	___ftadd@exp2,w,c
  5216  0021DA  B4D8               	btfsc	status,2,c
  5217  0021DC  D00F               	goto	l2304
  5218  0021DE  0637               	decf	___ftadd@sign,f,c
  5219  0021E0  C037  F034         	movff	___ftadd@sign,??___ftadd
  5220  0021E4  0E07               	movlw	7
  5221  0021E6  1634               	andwf	??___ftadd,f,c
  5222  0021E8  B4D8               	btfsc	status,2,c
  5223  0021EA  D008               	goto	l2304
  5224  0021EC  D7EF               	goto	l2296
  5225  0021EE  D006               	goto	l2304
  5226  0021F0                     l2302:
  5227  0021F0  90D8               	bcf	status,0,c
  5228  0021F2  3230               	rrcf	___ftadd@f1+2,f,c
  5229  0021F4  322F               	rrcf	___ftadd@f1+1,f,c
  5230  0021F6  322E               	rrcf	___ftadd@f1,f,c
  5231  0021F8  2A39               	incf	___ftadd@exp1,f,c
  5232  0021FA  D000               	goto	l2304
  5233  0021FC                     l2304:
  5234  0021FC  5038               	movf	___ftadd@exp2,w,c
  5235  0021FE  1839               	xorwf	___ftadd@exp1,w,c
  5236  002200  B4D8               	btfsc	status,2,c
  5237  002202  D024               	goto	l780
  5238  002204  D7F5               	goto	l2302
  5239  002206  D022               	goto	l780
  5240  002208                     l2306:
  5241  002208  5039               	movf	___ftadd@exp1,w,c
  5242  00220A  5C38               	subwf	___ftadd@exp2,w,c
  5243  00220C  B0D8               	btfsc	status,0,c
  5244  00220E  D01E               	goto	l780
  5245  002210                     l2308:
  5246  002210  90D8               	bcf	status,0,c
  5247  002212  362E               	rlcf	___ftadd@f1,f,c
  5248  002214  362F               	rlcf	___ftadd@f1+1,f,c
  5249  002216  3630               	rlcf	___ftadd@f1+2,f,c
  5250  002218  0639               	decf	___ftadd@exp1,f,c
  5251  00221A  5039               	movf	___ftadd@exp1,w,c
  5252  00221C  1838               	xorwf	___ftadd@exp2,w,c
  5253  00221E  B4D8               	btfsc	status,2,c
  5254  002220  D00F               	goto	l2316
  5255  002222  0637               	decf	___ftadd@sign,f,c
  5256  002224  C037  F034         	movff	___ftadd@sign,??___ftadd
  5257  002228  0E07               	movlw	7
  5258  00222A  1634               	andwf	??___ftadd,f,c
  5259  00222C  B4D8               	btfsc	status,2,c
  5260  00222E  D008               	goto	l2316
  5261  002230  D7EF               	goto	l2308
  5262  002232  D006               	goto	l2316
  5263  002234                     l2314:
  5264  002234  90D8               	bcf	status,0,c
  5265  002236  3233               	rrcf	___ftadd@f2+2,f,c
  5266  002238  3232               	rrcf	___ftadd@f2+1,f,c
  5267  00223A  3231               	rrcf	___ftadd@f2,f,c
  5268  00223C  2A38               	incf	___ftadd@exp2,f,c
  5269  00223E  D000               	goto	l2316
  5270  002240                     l2316:
  5271  002240  5038               	movf	___ftadd@exp2,w,c
  5272  002242  1839               	xorwf	___ftadd@exp1,w,c
  5273  002244  B4D8               	btfsc	status,2,c
  5274  002246  D002               	goto	l780
  5275  002248  D7F5               	goto	l2314
  5276  00224A  D000               	goto	l780
  5277  00224C                     l780:
  5278  00224C  AE37               	btfss	___ftadd@sign,7,c
  5279  00224E  D00C               	goto	l789
  5280  002250  0EFF               	movlw	255
  5281  002252  1A2E               	xorwf	___ftadd@f1,f,c
  5282  002254  0EFF               	movlw	255
  5283  002256  1A2F               	xorwf	___ftadd@f1+1,f,c
  5284  002258  0EFF               	movlw	255
  5285  00225A  1A30               	xorwf	___ftadd@f1+2,f,c
  5286  00225C  0E01               	movlw	1
  5287  00225E  262E               	addwf	___ftadd@f1,f,c
  5288  002260  0E00               	movlw	0
  5289  002262  222F               	addwfc	___ftadd@f1+1,f,c
  5290  002264  0E00               	movlw	0
  5291  002266  2230               	addwfc	___ftadd@f1+2,f,c
  5292  002268                     l789:
  5293  002268  AC37               	btfss	___ftadd@sign,6,c
  5294  00226A  D00D               	goto	l2322
  5295  00226C  0EFF               	movlw	255
  5296  00226E  1A31               	xorwf	___ftadd@f2,f,c
  5297  002270  0EFF               	movlw	255
  5298  002272  1A32               	xorwf	___ftadd@f2+1,f,c
  5299  002274  0EFF               	movlw	255
  5300  002276  1A33               	xorwf	___ftadd@f2+2,f,c
  5301  002278  0E01               	movlw	1
  5302  00227A  2631               	addwf	___ftadd@f2,f,c
  5303  00227C  0E00               	movlw	0
  5304  00227E  2232               	addwfc	___ftadd@f2+1,f,c
  5305  002280  0E00               	movlw	0
  5306  002282  2233               	addwfc	___ftadd@f2+2,f,c
  5307  002284  D000               	goto	l2322
  5308  002286                     l2322:
  5309  002286  0E00               	movlw	0
  5310  002288  6E37               	movwf	___ftadd@sign,c
  5311  00228A  502E               	movf	___ftadd@f1,w,c
  5312  00228C  2631               	addwf	___ftadd@f2,f,c
  5313  00228E  502F               	movf	___ftadd@f1+1,w,c
  5314  002290  2232               	addwfc	___ftadd@f2+1,f,c
  5315  002292  5030               	movf	___ftadd@f1+2,w,c
  5316  002294  2233               	addwfc	___ftadd@f2+2,f,c
  5317  002296  AE33               	btfss	___ftadd@f2+2,7,c
  5318  002298  D00F               	goto	l2332
  5319  00229A  0EFF               	movlw	255
  5320  00229C  1A31               	xorwf	___ftadd@f2,f,c
  5321  00229E  0EFF               	movlw	255
  5322  0022A0  1A32               	xorwf	___ftadd@f2+1,f,c
  5323  0022A2  0EFF               	movlw	255
  5324  0022A4  1A33               	xorwf	___ftadd@f2+2,f,c
  5325  0022A6  0E01               	movlw	1
  5326  0022A8  2631               	addwf	___ftadd@f2,f,c
  5327  0022AA  0E00               	movlw	0
  5328  0022AC  2232               	addwfc	___ftadd@f2+1,f,c
  5329  0022AE  0E00               	movlw	0
  5330  0022B0  2233               	addwfc	___ftadd@f2+2,f,c
  5331  0022B2  0E01               	movlw	1
  5332  0022B4  6E37               	movwf	___ftadd@sign,c
  5333  0022B6  D000               	goto	l2332
  5334  0022B8                     l2332:
  5335  0022B8  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5336  0022BC  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5337  0022C0  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5338  0022C4  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5339  0022C8  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5340  0022CC  EC49  F014         	call	___ftpack	;wreg free
  5341  0022D0  C001  F02E         	movff	?___ftpack,?___ftadd
  5342  0022D4  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5343  0022D8  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5344  0022DC  D000               	goto	l766
  5345  0022DE                     l766:
  5346  0022DE  0012               	return		;funcret
  5347  0022E0                     __end_of___ftadd:
  5348                           	opt stack 0
  5349                           tblptru	equ	0xFF8
  5350                           tblptrh	equ	0xFF7
  5351                           tblptrl	equ	0xFF6
  5352                           tablat	equ	0xFF5
  5353                           prodh	equ	0xFF4
  5354                           prodl	equ	0xFF3
  5355                           postinc0	equ	0xFEE
  5356                           wreg	equ	0xFE8
  5357                           postdec1	equ	0xFE5
  5358                           fsr1l	equ	0xFE1
  5359                           postinc2	equ	0xFDE
  5360                           postdec2	equ	0xFDD
  5361                           fsr2h	equ	0xFDA
  5362                           fsr2l	equ	0xFD9
  5363                           status	equ	0xFD8
  5364                           
  5365 ;; *************** function ___ftneg *****************
  5366 ;; Defined at:
  5367 ;;		line 15 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftneg.c"
  5368 ;; Parameters:    Size  Location     Type
  5369 ;;  f1              3    0[COMRAM] float 
  5370 ;; Auto vars:     Size  Location     Type
  5371 ;;		None
  5372 ;; Return value:  Size  Location     Type
  5373 ;;                  3    0[COMRAM] float 
  5374 ;; Registers used:
  5375 ;;		wreg, status,2, status,0
  5376 ;; Tracked objects:
  5377 ;;		On entry : 0/0
  5378 ;;		On exit  : 0/0
  5379 ;;		Unchanged: 0/0
  5380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5381 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5384 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5385 ;;Total ram usage:        3 bytes
  5386 ;; Hardware stack levels used:    1
  5387 ;; This function calls:
  5388 ;;		Nothing
  5389 ;; This function is called by:
  5390 ;;		_printf
  5391 ;; This function uses a non-reentrant model
  5392 ;;
  5393                           
  5394                           	psect	text18
  5395  0030C2                     __ptext18:
  5396                           	opt stack 0
  5397  0030C2                     ___ftneg:
  5398                           	opt stack 29
  5399                           
  5400                           ;incstack = 0
  5401  0030C2  5001               	movf	___ftneg@f1,w,c
  5402  0030C4  1002               	iorwf	___ftneg@f1+1,w,c
  5403  0030C6  1003               	iorwf	___ftneg@f1+2,w,c
  5404  0030C8  B4D8               	btfsc	status,2,c
  5405  0030CA  D006               	goto	l839
  5406  0030CC  0E00               	movlw	0
  5407  0030CE  1A01               	xorwf	___ftneg@f1,f,c
  5408  0030D0  0E00               	movlw	0
  5409  0030D2  1A02               	xorwf	___ftneg@f1+1,f,c
  5410  0030D4  0E80               	movlw	128
  5411  0030D6  1A03               	xorwf	___ftneg@f1+2,f,c
  5412  0030D8                     l839:
  5413  0030D8  C001  F001         	movff	___ftneg@f1,?___ftneg
  5414  0030DC  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5415  0030E0  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5416  0030E4  0012               	return		;funcret
  5417  0030E6                     __end_of___ftneg:
  5418                           	opt stack 0
  5419                           tblptru	equ	0xFF8
  5420                           tblptrh	equ	0xFF7
  5421                           tblptrl	equ	0xFF6
  5422                           tablat	equ	0xFF5
  5423                           prodh	equ	0xFF4
  5424                           prodl	equ	0xFF3
  5425                           postinc0	equ	0xFEE
  5426                           wreg	equ	0xFE8
  5427                           postdec1	equ	0xFE5
  5428                           fsr1l	equ	0xFE1
  5429                           postinc2	equ	0xFDE
  5430                           postdec2	equ	0xFDD
  5431                           fsr2h	equ	0xFDA
  5432                           fsr2l	equ	0xFD9
  5433                           status	equ	0xFD8
  5434                           
  5435 ;; *************** function ___ftge *****************
  5436 ;; Defined at:
  5437 ;;		line 4 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftge.c"
  5438 ;; Parameters:    Size  Location     Type
  5439 ;;  ff1             3    0[COMRAM] float 
  5440 ;;  ff2             3    3[COMRAM] float 
  5441 ;; Auto vars:     Size  Location     Type
  5442 ;;		None
  5443 ;; Return value:  Size  Location     Type
  5444 ;;		None               void
  5445 ;; Registers used:
  5446 ;;		wreg, status,2, status,0
  5447 ;; Tracked objects:
  5448 ;;		On entry : 0/0
  5449 ;;		On exit  : 0/0
  5450 ;;		Unchanged: 0/0
  5451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5452 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5454 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5456 ;;Total ram usage:        9 bytes
  5457 ;; Hardware stack levels used:    1
  5458 ;; This function calls:
  5459 ;;		Nothing
  5460 ;; This function is called by:
  5461 ;;		_main
  5462 ;;		_printf
  5463 ;; This function uses a non-reentrant model
  5464 ;;
  5465                           
  5466                           	psect	text19
  5467  002B3C                     __ptext19:
  5468                           	opt stack 0
  5469  002B3C                     ___ftge:
  5470                           	opt stack 29
  5471                           
  5472                           ;incstack = 0
  5473  002B3C  AE03               	btfss	___ftge@ff1+2,7,c
  5474  002B3E  D017               	goto	l2762
  5475  002B40  C001  F007         	movff	___ftge@ff1,??___ftge
  5476  002B44  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5477  002B48  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5478  002B4C  1E07               	comf	??___ftge,f,c
  5479  002B4E  1E08               	comf	??___ftge+1,f,c
  5480  002B50  1E09               	comf	??___ftge+2,f,c
  5481  002B52  2A07               	incf	??___ftge,f,c
  5482  002B54  0E00               	movlw	0
  5483  002B56  2208               	addwfc	??___ftge+1,f,c
  5484  002B58  2209               	addwfc	??___ftge+2,f,c
  5485  002B5A  0E00               	movlw	0
  5486  002B5C  2407               	addwf	??___ftge,w,c
  5487  002B5E  6E01               	movwf	___ftge@ff1,c
  5488  002B60  0E00               	movlw	0
  5489  002B62  2008               	addwfc	??___ftge+1,w,c
  5490  002B64  6E02               	movwf	___ftge@ff1+1,c
  5491  002B66  0E80               	movlw	128
  5492  002B68  2009               	addwfc	??___ftge+2,w,c
  5493  002B6A  6E03               	movwf	___ftge@ff1+2,c
  5494  002B6C  D000               	goto	l2762
  5495  002B6E                     l2762:
  5496  002B6E  AE06               	btfss	___ftge@ff2+2,7,c
  5497  002B70  D017               	goto	l2766
  5498  002B72  C004  F007         	movff	___ftge@ff2,??___ftge
  5499  002B76  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5500  002B7A  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5501  002B7E  1E07               	comf	??___ftge,f,c
  5502  002B80  1E08               	comf	??___ftge+1,f,c
  5503  002B82  1E09               	comf	??___ftge+2,f,c
  5504  002B84  2A07               	incf	??___ftge,f,c
  5505  002B86  0E00               	movlw	0
  5506  002B88  2208               	addwfc	??___ftge+1,f,c
  5507  002B8A  2209               	addwfc	??___ftge+2,f,c
  5508  002B8C  0E00               	movlw	0
  5509  002B8E  2407               	addwf	??___ftge,w,c
  5510  002B90  6E04               	movwf	___ftge@ff2,c
  5511  002B92  0E00               	movlw	0
  5512  002B94  2008               	addwfc	??___ftge+1,w,c
  5513  002B96  6E05               	movwf	___ftge@ff2+1,c
  5514  002B98  0E80               	movlw	128
  5515  002B9A  2009               	addwfc	??___ftge+2,w,c
  5516  002B9C  6E06               	movwf	___ftge@ff2+2,c
  5517  002B9E  D000               	goto	l2766
  5518  002BA0                     l2766:
  5519  002BA0  0E00               	movlw	0
  5520  002BA2  1A01               	xorwf	___ftge@ff1,f,c
  5521  002BA4  0E00               	movlw	0
  5522  002BA6  1A02               	xorwf	___ftge@ff1+1,f,c
  5523  002BA8  0E80               	movlw	128
  5524  002BAA  1A03               	xorwf	___ftge@ff1+2,f,c
  5525  002BAC  0E00               	movlw	0
  5526  002BAE  1A04               	xorwf	___ftge@ff2,f,c
  5527  002BB0  0E00               	movlw	0
  5528  002BB2  1A05               	xorwf	___ftge@ff2+1,f,c
  5529  002BB4  0E80               	movlw	128
  5530  002BB6  1A06               	xorwf	___ftge@ff2+2,f,c
  5531  002BB8  5004               	movf	___ftge@ff2,w,c
  5532  002BBA  5C01               	subwf	___ftge@ff1,w,c
  5533  002BBC  5005               	movf	___ftge@ff2+1,w,c
  5534  002BBE  5802               	subwfb	___ftge@ff1+1,w,c
  5535  002BC0  5006               	movf	___ftge@ff2+2,w,c
  5536  002BC2  5803               	subwfb	___ftge@ff1+2,w,c
  5537  002BC4  B0D8               	btfsc	status,0,c
  5538  002BC6  D002               	goto	l2772
  5539  002BC8  90D8               	bcf	status,0,c
  5540  002BCA  D002               	goto	l823
  5541  002BCC                     l2772:
  5542  002BCC  80D8               	bsf	status,0,c
  5543  002BCE  D000               	goto	l823
  5544  002BD0                     l823:
  5545  002BD0  0012               	return		;funcret
  5546  002BD2                     __end_of___ftge:
  5547                           	opt stack 0
  5548                           tblptru	equ	0xFF8
  5549                           tblptrh	equ	0xFF7
  5550                           tblptrl	equ	0xFF6
  5551                           tablat	equ	0xFF5
  5552                           prodh	equ	0xFF4
  5553                           prodl	equ	0xFF3
  5554                           postinc0	equ	0xFEE
  5555                           wreg	equ	0xFE8
  5556                           postdec1	equ	0xFE5
  5557                           fsr1l	equ	0xFE1
  5558                           postinc2	equ	0xFDE
  5559                           postdec2	equ	0xFDD
  5560                           fsr2h	equ	0xFDA
  5561                           fsr2l	equ	0xFD9
  5562                           status	equ	0xFD8
  5563                           
  5564 ;; *************** function _init_UART *****************
  5565 ;; Defined at:
  5566 ;;		line 378 in file "Lab7p4.c"
  5567 ;; Parameters:    Size  Location     Type
  5568 ;;		None
  5569 ;; Auto vars:     Size  Location     Type
  5570 ;;		None
  5571 ;; Return value:  Size  Location     Type
  5572 ;;		None               void
  5573 ;; Registers used:
  5574 ;;		wreg, status,2, cstack
  5575 ;; Tracked objects:
  5576 ;;		On entry : 0/0
  5577 ;;		On exit  : 0/0
  5578 ;;		Unchanged: 0/0
  5579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5584 ;;Total ram usage:        0 bytes
  5585 ;; Hardware stack levels used:    1
  5586 ;; Hardware stack levels required when called:    1
  5587 ;; This function calls:
  5588 ;;		_OpenUSART
  5589 ;; This function is called by:
  5590 ;;		_main
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           	psect	text20
  5595  003182                     __ptext20:
  5596                           	opt stack 0
  5597  003182                     _init_UART:
  5598                           	opt stack 29
  5599                           
  5600                           ;Lab7p4.c: 380: OpenUSART(0b01111111 & 0b10111111 & 0b11111110 & 0b11111101
  5601                           ;Lab7p4.c: 381: & 0b11111111 & 0b11111111, 25);
  5602                           
  5603                           ;incstack = 0
  5604  003182  0E00               	movlw	0
  5605  003184  6E02               	movwf	OpenUSART@spbrg+1,c
  5606  003186  0E19               	movlw	25
  5607  003188  6E01               	movwf	OpenUSART@spbrg,c
  5608  00318A  0E3C               	movlw	60
  5609  00318C  ECF3  F016         	call	_OpenUSART
  5610                           
  5611                           ;Lab7p4.c: 382: OSCCON = 0x60;
  5612  003190  0E60               	movlw	96
  5613  003192  6ED3               	movwf	4051,c	;volatile
  5614  003194  0012               	return		;funcret
  5615  003196                     __end_of_init_UART:
  5616                           	opt stack 0
  5617                           tblptru	equ	0xFF8
  5618                           tblptrh	equ	0xFF7
  5619                           tblptrl	equ	0xFF6
  5620                           tablat	equ	0xFF5
  5621                           prodh	equ	0xFF4
  5622                           prodl	equ	0xFF3
  5623                           postinc0	equ	0xFEE
  5624                           wreg	equ	0xFE8
  5625                           postdec1	equ	0xFE5
  5626                           fsr1l	equ	0xFE1
  5627                           postinc2	equ	0xFDE
  5628                           postdec2	equ	0xFDD
  5629                           fsr2h	equ	0xFDA
  5630                           fsr2l	equ	0xFD9
  5631                           status	equ	0xFD8
  5632                           
  5633 ;; *************** function _OpenUSART *****************
  5634 ;; Defined at:
  5635 ;;		line 73 in file "C:\My Programs\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  5636 ;; Parameters:    Size  Location     Type
  5637 ;;  config          1    wreg     unsigned char 
  5638 ;;  spbrg           2    0[COMRAM] unsigned int 
  5639 ;; Auto vars:     Size  Location     Type
  5640 ;;  config          1    2[COMRAM] unsigned char 
  5641 ;; Return value:  Size  Location     Type
  5642 ;;		None               void
  5643 ;; Registers used:
  5644 ;;		wreg, status,2
  5645 ;; Tracked objects:
  5646 ;;		On entry : 0/0
  5647 ;;		On exit  : 0/0
  5648 ;;		Unchanged: 0/0
  5649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5650 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5651 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5653 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5654 ;;Total ram usage:        3 bytes
  5655 ;; Hardware stack levels used:    1
  5656 ;; This function calls:
  5657 ;;		Nothing
  5658 ;; This function is called by:
  5659 ;;		_init_UART
  5660 ;; This function uses a non-reentrant model
  5661 ;;
  5662                           
  5663                           	psect	text21
  5664  002DE6                     __ptext21:
  5665                           	opt stack 0
  5666  002DE6                     _OpenUSART:
  5667                           	opt stack 29
  5668                           
  5669                           ;incstack = 0
  5670                           ;OpenUSART@config stored from wreg
  5671  002DE6  6E03               	movwf	OpenUSART@config,c
  5672  002DE8  0E00               	movlw	0
  5673  002DEA  6EAC               	movwf	4012,c	;volatile
  5674  002DEC  0E00               	movlw	0
  5675  002DEE  6EAB               	movwf	4011,c	;volatile
  5676  002DF0  A003               	btfss	OpenUSART@config,0,c
  5677  002DF2  D002               	goto	l2514
  5678  002DF4  88AC               	bsf	4012,4,c	;volatile
  5679  002DF6  D000               	goto	l2514
  5680  002DF8                     l2514:
  5681  002DF8  A203               	btfss	OpenUSART@config,1,c
  5682  002DFA  D003               	goto	l2518
  5683  002DFC  8CAC               	bsf	4012,6,c	;volatile
  5684  002DFE  8CAB               	bsf	4011,6,c	;volatile
  5685  002E00  D000               	goto	l2518
  5686  002E02                     l2518:
  5687  002E02  A403               	btfss	OpenUSART@config,2,c
  5688  002E04  D002               	goto	l2522
  5689  002E06  8EAC               	bsf	4012,7,c	;volatile
  5690  002E08  D000               	goto	l2522
  5691  002E0A                     l2522:
  5692  002E0A  A603               	btfss	OpenUSART@config,3,c
  5693  002E0C  D002               	goto	l388
  5694  002E0E  88AB               	bsf	4011,4,c	;volatile
  5695  002E10  D002               	goto	l2526
  5696  002E12                     l388:
  5697  002E12  8AAB               	bsf	4011,5,c	;volatile
  5698  002E14  D000               	goto	l2526
  5699  002E16                     l2526:
  5700  002E16  B803               	btfsc	OpenUSART@config,4,c
  5701  002E18  84AC               	bsf	4012,2,c	;volatile
  5702  002E1A  989E               	bcf	3998,4,c	;volatile
  5703  002E1C  AA03               	btfss	OpenUSART@config,5,c
  5704  002E1E  D002               	goto	l2534
  5705  002E20  86AB               	bsf	4011,3,c	;volatile
  5706  002E22  D000               	goto	l2534
  5707  002E24                     l2534:
  5708  002E24  AC03               	btfss	OpenUSART@config,6,c
  5709  002E26  D002               	goto	l392
  5710  002E28  8A9D               	bsf	3997,5,c	;volatile
  5711  002E2A  D001               	goto	l393
  5712  002E2C                     l392:
  5713  002E2C  9A9D               	bcf	3997,5,c	;volatile
  5714  002E2E                     l393:
  5715  002E2E  9A9E               	bcf	3998,5,c	;volatile
  5716  002E30  AE03               	btfss	OpenUSART@config,7,c
  5717  002E32  D002               	goto	l394
  5718  002E34  889D               	bsf	3997,4,c	;volatile
  5719  002E36  D001               	goto	l395
  5720  002E38                     l394:
  5721  002E38  989D               	bcf	3997,4,c	;volatile
  5722  002E3A                     l395:
  5723  002E3A  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  5724  002E3E  5002               	movf	OpenUSART@spbrg+1,w,c
  5725  002E40  6EB0               	movwf	4016,c	;volatile
  5726  002E42  8AAC               	bsf	4012,5,c	;volatile
  5727  002E44  8EAB               	bsf	4011,7,c	;volatile
  5728  002E46  9C94               	bcf	3988,6,c	;volatile
  5729  002E48  8E94               	bsf	3988,7,c	;volatile
  5730  002E4A  B8AC               	btfsc	4012,4,c	;volatile
  5731  002E4C  BEAC               	btfsc	4012,7,c	;volatile
  5732  002E4E  D002               	goto	l397
  5733  002E50  8C94               	bsf	3988,6,c	;volatile
  5734  002E52  D000               	goto	l397
  5735  002E54                     l397:
  5736  002E54  0012               	return		;funcret
  5737  002E56                     __end_of_OpenUSART:
  5738                           	opt stack 0
  5739                           tblptru	equ	0xFF8
  5740                           tblptrh	equ	0xFF7
  5741                           tblptrl	equ	0xFF6
  5742                           tablat	equ	0xFF5
  5743                           prodh	equ	0xFF4
  5744                           prodl	equ	0xFF3
  5745                           postinc0	equ	0xFEE
  5746                           wreg	equ	0xFE8
  5747                           postdec1	equ	0xFE5
  5748                           fsr1l	equ	0xFE1
  5749                           postinc2	equ	0xFDE
  5750                           postdec2	equ	0xFDD
  5751                           fsr2h	equ	0xFDA
  5752                           fsr2l	equ	0xFD9
  5753                           status	equ	0xFD8
  5754                           
  5755 ;; *************** function _get_full_ADC *****************
  5756 ;; Defined at:
  5757 ;;		line 226 in file "Lab7p4.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;		None
  5760 ;; Auto vars:     Size  Location     Type
  5761 ;;  result          2    4[COMRAM] int 
  5762 ;; Return value:  Size  Location     Type
  5763 ;;                  2    0[COMRAM] unsigned int 
  5764 ;; Registers used:
  5765 ;;		wreg, status,2, status,0
  5766 ;; Tracked objects:
  5767 ;;		On entry : 0/0
  5768 ;;		On exit  : 0/0
  5769 ;;		Unchanged: 0/0
  5770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5771 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5772 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5773 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5774 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5775 ;;Total ram usage:        6 bytes
  5776 ;; Hardware stack levels used:    1
  5777 ;; This function calls:
  5778 ;;		Nothing
  5779 ;; This function is called by:
  5780 ;;		_main
  5781 ;; This function uses a non-reentrant model
  5782 ;;
  5783                           
  5784                           	psect	text22
  5785  00309C                     __ptext22:
  5786                           	opt stack 0
  5787  00309C                     _get_full_ADC:
  5788                           	opt stack 30
  5789                           
  5790                           ;Lab7p4.c: 228: int result;
  5791                           ;Lab7p4.c: 229: ADCON0bits.GO=1;
  5792                           
  5793                           ;incstack = 0
  5794  00309C  82C2               	bsf	4034,1,c	;volatile
  5795                           
  5796                           ;Lab7p4.c: 230: while(ADCON0bits.DONE==1);
  5797  00309E  D000               	goto	l132
  5798  0030A0                     l132:
  5799  0030A0  B2C2               	btfsc	4034,1,c	;volatile
  5800  0030A2  D7FE               	goto	l132
  5801                           
  5802                           ;Lab7p4.c: 231: result = (ADRESH * 0x100) + ADRESL;
  5803  0030A4  50C4               	movf	4036,w,c	;volatile
  5804  0030A6  6E04               	movwf	(??_get_full_ADC+1)& (0+255),c
  5805  0030A8  6A03               	clrf	??_get_full_ADC& (0+255),c
  5806  0030AA  50C3               	movf	4035,w,c	;volatile
  5807  0030AC  2403               	addwf	??_get_full_ADC,w,c
  5808  0030AE  6E05               	movwf	get_full_ADC@result,c
  5809  0030B0  0E00               	movlw	0
  5810  0030B2  2004               	addwfc	??_get_full_ADC+1,w,c
  5811  0030B4  6E06               	movwf	get_full_ADC@result+1,c
  5812                           
  5813                           ;Lab7p4.c: 233: return result;
  5814  0030B6  C005  F001         	movff	get_full_ADC@result,?_get_full_ADC
  5815  0030BA  C006  F002         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  5816  0030BE  D000               	goto	l135
  5817  0030C0                     l135:
  5818  0030C0  0012               	return		;funcret
  5819  0030C2                     __end_of_get_full_ADC:
  5820                           	opt stack 0
  5821                           tblptru	equ	0xFF8
  5822                           tblptrh	equ	0xFF7
  5823                           tblptrl	equ	0xFF6
  5824                           tablat	equ	0xFF5
  5825                           prodh	equ	0xFF4
  5826                           prodl	equ	0xFF3
  5827                           postinc0	equ	0xFEE
  5828                           wreg	equ	0xFE8
  5829                           postdec1	equ	0xFE5
  5830                           fsr1l	equ	0xFE1
  5831                           postinc2	equ	0xFDE
  5832                           postdec2	equ	0xFDD
  5833                           fsr2h	equ	0xFDA
  5834                           fsr2l	equ	0xFD9
  5835                           status	equ	0xFD8
  5836                           
  5837 ;; *************** function ___ftdiv *****************
  5838 ;; Defined at:
  5839 ;;		line 54 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5840 ;; Parameters:    Size  Location     Type
  5841 ;;  f1              3   24[COMRAM] float 
  5842 ;;  f2              3   27[COMRAM] float 
  5843 ;; Auto vars:     Size  Location     Type
  5844 ;;  f3              3   34[COMRAM] float 
  5845 ;;  sign            1   38[COMRAM] unsigned char 
  5846 ;;  exp             1   37[COMRAM] unsigned char 
  5847 ;;  cntr            1   33[COMRAM] unsigned char 
  5848 ;; Return value:  Size  Location     Type
  5849 ;;                  3   24[COMRAM] float 
  5850 ;; Registers used:
  5851 ;;		wreg, status,2, status,0, cstack
  5852 ;; Tracked objects:
  5853 ;;		On entry : 0/0
  5854 ;;		On exit  : 0/0
  5855 ;;		Unchanged: 0/0
  5856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5857 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5858 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5859 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5860 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5861 ;;Total ram usage:       15 bytes
  5862 ;; Hardware stack levels used:    1
  5863 ;; Hardware stack levels required when called:    1
  5864 ;; This function calls:
  5865 ;;		___ftpack
  5866 ;; This function is called by:
  5867 ;;		_main
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870                           
  5871                           	psect	text23
  5872  0026D8                     __ptext23:
  5873                           	opt stack 0
  5874  0026D8                     ___ftdiv:
  5875                           	opt stack 29
  5876                           
  5877                           ;incstack = 0
  5878  0026D8  C01B  F01F         	movff	___ftdiv@f1+2,??___ftdiv
  5879  0026DC  6A20               	clrf	(??___ftdiv+1)& (0+255),c
  5880  0026DE  6A21               	clrf	(??___ftdiv+2)& (0+255),c
  5881  0026E0  341A               	rlcf	___ftdiv@f1+1,w,c
  5882  0026E2  361F               	rlcf	??___ftdiv& (0+255),f,c
  5883  0026E4  E301               	bnc	u3551
  5884  0026E6  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
  5885  0026E8                     u3551:
  5886  0026E8  501F               	movf	??___ftdiv,w,c
  5887  0026EA  6E26               	movwf	___ftdiv@exp,c
  5888  0026EC  5026               	movf	___ftdiv@exp,w,c
  5889  0026EE  A4D8               	btfss	status,2,c
  5890  0026F0  D002               	goto	l3224
  5891  0026F2  D00E               	goto	l3226
  5892  0026F4  D061               	goto	l797
  5893  0026F6                     l3224:
  5894  0026F6  C01E  F01F         	movff	___ftdiv@f2+2,??___ftdiv
  5895  0026FA  6A20               	clrf	(??___ftdiv+1)& (0+255),c
  5896  0026FC  6A21               	clrf	(??___ftdiv+2)& (0+255),c
  5897  0026FE  341D               	rlcf	___ftdiv@f2+1,w,c
  5898  002700  361F               	rlcf	??___ftdiv& (0+255),f,c
  5899  002702  E301               	bnc	u3571
  5900  002704  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
  5901  002706                     u3571:
  5902  002706  501F               	movf	??___ftdiv,w,c
  5903  002708  6E27               	movwf	___ftdiv@sign,c
  5904  00270A  5027               	movf	___ftdiv@sign,w,c
  5905  00270C  A4D8               	btfss	status,2,c
  5906  00270E  D007               	goto	l3230
  5907  002710                     l3226:
  5908  002710  0E00               	movlw	0
  5909  002712  6E19               	movwf	?___ftdiv,c
  5910  002714  0E00               	movlw	0
  5911  002716  6E1A               	movwf	?___ftdiv+1,c
  5912  002718  0E00               	movlw	0
  5913  00271A  6E1B               	movwf	?___ftdiv+2,c
  5914  00271C  D04D               	goto	l797
  5915  00271E                     l3230:
  5916  00271E  0E00               	movlw	0
  5917  002720  6E23               	movwf	___ftdiv@f3,c
  5918  002722  0E00               	movlw	0
  5919  002724  6E24               	movwf	___ftdiv@f3+1,c
  5920  002726  0E00               	movlw	0
  5921  002728  6E25               	movwf	___ftdiv@f3+2,c
  5922  00272A  5027               	movf	___ftdiv@sign,w,c
  5923  00272C  0F89               	addlw	137
  5924  00272E  5E26               	subwf	___ftdiv@exp,f,c
  5925  002730  C01B  F027         	movff	___ftdiv@f1+2,___ftdiv@sign
  5926  002734  501E               	movf	___ftdiv@f2+2,w,c
  5927  002736  1A27               	xorwf	___ftdiv@sign,f,c
  5928  002738  0E80               	movlw	128
  5929  00273A  1627               	andwf	___ftdiv@sign,f,c
  5930  00273C  8E1A               	bsf	___ftdiv@f1+1,7,c
  5931  00273E  0EFF               	movlw	255
  5932  002740  1619               	andwf	___ftdiv@f1,f,c
  5933  002742  0EFF               	movlw	255
  5934  002744  161A               	andwf	___ftdiv@f1+1,f,c
  5935  002746  0E00               	movlw	0
  5936  002748  161B               	andwf	___ftdiv@f1+2,f,c
  5937  00274A  8E1D               	bsf	___ftdiv@f2+1,7,c
  5938  00274C  0EFF               	movlw	255
  5939  00274E  161C               	andwf	___ftdiv@f2,f,c
  5940  002750  0EFF               	movlw	255
  5941  002752  161D               	andwf	___ftdiv@f2+1,f,c
  5942  002754  0E00               	movlw	0
  5943  002756  161E               	andwf	___ftdiv@f2+2,f,c
  5944  002758  0E18               	movlw	24
  5945  00275A  6E22               	movwf	___ftdiv@cntr,c
  5946  00275C  D000               	goto	l3250
  5947  00275E                     l3250:
  5948  00275E  90D8               	bcf	status,0,c
  5949  002760  3623               	rlcf	___ftdiv@f3,f,c
  5950  002762  3624               	rlcf	___ftdiv@f3+1,f,c
  5951  002764  3625               	rlcf	___ftdiv@f3+2,f,c
  5952  002766  501C               	movf	___ftdiv@f2,w,c
  5953  002768  5C19               	subwf	___ftdiv@f1,w,c
  5954  00276A  501D               	movf	___ftdiv@f2+1,w,c
  5955  00276C  581A               	subwfb	___ftdiv@f1+1,w,c
  5956  00276E  501E               	movf	___ftdiv@f2+2,w,c
  5957  002770  581B               	subwfb	___ftdiv@f1+2,w,c
  5958  002772  A0D8               	btfss	status,0,c
  5959  002774  D007               	goto	l800
  5960  002776  501C               	movf	___ftdiv@f2,w,c
  5961  002778  5E19               	subwf	___ftdiv@f1,f,c
  5962  00277A  501D               	movf	___ftdiv@f2+1,w,c
  5963  00277C  5A1A               	subwfb	___ftdiv@f1+1,f,c
  5964  00277E  501E               	movf	___ftdiv@f2+2,w,c
  5965  002780  5A1B               	subwfb	___ftdiv@f1+2,f,c
  5966  002782  8023               	bsf	___ftdiv@f3,0,c
  5967  002784                     l800:
  5968  002784  90D8               	bcf	status,0,c
  5969  002786  3619               	rlcf	___ftdiv@f1,f,c
  5970  002788  361A               	rlcf	___ftdiv@f1+1,f,c
  5971  00278A  361B               	rlcf	___ftdiv@f1+2,f,c
  5972  00278C  2E22               	decfsz	___ftdiv@cntr,f,c
  5973  00278E  D7E7               	goto	l3250
  5974  002790  D000               	goto	l3260
  5975  002792                     l3260:
  5976  002792  C023  F001         	movff	___ftdiv@f3,___ftpack@arg
  5977  002796  C024  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5978  00279A  C025  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5979  00279E  C026  F004         	movff	___ftdiv@exp,___ftpack@exp
  5980  0027A2  C027  F005         	movff	___ftdiv@sign,___ftpack@sign
  5981  0027A6  EC49  F014         	call	___ftpack	;wreg free
  5982  0027AA  C001  F019         	movff	?___ftpack,?___ftdiv
  5983  0027AE  C002  F01A         	movff	?___ftpack+1,?___ftdiv+1
  5984  0027B2  C003  F01B         	movff	?___ftpack+2,?___ftdiv+2
  5985  0027B6  D000               	goto	l797
  5986  0027B8                     l797:
  5987  0027B8  0012               	return		;funcret
  5988  0027BA                     __end_of___ftdiv:
  5989                           	opt stack 0
  5990                           tblptru	equ	0xFF8
  5991                           tblptrh	equ	0xFF7
  5992                           tblptrl	equ	0xFF6
  5993                           tablat	equ	0xFF5
  5994                           prodh	equ	0xFF4
  5995                           prodl	equ	0xFF3
  5996                           postinc0	equ	0xFEE
  5997                           wreg	equ	0xFE8
  5998                           postdec1	equ	0xFE5
  5999                           fsr1l	equ	0xFE1
  6000                           postinc2	equ	0xFDE
  6001                           postdec2	equ	0xFDD
  6002                           fsr2h	equ	0xFDA
  6003                           fsr2l	equ	0xFD9
  6004                           status	equ	0xFD8
  6005                           
  6006 ;; *************** function ___awtoft *****************
  6007 ;; Defined at:
  6008 ;;		line 32 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\awtoft.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  c               2   20[COMRAM] int 
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;  sign            1   23[COMRAM] unsigned char 
  6013 ;; Return value:  Size  Location     Type
  6014 ;;                  3   20[COMRAM] float 
  6015 ;; Registers used:
  6016 ;;		wreg, status,2, status,0, cstack
  6017 ;; Tracked objects:
  6018 ;;		On entry : 0/0
  6019 ;;		On exit  : 0/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6022 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6023 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6025 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6026 ;;Total ram usage:        4 bytes
  6027 ;; Hardware stack levels used:    1
  6028 ;; Hardware stack levels required when called:    1
  6029 ;; This function calls:
  6030 ;;		___ftpack
  6031 ;; This function is called by:
  6032 ;;		_main
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           	psect	text24
  6037  002EFA                     __ptext24:
  6038                           	opt stack 0
  6039  002EFA                     ___awtoft:
  6040                           	opt stack 29
  6041                           
  6042                           ;incstack = 0
  6043  002EFA  0E00               	movlw	0
  6044  002EFC  6E18               	movwf	___awtoft@sign,c
  6045  002EFE  AE16               	btfss	___awtoft@c+1,7,c
  6046  002F00  D007               	goto	l3272
  6047  002F02  6C15               	negf	___awtoft@c,c
  6048  002F04  1E16               	comf	___awtoft@c+1,f,c
  6049  002F06  B0D8               	btfsc	status,0,c
  6050  002F08  2A16               	incf	___awtoft@c+1,f,c
  6051  002F0A  0E01               	movlw	1
  6052  002F0C  6E18               	movwf	___awtoft@sign,c
  6053  002F0E  D000               	goto	l3272
  6054  002F10                     l3272:
  6055  002F10  C015  F001         	movff	___awtoft@c,___ftpack@arg
  6056  002F14  C016  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6057  002F18  6A03               	clrf	___ftpack@arg+2,c
  6058  002F1A  0E8E               	movlw	142
  6059  002F1C  6E04               	movwf	___ftpack@exp,c
  6060  002F1E  C018  F005         	movff	___awtoft@sign,___ftpack@sign
  6061  002F22  EC49  F014         	call	___ftpack	;wreg free
  6062  002F26  C001  F015         	movff	?___ftpack,?___awtoft
  6063  002F2A  C002  F016         	movff	?___ftpack+1,?___awtoft+1
  6064  002F2E  C003  F017         	movff	?___ftpack+2,?___awtoft+2
  6065  002F32  D000               	goto	l618
  6066  002F34                     l618:
  6067  002F34  0012               	return		;funcret
  6068  002F36                     __end_of___awtoft:
  6069                           	opt stack 0
  6070                           tblptru	equ	0xFF8
  6071                           tblptrh	equ	0xFF7
  6072                           tblptrl	equ	0xFF6
  6073                           tablat	equ	0xFF5
  6074                           prodh	equ	0xFF4
  6075                           prodl	equ	0xFF3
  6076                           postinc0	equ	0xFEE
  6077                           wreg	equ	0xFE8
  6078                           postdec1	equ	0xFE5
  6079                           fsr1l	equ	0xFE1
  6080                           postinc2	equ	0xFDE
  6081                           postdec2	equ	0xFDD
  6082                           fsr2h	equ	0xFDA
  6083                           fsr2l	equ	0xFD9
  6084                           status	equ	0xFD8
  6085                           
  6086 ;; *************** function ___ftpack *****************
  6087 ;; Defined at:
  6088 ;;		line 62 in file "C:\My Programs\Microchip\xc8\v1.34\sources\common\float.c"
  6089 ;; Parameters:    Size  Location     Type
  6090 ;;  arg             3    0[COMRAM] unsigned um
  6091 ;;  exp             1    3[COMRAM] unsigned char 
  6092 ;;  sign            1    4[COMRAM] unsigned char 
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;		None
  6095 ;; Return value:  Size  Location     Type
  6096 ;;                  3    0[COMRAM] float 
  6097 ;; Registers used:
  6098 ;;		wreg, status,2, status,0
  6099 ;; Tracked objects:
  6100 ;;		On entry : 0/0
  6101 ;;		On exit  : 0/0
  6102 ;;		Unchanged: 0/0
  6103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6104 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6106 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6107 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6108 ;;Total ram usage:        8 bytes
  6109 ;; Hardware stack levels used:    1
  6110 ;; This function calls:
  6111 ;;		Nothing
  6112 ;; This function is called by:
  6113 ;;		___awtoft
  6114 ;;		___ftadd
  6115 ;;		___ftdiv
  6116 ;;		___ftmul
  6117 ;;		___lltoft
  6118 ;; This function uses a non-reentrant model
  6119 ;;
  6120                           
  6121                           	psect	text25
  6122  002892                     __ptext25:
  6123                           	opt stack 0
  6124  002892                     ___ftpack:
  6125                           	opt stack 27
  6126                           
  6127                           ;incstack = 0
  6128  002892  5004               	movf	___ftpack@exp,w,c
  6129  002894  B4D8               	btfsc	status,2,c
  6130  002896  D005               	goto	l2228
  6131  002898  5001               	movf	___ftpack@arg,w,c
  6132  00289A  1002               	iorwf	___ftpack@arg+1,w,c
  6133  00289C  1003               	iorwf	___ftpack@arg+2,w,c
  6134  00289E  A4D8               	btfss	status,2,c
  6135  0028A0  D00E               	goto	l2234
  6136  0028A2                     l2228:
  6137  0028A2  0E00               	movlw	0
  6138  0028A4  6E01               	movwf	?___ftpack,c
  6139  0028A6  0E00               	movlw	0
  6140  0028A8  6E02               	movwf	?___ftpack+1,c
  6141  0028AA  0E00               	movlw	0
  6142  0028AC  6E03               	movwf	?___ftpack+2,c
  6143  0028AE  D053               	goto	l725
  6144  0028B0  D006               	goto	l2234
  6145  0028B2                     l2232:
  6146  0028B2  2A04               	incf	___ftpack@exp,f,c
  6147  0028B4  90D8               	bcf	status,0,c
  6148  0028B6  3203               	rrcf	___ftpack@arg+2,f,c
  6149  0028B8  3202               	rrcf	___ftpack@arg+1,f,c
  6150  0028BA  3201               	rrcf	___ftpack@arg,f,c
  6151  0028BC  D000               	goto	l2234
  6152  0028BE                     l2234:
  6153  0028BE  0E00               	movlw	0
  6154  0028C0  1401               	andwf	___ftpack@arg,w,c
  6155  0028C2  6E06               	movwf	??___ftpack& (0+255),c
  6156  0028C4  0E00               	movlw	0
  6157  0028C6  1402               	andwf	___ftpack@arg+1,w,c
  6158  0028C8  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6159  0028CA  0EFE               	movlw	254
  6160  0028CC  1403               	andwf	___ftpack@arg+2,w,c
  6161  0028CE  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6162  0028D0  5006               	movf	??___ftpack,w,c
  6163  0028D2  1007               	iorwf	??___ftpack+1,w,c
  6164  0028D4  1008               	iorwf	??___ftpack+2,w,c
  6165  0028D6  B4D8               	btfsc	status,2,c
  6166  0028D8  D00E               	goto	l2240
  6167  0028DA  D7EB               	goto	l2232
  6168  0028DC  D00C               	goto	l2240
  6169  0028DE                     l2236:
  6170  0028DE  2A04               	incf	___ftpack@exp,f,c
  6171  0028E0  0E01               	movlw	1
  6172  0028E2  2601               	addwf	___ftpack@arg,f,c
  6173  0028E4  0E00               	movlw	0
  6174  0028E6  2202               	addwfc	___ftpack@arg+1,f,c
  6175  0028E8  0E00               	movlw	0
  6176  0028EA  2203               	addwfc	___ftpack@arg+2,f,c
  6177  0028EC  90D8               	bcf	status,0,c
  6178  0028EE  3203               	rrcf	___ftpack@arg+2,f,c
  6179  0028F0  3202               	rrcf	___ftpack@arg+1,f,c
  6180  0028F2  3201               	rrcf	___ftpack@arg,f,c
  6181  0028F4  D000               	goto	l2240
  6182  0028F6                     l2240:
  6183  0028F6  0E00               	movlw	0
  6184  0028F8  1401               	andwf	___ftpack@arg,w,c
  6185  0028FA  6E06               	movwf	??___ftpack& (0+255),c
  6186  0028FC  0E00               	movlw	0
  6187  0028FE  1402               	andwf	___ftpack@arg+1,w,c
  6188  002900  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6189  002902  0EFF               	movlw	255
  6190  002904  1403               	andwf	___ftpack@arg+2,w,c
  6191  002906  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6192  002908  5006               	movf	??___ftpack,w,c
  6193  00290A  1007               	iorwf	??___ftpack+1,w,c
  6194  00290C  1008               	iorwf	??___ftpack+2,w,c
  6195  00290E  B4D8               	btfsc	status,2,c
  6196  002910  D008               	goto	l2244
  6197  002912  D7E5               	goto	l2236
  6198  002914  D006               	goto	l2244
  6199  002916                     l2242:
  6200  002916  0604               	decf	___ftpack@exp,f,c
  6201  002918  90D8               	bcf	status,0,c
  6202  00291A  3601               	rlcf	___ftpack@arg,f,c
  6203  00291C  3602               	rlcf	___ftpack@arg+1,f,c
  6204  00291E  3603               	rlcf	___ftpack@arg+2,f,c
  6205  002920  D000               	goto	l2244
  6206  002922                     l2244:
  6207  002922  BE02               	btfsc	___ftpack@arg+1,7,c
  6208  002924  D004               	goto	l736
  6209  002926  0E02               	movlw	2
  6210  002928  6004               	cpfslt	___ftpack@exp,c
  6211  00292A  D7F5               	goto	l2242
  6212  00292C  D000               	goto	l736
  6213  00292E                     l736:
  6214  00292E  B004               	btfsc	___ftpack@exp,0,c
  6215  002930  D002               	goto	l2250
  6216  002932  9E02               	bcf	___ftpack@arg+1,7,c
  6217  002934  D000               	goto	l2250
  6218  002936                     l2250:
  6219  002936  90D8               	bcf	status,0,c
  6220  002938  3204               	rrcf	___ftpack@exp,f,c
  6221  00293A  5004               	movf	___ftpack@exp,w,c
  6222  00293C  1203               	iorwf	___ftpack@arg+2,f,c
  6223  00293E  5005               	movf	___ftpack@sign,w,c
  6224  002940  B4D8               	btfsc	status,2,c
  6225  002942  D002               	goto	l2256
  6226  002944  8E03               	bsf	___ftpack@arg+2,7,c
  6227  002946  D000               	goto	l2256
  6228  002948                     l2256:
  6229  002948  C001  F001         	movff	___ftpack@arg,?___ftpack
  6230  00294C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6231  002950  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6232  002954  D000               	goto	l725
  6233  002956                     l725:
  6234  002956  0012               	return		;funcret
  6235  002958                     __end_of___ftpack:
  6236                           	opt stack 0
  6237                           tblptru	equ	0xFF8
  6238                           tblptrh	equ	0xFF7
  6239                           tblptrl	equ	0xFF6
  6240                           tablat	equ	0xFF5
  6241                           prodh	equ	0xFF4
  6242                           prodl	equ	0xFF3
  6243                           postinc0	equ	0xFEE
  6244                           wreg	equ	0xFE8
  6245                           postdec1	equ	0xFE5
  6246                           fsr1l	equ	0xFE1
  6247                           postinc2	equ	0xFDE
  6248                           postdec2	equ	0xFDD
  6249                           fsr2h	equ	0xFDA
  6250                           fsr2l	equ	0xFD9
  6251                           status	equ	0xFD8
  6252                           
  6253 ;; *************** function _Select_ADC_Channel *****************
  6254 ;; Defined at:
  6255 ;;		line 221 in file "Lab7p4.c"
  6256 ;; Parameters:    Size  Location     Type
  6257 ;;  channel         1    wreg     unsigned char 
  6258 ;; Auto vars:     Size  Location     Type
  6259 ;;  channel         1    0[COMRAM] unsigned char 
  6260 ;; Return value:  Size  Location     Type
  6261 ;;		None               void
  6262 ;; Registers used:
  6263 ;;		wreg, status,2, status,0, prodl, prodh
  6264 ;; Tracked objects:
  6265 ;;		On entry : 0/0
  6266 ;;		On exit  : 0/0
  6267 ;;		Unchanged: 0/0
  6268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6270 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6272 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6273 ;;Total ram usage:        1 bytes
  6274 ;; Hardware stack levels used:    1
  6275 ;; This function calls:
  6276 ;;		Nothing
  6277 ;; This function is called by:
  6278 ;;		_main
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           	psect	text26
  6283  0031D2                     __ptext26:
  6284                           	opt stack 0
  6285  0031D2                     _Select_ADC_Channel:
  6286                           	opt stack 30
  6287                           
  6288                           ;incstack = 0
  6289                           ;Select_ADC_Channel@channel stored from wreg
  6290  0031D2  6E01               	movwf	Select_ADC_Channel@channel,c
  6291                           
  6292                           ;Lab7p4.c: 223: ADCON0 = channel * 4 + 1;
  6293  0031D4  5001               	movf	Select_ADC_Channel@channel,w,c
  6294  0031D6  0D04               	mullw	4
  6295  0031D8  28F3               	incf	prodl,w,c
  6296  0031DA  6EC2               	movwf	4034,c	;volatile
  6297  0031DC  0012               	return		;funcret
  6298  0031DE                     __end_of_Select_ADC_Channel:
  6299                           	opt stack 0
  6300                           tblptru	equ	0xFF8
  6301                           tblptrh	equ	0xFF7
  6302                           tblptrl	equ	0xFF6
  6303                           tablat	equ	0xFF5
  6304                           prodh	equ	0xFF4
  6305                           prodl	equ	0xFF3
  6306                           postinc0	equ	0xFEE
  6307                           wreg	equ	0xFE8
  6308                           postdec1	equ	0xFE5
  6309                           fsr1l	equ	0xFE1
  6310                           postinc2	equ	0xFDE
  6311                           postdec2	equ	0xFDD
  6312                           fsr2h	equ	0xFDA
  6313                           fsr2l	equ	0xFD9
  6314                           status	equ	0xFD8
  6315                           
  6316 ;; *************** function _Night_Mode *****************
  6317 ;; Defined at:
  6318 ;;		line 162 in file "Lab7p4.c"
  6319 ;; Parameters:    Size  Location     Type
  6320 ;;		None
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;		None
  6323 ;; Return value:  Size  Location     Type
  6324 ;;		None               void
  6325 ;; Registers used:
  6326 ;;		wreg, status,2, status,0, cstack
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6336 ;;Total ram usage:        0 bytes
  6337 ;; Hardware stack levels used:    1
  6338 ;; Hardware stack levels required when called:    3
  6339 ;; This function calls:
  6340 ;;		_Set_EW
  6341 ;;		_Set_EWLT
  6342 ;;		_Set_NS
  6343 ;;		_Set_NSLT
  6344 ;;		_WAIT_N_SEC
  6345 ;; This function is called by:
  6346 ;;		_main
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350                           	psect	text27
  6351  002BD2                     __ptext27:
  6352                           	opt stack 0
  6353  002BD2                     _Night_Mode:
  6354                           	opt stack 27
  6355                           
  6356                           ;Lab7p4.c: 164: Set_NSLT (1);
  6357                           
  6358                           ;incstack = 0
  6359  002BD2  0E01               	movlw	1
  6360  002BD4  ECB9  F017         	call	_Set_NSLT
  6361                           
  6362                           ;Lab7p4.c: 165: Set_EW (1);
  6363  002BD8  0E01               	movlw	1
  6364  002BDA  EC0A  F018         	call	_Set_EW
  6365                           
  6366                           ;Lab7p4.c: 166: Set_EWLT (1);
  6367  002BDE  0E01               	movlw	1
  6368  002BE0  ECEF  F017         	call	_Set_EWLT
  6369                           
  6370                           ;Lab7p4.c: 167: Set_NS (2);
  6371  002BE4  0E02               	movlw	2
  6372  002BE6  ECD4  F017         	call	_Set_NS
  6373                           
  6374                           ;Lab7p4.c: 169: WAIT_N_SEC (8);
  6375  002BEA  0E08               	movlw	8
  6376  002BEC  EC84  F018         	call	_WAIT_N_SEC
  6377                           
  6378                           ;Lab7p4.c: 170: Set_NS (3);
  6379  002BF0  0E03               	movlw	3
  6380  002BF2  ECD4  F017         	call	_Set_NS
  6381                           
  6382                           ;Lab7p4.c: 172: WAIT_N_SEC (2);
  6383  002BF6  0E02               	movlw	2
  6384  002BF8  EC84  F018         	call	_WAIT_N_SEC
  6385                           
  6386                           ;Lab7p4.c: 173: Set_NS (1);
  6387  002BFC  0E01               	movlw	1
  6388  002BFE  ECD4  F017         	call	_Set_NS
  6389                           
  6390                           ;Lab7p4.c: 175: if (PORTAbits.RA4 == 1)
  6391  002C02  A880               	btfss	3968,4,c	;volatile
  6392  002C04  D00F               	goto	l118
  6393                           
  6394                           ;Lab7p4.c: 176: {
  6395                           ;Lab7p4.c: 177: Set_EWLT (2);
  6396  002C06  0E02               	movlw	2
  6397  002C08  ECEF  F017         	call	_Set_EWLT
  6398                           
  6399                           ;Lab7p4.c: 178: WAIT_N_SEC (6);
  6400  002C0C  0E06               	movlw	6
  6401  002C0E  EC84  F018         	call	_WAIT_N_SEC
  6402                           
  6403                           ;Lab7p4.c: 179: Set_EWLT (3);
  6404  002C12  0E03               	movlw	3
  6405  002C14  ECEF  F017         	call	_Set_EWLT
  6406                           
  6407                           ;Lab7p4.c: 180: WAIT_N_SEC (2);
  6408  002C18  0E02               	movlw	2
  6409  002C1A  EC84  F018         	call	_WAIT_N_SEC
  6410                           
  6411                           ;Lab7p4.c: 181: Set_EWLT (1);
  6412  002C1E  0E01               	movlw	1
  6413  002C20  ECEF  F017         	call	_Set_EWLT
  6414  002C24                     l118:
  6415                           
  6416                           ;Lab7p4.c: 182: }
  6417                           ;Lab7p4.c: 184: Set_EW (2);
  6418  002C24  0E02               	movlw	2
  6419  002C26  EC0A  F018         	call	_Set_EW
  6420                           
  6421                           ;Lab7p4.c: 185: WAIT_N_SEC (9);
  6422  002C2A  0E09               	movlw	9
  6423  002C2C  EC84  F018         	call	_WAIT_N_SEC
  6424                           
  6425                           ;Lab7p4.c: 187: Set_EW (3);
  6426  002C30  0E03               	movlw	3
  6427  002C32  EC0A  F018         	call	_Set_EW
  6428                           
  6429                           ;Lab7p4.c: 188: WAIT_N_SEC (2);
  6430  002C36  0E02               	movlw	2
  6431  002C38  EC84  F018         	call	_WAIT_N_SEC
  6432                           
  6433                           ;Lab7p4.c: 190: Set_EW (1);
  6434  002C3C  0E01               	movlw	1
  6435  002C3E  EC0A  F018         	call	_Set_EW
  6436                           
  6437                           ;Lab7p4.c: 192: if (PORTAbits.RA3 == 1)
  6438  002C42  A680               	btfss	3968,3,c	;volatile
  6439  002C44  D010               	goto	l120
  6440                           
  6441                           ;Lab7p4.c: 193: {
  6442                           ;Lab7p4.c: 194: Set_NSLT (2);
  6443  002C46  0E02               	movlw	2
  6444  002C48  ECB9  F017         	call	_Set_NSLT
  6445                           
  6446                           ;Lab7p4.c: 195: WAIT_N_SEC (7);
  6447  002C4C  0E07               	movlw	7
  6448  002C4E  EC84  F018         	call	_WAIT_N_SEC
  6449                           
  6450                           ;Lab7p4.c: 197: Set_NSLT (3);
  6451  002C52  0E03               	movlw	3
  6452  002C54  ECB9  F017         	call	_Set_NSLT
  6453                           
  6454                           ;Lab7p4.c: 198: WAIT_N_SEC (2);
  6455  002C58  0E02               	movlw	2
  6456  002C5A  EC84  F018         	call	_WAIT_N_SEC
  6457                           
  6458                           ;Lab7p4.c: 200: Set_NSLT (1);
  6459  002C5E  0E01               	movlw	1
  6460  002C60  ECB9  F017         	call	_Set_NSLT
  6461  002C64  D000               	goto	l120
  6462  002C66                     l120:
  6463  002C66  0012               	return		;funcret
  6464  002C68                     __end_of_Night_Mode:
  6465                           	opt stack 0
  6466                           tblptru	equ	0xFF8
  6467                           tblptrh	equ	0xFF7
  6468                           tblptrl	equ	0xFF6
  6469                           tablat	equ	0xFF5
  6470                           prodh	equ	0xFF4
  6471                           prodl	equ	0xFF3
  6472                           postinc0	equ	0xFEE
  6473                           wreg	equ	0xFE8
  6474                           postdec1	equ	0xFE5
  6475                           fsr1l	equ	0xFE1
  6476                           postinc2	equ	0xFDE
  6477                           postdec2	equ	0xFDD
  6478                           fsr2h	equ	0xFDA
  6479                           fsr2l	equ	0xFD9
  6480                           status	equ	0xFD8
  6481                           
  6482 ;; *************** function _Init_TRIS *****************
  6483 ;; Defined at:
  6484 ;;		line 212 in file "Lab7p4.c"
  6485 ;; Parameters:    Size  Location     Type
  6486 ;;		None
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;		None
  6489 ;; Return value:  Size  Location     Type
  6490 ;;		None               void
  6491 ;; Registers used:
  6492 ;;		wreg, status,2
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6502 ;;Total ram usage:        0 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; This function calls:
  6505 ;;		Nothing
  6506 ;; This function is called by:
  6507 ;;		_main
  6508 ;; This function uses a non-reentrant model
  6509 ;;
  6510                           
  6511                           	psect	text28
  6512  003156                     __ptext28:
  6513                           	opt stack 0
  6514  003156                     _Init_TRIS:
  6515                           	opt stack 30
  6516                           
  6517                           ;Lab7p4.c: 214: TRISA = 0x1F;
  6518                           
  6519                           ;incstack = 0
  6520  003156  0E1F               	movlw	31
  6521  003158  6E92               	movwf	3986,c	;volatile
  6522                           
  6523                           ;Lab7p4.c: 215: TRISB = 0x00;
  6524  00315A  0E00               	movlw	0
  6525  00315C  6E93               	movwf	3987,c	;volatile
  6526                           
  6527                           ;Lab7p4.c: 216: TRISC = 0x00;
  6528  00315E  0E00               	movlw	0
  6529  003160  6E94               	movwf	3988,c	;volatile
  6530                           
  6531                           ;Lab7p4.c: 217: TRISD = 0x00;
  6532  003162  0E00               	movlw	0
  6533  003164  6E95               	movwf	3989,c	;volatile
  6534                           
  6535                           ;Lab7p4.c: 218: TRISE = 0x00;
  6536  003166  0E00               	movlw	0
  6537  003168  6E96               	movwf	3990,c	;volatile
  6538  00316A  0012               	return		;funcret
  6539  00316C                     __end_of_Init_TRIS:
  6540                           	opt stack 0
  6541                           tblptru	equ	0xFF8
  6542                           tblptrh	equ	0xFF7
  6543                           tblptrl	equ	0xFF6
  6544                           tablat	equ	0xFF5
  6545                           prodh	equ	0xFF4
  6546                           prodl	equ	0xFF3
  6547                           postinc0	equ	0xFEE
  6548                           wreg	equ	0xFE8
  6549                           postdec1	equ	0xFE5
  6550                           fsr1l	equ	0xFE1
  6551                           postinc2	equ	0xFDE
  6552                           postdec2	equ	0xFDD
  6553                           fsr2h	equ	0xFDA
  6554                           fsr2l	equ	0xFD9
  6555                           status	equ	0xFD8
  6556                           
  6557 ;; *************** function _Init_ADC *****************
  6558 ;; Defined at:
  6559 ;;		line 205 in file "Lab7p4.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;		None
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;		None
  6564 ;; Return value:  Size  Location     Type
  6565 ;;		None               void
  6566 ;; Registers used:
  6567 ;;		wreg, status,2
  6568 ;; Tracked objects:
  6569 ;;		On entry : 0/0
  6570 ;;		On exit  : 0/0
  6571 ;;		Unchanged: 0/0
  6572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;Total ram usage:        0 bytes
  6578 ;; Hardware stack levels used:    1
  6579 ;; This function calls:
  6580 ;;		Nothing
  6581 ;; This function is called by:
  6582 ;;		_main
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586                           	psect	text29
  6587  0031B6                     __ptext29:
  6588                           	opt stack 0
  6589  0031B6                     _Init_ADC:
  6590                           	opt stack 30
  6591                           
  6592                           ;Lab7p4.c: 207: ADCON0 = 0b00000001;
  6593                           
  6594                           ;incstack = 0
  6595  0031B6  0E01               	movlw	1
  6596  0031B8  6EC2               	movwf	4034,c	;volatile
  6597                           
  6598                           ;Lab7p4.c: 208: ADCON1 = 0b00001110;
  6599  0031BA  0E0E               	movlw	14
  6600  0031BC  6EC1               	movwf	4033,c	;volatile
  6601                           
  6602                           ;Lab7p4.c: 209: ADCON2 = 0xA9;
  6603  0031BE  0EA9               	movlw	169
  6604  0031C0  6EC0               	movwf	4032,c	;volatile
  6605  0031C2  0012               	return		;funcret
  6606  0031C4                     __end_of_Init_ADC:
  6607                           	opt stack 0
  6608                           tblptru	equ	0xFF8
  6609                           tblptrh	equ	0xFF7
  6610                           tblptrl	equ	0xFF6
  6611                           tablat	equ	0xFF5
  6612                           prodh	equ	0xFF4
  6613                           prodl	equ	0xFF3
  6614                           postinc0	equ	0xFEE
  6615                           wreg	equ	0xFE8
  6616                           postdec1	equ	0xFE5
  6617                           fsr1l	equ	0xFE1
  6618                           postinc2	equ	0xFDE
  6619                           postdec2	equ	0xFDD
  6620                           fsr2h	equ	0xFDA
  6621                           fsr2l	equ	0xFD9
  6622                           status	equ	0xFD8
  6623                           
  6624 ;; *************** function _Day_Mode *****************
  6625 ;; Defined at:
  6626 ;;		line 109 in file "Lab7p4.c"
  6627 ;; Parameters:    Size  Location     Type
  6628 ;;		None
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;		None
  6631 ;; Return value:  Size  Location     Type
  6632 ;;		None               void
  6633 ;; Registers used:
  6634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6644 ;;Total ram usage:        0 bytes
  6645 ;; Hardware stack levels used:    1
  6646 ;; Hardware stack levels required when called:    3
  6647 ;; This function calls:
  6648 ;;		_PED_Control
  6649 ;;		_Set_EW
  6650 ;;		_Set_EWLT
  6651 ;;		_Set_NS
  6652 ;;		_Set_NSLT
  6653 ;;		_WAIT_N_SEC
  6654 ;; This function is called by:
  6655 ;;		_main
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           	psect	text30
  6660  002958                     __ptext30:
  6661                           	opt stack 0
  6662  002958                     _Day_Mode:
  6663                           	opt stack 27
  6664                           
  6665                           ;Lab7p4.c: 111: Set_NSLT (1);
  6666                           
  6667                           ;incstack = 0
  6668  002958  0E01               	movlw	1
  6669  00295A  ECB9  F017         	call	_Set_NSLT
  6670                           
  6671                           ;Lab7p4.c: 112: Set_EW (1);
  6672  00295E  0E01               	movlw	1
  6673  002960  EC0A  F018         	call	_Set_EW
  6674                           
  6675                           ;Lab7p4.c: 113: Set_EWLT (1);
  6676  002964  0E01               	movlw	1
  6677  002966  ECEF  F017         	call	_Set_EWLT
  6678                           
  6679                           ;Lab7p4.c: 114: Set_NS (2);
  6680  00296A  0E02               	movlw	2
  6681  00296C  ECD4  F017         	call	_Set_NS
  6682                           
  6683                           ;Lab7p4.c: 116: if (PORTAbits.RA1 == 1)
  6684  002970  A280               	btfss	3968,1,c	;volatile
  6685  002972  D006               	goto	l3188
  6686                           
  6687                           ;Lab7p4.c: 117: {
  6688                           ;Lab7p4.c: 118: PED_Control(0, 9);
  6689  002974  0E09               	movlw	9
  6690  002976  6E03               	movwf	PED_Control@Num_Sec,c
  6691  002978  0E00               	movlw	0
  6692  00297A  EC07  F015         	call	_PED_Control
  6693  00297E  D000               	goto	l3188
  6694  002980                     l3188:
  6695                           
  6696                           ;Lab7p4.c: 119: }
  6697                           ;Lab7p4.c: 120: WAIT_N_SEC (8);
  6698  002980  0E08               	movlw	8
  6699  002982  EC84  F018         	call	_WAIT_N_SEC
  6700                           
  6701                           ;Lab7p4.c: 122: Set_NS (3);
  6702  002986  0E03               	movlw	3
  6703  002988  ECD4  F017         	call	_Set_NS
  6704                           
  6705                           ;Lab7p4.c: 123: WAIT_N_SEC (3);
  6706  00298C  0E03               	movlw	3
  6707  00298E  EC84  F018         	call	_WAIT_N_SEC
  6708                           
  6709                           ;Lab7p4.c: 125: Set_NS (1);
  6710  002992  0E01               	movlw	1
  6711  002994  ECD4  F017         	call	_Set_NS
  6712                           
  6713                           ;Lab7p4.c: 127: if (PORTAbits.RA4 == 1)
  6714  002998  A880               	btfss	3968,4,c	;volatile
  6715  00299A  D00F               	goto	l112
  6716                           
  6717                           ;Lab7p4.c: 128: {
  6718                           ;Lab7p4.c: 129: Set_EWLT (2);
  6719  00299C  0E02               	movlw	2
  6720  00299E  ECEF  F017         	call	_Set_EWLT
  6721                           
  6722                           ;Lab7p4.c: 130: WAIT_N_SEC (7);
  6723  0029A2  0E07               	movlw	7
  6724  0029A4  EC84  F018         	call	_WAIT_N_SEC
  6725                           
  6726                           ;Lab7p4.c: 131: Set_EWLT (3);
  6727  0029A8  0E03               	movlw	3
  6728  0029AA  ECEF  F017         	call	_Set_EWLT
  6729                           
  6730                           ;Lab7p4.c: 132: WAIT_N_SEC (3);
  6731  0029AE  0E03               	movlw	3
  6732  0029B0  EC84  F018         	call	_WAIT_N_SEC
  6733                           
  6734                           ;Lab7p4.c: 133: Set_EWLT (1);
  6735  0029B4  0E01               	movlw	1
  6736  0029B6  ECEF  F017         	call	_Set_EWLT
  6737  0029BA                     l112:
  6738                           
  6739                           ;Lab7p4.c: 134: }
  6740                           ;Lab7p4.c: 136: Set_EW (2);
  6741  0029BA  0E02               	movlw	2
  6742  0029BC  EC0A  F018         	call	_Set_EW
  6743                           
  6744                           ;Lab7p4.c: 138: if (PORTAbits.RA2 == 1)
  6745  0029C0  A480               	btfss	3968,2,c	;volatile
  6746  0029C2  D006               	goto	l3204
  6747                           
  6748                           ;Lab7p4.c: 139: {
  6749                           ;Lab7p4.c: 140: PED_Control(1, 8);
  6750  0029C4  0E08               	movlw	8
  6751  0029C6  6E03               	movwf	PED_Control@Num_Sec,c
  6752  0029C8  0E01               	movlw	1
  6753  0029CA  EC07  F015         	call	_PED_Control
  6754  0029CE  D000               	goto	l3204
  6755  0029D0                     l3204:
  6756                           
  6757                           ;Lab7p4.c: 141: }
  6758                           ;Lab7p4.c: 142: WAIT_N_SEC (6);
  6759  0029D0  0E06               	movlw	6
  6760  0029D2  EC84  F018         	call	_WAIT_N_SEC
  6761                           
  6762                           ;Lab7p4.c: 144: Set_EW (3);
  6763  0029D6  0E03               	movlw	3
  6764  0029D8  EC0A  F018         	call	_Set_EW
  6765                           
  6766                           ;Lab7p4.c: 145: WAIT_N_SEC (3);
  6767  0029DC  0E03               	movlw	3
  6768  0029DE  EC84  F018         	call	_WAIT_N_SEC
  6769                           
  6770                           ;Lab7p4.c: 147: Set_EW (1);
  6771  0029E2  0E01               	movlw	1
  6772  0029E4  EC0A  F018         	call	_Set_EW
  6773                           
  6774                           ;Lab7p4.c: 149: if (PORTAbits.RA3 == 1)
  6775  0029E8  A680               	btfss	3968,3,c	;volatile
  6776  0029EA  D010               	goto	l115
  6777                           
  6778                           ;Lab7p4.c: 150: {
  6779                           ;Lab7p4.c: 151: Set_NSLT (2);
  6780  0029EC  0E02               	movlw	2
  6781  0029EE  ECB9  F017         	call	_Set_NSLT
  6782                           
  6783                           ;Lab7p4.c: 152: WAIT_N_SEC (6);
  6784  0029F2  0E06               	movlw	6
  6785  0029F4  EC84  F018         	call	_WAIT_N_SEC
  6786                           
  6787                           ;Lab7p4.c: 154: Set_NSLT (3);
  6788  0029F8  0E03               	movlw	3
  6789  0029FA  ECB9  F017         	call	_Set_NSLT
  6790                           
  6791                           ;Lab7p4.c: 155: WAIT_N_SEC (3);
  6792  0029FE  0E03               	movlw	3
  6793  002A00  EC84  F018         	call	_WAIT_N_SEC
  6794                           
  6795                           ;Lab7p4.c: 157: Set_NSLT (1);
  6796  002A04  0E01               	movlw	1
  6797  002A06  ECB9  F017         	call	_Set_NSLT
  6798  002A0A  D000               	goto	l115
  6799  002A0C                     l115:
  6800  002A0C  0012               	return		;funcret
  6801  002A0E                     __end_of_Day_Mode:
  6802                           	opt stack 0
  6803                           tblptru	equ	0xFF8
  6804                           tblptrh	equ	0xFF7
  6805                           tblptrl	equ	0xFF6
  6806                           tablat	equ	0xFF5
  6807                           prodh	equ	0xFF4
  6808                           prodl	equ	0xFF3
  6809                           postinc0	equ	0xFEE
  6810                           wreg	equ	0xFE8
  6811                           postdec1	equ	0xFE5
  6812                           fsr1l	equ	0xFE1
  6813                           postinc2	equ	0xFDE
  6814                           postdec2	equ	0xFDD
  6815                           fsr2h	equ	0xFDA
  6816                           fsr2l	equ	0xFD9
  6817                           status	equ	0xFD8
  6818                           
  6819 ;; *************** function _WAIT_N_SEC *****************
  6820 ;; Defined at:
  6821 ;;		line 255 in file "Lab7p4.c"
  6822 ;; Parameters:    Size  Location     Type
  6823 ;;  seconds         1    wreg     unsigned char 
  6824 ;; Auto vars:     Size  Location     Type
  6825 ;;  seconds         1    0[COMRAM] unsigned char 
  6826 ;;  i               1    1[COMRAM] unsigned char 
  6827 ;; Return value:  Size  Location     Type
  6828 ;;		None               void
  6829 ;; Registers used:
  6830 ;;		wreg, status,2, status,0, cstack
  6831 ;; Tracked objects:
  6832 ;;		On entry : 0/0
  6833 ;;		On exit  : 0/0
  6834 ;;		Unchanged: 0/0
  6835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6837 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6839 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6840 ;;Total ram usage:        2 bytes
  6841 ;; Hardware stack levels used:    1
  6842 ;; Hardware stack levels required when called:    2
  6843 ;; This function calls:
  6844 ;;		_WAIT_1_SEC
  6845 ;; This function is called by:
  6846 ;;		_Day_Mode
  6847 ;;		_Night_Mode
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           	psect	text31
  6852  003108                     __ptext31:
  6853                           	opt stack 0
  6854  003108                     _WAIT_N_SEC:
  6855                           	opt stack 27
  6856                           
  6857                           ;incstack = 0
  6858                           ;WAIT_N_SEC@seconds stored from wreg
  6859  003108  6E01               	movwf	WAIT_N_SEC@seconds,c
  6860                           
  6861                           ;Lab7p4.c: 257: char i;
  6862                           ;Lab7p4.c: 258: for (i = 0; i < seconds; i++)
  6863  00310A  0E00               	movlw	0
  6864  00310C  6E02               	movwf	WAIT_N_SEC@i,c
  6865  00310E  D004               	goto	l1398
  6866  003110                     l1394:
  6867                           
  6868                           ;Lab7p4.c: 259: {
  6869                           ;Lab7p4.c: 260: WAIT_1_SEC();
  6870  003110  ECE2  F018         	call	_WAIT_1_SEC	;wreg free
  6871  003114  2A02               	incf	WAIT_N_SEC@i,f,c
  6872  003116  D000               	goto	l1398
  6873  003118                     l1398:
  6874  003118  5001               	movf	WAIT_N_SEC@seconds,w,c
  6875  00311A  5C02               	subwf	WAIT_N_SEC@i,w,c
  6876  00311C  A0D8               	btfss	status,0,c
  6877  00311E  D7F8               	goto	l1394
  6878  003120  0012               	return		;funcret
  6879  003122                     __end_of_WAIT_N_SEC:
  6880                           	opt stack 0
  6881                           tblptru	equ	0xFF8
  6882                           tblptrh	equ	0xFF7
  6883                           tblptrl	equ	0xFF6
  6884                           tablat	equ	0xFF5
  6885                           prodh	equ	0xFF4
  6886                           prodl	equ	0xFF3
  6887                           postinc0	equ	0xFEE
  6888                           wreg	equ	0xFE8
  6889                           postdec1	equ	0xFE5
  6890                           fsr1l	equ	0xFE1
  6891                           postinc2	equ	0xFDE
  6892                           postdec2	equ	0xFDD
  6893                           fsr2h	equ	0xFDA
  6894                           fsr2l	equ	0xFD9
  6895                           status	equ	0xFD8
  6896                           
  6897 ;; *************** function _WAIT_1_SEC *****************
  6898 ;; Defined at:
  6899 ;;		line 236 in file "Lab7p4.c"
  6900 ;; Parameters:    Size  Location     Type
  6901 ;;		None
  6902 ;; Auto vars:     Size  Location     Type
  6903 ;;		None
  6904 ;; Return value:  Size  Location     Type
  6905 ;;		None               void
  6906 ;; Registers used:
  6907 ;;		wreg, status,2, cstack
  6908 ;; Tracked objects:
  6909 ;;		On entry : 0/0
  6910 ;;		On exit  : 0/0
  6911 ;;		Unchanged: 0/0
  6912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6917 ;;Total ram usage:        0 bytes
  6918 ;; Hardware stack levels used:    1
  6919 ;; Hardware stack levels required when called:    1
  6920 ;; This function calls:
  6921 ;;		_WAIT_HALF_SEC
  6922 ;; This function is called by:
  6923 ;;		_WAIT_N_SEC
  6924 ;; This function uses a non-reentrant model
  6925 ;;
  6926                           
  6927                           	psect	text32
  6928  0031C4                     __ptext32:
  6929                           	opt stack 0
  6930  0031C4                     _WAIT_1_SEC:
  6931                           	opt stack 27
  6932                           
  6933                           ;Lab7p4.c: 238: PORTDbits.RD7 = 1;
  6934                           
  6935                           ;incstack = 0
  6936  0031C4  8E83               	bsf	3971,7,c	;volatile
  6937                           
  6938                           ;Lab7p4.c: 239: WAIT_HALF_SEC();
  6939  0031C6  EC91  F018         	call	_WAIT_HALF_SEC	;wreg free
  6940                           
  6941                           ;Lab7p4.c: 240: PORTDbits.RD7 = 0;
  6942  0031CA  9E83               	bcf	3971,7,c	;volatile
  6943                           
  6944                           ;Lab7p4.c: 241: WAIT_HALF_SEC();
  6945  0031CC  EC91  F018         	call	_WAIT_HALF_SEC	;wreg free
  6946  0031D0  0012               	return		;funcret
  6947  0031D2                     __end_of_WAIT_1_SEC:
  6948                           	opt stack 0
  6949                           tblptru	equ	0xFF8
  6950                           tblptrh	equ	0xFF7
  6951                           tblptrl	equ	0xFF6
  6952                           tablat	equ	0xFF5
  6953                           prodh	equ	0xFF4
  6954                           prodl	equ	0xFF3
  6955                           postinc0	equ	0xFEE
  6956                           wreg	equ	0xFE8
  6957                           postdec1	equ	0xFE5
  6958                           fsr1l	equ	0xFE1
  6959                           postinc2	equ	0xFDE
  6960                           postdec2	equ	0xFDD
  6961                           fsr2h	equ	0xFDA
  6962                           fsr2l	equ	0xFD9
  6963                           status	equ	0xFD8
  6964                           
  6965 ;; *************** function _Set_NSLT *****************
  6966 ;; Defined at:
  6967 ;;		line 345 in file "Lab7p4.c"
  6968 ;; Parameters:    Size  Location     Type
  6969 ;;  color           1    wreg     unsigned char 
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;  color           1    0[COMRAM] unsigned char 
  6972 ;; Return value:  Size  Location     Type
  6973 ;;		None               void
  6974 ;; Registers used:
  6975 ;;		wreg, status,2, status,0
  6976 ;; Tracked objects:
  6977 ;;		On entry : 0/0
  6978 ;;		On exit  : 0/0
  6979 ;;		Unchanged: 0/0
  6980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6984 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6985 ;;Total ram usage:        1 bytes
  6986 ;; Hardware stack levels used:    1
  6987 ;; This function calls:
  6988 ;;		Nothing
  6989 ;; This function is called by:
  6990 ;;		_Day_Mode
  6991 ;;		_Night_Mode
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995                           	psect	text33
  6996  002F72                     __ptext33:
  6997                           	opt stack 0
  6998  002F72                     _Set_NSLT:
  6999                           	opt stack 29
  7000                           
  7001                           ;incstack = 0
  7002                           ;Set_NSLT@color stored from wreg
  7003  002F72  6E01               	movwf	Set_NSLT@color,c
  7004                           
  7005                           ;Lab7p4.c: 347: switch (color)
  7006  002F74  D00A               	goto	l1328
  7007  002F76                     l193:
  7008  002F76  9881               	bcf	3969,4,c	;volatile
  7009  002F78  D001               	goto	L8
  7010  002F7A                     l195:
  7011  002F7A  8881               	bsf	3969,4,c	;volatile
  7012  002F7C                     L8:
  7013  002F7C  9A81               	bcf	3969,5,c	;volatile
  7014  002F7E  D013               	goto	l198
  7015  002F80                     l196:
  7016  002F80  9881               	bcf	3969,4,c	;volatile
  7017  002F82  D001               	goto	L9
  7018  002F84                     l197:
  7019  002F84  8881               	bsf	3969,4,c	;volatile
  7020  002F86                     L9:
  7021  002F86  8A81               	bsf	3969,5,c	;volatile
  7022                           
  7023                           ;Lab7p4.c: 353: }
  7024  002F88  D00E               	goto	l198
  7025  002F8A                     l1328:
  7026  002F8A  5001               	movf	Set_NSLT@color,w,c
  7027                           
  7028                           ; Switch size 1, requested type "space"
  7029                           ; Number of cases is 4, Range of values is 0 to 3
  7030                           ; switch strategies available:
  7031                           ; Name         Instructions Cycles
  7032                           ; simple_byte           13     7 (average)
  7033                           ;	Chosen strategy is simple_byte
  7034  002F8C  0A00               	xorlw	0	; case 0
  7035  002F8E  B4D8               	btfsc	status,2,c
  7036  002F90  D7F2               	goto	l193
  7037  002F92  0A01               	xorlw	1	; case 1
  7038  002F94  B4D8               	btfsc	status,2,c
  7039  002F96  D7F1               	goto	l195
  7040  002F98  0A03               	xorlw	3	; case 2
  7041  002F9A  B4D8               	btfsc	status,2,c
  7042  002F9C  D7F1               	goto	l196
  7043  002F9E  0A01               	xorlw	1	; case 3
  7044  002FA0  B4D8               	btfsc	status,2,c
  7045  002FA2  D7F0               	goto	l197
  7046  002FA4  D000               	goto	l198
  7047  002FA6                     l198:
  7048  002FA6  0012               	return		;funcret
  7049  002FA8                     __end_of_Set_NSLT:
  7050                           	opt stack 0
  7051                           tblptru	equ	0xFF8
  7052                           tblptrh	equ	0xFF7
  7053                           tblptrl	equ	0xFF6
  7054                           tablat	equ	0xFF5
  7055                           prodh	equ	0xFF4
  7056                           prodl	equ	0xFF3
  7057                           postinc0	equ	0xFEE
  7058                           wreg	equ	0xFE8
  7059                           postdec1	equ	0xFE5
  7060                           fsr1l	equ	0xFE1
  7061                           postinc2	equ	0xFDE
  7062                           postdec2	equ	0xFDD
  7063                           fsr2h	equ	0xFDA
  7064                           fsr2l	equ	0xFD9
  7065                           status	equ	0xFD8
  7066                           
  7067 ;; *************** function _Set_NS *****************
  7068 ;; Defined at:
  7069 ;;		line 334 in file "Lab7p4.c"
  7070 ;; Parameters:    Size  Location     Type
  7071 ;;  color           1    wreg     unsigned char 
  7072 ;; Auto vars:     Size  Location     Type
  7073 ;;  color           1    0[COMRAM] unsigned char 
  7074 ;; Return value:  Size  Location     Type
  7075 ;;		None               void
  7076 ;; Registers used:
  7077 ;;		wreg, status,2, status,0
  7078 ;; Tracked objects:
  7079 ;;		On entry : 0/0
  7080 ;;		On exit  : 0/0
  7081 ;;		Unchanged: 0/0
  7082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7084 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7086 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7087 ;;Total ram usage:        1 bytes
  7088 ;; Hardware stack levels used:    1
  7089 ;; This function calls:
  7090 ;;		Nothing
  7091 ;; This function is called by:
  7092 ;;		_Day_Mode
  7093 ;;		_Night_Mode
  7094 ;; This function uses a non-reentrant model
  7095 ;;
  7096                           
  7097                           	psect	text34
  7098  002FA8                     __ptext34:
  7099                           	opt stack 0
  7100  002FA8                     _Set_NS:
  7101                           	opt stack 29
  7102                           
  7103                           ;incstack = 0
  7104                           ;Set_NS@color stored from wreg
  7105  002FA8  6E01               	movwf	Set_NS@color,c
  7106                           
  7107                           ;Lab7p4.c: 336: switch (color)
  7108  002FAA  D00A               	goto	l1346
  7109  002FAC                     l184:
  7110  002FAC  9A80               	bcf	3968,5,c	;volatile
  7111  002FAE  D001               	goto	L10
  7112  002FB0                     l186:
  7113  002FB0  8A80               	bsf	3968,5,c	;volatile
  7114  002FB2                     L10:
  7115  002FB2  9081               	bcf	3969,0,c	;volatile
  7116  002FB4  D013               	goto	l189
  7117  002FB6                     l187:
  7118  002FB6  9A80               	bcf	3968,5,c	;volatile
  7119  002FB8  D001               	goto	L11
  7120  002FBA                     l188:
  7121  002FBA  8A80               	bsf	3968,5,c	;volatile
  7122  002FBC                     L11:
  7123  002FBC  8081               	bsf	3969,0,c	;volatile
  7124                           
  7125                           ;Lab7p4.c: 342: }
  7126  002FBE  D00E               	goto	l189
  7127  002FC0                     l1346:
  7128  002FC0  5001               	movf	Set_NS@color,w,c
  7129                           
  7130                           ; Switch size 1, requested type "space"
  7131                           ; Number of cases is 4, Range of values is 0 to 3
  7132                           ; switch strategies available:
  7133                           ; Name         Instructions Cycles
  7134                           ; simple_byte           13     7 (average)
  7135                           ;	Chosen strategy is simple_byte
  7136  002FC2  0A00               	xorlw	0	; case 0
  7137  002FC4  B4D8               	btfsc	status,2,c
  7138  002FC6  D7F2               	goto	l184
  7139  002FC8  0A01               	xorlw	1	; case 1
  7140  002FCA  B4D8               	btfsc	status,2,c
  7141  002FCC  D7F1               	goto	l186
  7142  002FCE  0A03               	xorlw	3	; case 2
  7143  002FD0  B4D8               	btfsc	status,2,c
  7144  002FD2  D7F1               	goto	l187
  7145  002FD4  0A01               	xorlw	1	; case 3
  7146  002FD6  B4D8               	btfsc	status,2,c
  7147  002FD8  D7F0               	goto	l188
  7148  002FDA  D000               	goto	l189
  7149  002FDC                     l189:
  7150  002FDC  0012               	return		;funcret
  7151  002FDE                     __end_of_Set_NS:
  7152                           	opt stack 0
  7153                           tblptru	equ	0xFF8
  7154                           tblptrh	equ	0xFF7
  7155                           tblptrl	equ	0xFF6
  7156                           tablat	equ	0xFF5
  7157                           prodh	equ	0xFF4
  7158                           prodl	equ	0xFF3
  7159                           postinc0	equ	0xFEE
  7160                           wreg	equ	0xFE8
  7161                           postdec1	equ	0xFE5
  7162                           fsr1l	equ	0xFE1
  7163                           postinc2	equ	0xFDE
  7164                           postdec2	equ	0xFDD
  7165                           fsr2h	equ	0xFDA
  7166                           fsr2l	equ	0xFD9
  7167                           status	equ	0xFD8
  7168                           
  7169 ;; *************** function _Set_EWLT *****************
  7170 ;; Defined at:
  7171 ;;		line 367 in file "Lab7p4.c"
  7172 ;; Parameters:    Size  Location     Type
  7173 ;;  color           1    wreg     unsigned char 
  7174 ;; Auto vars:     Size  Location     Type
  7175 ;;  color           1    0[COMRAM] unsigned char 
  7176 ;; Return value:  Size  Location     Type
  7177 ;;		None               void
  7178 ;; Registers used:
  7179 ;;		wreg, status,2, status,0
  7180 ;; Tracked objects:
  7181 ;;		On entry : 0/0
  7182 ;;		On exit  : 0/0
  7183 ;;		Unchanged: 0/0
  7184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7186 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7188 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7189 ;;Total ram usage:        1 bytes
  7190 ;; Hardware stack levels used:    1
  7191 ;; This function calls:
  7192 ;;		Nothing
  7193 ;; This function is called by:
  7194 ;;		_Day_Mode
  7195 ;;		_Night_Mode
  7196 ;; This function uses a non-reentrant model
  7197 ;;
  7198                           
  7199                           	psect	text35
  7200  002FDE                     __ptext35:
  7201                           	opt stack 0
  7202  002FDE                     _Set_EWLT:
  7203                           	opt stack 29
  7204                           
  7205                           ;incstack = 0
  7206                           ;Set_EWLT@color stored from wreg
  7207  002FDE  6E01               	movwf	Set_EWLT@color,c
  7208                           
  7209                           ;Lab7p4.c: 369: switch (color)
  7210  002FE0  D00A               	goto	l1340
  7211  002FE2                     l211:
  7212  002FE2  9284               	bcf	3972,1,c	;volatile
  7213  002FE4  D001               	goto	L12
  7214  002FE6                     l213:
  7215  002FE6  8284               	bsf	3972,1,c	;volatile
  7216  002FE8                     L12:
  7217  002FE8  9484               	bcf	3972,2,c	;volatile
  7218  002FEA  D013               	goto	l216
  7219  002FEC                     l214:
  7220  002FEC  9284               	bcf	3972,1,c	;volatile
  7221  002FEE  D001               	goto	L13
  7222  002FF0                     l215:
  7223  002FF0  8284               	bsf	3972,1,c	;volatile
  7224  002FF2                     L13:
  7225  002FF2  8484               	bsf	3972,2,c	;volatile
  7226                           
  7227                           ;Lab7p4.c: 375: }
  7228  002FF4  D00E               	goto	l216
  7229  002FF6                     l1340:
  7230  002FF6  5001               	movf	Set_EWLT@color,w,c
  7231                           
  7232                           ; Switch size 1, requested type "space"
  7233                           ; Number of cases is 4, Range of values is 0 to 3
  7234                           ; switch strategies available:
  7235                           ; Name         Instructions Cycles
  7236                           ; simple_byte           13     7 (average)
  7237                           ;	Chosen strategy is simple_byte
  7238  002FF8  0A00               	xorlw	0	; case 0
  7239  002FFA  B4D8               	btfsc	status,2,c
  7240  002FFC  D7F2               	goto	l211
  7241  002FFE  0A01               	xorlw	1	; case 1
  7242  003000  B4D8               	btfsc	status,2,c
  7243  003002  D7F1               	goto	l213
  7244  003004  0A03               	xorlw	3	; case 2
  7245  003006  B4D8               	btfsc	status,2,c
  7246  003008  D7F1               	goto	l214
  7247  00300A  0A01               	xorlw	1	; case 3
  7248  00300C  B4D8               	btfsc	status,2,c
  7249  00300E  D7F0               	goto	l215
  7250  003010  D000               	goto	l216
  7251  003012                     l216:
  7252  003012  0012               	return		;funcret
  7253  003014                     __end_of_Set_EWLT:
  7254                           	opt stack 0
  7255                           tblptru	equ	0xFF8
  7256                           tblptrh	equ	0xFF7
  7257                           tblptrl	equ	0xFF6
  7258                           tablat	equ	0xFF5
  7259                           prodh	equ	0xFF4
  7260                           prodl	equ	0xFF3
  7261                           postinc0	equ	0xFEE
  7262                           wreg	equ	0xFE8
  7263                           postdec1	equ	0xFE5
  7264                           fsr1l	equ	0xFE1
  7265                           postinc2	equ	0xFDE
  7266                           postdec2	equ	0xFDD
  7267                           fsr2h	equ	0xFDA
  7268                           fsr2l	equ	0xFD9
  7269                           status	equ	0xFD8
  7270                           
  7271 ;; *************** function _Set_EW *****************
  7272 ;; Defined at:
  7273 ;;		line 356 in file "Lab7p4.c"
  7274 ;; Parameters:    Size  Location     Type
  7275 ;;  color           1    wreg     unsigned char 
  7276 ;; Auto vars:     Size  Location     Type
  7277 ;;  color           1    0[COMRAM] unsigned char 
  7278 ;; Return value:  Size  Location     Type
  7279 ;;		None               void
  7280 ;; Registers used:
  7281 ;;		wreg, status,2, status,0
  7282 ;; Tracked objects:
  7283 ;;		On entry : 0/0
  7284 ;;		On exit  : 0/0
  7285 ;;		Unchanged: 0/0
  7286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7288 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7290 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7291 ;;Total ram usage:        1 bytes
  7292 ;; Hardware stack levels used:    1
  7293 ;; This function calls:
  7294 ;;		Nothing
  7295 ;; This function is called by:
  7296 ;;		_Day_Mode
  7297 ;;		_Night_Mode
  7298 ;; This function uses a non-reentrant model
  7299 ;;
  7300                           
  7301                           	psect	text36
  7302  003014                     __ptext36:
  7303                           	opt stack 0
  7304  003014                     _Set_EW:
  7305                           	opt stack 29
  7306                           
  7307                           ;incstack = 0
  7308                           ;Set_EW@color stored from wreg
  7309  003014  6E01               	movwf	Set_EW@color,c
  7310                           
  7311                           ;Lab7p4.c: 358: switch (color)
  7312  003016  D00A               	goto	l1334
  7313  003018                     l202:
  7314  003018  9281               	bcf	3969,1,c	;volatile
  7315  00301A  D001               	goto	L14
  7316  00301C                     l204:
  7317  00301C  8281               	bsf	3969,1,c	;volatile
  7318  00301E                     L14:
  7319  00301E  9481               	bcf	3969,2,c	;volatile
  7320  003020  D013               	goto	l207
  7321  003022                     l205:
  7322  003022  9281               	bcf	3969,1,c	;volatile
  7323  003024  D001               	goto	L15
  7324  003026                     l206:
  7325  003026  8281               	bsf	3969,1,c	;volatile
  7326  003028                     L15:
  7327  003028  8481               	bsf	3969,2,c	;volatile
  7328                           
  7329                           ;Lab7p4.c: 364: }
  7330  00302A  D00E               	goto	l207
  7331  00302C                     l1334:
  7332  00302C  5001               	movf	Set_EW@color,w,c
  7333                           
  7334                           ; Switch size 1, requested type "space"
  7335                           ; Number of cases is 4, Range of values is 0 to 3
  7336                           ; switch strategies available:
  7337                           ; Name         Instructions Cycles
  7338                           ; simple_byte           13     7 (average)
  7339                           ;	Chosen strategy is simple_byte
  7340  00302E  0A00               	xorlw	0	; case 0
  7341  003030  B4D8               	btfsc	status,2,c
  7342  003032  D7F2               	goto	l202
  7343  003034  0A01               	xorlw	1	; case 1
  7344  003036  B4D8               	btfsc	status,2,c
  7345  003038  D7F1               	goto	l204
  7346  00303A  0A03               	xorlw	3	; case 2
  7347  00303C  B4D8               	btfsc	status,2,c
  7348  00303E  D7F1               	goto	l205
  7349  003040  0A01               	xorlw	1	; case 3
  7350  003042  B4D8               	btfsc	status,2,c
  7351  003044  D7F0               	goto	l206
  7352  003046  D000               	goto	l207
  7353  003048                     l207:
  7354  003048  0012               	return		;funcret
  7355  00304A                     __end_of_Set_EW:
  7356                           	opt stack 0
  7357                           tblptru	equ	0xFF8
  7358                           tblptrh	equ	0xFF7
  7359                           tblptrl	equ	0xFF6
  7360                           tablat	equ	0xFF5
  7361                           prodh	equ	0xFF4
  7362                           prodl	equ	0xFF3
  7363                           postinc0	equ	0xFEE
  7364                           wreg	equ	0xFE8
  7365                           postdec1	equ	0xFE5
  7366                           fsr1l	equ	0xFE1
  7367                           postinc2	equ	0xFDE
  7368                           postdec2	equ	0xFDD
  7369                           fsr2h	equ	0xFDA
  7370                           fsr2l	equ	0xFD9
  7371                           status	equ	0xFD8
  7372                           
  7373 ;; *************** function _PED_Control *****************
  7374 ;; Defined at:
  7375 ;;		line 307 in file "Lab7p4.c"
  7376 ;; Parameters:    Size  Location     Type
  7377 ;;  Direction       1    wreg     unsigned char 
  7378 ;;  Num_Sec         1    2[COMRAM] unsigned char 
  7379 ;; Auto vars:     Size  Location     Type
  7380 ;;  Direction       1    3[COMRAM] unsigned char 
  7381 ;;  i               2    6[COMRAM] int 
  7382 ;;  i               2    4[COMRAM] int 
  7383 ;; Return value:  Size  Location     Type
  7384 ;;		None               void
  7385 ;; Registers used:
  7386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7387 ;; Tracked objects:
  7388 ;;		On entry : 0/0
  7389 ;;		On exit  : 0/0
  7390 ;;		Unchanged: 0/0
  7391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7392 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7393 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7395 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7396 ;;Total ram usage:        6 bytes
  7397 ;; Hardware stack levels used:    1
  7398 ;; Hardware stack levels required when called:    2
  7399 ;; This function calls:
  7400 ;;		_BCD_Lower_Digit
  7401 ;;		_BCD_Upper_Digit
  7402 ;;		_WAIT_1_SEC_W_BEEP
  7403 ;; This function is called by:
  7404 ;;		_Day_Mode
  7405 ;; This function uses a non-reentrant model
  7406 ;;
  7407                           
  7408                           	psect	text37
  7409  002A0E                     __ptext37:
  7410                           	opt stack 0
  7411  002A0E                     _PED_Control:
  7412                           	opt stack 27
  7413                           
  7414                           ;incstack = 0
  7415                           ;PED_Control@Direction stored from wreg
  7416  002A0E  6E04               	movwf	PED_Control@Direction,c
  7417                           
  7418                           ;Lab7p4.c: 309: if (Direction == 0)
  7419  002A10  5004               	movf	PED_Control@Direction,w,c
  7420  002A12  A4D8               	btfss	status,2,c
  7421  002A14  D022               	goto	l2486
  7422                           
  7423                           ;Lab7p4.c: 310: {
  7424                           ;Lab7p4.c: 311: BCD_Lower_Digit (10);
  7425  002A16  0E0A               	movlw	10
  7426  002A18  EC9E  F018         	call	_BCD_Lower_Digit
  7427                           
  7428                           ;Lab7p4.c: 312: for (int i = Num_Sec -1; i > 0; --i)
  7429  002A1C  0EFF               	movlw	255
  7430  002A1E  2403               	addwf	PED_Control@Num_Sec,w,c
  7431  002A20  6E05               	movwf	PED_Control@i,c
  7432  002A22  6A06               	clrf	PED_Control@i+1,c
  7433  002A24  0EFF               	movlw	255
  7434  002A26  2206               	addwfc	PED_Control@i+1,f,c
  7435  002A28                     l2470:
  7436  002A28  BE06               	btfsc	PED_Control@i+1,7,c
  7437  002A2A  D011               	goto	l2482
  7438  002A2C  5006               	movf	PED_Control@i+1,w,c
  7439  002A2E  E105               	bnz	l2474
  7440  002A30  0405               	decf	PED_Control@i,w,c
  7441  002A32  A0D8               	btfss	status,0,c
  7442  002A34  D00C               	goto	l2482
  7443  002A36  D001               	goto	l2474
  7444  002A38  D00A               	goto	l2482
  7445  002A3A                     l2474:
  7446                           
  7447                           ;Lab7p4.c: 313: {
  7448                           ;Lab7p4.c: 314: BCD_Upper_Digit (i);
  7449  002A3A  5005               	movf	PED_Control@i,w,c
  7450  002A3C  EC9B  F017         	call	_BCD_Upper_Digit
  7451                           
  7452                           ;Lab7p4.c: 315: WAIT_1_SEC_W_BEEP();
  7453  002A40  ECB6  F018         	call	_WAIT_1_SEC_W_BEEP	;wreg free
  7454  002A44  0605               	decf	PED_Control@i,f,c
  7455  002A46  A0D8               	btfss	status,0,c
  7456  002A48  0606               	decf	PED_Control@i+1,f,c
  7457  002A4A  D7EE               	goto	l2470
  7458  002A4C  D7F6               	goto	l2474
  7459  002A4E                     l2482:
  7460                           
  7461                           ;Lab7p4.c: 316: }
  7462                           ;Lab7p4.c: 317: BCD_Upper_Digit (10);
  7463  002A4E  0E0A               	movlw	10
  7464  002A50  EC9B  F017         	call	_BCD_Upper_Digit
  7465                           
  7466                           ;Lab7p4.c: 318: WAIT_1_SEC_W_BEEP();
  7467  002A54  ECB6  F018         	call	_WAIT_1_SEC_W_BEEP	;wreg free
  7468                           
  7469                           ;Lab7p4.c: 319: }
  7470  002A58  D025               	goto	l180
  7471  002A5A                     l2486:
  7472                           
  7473                           ;Lab7p4.c: 321: else if (Direction == 1)
  7474  002A5A  0404               	decf	PED_Control@Direction,w,c
  7475  002A5C  A4D8               	btfss	status,2,c
  7476  002A5E  D022               	goto	l180
  7477                           
  7478                           ;Lab7p4.c: 322: {
  7479                           ;Lab7p4.c: 323: BCD_Upper_Digit (10);
  7480  002A60  0E0A               	movlw	10
  7481  002A62  EC9B  F017         	call	_BCD_Upper_Digit
  7482                           
  7483                           ;Lab7p4.c: 324: for (int i = Num_Sec -1; i > 0; --i)
  7484  002A66  0EFF               	movlw	255
  7485  002A68  2403               	addwf	PED_Control@Num_Sec,w,c
  7486  002A6A  6E07               	movwf	PED_Control@i_816,c
  7487  002A6C  6A08               	clrf	PED_Control@i_816+1,c
  7488  002A6E  0EFF               	movlw	255
  7489  002A70  2208               	addwfc	PED_Control@i_816+1,f,c
  7490  002A72                     l2492:
  7491  002A72  BE08               	btfsc	PED_Control@i_816+1,7,c
  7492  002A74  D011               	goto	l2504
  7493  002A76  5008               	movf	PED_Control@i_816+1,w,c
  7494  002A78  E105               	bnz	l2496
  7495  002A7A  0407               	decf	PED_Control@i_816,w,c
  7496  002A7C  A0D8               	btfss	status,0,c
  7497  002A7E  D00C               	goto	l2504
  7498  002A80  D001               	goto	l2496
  7499  002A82  D00A               	goto	l2504
  7500  002A84                     l2496:
  7501                           
  7502                           ;Lab7p4.c: 325: {
  7503                           ;Lab7p4.c: 326: BCD_Lower_Digit (i);
  7504  002A84  5007               	movf	PED_Control@i_816,w,c
  7505  002A86  EC9E  F018         	call	_BCD_Lower_Digit
  7506                           
  7507                           ;Lab7p4.c: 327: WAIT_1_SEC_W_BEEP();
  7508  002A8A  ECB6  F018         	call	_WAIT_1_SEC_W_BEEP	;wreg free
  7509  002A8E  0607               	decf	PED_Control@i_816,f,c
  7510  002A90  A0D8               	btfss	status,0,c
  7511  002A92  0608               	decf	PED_Control@i_816+1,f,c
  7512  002A94  D7EE               	goto	l2492
  7513  002A96  D7F6               	goto	l2496
  7514  002A98                     l2504:
  7515                           
  7516                           ;Lab7p4.c: 328: }
  7517                           ;Lab7p4.c: 329: BCD_Lower_Digit (10);
  7518  002A98  0E0A               	movlw	10
  7519  002A9A  EC9E  F018         	call	_BCD_Lower_Digit
  7520                           
  7521                           ;Lab7p4.c: 330: WAIT_1_SEC_W_BEEP();
  7522  002A9E  ECB6  F018         	call	_WAIT_1_SEC_W_BEEP	;wreg free
  7523  002AA2  D000               	goto	l180
  7524  002AA4                     l180:
  7525  002AA4  0012               	return		;funcret
  7526  002AA6                     __end_of_PED_Control:
  7527                           	opt stack 0
  7528                           tblptru	equ	0xFF8
  7529                           tblptrh	equ	0xFF7
  7530                           tblptrl	equ	0xFF6
  7531                           tablat	equ	0xFF5
  7532                           prodh	equ	0xFF4
  7533                           prodl	equ	0xFF3
  7534                           postinc0	equ	0xFEE
  7535                           wreg	equ	0xFE8
  7536                           postdec1	equ	0xFE5
  7537                           fsr1l	equ	0xFE1
  7538                           postinc2	equ	0xFDE
  7539                           postdec2	equ	0xFDD
  7540                           fsr2h	equ	0xFDA
  7541                           fsr2l	equ	0xFD9
  7542                           status	equ	0xFD8
  7543                           
  7544 ;; *************** function _WAIT_1_SEC_W_BEEP *****************
  7545 ;; Defined at:
  7546 ;;		line 264 in file "Lab7p4.c"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;		None
  7549 ;; Auto vars:     Size  Location     Type
  7550 ;;		None
  7551 ;; Return value:  Size  Location     Type
  7552 ;;		None               void
  7553 ;; Registers used:
  7554 ;;		wreg, status,2, cstack
  7555 ;; Tracked objects:
  7556 ;;		On entry : 0/0
  7557 ;;		On exit  : 0/0
  7558 ;;		Unchanged: 0/0
  7559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7564 ;;Total ram usage:        0 bytes
  7565 ;; Hardware stack levels used:    1
  7566 ;; Hardware stack levels required when called:    1
  7567 ;; This function calls:
  7568 ;;		_Activate_Buzzer
  7569 ;;		_Deactivate_Buzzer
  7570 ;;		_WAIT_HALF_SEC
  7571 ;; This function is called by:
  7572 ;;		_PED_Control
  7573 ;; This function uses a non-reentrant model
  7574 ;;
  7575                           
  7576                           	psect	text38
  7577  00316C                     __ptext38:
  7578                           	opt stack 0
  7579  00316C                     _WAIT_1_SEC_W_BEEP:
  7580                           	opt stack 27
  7581                           
  7582                           ;Lab7p4.c: 266: PORTDbits.RD7 = 1;
  7583                           
  7584                           ;incstack = 0
  7585  00316C  8E83               	bsf	3971,7,c	;volatile
  7586                           
  7587                           ;Lab7p4.c: 267: Activate_Buzzer();
  7588  00316E  ECCB  F018         	call	_Activate_Buzzer	;wreg free
  7589                           
  7590                           ;Lab7p4.c: 268: WAIT_HALF_SEC();
  7591  003172  EC91  F018         	call	_WAIT_HALF_SEC	;wreg free
  7592                           
  7593                           ;Lab7p4.c: 269: PORTDbits.RD7 = 0;
  7594  003176  9E83               	bcf	3971,7,c	;volatile
  7595                           
  7596                           ;Lab7p4.c: 270: Deactivate_Buzzer ();
  7597  003178  ECF5  F018         	call	_Deactivate_Buzzer	;wreg free
  7598                           
  7599                           ;Lab7p4.c: 271: WAIT_HALF_SEC();
  7600  00317C  EC91  F018         	call	_WAIT_HALF_SEC	;wreg free
  7601  003180  0012               	return		;funcret
  7602  003182                     __end_of_WAIT_1_SEC_W_BEEP:
  7603                           	opt stack 0
  7604                           tblptru	equ	0xFF8
  7605                           tblptrh	equ	0xFF7
  7606                           tblptrl	equ	0xFF6
  7607                           tablat	equ	0xFF5
  7608                           prodh	equ	0xFF4
  7609                           prodl	equ	0xFF3
  7610                           postinc0	equ	0xFEE
  7611                           wreg	equ	0xFE8
  7612                           postdec1	equ	0xFE5
  7613                           fsr1l	equ	0xFE1
  7614                           postinc2	equ	0xFDE
  7615                           postdec2	equ	0xFDD
  7616                           fsr2h	equ	0xFDA
  7617                           fsr2l	equ	0xFD9
  7618                           status	equ	0xFD8
  7619                           
  7620 ;; *************** function _WAIT_HALF_SEC *****************
  7621 ;; Defined at:
  7622 ;;		line 244 in file "Lab7p4.c"
  7623 ;; Parameters:    Size  Location     Type
  7624 ;;		None
  7625 ;; Auto vars:     Size  Location     Type
  7626 ;;		None
  7627 ;; Return value:  Size  Location     Type
  7628 ;;		None               void
  7629 ;; Registers used:
  7630 ;;		wreg, status,2
  7631 ;; Tracked objects:
  7632 ;;		On entry : 0/0
  7633 ;;		On exit  : 0/0
  7634 ;;		Unchanged: 0/0
  7635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7640 ;;Total ram usage:        0 bytes
  7641 ;; Hardware stack levels used:    1
  7642 ;; This function calls:
  7643 ;;		Nothing
  7644 ;; This function is called by:
  7645 ;;		_WAIT_1_SEC
  7646 ;;		_WAIT_1_SEC_W_BEEP
  7647 ;; This function uses a non-reentrant model
  7648 ;;
  7649                           
  7650                           	psect	text39
  7651  003122                     __ptext39:
  7652                           	opt stack 0
  7653  003122                     _WAIT_HALF_SEC:
  7654                           	opt stack 27
  7655                           
  7656                           ;Lab7p4.c: 246: T0CON = 0x02;
  7657                           
  7658                           ;incstack = 0
  7659  003122  0E02               	movlw	2
  7660  003124  6ED5               	movwf	4053,c	;volatile
  7661                           
  7662                           ;Lab7p4.c: 247: TMR0L = 0xDB;
  7663  003126  0EDB               	movlw	219
  7664  003128  6ED6               	movwf	4054,c	;volatile
  7665                           
  7666                           ;Lab7p4.c: 248: TMR0H = 0xB;
  7667  00312A  0E0B               	movlw	11
  7668  00312C  6ED7               	movwf	4055,c	;volatile
  7669                           
  7670                           ;Lab7p4.c: 249: INTCONbits.TMR0IF = 0;
  7671  00312E  94F2               	bcf	intcon,2,c	;volatile
  7672                           
  7673                           ;Lab7p4.c: 250: T0CONbits.TMR0ON = 1;
  7674  003130  8ED5               	bsf	4053,7,c	;volatile
  7675                           
  7676                           ;Lab7p4.c: 251: while (INTCONbits.TMR0IF == 0);
  7677  003132  D000               	goto	l141
  7678  003134                     l141:
  7679  003134  A4F2               	btfss	intcon,2,c	;volatile
  7680  003136  D7FE               	goto	l141
  7681                           
  7682                           ;Lab7p4.c: 252: T0CONbits.TMR0ON = 0;
  7683  003138  9ED5               	bcf	4053,7,c	;volatile
  7684  00313A  0012               	return		;funcret
  7685  00313C                     __end_of_WAIT_HALF_SEC:
  7686                           	opt stack 0
  7687                           tblptru	equ	0xFF8
  7688                           tblptrh	equ	0xFF7
  7689                           tblptrl	equ	0xFF6
  7690                           tablat	equ	0xFF5
  7691                           prodh	equ	0xFF4
  7692                           prodl	equ	0xFF3
  7693                           intcon	equ	0xFF2
  7694                           postinc0	equ	0xFEE
  7695                           wreg	equ	0xFE8
  7696                           postdec1	equ	0xFE5
  7697                           fsr1l	equ	0xFE1
  7698                           postinc2	equ	0xFDE
  7699                           postdec2	equ	0xFDD
  7700                           fsr2h	equ	0xFDA
  7701                           fsr2l	equ	0xFD9
  7702                           status	equ	0xFD8
  7703                           
  7704 ;; *************** function _Deactivate_Buzzer *****************
  7705 ;; Defined at:
  7706 ;;		line 282 in file "Lab7p4.c"
  7707 ;; Parameters:    Size  Location     Type
  7708 ;;		None
  7709 ;; Auto vars:     Size  Location     Type
  7710 ;;		None
  7711 ;; Return value:  Size  Location     Type
  7712 ;;		None               void
  7713 ;; Registers used:
  7714 ;;		wreg, status,2
  7715 ;; Tracked objects:
  7716 ;;		On entry : 0/0
  7717 ;;		On exit  : 0/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7724 ;;Total ram usage:        0 bytes
  7725 ;; Hardware stack levels used:    1
  7726 ;; This function calls:
  7727 ;;		Nothing
  7728 ;; This function is called by:
  7729 ;;		_WAIT_1_SEC_W_BEEP
  7730 ;; This function uses a non-reentrant model
  7731 ;;
  7732                           
  7733                           	psect	text40
  7734  0031EA                     __ptext40:
  7735                           	opt stack 0
  7736  0031EA                     _Deactivate_Buzzer:
  7737                           	opt stack 27
  7738                           
  7739                           ;Lab7p4.c: 284: CCP2CON = 0x0;
  7740                           
  7741                           ;incstack = 0
  7742  0031EA  0E00               	movlw	0
  7743  0031EC  6EBA               	movwf	4026,c	;volatile
  7744                           
  7745                           ;Lab7p4.c: 285: PORTBbits.RB3 = 0;
  7746  0031EE  9681               	bcf	3969,3,c	;volatile
  7747  0031F0  0012               	return		;funcret
  7748  0031F2                     __end_of_Deactivate_Buzzer:
  7749                           	opt stack 0
  7750                           tblptru	equ	0xFF8
  7751                           tblptrh	equ	0xFF7
  7752                           tblptrl	equ	0xFF6
  7753                           tablat	equ	0xFF5
  7754                           prodh	equ	0xFF4
  7755                           prodl	equ	0xFF3
  7756                           intcon	equ	0xFF2
  7757                           postinc0	equ	0xFEE
  7758                           wreg	equ	0xFE8
  7759                           postdec1	equ	0xFE5
  7760                           fsr1l	equ	0xFE1
  7761                           postinc2	equ	0xFDE
  7762                           postdec2	equ	0xFDD
  7763                           fsr2h	equ	0xFDA
  7764                           fsr2l	equ	0xFD9
  7765                           status	equ	0xFD8
  7766                           
  7767 ;; *************** function _Activate_Buzzer *****************
  7768 ;; Defined at:
  7769 ;;		line 274 in file "Lab7p4.c"
  7770 ;; Parameters:    Size  Location     Type
  7771 ;;		None
  7772 ;; Auto vars:     Size  Location     Type
  7773 ;;		None
  7774 ;; Return value:  Size  Location     Type
  7775 ;;		None               void
  7776 ;; Registers used:
  7777 ;;		wreg, status,2
  7778 ;; Tracked objects:
  7779 ;;		On entry : 0/0
  7780 ;;		On exit  : 0/0
  7781 ;;		Unchanged: 0/0
  7782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7787 ;;Total ram usage:        0 bytes
  7788 ;; Hardware stack levels used:    1
  7789 ;; This function calls:
  7790 ;;		Nothing
  7791 ;; This function is called by:
  7792 ;;		_WAIT_1_SEC_W_BEEP
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           	psect	text41
  7797  003196                     __ptext41:
  7798                           	opt stack 0
  7799  003196                     _Activate_Buzzer:
  7800                           	opt stack 27
  7801                           
  7802                           ;Lab7p4.c: 276: PR2 = 0b11111001 ;
  7803                           
  7804                           ;incstack = 0
  7805  003196  0EF9               	movlw	249
  7806  003198  6ECB               	movwf	4043,c	;volatile
  7807                           
  7808                           ;Lab7p4.c: 277: T2CON = 0b00000101 ;
  7809  00319A  0E05               	movlw	5
  7810  00319C  6ECA               	movwf	4042,c	;volatile
  7811                           
  7812                           ;Lab7p4.c: 278: CCPR2L = 0b01001010 ;
  7813  00319E  0E4A               	movlw	74
  7814  0031A0  6EBB               	movwf	4027,c	;volatile
  7815                           
  7816                           ;Lab7p4.c: 279: CCP2CON = 0b00111100 ;
  7817  0031A2  0E3C               	movlw	60
  7818  0031A4  6EBA               	movwf	4026,c	;volatile
  7819  0031A6  0012               	return		;funcret
  7820  0031A8                     __end_of_Activate_Buzzer:
  7821                           	opt stack 0
  7822                           tblptru	equ	0xFF8
  7823                           tblptrh	equ	0xFF7
  7824                           tblptrl	equ	0xFF6
  7825                           tablat	equ	0xFF5
  7826                           prodh	equ	0xFF4
  7827                           prodl	equ	0xFF3
  7828                           intcon	equ	0xFF2
  7829                           postinc0	equ	0xFEE
  7830                           wreg	equ	0xFE8
  7831                           postdec1	equ	0xFE5
  7832                           fsr1l	equ	0xFE1
  7833                           postinc2	equ	0xFDE
  7834                           postdec2	equ	0xFDD
  7835                           fsr2h	equ	0xFDA
  7836                           fsr2l	equ	0xFD9
  7837                           status	equ	0xFD8
  7838                           
  7839 ;; *************** function _BCD_Upper_Digit *****************
  7840 ;; Defined at:
  7841 ;;		line 288 in file "Lab7p4.c"
  7842 ;; Parameters:    Size  Location     Type
  7843 ;;  digit           1    wreg     unsigned char 
  7844 ;; Auto vars:     Size  Location     Type
  7845 ;;  digit           1    1[COMRAM] unsigned char 
  7846 ;;  Port_E          1    0[COMRAM] unsigned char 
  7847 ;; Return value:  Size  Location     Type
  7848 ;;		None               void
  7849 ;; Registers used:
  7850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7851 ;; Tracked objects:
  7852 ;;		On entry : 0/0
  7853 ;;		On exit  : 0/0
  7854 ;;		Unchanged: 0/0
  7855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7857 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7859 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7860 ;;Total ram usage:        2 bytes
  7861 ;; Hardware stack levels used:    1
  7862 ;; This function calls:
  7863 ;;		Nothing
  7864 ;; This function is called by:
  7865 ;;		_PED_Control
  7866 ;; This function uses a non-reentrant model
  7867 ;;
  7868                           
  7869                           	psect	text42
  7870  002F36                     __ptext42:
  7871                           	opt stack 0
  7872  002F36                     _BCD_Upper_Digit:
  7873                           	opt stack 28
  7874                           
  7875                           ;incstack = 0
  7876                           ;BCD_Upper_Digit@digit stored from wreg
  7877  002F36  6E02               	movwf	BCD_Upper_Digit@digit,c
  7878                           
  7879                           ;Lab7p4.c: 290: PORTC = array[digit];
  7880  002F38  5002               	movf	BCD_Upper_Digit@digit,w,c
  7881  002F3A  0D01               	mullw	1
  7882  002F3C  0E69               	movlw	low _array
  7883  002F3E  24F3               	addwf	prodl,w,c
  7884  002F40  6ED9               	movwf	fsr2l,c
  7885  002F42  0E00               	movlw	high _array
  7886  002F44  20F4               	addwfc	prodh,w,c
  7887  002F46  6EDA               	movwf	fsr2h,c
  7888  002F48  50DF               	movf	indf2,w,c
  7889  002F4A  6E82               	movwf	3970,c	;volatile
  7890                           
  7891                           ;Lab7p4.c: 291: char Port_E = array[digit] & 0x40;
  7892  002F4C  5002               	movf	BCD_Upper_Digit@digit,w,c
  7893  002F4E  0D01               	mullw	1
  7894  002F50  0E69               	movlw	low _array
  7895  002F52  24F3               	addwf	prodl,w,c
  7896  002F54  6ED9               	movwf	fsr2l,c
  7897  002F56  0E00               	movlw	high _array
  7898  002F58  20F4               	addwfc	prodh,w,c
  7899  002F5A  6EDA               	movwf	fsr2h,c
  7900  002F5C  50DF               	movf	indf2,w,c
  7901  002F5E  0B40               	andlw	64
  7902  002F60  6E01               	movwf	BCD_Upper_Digit@Port_E,c
  7903                           
  7904                           ;Lab7p4.c: 292: if (Port_E == 0) PORTEbits.RE0 = 0x00;
  7905  002F62  5001               	movf	BCD_Upper_Digit@Port_E,w,c
  7906  002F64  A4D8               	btfss	status,2,c
  7907  002F66  D002               	goto	l162
  7908  002F68  9084               	bcf	3972,0,c	;volatile
  7909  002F6A  D002               	goto	l164
  7910  002F6C                     l162:
  7911                           
  7912                           ;Lab7p4.c: 293: else PORTEbits.RE0 = 0x01;
  7913  002F6C  8084               	bsf	3972,0,c	;volatile
  7914  002F6E  D000               	goto	l164
  7915  002F70                     l164:
  7916  002F70  0012               	return		;funcret
  7917  002F72                     __end_of_BCD_Upper_Digit:
  7918                           	opt stack 0
  7919                           tblptru	equ	0xFF8
  7920                           tblptrh	equ	0xFF7
  7921                           tblptrl	equ	0xFF6
  7922                           tablat	equ	0xFF5
  7923                           prodh	equ	0xFF4
  7924                           prodl	equ	0xFF3
  7925                           intcon	equ	0xFF2
  7926                           postinc0	equ	0xFEE
  7927                           wreg	equ	0xFE8
  7928                           postdec1	equ	0xFE5
  7929                           fsr1l	equ	0xFE1
  7930                           indf2	equ	0xFDF
  7931                           postinc2	equ	0xFDE
  7932                           postdec2	equ	0xFDD
  7933                           fsr2h	equ	0xFDA
  7934                           fsr2l	equ	0xFD9
  7935                           status	equ	0xFD8
  7936                           
  7937 ;; *************** function _BCD_Lower_Digit *****************
  7938 ;; Defined at:
  7939 ;;		line 296 in file "Lab7p4.c"
  7940 ;; Parameters:    Size  Location     Type
  7941 ;;  digit           1    wreg     unsigned char 
  7942 ;; Auto vars:     Size  Location     Type
  7943 ;;  digit           1    0[COMRAM] unsigned char 
  7944 ;; Return value:  Size  Location     Type
  7945 ;;		None               void
  7946 ;; Registers used:
  7947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7948 ;; Tracked objects:
  7949 ;;		On entry : 0/0
  7950 ;;		On exit  : 0/0
  7951 ;;		Unchanged: 0/0
  7952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7956 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7957 ;;Total ram usage:        1 bytes
  7958 ;; Hardware stack levels used:    1
  7959 ;; This function calls:
  7960 ;;		Nothing
  7961 ;; This function is called by:
  7962 ;;		_PED_Control
  7963 ;; This function uses a non-reentrant model
  7964 ;;
  7965                           
  7966                           	psect	text43
  7967  00313C                     __ptext43:
  7968                           	opt stack 0
  7969  00313C                     _BCD_Lower_Digit:
  7970                           	opt stack 28
  7971                           
  7972                           ;incstack = 0
  7973                           ;BCD_Lower_Digit@digit stored from wreg
  7974  00313C  6E01               	movwf	BCD_Lower_Digit@digit,c
  7975                           
  7976                           ;Lab7p4.c: 298: PORTD = array[digit];
  7977  00313E  5001               	movf	BCD_Lower_Digit@digit,w,c
  7978  003140  0D01               	mullw	1
  7979  003142  0E69               	movlw	low _array
  7980  003144  24F3               	addwf	prodl,w,c
  7981  003146  6ED9               	movwf	fsr2l,c
  7982  003148  0E00               	movlw	high _array
  7983  00314A  20F4               	addwfc	prodh,w,c
  7984  00314C  6EDA               	movwf	fsr2h,c
  7985  00314E  50DF               	movf	indf2,w,c
  7986  003150  6E83               	movwf	3971,c	;volatile
  7987                           
  7988                           ;Lab7p4.c: 299: PORTDbits.RD7 = 1;
  7989  003152  8E83               	bsf	3971,7,c	;volatile
  7990  003154  0012               	return		;funcret
  7991  003156                     __end_of_BCD_Lower_Digit:
  7992                           	opt stack 0
  7993                           tblptru	equ	0xFF8
  7994                           tblptrh	equ	0xFF7
  7995                           tblptrl	equ	0xFF6
  7996                           tablat	equ	0xFF5
  7997                           prodh	equ	0xFF4
  7998                           prodl	equ	0xFF3
  7999                           intcon	equ	0xFF2
  8000                           postinc0	equ	0xFEE
  8001                           wreg	equ	0xFE8
  8002                           postdec1	equ	0xFE5
  8003                           fsr1l	equ	0xFE1
  8004                           indf2	equ	0xFDF
  8005                           postinc2	equ	0xFDE
  8006                           postdec2	equ	0xFDD
  8007                           fsr2h	equ	0xFDA
  8008                           fsr2l	equ	0xFD9
  8009                           status	equ	0xFD8
  8010                           tblptru	equ	0xFF8
  8011                           tblptrh	equ	0xFF7
  8012                           tblptrl	equ	0xFF6
  8013                           tablat	equ	0xFF5
  8014                           prodh	equ	0xFF4
  8015                           prodl	equ	0xFF3
  8016                           intcon	equ	0xFF2
  8017                           postinc0	equ	0xFEE
  8018                           wreg	equ	0xFE8
  8019                           postdec1	equ	0xFE5
  8020                           fsr1l	equ	0xFE1
  8021                           indf2	equ	0xFDF
  8022                           postinc2	equ	0xFDE
  8023                           postdec2	equ	0xFDD
  8024                           fsr2h	equ	0xFDA
  8025                           fsr2l	equ	0xFD9
  8026                           status	equ	0xFD8
  8027                           
  8028                           	psect	rparam
  8029  0000                     tblptru	equ	0xFF8
  8030                           tblptrh	equ	0xFF7
  8031                           tblptrl	equ	0xFF6
  8032                           tablat	equ	0xFF5
  8033                           prodh	equ	0xFF4
  8034                           prodl	equ	0xFF3
  8035                           intcon	equ	0xFF2
  8036                           postinc0	equ	0xFEE
  8037                           wreg	equ	0xFE8
  8038                           postdec1	equ	0xFE5
  8039                           fsr1l	equ	0xFE1
  8040                           indf2	equ	0xFDF
  8041                           postinc2	equ	0xFDE
  8042                           postdec2	equ	0xFDD
  8043                           fsr2h	equ	0xFDA
  8044                           fsr2l	equ	0xFD9
  8045                           status	equ	0xFD8


Data Sizes:
    Strings     35
    Constant    118
    Data        11
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    104     115
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[16]), STR_1(CODE[19]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _init_UART->_OpenUSART
    ___ftdiv->___awtoft
    ___awtoft->___wmul
    _Night_Mode->_WAIT_N_SEC
    _Day_Mode->_PED_Control
    _PED_Control->_BCD_Upper_Digit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   53683
                                             99 COMRAM     5     5      0
                           _Day_Mode
                           _Init_ADC
                          _Init_TRIS
                         _Night_Mode
                 _Select_ADC_Channel
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                       _get_full_ADC
                          _init_UART
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   44557
                                             63 COMRAM    36    31      5
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   10437
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   10239
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2591
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4329
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     671
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     546
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     444
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3604
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3307
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     284
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     284
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2619
                                             24 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2264
                                             20 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Select_ADC_Channel                                   1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0      90
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                         _WAIT_N_SEC
 ---------------------------------------------------------------------------------
 (1) _Init_TRIS                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0     502
                        _PED_Control
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                         _WAIT_N_SEC
 ---------------------------------------------------------------------------------
 (2) _WAIT_N_SEC                                           2     2      0      30
                                              0 COMRAM     2     2      0
                         _WAIT_1_SEC
 ---------------------------------------------------------------------------------
 (3) _WAIT_1_SEC                                           0     0      0       0
                      _WAIT_HALF_SEC
 ---------------------------------------------------------------------------------
 (2) _Set_NSLT                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Set_EWLT                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          6     5      1     412
                                              2 COMRAM     6     5      1
                    _BCD_Lower_Digit
                    _BCD_Upper_Digit
                  _WAIT_1_SEC_W_BEEP
 ---------------------------------------------------------------------------------
 (3) _WAIT_1_SEC_W_BEEP                                    0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                      _WAIT_HALF_SEC
 ---------------------------------------------------------------------------------
 (4) _WAIT_HALF_SEC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _BCD_Upper_Digit                                      2     2      0      45
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _BCD_Lower_Digit                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _BCD_Lower_Digit
       _BCD_Upper_Digit
       _WAIT_1_SEC_W_BEEP
         _Activate_Buzzer
         _Deactivate_Buzzer
         _WAIT_HALF_SEC
     _Set_EW
     _Set_EWLT
     _Set_NS
     _Set_NSLT
     _WAIT_N_SEC
       _WAIT_1_SEC
         _WAIT_HALF_SEC
   _Init_ADC
   _Init_TRIS
   _Night_Mode
     _Set_EW
     _Set_EWLT
     _Set_NS
     _Set_NSLT
     _WAIT_N_SEC
       _WAIT_1_SEC
         _WAIT_HALF_SEC
   _Select_ADC_Channel
   ___awtoft
     ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftge
   ___wmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   _get_full_ADC
   _init_UART
     _OpenUSART
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     68      73       1       90.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      73      34        0.0%
DATA                 0      0      73       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 20 17:44:16 2022

               ___awdiv@sign 000C          ___wmul@multiplicand 0011                 ___ftadd@exp1 0039  
               ___ftadd@exp2 0038                 ___ftadd@sign 0037                          l112 29BA  
                        l120 2C66                          l104 2884                          l202 3018  
                        l211 2FE2                          l115 2A0C                          l204 301C  
                        l132 30A0                          l141 3134                          l205 3022  
                        l213 2FE6                          l206 3026                          l214 2FEC  
                        l118 2C24                          l222 31AC                          l207 3048  
                        l215 2FF0                          l135 30C0                          l216 3012  
                        l400 309A                          l162 2F6C                          l164 2F70  
                        l180 2AA4                          l254 1ED6                          l247 211A  
                        l327 1708                          l184 2FAC                          l193 2F76  
                        l186 2FB0                          l187 2FB6                          l195 2F7A  
                        l188 2FBA                          l196 2F80                          l364 1AF6  
                        l189 2FDC                          l197 2F84                          l198 2FA6  
                        l606 2D74                          l800 2784                          l392 2E2C  
                        l393 2E2E                          l618 2F34                          l394 2E38  
                        l395 2E3A                          l388 2E12                          l725 2956  
                        l397 2E54                          l805 23EE                          l814 23DE  
                        l823 2BD0                          l807 2356                          l736 292E  
                        l904 2DD4                          l808 237E                          l593 2B3A  
                        l850 26D6                          l780 224C                          l924 2EB4  
                        l684 24F8                          l765 2160                          l693 24E8  
                        l829 25F0                          l766 22DE                          l846 2EF8  
                        l839 30D8                          l769 218A                          l865 3106  
                        l797 27B8                          l789 2268                          l894 2CE2  
                        _PR2 000FCB            _Deactivate_Buzzer 31EA                 ___awmod@sign 0006  
                        prod 000FF3                          wreg 000FE8           ?_Deactivate_Buzzer 0001  
               __CFG_LVP$OFF 000000         PED_Control@Direction 0004                 ___ftdiv@cntr 0022  
               ___ftdiv@sign 0027                 __CFG_WDT$OFF 000000                         l3000 1492  
                       l3010 1538                         l3002 14C0                         l1340 2FF6  
                       l3004 14CE                         l1334 302C                         l2302 21F0  
                       l3110 18CA                         l3030 15C6                         l3022 1578  
                       l3014 1544                         l1328 2F8A                         l2240 28F6  
                       l2232 28B2                         l2304 21FC                         l3120 190A  
                       l3112 18CE                         l3104 18B0                         l3040 15F4  
                       l3008 1534                         l1346 2FC0                         l2250 2936  
                       l2242 2916                         l2234 28BE                         l2322 2286  
                       l2314 2234                         l2306 2208                         l3042 1608  
                       l3026 15AA                         l3018 1574                         l3204 29D0  
                       l2244 2922                         l2236 28DE                         l2228 28A2  
                       l2332 22B8                         l2316 2240                         l2308 2210  
                       l2404 2AE4                         l2420 2B20                         l3132 194C  
                       l3124 190E                         l3116 18DA                         l3060 16D6  
                       l3052 1640                         l3036 15E6                         l3230 271E  
                       l2406 2AEE                         l2342 2518                         l3150 19C0  
                       l3070 170E                         l3046 1616                         l2504 2A98  
                       l2256 2948                         l3224 26F6                         l2280 2198  
                       l2424 2B30                         l2416 2B14                         l2408 2AF6  
                       l2440 2D18                         l2344 2532                         l2600 1CCC  
                       l3160 19F2                         l3152 19CA                         l3144 1992  
                       l3128 192A                         l3080 1778                         l3064 16E4  
                       l3048 1624                         l1394 3110                         l3250 275E  
                       l3226 2710                         l2522 2E0A                         l2514 2DF8  
                       l2274 216E                         l2370 259C                         l2362 2574  
                       l3170 1A2A                         l3146 199C                         l3138 1970  
                       l3066 16F2                         l3058 16CA                         l3260 2792  
                       l2460 2D6A                         l2452 2D4E                         l2444 2D26  
                       l2436 2D0A                         l2380 25CA                         l2372 25A2  
                       l2348 2540                         l2612 1E00                         l2604 1CDC  
                       l3164 1A0A                         l3092 1868                         l3076 1728  
                       l3180 1AD8                         l2470 2A28                         l1398 3118  
                       l2534 2E24                         l2526 2E16                         l2518 2E02  
                       l2286 21A4                         l2702 2410                         l2446 2D30  
                       l2366 2586                         l2630 30FE                         l3174 1A46  
                       l3166 1A12                         l3158 19EA                         l3086 184E  
                       l3094 1874                         l3272 2F10                         l2296 21CC  
                       l2640 22FE                         l2392 2ABC                         l2448 2D38  
                       l2456 2D5A                         l2376 25B4                         l3088 185A  
                       l2482 2A4E                         l2474 2A3A                         l2810 2680  
                       l2618 1EB2                         l3178 1AC4                         l2492 2A72  
                       l3188 2980                         l2804 266A                         l2740 24BA  
                       l2724 2486                         l2716 2454                         l2580 20DA  
                       l2572 2016                         l2900 10EC                         l3292 27DC  
                       l2486 2A5A                         l2822 26C4                         l2814 2694  
                       l2742 24C0                         l2646 231C                         l2398 2ACE  
                       l2496 2A84                         l2816 26A2                         l2808 267A  
                       l2832 2C8A                         l2736 24AA                         l2728 2496  
                       l2680 23B0                         l2904 110A                         l2912 116A  
                       l2762 2B6E                         l2754 2ECE                         l2818 26AC  
                       l2834 2C98                         l2746 24D4                         l2682 23B6  
                       l2594 1C24                         l2922 11C4                         l2772 2BCC  
                       l2844 2CD2                         l2836 2CA0                         l2860 2DC4  
                       l2852 2D88                         l2748 24E2                         l2676 23A0  
                       l2668 238C                         l2940 123C                         l2932 11F6  
                       l2924 11DC                         l2766 2BA0                         l2854 2D96  
                       l2686 23CA                         l2950 127E                         l2934 1226  
                       l2918 118C                         l2856 2D9E                         l2696 2400  
                       l2688 23D8                         l2928 11EC                         l2786 2610  
                       l2866 2E5C                         l2868 2E6A                         l2980 13AA  
                       l2892 10BA                         l2990 1422                         l2982 13DA  
                       l2974 1374                         l2966 1310                         l2894 10CC  
                       l2984 13EA                         l2888 10A8                         l2994 1446  
                       l2978 139A                         l2898 10D6                         l2996 1450  
                       STR_1 1077                         STR_2 108A                         u2131 250A  
                       u3030 12B6                         u2151 2528                         u3035 12AC  
                       u3250 1702                         u2800 262E                         u1921 212C  
                       u1931 2140                         u2571 22F0                 printf@tmpval 0050  
                       u2805 2626                         u3551 26E8                         u2591 230E  
                       u3571 2706                         u2781 2602                         _TRMT 007D61  
        ??_Deactivate_Buzzer 0001                         _main 27BA                 ___ftpack@arg 0001  
               ___ftpack@exp 0004               ??_get_full_ADC 0003                         fsr2h 000FDA  
                       fsr1l 000FE1                         indf2 000FDF                         fsr2l 000FD9  
                       prodh 000FF4                         prodl 000FF3                         start 0000  
               ___ftmul@cntr 0022                 ___param_bank 000010                 ___ftmul@sign 0023  
               ___fttol@exp1 0039                 ___fttol@lval 0035                  ?_WAIT_1_SEC 0001  
  __end_of_Deactivate_Buzzer 31F2                        ?_main 0001              __end_of___awdiv 2B3C  
            __end_of___ftadd 22E0              __end_of___awmod 2D76              __end_of___ftdiv 27BA  
            __end_of___ftneg 30E6              __end_of___lldiv 2CF4              __end_of___ftmul 25F2  
                      _T0CON 000FD5              ___awdiv@divisor 0009              __end_of___llmod 2DE6  
            __end_of___ftsub 2EFA              __end_of___fttol 26D8                        _T2CON 000FCA  
                ?_WAIT_N_SEC 0001              ___awdiv@counter 000B                        _RCSTA 000FAB  
                      _TMR0H 000FD7                        _TMR0L 000FD6                        _SPBRG 000FAF  
                      _PORTB 000F81                        _PORTC 000F82                        _PORTD 000F83  
                      _PORTE 000F84                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISD 000F95                        _TRISE 000F96  
                      _TXREG 000FAD                        _TXSTA 000FAC                 ?_PED_Control 0003  
               ___lltoft@exp 0011                ___awtoft@sign 0018              __end_of_dpowers 1029  
                      _array 0069                        _scale 1AF8              __end_of_isdigit 3108  
              ___ftpack@sign 0005                        _putch 31A8               __CFG_BOREN$OFF 000000  
                      tablat 000FF5                        status 000FD8             __end_of_Day_Mode 2A0E  
   __size_of_BCD_Upper_Digit 003C              __initialization 304A        __end_of_WAIT_HALF_SEC 313C  
               __end_of_main 2892             __end_of_Init_ADC 31C4            ??_BCD_Lower_Digit 0001  
                 _Night_Mode 2BD2             __end_of_Set_EWLT 3014             __end_of_Set_NSLT 2FA8  
                     ??_main 0064                ___fttol@sign1 0034                __activetblptr 000002  
       __size_of__tdiv_to_l_ 0110                       _ADCON0 000FC2                       _ADCON1 000FC1  
                     _ADCON2 000FC0             ___llmod@dividend 000E                       ?_scale 0024  
                     _ADRESH 000FC4                       _ADRESL 000FC3                       _CCPR2L 000FBB  
           ___awdiv@dividend 0007             __end_of___awtoft 2F36                       ?_putch 0001  
           __end_of___ftpack 2958             __end_of___lltoft 2EB6                       _OSCCON 000FD3  
         __size_of_Init_TRIS 0016                       _SPBRGH 000FB0          __size_of_WAIT_1_SEC 000E  
        __size_of_WAIT_N_SEC 001A                       _Set_EW 3014                       _Set_NS 2FA8  
           __end_of__powers_ 1077           __size_of_OpenUSART 0070                       ___ftge 2B3C  
   __size_of_Activate_Buzzer 0012                       ___wmul 3074                    ??___awdiv 000B  
                  ??___ftadd 0034                    ??___awmod 0005                    ??___ftdiv 001F  
                  ??___ftneg 0004                    ??___lldiv 0009                    ??___ftmul 001B  
                  ??___llmod 0016                    ??___ftsub 0040                    ??___fttol 002F  
                     _fround 1ED8             ___awdiv@quotient 000D              ___awmod@divisor 0003  
 __size_of_Deactivate_Buzzer 0008              ___awmod@counter 0005                       _printf 109C  
          WAIT_N_SEC@seconds 0001        ___ftmul@f3_as_product 001F         __end_of_get_full_ADC 30C2  
               __pdataCOMRAM 0069                    ??_isdigit 0001                  Set_EW@color 0001  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                       putch@c 0001                  Set_NS@color 0001  
                 __accesstop 0080      __end_of__initialization 306A                   ___ftadd@f1 002E  
                 ___ftadd@f2 0031                   ___ftge@ff1 0001                   ___ftge@ff2 0004  
              ___rparam_used 000001                   ___ftdiv@f1 0019                   ___ftdiv@f2 001C  
                 ___ftdiv@f3 0023                   ___ftneg@f1 0001                   ___awtoft@c 0015  
                 ___ftmul@f1 0015                   ___ftmul@f2 0018                   ___ftsub@f1 003A  
                 ___ftsub@f2 003D                   ___fttol@f1 002B               __pcstackCOMRAM 0001  
                 ___lltoft@c 0009            ??_BCD_Upper_Digit 0001                __end_of_scale 1ED8  
              __end_of_putch 31B6                  ?_Night_Mode 0001            __end_of_Init_TRIS 316C  
                 __div_to_l_ 23F0                    ?_Day_Mode 0001            __end_of_OpenUSART 2E56  
            __div_to_l_@exp1 000C              __div_to_l_@cntr 000B                      ??_scale 0027  
       __size_of_PED_Control 0098              __div_to_l_@quot 0007                      ??_putch 0001  
                  ?_Init_ADC 0001           __size_of_init_UART 0014   __end_of_Select_ADC_Channel 31DE  
                  ?_Set_EWLT 0001                __div_to_l_@f1 0001                __div_to_l_@f2 0004  
                  ?_Set_NSLT 0001                      ?_Set_EW 0001                      ?_Set_NS 0001  
         __CFG_CCP2MX$PORTBE 000000                      ?___ftge 0001                      ?___wmul 000F  
                    _CCP2CON 000FBA                      ?_fround 0024                 ??_WAIT_1_SEC 0001  
                  ?___awtoft 0015                    ?___ftpack 0001                      ?_printf 0040  
  Select_ADC_Channel@channel 0001                    ?___lltoft 0009                 ??_WAIT_N_SEC 0001  
          ??_Activate_Buzzer 0001                   ??_Day_Mode 0009             PED_Control@i_816 0007  
                 ??_Init_ADC 0001          __size_of_Night_Mode 0096              _BCD_Lower_Digit 313C  
         __end_of_WAIT_1_SEC 31D2                   ??_Set_EWLT 0001                   ??_Set_NSLT 0001  
                WAIT_N_SEC@i 0002            __end_of__npowers_ 1050                      __Hparam 0000  
                 _scale$1703 0027           __end_of_WAIT_N_SEC 3122                      __Lparam 0000  
            __size_of_Set_EW 0036              __size_of_Set_NS 0036              __size_of___ftge 0096  
                    ___awdiv 2AA6                      ___ftadd 211C                      ___awmod 2CF4  
                    ___ftdiv 26D8                      ___ftneg 30C2                      ___lldiv 2C68  
            __size_of___wmul 0028                      ___ftmul 24FA                      ___llmod 2D76  
                    ___ftsub 2EB6                      ___fttol 25F2        __size_of_get_full_ADC 0026  
               __psmallconst 1000                      __pcinit 304A                   ??___awtoft 0018  
                 ??___ftpack 0006              __size_of_fround 0244                      __ramtop 1000  
                 ??___lltoft 000D                      __ptext0 27BA                      __ptext1 109C  
                    __ptext2 1AF8                      __ptext3 31A8                      __ptext4 30E6  
                    __ptext5 1ED8                      __ptext6 3074                      __ptext7 24FA  
                    __ptext8 2CF4                      __ptext9 2AA6              __size_of_printf 0A5C  
          __end_of_init_UART 3196                    _T0CONbits 000FD5                  ?__div_to_l_ 0001  
                    _dpowers 1001                      _isdigit 30E6             ___awmod@dividend 0001  
       end_of_initialization 306A         BCD_Lower_Digit@digit 0001                __Lmediumconst 0000  
               _get_full_ADC 309C              ___lldiv@divisor 0005                 PED_Control@i 0005  
            ___lldiv@counter 000D                    _RCSTAbits 000FAB                      printf@c 0063  
                    printf@f 0040                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE            _WAIT_1_SEC_W_BEEP 316C  
             __tdiv_to_l_@f1 0001               __tdiv_to_l_@f2 0004           ?_WAIT_1_SEC_W_BEEP 0001  
              ??__tdiv_to_l_ 0007                    _PORTAbits 000F80                    _PORTBbits 000F81  
                  _PORTDbits 000F83                    _PORTEbits 000F84          ??_WAIT_1_SEC_W_BEEP 0001  
                  _TRISCbits 000F94      __end_of_BCD_Lower_Digit 3156       __size_of_WAIT_HALF_SEC 001A  
            _BCD_Upper_Digit 2F36                  ___ftdiv@exp 0026                  printf@width 005C  
                  _TXSTAbits 000FAC           PED_Control@Num_Sec 0003           get_full_ADC@result 0005  
        __size_of__div_to_l_ 010A    __end_of_WAIT_1_SEC_W_BEEP 3182                  ___ftmul@exp 001E  
             __end_of_Set_EW 304A               __end_of_Set_NS 2FDE               __end_of___ftge 2BD2  
             __end_of___wmul 309C                __pidataCOMRAM 31DE                 ??_Night_Mode 0003  
             __end_of_fround 211C               __end_of_printf 1AF8          start_initialization 304A  
                  _Init_TRIS 3156          __end_of__tdiv_to_l_ 23F0            __size_of_Day_Mode 00B6  
                  _OpenUSART 2DE6              ___llmod@divisor 0012             __CFG_OSC$INTIO67 000000  
          __size_of_Init_ADC 000E              ___llmod@counter 0016           __end_of_Night_Mode 2C68  
                   ??_Set_EW 0001                     ??_Set_NS 0001            __size_of_Set_EWLT 0036  
            _Activate_Buzzer 3196            __size_of_Set_NSLT 0036                     ??___ftge 0007  
                   ??___wmul 0013                _WAIT_HALF_SEC 3122           _Select_ADC_Channel 31D2  
                   ??_fround 0027                     ??_printf 0045                   fround@prec 002D  
          __size_of___awtoft 003C            __size_of___ftpack 00C6          ?_Select_ADC_Channel 0001  
          __size_of___lltoft 0060                ??_PED_Control 0004                   ?_Init_TRIS 0001  
    __end_of_BCD_Upper_Digit 2F72                 _isdigit$1464 0002             ?_BCD_Lower_Digit 0001  
                 ?_OpenUSART 0001         ??_Select_ADC_Channel 0001   __size_of_WAIT_1_SEC_W_BEEP 0016  
             ?_WAIT_HALF_SEC 0001                     ?___awdiv 0007                     ?___ftadd 002E  
                   ?___awmod 0001                     ?___ftdiv 0019                     ?___ftneg 0001  
                   ?___lldiv 0001                     ?___ftmul 0015                     ?___llmod 000E  
                   ?___ftsub 003A        BCD_Upper_Digit@Port_E 0001                    __npowers_ 1029  
                   ?___fttol 002B                  __tdiv_to_l_ 22E0                 ??__div_to_l_ 0007  
                __smallconst 1000                     ?_isdigit 0001                    _init_UART 3182  
             __size_of_scale 03E0               __size_of_putch 000E          __end_of_PED_Control 2AA6  
    __end_of_Activate_Buzzer 31A8               ___wmul@product 0013                     _PIE1bits 000F9D  
                   _PIR1bits 000F9E           __end_of__div_to_l_ 24FA                   _ADCON0bits 000FC2  
          ___wmul@multiplier 000F                   printf@flag 005A                   printf@fval 005E  
                  main@nStep 0067                   printf@prec 0061                     _Day_Mode 2958  
                ??_Init_TRIS 0001                    main@volts 0064                   ?_init_UART 0001  
           ?_BCD_Upper_Digit 0001                    copy_data0 305E                     _Init_ADC 31B6  
                ??_OpenUSART 0003              OpenUSART@config 0003                     _Set_EWLT 2FDE  
                   _Set_NSLT 2F72                     __Hrparam 0000              ??_WAIT_HALF_SEC 0001  
                   __Lrparam 0000             __size_of___awdiv 0096             __size_of___ftadd 01C4  
           __size_of___awmod 0082             __size_of___ftdiv 00E2             __size_of___ftneg 0024  
           __size_of___lldiv 008C             __size_of___ftmul 00F8             __size_of___llmod 0070  
           __size_of___ftsub 0044             __size_of___fttol 00E6                     ___awtoft 2EFA  
                   ___ftpack 2892                  _fround$1701 002A                  _fround$1702 0027  
                   ___lltoft 2E56             __size_of_isdigit 0022                  _PED_Control 2A0E  
                   __ptext10 22E0                     __ptext11 23F0                     __ptext20 3182  
                   __ptext12 2E56                     __ptext21 2DE6                     __ptext13 2D76  
                   __ptext30 2958                     __ptext22 309C                     __ptext14 2C68  
                   __ptext31 3108                     __ptext23 26D8                     __ptext15 25F2  
                   __ptext40 31EA                     __ptext32 31C4                     __ptext24 2EFA  
                   __ptext16 2EB6                     __ptext41 3196                     __ptext33 2F72  
                   __ptext25 2892                     __ptext17 211C                     __ptext42 2F36  
                   __ptext34 2FA8                     __ptext26 31D2                     __ptext18 30C2  
                   __ptext43 313C                     __ptext35 2FDE                     __ptext27 2BD2  
                   __ptext19 2B3C                     __ptext36 3014                     __ptext28 3156  
                   __ptext37 2A0E                     __ptext29 31B6                     __ptext38 316C  
                   __ptext39 3122                     __powers_ 1050         BCD_Upper_Digit@digit 0002  
           ?_Activate_Buzzer 0001                __size_of_main 00D8                    printf@exp 0058  
                  printf@val 0054                   _INTCONbits 000FF2               OpenUSART@spbrg 0001  
                ??_init_UART 0004                     isdigit@c 0003                Set_EWLT@color 0001  
                   scale@scl 002A             __tdiv_to_l_@exp1 000F             __tdiv_to_l_@cntr 000E  
           __tdiv_to_l_@quot 000A             ___lldiv@dividend 0001                     printf@ap 004E  
                 _WAIT_1_SEC 31C4                 ?__tdiv_to_l_ 0001                  _printf$1704 004B  
                 _WAIT_N_SEC 3108             ___lldiv@quotient 0009                Set_NSLT@color 0001  
              ?_get_full_ADC 0001     __size_of_BCD_Lower_Digit 001A  __size_of_Select_ADC_Channel 000C  
